/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package EITLERP.FeltSales.ProductionReport;

import EITLERP.*;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment; 
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author
 */
public class frmProductionReport extends javax.swing.JApplet {

    private EITLTableModel DataModelGroupLoom = new EITLTableModel();
    private EITLTableModel DataModelOrderVSActual = new EITLTableModel();
    private EITLTableModel DataModelWDPcwiseAgewise = new EITLTableModel();
    private EITLTableModel DataModelMDPcwiseAgewise = new EITLTableModel();
    private EITLTableModel DataModelNDPcwiseAgewise = new EITLTableModel();
    private EITLTableModel DataModelFDPcwiseAgewise = new EITLTableModel();
    private EITLTableModel DataModelBeamWeavePcs = new EITLTableModel();
    private EITLTableModel DataModelWeavedMendPcs = new EITLTableModel();
    private EITLTableModel DataModelMendedNeedlePcs = new EITLTableModel();
    private EITLTableModel DataModelNeedledFinishPcs = new EITLTableModel();
     private EITLTableModel DataModelMendedSeamPcs = new EITLTableModel();
    private EITLTableModel DataModelPlanningPcs = new EITLTableModel();

    private EITLTableModel DataModelMDPendingPc = new EITLTableModel();

    clsExcelExporter exp = new clsExcelExporter();

    private EITLComboModel cmbYearModel;
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbLoomModel;

    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        setSize(1000, 650);

        FormatGrid();
        GenerateCombo();
        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getMonth(EITLERPGLOBAL.getCurrentDateDB()));
        cmbYear.setSelectedIndex(1);

        lblAsOnDate.setVisible(false);
        txtAsOnDate.setVisible(false);
        txtAsOnDate.setText(EITLERPGLOBAL.getCurrentDate());

        jTabbedPane2StateChanged(null);
//        jTabbedPane2.remove(Report3);
//        jTabbedPane2.remove(Report4);
//        jTabbedPane2.remove(Report5);
//        jTabbedPane2.remove(Report6);
//        jTabbedPane2.remove(Report7);
//        jTabbedPane2.remove(Report8);
//        jTabbedPane2.remove(Report11);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        Report1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableGroupLoom = new javax.swing.JTable();
        btnGroupLoom = new javax.swing.JButton();
        btnExcelGroupLoom = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtThoriticalTotal = new javax.swing.JTextField();
        txtGreyTotal = new javax.swing.JTextField();
        cmbGLRptType = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        Report2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableOrderVSActual = new javax.swing.JTable();
        btnOrderVSActual = new javax.swing.JButton();
        btnExcelOrderVSActual = new javax.swing.JButton();
        Report3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableWDPcwiseAgewise = new javax.swing.JTable();
        btnWDPcwiseAgewise = new javax.swing.JButton();
        btnExcelWDPcwiseAgewise = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtWDGreyTotal = new javax.swing.JTextField();
        txtWDAtAvg = new javax.swing.JTextField();
        txtWDStdDeviation = new javax.swing.JTextField();
        txtWD2SDMax = new javax.swing.JTextField();
        txtWD2SDMin = new javax.swing.JTextField();
        txtWD3SDMax = new javax.swing.JTextField();
        txtWD3SDMin = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        Report4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableMDPcwiseAgewise = new javax.swing.JTable();
        btnMDPcwiseAgewise = new javax.swing.JButton();
        btnExcelMDPcwiseAgewise = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtMDGreyTotal = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtMDAtAvg = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtMD2SDMax = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtMDStdDeviation = new javax.swing.JTextField();
        txtMD2SDMin = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtMD3SDMax = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtMD3SDMin = new javax.swing.JTextField();
        Report5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableNDPcwiseAgewise = new javax.swing.JTable();
        btnNDPcwiseAgewise = new javax.swing.JButton();
        btnExcelNDPcwiseAgewise = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtNDGreyTotal = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtNDAtAvg = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtND2SDMax = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtNDStdDeviation = new javax.swing.JTextField();
        txtND2SDMin = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        txtND3SDMax = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtND3SDMin = new javax.swing.JTextField();
        Report6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableFDPcwiseAgewise = new javax.swing.JTable();
        btnFDPcwiseAgewise = new javax.swing.JButton();
        btnExcelFDPcwiseAgewise = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtFDGreyTotal = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtFDAtAvg = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtFD2SDMax = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        txtFDStdDeviation = new javax.swing.JTextField();
        txtFD2SDMin = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txtFD3SDMax = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFD3SDMin = new javax.swing.JTextField();
        Report7 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        TableBeamWeavePcs = new javax.swing.JTable();
        btnBeamWeavePcs = new javax.swing.JButton();
        btnExcelBeamWeavePcs = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        txtBWPcsActualTotal = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtBWPcsWtAvg = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtBWPcs2SDMax = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtBWPcsStdDeviation = new javax.swing.JTextField();
        txtBWPcs2SDMin = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        txtBWPcs3SDMax = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        txtBWPcs3SDMin = new javax.swing.JTextField();
        Report8 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        TableWeavedMendPcs = new javax.swing.JTable();
        btnWeavedMendPcs = new javax.swing.JButton();
        btnExcelWeavedMendPcs = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        txtWMPcsGreyTotal = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        txtWMPcsWtAvg = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtWMPcs2SDMax = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        txtWMPcsStdDeviation = new javax.swing.JTextField();
        txtWMPcs2SDMin = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtWMPcs3SDMax = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        txtWMPcs3SDMin = new javax.swing.JTextField();
        Report9 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        TableMendedNeedlePcs = new javax.swing.JTable();
        btnMendedNeedlePcs = new javax.swing.JButton();
        btnExcelMendedNeedlePcs = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        txtMNPcsGreyTotal = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        txtMNPcsWtAvg = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        txtMNPcs2SDMax = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        txtMNPcsStdDeviation = new javax.swing.JTextField();
        txtMNPcs2SDMin = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        txtMNPcs3SDMax = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        txtMNPcs3SDMin = new javax.swing.JTextField();
        Report12 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        TableMendedSeamPcs = new javax.swing.JTable();
        btnMendedSeamPcs = new javax.swing.JButton();
        btnExcelMendedSeamPcs = new javax.swing.JButton();
        jLabel71 = new javax.swing.JLabel();
        txtMSPcsGreyTotal = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        txtMSPcsWtAvg = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        txtMSPcs2SDMax = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        txtMSPcsStdDeviation = new javax.swing.JTextField();
        txtMSPcs2SDMin = new javax.swing.JTextField();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        txtMSPcs3SDMax = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        txtMSPcs3SDMin = new javax.swing.JTextField();
        Report10 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        TableNeedledFinishPcs = new javax.swing.JTable();
        btnNeedledFinishPcs = new javax.swing.JButton();
        btnExcelNeedledFinishPcs = new javax.swing.JButton();
        jLabel57 = new javax.swing.JLabel();
        txtNFPcsGreyTotal = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        txtNFPcsWtAvg = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        txtNFPcs2SDMax = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        txtNFPcsStdDeviation = new javax.swing.JTextField();
        txtNFPcs2SDMin = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        txtNFPcs3SDMax = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        txtNFPcs3SDMin = new javax.swing.JTextField();
        Report11 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        TablePlanningPcs = new javax.swing.JTable();
        btnPlanningPcs = new javax.swing.JButton();
        btnExcelPlanningPcs = new javax.swing.JButton();
        jLabel64 = new javax.swing.JLabel();
        txtPLPcsGreyTotal = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        txtPLPcsWtAvg = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        txtPLPcs2SDMax = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        txtPLPcsStdDeviation = new javax.swing.JTextField();
        txtPLPcs2SDMin = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        txtPLPcs3SDMax = new javax.swing.JTextField();
        jLabel70 = new javax.swing.JLabel();
        txtPLPcs3SDMin = new javax.swing.JTextField();
        CLR_BTN = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        lblMonth = new javax.swing.JLabel();
        lblYear = new javax.swing.JLabel();
        lblAsOnDate = new javax.swing.JLabel();
        txtAsOnDate = new javax.swing.JTextField();
        cmbYear = new javax.swing.JComboBox();
        cmbMonth = new javax.swing.JComboBox();
        cmbLoom = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        txtBeam = new javax.swing.JTextField();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Production Report");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 1000, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 120, 1000, 10);

        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });
        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });
        jTabbedPane2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTabbedPane2KeyPressed(evt);
            }
        });

        Report1.setLayout(null);

        TableGroupLoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableGroupLoom);

        Report1.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 960, 320);

        btnGroupLoom.setText("Show Data");
        btnGroupLoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGroupLoomActionPerformed(evt);
            }
        });
        Report1.add(btnGroupLoom);
        btnGroupLoom.setBounds(741, 10, 180, 23);

        btnExcelGroupLoom.setText("Export To Excel");
        btnExcelGroupLoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelGroupLoomActionPerformed(evt);
            }
        });
        Report1.add(btnExcelGroupLoom);
        btnExcelGroupLoom.setBounds(30, 10, 170, 23);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Grey Weight Total : ");
        Report1.add(jLabel1);
        jLabel1.setBounds(630, 380, 160, 30);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Thoritical Weight Total : ");
        Report1.add(jLabel3);
        jLabel3.setBounds(260, 380, 190, 30);

        txtThoriticalTotal.setEditable(false);
        txtThoriticalTotal.setDisabledTextColor(java.awt.Color.black);
        Report1.add(txtThoriticalTotal);
        txtThoriticalTotal.setBounds(450, 380, 160, 20);

        txtGreyTotal.setEditable(false);
        txtGreyTotal.setToolTipText("");
        txtGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report1.add(txtGreyTotal);
        txtGreyTotal.setBounds(790, 380, 160, 20);

        cmbGLRptType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Summary", "Detail" }));
        Report1.add(cmbGLRptType);
        cmbGLRptType.setBounds(591, 10, 110, 20);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Report Type : ");
        Report1.add(jLabel5);
        jLabel5.setBounds(460, 10, 130, 30);

        jTabbedPane2.addTab("Groupwise Loomwise", Report1);

        Report2.setLayout(null);

        TableOrderVSActual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TableOrderVSActual);

        Report2.add(jScrollPane7);
        jScrollPane7.setBounds(0, 40, 960, 320);

        btnOrderVSActual.setText("Show Data");
        btnOrderVSActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderVSActualActionPerformed(evt);
            }
        });
        Report2.add(btnOrderVSActual);
        btnOrderVSActual.setBounds(741, 10, 180, 23);

        btnExcelOrderVSActual.setText("Export To Excel");
        btnExcelOrderVSActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelOrderVSActualActionPerformed(evt);
            }
        });
        Report2.add(btnExcelOrderVSActual);
        btnExcelOrderVSActual.setBounds(30, 10, 170, 23);

        jTabbedPane2.addTab("Beam Order VS Actual", Report2);

        Report3.setLayout(null);

        TableWDPcwiseAgewise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableWDPcwiseAgewise);

        Report3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 40, 960, 300);

        btnWDPcwiseAgewise.setText("Show Data");
        btnWDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report3.add(btnWDPcwiseAgewise);
        btnWDPcwiseAgewise.setBounds(741, 10, 180, 23);

        btnExcelWDPcwiseAgewise.setText("Export To Excel");
        btnExcelWDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelWDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report3.add(btnExcelWDPcwiseAgewise);
        btnExcelWDPcwiseAgewise.setBounds(30, 10, 170, 23);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Standard Deviation :");
        Report3.add(jLabel4);
        jLabel4.setBounds(190, 350, 160, 30);

        txtWDGreyTotal.setEditable(false);
        txtWDGreyTotal.setToolTipText("");
        txtWDGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWDGreyTotal);
        txtWDGreyTotal.setBounds(790, 350, 160, 20);

        txtWDAtAvg.setEditable(false);
        txtWDAtAvg.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWDAtAvg);
        txtWDAtAvg.setBounds(110, 350, 80, 20);

        txtWDStdDeviation.setEditable(false);
        txtWDStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWDStdDeviation);
        txtWDStdDeviation.setBounds(350, 350, 80, 20);

        txtWD2SDMax.setEditable(false);
        txtWD2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWD2SDMax);
        txtWD2SDMax.setBounds(110, 380, 80, 20);

        txtWD2SDMin.setEditable(false);
        txtWD2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWD2SDMin);
        txtWD2SDMin.setBounds(290, 380, 80, 20);

        txtWD3SDMax.setEditable(false);
        txtWD3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWD3SDMax);
        txtWD3SDMax.setBounds(500, 380, 80, 20);

        txtWD3SDMin.setEditable(false);
        txtWD3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report3.add(txtWD3SDMin);
        txtWD3SDMin.setBounds(680, 380, 80, 20);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("Grey Weight Total : ");
        Report3.add(jLabel11);
        jLabel11.setBounds(630, 350, 160, 30);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("3SD Min :");
        Report3.add(jLabel10);
        jLabel10.setBounds(580, 380, 100, 30);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("Wt.Avg :");
        Report3.add(jLabel14);
        jLabel14.setBounds(10, 350, 100, 30);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("2SD Max :");
        Report3.add(jLabel15);
        jLabel15.setBounds(10, 380, 100, 30);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel16.setText("2SD Min :");
        Report3.add(jLabel16);
        jLabel16.setBounds(190, 380, 100, 30);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("3SD Max :");
        Report3.add(jLabel17);
        jLabel17.setBounds(400, 380, 100, 30);

        jTabbedPane2.addTab("Weaving Delivery Pc.wise Agewise", Report3);

        Report4.setLayout(null);

        TableMDPcwiseAgewise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableMDPcwiseAgewise);

        Report4.add(jScrollPane4);
        jScrollPane4.setBounds(10, 40, 960, 300);

        btnMDPcwiseAgewise.setText("Show Data");
        btnMDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report4.add(btnMDPcwiseAgewise);
        btnMDPcwiseAgewise.setBounds(741, 10, 180, 23);

        btnExcelMDPcwiseAgewise.setText("Export To Excel");
        btnExcelMDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelMDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report4.add(btnExcelMDPcwiseAgewise);
        btnExcelMDPcwiseAgewise.setBounds(30, 10, 170, 23);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Grey Weight Total : ");
        Report4.add(jLabel6);
        jLabel6.setBounds(630, 350, 160, 30);

        txtMDGreyTotal.setEditable(false);
        txtMDGreyTotal.setToolTipText("");
        txtMDGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMDGreyTotal);
        txtMDGreyTotal.setBounds(790, 350, 160, 20);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel18.setText("Wt.Avg :");
        Report4.add(jLabel18);
        jLabel18.setBounds(10, 350, 100, 30);

        txtMDAtAvg.setEditable(false);
        txtMDAtAvg.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMDAtAvg);
        txtMDAtAvg.setBounds(110, 350, 80, 20);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel19.setText("2SD Max :");
        Report4.add(jLabel19);
        jLabel19.setBounds(10, 380, 100, 30);

        txtMD2SDMax.setEditable(false);
        txtMD2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMD2SDMax);
        txtMD2SDMax.setBounds(110, 380, 80, 20);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel20.setText("Standard Deviation :");
        Report4.add(jLabel20);
        jLabel20.setBounds(190, 350, 160, 30);

        txtMDStdDeviation.setEditable(false);
        txtMDStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMDStdDeviation);
        txtMDStdDeviation.setBounds(350, 350, 80, 20);

        txtMD2SDMin.setEditable(false);
        txtMD2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMD2SDMin);
        txtMD2SDMin.setBounds(290, 380, 80, 20);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel21.setText("2SD Min :");
        Report4.add(jLabel21);
        jLabel21.setBounds(190, 380, 100, 30);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel22.setText("3SD Max :");
        Report4.add(jLabel22);
        jLabel22.setBounds(400, 380, 100, 30);

        txtMD3SDMax.setEditable(false);
        txtMD3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMD3SDMax);
        txtMD3SDMax.setBounds(500, 380, 80, 20);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel23.setText("3SD Min :");
        Report4.add(jLabel23);
        jLabel23.setBounds(580, 380, 100, 30);

        txtMD3SDMin.setEditable(false);
        txtMD3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report4.add(txtMD3SDMin);
        txtMD3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Mending Delivery Pc.wise Agewise", Report4);

        Report5.setLayout(null);

        TableNDPcwiseAgewise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableNDPcwiseAgewise);

        Report5.add(jScrollPane5);
        jScrollPane5.setBounds(10, 40, 960, 300);

        btnNDPcwiseAgewise.setText("Show Data");
        btnNDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report5.add(btnNDPcwiseAgewise);
        btnNDPcwiseAgewise.setBounds(741, 10, 180, 23);

        btnExcelNDPcwiseAgewise.setText("Export To Excel");
        btnExcelNDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelNDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report5.add(btnExcelNDPcwiseAgewise);
        btnExcelNDPcwiseAgewise.setBounds(30, 10, 170, 23);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Grey Weight Total : ");
        Report5.add(jLabel7);
        jLabel7.setBounds(630, 350, 160, 30);

        txtNDGreyTotal.setEditable(false);
        txtNDGreyTotal.setToolTipText("");
        txtNDGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtNDGreyTotal);
        txtNDGreyTotal.setBounds(790, 350, 160, 20);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel24.setText("Wt.Avg :");
        Report5.add(jLabel24);
        jLabel24.setBounds(10, 350, 100, 30);

        txtNDAtAvg.setEditable(false);
        txtNDAtAvg.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtNDAtAvg);
        txtNDAtAvg.setBounds(110, 350, 80, 20);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText("2SD Max :");
        Report5.add(jLabel25);
        jLabel25.setBounds(10, 380, 100, 30);

        txtND2SDMax.setEditable(false);
        txtND2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtND2SDMax);
        txtND2SDMax.setBounds(110, 380, 80, 20);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText("Standard Deviation :");
        Report5.add(jLabel26);
        jLabel26.setBounds(190, 350, 160, 30);

        txtNDStdDeviation.setEditable(false);
        txtNDStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtNDStdDeviation);
        txtNDStdDeviation.setBounds(350, 350, 80, 20);

        txtND2SDMin.setEditable(false);
        txtND2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtND2SDMin);
        txtND2SDMin.setBounds(290, 380, 80, 20);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel27.setText("2SD Min :");
        Report5.add(jLabel27);
        jLabel27.setBounds(190, 380, 100, 30);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel28.setText("3SD Max :");
        Report5.add(jLabel28);
        jLabel28.setBounds(400, 380, 100, 30);

        txtND3SDMax.setEditable(false);
        txtND3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtND3SDMax);
        txtND3SDMax.setBounds(500, 380, 80, 20);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel29.setText("3SD Min :");
        Report5.add(jLabel29);
        jLabel29.setBounds(580, 380, 100, 30);

        txtND3SDMin.setEditable(false);
        txtND3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report5.add(txtND3SDMin);
        txtND3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Needling Delivery Pc.wise Agewise", Report5);

        Report6.setLayout(null);

        TableFDPcwiseAgewise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableFDPcwiseAgewise);

        Report6.add(jScrollPane6);
        jScrollPane6.setBounds(10, 40, 960, 300);

        btnFDPcwiseAgewise.setText("Show Data");
        btnFDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report6.add(btnFDPcwiseAgewise);
        btnFDPcwiseAgewise.setBounds(741, 10, 180, 23);

        btnExcelFDPcwiseAgewise.setText("Export To Excel");
        btnExcelFDPcwiseAgewise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelFDPcwiseAgewiseActionPerformed(evt);
            }
        });
        Report6.add(btnExcelFDPcwiseAgewise);
        btnExcelFDPcwiseAgewise.setBounds(30, 10, 170, 23);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Grey Weight Total : ");
        Report6.add(jLabel8);
        jLabel8.setBounds(630, 350, 160, 30);

        txtFDGreyTotal.setEditable(false);
        txtFDGreyTotal.setToolTipText("");
        txtFDGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFDGreyTotal);
        txtFDGreyTotal.setBounds(790, 350, 160, 20);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel30.setText("Wt.Avg :");
        Report6.add(jLabel30);
        jLabel30.setBounds(10, 350, 100, 30);

        txtFDAtAvg.setEditable(false);
        txtFDAtAvg.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFDAtAvg);
        txtFDAtAvg.setBounds(110, 350, 80, 20);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel31.setText("2SD Max :");
        Report6.add(jLabel31);
        jLabel31.setBounds(10, 380, 100, 30);

        txtFD2SDMax.setEditable(false);
        txtFD2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFD2SDMax);
        txtFD2SDMax.setBounds(110, 380, 80, 20);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel32.setText("Standard Deviation :");
        Report6.add(jLabel32);
        jLabel32.setBounds(190, 350, 160, 30);

        txtFDStdDeviation.setEditable(false);
        txtFDStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFDStdDeviation);
        txtFDStdDeviation.setBounds(350, 350, 80, 20);

        txtFD2SDMin.setEditable(false);
        txtFD2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFD2SDMin);
        txtFD2SDMin.setBounds(290, 380, 80, 20);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel33.setText("2SD Min :");
        Report6.add(jLabel33);
        jLabel33.setBounds(190, 380, 100, 30);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel34.setText("3SD Max :");
        Report6.add(jLabel34);
        jLabel34.setBounds(400, 380, 100, 30);

        txtFD3SDMax.setEditable(false);
        txtFD3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFD3SDMax);
        txtFD3SDMax.setBounds(500, 380, 80, 20);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel35.setText("3SD Min :");
        Report6.add(jLabel35);
        jLabel35.setBounds(580, 380, 100, 30);

        txtFD3SDMin.setEditable(false);
        txtFD3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report6.add(txtFD3SDMin);
        txtFD3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Finishing Delivery Pc.wise Agewise", Report6);

        Report7.setLayout(null);

        TableBeamWeavePcs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TableBeamWeavePcs);

        Report7.add(jScrollPane9);
        jScrollPane9.setBounds(10, 40, 960, 300);

        btnBeamWeavePcs.setText("Show Data");
        btnBeamWeavePcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeamWeavePcsActionPerformed(evt);
            }
        });
        Report7.add(btnBeamWeavePcs);
        btnBeamWeavePcs.setBounds(741, 10, 180, 23);

        btnExcelBeamWeavePcs.setText("Export To Excel");
        btnExcelBeamWeavePcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelBeamWeavePcsActionPerformed(evt);
            }
        });
        Report7.add(btnExcelBeamWeavePcs);
        btnExcelBeamWeavePcs.setBounds(30, 10, 170, 23);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel36.setText("Actual Weight Total : ");
        Report7.add(jLabel36);
        jLabel36.setBounds(630, 350, 160, 30);

        txtBWPcsActualTotal.setEditable(false);
        txtBWPcsActualTotal.setToolTipText("");
        txtBWPcsActualTotal.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcsActualTotal);
        txtBWPcsActualTotal.setBounds(790, 350, 160, 20);

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel37.setText("Wt.Avg :");
        Report7.add(jLabel37);
        jLabel37.setBounds(10, 350, 100, 30);

        txtBWPcsWtAvg.setEditable(false);
        txtBWPcsWtAvg.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcsWtAvg);
        txtBWPcsWtAvg.setBounds(110, 350, 80, 20);

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel38.setText("2SD Max :");
        Report7.add(jLabel38);
        jLabel38.setBounds(10, 380, 100, 30);

        txtBWPcs2SDMax.setEditable(false);
        txtBWPcs2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcs2SDMax);
        txtBWPcs2SDMax.setBounds(110, 380, 80, 20);

        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel39.setText("Standard Deviation :");
        Report7.add(jLabel39);
        jLabel39.setBounds(190, 350, 160, 30);

        txtBWPcsStdDeviation.setEditable(false);
        txtBWPcsStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcsStdDeviation);
        txtBWPcsStdDeviation.setBounds(350, 350, 80, 20);

        txtBWPcs2SDMin.setEditable(false);
        txtBWPcs2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcs2SDMin);
        txtBWPcs2SDMin.setBounds(290, 380, 80, 20);

        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel40.setText("2SD Min :");
        Report7.add(jLabel40);
        jLabel40.setBounds(190, 380, 100, 30);

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel41.setText("3SD Max :");
        Report7.add(jLabel41);
        jLabel41.setBounds(400, 380, 100, 30);

        txtBWPcs3SDMax.setEditable(false);
        txtBWPcs3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcs3SDMax);
        txtBWPcs3SDMax.setBounds(500, 380, 80, 20);

        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel42.setText("3SD Min :");
        Report7.add(jLabel42);
        jLabel42.setBounds(580, 380, 100, 30);

        txtBWPcs3SDMin.setEditable(false);
        txtBWPcs3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report7.add(txtBWPcs3SDMin);
        txtBWPcs3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Beam Order Made-Yet to Weave Out", Report7);

        Report8.setLayout(null);

        TableWeavedMendPcs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(TableWeavedMendPcs);

        Report8.add(jScrollPane10);
        jScrollPane10.setBounds(10, 40, 960, 300);

        btnWeavedMendPcs.setText("Show Data");
        btnWeavedMendPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWeavedMendPcsActionPerformed(evt);
            }
        });
        Report8.add(btnWeavedMendPcs);
        btnWeavedMendPcs.setBounds(741, 10, 180, 23);

        btnExcelWeavedMendPcs.setText("Export To Excel");
        btnExcelWeavedMendPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelWeavedMendPcsActionPerformed(evt);
            }
        });
        Report8.add(btnExcelWeavedMendPcs);
        btnExcelWeavedMendPcs.setBounds(30, 10, 170, 23);

        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel43.setText("Grey Weight Total : ");
        Report8.add(jLabel43);
        jLabel43.setBounds(530, 350, 260, 30);

        txtWMPcsGreyTotal.setEditable(false);
        txtWMPcsGreyTotal.setToolTipText("");
        txtWMPcsGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcsGreyTotal);
        txtWMPcsGreyTotal.setBounds(790, 350, 160, 20);

        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel44.setText("Wt.Avg :");
        Report8.add(jLabel44);
        jLabel44.setBounds(10, 350, 100, 30);

        txtWMPcsWtAvg.setEditable(false);
        txtWMPcsWtAvg.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcsWtAvg);
        txtWMPcsWtAvg.setBounds(110, 350, 80, 20);

        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel45.setText("2SD Max :");
        Report8.add(jLabel45);
        jLabel45.setBounds(10, 380, 100, 30);

        txtWMPcs2SDMax.setEditable(false);
        txtWMPcs2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcs2SDMax);
        txtWMPcs2SDMax.setBounds(110, 380, 80, 20);

        jLabel46.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel46.setText("Standard Deviation :");
        Report8.add(jLabel46);
        jLabel46.setBounds(190, 350, 160, 30);

        txtWMPcsStdDeviation.setEditable(false);
        txtWMPcsStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcsStdDeviation);
        txtWMPcsStdDeviation.setBounds(350, 350, 80, 20);

        txtWMPcs2SDMin.setEditable(false);
        txtWMPcs2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcs2SDMin);
        txtWMPcs2SDMin.setBounds(290, 380, 80, 20);

        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel47.setText("2SD Min :");
        Report8.add(jLabel47);
        jLabel47.setBounds(190, 380, 100, 30);

        jLabel48.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel48.setText("3SD Max :");
        Report8.add(jLabel48);
        jLabel48.setBounds(400, 380, 100, 30);

        txtWMPcs3SDMax.setEditable(false);
        txtWMPcs3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcs3SDMax);
        txtWMPcs3SDMax.setBounds(500, 380, 80, 20);

        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel49.setText("3SD Min :");
        Report8.add(jLabel49);
        jLabel49.setBounds(580, 380, 100, 30);

        txtWMPcs3SDMin.setEditable(false);
        txtWMPcs3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report8.add(txtWMPcs3SDMin);
        txtWMPcs3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Weaved-Yet to Mend Out", Report8);

        Report9.setLayout(null);

        TableMendedNeedlePcs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(TableMendedNeedlePcs);

        Report9.add(jScrollPane11);
        jScrollPane11.setBounds(10, 40, 960, 300);

        btnMendedNeedlePcs.setText("Show Data");
        btnMendedNeedlePcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMendedNeedlePcsActionPerformed(evt);
            }
        });
        Report9.add(btnMendedNeedlePcs);
        btnMendedNeedlePcs.setBounds(741, 10, 180, 23);

        btnExcelMendedNeedlePcs.setText("Export To Excel");
        btnExcelMendedNeedlePcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelMendedNeedlePcsActionPerformed(evt);
            }
        });
        Report9.add(btnExcelMendedNeedlePcs);
        btnExcelMendedNeedlePcs.setBounds(30, 10, 170, 23);

        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel50.setText("Grey Weight Total : ");
        Report9.add(jLabel50);
        jLabel50.setBounds(540, 350, 250, 30);

        txtMNPcsGreyTotal.setEditable(false);
        txtMNPcsGreyTotal.setToolTipText("");
        txtMNPcsGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcsGreyTotal);
        txtMNPcsGreyTotal.setBounds(790, 350, 160, 20);

        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel51.setText("Wt.Avg :");
        Report9.add(jLabel51);
        jLabel51.setBounds(10, 350, 100, 30);

        txtMNPcsWtAvg.setEditable(false);
        txtMNPcsWtAvg.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcsWtAvg);
        txtMNPcsWtAvg.setBounds(110, 350, 80, 20);

        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel52.setText("2SD Max :");
        Report9.add(jLabel52);
        jLabel52.setBounds(10, 380, 100, 30);

        txtMNPcs2SDMax.setEditable(false);
        txtMNPcs2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcs2SDMax);
        txtMNPcs2SDMax.setBounds(110, 380, 80, 20);

        jLabel53.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel53.setText("Standard Deviation :");
        Report9.add(jLabel53);
        jLabel53.setBounds(190, 350, 160, 30);

        txtMNPcsStdDeviation.setEditable(false);
        txtMNPcsStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcsStdDeviation);
        txtMNPcsStdDeviation.setBounds(350, 350, 80, 20);

        txtMNPcs2SDMin.setEditable(false);
        txtMNPcs2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcs2SDMin);
        txtMNPcs2SDMin.setBounds(290, 380, 80, 20);

        jLabel54.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel54.setText("2SD Min :");
        Report9.add(jLabel54);
        jLabel54.setBounds(190, 380, 100, 30);

        jLabel55.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel55.setText("3SD Max :");
        Report9.add(jLabel55);
        jLabel55.setBounds(400, 380, 100, 30);

        txtMNPcs3SDMax.setEditable(false);
        txtMNPcs3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcs3SDMax);
        txtMNPcs3SDMax.setBounds(500, 380, 80, 20);

        jLabel56.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel56.setText("3SD Min :");
        Report9.add(jLabel56);
        jLabel56.setBounds(580, 380, 100, 30);

        txtMNPcs3SDMin.setEditable(false);
        txtMNPcs3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report9.add(txtMNPcs3SDMin);
        txtMNPcs3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Mended-Yet to Needle Out", Report9);

        Report12.setLayout(null);

        TableMendedSeamPcs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(TableMendedSeamPcs);

        Report12.add(jScrollPane14);
        jScrollPane14.setBounds(10, 40, 960, 300);

        btnMendedSeamPcs.setText("Show Data");
        btnMendedSeamPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMendedSeamPcsActionPerformed(evt);
            }
        });
        Report12.add(btnMendedSeamPcs);
        btnMendedSeamPcs.setBounds(741, 10, 180, 23);

        btnExcelMendedSeamPcs.setText("Export To Excel");
        btnExcelMendedSeamPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelMendedSeamPcsActionPerformed(evt);
            }
        });
        Report12.add(btnExcelMendedSeamPcs);
        btnExcelMendedSeamPcs.setBounds(30, 10, 170, 23);

        jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel71.setText("Grey Weight Total : ");
        Report12.add(jLabel71);
        jLabel71.setBounds(630, 350, 160, 30);

        txtMSPcsGreyTotal.setEditable(false);
        txtMSPcsGreyTotal.setToolTipText("");
        txtMSPcsGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcsGreyTotal);
        txtMSPcsGreyTotal.setBounds(790, 350, 160, 20);

        jLabel72.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel72.setText("Wt.Avg :");
        Report12.add(jLabel72);
        jLabel72.setBounds(10, 350, 100, 30);

        txtMSPcsWtAvg.setEditable(false);
        txtMSPcsWtAvg.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcsWtAvg);
        txtMSPcsWtAvg.setBounds(110, 350, 80, 20);

        jLabel73.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel73.setText("2SD Max :");
        Report12.add(jLabel73);
        jLabel73.setBounds(10, 380, 100, 30);

        txtMSPcs2SDMax.setEditable(false);
        txtMSPcs2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcs2SDMax);
        txtMSPcs2SDMax.setBounds(110, 380, 80, 20);

        jLabel74.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel74.setText("Standard Deviation :");
        Report12.add(jLabel74);
        jLabel74.setBounds(190, 350, 160, 30);

        txtMSPcsStdDeviation.setEditable(false);
        txtMSPcsStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcsStdDeviation);
        txtMSPcsStdDeviation.setBounds(350, 350, 80, 20);

        txtMSPcs2SDMin.setEditable(false);
        txtMSPcs2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcs2SDMin);
        txtMSPcs2SDMin.setBounds(290, 380, 80, 20);

        jLabel75.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel75.setText("2SD Min :");
        Report12.add(jLabel75);
        jLabel75.setBounds(190, 380, 100, 30);

        jLabel76.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel76.setText("3SD Max :");
        Report12.add(jLabel76);
        jLabel76.setBounds(400, 380, 100, 30);

        txtMSPcs3SDMax.setEditable(false);
        txtMSPcs3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcs3SDMax);
        txtMSPcs3SDMax.setBounds(500, 380, 80, 20);

        jLabel77.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel77.setText("3SD Min :");
        Report12.add(jLabel77);
        jLabel77.setBounds(580, 380, 100, 30);

        txtMSPcs3SDMin.setEditable(false);
        txtMSPcs3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report12.add(txtMSPcs3SDMin);
        txtMSPcs3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Mended- Yet to Seamed Out for HDS Only", Report12);

        Report10.setLayout(null);

        TableNeedledFinishPcs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(TableNeedledFinishPcs);

        Report10.add(jScrollPane12);
        jScrollPane12.setBounds(10, 40, 960, 300);

        btnNeedledFinishPcs.setText("Show Data");
        btnNeedledFinishPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNeedledFinishPcsActionPerformed(evt);
            }
        });
        Report10.add(btnNeedledFinishPcs);
        btnNeedledFinishPcs.setBounds(741, 10, 180, 23);

        btnExcelNeedledFinishPcs.setText("Export To Excel");
        btnExcelNeedledFinishPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelNeedledFinishPcsActionPerformed(evt);
            }
        });
        Report10.add(btnExcelNeedledFinishPcs);
        btnExcelNeedledFinishPcs.setBounds(30, 10, 170, 23);

        jLabel57.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel57.setText("Grey Weight Total : ");
        Report10.add(jLabel57);
        jLabel57.setBounds(630, 350, 160, 30);

        txtNFPcsGreyTotal.setEditable(false);
        txtNFPcsGreyTotal.setToolTipText("");
        txtNFPcsGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcsGreyTotal);
        txtNFPcsGreyTotal.setBounds(790, 350, 160, 20);

        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel58.setText("Wt.Avg :");
        Report10.add(jLabel58);
        jLabel58.setBounds(10, 350, 100, 30);

        txtNFPcsWtAvg.setEditable(false);
        txtNFPcsWtAvg.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcsWtAvg);
        txtNFPcsWtAvg.setBounds(110, 350, 80, 20);

        jLabel59.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel59.setText("2SD Max :");
        Report10.add(jLabel59);
        jLabel59.setBounds(10, 380, 100, 30);

        txtNFPcs2SDMax.setEditable(false);
        txtNFPcs2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcs2SDMax);
        txtNFPcs2SDMax.setBounds(110, 380, 80, 20);

        jLabel60.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel60.setText("Standard Deviation :");
        Report10.add(jLabel60);
        jLabel60.setBounds(190, 350, 160, 30);

        txtNFPcsStdDeviation.setEditable(false);
        txtNFPcsStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcsStdDeviation);
        txtNFPcsStdDeviation.setBounds(350, 350, 80, 20);

        txtNFPcs2SDMin.setEditable(false);
        txtNFPcs2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcs2SDMin);
        txtNFPcs2SDMin.setBounds(290, 380, 80, 20);

        jLabel61.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel61.setText("2SD Min :");
        Report10.add(jLabel61);
        jLabel61.setBounds(190, 380, 100, 30);

        jLabel62.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel62.setText("3SD Max :");
        Report10.add(jLabel62);
        jLabel62.setBounds(400, 380, 100, 30);

        txtNFPcs3SDMax.setEditable(false);
        txtNFPcs3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcs3SDMax);
        txtNFPcs3SDMax.setBounds(500, 380, 80, 20);

        jLabel63.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel63.setText("3SD Min :");
        Report10.add(jLabel63);
        jLabel63.setBounds(580, 380, 100, 30);

        txtNFPcs3SDMin.setEditable(false);
        txtNFPcs3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report10.add(txtNFPcs3SDMin);
        txtNFPcs3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Needled/Seamed-Yet to Finish Out", Report10);

        Report11.setLayout(null);

        TablePlanningPcs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(TablePlanningPcs);

        Report11.add(jScrollPane13);
        jScrollPane13.setBounds(10, 40, 960, 300);

        btnPlanningPcs.setText("Show Data");
        btnPlanningPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanningPcsActionPerformed(evt);
            }
        });
        Report11.add(btnPlanningPcs);
        btnPlanningPcs.setBounds(741, 10, 180, 23);

        btnExcelPlanningPcs.setText("Export To Excel");
        btnExcelPlanningPcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelPlanningPcsActionPerformed(evt);
            }
        });
        Report11.add(btnExcelPlanningPcs);
        btnExcelPlanningPcs.setBounds(30, 10, 170, 23);

        jLabel64.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel64.setText("Grey Weight Total : ");
        Report11.add(jLabel64);
        jLabel64.setBounds(630, 350, 160, 30);

        txtPLPcsGreyTotal.setEditable(false);
        txtPLPcsGreyTotal.setToolTipText("");
        txtPLPcsGreyTotal.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcsGreyTotal);
        txtPLPcsGreyTotal.setBounds(790, 350, 160, 20);

        jLabel65.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel65.setText("Wt.Avg :");
        Report11.add(jLabel65);
        jLabel65.setBounds(10, 350, 100, 30);

        txtPLPcsWtAvg.setEditable(false);
        txtPLPcsWtAvg.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcsWtAvg);
        txtPLPcsWtAvg.setBounds(110, 350, 80, 20);

        jLabel66.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel66.setText("2SD Max :");
        Report11.add(jLabel66);
        jLabel66.setBounds(10, 380, 100, 30);

        txtPLPcs2SDMax.setEditable(false);
        txtPLPcs2SDMax.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcs2SDMax);
        txtPLPcs2SDMax.setBounds(110, 380, 80, 20);

        jLabel67.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel67.setText("Standard Deviation :");
        Report11.add(jLabel67);
        jLabel67.setBounds(190, 350, 160, 30);

        txtPLPcsStdDeviation.setEditable(false);
        txtPLPcsStdDeviation.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcsStdDeviation);
        txtPLPcsStdDeviation.setBounds(350, 350, 80, 20);

        txtPLPcs2SDMin.setEditable(false);
        txtPLPcs2SDMin.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcs2SDMin);
        txtPLPcs2SDMin.setBounds(290, 380, 80, 20);

        jLabel68.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel68.setText("2SD Min :");
        Report11.add(jLabel68);
        jLabel68.setBounds(190, 380, 100, 30);

        jLabel69.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel69.setText("3SD Max :");
        Report11.add(jLabel69);
        jLabel69.setBounds(400, 380, 100, 30);

        txtPLPcs3SDMax.setEditable(false);
        txtPLPcs3SDMax.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcs3SDMax);
        txtPLPcs3SDMax.setBounds(500, 380, 80, 20);

        jLabel70.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel70.setText("3SD Min :");
        Report11.add(jLabel70);
        jLabel70.setBounds(580, 380, 100, 30);

        txtPLPcs3SDMin.setEditable(false);
        txtPLPcs3SDMin.setDisabledTextColor(java.awt.Color.black);
        Report11.add(txtPLPcs3SDMin);
        txtPLPcs3SDMin.setBounds(680, 380, 80, 20);

        jTabbedPane2.addTab("Ordered-Yet to Mfg Plan Out", Report11);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 140, 1000, 510);

        CLR_BTN.setText("Clear All");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(870, 30, 110, 30);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Loom No ");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(230, 60, 80, 20);

        lblMonth.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblMonth.setText("Month");
        getContentPane().add(lblMonth);
        lblMonth.setBounds(50, 30, 50, 14);

        lblYear.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblYear.setText("Year ");
        getContentPane().add(lblYear);
        lblYear.setBounds(230, 30, 50, 14);

        lblAsOnDate.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblAsOnDate.setText("As On Date");
        getContentPane().add(lblAsOnDate);
        lblAsOnDate.setBounds(10, 30, 90, 14);

        txtAsOnDate.setEditable(false);
        getContentPane().add(txtAsOnDate);
        txtAsOnDate.setBounds(110, 30, 80, 20);

        getContentPane().add(cmbYear);
        cmbYear.setBounds(290, 30, 120, 20);

        cmbMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbMonth);
        cmbMonth.setBounds(110, 30, 120, 20);

        getContentPane().add(cmbLoom);
        cmbLoom.setBounds(320, 60, 90, 20);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Beam No ");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 60, 90, 20);

        txtBeam.setEditable(false);
        txtBeam.setToolTipText("Press F1 for Search");
        txtBeam = new JTextFieldHint(new JTextField(),"Search by F1");
        txtBeam.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBeamKeyPressed(evt);
            }
        });
        getContentPane().add(txtBeam);
        txtBeam.setBounds(110, 60, 120, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getMonth(EITLERPGLOBAL.getCurrentDateDB()));
        cmbYear.setSelectedIndex(1);
        cmbLoom.setSelectedIndex(0);
        txtBeam.setText("");
        txtAsOnDate.setText(EITLERPGLOBAL.getCurrentDate());
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseEntered

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        // TODO add your handling code here:        
//        enableText();
    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void jTabbedPane2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane2KeyPressed
        // TODO add your handling code here:
//        enableText();
    }//GEN-LAST:event_jTabbedPane2KeyPressed


    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        // TODO add your handling code here:
        if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Groupwise Loomwise")) {
            cmbLoom.setEnabled(true);
            txtBeam.setEnabled(false);
            cmbMonth.setEnabled(true);
            cmbYear.setEnabled(true);
            txtAsOnDate.setEnabled(false);
            lblMonth.setVisible(true);
            cmbMonth.setVisible(true);
            lblYear.setVisible(true);
            cmbYear.setVisible(true);
            lblAsOnDate.setVisible(false);
            txtAsOnDate.setVisible(false);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Beam Order VS Actual")) {
            cmbLoom.setEnabled(false);
            txtBeam.setEnabled(true);
            cmbMonth.setEnabled(false);
            cmbYear.setEnabled(false);
            txtAsOnDate.setEnabled(false);
            lblMonth.setVisible(false);
            cmbMonth.setVisible(false);
            lblYear.setVisible(false);
            cmbYear.setVisible(false);
            lblAsOnDate.setVisible(true);
            txtAsOnDate.setVisible(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Weaving Delivery Pc.wise Agewise")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Mending Delivery Pc.wise Agewise")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Needling Delivery Pc.wise Agewise")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Finishing Delivery Pc.wise Agewise")) {
            cmbLoom.setEnabled(false);
            txtBeam.setEnabled(false);
            cmbMonth.setEnabled(true);
            cmbYear.setEnabled(true);
            txtAsOnDate.setEnabled(false);
            lblMonth.setVisible(true);
            cmbMonth.setVisible(true);
            lblYear.setVisible(true);
            cmbYear.setVisible(true);
            lblAsOnDate.setVisible(false);
            txtAsOnDate.setVisible(false);
        } else {
            cmbLoom.setEnabled(false);
            txtBeam.setEnabled(false);
            cmbMonth.setEnabled(false);
            cmbYear.setEnabled(false);
            txtAsOnDate.setEnabled(false);
            lblMonth.setVisible(false);
            cmbMonth.setVisible(false);
            lblYear.setVisible(false);
            cmbYear.setVisible(false);
            lblAsOnDate.setVisible(true);
            txtAsOnDate.setVisible(true);
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void btnGroupLoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGroupLoomActionPerformed
        // TODO add your handling code here:
        if (!cmbMonth.getSelectedItem().toString().startsWith("Select") && !cmbYear.getSelectedItem().toString().startsWith("Select")) {
            ShowGroupwiseLoomwiseData();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Month/Year.");
            return;
        }
    }//GEN-LAST:event_btnGroupLoomActionPerformed

    private void btnExcelGroupLoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelGroupLoomActionPerformed
        try {
            if (cmbGLRptType.getSelectedItem().toString().equals("Summary")) {
                exp.fillData(TableGroupLoom, new File("D://GroupwiseLoomwiseSummary.xls"), "GroupwiseLoomwiseSummary");
                exp.fillData(TableGroupLoom, new File("/root/Desktop/GroupwiseLoomwiseSummary.xls"), "GroupwiseLoomwiseSummary");
                JOptionPane.showMessageDialog(null, "Data saved at "
                        + "'/root/Desktop/GroupwiseLoomwiseSummary.xls' successfully in Linux PC or 'D://GroupwiseLoomwiseSummary.xls' successfully in Windows PC    ", "Message",
                        JOptionPane.INFORMATION_MESSAGE);
            }
            if (cmbGLRptType.getSelectedItem().toString().equals("Detail")) {
                exp.fillData(TableGroupLoom, new File("D://GroupwiseLoomwiseDetail.xls"), "GroupwiseLoomwiseDetail");
                exp.fillData(TableGroupLoom, new File("/root/Desktop/GroupwiseLoomwiseDetail.xls"), "GroupwiseLoomwiseDetail");
                JOptionPane.showMessageDialog(null, "Data saved at "
                        + "'/root/Desktop/GroupwiseLoomwiseDetail.xls' successfully in Linux PC or 'D://GroupwiseLoomwiseDetail.xls' successfully in Windows PC    ", "Message",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_btnExcelGroupLoomActionPerformed

    private void btnWDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        if (!cmbMonth.getSelectedItem().toString().startsWith("Select") && !cmbYear.getSelectedItem().toString().startsWith("Select")) {
            ShowWDPcwiseAgewiseData();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Month/Year.");
            return;
        }
    }//GEN-LAST:event_btnWDPcwiseAgewiseActionPerformed

    private void btnExcelWDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelWDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableWDPcwiseAgewise, new File("D://WDPcwiseAgewise.xls"), "WDPcwiseAgewise");
            exp.fillData(TableWDPcwiseAgewise, new File("/root/Desktop/WDPcwiseAgewise.xls"), "WDPcwiseAgewise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/WDPcwiseAgewise.xls' successfully in Linux PC or 'D://WDPcwiseAgewise.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelWDPcwiseAgewiseActionPerformed

    private void btnMDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        if (!cmbMonth.getSelectedItem().toString().startsWith("Select") && !cmbYear.getSelectedItem().toString().startsWith("Select")) {
            ShowMDPcwiseAgewiseData();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Month/Year.");
            return;
        }
    }//GEN-LAST:event_btnMDPcwiseAgewiseActionPerformed

    private void btnExcelMDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelMDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableMDPcwiseAgewise, new File("D://MDPcwiseAgewise.xls"), "MDPcwiseAgewise");
            exp.fillData(TableMDPcwiseAgewise, new File("/root/Desktop/MDPcwiseAgewise.xls"), "MDPcwiseAgewise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/MDPcwiseAgewise.xls' successfully in Linux PC or 'D://MDPcwiseAgewise.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelMDPcwiseAgewiseActionPerformed

    private void btnNDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        if (!cmbMonth.getSelectedItem().toString().startsWith("Select") && !cmbYear.getSelectedItem().toString().startsWith("Select")) {
            ShowNDPcwiseAgewiseData();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Month/Year.");
            return;
        }
    }//GEN-LAST:event_btnNDPcwiseAgewiseActionPerformed

    private void btnExcelNDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelNDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableNDPcwiseAgewise, new File("D://NDPcwiseAgewise.xls"), "NDPcwiseAgewise");
            exp.fillData(TableNDPcwiseAgewise, new File("/root/Desktop/NDPcwiseAgewise.xls"), "NDPcwiseAgewise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/NDPcwiseAgewise.xls' successfully in Linux PC or 'D://NDPcwiseAgewise.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelNDPcwiseAgewiseActionPerformed

    private void cmbMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthItemStateChanged
        // TODO add your handling code here:
        System.out.println("Index Month : " + cmbMonth.getSelectedIndex());
    }//GEN-LAST:event_cmbMonthItemStateChanged

    private void btnFDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        if (!cmbMonth.getSelectedItem().toString().startsWith("Select") && !cmbYear.getSelectedItem().toString().startsWith("Select")) {
            ShowFDPcwiseAgewiseData();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select Month/Year.");
            return;
        }
    }//GEN-LAST:event_btnFDPcwiseAgewiseActionPerformed

    private void btnExcelFDPcwiseAgewiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelFDPcwiseAgewiseActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableFDPcwiseAgewise, new File("D://FDPcwiseAgewise.xls"), "FDPcwiseAgewise");
            exp.fillData(TableFDPcwiseAgewise, new File("/root/Desktop/FDPcwiseAgewise.xls"), "FDPcwiseAgewise");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/FDPcwiseAgewise.xls' successfully in Linux PC or 'D://FDPcwiseAgewise.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelFDPcwiseAgewiseActionPerformed

    private void btnOrderVSActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderVSActualActionPerformed
        // TODO add your handling code here:
        if (!txtBeam.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER WHERE APPROVED=1 AND CANCELED=0 AND BEAM_NO='" + txtBeam.getText().trim() + "'")) {
            ShowOrderVSActualData();
        } else if (txtBeam.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Beam No is Compulsory.");
            txtBeam.requestFocus();
            return;
        } else {
            JOptionPane.showMessageDialog(null, "Beam No is Invalid.");
            txtBeam.requestFocus();
            return;
        }
    }//GEN-LAST:event_btnOrderVSActualActionPerformed

    private void btnExcelOrderVSActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelOrderVSActualActionPerformed
        // TODO add your handling code here:
        int cnt = 0;
        for (int i = 0; i < TableOrderVSActual.getRowCount(); i++) {
            if (((String) TableOrderVSActual.getValueAt(i, 1)).trim().equals("Not Woven")) {
                JOptionPane.showMessageDialog(null, "All Beam Pieces not Woven yet.");
                cnt++;
                return;
            }
        }

        if (cnt == 0) {
            try {
                exp.fillData(TableOrderVSActual, new File("D://BeamOrderVSActual.xls"), "BeamOrderVSActual");
                exp.fillData(TableOrderVSActual, new File("/root/Desktop/BeamOrderVSActual.xls"), "BeamOrderVSActual");
                JOptionPane.showMessageDialog(null, "Data saved at "
                        + "'/root/Desktop/BeamOrderVSActual.xls' successfully in Linux PC or 'D://BeamOrderVSActual.xls' successfully in Windows PC    ", "Message",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnExcelOrderVSActualActionPerformed

    private void txtBeamKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBeamKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT BEAM_NO AS 'Beam No', CREATED_DATE AS 'Doc Date' FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER WHERE APPROVED=1 AND CANCELED=0 ORDER BY BEAM_NO";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtBeam.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtBeamKeyPressed

    private void btnBeamWeavePcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeamWeavePcsActionPerformed
        // TODO add your handling code here:
        ShowBeamWeavePcsData();
    }//GEN-LAST:event_btnBeamWeavePcsActionPerformed

    private void btnExcelBeamWeavePcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelBeamWeavePcsActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableBeamWeavePcs, new File("D://BeamWeavePcs.xls"), "BeamWeavePcs");
            exp.fillData(TableBeamWeavePcs, new File("/root/Desktop/BeamWeavePcs.xls"), "BeamWeavePcs");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/BeamWeavePcs.xls' successfully in Linux PC or 'D://BeamWeavePcs.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelBeamWeavePcsActionPerformed

    private void btnWeavedMendPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWeavedMendPcsActionPerformed
        // TODO add your handling code here:
        ShowWeavedMendPcsData();
    }//GEN-LAST:event_btnWeavedMendPcsActionPerformed

    private void btnExcelWeavedMendPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelWeavedMendPcsActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableWeavedMendPcs, new File("D://WeavedMendPcs.xls"), "WeavedMendPcs");
            exp.fillData(TableWeavedMendPcs, new File("/root/Desktop/WeavedMendPcs.xls"), "WeavedMendPcs");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/WeavedMendPcs.xls' successfully in Linux PC or 'D://WeavedMendPcs.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelWeavedMendPcsActionPerformed

    private void btnMendedNeedlePcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMendedNeedlePcsActionPerformed
        // TODO add your handling code here:
        ShowMendedNeedlePcsData();
    }//GEN-LAST:event_btnMendedNeedlePcsActionPerformed

    private void btnExcelMendedNeedlePcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelMendedNeedlePcsActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableMendedNeedlePcs, new File("D://MendedNeedlePcs.xls"), "MendedNeedlePcs");
            exp.fillData(TableMendedNeedlePcs, new File("/root/Desktop/MendedNeedlePcs.xls"), "MendedNeedlePcs");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/MendedNeedlePcs.xls' successfully in Linux PC or 'D://MendedNeedlePcs.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelMendedNeedlePcsActionPerformed

    private void btnNeedledFinishPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNeedledFinishPcsActionPerformed
        // TODO add your handling code here:
        ShowNeedledFinishPcsData();
    }//GEN-LAST:event_btnNeedledFinishPcsActionPerformed

    private void btnExcelNeedledFinishPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelNeedledFinishPcsActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableNeedledFinishPcs, new File("D://NeedledFinishPcs.xls"), "NeedledFinishPcs");
            exp.fillData(TableNeedledFinishPcs, new File("/root/Desktop/NeedledFinishPcs.xls"), "NeedledFinishPcs");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/NeedledFinishPcs.xls' successfully in Linux PC or 'D://NeedledFinishPcs.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelNeedledFinishPcsActionPerformed

    private void btnPlanningPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanningPcsActionPerformed
        // TODO add your handling code here:
        ShowPlanningPcsData();
    }//GEN-LAST:event_btnPlanningPcsActionPerformed

    private void btnExcelPlanningPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelPlanningPcsActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TablePlanningPcs, new File("D://PlanningPcs.xls"), "PlanningPcs");
            exp.fillData(TablePlanningPcs, new File("/root/Desktop/PlanningPcs.xls"), "PlanningPcs");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/PlanningPcs.xls' successfully in Linux PC or 'D://PlanningPcs.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelPlanningPcsActionPerformed

    private void btnMendedSeamPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMendedSeamPcsActionPerformed
        // TODO add your handling code here:
         ShowMendedSeamPcsData();
    }//GEN-LAST:event_btnMendedSeamPcsActionPerformed

    private void btnExcelMendedSeamPcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelMendedSeamPcsActionPerformed
        // TODO add your handling code here:
        
           try {
            exp.fillData(TableMendedSeamPcs, new File("D://MendedSeamPcs.xls"), "MendedSeamPcs");
            exp.fillData(TableMendedSeamPcs, new File("/root/Desktop/MendedSeamPcs.xls"), "MendedSeamPcs");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/MendedSeamPcs.xls' successfully in Linux PC or 'D://MendedSeamPcs.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelMendedSeamPcsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JPanel Report1;
    private javax.swing.JPanel Report10;
    private javax.swing.JPanel Report11;
    private javax.swing.JPanel Report12;
    private javax.swing.JPanel Report2;
    private javax.swing.JPanel Report3;
    private javax.swing.JPanel Report4;
    private javax.swing.JPanel Report5;
    private javax.swing.JPanel Report6;
    private javax.swing.JPanel Report7;
    private javax.swing.JPanel Report8;
    private javax.swing.JPanel Report9;
    private javax.swing.JTable TableBeamWeavePcs;
    private javax.swing.JTable TableFDPcwiseAgewise;
    private javax.swing.JTable TableGroupLoom;
    private javax.swing.JTable TableMDPcwiseAgewise;
    private javax.swing.JTable TableMendedNeedlePcs;
    private javax.swing.JTable TableMendedSeamPcs;
    private javax.swing.JTable TableNDPcwiseAgewise;
    private javax.swing.JTable TableNeedledFinishPcs;
    private javax.swing.JTable TableOrderVSActual;
    private javax.swing.JTable TablePlanningPcs;
    private javax.swing.JTable TableWDPcwiseAgewise;
    private javax.swing.JTable TableWeavedMendPcs;
    private javax.swing.JButton btnBeamWeavePcs;
    private javax.swing.JButton btnExcelBeamWeavePcs;
    private javax.swing.JButton btnExcelFDPcwiseAgewise;
    private javax.swing.JButton btnExcelGroupLoom;
    private javax.swing.JButton btnExcelMDPcwiseAgewise;
    private javax.swing.JButton btnExcelMendedNeedlePcs;
    private javax.swing.JButton btnExcelMendedSeamPcs;
    private javax.swing.JButton btnExcelNDPcwiseAgewise;
    private javax.swing.JButton btnExcelNeedledFinishPcs;
    private javax.swing.JButton btnExcelOrderVSActual;
    private javax.swing.JButton btnExcelPlanningPcs;
    private javax.swing.JButton btnExcelWDPcwiseAgewise;
    private javax.swing.JButton btnExcelWeavedMendPcs;
    private javax.swing.JButton btnFDPcwiseAgewise;
    private javax.swing.JButton btnGroupLoom;
    private javax.swing.JButton btnMDPcwiseAgewise;
    private javax.swing.JButton btnMendedNeedlePcs;
    private javax.swing.JButton btnMendedSeamPcs;
    private javax.swing.JButton btnNDPcwiseAgewise;
    private javax.swing.JButton btnNeedledFinishPcs;
    private javax.swing.JButton btnOrderVSActual;
    private javax.swing.JButton btnPlanningPcs;
    private javax.swing.JButton btnWDPcwiseAgewise;
    private javax.swing.JButton btnWeavedMendPcs;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbGLRptType;
    private javax.swing.JComboBox cmbLoom;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblAsOnDate;
    private javax.swing.JLabel lblMonth;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblYear;
    private javax.swing.JTextField txtAsOnDate;
    private javax.swing.JTextField txtBWPcs2SDMax;
    private javax.swing.JTextField txtBWPcs2SDMin;
    private javax.swing.JTextField txtBWPcs3SDMax;
    private javax.swing.JTextField txtBWPcs3SDMin;
    private javax.swing.JTextField txtBWPcsActualTotal;
    private javax.swing.JTextField txtBWPcsStdDeviation;
    private javax.swing.JTextField txtBWPcsWtAvg;
    private javax.swing.JTextField txtBeam;
    private javax.swing.JTextField txtFD2SDMax;
    private javax.swing.JTextField txtFD2SDMin;
    private javax.swing.JTextField txtFD3SDMax;
    private javax.swing.JTextField txtFD3SDMin;
    private javax.swing.JTextField txtFDAtAvg;
    private javax.swing.JTextField txtFDGreyTotal;
    private javax.swing.JTextField txtFDStdDeviation;
    private javax.swing.JTextField txtGreyTotal;
    private javax.swing.JTextField txtMD2SDMax;
    private javax.swing.JTextField txtMD2SDMin;
    private javax.swing.JTextField txtMD3SDMax;
    private javax.swing.JTextField txtMD3SDMin;
    private javax.swing.JTextField txtMDAtAvg;
    private javax.swing.JTextField txtMDGreyTotal;
    private javax.swing.JTextField txtMDStdDeviation;
    private javax.swing.JTextField txtMNPcs2SDMax;
    private javax.swing.JTextField txtMNPcs2SDMin;
    private javax.swing.JTextField txtMNPcs3SDMax;
    private javax.swing.JTextField txtMNPcs3SDMin;
    private javax.swing.JTextField txtMNPcsGreyTotal;
    private javax.swing.JTextField txtMNPcsStdDeviation;
    private javax.swing.JTextField txtMNPcsWtAvg;
    private javax.swing.JTextField txtMSPcs2SDMax;
    private javax.swing.JTextField txtMSPcs2SDMin;
    private javax.swing.JTextField txtMSPcs3SDMax;
    private javax.swing.JTextField txtMSPcs3SDMin;
    private javax.swing.JTextField txtMSPcsGreyTotal;
    private javax.swing.JTextField txtMSPcsStdDeviation;
    private javax.swing.JTextField txtMSPcsWtAvg;
    private javax.swing.JTextField txtND2SDMax;
    private javax.swing.JTextField txtND2SDMin;
    private javax.swing.JTextField txtND3SDMax;
    private javax.swing.JTextField txtND3SDMin;
    private javax.swing.JTextField txtNDAtAvg;
    private javax.swing.JTextField txtNDGreyTotal;
    private javax.swing.JTextField txtNDStdDeviation;
    private javax.swing.JTextField txtNFPcs2SDMax;
    private javax.swing.JTextField txtNFPcs2SDMin;
    private javax.swing.JTextField txtNFPcs3SDMax;
    private javax.swing.JTextField txtNFPcs3SDMin;
    private javax.swing.JTextField txtNFPcsGreyTotal;
    private javax.swing.JTextField txtNFPcsStdDeviation;
    private javax.swing.JTextField txtNFPcsWtAvg;
    private javax.swing.JTextField txtPLPcs2SDMax;
    private javax.swing.JTextField txtPLPcs2SDMin;
    private javax.swing.JTextField txtPLPcs3SDMax;
    private javax.swing.JTextField txtPLPcs3SDMin;
    private javax.swing.JTextField txtPLPcsGreyTotal;
    private javax.swing.JTextField txtPLPcsStdDeviation;
    private javax.swing.JTextField txtPLPcsWtAvg;
    private javax.swing.JTextField txtThoriticalTotal;
    private javax.swing.JTextField txtWD2SDMax;
    private javax.swing.JTextField txtWD2SDMin;
    private javax.swing.JTextField txtWD3SDMax;
    private javax.swing.JTextField txtWD3SDMin;
    private javax.swing.JTextField txtWDAtAvg;
    private javax.swing.JTextField txtWDGreyTotal;
    private javax.swing.JTextField txtWDStdDeviation;
    private javax.swing.JTextField txtWMPcs2SDMax;
    private javax.swing.JTextField txtWMPcs2SDMin;
    private javax.swing.JTextField txtWMPcs3SDMax;
    private javax.swing.JTextField txtWMPcs3SDMin;
    private javax.swing.JTextField txtWMPcsGreyTotal;
    private javax.swing.JTextField txtWMPcsStdDeviation;
    private javax.swing.JTextField txtWMPcsWtAvg;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {

        ResultSet rsTmp;
        Connection tmpConn;
        Statement tmpStmt;
        tmpConn = data.getCreatedConn();

        cmbMonthModel = new EITLComboModel();
        cmbMonth.removeAllItems();  //Clearing previous contents
        cmbMonth.setModel(cmbMonthModel);

        ComboData aDataM = new ComboData();
        aDataM.Code = 0;
        aDataM.Text = "Select Month";
        cmbMonthModel.addElement(aDataM);

        for (int i = 1; i <= 12; i++) {
            aDataM.Code = i;
            if (i < 10) {
                aDataM.Text = String.valueOf(i) + " (" + EITLERPGLOBAL.getMonthName("2000-0" + String.valueOf(i) + "-01") + ")";
            } else {
                aDataM.Text = String.valueOf(i) + " (" + EITLERPGLOBAL.getMonthName("2000-" + String.valueOf(i) + "-01") + ")";
            }
            cmbMonthModel.addElement(aDataM);
        }

        long CounterY = 0;
        cmbYearModel = new EITLComboModel();
        cmbYear.removeAllItems();  //Clearing previous contents
        cmbYear.setModel(cmbYearModel);

        ComboData aDataY = new ComboData();
        aDataY.Code = CounterY;
        aDataY.Text = "Select Year";
        cmbYearModel.addElement(aDataY);

        long CounterLoom = 0;
        cmbLoomModel = new EITLComboModel();
        cmbLoom.removeAllItems();  //Clearing previous contents
        cmbLoom.setModel(cmbLoomModel);

        ComboData aDataLoom = new ComboData();
        aDataLoom.Code = CounterLoom;
        aDataLoom.Text = "Select Loom";
        cmbLoomModel.addElement(aDataLoom);

        try {
            tmpStmt = tmpConn.createStatement();
            rsTmp = tmpStmt.executeQuery("SELECT DISTINCT EXTRACT(YEAR FROM PROD_DATE) AS YEAR_ID FROM PRODUCTION.FELT_PROD_DATA ORDER BY PROD_DATE DESC");

            while (rsTmp.next()) {
                aDataY.Code = ++CounterY;
                aDataY.Text = rsTmp.getString("YEAR_ID");
                cmbYearModel.addElement(aDataY);
            }

            rsTmp = tmpStmt.executeQuery("SELECT PARA_CODE FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='LOOM'");

            while (rsTmp.next()) {
                aDataLoom.Code = ++CounterLoom;
                aDataLoom.Text = rsTmp.getString("PARA_CODE");
                cmbLoomModel.addElement(aDataLoom);
            }

            rsTmp.close();
            tmpStmt.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid() {
        DataModelGroupLoom = new EITLTableModel();
        TableGroupLoom.removeAll();
        TableGroupLoom.setModel(DataModelGroupLoom);
        TableGroupLoom.setAutoResizeMode(TableGroupLoom.AUTO_RESIZE_OFF);

        DataModelGroupLoom.TableReadOnly(true);

        //-----------------------------------------------------------------------------------
        DataModelOrderVSActual = new EITLTableModel();
        TableOrderVSActual.removeAll();
        TableOrderVSActual.setModel(DataModelOrderVSActual);
        TableOrderVSActual.setAutoResizeMode(TableOrderVSActual.AUTO_RESIZE_OFF);

        DataModelOrderVSActual.TableReadOnly(true);

        //-----------------------------------------------------------------------------------
        DataModelWDPcwiseAgewise = new EITLTableModel();
        TableWDPcwiseAgewise.removeAll();
        TableWDPcwiseAgewise.setModel(DataModelWDPcwiseAgewise);
        TableWDPcwiseAgewise.setAutoResizeMode(TableWDPcwiseAgewise.AUTO_RESIZE_OFF);

        DataModelWDPcwiseAgewise.TableReadOnly(true);

        //------------------------------------------------------------------------------------
        DataModelMDPcwiseAgewise = new EITLTableModel();
        TableMDPcwiseAgewise.removeAll();
        TableMDPcwiseAgewise.setModel(DataModelMDPcwiseAgewise);
        TableMDPcwiseAgewise.setAutoResizeMode(TableMDPcwiseAgewise.AUTO_RESIZE_OFF);

        DataModelMDPcwiseAgewise.TableReadOnly(true);

        //------------------------------------------------------------------------------------
        DataModelNDPcwiseAgewise = new EITLTableModel();
        TableNDPcwiseAgewise.removeAll();
        TableNDPcwiseAgewise.setModel(DataModelNDPcwiseAgewise);
        TableNDPcwiseAgewise.setAutoResizeMode(TableNDPcwiseAgewise.AUTO_RESIZE_OFF);

        DataModelNDPcwiseAgewise.TableReadOnly(true);

        //------------------------------------------------------------------------------------
        DataModelFDPcwiseAgewise = new EITLTableModel();
        TableFDPcwiseAgewise.removeAll();
        TableFDPcwiseAgewise.setModel(DataModelFDPcwiseAgewise);
        TableFDPcwiseAgewise.setAutoResizeMode(TableFDPcwiseAgewise.AUTO_RESIZE_OFF);

        DataModelFDPcwiseAgewise.TableReadOnly(true);

        //------------------------------------------------------------------------------------
        DataModelBeamWeavePcs = new EITLTableModel();
        TableBeamWeavePcs.removeAll();
        TableBeamWeavePcs.setModel(DataModelBeamWeavePcs);
        TableBeamWeavePcs.setAutoResizeMode(TableBeamWeavePcs.AUTO_RESIZE_OFF);

        DataModelBeamWeavePcs.TableReadOnly(true);

        //------------------------------------------------------------------------------------
        DataModelWeavedMendPcs = new EITLTableModel();
        TableWeavedMendPcs.removeAll();
        TableWeavedMendPcs.setModel(DataModelWeavedMendPcs);
        TableWeavedMendPcs.setAutoResizeMode(TableWeavedMendPcs.AUTO_RESIZE_OFF);

        DataModelWeavedMendPcs.TableReadOnly(true);
        
        //------------------------------------------------------------------------------------
        DataModelMendedNeedlePcs = new EITLTableModel();
        TableMendedNeedlePcs.removeAll();
        TableMendedNeedlePcs.setModel(DataModelMendedNeedlePcs);
        TableMendedNeedlePcs.setAutoResizeMode(TableMendedNeedlePcs.AUTO_RESIZE_OFF);

        DataModelMendedNeedlePcs.TableReadOnly(true);
        
        //------------------------------------------------------------------------------------
        DataModelNeedledFinishPcs = new EITLTableModel();
        TableNeedledFinishPcs.removeAll();
        TableNeedledFinishPcs.setModel(DataModelNeedledFinishPcs);
        TableNeedledFinishPcs.setAutoResizeMode(TableNeedledFinishPcs.AUTO_RESIZE_OFF);

        DataModelNeedledFinishPcs.TableReadOnly(true);
        
        //------------------------------------------------------------------------------------
        DataModelPlanningPcs = new EITLTableModel();
        TablePlanningPcs.removeAll();
        TablePlanningPcs.setModel(DataModelPlanningPcs);
        TablePlanningPcs.setAutoResizeMode(TablePlanningPcs.AUTO_RESIZE_OFF);

        DataModelPlanningPcs.TableReadOnly(true);
    }

    public void ShowGroupwiseLoomwiseData() {
        String sql = "";
        String cndtn = "";

        if (!cmbLoom.getSelectedItem().toString().startsWith("Select")) {
            cndtn += "AND TP_LOOM='" + cmbLoom.getSelectedItem() + "' ";
        }

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P1D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "'");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT "
                + "(TP_LOGIN_ID,TP_REPORT_NO,TP_PROD_NO,TP_PROD_DATE,TP_PIECE_NO,TP_PARTY_CODE,TP_WVG_GREY_WEIGHT,TP_LOOM,TP_DEPT1,TP_WVG_DATE) "
                + "SELECT " + EITLERPGLOBAL.gUserID + ",'P1D',PROD_DOC_NO,PROD_DATE,PROD_PIECE_NO,PROD_PARTY_CODE,WEIGHT,LOOM_NO,PROD_DEPT,PROD_DATE "
                + "FROM PRODUCTION.FELT_PROD_DATA "
                + "WHERE EXTRACT(MONTH FROM PROD_DATE)='" + cmbMonth.getSelectedItem() + "' AND EXTRACT(YEAR FROM PROD_DATE)='" + cmbYear.getSelectedItem() + "' AND PROD_DEPT ='WEAVING' AND PROD_PIECE_NO NOT LIKE 'S%' ");

        data.Execute(" UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_WIP_PIECE_REGISTER SET TP_PARTY_CODE = WIP_PARTY_CODE ,TP_ORDER_DATE = WIP_ORDER_DATE,TP_THEORITICAL_WEIGHT = WIP_THORITICAL_WEIGHT ,TP_PRODUCT_GROUP = WIP_GROUP ,TP_LENGTH = WIP_LENGTH ,TP_WIDTH = WIP_WIDTH ,TP_GSM = WIP_GSM ,TP_PIECE_STAGE = WIP_PIECE_STAGE ,TP_WIP_STATUS = WIP_STATUS ,TP_PRODUCT_CODE = WIP_PRODUCT_CODE ,TP_MACHINE_NO = WIP_MACHINE_NO ,TP_POSITION_NO = WIP_POSITION_NO ,TP_UPN = WIP_UPN ,TP_WARP_DATE = WIP_WARP_DATE "
                + " WHERE WIP_EXT_PIECE_NO = TP_PIECE_NO AND   TP_REPORT_NO = 'P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
     

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_THEORITICAL_WEIGHT = 0 WHERE TP_PIECE_NO LIKE('%B%') AND TP_REPORT_NO = 'P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

  
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = CASE WHEN TP_WARP_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P1S' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT(TP_REPORT_NO, TP_LOGIN_ID, TP_LOOM, TP_PRODUCT_CODE, TP_PRODUCT_GROUP, TP_THEORITICAL_WEIGHT, TP_WVG_GREY_WEIGHT) "
                + "SELECT 'P1S',TP_LOGIN_ID,TP_LOOM,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,SUM(TP_THEORITICAL_WEIGHT),SUM(TP_WVG_GREY_WEIGHT) FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO = 'P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "GROUP BY TP_REPORT_NO,TP_LOGIN_ID,TP_LOOM,TP_PRODUCT_CODE,TP_PRODUCT_GROUP ");

        if (cmbGLRptType.getSelectedItem().toString().equals("Detail")) {
            sql = "SELECT TP_LOOM AS 'Loom', TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_THEORITICAL_WEIGHT AS 'Theoretical Weight', TP_WVG_GREY_WEIGHT AS 'Grey Weight',  TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME  AS 'Party Name', TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', TP_POSITION_DESC AS 'Position Desc', TP_UPN AS 'UPN',DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date',DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Warped Date',DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date' FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P1D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " " + cndtn + " ORDER BY TP_REPORT_NO,TP_LOGIN_ID,TP_LOOM,TP_PRODUCT_CODE,TP_PRODUCT_GROUP ";
        }

        if (cmbGLRptType.getSelectedItem().toString().equals("Summary")) {
            sql = "SELECT TP_LOOM AS 'Loom',TP_PRODUCT_CODE AS 'Product',TP_PRODUCT_GROUP AS 'Group',TP_THEORITICAL_WEIGHT AS 'Theoretical Weight',TP_WVG_GREY_WEIGHT AS 'Grey Weight' FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P1S' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " " + cndtn + " ORDER BY TP_REPORT_NO,TP_LOGIN_ID,TP_LOOM,TP_PRODUCT_CODE,TP_PRODUCT_GROUP ";
        }

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableGroupLoom.removeAll();
        DataModelGroupLoom = new EITLTableModel();
        TableGroupLoom.setModel(DataModelGroupLoom);
        TableGroupLoom.setAutoResizeMode(TableGroupLoom.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelGroupLoom.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelGroupLoom.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableGroupLoom.getColumnModel().getColumn(i).setMinWidth(120);
            }
            rs.first();
            int k = 1;
            double ThoriticalTotal = 0;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    ThoriticalTotal = ThoriticalTotal + rs.getDouble("Theoretical Weight");
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelGroupLoom.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtThoriticalTotal.setText(String.valueOf(EITLERPGLOBAL.round(ThoriticalTotal, 2)));
            txtGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            DataModelGroupLoom.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void ShowOrderVSActualData() {
        String sql = "";
        String cndtn = "";

        sql = "SELECT CASE WHEN PROD_PIECE_NO IS NULL THEN 'Not Woven' ELSE 'Woven' END AS Status, "
                + "BEAM_NO AS 'Beam No', LOOM_NO AS 'Loom No', PRODUCT_CODE AS 'Product', GRUP AS 'Group', PIECE_NO AS 'Piece No', SYN_PER AS '% Syn',  "
                + "WEIGHT AS 'Fin Weight', THEORICAL_PICKS_10_CM AS '(Beam)Picks/10 cm', PICKS_PER_10CMS AS '(Wvg)Picks/10 cm',  "
                + "READ_SPACE AS '(Beam)R.Space', REED_SPACE AS '(Wvg)R.Space', THEORICAL_LENGTH_MTR AS '(Beam)Pc.Length', LENGTH AS '(Wvg)Pc.Length', "
                + "TOTAL_PICKS AS '(Beam)Picks in Pcs',PICKS_IN_PCS AS '(Wvg)Picks in Pcs' "
                + "FROM  "
                + "( "
                + "SELECT * FROM "
                + "( "
                + "SELECT H.CREATED_DATE, D.BEAM_NO, D.LOOM_NO, D.PIECE_NO, D.PRODUCT_CODE, D.GRUP, D.WEIGHT, D.THEORICAL_PICKS_10_CM, D.READ_SPACE, D.THEORICAL_LENGTH_MTR, D.TOTAL_PICKS  "
                + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H, PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D "
                + "WHERE H.DOC_NO=D.DOC_NO AND APPROVED=1 AND CANCELED=0 "
                + ") AS WARP "
                + "LEFT JOIN "
                + "( "
                + "SELECT PROD_PIECE_NO, LOOM_NO AS PROD_LOOM_NO, PICKS_PER_10CMS, REED_SPACE, LENGTH, ROUND(LENGTH*PICKS_PER_10CMS*10,2) AS PICKS_IN_PCS "
                + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT='WEAVING' AND APPROVED=1 AND CANCELED=0 "
                + ") AS WEAV "
                + "ON WARP.PIECE_NO = WEAV.PROD_PIECE_NO "
                + "LEFT JOIN  "
                + "( "
                + "SELECT DISTINCT PRODUCT_CODE AS QLT_PRODUCT_CODE, SYN_PER "
                + "FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC "
                + ") AS QLT "
                + "ON WARP.PRODUCT_CODE=QLT.QLT_PRODUCT_CODE "
                + ") AS SUB "
                + "WHERE BEAM_NO='" + txtBeam.getText().trim() + "'";

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableOrderVSActual.removeAll();
        DataModelOrderVSActual = new EITLTableModel();
        TableOrderVSActual.setModel(DataModelOrderVSActual);
        TableOrderVSActual.setAutoResizeMode(TableOrderVSActual.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelOrderVSActual.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelOrderVSActual.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableOrderVSActual.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelOrderVSActual.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            DataModelOrderVSActual.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void ShowWDPcwiseAgewiseData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT "
                + "(TP_LOGIN_ID,TP_REPORT_NO,TP_PROD_NO,TP_PROD_DATE,TP_PIECE_NO,TP_PIECE_NO_OLD,TP_PARTY_CODE,TP_WVG_GREY_WEIGHT,TP_LOOM,TP_DEPT1,TP_WVG_DATE) "
                + "SELECT " + EITLERPGLOBAL.gUserID + ",'P3D',PROD_DOC_NO,PROD_DATE,PROD_PIECE_NO,PROD_PIECE_NO,PROD_PARTY_CODE,WEIGHT,LOOM_NO,PROD_DEPT,PROD_DATE "
                + "FROM PRODUCTION.FELT_PROD_DATA "
                + "WHERE EXTRACT(MONTH FROM PROD_DATE)='" + cmbMonth.getSelectedItem() + "' AND EXTRACT(YEAR FROM PROD_DATE)='" + cmbYear.getSelectedItem() + "' AND PROD_DEPT ='WEAVING' AND PROD_PIECE_NO NOT LIKE 'S%' ");

        
        
        data.Execute(" UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_WIP_PIECE_REGISTER SET TP_PARTY_CODE = WIP_PARTY_CODE ,TP_ORDER_DATE = WIP_ORDER_DATE,TP_THEORITICAL_WEIGHT = WIP_THORITICAL_WEIGHT ,TP_PRODUCT_GROUP = WIP_GROUP ,TP_LENGTH = WIP_LENGTH ,TP_WIDTH = WIP_WIDTH ,TP_GSM = WIP_GSM ,TP_PIECE_STAGE = WIP_PIECE_STAGE ,TP_WIP_STATUS = WIP_STATUS ,TP_PRODUCT_CODE = WIP_PRODUCT_CODE ,TP_MACHINE_NO = WIP_MACHINE_NO ,TP_POSITION_NO = WIP_POSITION_NO ,TP_UPN = WIP_UPN ,TP_WARP_DATE = WIP_WARP_DATE "
                + " WHERE WIP_EXT_PIECE_NO = TP_PIECE_NO AND   TP_REPORT_NO = 'P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
     
     /*   
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_SALES_PIECE_REGISTER SET TP_PARTY_CODE = PR_PARTY_CODE "
                + ",TP_THEORITICAL_WEIGHT = PR_THORITICAL_WEIGHT "
                + ",TP_PRODUCT_GROUP = PR_GROUP "
                + ",TP_LENGTH = PR_LENGTH "
                + ",TP_WIDTH = PR_WIDTH "
                + ",TP_GSM = PR_GSM "
                + ",TP_PIECE_STAGE = PR_PIECE_STAGE "
                + ",TP_WIP_STATUS = PR_WIP_STATUS "
                + ",TP_PRODUCT_CODE = PR_PRODUCT_CODE "
                + ",TP_MACHINE_NO = PR_MACHINE_NO "
                + ",TP_POSITION_NO = PR_POSITION_NO "
                + ",TP_UPN = PR_UPN "
                + "WHERE PR_PIECE_NO+0 = TP_PIECE_NO + 0 AND TP_REPORT_NO = 'P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
*/
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_THEORITICAL_WEIGHT = 0 WHERE TP_PIECE_NO LIKE('%B%') AND TP_REPORT_NO = 'P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

      //  data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_PIECE_NO =REPLACE(TP_PIECE_NO,'-','') WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        /*
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,(SELECT H.CREATED_DATE,PIECE_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
                + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0) AS B "
                + "SET TP_WARP_DATE = CREATED_DATE "
                + "WHERE PIECE_NO = TP_PIECE_NO  AND TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
*/
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = CASE WHEN TP_WARP_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS=TP_WVG_GREY_WEIGHT * TP_DAYS_WARP_WVG "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_WVG_GREY_WEIGHT) AS AVGWT "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION=TP_DAYS_WARP_WVG - TP_WEIGHTED_AVG "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION=POWER(TP_DEVIATION,2) "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R, "
                + "TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='P3D' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1 "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX=(TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN=(TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX=(TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN=(TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', TP_WVG_GREY_WEIGHT AS 'Grey Weight Wvg',DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date',DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Warping Date',DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ORDER BY TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PIECE_NO";

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableWDPcwiseAgewise.removeAll();
        DataModelWDPcwiseAgewise = new EITLTableModel();
        TableWDPcwiseAgewise.setModel(DataModelWDPcwiseAgewise);
        TableWDPcwiseAgewise.setAutoResizeMode(TableWDPcwiseAgewise.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelWDPcwiseAgewise.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelWDPcwiseAgewise.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableWDPcwiseAgewise.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight Wvg");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelWDPcwiseAgewise.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtWDGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtWDAtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtWDStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtWD2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtWD2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtWD3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtWD3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P3D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            DataModelWDPcwiseAgewise.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void ShowMDPcwiseAgewiseData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT "
                + "(TP_LOGIN_ID,TP_REPORT_NO,TP_PROD_NO,TP_PROD_DATE,TP_PIECE_NO,TP_PIECE_NO_OLD,TP_PARTY_CODE,TP_MND_GREY_WEIGHT,TP_LOOM,TP_DEPT1,TP_MND_DATE) "
                + "SELECT " + EITLERPGLOBAL.gUserID + ",'P4D',PROD_DOC_NO,PROD_DATE,PROD_PIECE_NO,PROD_PIECE_NO,PROD_PARTY_CODE,WEIGHT,LOOM_NO,PROD_DEPT,PROD_DATE "
                + "FROM PRODUCTION.FELT_PROD_DATA "
                + "WHERE EXTRACT(MONTH FROM PROD_DATE)='" + cmbMonth.getSelectedItem() + "' AND EXTRACT(YEAR FROM PROD_DATE)='" + cmbYear.getSelectedItem() + "' AND PROD_DEPT ='MENDING' AND PROD_PIECE_NO NOT LIKE 'S%' ");

        
        
        data.Execute(" UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_WIP_PIECE_REGISTER SET TP_PARTY_CODE = WIP_PARTY_CODE ,TP_ORDER_DATE = WIP_ORDER_DATE,TP_THEORITICAL_WEIGHT = WIP_THORITICAL_WEIGHT ,TP_PRODUCT_GROUP = WIP_GROUP ,TP_LENGTH = WIP_LENGTH ,TP_WIDTH = WIP_WIDTH ,TP_GSM = WIP_GSM ,TP_PIECE_STAGE = WIP_PIECE_STAGE ,TP_WIP_STATUS = WIP_STATUS ,TP_PRODUCT_CODE = WIP_PRODUCT_CODE ,TP_MACHINE_NO = WIP_MACHINE_NO ,TP_POSITION_NO = WIP_POSITION_NO ,TP_UPN = WIP_UPN ,TP_WARP_DATE = WIP_WARP_DATE,TP_WVG_DATE = WIP_WVG_DATE ,TP_WVG_GREY_WEIGHT = WIP_WEAVING_WEIGHT,TP_MND_GREY_WEIGHT = WIP_MENDING_WEIGHT"
                + " WHERE WIP_EXT_PIECE_NO = TP_PIECE_NO AND   TP_REPORT_NO = 'P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
     
        
       /* 
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_SALES_PIECE_REGISTER SET TP_PARTY_CODE = PR_PARTY_CODE "
                + ",TP_THEORITICAL_WEIGHT = PR_THORITICAL_WEIGHT "
                + ",TP_PRODUCT_GROUP = PR_GROUP "
                + ",TP_LENGTH = PR_LENGTH "
                + ",TP_WIDTH = PR_WIDTH "
                + ",TP_GSM = PR_GSM "
                + ",TP_PIECE_STAGE = PR_PIECE_STAGE "
                + ",TP_WIP_STATUS = PR_WIP_STATUS "
                + ",TP_PRODUCT_CODE = PR_PRODUCT_CODE "
                + ",TP_MACHINE_NO = PR_MACHINE_NO "
                + ",TP_POSITION_NO = PR_POSITION_NO "
                + ",TP_UPN = PR_UPN "
                + "WHERE PR_PIECE_NO+0 = TP_PIECE_NO + 0 AND TP_REPORT_NO = 'P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
*/
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_THEORITICAL_WEIGHT = 0 WHERE TP_PIECE_NO LIKE('%B%') AND TP_REPORT_NO = 'P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_PIECE_NO =REPLACE(TP_PIECE_NO,' A','-A') WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_PIECE_NO =REPLACE(TP_PIECE_NO,' B','-B') WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
/*
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,(SELECT H.CREATED_DATE,PIECE_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
                + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0) AS B "
                + "SET TP_WARP_DATE = CREATED_DATE "
                + "WHERE PIECE_NO = TP_PIECE_NO  AND TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
*/
/*     
data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,(SELECT PROD_PIECE_NO,PROD_DATE,WEIGHT "
                + "FROM PRODUCTION.FELT_PROD_DATA "
                + "WHERE PROD_DEPT ='WEAVING') AS WVG "
                + "SET TP_WVG_DATE = PROD_DATE,TP_WVG_GREY_WEIGHT= WEIGHT "
                + "WHERE TP_PIECE_NO = PROD_PIECE_NO  AND TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
*/
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = CASE WHEN TP_WARP_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = CASE WHEN TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS=TP_MND_GREY_WEIGHT * TP_DAYS_WVG_MND "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_MND_GREY_WEIGHT) AS AVGWT "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION=TP_DAYS_WVG_MND - TP_WEIGHTED_AVG "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION=POWER(TP_DEVIATION,2) "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R, "
                + "TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='P4D' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1 "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX=(TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN=(TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX=(TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN=(TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', TP_MND_GREY_WEIGHT AS 'Grey Weight Mending', DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date',DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y')AS 'Warping Date',DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order',DATE_FORMAT(TP_MND_DATE,'%d/%m/%Y') AS 'Mending Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ORDER BY TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PIECE_NO";

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableMDPcwiseAgewise.removeAll();
        DataModelMDPcwiseAgewise = new EITLTableModel();
        TableMDPcwiseAgewise.setModel(DataModelMDPcwiseAgewise);
        TableMDPcwiseAgewise.setAutoResizeMode(TableMDPcwiseAgewise.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelMDPcwiseAgewise.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelMDPcwiseAgewise.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableMDPcwiseAgewise.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight Mending");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelMDPcwiseAgewise.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtMDGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtMDAtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtMDStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtMD2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtMD2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtMD3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtMD3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P4D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            DataModelMDPcwiseAgewise.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void ShowNDPcwiseAgewiseData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT "
                + "(TP_LOGIN_ID,TP_REPORT_NO,TP_PROD_NO,TP_PROD_DATE,TP_PIECE_NO,TP_PIECE_NO_OLD,TP_PARTY_CODE,TP_NDL_GREY_WEIGHT,TP_LOOM,TP_DEPT1,TP_NDL_DATE) "
                + "SELECT " + EITLERPGLOBAL.gUserID + ",'P5D',PROD_DOC_NO,PROD_DATE,PROD_PIECE_NO,PROD_PIECE_NO,PROD_PARTY_CODE,WEIGHT,LOOM_NO,PROD_DEPT,PROD_DATE "
                + "FROM PRODUCTION.FELT_PROD_DATA "
                + "WHERE EXTRACT(MONTH FROM PROD_DATE)='" + cmbMonth.getSelectedItem() + "' AND EXTRACT(YEAR FROM PROD_DATE)='" + cmbYear.getSelectedItem() + "' AND PROD_DEPT ='NEEDLING' AND PROD_PIECE_NO NOT LIKE 'S%' ");

         data.Execute(" UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_WIP_PIECE_REGISTER SET TP_PARTY_CODE = WIP_PARTY_CODE ,TP_ORDER_DATE = WIP_ORDER_DATE,TP_THEORITICAL_WEIGHT = WIP_THORITICAL_WEIGHT ,TP_PRODUCT_GROUP = WIP_GROUP ,TP_LENGTH = WIP_LENGTH ,TP_WIDTH = WIP_WIDTH ,TP_GSM = WIP_GSM ,TP_PIECE_STAGE = WIP_PIECE_STAGE ,TP_WIP_STATUS = WIP_STATUS ,TP_PRODUCT_CODE = WIP_PRODUCT_CODE ,TP_MACHINE_NO = WIP_MACHINE_NO ,TP_POSITION_NO = WIP_POSITION_NO ,TP_UPN = WIP_UPN ,TP_WARP_DATE = WIP_WARP_DATE,TP_WVG_DATE = WIP_WVG_DATE ,TP_WVG_GREY_WEIGHT = WIP_WEAVING_WEIGHT,TP_MND_GREY_WEIGHT = WIP_MENDING_WEIGHT,TP_MND_DATE = WIP_MND_DATE "
                + " WHERE WIP_EXT_PIECE_NO = TP_PIECE_NO AND   TP_REPORT_NO = 'P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
     
             
    /*    
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "SET TP_PARTY_CODE = PR_PARTY_CODE,TP_THEORITICAL_WEIGHT = PR_THORITICAL_WEIGHT "
                + ",TP_PRODUCT_GROUP = PR_GROUP "
                + ",TP_LENGTH = PR_LENGTH "
                + ",TP_WIDTH = PR_WIDTH "
                + ",TP_GSM = PR_GSM "
                + ",TP_PIECE_STAGE = PR_PIECE_STAGE "
                + ",TP_WIP_STATUS = PR_WIP_STATUS "
                + ",TP_PRODUCT_CODE = PR_PRODUCT_CODE "
                + ",TP_MACHINE_NO = PR_MACHINE_NO "
                + ",TP_POSITION_NO = PR_POSITION_NO "
                + ",TP_UPN = PR_UPN "
                + ",TP_WVG_DATE =PR_WVG_DATE "
                + ",TP_MND_DATE = PR_MND_DATE "
                + ",TP_WARP_DATE = PR_WARP_DATE "
                + ",TP_WVG_GREY_WEIGHT = PR_WEAVING_WEIGHT "
                + ",TP_MND_GREY_WEIGHT = PR_MENDING_WEIGHT "
                + "WHERE "
                + "PR_PIECE_NO+0 = TP_PIECE_NO+0 AND TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
*/
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = CASE WHEN TP_WARP_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = CASE WHEN TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = CASE WHEN TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS=TP_NDL_GREY_WEIGHT * TP_DAYS_MND_NDL "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_NDL_GREY_WEIGHT) AS AVGWT "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION=TP_DAYS_MND_NDL - TP_WEIGHTED_AVG "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION=POWER(TP_DEVIATION,2) "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R, "
                + "TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='P5D' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1 "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX=(TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN=(TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX=(TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN=(TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', TP_NDL_GREY_WEIGHT AS 'Grey Weight Needling', DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date',DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y')AS 'Warping Date',DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order',DATE_FORMAT(TP_MND_DATE,'%d/%m/%Y') AS 'Mending Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', DATE_FORMAT(TP_NDL_DATE,'%d/%m/%Y') AS 'Needling Date',TP_DAYS_MND_NDL AS 'No of Days after Mending', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ORDER BY TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PIECE_NO";

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableNDPcwiseAgewise.removeAll();
        DataModelNDPcwiseAgewise = new EITLTableModel();
        TableNDPcwiseAgewise.setModel(DataModelNDPcwiseAgewise);
        TableNDPcwiseAgewise.setAutoResizeMode(TableNDPcwiseAgewise.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelNDPcwiseAgewise.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelNDPcwiseAgewise.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableNDPcwiseAgewise.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight Needling");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelNDPcwiseAgewise.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtNDGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtNDAtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtNDStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtND2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtND2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtND3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtND3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P5D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            DataModelNDPcwiseAgewise.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void ShowFDPcwiseAgewiseData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT "
                + "(TP_LOGIN_ID,TP_REPORT_NO,TP_PROD_NO,TP_PROD_DATE,TP_PIECE_NO,TP_PIECE_NO_OLD,TP_PARTY_CODE,TP_FNSG_WEIGHT,TP_LOOM,TP_DEPT1,TP_FNSG_DATE) "
                + "SELECT " + EITLERPGLOBAL.gUserID + ",'P6D',PROD_DOC_NO,PROD_DATE,PROD_PIECE_NO,PROD_PIECE_NO,PROD_PARTY_CODE,WEIGHT,LOOM_NO,PROD_DEPT,PROD_DATE "
                + "FROM PRODUCTION.FELT_PROD_DATA "
                + "WHERE EXTRACT(MONTH FROM PROD_DATE)='" + cmbMonth.getSelectedItem() + "' AND EXTRACT(YEAR FROM PROD_DATE)='" + cmbYear.getSelectedItem() + "' AND PROD_DEPT ='FELT FINISHING' AND PROD_PIECE_NO NOT LIKE 'S%' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_SALES_PIECE_REGISTER "
                + "SET TP_PARTY_CODE = PR_PARTY_CODE,TP_THEORITICAL_WEIGHT = PR_THORITICAL_WEIGHT "
                + ",TP_PRODUCT_GROUP = PR_GROUP "
                + ",TP_LENGTH = PR_LENGTH "
                + ",TP_WIDTH = PR_WIDTH "
                + ",TP_GSM = PR_GSM "
                + ",TP_PIECE_STAGE = PR_PIECE_STAGE "
                + ",TP_WIP_STATUS = PR_WIP_STATUS "
                + ",TP_PRODUCT_CODE = PR_PRODUCT_CODE "
                + ",TP_MACHINE_NO = PR_MACHINE_NO "
                + ",TP_POSITION_NO = PR_POSITION_NO "
                + ",TP_UPN = PR_UPN "
                + ",TP_ORDER_DATE =PR_ORDER_DATE "
                + ",TP_WVG_DATE =PR_WVG_DATE "
                + ",TP_MND_DATE = PR_MND_DATE "
                + ",TP_WARP_DATE = PR_WARP_DATE "
                + ",TP_NDL_DATE = PR_NDL_DATE "
                + ",TP_WVG_GREY_WEIGHT = PR_WEAVING_WEIGHT "
                + ",TP_MND_GREY_WEIGHT = PR_MENDING_WEIGHT "
                + ",TP_NDL_GREY_WEIGHT = PR_NEEDLING_WEIGHT "
                + ",TP_FNSG_WEIGHT = PR_ACTUAL_WEIGHT "
                + ",TP_ORDER_DIVERTED_DATE = PR_ORDER_DATE "
                
                + "WHERE "
                + "PR_PIECE_NO = TP_PIECE_NO AND TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = CASE WHEN TP_WARP_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = CASE WHEN TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = CASE WHEN TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_NDL_FNSG = CASE WHEN TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_FNSG_DATE,TP_NDL_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_NDL_FNSG = CASE WHEN TP_ORDER_DIVERTED_DATE !='0000-00-00' THEN  DATEDIFF(TP_FNSG_DATE,TP_ORDER_DIVERTED_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_NO LIKE ('%V%')");

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS=TP_FNSG_WEIGHT * TP_DAYS_NDL_FNSG "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_FNSG_WEIGHT) AS AVGWT "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION=TP_DAYS_NDL_FNSG - TP_WEIGHTED_AVG "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION=POWER(TP_DEVIATION,2) "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R, "
                + "TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='P6D' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1 "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX=(TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN=(TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX=(TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN=(TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) "
                + "WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', TP_FNSG_WEIGHT AS 'Grey Weight', DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date',DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y')AS 'Warping Date',DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order',DATE_FORMAT(TP_MND_DATE,'%d/%m/%Y') AS 'Mending Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', DATE_FORMAT(TP_NDL_DATE,'%d/%m/%Y') AS 'Needling Date',TP_DAYS_MND_NDL AS 'No of Days after Mending',DATE_FORMAT(TP_FNSG_DATE,'%d/%m/%Y')AS 'Finishing Date', TP_DAYS_NDL_FNSG AS 'No of Days after Finishing', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ORDER BY TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PIECE_NO";

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableFDPcwiseAgewise.removeAll();
        DataModelFDPcwiseAgewise = new EITLTableModel();
        TableFDPcwiseAgewise.setModel(DataModelFDPcwiseAgewise);
        TableFDPcwiseAgewise.setAutoResizeMode(TableFDPcwiseAgewise.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelFDPcwiseAgewise.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelFDPcwiseAgewise.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableFDPcwiseAgewise.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelFDPcwiseAgewise.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtFDGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtFDAtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtFDStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtFD2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtFD2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtFD3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            txtFD3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='P6D' AND TP_LOGIN_ID = '" + EITLERPGLOBAL.gUserID + "' "));
            DataModelFDPcwiseAgewise.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void ShowBeamWeavePcsData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT (TP_LOGIN_ID,TP_REPORT_NO,TP_PIECE_NO,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PARTY_CODE,TP_MACHINE_NO,TP_POSITION_NO,TP_UPN,TP_LENGTH,TP_WIDTH,TP_GSM,TP_PIECE_STAGE,TP_WIP_STATUS,TP_ORDER_NO,TP_ORDER_DATE,TP_WARP_DATE,TP_WVG_DATE,TP_MND_DATE,TP_NDL_DATE,TP_SEAM_DATE,TP_FNSG_DATE,TP_WVG_GREY_WEIGHT,TP_MND_GREY_WEIGHT,TP_NDL_GREY_WEIGHT,TP_FNSG_WEIGHT,TP_BEAM_THEO_WEIGHT,TP_THEORITICAL_WEIGHT,TP_STYLE) SELECT " + EITLERPGLOBAL.gUserID + ", 'BEAMED_NOT_WEAVE',WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO,WIP_UPN,WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_PIECE_STAGE,WIP_STATUS,WIP_DOC_NO,WIP_ORDER_DATE,WIP_WARP_DATE,WIP_WVG_DATE,WIP_MND_DATE,WIP_NDL_DATE,WIP_SEAM_DATE,WIP_FNSG_DATE,WIP_WEAVING_WEIGHT,WIP_MENDING_WEIGHT,WIP_NEEDLING_WEIGHT,WIP_ACTUAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_STAGE IN ('WEAVING') AND WIP_PRIORITY_HOLD_CAN_FLAG IN (0)") ;      
        
  
                data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_ORDER_WARP = "
                + "CASE WHEN TP_WARP_DATE ='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) ELSE 0 END "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(TP_WARP_DATE,TP_ORDER_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");    
             
             
        
  
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = "
                + "CASE WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) "
                + "WHEN TP_WARP_DATE ='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_ORDER_DATE) "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WARP_DATE) "
                + "ELSE 0 END "
                +" WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = "
                + "CASE WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) "
                + "WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WVG_DATE) "
                + "ELSE 0 END WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS= TP_THEORITICAL_WEIGHT * TP_DAYS_WARP_WVG WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_THEORITICAL_WEIGHT) AS AVGWT FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT   WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION= TP_DAYS_WARP_WVG - TP_WEIGHTED_AVG WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION= POWER(TP_DEVIATION,2) WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING'  GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1   WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING'  AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX= (TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN= (TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX= (TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN= (TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', "
                + "TP_THEORITICAL_WEIGHT AS 'Actual Weight', "
                + "DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date' ,"
                + "DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Beam Order Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_STYLE AS 'Style' ,"
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' ";

        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableBeamWeavePcs.removeAll();
        DataModelBeamWeavePcs = new EITLTableModel();
        TableBeamWeavePcs.setModel(DataModelBeamWeavePcs);
        TableBeamWeavePcs.setAutoResizeMode(TableBeamWeavePcs.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelBeamWeavePcs.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelBeamWeavePcs.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableBeamWeavePcs.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double ActualTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    ActualTotal = ActualTotal + rs.getDouble("Actual Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelBeamWeavePcs.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtBWPcsActualTotal.setText(String.valueOf(EITLERPGLOBAL.round(ActualTotal, 2)));
            txtBWPcsWtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' "));
            txtBWPcsStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' "));
            txtBWPcs2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' "));
            txtBWPcs2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' "));
            txtBWPcs3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' "));
            txtBWPcs3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='BEAMED_NOT_WEAVE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='WEAVING' "));
            DataModelBeamWeavePcs.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void ShowWeavedMendPcsData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        
        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT (TP_LOGIN_ID,TP_REPORT_NO,TP_PIECE_NO,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PARTY_CODE,TP_MACHINE_NO,TP_POSITION_NO,TP_UPN,TP_LENGTH,TP_WIDTH,TP_GSM,TP_PIECE_STAGE,TP_WIP_STATUS,TP_ORDER_NO,TP_ORDER_DATE,TP_WARP_DATE,TP_WVG_DATE,TP_MND_DATE,TP_NDL_DATE,TP_SEAM_DATE,TP_FNSG_DATE,TP_WVG_GREY_WEIGHT,TP_MND_GREY_WEIGHT,TP_NDL_GREY_WEIGHT,TP_FNSG_WEIGHT,TP_BEAM_THEO_WEIGHT,TP_THEORITICAL_WEIGHT,TP_STYLE) SELECT " + EITLERPGLOBAL.gUserID + ", 'WEAVED_NOT_MEND',WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO,WIP_UPN,WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_PIECE_STAGE,WIP_STATUS,WIP_DOC_NO,WIP_ORDER_DATE,WIP_WARP_DATE,WIP_WVG_DATE,WIP_MND_DATE,WIP_NDL_DATE,WIP_SEAM_DATE,WIP_FNSG_DATE,WIP_WEAVING_WEIGHT,WIP_MENDING_WEIGHT,WIP_NEEDLING_WEIGHT,WIP_ACTUAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_STAGE IN ('MENDING') AND WIP_PRIORITY_HOLD_CAN_FLAG IN (0)") ;
      
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_ORDER_WARP = "
                + "CASE WHEN TP_WARP_DATE ='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) ELSE 0 END "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(TP_WARP_DATE,TP_ORDER_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");    
             
             
        
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = "
                + "CASE WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) "
                + "WHEN TP_WARP_DATE ='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_ORDER_DATE) "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WARP_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = "
                + "CASE WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) "
                + "WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WVG_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS= TP_WVG_GREY_WEIGHT * TP_DAYS_WVG_MND WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_WVG_GREY_WEIGHT) AS AVGWT FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT   WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_PIECE_STAGE ='MENDING' AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION= TP_DAYS_WARP_WVG - TP_WEIGHTED_AVG WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION= POWER(TP_DEVIATION,2) WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING'  GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1   WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_PIECE_STAGE ='MENDING'  AND TP_REPORT_NO =R AND TP_LOGIN_ID = L  ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX= (TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN= (TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX= (TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN= (TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' ");
        
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', "
                + "TP_WVG_GREY_WEIGHT AS 'Grey Weight', "
                 + "DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date' ,"
                + "DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Beam Order Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order', "
                + "DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_STYLE AS 'Style', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' ";
                
        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableWeavedMendPcs.removeAll();
        DataModelWeavedMendPcs = new EITLTableModel();
        TableWeavedMendPcs.setModel(DataModelWeavedMendPcs);
        TableWeavedMendPcs.setAutoResizeMode(TableWeavedMendPcs.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelWeavedMendPcs.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelWeavedMendPcs.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableWeavedMendPcs.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelWeavedMendPcs.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtWMPcsGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtWMPcsWtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' "));
            txtWMPcsStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' "));
            txtWMPcs2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' "));
            txtWMPcs2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' "));
            txtWMPcs3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' "));
            txtWMPcs3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='MENDING' "));
            DataModelWeavedMendPcs.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void ShowMendedNeedlePcsData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        
         data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT (TP_LOGIN_ID,TP_REPORT_NO,TP_PIECE_NO,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PARTY_CODE,TP_MACHINE_NO,TP_POSITION_NO,TP_UPN,TP_LENGTH,TP_WIDTH,TP_GSM,TP_PIECE_STAGE,TP_WIP_STATUS,TP_ORDER_NO,TP_ORDER_DATE,TP_WARP_DATE,TP_WVG_DATE,TP_MND_DATE,TP_NDL_DATE,TP_SEAM_DATE,TP_FNSG_DATE,TP_WVG_GREY_WEIGHT,TP_MND_GREY_WEIGHT,TP_NDL_GREY_WEIGHT,TP_FNSG_WEIGHT,TP_BEAM_THEO_WEIGHT,TP_THEORITICAL_WEIGHT,TP_STYLE) SELECT " + EITLERPGLOBAL.gUserID + ", 'MENDED_NOT_NEEDLE',WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO,WIP_UPN,WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_PIECE_STAGE,WIP_STATUS,WIP_DOC_NO,WIP_ORDER_DATE,WIP_WARP_DATE,WIP_WVG_DATE,WIP_MND_DATE,WIP_NDL_DATE,WIP_SEAM_DATE,WIP_FNSG_DATE,WIP_WEAVING_WEIGHT,WIP_MENDING_WEIGHT,WIP_NEEDLING_WEIGHT,WIP_ACTUAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_STAGE IN ('NEEDLING') AND WIP_PRIORITY_HOLD_CAN_FLAG IN (0)") ;
        
                 data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_ORDER_WARP = "
                + "CASE WHEN TP_WARP_DATE ='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) ELSE 0 END "
                + "CASE WHEN TP_WARP_DATE !='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(TP_WARP_DATE,TP_ORDER_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");    
             
             
      
      
      
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = "
                + "CASE WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) "
                + "WHEN TP_WARP_DATE ='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_ORDER_DATE) "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WARP_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = "
                + "CASE WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) "
                + "WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WVG_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) "
                + " WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS= TP_MND_GREY_WEIGHT * TP_DAYS_MND_NDL WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_MND_GREY_WEIGHT) AS AVGWT FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT   WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_PIECE_STAGE ='NEEDLING' AND TP_REPORT_NO =R AND TP_LOGIN_ID = L         ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION= TP_DAYS_WARP_WVG - TP_WEIGHTED_AVG WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION= POWER(TP_DEVIATION,2) WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING'  GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1   WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_PIECE_STAGE ='NEEDLING'  AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX= (TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN= (TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX= (TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN= (TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='NEEDLING' ");
        
        
     
        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', "
                + "TP_MND_GREY_WEIGHT AS 'Grey Weight', "
                + "DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date' ,"
                + "DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Beam Order Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order', "
                + "DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', "
                + "DATE_FORMAT(TP_MND_DATE,'%d/%m/%Y') AS 'Mending Date', TP_DAYS_MND_NDL AS 'No of Days after Mending', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_STYLE AS 'Style' ,"
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' ";
                
        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableMendedNeedlePcs.removeAll();
        DataModelMendedNeedlePcs = new EITLTableModel();
        TableMendedNeedlePcs.setModel(DataModelMendedNeedlePcs);
        TableMendedNeedlePcs.setAutoResizeMode(TableMendedNeedlePcs.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelMendedNeedlePcs.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelMendedNeedlePcs.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableMendedNeedlePcs.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelMendedNeedlePcs.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtMNPcsGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtMNPcsWtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' "));
            txtMNPcsStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' "));
            txtMNPcs2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' "));
            txtMNPcs2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' "));
            txtMNPcs3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' "));
            txtMNPcs3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='MENDED_NOT_NEEDLE' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  AND TP_PIECE_STAGE ='NEEDLING' "));
            DataModelMendedNeedlePcs.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void ShowNeedledFinishPcsData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
       
        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT (TP_LOGIN_ID,TP_REPORT_NO,TP_PIECE_NO,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PARTY_CODE,TP_MACHINE_NO,TP_POSITION_NO,TP_UPN,TP_LENGTH,TP_WIDTH,TP_GSM,TP_PIECE_STAGE,TP_WIP_STATUS,TP_ORDER_NO,TP_ORDER_DATE,TP_WARP_DATE,TP_WVG_DATE,TP_MND_DATE,TP_NDL_DATE,TP_SEAM_DATE,TP_FNSG_DATE,TP_WVG_GREY_WEIGHT,TP_MND_GREY_WEIGHT,TP_NDL_GREY_WEIGHT,TP_FNSG_WEIGHT,TP_BEAM_THEO_WEIGHT,TP_THEORITICAL_WEIGHT,TP_STYLE) SELECT " + EITLERPGLOBAL.gUserID + ", 'FINISHING_PENDING',WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO,WIP_UPN,WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_PIECE_STAGE,WIP_STATUS,WIP_DOC_NO,WIP_ORDER_DATE,WIP_WARP_DATE,WIP_WVG_DATE,WIP_MND_DATE,WIP_NDL_DATE,WIP_SEAM_DATE,WIP_FNSG_DATE,WIP_WEAVING_WEIGHT,WIP_MENDING_WEIGHT,WIP_NEEDLING_WEIGHT,WIP_ACTUAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_STAGE IN ('FINISHING') AND WIP_PRIORITY_HOLD_CAN_FLAG IN (0)") ;        
                   
                  data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_ORDER_WARP = "
                + "CASE WHEN TP_WARP_DATE ='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) ELSE 0 END "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(TP_WARP_DATE,TP_ORDER_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");    
             
             
             
          data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = "
                + "CASE WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) "
                + "WHEN TP_WARP_DATE ='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_ORDER_DATE) "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WARP_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = "
                + "CASE WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) "
                + "WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WVG_DATE) "
                + "ELSE 0 END "
                + "WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE)  "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) "
                + "ELSE 0 END "
                + "WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_NDL_FNSG = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE ='0000-00-00' AND TP_PIECE_NO LIKE ('%V%') THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE ='0000-00-00' AND TP_PIECE_NO NOT LIKE ('%V%') THEN  DATEDIFF(CURDATE(),TP_MND_DATE)  "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' AND TP_PIECE_NO NOT LIKE ('%V%') THEN  DATEDIFF(CURDATE(),TP_NDL_DATE)  "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS= TP_THEORITICAL_WEIGHT * TP_DAYS_WVG_MND WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_THOERITICAL_WIEGHT) AS AVGWT FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT   WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION= TP_DAYS_WARP_WVG - TP_WEIGHTED_AVG WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION= POWER(TP_DEVIATION,2) WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='FINISHING_PENDING' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "   GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1   WHERE  TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX= (TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN= (TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX= (TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN= (TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', "
                + "TP_THEORITICAL_WEIGHT AS 'Grey Weight', "
                + "DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date' ,"
                + "DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Beam Order Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order', "
                + "DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', "
                + "DATE_FORMAT(TP_MND_DATE,'%d/%m/%Y') AS 'Mending Date', TP_DAYS_MND_NDL AS 'No of Days after Mending', "
                + "DATE_FORMAT(TP_NDL_DATE,'%d/%m/%Y') 'Needling Date', TP_DAYS_NDL_FNSG AS 'No of Days after Needling', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_STYLE AS 'Style' ,"
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ";
                
        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableNeedledFinishPcs.removeAll();
        DataModelNeedledFinishPcs = new EITLTableModel();
        TableNeedledFinishPcs.setModel(DataModelNeedledFinishPcs);
        TableNeedledFinishPcs.setAutoResizeMode(TableNeedledFinishPcs.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelNeedledFinishPcs.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelNeedledFinishPcs.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableNeedledFinishPcs.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelNeedledFinishPcs.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtNFPcsGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtNFPcsWtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "));
            txtNFPcsStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "));
            txtNFPcs2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtNFPcs2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtNFPcs3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtNFPcs3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='FINISHING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            DataModelNeedledFinishPcs.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
      public void ShowMendedSeamPcsData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
      
        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT (TP_LOGIN_ID,TP_REPORT_NO,TP_PIECE_NO,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PARTY_CODE,TP_MACHINE_NO,TP_POSITION_NO,TP_UPN,TP_LENGTH,TP_WIDTH,TP_GSM,TP_PIECE_STAGE,TP_WIP_STATUS,TP_ORDER_NO,TP_ORDER_DATE,TP_WARP_DATE,TP_WVG_DATE,TP_MND_DATE,TP_NDL_DATE,TP_SEAM_DATE,TP_FNSG_DATE,TP_WVG_GREY_WEIGHT,TP_MND_GREY_WEIGHT,TP_NDL_GREY_WEIGHT,TP_FNSG_WEIGHT,TP_BEAM_THEO_WEIGHT,TP_THEORITICAL_WEIGHT,TP_STYLE) SELECT " + EITLERPGLOBAL.gUserID + ", 'SEAMING_PENDING',WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO,WIP_UPN,WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_PIECE_STAGE,WIP_STATUS,WIP_DOC_NO,WIP_ORDER_DATE,WIP_WARP_DATE,WIP_WVG_DATE,WIP_MND_DATE,WIP_NDL_DATE,WIP_SEAM_DATE,WIP_FNSG_DATE,WIP_WEAVING_WEIGHT,WIP_MENDING_WEIGHT,WIP_NEEDLING_WEIGHT,WIP_ACTUAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_STAGE IN ('SEAMING') AND WIP_PRIORITY_HOLD_CAN_FLAG IN (0)") ;
        
           
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WARP_WVG = "
                + "CASE WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_WARP_DATE) "
                + "WHEN TP_WARP_DATE ='0000-00-00' AND TP_WVG_DATE !='0000-00-00' THEN  DATEDIFF(TP_WVG_DATE,TP_ORDER_DATE) "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_WVG_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WARP_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        
         data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_ORDER_WARP = "
                + "CASE WHEN TP_WARP_DATE ='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) ELSE 0 END "
                + "WHEN TP_WARP_DATE !='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(TP_WARP_DATE,TP_ORDER_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_WVG_MND = "
                + "CASE WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE !='0000-00-00' THEN  DATEDIFF(TP_MND_DATE,TP_WVG_DATE) "
                + "WHEN TP_WVG_DATE !='0000-00-00' AND TP_MND_DATE ='0000-00-00' THEN DATEDIFF(CURDATE(),TP_WVG_DATE) "
                + "ELSE 0 END "
                + "WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE)  "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) "
                + "ELSE 0 END "
                + "WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_MND_NDL = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN  DATEDIFF(TP_NDL_DATE,TP_MND_DATE) "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' THEN DATEDIFF(CURDATE(),TP_MND_DATE) "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_NDL_FNSG = "
                + "CASE WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE ='0000-00-00' AND TP_PIECE_NO LIKE ('%V%') THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE ='0000-00-00' AND TP_PIECE_NO NOT LIKE ('%V%') THEN  DATEDIFF(CURDATE(),TP_MND_DATE)  "
                + "WHEN TP_MND_DATE !='0000-00-00' AND TP_NDL_DATE !='0000-00-00' AND TP_PIECE_NO NOT LIKE ('%V%') THEN  DATEDIFF(CURDATE(),TP_NDL_DATE)  "
                + "ELSE 0 END "
                + "WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS= TP_THEORITICAL_WEIGHT * TP_DAYS_WVG_MND WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_THOERITICAL_WIEGHT) AS AVGWT FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='WEAVED_NOT_MEND' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='MENDING' GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT   WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION= TP_DAYS_WARP_WVG - TP_WEIGHTED_AVG WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION= POWER(TP_DEVIATION,2) WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='SEAMING_PENDING' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "   GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1   WHERE  TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX= (TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN= (TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX= (TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN= (TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', "
                + "TP_THEORITICAL_WEIGHT AS 'Grey Weight', "
                + "DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date' ,"
                + "DATE_FORMAT(TP_WARP_DATE,'%d/%m/%Y') AS 'Beam Order Date', TP_DAYS_WARP_WVG AS 'No of Days after Beam Order', "
                + "DATE_FORMAT(TP_WVG_DATE,'%d/%m/%Y') AS 'Weaving Date', TP_DAYS_WVG_MND AS 'No of Days after Weaving', "
                + "DATE_FORMAT(TP_MND_DATE,'%d/%m/%Y') AS 'Mending Date', TP_DAYS_MND_NDL AS 'No of Days after Mending', "
                + "DATE_FORMAT(TP_NDL_DATE,'%d/%m/%Y') 'Needling Date', TP_DAYS_NDL_FNSG AS 'No of Days after Needling', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
                + "TP_STYLE AS 'Style', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ";
               
        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TableMendedSeamPcs.removeAll();
        DataModelMendedSeamPcs = new EITLTableModel();
        TableMendedSeamPcs.setModel(DataModelMendedSeamPcs);
        TableMendedSeamPcs.setAutoResizeMode(TableMendedSeamPcs.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelMendedSeamPcs.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelMendedSeamPcs.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableMendedSeamPcs.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelMendedSeamPcs.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtMSPcsGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtMSPcsWtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "));
            txtMSPcsStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "));
            txtMSPcs2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtMSPcs2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtMSPcs3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtMSPcs3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='SEAMING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            DataModelMendedSeamPcs.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    public void ShowPlanningPcsData() {
        String sql = "";
        String cndtn = "";

        data.Execute("DELETE FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
       
        data.Execute("INSERT INTO PRODUCTION.FELT_TMP_PRODUCTION_REPORT (TP_LOGIN_ID,TP_REPORT_NO,TP_PIECE_NO,TP_PRODUCT_CODE,TP_PRODUCT_GROUP,TP_PARTY_CODE,TP_MACHINE_NO,TP_POSITION_NO,TP_UPN,TP_LENGTH,TP_WIDTH,TP_GSM,TP_PIECE_STAGE,TP_WIP_STATUS,TP_ORDER_NO,TP_ORDER_DATE,TP_WARP_DATE,TP_WVG_DATE,TP_MND_DATE,TP_NDL_DATE,TP_SEAM_DATE,TP_FNSG_DATE,TP_WVG_GREY_WEIGHT,TP_MND_GREY_WEIGHT,TP_NDL_GREY_WEIGHT,TP_FNSG_WEIGHT,TP_BEAM_THEO_WEIGHT,TP_THEORITICAL_WEIGHT,TP_STYLE) SELECT " + EITLERPGLOBAL.gUserID + ",  'PLANNING_PENDING',WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO,WIP_UPN,WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_PIECE_STAGE,WIP_STATUS,WIP_DOC_NO,WIP_ORDER_DATE,WIP_WARP_DATE,WIP_WVG_DATE,WIP_MND_DATE,WIP_NDL_DATE,WIP_SEAM_DATE,WIP_FNSG_DATE,WIP_WEAVING_WEIGHT,WIP_MENDING_WEIGHT,WIP_NEEDLING_WEIGHT,WIP_ACTUAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_THORITICAL_WEIGHT,WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_STAGE IN ('PLANNING') AND WIP_PRIORITY_HOLD_CAN_FLAG IN (0)") ;
        
          
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DAYS_ORDER_WARP = "
                + "CASE WHEN TP_WVG_DATE ='0000-00-00' AND TP_ORDER_DATE !='0000-00-00' THEN  DATEDIFF(CURDATE(),TP_ORDER_DATE) ELSE 0 END "
                + "WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
         
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_WEIGHTXDAYS= TP_THEORITICAL_WEIGHT * TP_DAYS_ORDER_WARP WHERE  TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SUM(TP_WEIGHTXDAYS)/SUM(TP_THEORITICAL_WEIGHT) AS AVGWT FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='PLANNING_PENDING' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND TP_PIECE_STAGE ='PLANNING' GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_WEIGHTED_AVG =AVGWT   WHERE  TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_DEVIATION= TP_DAYS_ORDER_WARP - TP_WEIGHTED_AVG WHERE  TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_SQ_DEVIATION= POWER(TP_DEVIATION,2) WHERE  TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT ,(SELECT TP_REPORT_NO AS R,TP_LOGIN_ID AS L,SQRT(SUM(TP_SQ_DEVIATION)/COUNT(*)) AS AVGWT, "
                + "SUM(TP_SQ_DEVIATION)/COUNT(*) AS AVGWT1 FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT  WHERE TP_REPORT_NO ='PLANNING_PENDING' "
                + "AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "   GROUP BY TP_REPORT_NO,TP_LOGIN_ID ) AS WTAVG "
                + "SET  TP_STANDARD_DEVIATION =AVGWT,TP_2SD_MAX = AVGWT1   WHERE  TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "
                + "AND TP_REPORT_NO =R AND TP_LOGIN_ID = L ");        
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MAX= (TP_WEIGHTED_AVG+(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_2SD_MIN= (TP_WEIGHTED_AVG-(2 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MAX= (TP_WEIGHTED_AVG+(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT SET TP_3SD_MIN= (TP_WEIGHTED_AVG-(3 *TP_STANDARD_DEVIATION)) WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");
        
        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,DINESHMILLS.D_SAL_PARTY_MASTER SET TP_PARTY_NAME = PARTY_NAME WHERE PARTY_CODE = TP_PARTY_CODE AND MAIN_ACCOUNT_CODE = 210010 AND TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        data.Execute("UPDATE PRODUCTION.FELT_TMP_PRODUCTION_REPORT,PRODUCTION.FELT_MACHINE_POSITION_MST SET TP_POSITION_NO_DESIGN = POSITION_DESIGN_NO,TP_POSITION_DESC = POSITION_DESC WHERE POSITION_NO = TP_POSITION_NO AND TP_REPORT_NO = 'PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ");

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        sql = "SELECT TP_PIECE_NO AS 'Piece No', TP_PARTY_CODE AS 'Party Code', TP_PARTY_NAME AS 'Party Name', "
                + "TP_UPN AS 'UPN', TP_POSITION_DESC AS 'Position Desc', "
                + "TP_THEORITICAL_WEIGHT AS 'Grey Weight', "
                + "DATE_FORMAT(TP_ORDER_DATE,'%d/%m/%Y') AS 'Order Date', TP_DAYS_ORDER_WARP AS 'No of Days after Order', "
                + "TP_MACHINE_NO AS 'Machine No', TP_POSITION_NO AS 'Position', TP_POSITION_NO_DESIGN AS 'Position Design', "
                + "TP_PRODUCT_CODE AS 'Product', TP_PRODUCT_GROUP AS 'Group', TP_LENGTH AS 'Length', TP_WIDTH AS 'Width', TP_GSM AS 'GSM', "
               + "TP_STYLE AS 'Style', "
                + "TP_WEIGHTXDAYS AS 'Wt*Days', TP_DEVIATION AS 'Deviation', TP_SQ_DEVIATION AS 'Sqr of Deviation' "
                + "FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " ";
                
        System.out.println("SQL Query:" + sql);
        ResultSet rs;
        TablePlanningPcs.removeAll();
        DataModelPlanningPcs = new EITLTableModel();
        TablePlanningPcs.setModel(DataModelPlanningPcs);
        TablePlanningPcs.setAutoResizeMode(TablePlanningPcs.AUTO_RESIZE_OFF);
        try {
            rs = EITLERP.data.getResult(sql);
            DataModelPlanningPcs.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelPlanningPcs.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TablePlanningPcs.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;
            double GreyTotal = 0;
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    GreyTotal = GreyTotal + rs.getDouble("Grey Weight");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelPlanningPcs.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            txtPLPcsGreyTotal.setText(String.valueOf(EITLERPGLOBAL.round(GreyTotal, 2)));
            txtPLPcsWtAvg.setText(data.getStringValueFromDB("SELECT TP_WEIGHTED_AVG FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "));
            txtPLPcsStdDeviation.setText(data.getStringValueFromDB("SELECT TP_STANDARD_DEVIATION FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + "  "));
            txtPLPcs2SDMax.setText(data.getStringValueFromDB("SELECT TP_2SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtPLPcs2SDMin.setText(data.getStringValueFromDB("SELECT TP_2SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtPLPcs3SDMax.setText(data.getStringValueFromDB("SELECT TP_3SD_MAX FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            txtPLPcs3SDMin.setText(data.getStringValueFromDB("SELECT TP_3SD_MIN FROM PRODUCTION.FELT_TMP_PRODUCTION_REPORT WHERE TP_REPORT_NO ='PLANNING_PENDING' AND TP_LOGIN_ID = " + EITLERPGLOBAL.gUserID + " "));
            DataModelPlanningPcs.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
