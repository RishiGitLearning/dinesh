/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.FeltSales.ProductionReport;

import EITLERP.*;
import EITLERP.Production.WarpingStatusOfWeavingLoom.MultiLineTableHeaderRenderer1;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;


/**
 *
 * @author ashutosh/RISHI
 */
public class frmLoomwiseProductGroupwiseProductionReport extends javax.swing.JApplet {
    public boolean forceToChange=false;
    public boolean cancelled=false;
    
    private EITLTableModel DataModel_Weaving = new EITLTableModel();  
    private EITLTableModel DataModel_Finishing = new EITLTableModel();  
    private EITLTableModel DataModel_Booking = new EITLTableModel();  
    
    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df =  new SimpleDateFormat("dd-MMM-yy");
    HashMap hmPieceList=new HashMap();
    String ORDER_BY="";
    private clsExcelExporter exp = new clsExcelExporter();
   
    
    public void init() {
        initComponents();
        file1.setVisible(false);
        file2.setVisible(false);
        file3.setVisible(false);
        
        FormatGrid_WeavingProduction();//780, 560
        FormatGrid_FinishingProduction();//780, 560
        FormatGrid_BookingProduction();//780, 560
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        jLabel1.setForeground(Color.WHITE);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table_Weaving = new javax.swing.JTable();
        btnShow_WeavingProduction = new javax.swing.JButton();
        Export_WeavingProduction = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        lblFinYearWeaving = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        Table_Finishing = new javax.swing.JTable();
        btnShow_FinishingProduction = new javax.swing.JButton();
        Export_FinishingProduction = new javax.swing.JButton();
        file2 = new javax.swing.JFileChooser();
        lblFinYearFinishing = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        Table_Booking = new javax.swing.JTable();
        btnShow_BookingProduction = new javax.swing.JButton();
        Export_BookingProduction = new javax.swing.JButton();
        file3 = new javax.swing.JFileChooser();
        lblFinYearBooking = new javax.swing.JLabel();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 1340, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromDateFocusLost(evt);
            }
        });
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 30, 110, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(380, 30, 100, 30);

        jPanel10.setLayout(null);

        Table_Weaving.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Weaving.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_Weaving.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_Weaving.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_WeavingKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(Table_Weaving);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 1310, 400);

        btnShow_WeavingProduction.setText("Show List");
        btnShow_WeavingProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow_WeavingProductionActionPerformed(evt);
            }
        });
        jPanel10.add(btnShow_WeavingProduction);
        btnShow_WeavingProduction.setBounds(10, 10, 130, 30);

        Export_WeavingProduction.setText("EXPORT TO EXCEL");
        Export_WeavingProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_WeavingProductionActionPerformed(evt);
            }
        });
        jPanel10.add(Export_WeavingProduction);
        Export_WeavingProduction.setBounds(540, 10, 170, 25);
        jPanel10.add(file1);
        file1.setBounds(150, 40, 517, 380);

        lblFinYearWeaving.setText("Financial Year ");
        jPanel10.add(lblFinYearWeaving);
        lblFinYearWeaving.setBounds(160, 10, 210, 30);

        jTabbedPane2.addTab("Loomwise Weaving Report", jPanel10);

        jPanel11.setLayout(null);

        Table_Finishing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Finishing.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_Finishing.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_Finishing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_FinishingKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(Table_Finishing);

        jPanel11.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 1310, 400);

        btnShow_FinishingProduction.setText("Show List");
        btnShow_FinishingProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow_FinishingProductionActionPerformed(evt);
            }
        });
        jPanel11.add(btnShow_FinishingProduction);
        btnShow_FinishingProduction.setBounds(10, 10, 130, 30);

        Export_FinishingProduction.setText("EXPORT TO EXCEL");
        Export_FinishingProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_FinishingProductionActionPerformed(evt);
            }
        });
        jPanel11.add(Export_FinishingProduction);
        Export_FinishingProduction.setBounds(540, 10, 170, 25);
        jPanel11.add(file2);
        file2.setBounds(150, 40, 517, 380);

        lblFinYearFinishing.setText("Financial Year ");
        jPanel11.add(lblFinYearFinishing);
        lblFinYearFinishing.setBounds(160, 10, 210, 30);

        jLabel6.setText("Without diverted/Reprocess Report");
        jPanel11.add(jLabel6);
        jLabel6.setBounds(1011, 30, 310, 15);

        jTabbedPane2.addTab("Finishing Report", jPanel11);

        jPanel12.setLayout(null);

        Table_Booking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Booking.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_Booking.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_Booking.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_BookingKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(Table_Booking);

        jPanel12.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 1310, 400);

        btnShow_BookingProduction.setText("Show List");
        btnShow_BookingProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShow_BookingProductionActionPerformed(evt);
            }
        });
        jPanel12.add(btnShow_BookingProduction);
        btnShow_BookingProduction.setBounds(10, 10, 130, 30);

        Export_BookingProduction.setText("EXPORT TO EXCEL");
        Export_BookingProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_BookingProductionActionPerformed(evt);
            }
        });
        jPanel12.add(Export_BookingProduction);
        Export_BookingProduction.setBounds(540, 10, 170, 25);
        jPanel12.add(file3);
        file3.setBounds(150, 40, 517, 380);

        lblFinYearBooking.setText("Financial Year ");
        jPanel12.add(lblFinYearBooking);
        lblFinYearBooking.setBounds(160, 10, 210, 30);

        jTabbedPane2.addTab("Booking Report", jPanel12);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 80, 1340, 490);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(540, 30, 80, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 30, 100, 20);

        jLabel5.setText("To Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Loomwise Product-Groupwise Production Cummulative Report");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1340, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained
                                 
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void Table_WeavingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_WeavingKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_WeavingKeyPressed

    private void btnShow_WeavingProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow_WeavingProductionActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        FormatGrid_WeavingProduction();
        GenerateData_WeavingProduction(ORDER_BY);
    }//GEN-LAST:event_btnShow_WeavingProductionActionPerformed

    private void Export_WeavingProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_WeavingProductionActionPerformed
        //        // TODO add your handling code here:
        //        try{
            //            exp.fillData(Table_b2b,new File("/root/Desktop/gstr1_B2B.xls"));
            //            exp.fillData(Table_b2b,new File("D://gstr1_B2B.xls"));
            //            JOptionPane.showMessageDialog(null, "Data saved at " +
                //                "'/root/Desktop/gstr1_B2B.xls' successfully in Linux PC or 'D://gstr1_B2B.xls' successfully in Windows PC    ", "Message",
                //                JOptionPane.INFORMATION_MESSAGE);
            //        }
        //        catch(Exception ex) {
            //            ex.printStackTrace();
            //        }
        // TODO add your handling code here:
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }

            exp.fillData(Table_Weaving, file, "LoomwiseProductGroupwiseproductionReport");
            JOptionPane.showMessageDialog(null, "Data saved at "
                + file1.getSelectedFile().toString() + " successfully... ", "Message",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_WeavingProductionActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");
        
        FormatGrid_WeavingProduction();
        
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void txtFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusLost
                if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter From Date");
            txtFromDate.requestFocus();
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            txtFromDate.setText("");
            txtToDate.setText("");
            txtFromDate.requestFocus();
        } else if(!txtFromDate.getText().substring(0,2).equals("01") && !txtFromDate.getText().substring(0,2).equals("16")) {
            JOptionPane.showMessageDialog(null,"Please Enter Valid From Date.(i.e O1/MM/YYYY or 16/MM/YYYY )");
            txtFromDate.setText("");
            txtToDate.setText("");
            txtFromDate.requestFocus();
        } else {
            txtToDate.setText("");
            if(txtFromDate.getText().substring(0,2).equals("01")){
                String dt = getLastDay();
                txtToDate.setText(EITLERPGLOBAL.formatDate(dt));
                txtToDate.requestFocus();
            }
        }
    }//GEN-LAST:event_txtFromDateFocusLost

    private void Table_FinishingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_FinishingKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_FinishingKeyPressed

    private void btnShow_FinishingProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow_FinishingProductionActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        FormatGrid_FinishingProduction();
        GenerateData_FinishingProduction(ORDER_BY);
    }//GEN-LAST:event_btnShow_FinishingProductionActionPerformed

    private void Export_FinishingProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_FinishingProductionActionPerformed
        // TODO add your handling code here:
        File file = null;
        file2.setVisible(true);
        try {
            int returnVal = file2.showOpenDialog(this);
            if (returnVal == file2.APPROVE_OPTION) {
                file = file2.getSelectedFile();
            }

            exp.fillData(Table_Finishing, file, "FinishingProductionReport");
            JOptionPane.showMessageDialog(null, "Data saved at "
                + file2.getSelectedFile().toString() + " successfully... ", "Message",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_FinishingProductionActionPerformed

    private void Table_BookingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_BookingKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_BookingKeyPressed

    private void btnShow_BookingProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShow_BookingProductionActionPerformed
        // TODO add your handling code here:
        if ( ! Validate()) {
            return;
        }
        FormatGrid_BookingProduction();
        GenerateData_BookingProduction(ORDER_BY);
    }//GEN-LAST:event_btnShow_BookingProductionActionPerformed

    private void Export_BookingProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_BookingProductionActionPerformed
        // TODO add your handling code here:
        File file = null;
        file3.setVisible(true);
        try {
            int returnVal = file3.showOpenDialog(this);
            if (returnVal == file3.APPROVE_OPTION) {
                file = file3.getSelectedFile();
            }

            exp.fillData(Table_Booking, file, "FinishingProductionReport");
            JOptionPane.showMessageDialog(null, "Data saved at "
                + file3.getSelectedFile().toString() + " successfully... ", "Message",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_BookingProductionActionPerformed
       public String getLastDay() {
        String Date=data.getStringValueFromDB("SELECT LAST_DAY('"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"') FROM DUAL");
        return Date;
    }
          
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton Export_BookingProduction;
    private javax.swing.JButton Export_FinishingProduction;
    private javax.swing.JButton Export_WeavingProduction;
    private javax.swing.JTable Table_Booking;
    private javax.swing.JTable Table_Finishing;
    private javax.swing.JTable Table_Weaving;
    private javax.swing.JButton btnShow_BookingProduction;
    private javax.swing.JButton btnShow_FinishingProduction;
    private javax.swing.JButton btnShow_WeavingProduction;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JFileChooser file2;
    private javax.swing.JFileChooser file3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblFinYearBooking;
    private javax.swing.JLabel lblFinYearFinishing;
    private javax.swing.JLabel lblFinYearWeaving;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private boolean Validate() {
        //Form level validations
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter from Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter To Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return false;
        }
        
        return true;
    }
    
    private void FormatGrid_WeavingProduction() {
        try {
            DataModel_Weaving = new EITLTableModel();
            Table_Weaving.removeAll();

            Table_Weaving.setModel(DataModel_Weaving);
            Table_Weaving.setAutoResizeMode(0);

            String From_Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            
            
            String MonthYear = "";
            
            if(!"".equals(From_Date))
            {
                int curMonth=EITLERPGLOBAL.getMonth(From_Date);
                int curYear=EITLERPGLOBAL.getYear(From_Date);
     
                MonthYear = getMonthName(curMonth)+" "+curYear;
            }
            DataModel_Weaving.addColumn("SrNo"); //0 - Read Only
            DataModel_Weaving.addColumn("LOOM_NO"); //1
            DataModel_Weaving.addColumn("PRODUCT CATG"); //1
            DataModel_Weaving.addColumn("PRODUCT CODE"); //1
            DataModel_Weaving.addColumn("PRODUCT GROUP"); //1
            DataModel_Weaving.addColumn("Curr Month ("+MonthYear+") No. of Felts"); //1
            DataModel_Weaving.addColumn("Curr Month ("+MonthYear+") Weight in Kgs."); //1
            DataModel_Weaving.addColumn("Curr Month ("+MonthYear+") Picks"); //1
            DataModel_Weaving.addColumn("Curr Month ("+MonthYear+") Picks Mtrs"); //1
            DataModel_Weaving.addColumn("Cummulative Month (Apr- "+MonthYear+") No. of Felts"); //1
            DataModel_Weaving.addColumn("Cummulative Month (Apr- "+MonthYear+") Weight in Kgs"); //1
            DataModel_Weaving.addColumn("Cummulative Month (Apr- "+MonthYear+") Picks"); //1
            DataModel_Weaving.addColumn("Cummulative Month (Apr- "+MonthYear+") Picks Mtr"); //1
            DataModel_Weaving.addColumn("Run Date"); //1
            
            
                        
            DataModel_Weaving.SetVariable(0, "SR_N0"); //0 - Read Only
            DataModel_Weaving.SetVariable(1, "LOOM_NO"); //1
            DataModel_Weaving.SetVariable(2, "CATG");
            DataModel_Weaving.SetVariable(3, "WIP_PRODUCT_CODE");
            DataModel_Weaving.SetVariable(4, "WIP_GROUP"); //2
            DataModel_Weaving.SetVariable(5, "CURMTHCNT");
            DataModel_Weaving.SetVariable(6, "CURMTHWEIGHT"); //2
            DataModel_Weaving.SetVariable(7, "CURMTHPICK"); //3
            DataModel_Weaving.SetVariable(8, "CURMTHPICKMTR");
            DataModel_Weaving.SetVariable(9, "CUMMTHCNT"); //4
            DataModel_Weaving.SetVariable(10, "CUMMTHWEIGHT"); //5
            DataModel_Weaving.SetVariable(11, "CUMMTHPICK");
            DataModel_Weaving.SetVariable(12, "CUMMTHPICKMTR");
            DataModel_Weaving.SetVariable(13, "NOW"); //2
            
//            DataModel_Weaving.SetNumeric(4, true);
//            DataModel_Weaving.SetNumeric(10, true);
//            DataModel_Weaving.SetNumeric(11, true);
//            DataModel_Weaving.SetNumeric(21, true);
//                        
            for(int i=0;i<=13;i++) {
                DataModel_Weaving.SetReadOnly(i);
            }
                        
            Table_Weaving.getColumnModel().getColumn(0).setMinWidth(30);
            Table_Weaving.getColumnModel().getColumn(0).setMaxWidth(40);
            Table_Weaving.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(1).setMaxWidth(70);
            Table_Weaving.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(2).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(3).setMinWidth(100);
            Table_Weaving.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(4).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(5).setMinWidth(90);
            //Table_b2b.getColumnModel().getColumn(5).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(6).setMaxWidth(100);
            Table_Weaving.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(7).setMaxWidth(100);
            Table_Weaving.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(8).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(9).setMinWidth(140);
            //Table_b2b.getColumnModel().getColumn(9).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(10).setMinWidth(140);
            //Table_b2b.getColumnModel().getColumn(10).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(11).setMinWidth(130);
            //Table_b2b.getColumnModel().getColumn(11).setMaxWidth(80);
            Table_Weaving.getColumnModel().getColumn(12).setMinWidth(130);
            Table_Weaving.getColumnModel().getColumn(13).setMinWidth(100);
            
            Table_Weaving.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer1());
            Table_Weaving.getTableHeader().setPreferredSize(new Dimension(Table_Weaving.getColumnModel().getTotalColumnWidth(), 75));
            
//            Object[] rowData = new Object[25];
//            rowData[0] = "SRNO";
//            
//            DataModel_Weaving.addRow(rowData);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void FormatGrid_FinishingProduction() {
        try {
            DataModel_Finishing = new EITLTableModel();
            Table_Finishing.removeAll();

            Table_Finishing.setModel(DataModel_Finishing);
            Table_Finishing.setAutoResizeMode(0);

            String From_Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            
            
            String MonthYear = "";
            
            if(!"".equals(From_Date))
            {
                int curMonth=EITLERPGLOBAL.getMonth(From_Date);
                int curYear=EITLERPGLOBAL.getYear(From_Date);
     
                MonthYear = getMonthName(curMonth)+" "+curYear;
            }
            DataModel_Finishing.addColumn("SrNo"); //0 - Read Only
            DataModel_Finishing.addColumn("PRODUCT CATG"); //1
            DataModel_Finishing.addColumn("PRODUCT CODE"); //1
            DataModel_Finishing.addColumn("PRODUCT GROUP"); //1
            DataModel_Finishing.addColumn("SYN PER"); //1
            DataModel_Finishing.addColumn("Curr Month ("+MonthYear+") No. of Felts"); //1
            DataModel_Finishing.addColumn("Curr Month ("+MonthYear+") Weight in Kgs."); //1
            DataModel_Finishing.addColumn("Cummulative Month (Apr- "+MonthYear+") No. of Felts"); //1
            DataModel_Finishing.addColumn("Cummulative Month (Apr- "+MonthYear+") Weight in Kgs"); //1
            DataModel_Finishing.addColumn("Run Date"); //1
                       
            DataModel_Finishing.SetVariable(0, "SR_N0"); //0 - Read Only
            DataModel_Finishing.SetVariable(1, "CATG");
            DataModel_Finishing.SetVariable(2, "PR_PRODUCT_CODE");
            DataModel_Finishing.SetVariable(3, "PR_GROUP"); //2
            DataModel_Finishing.SetVariable(4, "PR_SYN_PER"); //2
            DataModel_Finishing.SetVariable(5, "CURMTHCNTWOV");
            DataModel_Finishing.SetVariable(6, "CURMTHWEIGHTWOV"); //2
            DataModel_Finishing.SetVariable(7, "CUMMTHCNTWV"); //3
            DataModel_Finishing.SetVariable(8, "CUMMTHWEIGHTWV");
            DataModel_Finishing.SetVariable(9, "NOW"); //2
            
            for(int i=0;i<=9;i++) {
                DataModel_Finishing.SetReadOnly(i);
            }
                        
            Table_Finishing.getColumnModel().getColumn(0).setMinWidth(30);
            Table_Finishing.getColumnModel().getColumn(0).setMaxWidth(40);
            Table_Finishing.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(1).setMaxWidth(70);
            Table_Finishing.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(2).setMaxWidth(80);
            Table_Finishing.getColumnModel().getColumn(3).setMinWidth(100);
            Table_Finishing.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(4).setMaxWidth(80);
            Table_Finishing.getColumnModel().getColumn(5).setMinWidth(90);
            //Table_b2b.getColumnModel().getColumn(5).setMaxWidth(80);
            Table_Finishing.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(6).setMaxWidth(100);
            Table_Finishing.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(7).setMaxWidth(100);
            Table_Finishing.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(8).setMaxWidth(80);
            //Table_b2b.getColumnModel().getColumn(9).setMaxWidth(80);
            Table_Finishing.getColumnModel().getColumn(9).setMinWidth(140);
            
            Table_Finishing.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer1());
            Table_Finishing.getTableHeader().setPreferredSize(new Dimension(Table_Finishing.getColumnModel().getTotalColumnWidth(), 95));

            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void FormatGrid_BookingProduction() {
        try {
            DataModel_Booking = new EITLTableModel();
            Table_Booking.removeAll();

            Table_Booking.setModel(DataModel_Booking);
            Table_Booking.setAutoResizeMode(0);

            String From_Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            
            
            String MonthYear = "";
            
            if(!"".equals(From_Date))
            {
                int curMonth=EITLERPGLOBAL.getMonth(From_Date);
                int curYear=EITLERPGLOBAL.getYear(From_Date);
     
                MonthYear = getMonthName(curMonth)+" "+curYear;
            }
            DataModel_Booking.addColumn("SrNo"); //0 - Read Only
            DataModel_Booking.addColumn("PRODUCT CATG"); //1
            DataModel_Booking.addColumn("PRODUCT CODE"); //1
            DataModel_Booking.addColumn("PRODUCT GROUP"); //1
            DataModel_Booking.addColumn("SYN PER"); //1
            DataModel_Booking.addColumn("Curr Month ("+MonthYear+") No. of Felts"); //1
            DataModel_Booking.addColumn("Curr Month ("+MonthYear+") Weight in Kgs."); //1
            DataModel_Booking.addColumn("Cummulative Month (Apr- "+MonthYear+") No. of Felts"); //1
            DataModel_Booking.addColumn("Cummulative Month (Apr- "+MonthYear+") Weight in Kgs"); //1
            DataModel_Booking.addColumn("Run Date"); //1
                       
            DataModel_Booking.SetVariable(0, "SR_N0"); //0 - Read Only
            DataModel_Booking.SetVariable(1, "CATG");
            DataModel_Booking.SetVariable(2, "PR_PRODUCT_CODE");
            DataModel_Booking.SetVariable(3, "PR_GROUP"); //2
            DataModel_Booking.SetVariable(4, "PR_SYN_PER"); //2
            DataModel_Booking.SetVariable(5, "CURMTHCNTWOV");
            DataModel_Booking.SetVariable(6, "CURMTHWEIGHTWOV"); //2
            DataModel_Booking.SetVariable(7, "CUMMTHCNTWV"); //3
            DataModel_Booking.SetVariable(8, "CUMMTHWEIGHTWV");
            DataModel_Booking.SetVariable(9, "NOW"); //2
            
            for(int i=0;i<=9;i++) {
                DataModel_Booking.SetReadOnly(i);
            }
                        
            Table_Booking.getColumnModel().getColumn(0).setMinWidth(30);
            Table_Booking.getColumnModel().getColumn(0).setMaxWidth(40);
            Table_Booking.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(1).setMaxWidth(70);
            Table_Booking.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(2).setMaxWidth(80);
            Table_Booking.getColumnModel().getColumn(3).setMinWidth(100);
            Table_Booking.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(4).setMaxWidth(80);
            Table_Booking.getColumnModel().getColumn(5).setMinWidth(90);
            //Table_b2b.getColumnModel().getColumn(5).setMaxWidth(80);
            Table_Booking.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(6).setMaxWidth(100);
            Table_Booking.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(7).setMaxWidth(100);
            Table_Booking.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2b.getColumnModel().getColumn(8).setMaxWidth(80);
            //Table_b2b.getColumnModel().getColumn(9).setMaxWidth(80);
            Table_Booking.getColumnModel().getColumn(9).setMinWidth(140);
            
            Table_Booking.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer1());
            Table_Booking.getTableHeader().setPreferredSize(new Dimension(Table_Booking.getColumnModel().getTotalColumnWidth(), 95));

            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
     
    
    private String getMonthName(int month) {
        if (month == 1) {
            return "Jan";
        } else if (month == 2) {
            return "Feb";
        } else if (month == 3) {
            return "Mar";
        } else if (month == 4) {
            return "Apr";
        } else if (month == 5) {
            return "May";
        } else if (month == 6) {
            return "Jun";
        } else if (month == 7) {
            return "Jul";
        } else if (month == 8) {
            return "Aug";
        } else if (month == 9) {
            return "Sep";
        } else if (month == 10) {
            return "Oct";
        } else if (month == 11) {
            return "Nov";
        } else if (month == 12) {
            return "Dec";
        } else {
            return "";
        }
    }
    
    public void GenerateData_WeavingProduction(String ORDER_BY) {
        
        try {
            FormatGrid_WeavingProduction();
            String From_Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            String To_Date = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
            
            
            int curYear=EITLERPGLOBAL.getYear(From_Date);
            int curMonth=EITLERPGLOBAL.getMonth(From_Date);
            
            if(curMonth>=4) //April
            {
                
            }
            else {
                curYear--;
            }
            
            int FinYear = curYear;
            lblFinYearWeaving.setText("Financial Year "+FinYear+"-"+(FinYear+1));
            String strSQLNew = "SELECT LOOM_NO,CATG,WIP_PRODUCT_CODE,WIP_GROUP,\n" +
"\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CURMTHCNT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN PICK ELSE 0 END,0)) AS CURMTHPICK,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN PICKMTR ELSE 0 END,0)) AS CURMTHPICKMTR,\n" +
"\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CUMMTHCNT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN PICK ELSE 0 END,0)) AS CUMMTHPICK,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN PICKMTR ELSE 0 END,0)) AS CUMMTHPICKMTR,1 AS S,\n" +
"Now() AS NOW\n" +
"\n" +
"FROM PRODUCTION.FELT_PROD_DATA ,(SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,CASE WHEN WIP_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS' WHEN WIP_GROUP IN ('HDS') THEN '3. HDS'\n" +
"WHEN WIP_GROUP IN ('SDF') THEN '4. SDF' WHEN WIP_GROUP IN ('ACNE','FCNE') THEN '2. ACNE' ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_WIP_PIECE_REGISTER ) AS PR\n" +
"\n" +
"WHERE PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"'\n" +
"\n" +
"AND PROD_DEPT = 'WEAVING' AND APPROVED =1 AND CANCELED =0 AND WIP_EXT_PIECE_NO = PROD_PIECE_NO \n" +
"GROUP BY LOOM_NO,CATG,WIP_PRODUCT_CODE,WIP_GROUP\n" +
"\n" +
"UNION ALL\n" +
"\n" +
"SELECT LOOM_NO,'TOTAL' AS CATG,'TOTAL' AS WIP_PRODUCT_CODE,'TOTAL ' AS WIP_GROUP,\n" +
"\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CURMTHCNT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN PICK ELSE 0 END,0)) AS CURMTHPICK,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN PICKMTR ELSE 0 END,0)) AS CURMTHPICKMTR,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CUMMTHCNT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN PICK ELSE 0 END,0)) AS CUMMTHPICK,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN PICKMTR ELSE 0 END,0)) AS CUMMTHPICKMTR,2 AS S,\n" +
"Now()\n" +
"\n" +
"FROM PRODUCTION.FELT_PROD_DATA ,(SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,CASE WHEN WIP_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
"\n" +
"WHEN WIP_GROUP IN ('HDS') THEN '3. HDS' WHEN WIP_GROUP IN ('SDF') THEN '4. SDF' WHEN WIP_GROUP IN ('ACNE','FCNE') THEN '2. ACNE' ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_WIP_PIECE_REGISTER ) AS PR\n" +
"\n" +
"WHERE PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"'\n" +
"\n" +
"AND PROD_DEPT = 'WEAVING' AND APPROVED =1 AND CANCELED =0 AND WIP_EXT_PIECE_NO = PROD_PIECE_NO \n" +
"GROUP BY LOOM_NO\n" +
"\n" +
"UNION ALL\n" +
"SELECT '99.GRAND TOTAL ' AS LOOM_NO,'G_TOTAL' AS CATG,'G_TOTAL' AS WIP_PRODUCT_CODE,'G_TOTAL ' AS WIP_GROUP,\n" +
"\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CURMTHCNT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN PICK ELSE 0 END,0)) AS CURMTHPICK,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+From_Date+"' AND PROD_DATE <= '"+To_Date+"' THEN PICKMTR ELSE 0 END,0)) AS CURMTHPICKMTR,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CUMMTHCNT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHT,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN PICK ELSE 0 END,0)) AS CUMMTHPICK,\n" +
"SUM(COALESCE(CASE WHEN PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"' THEN PICKMTR ELSE 0 END,0)) AS CUMMTHPICKMTR,3 AS S,\n" +
"Now()\n" +
"\n" +
"FROM PRODUCTION.FELT_PROD_DATA ,(SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_PRODUCT_CODE,WIP_GROUP,CASE WHEN WIP_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS' WHEN WIP_GROUP IN ('HDS') THEN '3. HDS' WHEN WIP_GROUP IN ('SDF') THEN '4. SDF' WHEN WIP_GROUP IN ('ACNE','FCNE') THEN '2. ACNE' ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_WIP_PIECE_REGISTER ) AS PR\n" +
"\n" +
"WHERE PROD_DATE >= '"+FinYear+"-04-01' AND PROD_DATE <= '"+To_Date+"'\n" +
"\n" +
"AND PROD_DEPT = 'WEAVING' AND APPROVED =1 AND CANCELED =0 AND WIP_EXT_PIECE_NO = PROD_PIECE_NO \n" +
"ORDER BY LOOM_NO, S,WIP_PRODUCT_CODE";
            
            
            ResultSet rs = data.getResult(strSQLNew);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("LOOM_NO");
                rowData[2] = rs.getString("CATG");
                rowData[3] = rs.getString("WIP_PRODUCT_CODE");
                rowData[4] = rs.getString("WIP_GROUP");
                rowData[5] = rs.getString("CURMTHCNT");
                rowData[6] = rs.getString("CURMTHWEIGHT");
                rowData[7] = rs.getString("CURMTHPICK");
                rowData[8] = rs.getString("CURMTHPICKMTR");
                rowData[9] = rs.getString("CUMMTHCNT");
                rowData[10] = rs.getString("CUMMTHWEIGHT");
                rowData[11] = rs.getString("CUMMTHPICK");
                rowData[12] = rs.getString("CUMMTHPICKMTR");
                rowData[13] = rs.getString("NOW");
                
                DataModel_Weaving.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        
    }
    
    public void GenerateData_FinishingProduction(String ORDER_BY) {
        
        try {
            FormatGrid_FinishingProduction();
            String From_Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            String To_Date = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
            
            
            int curYear=EITLERPGLOBAL.getYear(From_Date);
            int curMonth=EITLERPGLOBAL.getMonth(From_Date);
            
            if(curMonth>=4) //April
            {
                
            }
            else {
                curYear--;
            }
            
            int FinYear = curYear;
            lblFinYearFinishing.setText("Financial Year "+FinYear+"-"+(FinYear+1));
            String strSQLNew = "SELECT CATG,PR_PRODUCT_CODE,PR_GROUP,PR_SYN_PER, \n" +
                            "\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+From_Date+"' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%')THEN 1 ELSE 0 END,0)) AS CURMTHCNTWOV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+From_Date+"' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%')  THEN TAG_WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHTWOV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"'  AND PROD_PIECE_NO NOT LIKE ('%V%')THEN 1 ELSE 0 END,0)) AS CUMMTHCNTWV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%') THEN TAG_WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHTWV,1 AS S,Now() as NOW\n" +
                            "\n" +
                            "FROM PRODUCTION.FELT_PROD_DATA ,(SELECT PR_PIECE_NO,PR_SYN_PER,PR_PRODUCT_CODE,PR_GROUP,CASE WHEN PR_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
                            "WHEN PR_GROUP IN ('HDS') THEN '3. HDS'\n" +
                            "WHEN PR_GROUP IN ('SDF') THEN '4. SDF'\n" +
                            "WHEN PR_GROUP IN ('ACNE','FCNE') THEN '2. ACNE'\n" +
                            "ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER ) AS PR\n" +
                            "WHERE FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"'\n" +
                            "AND PROD_DEPT = 'FELT FINISHING' AND APPROVED =1 AND CANCELED =0\n" +
                            "AND PR_PIECE_NO = PROD_PIECE_NO\n" +
                            "GROUP BY CATG,PR_PRODUCT_CODE,PR_GROUP,PR_SYN_PER\n" +
                            "\n" +
                            "UNION ALL\n" +
                            "\n" +
                            "SELECT CATG,'TOTAL ' AS PR_PRODUCT_CODE,'TOTAL' AS PR_GROUP,'TOTAL ' AS PR_SYN_PER,\n" +
                            "\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+From_Date+"' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%')THEN 1 ELSE 0 END,0)) AS CURMTHCNTWOV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+From_Date+"' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%')  THEN TAG_WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHTWOV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"'  AND PROD_PIECE_NO NOT LIKE ('%V%')THEN 1 ELSE 0 END,0)) AS CUMMTHCNTWV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%') THEN TAG_WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHTWV,2 AS S,Now()\n" +
                            "\n" +
                            "FROM PRODUCTION.FELT_PROD_DATA ,(SELECT PR_PIECE_NO,PR_SYN_PER,PR_PRODUCT_CODE,PR_GROUP,CASE WHEN PR_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
                            "\n" +
                            "WHEN PR_GROUP IN ('HDS') THEN '3. HDS' WHEN PR_GROUP IN ('SDF') THEN '4. SDF' WHEN PR_GROUP IN ('ACNE','FCNE') THEN '2. ACNE'\n" +
                            "\n" +
                            "ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER ) AS PR\n" +
                            "WHERE FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"'\n" +
                            "AND PROD_DEPT = 'FELT FINISHING' AND APPROVED =1 AND CANCELED =0\n" +
                            "AND PR_PIECE_NO = PROD_PIECE_NO GROUP BY CATG\n" +
                            "\n" +
                            "UNION ALL\n" +
                            "SELECT 'Z.GRAND TOTAL' AS  CATG,'TOTAL ' AS PR_PRODUCT_CODE,'TOTAL' AS PR_GROUP,'TOTAL ' AS PR_SYN_PER,\n" +
                            "\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+From_Date+"' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%')THEN 1 ELSE 0 END,0)) AS CURMTHCNTWOV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+From_Date+"' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%')  THEN TAG_WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHTWOV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"'  AND PROD_PIECE_NO NOT LIKE ('%V%')THEN 1 ELSE 0 END,0)) AS CUMMTHCNTWV,\n" +
                            "SUM(COALESCE(CASE WHEN FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"' AND PROD_PIECE_NO NOT LIKE ('%V%') THEN TAG_WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHTWV ,3 AS S,Now()\n" +
                            "\n" +
                            "FROM PRODUCTION.FELT_PROD_DATA ,(SELECT PR_PIECE_NO,PR_SYN_PER,PR_PRODUCT_CODE,PR_GROUP,CASE WHEN PR_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
                            "\n" +
                            "WHEN PR_GROUP IN ('HDS') THEN '3. HDS' WHEN PR_GROUP IN ('SDF') THEN '4. SDF' WHEN PR_GROUP IN ('ACNE','FCNE') THEN '2. ACNE'\n" +
                            "\n" +
                            "ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER ) AS PR\n" +
                            "WHERE FINAL_APPROVAL_DATE >= '"+FinYear+"-04-01' AND FINAL_APPROVAL_DATE <= '"+To_Date+"'\n" +
                            "AND PROD_DEPT = 'FELT FINISHING' AND APPROVED =1 AND CANCELED =0 AND PR_PIECE_NO = PROD_PIECE_NO \n" +
                            "ORDER BY CATG,S,PR_GROUP,S\n" +
                            "\n" +
                            " ";
            
            
            ResultSet rs = data.getResult(strSQLNew);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("CATG");
                rowData[2] = rs.getString("PR_PRODUCT_CODE");
                rowData[3] = rs.getString("PR_GROUP");
                rowData[4] = rs.getString("PR_SYN_PER");
                rowData[5] = rs.getString("CURMTHCNTWOV");
                rowData[6] = rs.getString("CURMTHWEIGHTWOV");
                rowData[7] = rs.getString("CUMMTHCNTWV");
                rowData[8] = rs.getString("CUMMTHWEIGHTWV");
                rowData[9] = rs.getString("NOW");
                
               
                DataModel_Finishing.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        
    }
    
    public void GenerateData_BookingProduction(String ORDER_BY) {
        
        try {
            FormatGrid_BookingProduction();
            String From_Date = EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
            String To_Date = EITLERPGLOBAL.formatDateDB(txtToDate.getText());
            
            
            int curYear=EITLERPGLOBAL.getYear(From_Date);
            int curMonth=EITLERPGLOBAL.getMonth(From_Date);
            
            if(curMonth>=4) //April
            {
                
            }
            else {
                curYear--;
            }
            
            int FinYear = curYear;
            lblFinYearBooking.setText("Financial Year "+FinYear+"-"+(FinYear+1));
            String strSQLNew = "SELECT\n" +
            "\n" +
            "CATG,PR_PRODUCT_CODE,PR_GROUP,PR_SYN_PER,\n" +
            "\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+From_Date+"' AND PR_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CURMTHCNTWOV,\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+From_Date+"' AND PR_DATE <= '"+To_Date+"'THEN PR_THORITICAL_WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHTWOV,\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE<= '"+To_Date+"'  THEN 1 ELSE 0 END,0)) AS CUMMTHCNTWV,\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE <= '"+To_Date+"' THEN  PR_THORITICAL_WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHTWV,1 AS S,\n" +
            "Now() AS NOW\n" +
            "\n" +
            "FROM\n" +
            "\n" +
            "(SELECT PR_DATE,PR_DOC_NO,PR_PIECE_NO,PR_SYN_PER,PR_PRODUCT_CODE,PR_GROUP,PR_THORITICAL_WEIGHT,CASE WHEN PR_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
            "\n" +
            "WHEN PR_GROUP IN ('HDS') THEN '3. HDS'\n" +
            "WHEN PR_GROUP IN ('SDF') THEN '4. SDF'\n" +
            "WHEN PR_GROUP IN ('ACNE','FCNE') THEN '2. ACNE'\n" +
            "ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE SUBSTRING(PR_DOC_NO,1,2) = 'SO' AND RIGHT(PR_PIECE_NO,1) NOT IN ('V','R','P','J','A','B') AND\n" +
            "PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE<= '2021-03-31') AS A\n" +
            "\n" +
            "GROUP BY CATG,PR_PRODUCT_CODE,PR_GROUP,PR_SYN_PER\n" +
            "\n" +
            "UNION ALL\n" +
            "\n" +
            " \n" +
            "\n" +
            "SELECT\n" +
            "\n" +
            "CATG,'TOTAL ' AS PR_PRODUCT_CODE,'TOTAL' AS PR_GROUP,'TOTAL ' AS PR_SYN_PER,\n" +
            "\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+From_Date+"' AND PR_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CURMTHCNTWOV,\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+From_Date+"' AND PR_DATE <= '"+To_Date+"'THEN PR_THORITICAL_WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHTWOV,\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE<= '"+To_Date+"'  THEN 1 ELSE 0 END,0)) AS CUMMTHCNTWV,\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE <= '"+To_Date+"' THEN  PR_THORITICAL_WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHTWV,2 AS S,\n" +
            "Now() AS NOW\n" +
            "\n" +
            "FROM\n" +
            "\n" +
            "(SELECT PR_DATE,PR_DOC_NO,PR_PIECE_NO,PR_SYN_PER,PR_PRODUCT_CODE,PR_GROUP,PR_THORITICAL_WEIGHT,CASE WHEN PR_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
            "\n" +
            "WHEN PR_GROUP IN ('HDS') THEN '3. HDS'\n" +
            "WHEN PR_GROUP IN ('SDF') THEN '4. SDF'\n" +
            "WHEN PR_GROUP IN ('ACNE','FCNE') THEN '2. ACNE'\n" +
            "ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE SUBSTRING(PR_DOC_NO,1,2) = 'SO' AND RIGHT(PR_PIECE_NO,1) NOT IN ('V','R','P','J','A','B') AND\n" +
            "PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE<= '2021-03-31') AS A\n" +
            "\n" +
            "GROUP BY CATG\n" +
            "\n" +
            " \n" +
            "\n" +
            "UNION ALL\n" +
            "\n" +
            " \n" +
            "\n" +
            "SELECT\n" +
            "\n" +
            "'Z.GRAND TOTAL' AS  CATG,\n" +
            "\n" +
            "'TOTAL ' AS PR_PRODUCT_CODE,\n" +
            "\n" +
            "'TOTAL' AS PR_GROUP,'TOTAL ' AS PR_SYN_PER,\n" +
            "\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+From_Date+"' AND PR_DATE <= '"+To_Date+"' THEN 1 ELSE 0 END,0)) AS CURMTHCNTWOV,\n" +
            "\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+From_Date+"' AND PR_DATE <= '"+To_Date+"'THEN PR_THORITICAL_WEIGHT ELSE 0 END,0)) AS CURMTHWEIGHTWOV,\n" +
            "\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE<= '"+To_Date+"'  THEN 1 ELSE 0 END,0)) AS CUMMTHCNTWV,\n" +
            "\n" +
            "SUM(COALESCE(CASE WHEN PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE <= '"+To_Date+"' THEN  PR_THORITICAL_WEIGHT ELSE 0 END,0)) AS CUMMTHWEIGHTWV\n" +
            "\n" +
            ",2 AS S,Now()\n" +
            "\n" +
            "FROM\n" +
            "\n" +
            "(SELECT PR_DATE,PR_DOC_NO,PR_PIECE_NO,PR_SYN_PER,PR_PRODUCT_CODE,PR_GROUP,PR_THORITICAL_WEIGHT,CASE WHEN PR_GROUP NOT IN ('HDS','SDF','ACNE','FCNE') THEN '1. PRESS'\n" +
            "\n" +
            "WHEN PR_GROUP IN ('HDS') THEN '3. HDS'\n" +
            "\n" +
            "WHEN PR_GROUP IN ('SDF') THEN '4. SDF'\n" +
            "\n" +
            "WHEN PR_GROUP IN ('ACNE','FCNE') THEN '2. ACNE'\n" +
            "\n" +
            "ELSE '1. PRESS' END AS CATG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE SUBSTRING(PR_DOC_NO,1,2) = 'SO' AND RIGHT(PR_PIECE_NO,1) NOT IN ('V','R','P','J','A','B') AND\n" +
            "\n" +
            "PR_DATE >= '"+FinYear+"-04-01' AND PR_DATE<= '2021-03-31'\n" +
            "\n" +
            ") AS A\n" +
            "\n" +
            "ORDER BY CATG,S,PR_GROUP,S";
            
            System.out.println("Booking qry "+strSQLNew);
            ResultSet rs = data.getResult(strSQLNew);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("CATG");
                rowData[2] = rs.getString("PR_PRODUCT_CODE");
                rowData[3] = rs.getString("PR_GROUP");
                rowData[4] = rs.getString("PR_SYN_PER");
                rowData[5] = rs.getString("CURMTHCNTWOV");
                rowData[6] = rs.getString("CURMTHWEIGHTWOV");
                rowData[7] = rs.getString("CUMMTHCNTWV");
                rowData[8] = rs.getString("CUMMTHWEIGHTWV");
                rowData[9] = rs.getString("NOW");
                
               
                DataModel_Booking.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        
    }
    
    
    
}