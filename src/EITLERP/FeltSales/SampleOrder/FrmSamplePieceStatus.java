/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.SampleOrder;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
//import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmSamplePieceStatus extends javax.swing.JApplet {

    
 
    private EITLTableModel DataModel;
    private EITLTableCellRenderer Renderer1 = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer_realese = new EITLTableCellRenderer();
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    private EITLComboModel cmbIncharge;
    int USER_ID = EITLERPGLOBAL.gUserID;
    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        FormatGrid();
        //FormatGrid_OldTransaction();
        DefaultSettings();
        cmbIncharge = new EITLComboModel();
       
        SetFields(false);
        DisplayData();
        
        
//        if(USER_ID==352)//North: Mr. Mitang Lad
//        {
//            cmbIncharge.setSelectedItem("NORTH");
//            cmbZone.setEnabled(false);
//            btnSave.setEnabled(true);
//        }
//        else if(USER_ID==136)//East/West: Mr. Jaydeep Pandya
//        {
//            cmbIncharge.setSelectedItem("EAST/WEST");
//            cmbZone.setEnabled(false);
//            btnSave.setEnabled(true);
//        }
//        else if(USER_ID==318)//East/West: Mr. Jaydeep Pandya
//        {
//            cmbIncharge.setSelectedItem("EAST/WEST");
//            cmbZone.setEnabled(false);
//            btnSave.setEnabled(true);
//        }
//        else if(USER_ID==329)//ACNE: Mr. Anup Singh
//        {
//            cmbIncharge.setSelectedItem("ACNE");
//            cmbZone.setEnabled(false);
//            btnSave.setEnabled(true);
//        }
//        else if(USER_ID==331)//South: Mr. Siddharth NeogiC
//        {
//            cmbIncharge.setSelectedItem("SOUTH");
//            cmbZone.setEnabled(false);
//            btnSave.setEnabled(true);
//        }
        
    }
    
    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        clearFields();
    }
   
    private void clearFields() {
        
        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }
        Object[] rowData = new Object[15];
        rowData[0] = 1;
        DataModel.addRow(rowData);
    }

    private void DisplayData() {
        try{
            clearFields();
            FormatGrid();
//            
//            String InchargeCode = data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='"+cmbZone.getSelectedItem()+"'");
//            System.out.println("Incharge Code : "+InchargeCode);
//            
//            String Doc_No = data.getStringValueFromDB("SELECT * FROM PRODUCTION.FELT_SALES_SPILOVER_UPN_AREAINCHARGE_HEADER WHERE INCHARGE='"+InchargeCode+"'");
//            txtDocNo.setText(Doc_No);
//            lblTitle.setText("Felt Sales Spilover Piece UPN wise divert (Area Incharge) - " + Doc_No);
//
//            String str_query = "SELECT * FROM PRODUCTION.FELT_SALES_SPILOVER_UPN_AREAINCHARGE_DETAIL WHERE DOC_NO='"+Doc_No+"' AND ENTRY_STATUS='ACTIVE'";
            Connection connection = data.getConn();
            Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            ResultSet resultSet = statement.executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER where MAPPED_SCRAP='' OR HOLD_FOR_MAPPING=1");
            int srNo = 0;
            
            while (resultSet.next()) {
                srNo++;
                int NewRow = srNo - 1;

                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);

                DataModel.setValueByVariable("SrNo", srNo + "", NewRow);
                
                DataModel.setValueByVariable("SAMPLE_PIECE_NO", resultSet.getString("SAMPLE_PIECE_NO"), NewRow);
                DataModel.setValueByVariable("SAMPLE_ORDER_NO", resultSet.getString("SAMPLE_ORDER_NO"), NewRow);
                DataModel.setValueByVariable("SAMPLE_ORDER_DATE", resultSet.getString("SAMPLE_ORDER_DATE"), NewRow);
                DataModel.setValueByVariable("SAMPLE_ORDER_REMARK", resultSet.getString("SAMPLE_ORDER_REMARK"), NewRow);
                try{
                    ResultSet rsPiece = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+resultSet.getString("SAMPLE_PIECE_NO")+"'");
                    rsPiece.first();
                    DataModel.setValueByVariable("LENGTH", rsPiece.getString("PR_BILL_LENGTH"), NewRow);
                    DataModel.setValueByVariable("WIDTH", rsPiece.getString("PR_BILL_WIDTH"), NewRow);
                    DataModel.setValueByVariable("GSM", rsPiece.getString("PR_BILL_GSM"), NewRow);
                    DataModel.setValueByVariable("SQMTR", rsPiece.getString("PR_BILL_SQMTR"), NewRow);
                    DataModel.setValueByVariable("WEIGHT", rsPiece.getString("PR_BILL_WEIGHT"), NewRow);
                    DataModel.setValueByVariable("CURR_REQ_MONTH", rsPiece.getString("PR_REQUESTED_MONTH"), NewRow);
                    DataModel.setValueByVariable("CURR_OC_MONTH", rsPiece.getString("PR_OC_MONTHYEAR"), NewRow);
                    DataModel.setValueByVariable("PIECE_STAGE", rsPiece.getString("PR_PIECE_STAGE"), NewRow);
                }catch(Exception e)
                {
                    //e.printStackTrace();
                }
                
                DataModel.setValueByVariable("MAPPED_SCRAP", resultSet.getString("MAPPED_SCRAP"), NewRow);
                DataModel.setValueByVariable("UPN1", resultSet.getString("UPN1"), NewRow);
                DataModel.setValueByVariable("UPN2", resultSet.getString("UPN2"), NewRow);
                DataModel.setValueByVariable("UPN3", resultSet.getString("UPN3"), NewRow);
                DataModel.setValueByVariable("UPN4", resultSet.getString("UPN4"), NewRow);
                DataModel.setValueByVariable("UPN5", resultSet.getString("UPN5"), NewRow);
                
                DataModel.setValueByVariable("USER_REMARK", resultSet.getString("USER_REMARK"), NewRow);
                //COMBINATION_UPN
                if(resultSet.getString("COMBINATION_UPN").equals("1"))
                {
                    DataModel.setValueByVariable("COMBINATION_UPN", true, NewRow);
                }
                else
                {
                    DataModel.setValueByVariable("COMBINATION_UPN", false, NewRow);
                }
                
                if(resultSet.getString("HOLD_FOR_MAPPING").equals("1"))
                {
                    DataModel.setValueByVariable("HOLD_FOR_MAPPING", true, NewRow);
                }
                else
                {
                    DataModel.setValueByVariable("HOLD_FOR_MAPPING", false, NewRow);
                }
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo"); //0 - Read Only
            DataModel.addColumn("Piece No"); 
            DataModel.addColumn("Order No"); 
            DataModel.addColumn("order Date"); 
            DataModel.addColumn("Order Remark"); 
            DataModel.addColumn("Length"); 
            DataModel.addColumn("Width"); 
            DataModel.addColumn("GSM"); 
            DataModel.addColumn("SQMTR");
            DataModel.addColumn("Weight"); 
            DataModel.addColumn("Cur Req Month"); 
            DataModel.addColumn("Cur OC Month"); 
            DataModel.addColumn("Piece Stage");
            DataModel.addColumn("Mapped/Scrap"); 
            DataModel.addColumn("Combination UPN"); 
            DataModel.addColumn("UPN1"); 
            DataModel.addColumn("UPN2"); 
            DataModel.addColumn("UPN3"); 
            DataModel.addColumn("UPN4"); 
            DataModel.addColumn("UPN5"); 
            DataModel.addColumn("Remark");
            DataModel.addColumn("Hold For Mapping"); 
            
            
            DataModel.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel.SetVariable(1, "SAMPLE_PIECE_NO"); 
            DataModel.SetVariable(2, "SAMPLE_ORDER_NO"); 
            DataModel.SetVariable(3, "SAMPLE_ORDER_DATE"); 
            DataModel.SetVariable(4, "SAMPLE_ORDER_REMARK"); 
            DataModel.SetVariable(5, "LENGTH"); 
            DataModel.SetVariable(6, "WIDTH"); 
            DataModel.SetVariable(7, "GSM"); 
            DataModel.SetVariable(8, "SQMTR"); 
            DataModel.SetVariable(9, "WEIGHT"); 
            DataModel.SetVariable(10, "CURR_REQ_MONTH"); 
            DataModel.SetVariable(11, "CURR_OC_MONTH"); 
            DataModel.SetVariable(12, "PIECE_STAGE"); 
            DataModel.SetVariable(13, "MAPPED_SCRAP"); 
            DataModel.SetVariable(14, "COMBINATION_UPN"); 
            DataModel.SetVariable(15, "UPN1"); 
            DataModel.SetVariable(16, "UPN2"); 
            DataModel.SetVariable(17, "UPN3"); 
            DataModel.SetVariable(18, "UPN4"); 
            DataModel.SetVariable(19, "UPN5"); 
            DataModel.SetVariable(20, "USER_REMARK"); 
            DataModel.SetVariable(21, "HOLD_FOR_MAPPING"); 
            
            
            Table.getColumnModel().getColumn(0).setMaxWidth(40);
            Table.getColumnModel().getColumn(1).setMinWidth(140);
            Table.getColumnModel().getColumn(2).setMinWidth(140);
            Table.getColumnModel().getColumn(3).setMinWidth(120);
            Table.getColumnModel().getColumn(4).setMinWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(120);
            Table.getColumnModel().getColumn(6).setMinWidth(120);
            Table.getColumnModel().getColumn(7).setMinWidth(120);
            Table.getColumnModel().getColumn(8).setMinWidth(120);
            Table.getColumnModel().getColumn(9).setMinWidth(120);
            Table.getColumnModel().getColumn(10).setMinWidth(120);
            Table.getColumnModel().getColumn(11).setMinWidth(120);
            Table.getColumnModel().getColumn(12).setMinWidth(120);
            Table.getColumnModel().getColumn(13).setMinWidth(120);
            Table.getColumnModel().getColumn(14).setMinWidth(120);
            Table.getColumnModel().getColumn(15).setMinWidth(120);
            Table.getColumnModel().getColumn(16).setMinWidth(120);
            Table.getColumnModel().getColumn(17).setMinWidth(120);
            Table.getColumnModel().getColumn(18).setMinWidth(120);
            Table.getColumnModel().getColumn(19).setMinWidth(120);
            Table.getColumnModel().getColumn(20).setMinWidth(120);
            Table.getColumnModel().getColumn(21).setMinWidth(120);
            
            TableColumn layerColumn = Table.getColumnModel().getColumn(DataModel.getColFromVariable("MAPPED_SCRAP"));
            JComboBox layerbox = new JComboBox();
            layerbox.addItem("MAPPING");
            layerbox.addItem("SCRAP");
            layerbox.addItem("CANCELLED");
                            //CANCELLED
            layerColumn.setCellEditor(new DefaultCellEditor(layerbox));
            
            int ImportCol2 = DataModel.getColFromVariable("HOLD_FOR_MAPPING");
            Renderer1.setCustomComponent(ImportCol2, "CheckBox");
            JCheckBox aCheckBox2 = new JCheckBox();
            aCheckBox2.setBackground(Color.WHITE);
            aCheckBox2.setVisible(true);
            aCheckBox2.setSelected(false);
            Table.getColumnModel().getColumn(ImportCol2).setCellEditor(new DefaultCellEditor(aCheckBox2));
            Table.getColumnModel().getColumn(ImportCol2).setCellRenderer(Renderer1);
            
            int ImportCol3 = DataModel.getColFromVariable("COMBINATION_UPN");
            Renderer1.setCustomComponent(ImportCol3, "CheckBox");
            JCheckBox aCheckBox3 = new JCheckBox();
            aCheckBox3.setBackground(Color.WHITE);
            aCheckBox3.setVisible(true);
            aCheckBox3.setSelected(false);
            Table.getColumnModel().getColumn(ImportCol3).setCellEditor(new DefaultCellEditor(aCheckBox3));
            Table.getColumnModel().getColumn(ImportCol3).setCellRenderer(Renderer1);
            
            
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            
            if(USER_ID==311 || USER_ID==306)
            {
                
            }
            else
            {
                for(int i=0;i<DataModel.getColumnCount();i++)
                {
                    DataModel.SetReadOnly(i);
                }
            }
            
//            int ImportCol2 = DataModel.getColFromVariable("DIVISION_POSSIBILITY");
//            Renderer1.setCustomComponent(ImportCol2, "CheckBox");
//            JCheckBox aCheckBox2 = new JCheckBox();
//            aCheckBox2.setBackground(Color.WHITE);
//            aCheckBox2.setVisible(true);
//            aCheckBox2.setSelected(false);
//            Table.getColumnModel().getColumn(ImportCol2).setCellEditor(new DefaultCellEditor(aCheckBox2));
//            Table.getColumnModel().getColumn(ImportCol2).setCellRenderer(Renderer1);
//            
//            
//            int ImportCol = DataModel.getColFromVariable("RELEASE_FOR_DIVERSION");
//            Renderer_realese.setCustomComponent(ImportCol, "CheckBox");
//            JCheckBox aCheckBox = new JCheckBox();
//            aCheckBox.setBackground(Color.WHITE);
//            aCheckBox.setVisible(true);
//            aCheckBox.setSelected(false);
//            Table.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
//            Table.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer_realese);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ltbPink = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                TableAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                TableCaretPositionChanged(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 910, 450);

        btnSave.setText("SAVE");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave);
        btnSave.setBounds(780, 10, 120, 30);

        Tab.addTab("Sample Piece Status (Design)", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 40, 930, 590);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Sample Piece Status (Design)");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 10, 930, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(20, 590, 740, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
        getContentPane().add(ltbPink);
        ltbPink.setBounds(10, 70, 0, 0);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
       // if (evt.getKeyCode() == 112 || evt.getKeyCode() == 10) {

        
    }//GEN-LAST:event_TableKeyPressed
    

       
    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:
        if (Table.getSelectedColumn() == 1) {
            lblStatus1.setText("Press F1 for selection Machine No and Position No");
        } else {
            lblStatus1.setText("");
        }
    }//GEN-LAST:event_TableFocusGained

    private void TableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_TableAncestorMoved

    private void TableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TableCaretPositionChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TableCaretPositionChanged

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:if(Table.getSelectedColumn() == 1)
        lblStatus1.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        //jdbc:mysql://200.0.0.230:3306/PRODUCTION
        
    }//GEN-LAST:event_TableMouseClicked
    

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        
        for(int i=1;i<=20;i++)
        {
            String UPN = "UPN"+i;
            if(Table.getValueAt(Table.getSelectedRow(), DataModel.getColFromVariable("DIVISION_POSSIBILITY")).equals(false) && !DataModel.getValueByVariable(UPN, Table.getSelectedRow()).equals(""))
            {
                DataModel.setValueByVariable(UPN, "", Table.getSelectedRow());
            }
        }
    }//GEN-LAST:event_TableKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i <= Table.getRowCount() - 1; i++) {
            
            if(DataModel.getValueByVariable("MAPPED_SCRAP", i).equals("MAPPING") && Table.getValueAt(i, DataModel.getColFromVariable("HOLD_FOR_MAPPING")).equals(true))
            {
                 data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET MAPPED_SCRAP='MAPPING',HOLD_FOR_MAPPING=1 WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
            }
            if(DataModel.getValueByVariable("MAPPED_SCRAP", i).equals("MAPPING") && Table.getValueAt(i, DataModel.getColFromVariable("HOLD_FOR_MAPPING")).equals(false))
            {
                data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET MAPPED_SCRAP='MAPPING',HOLD_FOR_MAPPING=0 WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
            }
            if(DataModel.getValueByVariable("MAPPED_SCRAP", i).equals("SCRAP"))
            {
                data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET MAPPED_SCRAP='SCRAP',HOLD_FOR_MAPPING=0 WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE='SCRAP',PR_WIP_STATUS='SCRAP' WHERE PR_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_PIECE_STAGE='SCRAP',WIP_STATUS='SCRAP' WHERE WIP_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
            }
            //COMBINATION_UPN
            int COMBINATION_UPN = 0;
            if (Table.getValueAt(i, 14).equals(true)) {
            //if(DataModel.getValueByVariable("COMBINATION_UPN", i).equals(true))
            //{
                COMBINATION_UPN = 1;
                data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET COMBINATION_UPN='1' WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
            }
            String Piece_Stage = data.getStringValueFromDB("SELECT PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
            if(DataModel.getValueByVariable("MAPPED_SCRAP", i).equals("CANCELLED") && Piece_Stage.equals("PLANNING"))
            {
                data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET MAPPED_SCRAP='CANCELLED',HOLD_FOR_MAPPING=0 WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE='CANCELED' WHERE PR_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_PIECE_STAGE='CANCELED' WHERE WIP_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
            }
            if (DataModel.getValueByVariable("MAPPED_SCRAP", i).equals("MAPPING") && !DataModel.getValueByVariable("SAMPLE_PIECE_NO", i).equals("")) {
               try{ 
                        String PieceNo = DataModel.getValueByVariable("SAMPLE_PIECE_NO", i); 
                        String UPN1 = DataModel.getValueByVariable("UPN1", i); 
                        String UPN2 = DataModel.getValueByVariable("UPN2", i); 
                        String UPN3 = DataModel.getValueByVariable("UPN3", i); 
                        String UPN4 = DataModel.getValueByVariable("UPN4", i); 
                        String UPN5 = DataModel.getValueByVariable("UPN5", i); 
                        try{
                   
                            if(!UPN1.equals(""))
                            {
                                if(!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST WHERE PIECE_NO='"+PieceNo+"' AND UPN='"+UPN1+"'"))
                                {
                                    System.out.println("INSERT INTO PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST (PIECE_NO,UPN,DIVERSION_NO,REMARK,OLD_PARTYCODE,NEW_PARTYCODE,COMBINATION_UPN) VALUES " +
                                                 "('"+PieceNo+"','"+UPN1+"','','','','','"+COMBINATION_UPN+"')");
                                    data.Execute("INSERT INTO PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST (PIECE_NO,UPN,DIVERSION_NO,REMARK,OLD_PARTYCODE,NEW_PARTYCODE,COMBINATION_UPN) VALUES " +
                                             "('"+PieceNo+"','"+UPN1+"','','','','','"+COMBINATION_UPN+"')");
                                    data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET UPN1='"+UPN1+"' WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                                }
                            }
                            if(!UPN2.equals(""))
                            {
                                if(!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST WHERE PIECE_NO='"+PieceNo+"' AND UPN='"+UPN2+"'"))
                                {
                                    data.Execute("INSERT INTO PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST (PIECE_NO,UPN,DIVERSION_NO,REMARK,OLD_PARTYCODE,NEW_PARTYCODE,COMBINATION_UPN) VALUES " +
                                             "('"+PieceNo+"','"+UPN2+"','','','','','"+COMBINATION_UPN+"')");
                                    data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET UPN2='"+UPN2+"' WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                                }
                            }
                            if(!UPN3.equals(""))
                            {
                                if(!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST WHERE PIECE_NO='"+PieceNo+"' AND UPN='"+UPN3+"'"))
                                {
                                    data.Execute("INSERT INTO PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST (PIECE_NO,UPN,DIVERSION_NO,REMARK,OLD_PARTYCODE,NEW_PARTYCODE,COMBINATION_UPN) VALUES " +
                                             "('"+PieceNo+"','"+UPN3+"','','','','','"+COMBINATION_UPN+"')");
                                    data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET UPN3='"+UPN3+"' WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                                }
                            }
                            if(!UPN4.equals(""))
                            {
                                if(!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST WHERE PIECE_NO='"+PieceNo+"' AND UPN='"+UPN4+"'"))
                                {
                                    data.Execute("INSERT INTO PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST (PIECE_NO,UPN,DIVERSION_NO,REMARK,OLD_PARTYCODE,NEW_PARTYCODE,COMBINATION_UPN) VALUES " +
                                             "('"+PieceNo+"','"+UPN4+"','','','','','"+COMBINATION_UPN+"')");
                                    data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET UPN4='"+UPN4+"' WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                                }
                            }
                            if(!UPN5.equals(""))
                            {
                                if(!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST WHERE PIECE_NO='"+PieceNo+"' AND UPN='"+UPN5+"'"))
                                {
                                    data.Execute("INSERT INTO PRODUCTION.FELT_SALES_UPNWISE_OBSOLETE_LIST (PIECE_NO,UPN,DIVERSION_NO,REMARK,OLD_PARTYCODE,NEW_PARTYCODE,COMBINATION_UPN) VALUES " +
                                             "('"+PieceNo+"','"+UPN5+"','','','','','"+COMBINATION_UPN+"')");
                                    data.Execute("UPDATE PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER SET UPN5='"+UPN5+"' WHERE SAMPLE_PIECE_NO='"+DataModel.getValueByVariable("SAMPLE_PIECE_NO", i)+"'");
                                }
                            }
                            /*
                            data.Execute("INSERT INTO PRODUCTION.FELT_SALES_SAMPLE_ORDER_REGISTER (SAMPLE_PIECE_NO, SAMPLE_ORDER_NO, SAMPLE_ORDER_DATE, SAMPLE_ORDER_REMARK, MAPPED_SCRAP, MAPPED_DATE, UPN1, UPN2, UPN3, UPN4, UPN5, SCRAP_DATE, USER_REMARK, USER_ID, IP_FROM, HOLD_FOR_MAPPING, COMBINATION_UPN) VALUES " +
                                             "(SAMPLE_PIECE_NO, SAMPLE_ORDER_NO, SAMPLE_ORDER_DATE, SAMPLE_ORDER_REMARK, MAPPED_SCRAP, MAPPED_DATE, UPN1, UPN2, UPN3, UPN4, UPN5, SCRAP_DATE, USER_REMARK, USER_ID, IP_FROM, HOLD_FOR_MAPPING, COMBINATION_UPN)");
                            */
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    
               }catch(Exception e)
               {
                   e.printStackTrace();
               }
            }
       }
       DisplayData();
    }//GEN-LAST:event_btnSaveActionPerformed
    

    

    private void Save() {

        
    }

    private void SetFields(boolean pStat) {

       
        Table.setEnabled(pStat);
        
        
        
        if(USER_ID==311 || USER_ID==306)
        {
            //DataModel.SetReadOnly(1);
            btnSave.setEnabled(true);
            Table.setEnabled(true);
        
        }
        else
        {
            DataModel.SetReadOnly(1);
            btnSave.setEnabled(false);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel ltbPink;
    // End of variables declaration//GEN-END:variables

    
}
