/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.SampleOrder;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.Finance.UtilFunctions;
import EITLERP.LOV;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
//import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmFeltSampleOrder extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModel_Rejection;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 861;
    private String DOC_NO = "";
    private clsFeltSampleOrder feltOrder;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();
    private int FinalApprovedBy = 0;
    
    private EITLTableCellRenderer render_invoice = new EITLTableCellRenderer();
    
    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    ArrayList<String> SDF_list=new ArrayList<String>();
    ArrayList<String> NONSDF_list=new ArrayList<String>();
    EITLTableCellRenderer Renderer1 = new EITLTableCellRenderer();
    /**
     * Initializes the applet FrmFeltSampleOrder
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();
        FormatGrid();
        FormatGrid_Rejection();
        //FormatGrid_OldTransaction();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        //Cancel();
        
        feltOrder = new clsFeltSampleOrder();
        boolean load = feltOrder.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + feltOrder.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetFields(false);
       
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        txtDocNo.setText("0");
        
        txtPartyCode.setText("");
        txtPartyName.setText("");
        
        REMARK.setText("");
        
        
        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();
        FormatGrid_Rejection();
        // FormatGridA();
        FormatGridHS();

        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }
//        Object[] rowData = new Object[15];
//        rowData[0] = 1;
//        DataModel.addRow(rowData);
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            
            if (feltOrder.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (feltOrder.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (feltOrder.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //clsFeltSampleOrder.ChangeVoucherNo=false;
        clearFields();
        try {
            txtDocNo.setText(feltOrder.getAttribute("DOC_NO").getString());
            lblTitle.setText("Felt Sample Order - " + feltOrder.getAttribute("DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(feltOrder.getAttribute("DOC_DATE").getString()));
            
            txtPartyCode.setText(feltOrder.getAttribute("PARTY_CODE").getString());
            txtPartyName.setText(feltOrder.getAttribute("PARTY_NAME").getString());
            
            REMARK.setText(feltOrder.getAttribute("REMARK").getString());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, feltOrder.getAttribute("HIERARCHY_ID").getInt());

            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= feltOrder.hmFeltSalesOrderDetails.size(); i++) {
                clsFeltSampleOrderDetails ObjItem = (clsFeltSampleOrderDetails) feltOrder.hmFeltSalesOrderDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);
                int NewRow = Table.getRowCount() - 1;
                DataModel.setValueByVariable("SrNo", Integer.toString(i), NewRow);
                DataModel.setValueByVariable("MACHINE_NO", ObjItem.getAttribute("MACHINE_NO").getString(), NewRow);
                DataModel.setValueByVariable("POSITION", ObjItem.getAttribute("POSITION").getString(), NewRow);
                DataModel.setValueByVariable("POSITION_DESC", ObjItem.getAttribute("POSITION_DESC").getString(), NewRow);
                
                DataModel.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel.setValueByVariable("LAYER_TYPE", ObjItem.getAttribute("LAYER_TYPE").getString(), NewRow);
                DataModel.setValueByVariable("PRODUCT_CODE", ObjItem.getAttribute("PRODUCT_CODE").getString(), NewRow);
                
                DataModel.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                DataModel.setValueByVariable("THORITICAL_WIDTH", ObjItem.getAttribute("THORITICAL_WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("SQ_MTR", ObjItem.getAttribute("SQ_MTR").getString(), NewRow);
                DataModel.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                

                Connection Conn;
                Statement stmt;
                ResultSet rsData;

                String ITEM_DESC = "", SYN = "";
                String Group_Name = "";
                try {
                    Conn = data.getConn();
                    stmt = Conn.createStatement();
                    String Prod_Code = ObjItem.getAttribute("PRODUCT_CODE").getString().substring(0, 6);
                    rsData = stmt.executeQuery("SELECT PRODUCT_DESC,SYN_PER,GROUP_NAME FROM PRODUCTION.FELT_QLT_RATE_MASTER where PRODUCT_CODE = '" + Prod_Code + "' AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
                    System.out.println("SELECT PRODUCT_DESC,SYN_PER,GROUP_NAME FROM PRODUCTION.FELT_QLT_RATE_MASTER where PRODUCT_CODE = '" + Prod_Code + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
                    rsData.first();
                    ITEM_DESC = rsData.getString(1);
                    SYN = rsData.getString(2);
                    Group_Name = rsData.getString(3);
                } catch (Exception e) {
                    System.out.println("Error : " + e.getMessage());
                }
                DataModel.setValueByVariable("PRODUCT_DESC", ITEM_DESC, NewRow);
                //DataModel.setValueByVariable("PRODUCT_DESC", ITEM_DESC, NewRow);
                DataModel.setValueByVariable("REMARK", ObjItem.getAttribute("REMARK").getString(), NewRow);
                DataModel.setValueByVariable("REQ_MONTH", ObjItem.getAttribute("REQ_MONTH").getString(), NewRow);
                DataModel.setValueByVariable("SYN_PER", SYN, NewRow);
                DataModel.setValueByVariable("S_GROUP", Group_Name, NewRow);

                if (EditMode == EITLERPGLOBAL.EDIT) {
                    
                }

            }

            
            FormatGrid_Rejection();
            //Now Generate Table
            for (int i = 1; i <= feltOrder.hmFeltRejectionDetails.size(); i++) {
                clsFeltRejectionDetails ObjItem = (clsFeltRejectionDetails) feltOrder.hmFeltRejectionDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel_Rejection.addRow(rowData);
                int NewRow = tblRejectionPiece.getRowCount() - 1;
                DataModel_Rejection.setValueByVariable("SrNo", Integer.toString(i), NewRow);
                DataModel_Rejection.setValueByVariable("R_MACHINE_NO", ObjItem.getAttribute("R_MACHINE_NO").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_POSITION", ObjItem.getAttribute("R_POSITION").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_POSITION_DESC", ObjItem.getAttribute("R_POSITION_DESC").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_PIECE_NO", ObjItem.getAttribute("R_PIECE_NO").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_NEW_PIECE_NO", ObjItem.getAttribute("R_NEW_PIECE_NO").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_NEW_PIECE_STAGE", ObjItem.getAttribute("R_NEW_PIECE_STAGE").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_LAYER_TYPE", ObjItem.getAttribute("R_LAYER_TYPE").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_PRODUCT_CODE", ObjItem.getAttribute("R_PRODUCT_CODE").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_PRODUCT_DESC", ObjItem.getAttribute("R_PRODUCT_DESC").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_S_GROUP", ObjItem.getAttribute("R_S_GROUP").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_PIECE_STAGE", data.getStringValueFromDB("SELECT PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+ObjItem.getAttribute("R_PIECE_NO").getString()+"'"), NewRow);
                DataModel_Rejection.setValueByVariable("R_LENGTH", ObjItem.getAttribute("R_LENGTH").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_WIDTH", ObjItem.getAttribute("R_WIDTH").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_GSM", ObjItem.getAttribute("R_GSM").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_WEIGHT", ObjItem.getAttribute("R_WEIGHT").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_SQ_MTR", ObjItem.getAttribute("R_SQ_MTR").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_STYLE", ObjItem.getAttribute("R_STYLE").getString(), NewRow);
                DataModel_Rejection.setValueByVariable("R_REQ_MONTH", ObjItem.getAttribute("R_REQ_MONTH").getString(), NewRow);
                
//                rowData[5] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO="+rsData.getString("PR_POSITION_NO"));//POSITION_DESC
//                    rowData[6] = rsData.getString("PR_PIECE_STAGE");//PIECE_STAGE
//                    rowData[7] = rsData.getString("PR_PIECE_AB_FLAG");//LAYER_TYPE
//                    rowData[8] = rsData.getString("PR_BILL_PRODUCT_CODE");//PRODUCT_CODE
//                    rowData[9] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE='"+rsData.getString("PR_BILL_PRODUCT_CODE")+"'");//PRODUCT_DESC
                    
            }
            
            //DoNotEvaluate=false;
            //UpdateTotals();
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = feltOrder.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = feltOrder.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsFeltSampleOrder ObjHistory = (clsFeltSampleOrder) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("UPDATED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("UPDATED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = Integer.parseInt(ObjHistory.getAttribute("UPDATED_BY").getString());
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            
        } catch (Exception e) {
                e.printStackTrace();
        }
       
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7068, 70681)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7068, 70682)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7068, 70683)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7068, 70685)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo"); //0 - Read Only
            DataModel.addColumn("MACHINE NO"); //1
            DataModel.addColumn("POSITION"); //2
            DataModel.addColumn("POSITION DESC"); //3
            DataModel.addColumn("PIECE NO"); //4
            DataModel.addColumn("LAYER TYPE");
            DataModel.addColumn("PRODUCT"); //5
            DataModel.addColumn("PRODUCT DESC"); //6
            DataModel.addColumn("GROUP"); //7
            DataModel.addColumn("LENGTH"); //8
            DataModel.addColumn("WIDTH"); //9
            DataModel.addColumn("GSM"); //10
            DataModel.addColumn("TH. WEIGHT"); //11
            DataModel.addColumn("SQ MT"); //12
            DataModel.addColumn("STYLE"); //13
            DataModel.addColumn("REQ MONTH"); //14
            DataModel.addColumn("SYN(%)"); //15
            DataModel.addColumn("REMARK"); //16
           
            
            DataModel.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel.SetVariable(1, "MACHINE_NO"); //1
            DataModel.SetVariable(2, "POSITION"); //2
            DataModel.SetVariable(3, "POSITION_DESC"); //3
            DataModel.SetVariable(4, "PIECE_NO"); //4
            DataModel.SetVariable(5, "LAYER_TYPE"); //4
            DataModel.SetVariable(6, "PRODUCT_CODE"); //5
            DataModel.SetVariable(7, "PRODUCT_DESC"); //6
            DataModel.SetVariable(8, "S_GROUP"); //7
            DataModel.SetVariable(9, "LENGTH"); //8
            DataModel.SetVariable(10, "WIDTH"); //9
            DataModel.SetVariable(11, "GSM"); //10
            DataModel.SetVariable(12, "THORITICAL_WIDTH"); //11
            DataModel.SetVariable(13, "SQ_MTR"); //12
            DataModel.SetVariable(14, "STYLE"); //13
            DataModel.SetVariable(15, "REQ_MONTH"); //14
            DataModel.SetVariable(16, "SYN_PER"); //15
            DataModel.SetVariable(17, "REMARK"); //16
            
            Table.getColumnModel().getColumn(0).setMinWidth(20);
            Table.getColumnModel().getColumn(1).setMinWidth(90);
            Table.getColumnModel().getColumn(2).setMinWidth(70);
            Table.getColumnModel().getColumn(3).setMinWidth(150);
            Table.getColumnModel().getColumn(4).setMinWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(120);
            Table.getColumnModel().getColumn(6).setMinWidth(120);
            Table.getColumnModel().getColumn(7).setMinWidth(100);
            Table.getColumnModel().getColumn(8).setMinWidth(120);
            Table.getColumnModel().getColumn(9).setMinWidth(120);
            Table.getColumnModel().getColumn(10).setMinWidth(120);
            Table.getColumnModel().getColumn(11).setMinWidth(120);
            Table.getColumnModel().getColumn(12).setMinWidth(120);
            Table.getColumnModel().getColumn(13).setMinWidth(120);
            Table.getColumnModel().getColumn(14).setMinWidth(120);
            Table.getColumnModel().getColumn(15).setMinWidth(120);
            Table.getColumnModel().getColumn(16).setMinWidth(120);
            Table.getColumnModel().getColumn(17).setMinWidth(120);
                     
            TableColumn layerColumn = Table.getColumnModel().getColumn(5);
            JComboBox layerbox = new JComboBox();
            layerbox.addItem("WITHOUT_AB");
            layerbox.addItem("WITH_AB");
            layerColumn.setCellEditor(new DefaultCellEditor(layerbox));
            
            TableColumn dateColumn = Table.getColumnModel().getColumn(15);
            JComboBox monthbox = new JComboBox();
            
            String month_name = "";
            Date date = new Date();
            int month;
            int year = date.getYear() + 1900;
            
            month = date.getMonth();
            
            for (int i = 0; i < 10; i++) {
                month = month + 1;

                if (month >= 13) {
                    month = 1;
                    year = year + 1;
                }

                if (month == 1) {
                    month_name = "Jan";
                } else if (month == 2) {
                    month_name = "Feb";
                } else if (month == 3) {
                    month_name = "Mar";
                } else if (month == 4) {
                    month_name = "Apr";
                } else if (month == 5) {
                    month_name = "May";
                } else if (month == 6) {
                    month_name = "Jun";
                } else if (month == 7) {
                    month_name = "Jul";
                } else if (month == 8) {
                    month_name = "Aug";
                } else if (month == 9) {
                    month_name = "Sep";
                } else if (month == 10) {
                    month_name = "Oct";
                } else if (month == 11) {
                    month_name = "Nov";
                } else if (month == 12) {
                    month_name = "Dec";
                }
                monthbox.addItem(month_name + " - " + year);
            }

            dateColumn.setCellEditor(new DefaultCellEditor(monthbox));

            //dateColumn.setCellEditor(new DatePi);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void FormatGrid_Rejection() {
        try {
            DataModel_Rejection = new EITLTableModel();
            tblRejectionPiece.removeAll();

            tblRejectionPiece.setModel(DataModel_Rejection);
            tblRejectionPiece.setAutoResizeMode(0);

            DataModel_Rejection.addColumn("SrNo"); //0 - Read Only
            DataModel_Rejection.addColumn("PIECE NO"); //1
            DataModel_Rejection.addColumn("NEW PIECE NO"); //1
            DataModel_Rejection.addColumn("MACHINE NO"); //1
            DataModel_Rejection.addColumn("POSITION"); //2
            DataModel_Rejection.addColumn("POSITION DESC"); //3
            DataModel_Rejection.addColumn("PIECE STAGE"); //4
            DataModel_Rejection.addColumn("NEW PIECE STAGE"); //4
            DataModel_Rejection.addColumn("LAYER TYPE");
            DataModel_Rejection.addColumn("PRODUCT"); //5
            DataModel_Rejection.addColumn("PRODUCT DESC"); //6
            DataModel_Rejection.addColumn("GROUP"); //7
            DataModel_Rejection.addColumn("LENGTH"); //8
            DataModel_Rejection.addColumn("WIDTH"); //9
            DataModel_Rejection.addColumn("GSM"); //10
            DataModel_Rejection.addColumn("WEIGHT"); //11
            DataModel_Rejection.addColumn("SQ MT"); //12
            DataModel_Rejection.addColumn("STYLE"); //13
            DataModel_Rejection.addColumn("REQ MONTH"); //14
            DataModel_Rejection.addColumn("SYN(%)"); //15
            DataModel_Rejection.addColumn("Remark"); //16
           
            
            DataModel_Rejection.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_Rejection.SetVariable(1, "R_PIECE_NO"); //1
            DataModel_Rejection.SetVariable(2, "R_NEW_PIECE_NO"); //1
            DataModel_Rejection.SetVariable(3, "R_MACHINE_NO"); //1
            DataModel_Rejection.SetVariable(4, "R_POSITION"); //2
            DataModel_Rejection.SetVariable(5, "R_POSITION_DESC"); //3
            DataModel_Rejection.SetVariable(6, "R_PIECE_STAGE"); //4
            DataModel_Rejection.SetVariable(7, "R_NEW_PIECE_STAGE"); //4
            DataModel_Rejection.SetVariable(8, "R_LAYER_TYPE"); //4
            DataModel_Rejection.SetVariable(9, "R_PRODUCT_CODE"); //5
            DataModel_Rejection.SetVariable(10, "R_PRODUCT_DESC"); //6
            DataModel_Rejection.SetVariable(11, "R_S_GROUP"); //7
            DataModel_Rejection.SetVariable(12, "R_LENGTH"); //8
            DataModel_Rejection.SetVariable(13, "R_WIDTH"); //9
            DataModel_Rejection.SetVariable(14, "R_GSM"); //10
            DataModel_Rejection.SetVariable(15, "R_WEIGHT"); //11
            DataModel_Rejection.SetVariable(16, "R_SQ_MTR"); //12
            DataModel_Rejection.SetVariable(17, "R_STYLE"); //13
            DataModel_Rejection.SetVariable(18, "R_REQ_MONTH"); //14
            DataModel_Rejection.SetVariable(19, "R_SYN_PER"); //15
            DataModel_Rejection.SetVariable(20, "R_REMARK"); //16
            
            
            tblRejectionPiece.getColumnModel().getColumn(0).setMinWidth(20);
            tblRejectionPiece.getColumnModel().getColumn(1).setMinWidth(110);
            tblRejectionPiece.getColumnModel().getColumn(2).setMinWidth(110);
            tblRejectionPiece.getColumnModel().getColumn(3).setMinWidth(90);
            tblRejectionPiece.getColumnModel().getColumn(4).setMinWidth(70);
            tblRejectionPiece.getColumnModel().getColumn(5).setMinWidth(150);
            tblRejectionPiece.getColumnModel().getColumn(6).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(7).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(8).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(9).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(10).setMinWidth(100);
            tblRejectionPiece.getColumnModel().getColumn(11).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(12).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(13).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(14).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(15).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(16).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(17).setMinWidth(120);
            tblRejectionPiece.getColumnModel().getColumn(18).setMinWidth(120);
           
            TableColumn dateColumn = tblRejectionPiece.getColumnModel().getColumn(DataModel_Rejection.getColFromVariable("R_REQ_MONTH"));
            JComboBox monthbox = new JComboBox();
            
            String month_name = "";
            Date date = new Date();
            int month;
            int year = date.getYear() + 1900;
            
            month = date.getMonth();
            
            for (int i = 0; i < 10; i++) {
                month = month + 1;

                if (month >= 13) {
                    month = 1;
                    year = year + 1;
                }

                if (month == 1) {
                    month_name = "Jan";
                } else if (month == 2) {
                    month_name = "Feb";
                } else if (month == 3) {
                    month_name = "Mar";
                } else if (month == 4) {
                    month_name = "Apr";
                } else if (month == 5) {
                    month_name = "May";
                } else if (month == 6) {
                    month_name = "Jun";
                } else if (month == 7) {
                    month_name = "Jul";
                } else if (month == 8) {
                    month_name = "Aug";
                } else if (month == 9) {
                    month_name = "Sep";
                } else if (month == 10) {
                    month_name = "Oct";
                } else if (month == 11) {
                    month_name = "Nov";
                } else if (month == 12) {
                    month_name = "Dec";
                }
                monthbox.addItem(month_name + " - " + year);
            }

            dateColumn.setCellEditor(new DefaultCellEditor(monthbox));

            TableColumn layerColumn = tblRejectionPiece.getColumnModel().getColumn(DataModel_Rejection.getColFromVariable("R_LAYER_TYPE"));

            JComboBox layerbox = new JComboBox();
            layerbox.addItem("WITHOUT_AB");
            layerbox.addItem("WITH_AB");
            layerColumn.setCellEditor(new DefaultCellEditor(layerbox));
            
            
            TableColumn PieceStageColumn = tblRejectionPiece.getColumnModel().getColumn(DataModel_Rejection.getColFromVariable("R_NEW_PIECE_STAGE"));

            JComboBox stagebox = new JComboBox();
            stagebox.addItem("WEAVING");
            stagebox.addItem("MENDING");
            stagebox.addItem("NEEDLING");
            stagebox.addItem("SPIRALLING");
            stagebox.addItem("SEAMING");
            stagebox.addItem("FINISHING");
            stagebox.addItem("IN STOCK");
            PieceStageColumn.setCellEditor(new DefaultCellEditor(stagebox));
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
   

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        REMARK = new javax.swing.JTextField();
        txtDocNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        REMOVE = new javax.swing.JButton();
        txtDocDate = new javax.swing.JFormattedTextField();
        cmdAdd = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        txtPartyCode = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRejectionPiece = new javax.swing.JTable();
        btnRemove2 = new javax.swing.JButton();
        btnAdd2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ltbPink = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("S.O.Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 90, 30);

        jLabel3.setText("Sample Order  No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(260, 10, 130, 30);

        jLabel5.setText("Remark");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 60, 80, 15);

        REMARK.setToolTipText("Enter Remark");
        REMARK.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                REMARKFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                REMARKFocusLost(evt);
            }
        });
        REMARK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REMARKActionPerformed(evt);
            }
        });
        REMARK.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                REMARKKeyPressed(evt);
            }
        });
        jPanel1.add(REMARK);
        REMARK.setBounds(90, 60, 470, 20);

        txtDocNo.setEditable(false);
        txtDocNo.setBackground(new java.awt.Color(254, 242, 230));
        txtDocNo.setText("S00000001");
        txtDocNo.setEnabled(false);
        jPanel1.add(txtDocNo);
        txtDocNo.setBounds(410, 10, 150, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                TableAncestorMoved(evt);
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                TableCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 110, 1250, 170);

        REMOVE.setText("Remove");
        REMOVE.setEnabled(false);
        REMOVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REMOVEActionPerformed(evt);
            }
        });
        jPanel1.add(REMOVE);
        REMOVE.setBounds(1150, 80, 110, 25);

        txtDocDate.setEditable(false);
        jPanel1.add(txtDocDate);
        txtDocDate.setBounds(90, 10, 150, 30);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        jPanel1.add(cmdAdd);
        cmdAdd.setBounds(1040, 80, 110, 25);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(240, 10, 34, 15);

        jLabel1.setText("Party Code");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 40, 90, 15);

        txtPartyName.setToolTipText("Enter Remark");
        txtPartyName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyNameFocusLost(evt);
            }
        });
        txtPartyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPartyNameActionPerformed(evt);
            }
        });
        txtPartyName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyNameKeyPressed(evt);
            }
        });
        jPanel1.add(txtPartyName);
        txtPartyName.setBounds(200, 40, 360, 20);

        txtPartyCode.setToolTipText("Enter Remark");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPartyCodeActionPerformed(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        jPanel1.add(txtPartyCode);
        txtPartyCode.setBounds(90, 40, 110, 20);

        jLabel4.setText("New sample order");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 90, 140, 15);

        jLabel6.setText("Rejection/Scrap Pieces");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 290, 180, 15);

        tblRejectionPiece.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRejectionPiece.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblRejectionPieceKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tblRejectionPiece);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(12, 312, 1250, 200);

        btnRemove2.setText("Remove");
        btnRemove2.setEnabled(false);
        jPanel1.add(btnRemove2);
        btnRemove2.setBounds(1150, 280, 110, 25);

        btnAdd2.setText("Add");
        btnAdd2.setEnabled(false);
        btnAdd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd2ActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd2);
        btnAdd2.setBounds(1040, 280, 110, 25);

        Tab.addTab("Felt Sample Order Entry", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 1280, 560);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1280, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Sales Sample Order");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1280, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(20, 590, 740, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
        getContentPane().add(ltbPink);
        ltbPink.setBounds(10, 70, 0, 0);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
      
            if (Table.getSelectedColumn() == 1) {
                LOV aList = new LOV();
                aList.SQL = "SELECT distinct D.MM_MACHINE_NO AS MACHINE_NO FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE (D.MM_MACHINE_NO!='' AND D.MM_MACHINE_POSITION!='' AND (D.MM_FELT_LENGTH != '' OR D.MM_FABRIC_LENGTH != '') AND (D.MM_FELT_WIDTH != '' OR D.MM_FABRIC_WIDTH != '') AND D.MM_FELT_GSM!='') AND H.APPROVED=1 AND H.CANCELED=0 AND H.MM_DOC_NO=D.MM_DOC_NO ORDER BY  D.MM_MACHINE_NO,D.MM_MACHINE_POSITION";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                //aList.DefaultSearchOn=1;
                if (aList.ShowLOV()) {
                    int NewRow = Table.getSelectedRow();
                     DataModel.setValueByVariable("MACHINE_NO", aList.ReturnVal, NewRow);
                }
            }
            else if (Table.getSelectedColumn() == 2) {
                LOV aList = new LOV();
                aList.SQL = "SELECT distinct D.MM_MACHINE_POSITION AS POSITION,D.MM_MACHINE_POSITION_DESC AS POSITION_DESC  FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE (D.MM_MACHINE_NO!='' AND D.MM_MACHINE_POSITION!='' AND (D.MM_FELT_LENGTH != '' OR D.MM_FABRIC_LENGTH != '') AND (D.MM_FELT_WIDTH != '' OR D.MM_FABRIC_WIDTH != '') AND D.MM_FELT_GSM!='') AND H.APPROVED=1 AND H.CANCELED=0 AND H.MM_DOC_NO=D.MM_DOC_NO ORDER BY  D.MM_MACHINE_NO,D.MM_MACHINE_POSITION";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                //aList.DefaultSearchOn=1;
                if (aList.ShowLOV()) {
                    int NewRow = Table.getSelectedRow();
                     DataModel.setValueByVariable("POSITION", aList.ReturnVal, NewRow);
                     DataModel.setValueByVariable("POSITION_DESC", data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST where POSITION_NO="+aList.ReturnVal+""), NewRow);
                }
            }
            else if (Table.getSelectedColumn() == 6) {
                LOV aList = new LOV();
                aList.SQL = "SELECT distinct D.MM_ITEM_CODE AS POSITION  FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D WHERE (D.MM_MACHINE_NO!='' AND D.MM_MACHINE_POSITION!='' AND (D.MM_FELT_LENGTH != '' OR D.MM_FABRIC_LENGTH != '') AND (D.MM_FELT_WIDTH != '' OR D.MM_FABRIC_WIDTH != '') AND D.MM_FELT_GSM!='') AND H.APPROVED=1 AND H.CANCELED=0 AND H.MM_DOC_NO=D.MM_DOC_NO AND D.MM_ITEM_CODE!='' ORDER BY  D.MM_MACHINE_NO,D.MM_MACHINE_POSITION";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                //aList.DefaultSearchOn=1;
                if (aList.ShowLOV()) {
                    int NewRow = Table.getSelectedRow();
                     DataModel.setValueByVariable("PRODUCT_CODE", aList.ReturnVal, NewRow);
                     DataModel.setValueByVariable("PRODUCT_DESC", data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + aList.ReturnVal + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')"), NewRow);
                     DataModel.setValueByVariable("SYN_PER", data.getStringValueFromDB("SELECT SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + aList.ReturnVal + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')"), NewRow);
                     DataModel.setValueByVariable("S_GROUP", data.getStringValueFromDB("SELECT GROUP_NAME FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + aList.ReturnVal + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')"), NewRow);
                     
                }
            }
            else if (Table.getSelectedColumn() == 14) {
                LOV aList = new LOV();
                aList.SQL = "SELECT STYLE_CODE FROM PRODUCTION.FELT_SALES_STYLE_MASTER where STATUS='ACTIVE'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                //aList.DefaultSearchOn=1;
                if (aList.ShowLOV()) {
                    int NewRow = Table.getSelectedRow();
                     DataModel.setValueByVariable("STYLE", aList.ReturnVal, NewRow);
                     
                }
            }
            else  
            {
                try{
                    
                    double length = Double.parseDouble(DataModel.getValueByVariable("LENGTH", Table.getSelectedRow()));
                    double width = Double.parseDouble(DataModel.getValueByVariable("WIDTH", Table.getSelectedRow()));
                    int GSM  = Integer.parseInt(DataModel.getValueByVariable("GSM", Table.getSelectedRow()));
                    
                    double ThWeight = (length * width * GSM) / 1000;
                    double SQMTR = (length * width);
                    DataModel.setValueByVariable("SQ_MTR", SQMTR+"", Table.getSelectedRow());
                    DataModel.setValueByVariable("THORITICAL_WIDTH", ThWeight+"", Table.getSelectedRow());
                }catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        
    }//GEN-LAST:event_TableKeyPressed
    
   
    private void REMOVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REMOVEActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
            // DisplayIndicators();

            //DataModel.getValueAt(FFNo, WIDTH)
        }
    }//GEN-LAST:event_REMOVEActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        DOC_NO = txtDocNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtDocNo.getText();
        feltOrder.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        feltOrder.HistoryView = false;
        feltOrder.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:
        if (Table.getSelectedColumn() == 1) {
            lblStatus1.setText("Press F1 for selection Machine No and Position No");
        } else {
            lblStatus1.setText("");
        }
    }//GEN-LAST:event_TableFocusGained

    private void TableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_TableAncestorMoved

    private void TableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TableCaretPositionChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TableCaretPositionChanged

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:if(Table.getSelectedColumn() == 1)
        lblStatus1.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        try {
            Object[] rowData = new Object[15];
            rowData[0] = DataModel.getRowCount() + 1;
            DataModel.addRow(rowData);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_cmdAddActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        //jdbc:mysql://200.0.0.230:3306/PRODUCTION
        
    }//GEN-LAST:event_TableMouseClicked

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        ReportShow();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed
    private void ReportShow() {

        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("DOC_NO");
            objReportData.AddColumn("DOC_DATE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("REGION");
            objReportData.AddColumn("MACHINE_NO");
            objReportData.AddColumn("POSITION");
            objReportData.AddColumn("PIECE_NO");
            objReportData.AddColumn("PRODUCT_CODE");
            objReportData.AddColumn("S_GROUP");
            objReportData.AddColumn("SYN_PER");
            objReportData.AddColumn("LENGTH");
            objReportData.AddColumn("WIDTH");
            objReportData.AddColumn("GSM");
            objReportData.AddColumn("THORITICAL_WIDTH");
            objReportData.AddColumn("SQ_MTR");
            objReportData.AddColumn("STYLE");
            objReportData.AddColumn("REQ_MONTH");
            objReportData.AddColumn("CITY_ID");
            objReportData.AddColumn("DISTRICT");
            objReportData.AddColumn("COUNTRY_NAME");
            objReportData.AddColumn("OV_RATE");
            objReportData.AddColumn("OV_AMT");
            objReportData.AddColumn("P_O_NO");
            objReportData.AddColumn("P_O_DATE");
            objReportData.AddColumn("REFERENCE");
            objReportData.AddColumn("REFERENCE_DATE");
            objReportData.AddColumn("REMARK");
            objReportData.AddColumn("SR_NO");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("DOC_NO", "");
            objOpeningRow.setValue("DOC_DATE", "");
            objOpeningRow.setValue("PARTY_CODE", "");
            objOpeningRow.setValue("PARTY_NAME", "");
            objOpeningRow.setValue("REGION", "");
            objOpeningRow.setValue("MACHINE_NO", "");
            objOpeningRow.setValue("POSITION", "");
            objOpeningRow.setValue("PIECE_NO", "");
            objOpeningRow.setValue("PRODUCT_CODE", "");
            objOpeningRow.setValue("S_GROUP", "");
            objOpeningRow.setValue("SYN_PER", "");
            objOpeningRow.setValue("LENGTH", "");
            objOpeningRow.setValue("WIDTH", "");
            objOpeningRow.setValue("GSM", "");
            objOpeningRow.setValue("THORITICAL_WIDTH", "");
            objOpeningRow.setValue("SQ_MTR", "");
            objOpeningRow.setValue("STYLE", "");
            objOpeningRow.setValue("REQ_MONTH", "");
            objOpeningRow.setValue("CITY_ID", "");
            objOpeningRow.setValue("DISTRICT", "");
            objOpeningRow.setValue("COUNTRY_NAME", "");
            objOpeningRow.setValue("OV_RATE", "");
            objOpeningRow.setValue("OV_AMT", "");
            objOpeningRow.setValue("P_O_NO", "");
            objOpeningRow.setValue("P_O_DATE", "");
            objOpeningRow.setValue("REFERENCE", "");
            objOpeningRow.setValue("REFERENCE_DATE", "");
            objOpeningRow.setValue("REMARK", "");
            objOpeningRow.setValue("SR_NO", "");

            String query_str = "";

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");

            DOC_NO = txtDocNo.getText();

            //String strSQL="SELECT A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,PKG_TRANSPORT_MODE, A.PKG_STATION,A.PKG_BOX_SIZE, B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH,B.PKG_GSM,B.PKG_SQM,B.PKG_ORDER_NO, B.PKG_ORDER_DATE,B.PKG_MCN_POSITION_DESC,B.PKG_STYLE,B.PKG_SYN_PER,B.PKG_PRODUCT_CODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_PARTY_CODE='"+txtPartyCode.getText().trim()+"' GROUP BY A.PKG_PARTY_CODE;";
            //String strSQL="SELECT A.DOC_DATE,A.PARTY_CODE,substr(A.PARTY_NAME,1,25) AS PARTY_NAME,A.REGION, B.MACHINE_NO,B.POSITION,B.PIECE_NO,B.PRODUCT_CODE,B.S_GROUP,B.SYN_PER,B.LENGTH,B.WIDTH,B.GSM,B.OV_RATE,B.OV_AMT  FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B where A.APPROVED=1 AND B.PIECE_NO!=''  AND A.PARTY_CODE!='' "+query_str+" and A.DOC_NO = B.DOC_NO";
            String strSQL = "SELECT  A.DOC_NO, A.DOC_DATE, A.REGION, A.SALES_ENGINEER, A.REGION, "
                    + "A.PARTY_CODE, A.PARTY_NAME, A.REFERENCE, A.REFERENCE_DATE, A.P_O_NO, "
                    + "A.P_O_DATE, A.REMARK, A.CREATED_BY, A.CREATED_DATE, A.APPROVED, B.SR_NO, "
                    + "B.MACHINE_NO, B.POSITION, B.POSITION_DESC, B.PIECE_NO, B.PRODUCT_CODE, "
                    + "B.PRODUCT_DESC, B.S_GROUP, B.LENGTH, B.WIDTH, B.GSM, B.THORITICAL_WIDTH, "
                    + "B.SQ_MTR, B.STYLE, B.REQ_MONTH, B.SYN_PER, B.OV_RATE, B.OV_AMT, PM.CITY_ID, "
                    + "PM.DISTRICT, CM.COUNTRY_NAME FROM PRODUCTION.FELT_SALES_ORDER_HEADER A, PRODUCTION.FELT_SALES_ORDER_DETAIL B, DINESHMILLS.D_SAL_PARTY_MASTER PM, DINESHMILLS.D_SAL_COUNTRY_MASTER CM   where  A.DOC_NO = B.DOC_NO AND   A.PARTY_CODE = PM.PARTY_CODE AND  PM.COUNTRY_ID = CM.COUNTRY_ID AND   B.DOC_NO = '" + DOC_NO + "'";
            System.out.println(strSQL);

            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("DOC_NO", UtilFunctions.getString(rsTmp, "DOC_NO", ""));
                    objRow.setValue("DOC_DATE", UtilFunctions.getString(rsTmp, "DOC_DATE", ""));
                    objRow.setValue("PARTY_CODE", UtilFunctions.getString(rsTmp, "PARTY_CODE", ""));
                    objRow.setValue("PARTY_NAME", UtilFunctions.getString(rsTmp, "PARTY_NAME", ""));
                    objRow.setValue("REGION", UtilFunctions.getString(rsTmp, "REGION", ""));
                    objRow.setValue("MACHINE_NO", UtilFunctions.getString(rsTmp, "MACHINE_NO", ""));
                    objRow.setValue("POSITION", UtilFunctions.getString(rsTmp, "POSITION", ""));
                    objRow.setValue("PIECE_NO", UtilFunctions.getString(rsTmp, "PIECE_NO", ""));
                    objRow.setValue("PRODUCT_CODE", UtilFunctions.getString(rsTmp, "PRODUCT_CODE", ""));
                    objRow.setValue("S_GROUP", UtilFunctions.getString(rsTmp, "S_GROUP", ""));
                    objRow.setValue("SYN_PER", UtilFunctions.getString(rsTmp, "SYN_PER", ""));
                    objRow.setValue("LENGTH", UtilFunctions.getString(rsTmp, "LENGTH", ""));
                    objRow.setValue("WIDTH", UtilFunctions.getString(rsTmp, "WIDTH", ""));
                    objRow.setValue("GSM", UtilFunctions.getString(rsTmp, "GSM", ""));
                    objRow.setValue("THORITICAL_WIDTH", UtilFunctions.getString(rsTmp, "THORITICAL_WIDTH", ""));
                    objRow.setValue("SQ_MTR", UtilFunctions.getString(rsTmp, "SQ_MTR", ""));
                    objRow.setValue("STYLE", UtilFunctions.getString(rsTmp, "STYLE", ""));
                    objRow.setValue("REQ_MONTH", UtilFunctions.getString(rsTmp, "REQ_MONTH", ""));
                    objRow.setValue("CITY_ID", UtilFunctions.getString(rsTmp, "CITY_ID", ""));
                    objRow.setValue("DISTRICT", UtilFunctions.getString(rsTmp, "DISTRICT", ""));
                    objRow.setValue("COUNTRY_NAME", UtilFunctions.getString(rsTmp, "COUNTRY_NAME", ""));
                    objRow.setValue("OV_RATE", UtilFunctions.getString(rsTmp, "OV_RATE", ""));
                    objRow.setValue("OV_AMT", UtilFunctions.getString(rsTmp, "OV_AMT", ""));
                    objRow.setValue("P_O_NO", UtilFunctions.getString(rsTmp, "P_O_NO", ""));
                    objRow.setValue("P_O_DATE", UtilFunctions.getString(rsTmp, "P_O_DATE", ""));
                    objRow.setValue("REFERENCE", UtilFunctions.getString(rsTmp, "REFERENCE", ""));
                    objRow.setValue("REFERENCE_DATE", UtilFunctions.getString(rsTmp, "REFERENCE_DATE", ""));
                    objRow.setValue("REMARK", UtilFunctions.getString(rsTmp, "REMARK", ""));
                    objRow.setValue("SR_NO", UtilFunctions.getString(rsTmp, "SR_NO", ""));

                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptFeltOrder.rpt");
            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/FeltSales/FELTORDER.rpt", Parameters, objReportData);

        } catch (Exception e) {
            System.out.println("Error : " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void REMARKKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_REMARKKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            Table.requestFocus();
        }
    }//GEN-LAST:event_REMARKKeyPressed

    private void REMARKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REMARKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_REMARKActionPerformed

    private void REMARKFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_REMARKFocusLost
        // TODO add your handling code here:
        lblStatus1.setText("");
    }//GEN-LAST:event_REMARKFocusLost

    private void REMARKFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_REMARKFocusGained
        // TODO add your handling code here:
        lblStatus1.setText("Enter Order Remark");
    }//GEN-LAST:event_REMARKFocusGained

    private void txtPartyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPartyNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyNameActionPerformed

    private void txtPartyNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyNameFocusGained

    private void txtPartyNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyNameFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyNameFocusLost

    private void txtPartyNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyNameKeyPressed

    private void txtPartyCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPartyCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeActionPerformed

    private void txtPartyCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeFocusGained

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void btnAdd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd2ActionPerformed
        // TODO add your handling code here:
        
            String str_qry = "SELECT PR_PIECE_NO,PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_STYLE,\n" +
"PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_SQMTR,PR_BILL_GSM,PR_BILL_WEIGHT,PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  " +
                "WHERE " +
                "PR_DELINK='OBSOLETE' AND  " +
                "PR_DELINK_REASON LIKE 'MFG PIECE REJECTION%' " +
                "AND PR_PIECE_STAGE NOT IN ('DIVERTED','CANCELED','DIVIDED','JOINED','INVOICED','EXP-INVOICE','MOVE_TO_SAMPLE')"
                    + "UNION ALL  " +
                        "SELECT PR_PIECE_NO,PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_STYLE, " +
                        "PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_SQMTR,PR_BILL_GSM,PR_BILL_WEIGHT,PR_PIECE_STAGE "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  WHERE PR_PIECE_STAGE='SCRAP'";
        
            LOV aList = new LOV();
            aList.SQL = str_qry;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                //txtpartycode.setText(aList.ReturnVal);
                try {
                    Object[] rowData = new Object[25];
                    rowData[0] = DataModel_Rejection.getRowCount() + 1;
                    rowData[1] = aList.ReturnVal;
                    
                    ResultSet rsData = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+aList.ReturnVal+"'");
                    rsData.first();
                    rowData[2] = "";//NEW_PIECE_NO
                    rowData[3] = rsData.getString("PR_MACHINE_NO");//MACHINE_NO
                    rowData[4] = rsData.getString("PR_POSITION_NO");//POSITION
                    rowData[5] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO="+rsData.getString("PR_POSITION_NO"));//POSITION_DESC
                    rowData[6] = rsData.getString("PR_PIECE_STAGE");//PIECE_STAGE
                    rowData[7] = "";//NEW_PIECE_STAGE
                    try{
                        if(rsData.getString("PR_PIECE_AB_FLAG").equals("AB"))
                        {
                            rowData[8] =  "WITH_AB";    //rsData.getString("WITH_AB");//LAYER_TYPE
                        }
                        else
                        {
                            rowData[8] =  "WITHOUT_AB";  //rsData.getString("WITHOUT_AB");//LAYER_TYPE
                        }
                    }catch(Exception e)
                    {
                        rowData[8] =  "WITHOUT_AB";
                    }
                    
                    rowData[9] = rsData.getString("PR_BILL_PRODUCT_CODE");//PRODUCT_CODE
                    rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE='"+rsData.getString("PR_BILL_PRODUCT_CODE")+"'");//PRODUCT_DESC
                    rowData[11] = rsData.getString("PR_GROUP");//S_GROUP
                    rowData[12] = rsData.getString("PR_BILL_LENGTH");//LENGTH
                    rowData[13] = rsData.getString("PR_BILL_WIDTH");//WIDTH
                    rowData[14] = rsData.getString("PR_BILL_GSM");//GSM
                    rowData[15] = rsData.getString("PR_BILL_WEIGHT");//THORITICAL_WIDTH
                    rowData[16] = rsData.getString("PR_BILL_SQMTR");//SQ_MTR
                    rowData[17] = rsData.getString("PR_BILL_STYLE");//STYLE
                    rowData[18] = rsData.getString("PR_REQUESTED_MONTH");//REQ_MONTH
                    rowData[19] = rsData.getString("PR_SYN_PER");//SYN_PER
                    rowData[20] = "";//REMARK
                    
                    DataModel_Rejection.addRow(rowData);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        

//        try{
//                ResultSet rsData = data.getResult(str_qry);
//                rsData.first();
//                while(!rsData.isAfterLast())
//                {
//                    
//
//                    
//                    rsData.next();
//                }
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
        
    }//GEN-LAST:event_btnAdd2ActionPerformed

    private void tblRejectionPieceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblRejectionPieceKeyPressed
        // TODO add your handling code here:
        
        try{
                double length = Double.parseDouble(DataModel_Rejection.getValueByVariable("R_LENGTH", tblRejectionPiece.getSelectedRow()));
                double width = Double.parseDouble(DataModel_Rejection.getValueByVariable("R_WIDTH", tblRejectionPiece.getSelectedRow()));
                int GSM  = Integer.parseInt(DataModel_Rejection.getValueByVariable("R_GSM", tblRejectionPiece.getSelectedRow()));

                double ThWeight = (length * width * GSM) / 1000;
                double SQMTR = (length * width);
                DataModel_Rejection.setValueByVariable("R_SQ_MTR", String.format("%.2f",SQMTR)+"", tblRejectionPiece.getSelectedRow());
                DataModel_Rejection.setValueByVariable("R_WEIGHT", String.format("%.1f",ThWeight)+"", tblRejectionPiece.getSelectedRow());
            }catch(Exception e)
            {
                e.printStackTrace();
            }
        
    }//GEN-LAST:event_tblRejectionPieceKeyPressed
    private void MoveFirst() {
        feltOrder.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        feltOrder.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        feltOrder.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        feltOrder.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;

        
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);
        clearFields();
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 861;
        aList.FirstFreeNo = 375;

        
        FFNo = aList.FirstFreeNo;
        txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("Felt Sample Order - " + txtDocNo.getText());
        txtPartyCode.setText(data.getStringValueFromDB("SELECT PARTY_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE=999999"));
        txtPartyName.setText(data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE=999999"));
        cmdAdd.setEnabled(true);
        REMOVE.setEnabled(true);
        btnAdd2.setEnabled(true);
        btnRemove2.setEnabled(true);
        DisableToolbar();
        SetFields(true);
        SetupApproval();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.SampleOrder.frmFindSampleOrder", true);
        frmFindSampleOrder ObjFindFeltorder = (frmFindSampleOrder) ObjLoader.getObj();

        if (ObjFindFeltorder.Cancelled == false) {
            if (!feltOrder.Filter(ObjFindFeltorder.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt Sample Order", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find rate update by doc no
    public void Find(String docNo) {
        feltOrder.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        //     feltOrder.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID="+ModuleId+" AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        
        
        if(EditMode==EITLERPGLOBAL.ADD)
        {
            for (int i = 0; i < Table.getRowCount(); i++) {
                String PieceNo = DataModel.getValueByVariable("PIECE_NO", i);
                if(!"".equals(PieceNo))
                {
                    if(data.IsRecordExist("SELECT D.* FROM PRODUCTION.FELT_SALES_SAMPLE_ORDER_HEADER H,PRODUCTION.FELT_SALES_SAMPLE_ORDER_DETAIL D WHERE H.DOC_NO=D.DOC_NO AND D.PIECE_NO='"+PieceNo+"'"))
                    {
                        JOptionPane.showMessageDialog(this, "Piece No "+PieceNo+" already exist on previous document.");
                        return;
                    }
                    if(data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo+"'"))
                    {
                        JOptionPane.showMessageDialog(this, "Piece No "+PieceNo+" already exist on Piece Register.");
                        return;
                    }
                }
            }
            for (int i = 0; i < tblRejectionPiece.getRowCount(); i++) {
                String PieceNo = DataModel_Rejection.getValueByVariable("R_NEW_PIECE_NO", i);
                if("".equals(PieceNo))
                {
                        JOptionPane.showMessageDialog(this, "New Piece No is compulsory.");
                        return;
                }
                if(!"".equals(PieceNo))
                {
                    if(data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo+"'"))
                    {
                        JOptionPane.showMessageDialog(this, "New Piece No "+PieceNo+" already exist on Piece Register.");
                        return;
                    }
                }
                String PieceStage = DataModel_Rejection.getValueByVariable("R_NEW_PIECE_STAGE", i);
                if(PieceStage.equals(""))
                {
                    JOptionPane.showMessageDialog(this, "PLease select Piece stage for Piece "+PieceNo+".");   
                    return;
                }
            }
        }
        
        
        
        if (OpgApprove.isSelected() && EITLERPGLOBAL.gUserDeptID == 39) {
            //All Piece are compulsory 
            boolean piece_no_not_found = false;
            for (int i = 0; i < Table.getRowCount(); i++) {

                if (!Table.getValueAt(i, 1).toString().equals("") || !Table.getValueAt(i, 2).toString().equals("")) {
                    if (Table.getValueAt(i, 5).toString().equals("")) {
                        piece_no_not_found = true;
                    }
                }
            }
            if (piece_no_not_found) {
                JOptionPane.showMessageDialog(null, "Piece No is compulsory in design for approval");
                return;
            }
        }
        
        if (OpgFinal.isSelected()) {

        }

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //feltOrder.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (feltOrder.Insert()) {

                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = 861;
                aList.FirstFreeNo = 375;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);

                if (OpgFinal.isSelected()) {
                   
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + feltOrder.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (feltOrder.Update()) {

                if (OpgFinal.isSelected()) {
                    
                    
                   
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + feltOrder.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        cmdAdd.setEnabled(false);
        REMOVE.setEnabled(false);
        btnAdd2.setEnabled(false);
        btnRemove2.setEnabled(false);
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void Cancel() {
        DisplayData();
        EditMode = 0;
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);
        cmdAdd.setEnabled(false);
        REMOVE.setEnabled(false);
        btnAdd2.setEnabled(false);
        btnRemove2.setEnabled(false);
    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) feltOrder.getAttribute("DOC_NO").getObj();
        if (feltOrder.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(861, productionDocumentNo)) {
                cmdAdd.setEnabled(true);
                REMOVE.setEnabled(true);
                btnAdd2.setEnabled(true);
                btnRemove2.setEnabled(true);
                
                SetFields(true);
            } else {
                EnableApproval();
            }

            if (EITLERPGLOBAL.gUserDeptID == 39 || EITLERPGLOBAL.gUserDeptID == 27) {
                SetFields(true);
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (feltOrder.CanDelete(txtDocNo.getText() + "", txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, feltOrder.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, txtDocNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        //SetFields(true);
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);
        txtDocNo.setEnabled(pStat);
        
        txtPartyCode.setEnabled(false);
        txtPartyName.setEnabled(false);
        
        REMARK.setEnabled(pStat);
        
        
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        if(!pStat)
        {
            for(int i=0;i<DataModel.getColumnCount();i++)
            {
                //DataModel.SetReadOnly(i);
            }
            for(int i=0;i<DataModel_Rejection.getColumnCount();i++)
            {
                DataModel_Rejection.SetReadOnly(i);
            }
        }
        
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(1);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        //DataModel.SetReadOnly(4);
        //DataModel.SetReadOnly(5);
        //DataModel.SetReadOnly(6);
        DataModel.SetReadOnly(7);
        DataModel.SetReadOnly(8);
//        DataModel.SetReadOnly(9);
//        DataModel.SetReadOnly(10);
//        DataModel.SetReadOnly(11);
//        DataModel.SetReadOnly(12);
//        DataModel.SetReadOnly(13);
//        DataModel.SetReadOnly(14);
//        DataModel.SetReadOnly(15);
        
        
        DataModel_Rejection.SetReadOnly(0);
        DataModel_Rejection.SetReadOnly(1);
        //DataModel_Rejection.SetReadOnly(2);
        DataModel_Rejection.SetReadOnly(3);
        DataModel_Rejection.SetReadOnly(4);
        DataModel_Rejection.SetReadOnly(5);
        DataModel_Rejection.SetReadOnly(6);
        //DataModel_Rejection.SetReadOnly(7);
        //DataModel_Rejection.SetReadOnly(8);
        DataModel_Rejection.SetReadOnly(9);
        DataModel_Rejection.SetReadOnly(10);
        DataModel_Rejection.SetReadOnly(11);
        DataModel_Rejection.SetReadOnly(12);
        DataModel_Rejection.SetReadOnly(13);
        DataModel_Rejection.SetReadOnly(14);
        DataModel_Rejection.SetReadOnly(15);
        DataModel_Rejection.SetReadOnly(16);
        DataModel_Rejection.SetReadOnly(17);
        //DataModel_Rejection.SetReadOnly(18);
        DataModel_Rejection.SetReadOnly(19);
        //DataModel_Rejection.SetReadOnly(20);
        
        
        
        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }


    private void SetData() {

        feltOrder.setAttribute("DOC_NO", txtDocNo.getText());
        feltOrder.setAttribute("DOC_DATE", txtDocDate.getText());
        
        feltOrder.setAttribute("PARTY_CODE", txtPartyCode.getText());
        feltOrder.setAttribute("PARTY_NAME", txtPartyName.getText());
        
        feltOrder.setAttribute("REMARK", REMARK.getText());
        
        DOC_NO = txtDocNo.getText();
        feltOrder.setAttribute("DOC_NO", txtDocNo.getText());
        feltOrder.setAttribute("DOC_DATE", txtDocDate.getText());
        feltOrder.setAttribute("MODULE_ID", ModuleId);
        feltOrder.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        feltOrder.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        feltOrder.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        feltOrder.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        feltOrder.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "R");
            feltOrder.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            feltOrder.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            feltOrder.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            feltOrder.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        try {
            feltOrder.hmFeltSalesOrderDetails.clear();
            feltOrder.hmFeltRejectionDetails.clear();
            
            for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                if (!DataModel.getValueByVariable("PRODUCT_CODE", i).equals("") || !DataModel.getValueByVariable("PIECE_NO", i).equals("")) {
                    clsFeltSampleOrderDetails objFeltOrderDetails = new clsFeltSampleOrderDetails();

                    //objFeltOrderDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                    objFeltOrderDetails.setAttribute("DOC_NO", txtDocNo.getText());
                    objFeltOrderDetails.setAttribute("MACHINE_NO", DataModel.getValueByVariable("MACHINE_NO", i));
                    objFeltOrderDetails.setAttribute("POSITION", DataModel.getValueByVariable("POSITION", i));
                    objFeltOrderDetails.setAttribute("POSITION_DESC", DataModel.getValueByVariable("POSITION_DESC", i));
                    
                    objFeltOrderDetails.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", i));
                    objFeltOrderDetails.setAttribute("LAYER_TYPE", DataModel.getValueByVariable("LAYER_TYPE", i));
                    objFeltOrderDetails.setAttribute("PRODUCT_CODE", DataModel.getValueByVariable("PRODUCT_CODE", i));
                    objFeltOrderDetails.setAttribute("PRODUCT_DESC", DataModel.getValueByVariable("PRODUCT_DESC", i));
                    objFeltOrderDetails.setAttribute("S_GROUP", DataModel.getValueByVariable("S_GROUP", i));
                    objFeltOrderDetails.setAttribute("LENGTH", DataModel.getValueByVariable("LENGTH", i));
                    objFeltOrderDetails.setAttribute("WIDTH", DataModel.getValueByVariable("WIDTH", i));
                    objFeltOrderDetails.setAttribute("GSM", DataModel.getValueByVariable("GSM", i));
                    objFeltOrderDetails.setAttribute("THORITICAL_WIDTH", DataModel.getValueByVariable("THORITICAL_WIDTH", i));
                    objFeltOrderDetails.setAttribute("SQ_MTR", DataModel.getValueByVariable("SQ_MTR", i));
                    objFeltOrderDetails.setAttribute("STYLE", DataModel.getValueByVariable("STYLE", i));
                    objFeltOrderDetails.setAttribute("REQ_MONTH", DataModel.getValueByVariable("REQ_MONTH", i));
                    objFeltOrderDetails.setAttribute("SYN_PER", DataModel.getValueByVariable("SYN_PER", i));
                    objFeltOrderDetails.setAttribute("REMARK", DataModel.getValueByVariable("REMARK", i));
                    
                    
                    
                    feltOrder.hmFeltSalesOrderDetails.put(Integer.toString(feltOrder.hmFeltSalesOrderDetails.size() + 1), objFeltOrderDetails);
                    
                }
            }
            for (int i = 0; i <= tblRejectionPiece.getRowCount() - 1; i++) {
            
                if (!DataModel_Rejection.getValueByVariable("R_NEW_PIECE_NO", i).equals("")) {
                    
                    clsFeltRejectionDetails objRejectionDetails = new clsFeltRejectionDetails();
                    
                    objRejectionDetails.setAttribute("R_DOC_NO", txtDocNo.getText());
                    objRejectionDetails.setAttribute("R_PIECE_NO", DataModel_Rejection.getValueByVariable("R_PIECE_NO", i));
                    objRejectionDetails.setAttribute("R_NEW_PIECE_NO", DataModel_Rejection.getValueByVariable("R_NEW_PIECE_NO", i));
                    objRejectionDetails.setAttribute("R_MACHINE_NO", DataModel_Rejection.getValueByVariable("R_MACHINE_NO", i));
                    objRejectionDetails.setAttribute("R_POSITION", DataModel_Rejection.getValueByVariable("R_POSITION", i));
                    objRejectionDetails.setAttribute("R_PIECE_STAGE", DataModel_Rejection.getValueByVariable("R_PIECE_STAGE", i));
                    objRejectionDetails.setAttribute("R_NEW_PIECE_STAGE", DataModel_Rejection.getValueByVariable("R_NEW_PIECE_STAGE", i));
                    //R_NEW_PIECE_STAGE
                    objRejectionDetails.setAttribute("R_POSITION_DESC", DataModel_Rejection.getValueByVariable("R_POSITION_DESC", i));
                    objRejectionDetails.setAttribute("R_PIECE_STAGE", DataModel_Rejection.getValueByVariable("R_PIECE_STAGE", i));
                    objRejectionDetails.setAttribute("R_LAYER_TYPE", DataModel_Rejection.getValueByVariable("R_LAYER_TYPE", i));
                    objRejectionDetails.setAttribute("R_PRODUCT_CODE", DataModel_Rejection.getValueByVariable("R_PRODUCT_CODE", i));
                    objRejectionDetails.setAttribute("R_PRODUCT_DESC", DataModel_Rejection.getValueByVariable("R_PRODUCT_DESC", i));
                    objRejectionDetails.setAttribute("R_S_GROUP", DataModel_Rejection.getValueByVariable("R_S_GROUP", i));
                    objRejectionDetails.setAttribute("R_LENGTH", DataModel_Rejection.getValueByVariable("R_LENGTH", i));
                    objRejectionDetails.setAttribute("R_WIDTH", DataModel_Rejection.getValueByVariable("R_WIDTH", i));
                    objRejectionDetails.setAttribute("R_GSM", DataModel_Rejection.getValueByVariable("R_GSM", i));
                    objRejectionDetails.setAttribute("R_WEIGHT", DataModel_Rejection.getValueByVariable("R_WEIGHT", i));
                    objRejectionDetails.setAttribute("R_SQ_MTR", DataModel_Rejection.getValueByVariable("R_SQ_MTR", i));
                    objRejectionDetails.setAttribute("R_STYLE", DataModel_Rejection.getValueByVariable("R_STYLE", i));
                    objRejectionDetails.setAttribute("R_REQ_MONTH", DataModel_Rejection.getValueByVariable("R_REQ_MONTH", i));
                    objRejectionDetails.setAttribute("R_SYN_PER", DataModel_Rejection.getValueByVariable("R_SYN_PER", i));
                    objRejectionDetails.setAttribute("R_REMARK", DataModel_Rejection.getValueByVariable("R_REMARK", i));
                    
                    /*
                    
                    */
                    
                    feltOrder.hmFeltRejectionDetails.put(Integer.toString(feltOrder.hmFeltRejectionDetails.size() + 1), objRejectionDetails);
                    
                }
            }
        } catch (Exception e) {
            System.out.println("Error on setData : " + e.getMessage());
            e.printStackTrace();
        };
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTextField REMARK;
    private javax.swing.JButton REMOVE;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnAdd2;
    private javax.swing.JButton btnRemove2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel ltbPink;
    private javax.swing.JTable tblRejectionPiece;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JFormattedTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

   
}
