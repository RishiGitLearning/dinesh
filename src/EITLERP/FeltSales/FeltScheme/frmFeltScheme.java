/*
 * frmFeltPacking.java
 *
 * Created on June 19, 2013, 5:27 PM
 */
package EITLERP.FeltSales.FeltScheme;

/**
 *
 * @author JADEJA RAJPALSINH
 */
import EITLERP.ApprovalFlow;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.clsSales_Party;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.ReportUI.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTextField;
import EITLERP.Finance.UtilFunctions;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import EITLERP.*;
import java.sql.SQLException;
import java.util.ArrayList;

public class frmFeltScheme extends javax.swing.JApplet {

    private clsFeltScheme ObjFeltPacking;

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0; //First Free No.
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;
    String cellLastValue = "";

    private boolean flg = true;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;

    private EITLTableModel DataModelPieceNo;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel = new EITLTableModel();
    private EITLComboModel cmbYearModel;

    private boolean Updating = false;
    private boolean Updating_H = false;

    public frmPendingApprovals frmPA;

    private TReportEngine objEngine = new TReportEngine();

    /**
     * Creates new form frmFeltPacking
     */
    public void init() {
        System.gc();
        setSize(1000, 700);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjFeltPacking = new clsFeltScheme();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        txtPartyCode.setEditable(false);
        txtOrderFromDate.setEditable(false);
        txtOrderToDate.setEditable(false);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        FormatGrid();
        jButton1.setVisible(false);
        jButton1.setEnabled(false);
        cmbYear.setEnabled(false);

        if (ObjFeltPacking.LoadData()) {
            DisplayData();
            jButton1.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemAdd = new javax.swing.JMenuItem();
        jMenuItemEdit = new javax.swing.JMenuItem();
        jMenuItemRemove = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtDpNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        txtPartyCode = new javax.swing.JTextField();
        txtDpDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblPartyName = new javax.swing.JLabel();
        lblRevNo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cmbYear = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        txtOrderFromDate = new javax.swing.JTextField();
        txtOrderToDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemAdd.setText("Add Piece");
        jMenuItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemAdd);

        jMenuItemEdit.setText("Edit Piece");
        jMenuItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemEdit);

        jMenuItemRemove.setText("Remove Piece");
        jMenuItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRemoveActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemRemove);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        cmdNew.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmdNewFocusLost(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 770, 40);

        lblTitle.setBackground(new java.awt.Color(178, 182, 185));
        lblTitle.setText("ADVANCE ANNUAL ORDER SELECTION FORM DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 770, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Doc No");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 50, 16);

        txtDpNo.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtDpNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDpNo.setEnabled(false);
        txtDpNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDpNoFocusGained(evt);
            }
        });
        Tab1.add(txtDpNo);
        txtDpNo.setBounds(90, 10, 110, 29);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 130, 740, 150);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(500, 300, 90, 28);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(0, 100, 740, 10);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(610, 300, 90, 28);

        txtPartyCode.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtPartyCode.setCaretColor(new java.awt.Color(1, 1, 1));
        txtPartyCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPartyCode.setEnabled(false);
        txtPartyCode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(90, 40, 110, 29);
        txtPartyCode.getAccessibleContext().setAccessibleParent(this);

        txtDpDate.setEditable(false);
        txtDpDate.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtDpDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDpDate.setEnabled(false);
        Tab1.add(txtDpDate);
        txtDpDate.setBounds(330, 10, 100, 29);

        jLabel6.setText("Doc Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(260, 10, 60, 16);

        jLabel8.setText("Party Code");
        Tab1.add(jLabel8);
        jLabel8.setBounds(10, 42, 70, 16);

        lblPartyName.setBackground(new java.awt.Color(255, 255, 255));
        lblPartyName.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        lblPartyName.setOpaque(true);
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(210, 40, 280, 30);

        lblRevNo.setText("....");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(210, 10, 30, 20);

        jButton1.setText("Insert Piece");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Tab1.add(jButton1);
        jButton1.setBounds(550, 10, 150, 40);

        jLabel4.setText("Disc Fin Year");
        Tab1.add(jLabel4);
        jLabel4.setBounds(490, 70, 100, 20);

        cmbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbYearItemStateChanged(evt);
            }
        });
        cmbYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmbYearFocusLost(evt);
            }
        });
        Tab1.add(cmbYear);
        cmbYear.setBounds(590, 70, 140, 30);

        jLabel9.setText("Order From Dt");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 70, 100, 16);

        txtOrderFromDate.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtOrderFromDate.setCaretColor(new java.awt.Color(1, 1, 1));
        txtOrderFromDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtOrderFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextField();
        txtOrderFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOrderFromDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOrderFromDateFocusLost(evt);
            }
        });
        txtOrderFromDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOrderFromDateKeyPressed(evt);
            }
        });
        Tab1.add(txtOrderFromDate);
        txtOrderFromDate.setBounds(120, 70, 110, 29);

        txtOrderToDate.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtOrderToDate.setCaretColor(new java.awt.Color(1, 1, 1));
        txtOrderToDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtOrderToDate = new EITLERP.FeltSales.common.DatePicker.DateTextField();
        txtOrderToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtOrderToDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOrderToDateFocusLost(evt);
            }
        });
        txtOrderToDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtOrderToDateKeyPressed(evt);
            }
        });
        Tab1.add(txtOrderToDate);
        txtOrderToDate.setBounds(350, 70, 110, 29);

        jLabel10.setText("Order To Dt");
        Tab1.add(jLabel10);
        jLabel10.setBounds(260, 70, 90, 16);

        Tab.addTab("Scheme Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 16);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 230, 28);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 230, 29);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 540, 28);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 160, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 212, 50, 16);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 230, 28);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 242, 60, 16);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 240, 590, 28);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(457, 273, 100, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(633, 70, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(574, 273, 100, 28);

        Tab.addTab("Approval", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 16);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 670, 100);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 132, 163, 16);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 150, 550, 150);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(570, 275, 110, 28);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(570, 180, 120, 32);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(570, 150, 120, 32);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 210, 120, 32);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 86, 770, 390);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 480, 750, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

//        ReportShow();
////        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltPacking.rpt",new HashMap(),ObjFeltPacking.getReportData(txtDpNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtDpDate.getText().trim())));
////        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltPacking.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&PKG_PARTY_CODE=" + txtPartyCode.getText().trim());
//            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "File error " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }
//
//        PreviewReport();
//        PreviewReport1();
//        PreviewReport2();
//        PreviewReport3();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltPacking.HistoryView = false;
        ObjFeltPacking.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltPacking.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDpDate.getText()), txtDpNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(771, ObjFeltPacking.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltPacking.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDpDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //  aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND CHARGE_CODE=09";
            aList.SQL = "SELECT A.PARTY_CODE,A.PARTY_NAME FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PARTY_CODE=B.PARTY_CODE AND B.CHARGE_CODE=09 AND A.APPROVED=1 AND A.CANCELED=0";

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(clsFeltScheme.getParyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));

            }

        }

    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtPartyCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusGained
        lblStatus.setText("Press F1 for Party Code");
    }//GEN-LAST:event_txtPartyCodeFocusGained

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModelPieceNo.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
//        if (evt.getKeyCode() == 112) //F1 Key pressed
//        {
//            String mst = txtDpNo.getText().trim().substring(0, 1);
//            if (mst.matches("A")) {
//                if (Table.getSelectedColumn() == 1) {
//                    LOV aList = new LOV();
//                    String cndtn = "";
//                    if (!txtPartyCode.getText().equals("")) {
//                        cndtn += " AND A.PARTY_CODE = '" + txtPartyCode.getText() + "' ";
//                    }
//                    
//                    //  String strSQL ="SELECT B.PIECE_NO,B.MACHINE_NO,B.POSITION,A.S_ORDER_NO,A.S_ORDER_DATE,PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B WHERE A.PARTY_CODE='"+txtPartyCode.getText()+"' AND A.S_ORDER_NO=B.S_ORDER_NO AND A.APPROVED=1 AND A.CANCELED=0";
//                    String strSQL = "SELECT B.PIECE_NO,A.S_ORDER_NO,A.S_ORDER_DATE,A.PARTY_CODE,A.PARTY_NAME,C.CHARGE_CODE FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B,DINESHMILLS.D_SAL_PARTY_MASTER C WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.PARTY_CODE=C.PARTY_CODE AND C.CHARGE_CODE=09 AND A.APPROVED=1 AND A.CANCELED=0 " + cndtn + " AND B.PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE)";
//
//                    aList.SQL = strSQL;
//                    aList.ReturnCol = 1;
//                    aList.ShowReturnCol = true;
//                    aList.DefaultSearchOn = 1;
//
//                    if (aList.ShowLOV()) {
//
//                        if (Table.getCellEditor() != null) {
//                            Table.getCellEditor().stopCellEditing();
//                        }
//                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
//
//                        //   inv_calculation = EITLERP.FeltSales.Order.clsOrderValue.calculate(theDocNo, theDocNo, strSQL, TOP_ALIGNMENT, TOP_ALIGNMENT, FFNo, TOP_ALIGNMENT, TOP_ALIGNMENT, strSQL)
//                    }
//
//                }
//            }
//            String mst1 = txtDpNo.getText().trim().substring(0, 1);
//            if (mst1.matches("E")) {
//                if (Table.getSelectedColumn() == 1) {
//                    LOV aList = new LOV();
//
//                    String strSQL = "SELECT PIECE_NO,ORDER_NO,ORDER_DATE,PARTY_CODE FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE ";
//
//                    aList.SQL = strSQL;
//                    aList.ReturnCol = 1;
//                    aList.ShowReturnCol = true;
//                    aList.DefaultSearchOn = 1;
//
//                    if (aList.ShowLOV()) {
//
//                        if (Table.getCellEditor() != null) {
//                            Table.getCellEditor().stopCellEditing();
//                        }
//                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
//
//                        //   inv_calculation = EITLERP.FeltSales.Order.clsOrderValue.calculate(theDocNo, theDocNo, strSQL, TOP_ALIGNMENT, TOP_ALIGNMENT, FFNo, TOP_ALIGNMENT, TOP_ALIGNMENT, strSQL)
//                    }
//
//                }
//            }
//
//            String mst2 = txtDpNo.getText().trim().substring(0, 1);
//            if (mst2.matches("R")) {
//                if (Table.getSelectedColumn() == 1) {
//                    LOV aList = new LOV();
//
//                    String strSQL = "SELECT PIECE_NO,ORDER_NO,ORDER_DATE,PARTY_CODE FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE";
//
//                    aList.SQL = strSQL;
//                    aList.ReturnCol = 1;
//                    aList.ShowReturnCol = true;
//                    aList.DefaultSearchOn = 1;
//
//                    if (aList.ShowLOV()) {
//
//                        if (Table.getCellEditor() != null) {
//                            Table.getCellEditor().stopCellEditing();
//                        }
//                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
//
//                        //   inv_calculation = EITLERP.FeltSales.Order.clsOrderValue.calculate(theDocNo, theDocNo, strSQL, TOP_ALIGNMENT, TOP_ALIGNMENT, FFNo, TOP_ALIGNMENT, TOP_ALIGNMENT, strSQL)
//                    }
//
//                }
//            }
//            mst1 = txtDpNo.getText().trim().substring(0, 1);
//            if (Table.getValueAt(Table.getSelectedRow(), 1).toString().trim().length() > 0) {
//                if (mst1.matches("A")) {
//                    String PieceNo = (String) Table.getValueAt(Table.getSelectedRow(), 1);
//                    Table.setValueAt(PieceNo, Table.getSelectedRow(), 1);
//                    String OrderNo = clsFeltScheme.getPieceNo(PieceNo);
//                    Table.setValueAt(OrderNo, Table.getSelectedRow(), 2);
//                    String OrderDate = EITLERPGLOBAL.formatDate(clsFeltScheme.getOrderDate(PieceNo));
//                    Table.setValueAt(OrderDate, Table.getSelectedRow(), 3);
//                    String PartyCode = clsFeltScheme.getPartyCode(PieceNo);
//                    Table.setValueAt(PartyCode, Table.getSelectedRow(), 4);
//                    String PartyName = clsFeltScheme.getPartyName(PieceNo);
//                    Table.setValueAt(PartyName, Table.getSelectedRow(), 5);
//                    String machienPosition = clsFeltScheme.getMachienPosition(PieceNo);
//                    Table.setValueAt(machienPosition, Table.getSelectedRow(), 6);
//                    String machienPositionDesc = clsFeltScheme.getMachienPositionDesc(PieceNo);
//                    Table.setValueAt(machienPositionDesc, Table.getSelectedRow(), 7);
//                    String machineno = clsFeltScheme.getMachienNo(PieceNo);
//                    Table.setValueAt(machineno, Table.getSelectedRow(), 8);
//                    String ReqMonth = clsFeltScheme.getReqMonth(PieceNo);
//                    Table.setValueAt(ReqMonth, Table.getSelectedRow(), 9);
//                    String Email = clsFeltScheme.getEmail(PieceNo);
//                    if (Email.trim().length() > 0) {
//                        Table.setValueAt(Email, Table.getSelectedRow(), 10);
//                    }
//                } else {
//                    String PieceNo = (String) Table.getValueAt(Table.getSelectedRow(), 1);
//                    Table.setValueAt(PieceNo, Table.getSelectedRow(), 1);
//                    String OrderNo = clsFeltScheme.getOrderNo(PieceNo);
//                    Table.setValueAt(OrderNo, Table.getSelectedRow(), 2);
//                    String OrderDate = EITLERPGLOBAL.formatDate(clsFeltScheme.getOrderDate1(PieceNo));
//                    Table.setValueAt(OrderDate, Table.getSelectedRow(), 3);
//                    String PartyCode = clsFeltScheme.getPartyCode1(PieceNo);
//                    Table.setValueAt(PartyCode, Table.getSelectedRow(), 4);
//                    String PartyName = clsFeltScheme.getPartyName(PieceNo);
//                    Table.setValueAt(PartyName, Table.getSelectedRow(), 5);
//                    String machienPosition = clsFeltScheme.getMachienPosition1(PieceNo);
//                    Table.setValueAt(machienPosition, Table.getSelectedRow(), 6);
//                    String machienPositionDesc = clsFeltScheme.getMachienPositionDesc1(PieceNo);
//                    Table.setValueAt(machienPositionDesc, Table.getSelectedRow(), 7);
//                    String machineno = clsFeltScheme.getMachienNo1(PieceNo);
//                    Table.setValueAt(machineno, Table.getSelectedRow(), 8);
//                    String ReqMonth = clsFeltScheme.getReqMonth1(PieceNo);
//                    Table.setValueAt(ReqMonth, Table.getSelectedRow(), 9);
//                    String Email = clsFeltScheme.getEmail1(PieceNo);
//                    if (Email.trim().length() > 0) {
//                        Table.setValueAt(Email, Table.getSelectedRow(), 10);
//                    }
//
//                }
//            }
//        }
    }//GEN-LAST:event_TableKeyPressed

    private void txtDpNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDpNoFocusGained
        lblStatus.setText("Enter Packing Date.");
    }//GEN-LAST:event_txtDpNoFocusGained

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        try {
            if (!txtPartyCode.getText().equals("")) {
                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE=" + txtPartyCode.getText().trim() + " AND (GSTIN_NO!='' OR STATE_GST_CODE!='')")) {
                    String strSQL = "";
                    ResultSet rsTmp;
                    strSQL = "";
                    strSQL += "SELECT PARTY_NAME,CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE=" + txtPartyCode.getText().trim() + "";
                    rsTmp = data.getResult(strSQL);
                    rsTmp.first();
                    lblPartyName.setText(rsTmp.getString("PARTY_NAME"));

                } else {
                    //  JOptionPane.showMessageDialog(null, "GSTIN NO/GST STATE CODE missing. Please update Party Master.");
                    //  txtPartyCode.requestFocus();

                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid party code");
            txtPartyCode.requestFocus();
        }


    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void cmdNewFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdNewFocusLost
        txtPartyCode.requestFocus();      // TODO add your handling code here:
    }//GEN-LAST:event_cmdNewFocusLost

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased

//        String mst1 = txtDpNo.getText().trim().substring(0, 1);
//        if (mst1.matches("A")) {
//            String PieceNo = (String) Table.getValueAt(Table.getSelectedRow(), 1);
//            Table.setValueAt(PieceNo, Table.getSelectedRow(), 1);
//            String OrderNo = clsFeltScheme.getPieceNo(PieceNo);
//            Table.setValueAt(OrderNo, Table.getSelectedRow(), 2);
//            String OrderDate = EITLERPGLOBAL.formatDate(clsFeltScheme.getOrderDate(PieceNo));
//            Table.setValueAt(OrderDate, Table.getSelectedRow(), 3);
//            String PartyCode = clsFeltScheme.getPartyCode(PieceNo);
//            Table.setValueAt(PartyCode, Table.getSelectedRow(), 4);
//            String PartyName = clsFeltScheme.getPartyName(PieceNo);
//            Table.setValueAt(PartyName, Table.getSelectedRow(), 5);
//            String machienPosition = clsFeltScheme.getMachienPosition(PieceNo);
//            Table.setValueAt(machienPosition, Table.getSelectedRow(), 6);
//            String machienPositionDesc = clsFeltScheme.getMachienPositionDesc(PieceNo);
//            Table.setValueAt(machienPositionDesc, Table.getSelectedRow(), 7);
//            String machineno = clsFeltScheme.getMachienNo(PieceNo);
//            Table.setValueAt(machineno, Table.getSelectedRow(), 8);
//            String ReqMonth = clsFeltScheme.getReqMonth(PieceNo);
//            Table.setValueAt(ReqMonth, Table.getSelectedRow(), 9);
//            String Email = clsFeltScheme.getEmail(PieceNo);
//            if (Email.trim().length() > 0) {
//                Table.setValueAt(Email, Table.getSelectedRow(), 10);
//            }
//        } else {
//            String PieceNo = (String) Table.getValueAt(Table.getSelectedRow(), 1);
//            Table.setValueAt(PieceNo, Table.getSelectedRow(), 1);
//            String OrderNo = clsFeltScheme.getOrderNo(PieceNo);
//            Table.setValueAt(OrderNo, Table.getSelectedRow(), 2);
//            String OrderDate = EITLERPGLOBAL.formatDate(clsFeltScheme.getOrderDate1(PieceNo));
//            Table.setValueAt(OrderDate, Table.getSelectedRow(), 3);
//            String PartyCode = clsFeltScheme.getPartyCode1(PieceNo);
//            Table.setValueAt(PartyCode, Table.getSelectedRow(), 4);
//            String PartyName = clsFeltScheme.getPartyName(PieceNo);
//            Table.setValueAt(PartyName, Table.getSelectedRow(), 5);
//            String machienPosition = clsFeltScheme.getMachienPosition1(PieceNo);
//            Table.setValueAt(machienPosition, Table.getSelectedRow(), 6);
//            String machienPositionDesc = clsFeltScheme.getMachienPositionDesc1(PieceNo);
//            Table.setValueAt(machienPositionDesc, Table.getSelectedRow(), 7);
//            String machineno = clsFeltScheme.getMachienNo1(PieceNo);
//            Table.setValueAt(machineno, Table.getSelectedRow(), 8);
//            String ReqMonth = clsFeltScheme.getReqMonth1(PieceNo);
//            Table.setValueAt(ReqMonth, Table.getSelectedRow(), 9);
//            String Email = clsFeltScheme.getEmail1(PieceNo);
//            if (Email.trim().length() > 0) {
//                Table.setValueAt(Email, Table.getSelectedRow(), 10);
//            }
//
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyReleased

    private void jMenuItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddActionPerformed
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 771;
        aList.FirstFreeNo = 240;

        //if(aList.ShowList()) {
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();
        GenerateYearCombo();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDpNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 771, FFNo, false));
        lblTitle.setText("ADVANCE ANNUAL ORDER SELECTION FORM DETAILS - " + txtDpNo.getText());
        lblTitle.setBackground(Color.BLUE);
        txtPartyCode.setEditable(true);
        txtOrderFromDate.setEditable(true);
        txtOrderToDate.setEditable(true);
        cmbYear.setEditable(true);
        cmbYear.setEnabled(true);
        jButton1.setVisible(false);
//        jButton1.setEnabled(true);


    }//GEN-LAST:event_jMenuItemAddActionPerformed

    private void jMenuItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditActionPerformed
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 771;
        aList.FirstFreeNo = 241;

        //if(aList.ShowList()) {
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDpNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 771, FFNo, false));
        lblTitle.setText("ADVANCE ANNUAL ORDER SELECTION FORM DETAILS - " + txtDpNo.getText());
        lblTitle.setBackground(Color.BLUE);
        txtPartyCode.setEditable(true);
        jLabel4.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        txtOrderFromDate.setVisible(false);
        txtOrderToDate.setVisible(false);
        cmbYear.setVisible(false);
        cmbYear.setEnabled(false);
        jButton1.setVisible(true);
        jButton1.setEnabled(true);

    }//GEN-LAST:event_jMenuItemEditActionPerformed

    private void jMenuItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRemoveActionPerformed
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        //----------------------------------//
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 771;
        aList.FirstFreeNo = 242;

        //if(aList.ShowList()) {
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDpNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 771, FFNo, false));
        lblTitle.setText("ADVANCE ANNUAL ORDER SELECTION FORM DETAILS - " + txtDpNo.getText());
        lblTitle.setBackground(Color.BLUE);
        txtPartyCode.setEditable(true);
        jLabel4.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        txtOrderFromDate.setVisible(false);
        txtOrderToDate.setVisible(false);
        cmbYear.setVisible(false);
        jButton1.setVisible(true);
        jButton1.setEnabled(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemRemoveActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReasonResetReadonly();
        Connection Conn;
        Statement stmt;
        String sql;
        try {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {//Only Process keys when in editing mode
                String mst = txtDpNo.getText().trim().substring(0, 1);
                if (mst.matches("A")) {
                    //PKGLOV aList = new PKGLOV();
                    SchemeLOV aList = new SchemeLOV();

                    String fromYear = cmbYear.getSelectedItem().toString().substring(0, 4) + "-04-01";
                    String toYear = cmbYear.getSelectedItem().toString().substring(5, 9) + "-03-31";

                    String cndtn = "AND LEFT(PARTY_CODE,1)='8' ";
                    if (!txtPartyCode.getText().equals("")) {
                        cndtn += " AND PARTY_CODE = '" + txtPartyCode.getText() + "' ";
                    }

                    if (!txtOrderFromDate.getText().equals("")) {
                        cndtn += " AND S_ORDER_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtOrderFromDate.getText()) + "' ";
                    }

                    if (!txtOrderToDate.getText().equals("")) {
                        cndtn += " AND S_ORDER_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtOrderToDate.getText()) + "' ";
                    }

//                    aList.SQL = "SELECT NULL,B.PIECE_NO,A.S_ORDER_NO,A.S_ORDER_DATE,A.PARTY_CODE,A.PARTY_NAME,C.CHARGE_CODE FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B,DINESHMILLS.D_SAL_PARTY_MASTER C WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.PARTY_CODE=C.PARTY_CODE AND C.CHARGE_CODE=09 AND A.APPROVED=1 AND A.CANCELED=0 " + cndtn + " AND B.PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE)";
                    aList.SQL = "SELECT NULL,PIECE_NO,PARTY_CODE,PARTY_NAME,PRODUCT_CODE,S_ORDER_NO AS ORDER_NO,DATE_FORMAT(S_ORDER_DATE,'%d/%m/%Y') AS ORDER_DATE FROM (SELECT OD.PIECE_NO,OD.PARTY_CODE,OD.PARTY_NAME,OD.PRODUCT_CODE,OD.S_ORDER_NO,OD.S_ORDER_DATE,OD.CHARGE_CODE,COALESCE(DM.DISC_PER,0)+COALESCE(YRED_DISC_PER,0) AS PREDISC "
                            + "FROM"
                            + "("
                            + "SELECT DISTINCT FALSE,B.PIECE_NO,A.PARTY_CODE,A.PARTY_NAME,B.PRODUCT_CODE,A.S_ORDER_NO,A.S_ORDER_DATE,C.CHARGE_CODE "
                            + "FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,"
                            + "PRODUCTION.FELT_SALES_ORDER_DETAIL B,DINESHMILLS.D_SAL_PARTY_MASTER C "
                            + "WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.PARTY_CODE=C.PARTY_CODE AND C.CHARGE_CODE IN ('09') "
                            + "AND A.APPROVED=1 AND A.CANCELED=0  "
                            + "AND A.S_ORDER_DATE>='" + EITLERPGLOBAL.formatDateDB(txtOrderFromDate.getText()) + "' "
                            + "AND A.S_ORDER_DATE<='" + EITLERPGLOBAL.formatDateDB(txtOrderToDate.getText()) + "' "
                            + "AND LEFT(B.PRODUCT_CODE,1)!=6 "
                            + "AND B.PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE "
                            + "UNION ALL SELECT PIECE_NO FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL D,PRODUCTION.FELT_SAL_SCHEME_HEADER H WHERE D.DOC_NO=H.DOC_NO AND H.CANCELED=0 AND H.APPROVED=0)  "
                            + ") AS OD "
                            + "LEFT JOIN "
                            + "( "
                            + "SELECT PARTY_CODE,PRODUCT_CODE,DISC_PER,YRED_DISC_PER,MASTER_NO FROM (SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL "
                            + "WHERE EFFECTIVE_FROM>='" + fromYear + "' AND EFFECTIVE_TO<='" + toYear + "' "
                            + "AND APPROVED=1 AND CANCELED=0 "
                            + "AND LEFT(PRODUCT_CODE,1)!=6 "
                            + "ORDER BY MASTER_NO DESC) AS D "
                            + "GROUP BY PARTY_CODE,PRODUCT_CODE "
                            + ") AS DM "
                            + " "
                            + "ON OD.PARTY_CODE=DM.PARTY_CODE "
                            + "AND OD.PRODUCT_CODE=DM.PRODUCT_CODE) AS PIECE "
                            + "WHERE PREDISC<=5 " + cndtn + " ORDER BY PARTY_CODE,PIECE_NO";

                    System.out.println("query = " + aList.SQL);
                    aList.SQL1 = "SELECT * FROM (SELECT PIECE_NO,PARTY_CODE,PARTY_NAME,PRODUCT_CODE,S_ORDER_NO,S_ORDER_DATE,CHARGE_CODE,COALESCE(DM.DISC_PER,0)+COALESCE(YRED_DISC_PER,0) AS PREDISC,"
                            + "TRIM(CONCAT(COALESCE(REASON1,'   '),COALESCE(REASON2,'   '),COALESCE(REASON3,'   '),COALESCE(REASON4,''))) AS REASON "
                            + "FROM "
                            + "(SELECT DISTINCT FALSE,B.PIECE_NO,A.PARTY_CODE,A.PARTY_NAME,B.PRODUCT_CODE,A.S_ORDER_NO,A.S_ORDER_DATE,C.CHARGE_CODE,"
                            + "CASE WHEN C.CHARGE_CODE NOT IN ('09') THEN 'OTHER THAN 09 CHARGE CODE' ELSE NULL END AS REASON1 "
                            + "FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B,DINESHMILLS.D_SAL_PARTY_MASTER C "
                            + "WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.PARTY_CODE=C.PARTY_CODE  AND A.APPROVED=1 AND A.CANCELED=0  AND "
                            + "A.S_ORDER_DATE>='2018-01-01' AND A.S_ORDER_DATE<='2018-03-31') AS A "
                            + "LEFT JOIN "
                            + "(SELECT PIECE_NO AS IPIECE,'ALREADY SELECTED' AS REASON2 FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE "
                            + "UNION ALL "
                            + "SELECT PIECE_NO AS IPIECE,'ALREADY SELECTED' FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL D,PRODUCTION.FELT_SAL_SCHEME_HEADER H "
                            + "WHERE D.DOC_NO=H.DOC_NO AND H.CANCELED=0 AND H.APPROVED=0) AS B "
                            + "ON A.PIECE_NO=B.IPIECE "
                            + "LEFT JOIN "
                            + "( SELECT PARTY_CODE AS DPCD,PRODUCT_CODE AS DPCODE,DISC_PER,YRED_DISC_PER,MASTER_NO,CASE WHEN LEFT(PRODUCT_CODE,1)=6 THEN 'PRODUCT NOT APPLICABLE' ELSE NULL END AS REASON3,"
                            + "CASE WHEN COALESCE(DISC_PER,0)+COALESCE(YRED_DISC_PER,0)>5 THEN 'PREVIOUS YEAR DISCOUNT MORE THAN 5' ELSE NULL END AS REASON4 "
                            + "FROM "
                            + "(SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL WHERE EFFECTIVE_FROM>='" + fromYear + "' AND EFFECTIVE_TO<='" + toYear + "' AND APPROVED=1 AND "
                            + "CANCELED=0  ORDER BY MASTER_NO DESC) AS D GROUP BY PARTY_CODE,PRODUCT_CODE ) AS DM "
                            + "ON A.PARTY_CODE=DM.DPCD AND A.PRODUCT_CODE=DM.DPCODE) AS NA "
                            + "WHERE LENGTH(TRIM(REASON))>0 " + cndtn + " ORDER BY PARTY_CODE,PIECE_NO";
                    System.out.println("2nd Query =" + aList.SQL1);
                    aList.COND = cndtn;
                    aList.ORDERBY = " ORDER BY PARTY_CODE,PIECE_NO";
                    aList.ReturnCol = 1;
                    aList.SecondCol = 2; //to get Second Value
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;
                    int k = 5;
                    if (aList.ShowLOV()) {

                        Conn = data.getConn();
                        stmt = Conn.createStatement();

                        sql = "SELECT B.PR_BILL_LENGTH,B.PR_BILL_WIDTH,B.PR_BILL_GSM,B.S_GROUP,B.OV_BAS_AMOUNT,B.OV_DISC_PER,B.OV_AMT,B.PIECE_NO,A.S_ORDER_NO,A.S_ORDER_DATE,A.PARTY_CODE,A.PARTY_NAME,B.POSITION,B.POSITION_DESC,B.MACHINE_NO,B.REQ_MONTH,C.EMAIL,B.PRODUCT_CODE,B.PRODUCT_DESC FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B,DINESHMILLS.D_SAL_PARTY_MASTER C WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.PARTY_CODE=C.PARTY_CODE AND C.CHARGE_CODE=09 AND A.APPROVED=1 AND A.CANCELED=0 AND B.PIECE_NO IN (" + aList.ReturnVal.substring(1) + ") ";
                        System.out.println("D :"+sql);
                        ResultSet rsData = stmt.executeQuery(sql);
                        rsData.first();
                        int i = 1;
                        while (!rsData.isAfterLast()) {
                            Object[] rowData = new Object[25];
                            rowData[0] = Integer.toString(Table.getRowCount() + 1);
                            rowData[1] = rsData.getString("PIECE_NO");
                            rowData[2] = rsData.getString("S_ORDER_NO");
                            rowData[3] = EITLERPGLOBAL.formatDate(rsData.getString("S_ORDER_DATE"));
                            rowData[4] = rsData.getString("PARTY_CODE");
                            rowData[5] = rsData.getString("PARTY_NAME");
                            rowData[6] = rsData.getString("POSITION");
                            rowData[7] = rsData.getString("POSITION_DESC");
                            rowData[8] = rsData.getString("MACHINE_NO");
                            rowData[9] = rsData.getString("REQ_MONTH");
                            rowData[10] = rsData.getString("EMAIL");
                            //rowData[11] = "2017-2018";
                            rowData[11] = cmbYear.getSelectedItem();
                            rowData[12] = rsData.getString("PRODUCT_CODE");
                            rowData[13] = rsData.getString("S_GROUP");
                            rowData[14] = rsData.getString("PRODUCT_DESC");
                            rowData[15] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("OV_BAS_AMOUNT")), 2);
                            rowData[16] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("OV_DISC_PER")), 2);
                            rowData[17] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("OV_AMT")), 2);
                            rowData[18] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("PR_BILL_LENGTH")), 2);
                            rowData[19] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("PR_BILL_WIDTH")), 2);
                            rowData[20] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("PR_BILL_GSM")), 2);

                            i++;

                            DataModelPieceNo.addRow(rowData);
                            rsData.next();
                        }

                    }

                }
            }

            String mst = txtDpNo.getText().trim().substring(0, 1);
            if (mst.matches("E")) {
                PKGLOV aList = new PKGLOV();
                String cndtn = "";
                if (!txtPartyCode.getText().equals("")) {
                    cndtn += " AND PARTY_CODE = '" + txtPartyCode.getText() + "' ";
                }

                aList.SQL = "SELECT NULL,A.PIECE_NO,A.PARTY_CODE,B.PARTY_NAME,A.ORDER_NO,A.ORDER_DATE FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PARTY_CODE=B.PARTY_CODE " + cndtn + "";

                System.out.println("query = " + aList.SQL);
                aList.ReturnCol = 1;
                aList.SecondCol = 2; //to get Second Value
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {

                    Conn = data.getConn();
                    stmt = Conn.createStatement();

                    sql = "SELECT A.LENGTH,A.WIDTH,A.GSM,A.GROUP_NAME,A.PIECE_NO,A.ORDER_NO,A.ORDER_DATE,A.PARTY_CODE,B.PARTY_NAME,A.MC_POSITION_NO,A.MC_POSITION_DESC,A.MC_NO,A.REQ_MONTH,A.EMAIL,A.FIN_YEAR,A.PRODUCT_CODE,A.PRODUCT_GROUP_DESC,A.BASIC_VALUE,A.DISCOUNT,A.ORDER_AMT FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PARTY_CODE=B.PARTY_CODE AND A.PIECE_NO IN (" + aList.ReturnVal.substring(1) + ") ";
                    System.out.println("SQLSQLSQL : " + sql);
                    System.out.println(sql);
                    ResultSet rsData = stmt.executeQuery(sql);
                    rsData.first();
                    int i = 1;
                    while (!rsData.isAfterLast()) {
                        if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + rsData.getString("PIECE_NO") + "' AND PR_PIECE_STAGE IN ('INVOICED','IN STOCK','BSR','EXP-INVOICED','EXP-INVOICE')")) {
                            JOptionPane.showMessageDialog(null, "Piece No : " + rsData.getString("PIECE_NO") + " is already Finished. You can not EDIT this Piece.");
                        } else {

                            Object[] rowData = new Object[25];

                            rowData[0] = Integer.toString(Table.getRowCount() + 1);
                            rowData[1] = rsData.getString("PIECE_NO");
                            rowData[2] = rsData.getString("ORDER_NO");
                            rowData[3] = EITLERPGLOBAL.formatDate(rsData.getString("ORDER_DATE"));
                            rowData[4] = rsData.getString("PARTY_CODE");
                            rowData[5] = rsData.getString("PARTY_NAME");
                            rowData[6] = rsData.getString("MC_POSITION_NO");
                            rowData[7] = rsData.getString("MC_POSITION_DESC");
                            rowData[8] = rsData.getString("MC_NO");
                            rowData[9] = rsData.getString("REQ_MONTH");
                            rowData[10] = rsData.getString("EMAIL");
                            rowData[11] = rsData.getString("FIN_YEAR");
                            rowData[12] = rsData.getString("PRODUCT_CODE");
                            rowData[13] = rsData.getString("GROUP_NAME");
                            rowData[14] = rsData.getString("PRODUCT_GROUP_DESC");
                            rowData[15] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "BASIC_VALUE", "0")), 2);
                            rowData[16] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "DISCOUNT", "0")), 2);
                            rowData[17] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "ORDER_AMT", "0")), 2);
                            rowData[18] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "LENGTH", "0")), 2);
                            rowData[19] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "WIDTH", "0")), 2);
                            rowData[20] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "GSM", "0")), 2);
//                            rowData[16] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("DISCOUNT")), 2);
//                            rowData[17] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("ORDER_AMT")), 2);
//                            rowData[18] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("LENGTH")), 2);
//                            rowData[19] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("WIDTH")), 2);
//                            rowData[20] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("GSM")), 2);

                            i++;

                            DataModelPieceNo.addRow(rowData);
                        }
                        rsData.next();
                    }

                }

            }
            String mst1 = txtDpNo.getText().trim().substring(0, 1);
            if (mst1.matches("R")) {
                PKGLOV aList = new PKGLOV();
                String cndtn = "";
                if (!txtPartyCode.getText().equals("")) {
                    cndtn += " AND A.PARTY_CODE = '" + txtPartyCode.getText() + "' ";
                }

                aList.SQL = "SELECT NULL,A.PIECE_NO,A.PARTY_CODE,B.PARTY_NAME,A.ORDER_NO,A.ORDER_DATE FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PARTY_CODE=B.PARTY_CODE " + cndtn + "";

                System.out.println("query = " + aList.SQL);
                aList.ReturnCol = 1;
                aList.SecondCol = 2; //to get Second Value
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {

                    Conn = data.getConn();
                    stmt = Conn.createStatement();

                    sql = "SELECT A.LENGTH,A.WIDTH,A.GSM,A.GROUP_NAME,A.PIECE_NO,A.ORDER_NO,A.ORDER_DATE,A.PARTY_CODE,B.PARTY_NAME,A.MC_POSITION_NO,A.MC_POSITION_DESC,A.MC_NO,A.REQ_MONTH,A.EMAIL,A.FIN_YEAR,A.PRODUCT_CODE,A.PRODUCT_GROUP_DESC,A.BASIC_VALUE,A.DISCOUNT,A.ORDER_AMT FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PARTY_CODE=B.PARTY_CODE AND A.PIECE_NO IN (" + aList.ReturnVal.substring(1) + ") ";
                    System.out.println("SQLSQLSQL : " + sql);
                    ResultSet rsData = stmt.executeQuery(sql);
                    rsData.first();
                    int i = 1;
                    while (!rsData.isAfterLast()) {
                        if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + rsData.getString("PIECE_NO") + "' AND PR_PIECE_STAGE IN ('INVOICED','IN STOCK','BSR','EXP-INVOICED','EXP-INVOICE')")) {
                            JOptionPane.showMessageDialog(null, "Piece No : " + rsData.getString("PIECE_NO") + " is already Finished. You can not REMOVE this Piece.");
                        } else {

                            Object[] rowData = new Object[25];

                            rowData[0] = Integer.toString(Table.getRowCount() + 1);
                            rowData[1] = rsData.getString("PIECE_NO");
                            rowData[2] = rsData.getString("ORDER_NO");
                            rowData[3] = EITLERPGLOBAL.formatDate(rsData.getString("ORDER_DATE"));
                            rowData[4] = rsData.getString("PARTY_CODE");
                            rowData[5] = rsData.getString("PARTY_NAME");
                            rowData[6] = rsData.getString("MC_POSITION_NO");
                            rowData[7] = rsData.getString("MC_POSITION_DESC");
                            rowData[8] = rsData.getString("MC_NO");
                            rowData[9] = rsData.getString("REQ_MONTH");
                            rowData[10] = rsData.getString("EMAIL");
                            rowData[11] = rsData.getString("FIN_YEAR");
                            rowData[12] = rsData.getString("PRODUCT_CODE");
                            rowData[13] = rsData.getString("GROUP_NAME");
                            rowData[14] = rsData.getString("PRODUCT_GROUP_DESC");
                            rowData[15] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "BASIC_VALUE", "0")), 2);
                            rowData[16] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "DISCOUNT", "0")), 2);
                            rowData[17] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "ORDER_AMT", "0")), 2);
                            rowData[18] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "LENGTH", "0")), 2);
                            rowData[19] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "WIDTH", "0")), 2);
                            rowData[20] = EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsData, "GSM", "0")), 2);
//                            rowData[15] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("BASIC_VALUE")), 2);
//                            rowData[16] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("DISCOUNT")), 2);
//                            rowData[17] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("ORDER_AMT")), 2);
//                            rowData[18] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("LENGTH")), 2);
//                            rowData[19] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("WIDTH")), 2);
//                            rowData[20] = EITLERPGLOBAL.round(Double.parseDouble(rsData.getString("GSM")), 2);

                            i++;

                            DataModelPieceNo.addRow(rowData);
                        }
                        rsData.next();
                    }

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int k = 0; k <= Table.getRowCount() - 1; k++) {
            for (int l = k; l <= Table.getRowCount() - 1; l++) {
                if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                    JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TableFocusLost

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        ReasonResetReadonly();        // TODO add your handling code here:
    }//GEN-LAST:event_TableFocusGained

    private void cmbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbYearItemStateChanged
        //jLabel3.setText((String)cmbYear.getSelectedItem());
        try {
            if (!txtOrderFromDate.getText().equals("") && !txtOrderToDate.getText().equals("") && !cmbYear.getSelectedItem().equals("")) {
                jButton1.setVisible(true);
                jButton1.setEnabled(true);
            } else {
                jButton1.setVisible(false);
                jButton1.setEnabled(false);
            }
        } catch (Exception e) {
            jButton1.setVisible(false);
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_cmbYearItemStateChanged

    private void txtOrderFromDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrderFromDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderFromDateFocusGained

    private void txtOrderFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrderFromDateFocusLost
        // TODO add your handling code here:
        if (!txtOrderFromDate.getText().equals("") && !txtOrderToDate.getText().equals("") && !cmbYear.getSelectedItem().equals("")) {
            jButton1.setVisible(true);
            jButton1.setEnabled(true);
        } else {
            jButton1.setVisible(false);
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_txtOrderFromDateFocusLost

    private void txtOrderFromDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderFromDateKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderFromDateKeyPressed

    private void txtOrderToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrderToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderToDateFocusGained

    private void txtOrderToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOrderToDateFocusLost
        // TODO add your handling code here:
        if (!txtOrderFromDate.getText().equals("") && !txtOrderToDate.getText().equals("") && !cmbYear.getSelectedItem().equals("")) {
            jButton1.setVisible(true);
            jButton1.setEnabled(true);
        } else {
            jButton1.setVisible(false);
            jButton1.setEnabled(false);
        }
    }//GEN-LAST:event_txtOrderToDateFocusLost

    private void txtOrderToDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderToDateKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderToDateKeyPressed

    private void cmbYearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbYearFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbYearFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItemAdd;
    private javax.swing.JMenuItem jMenuItemEdit;
    private javax.swing.JMenuItem jMenuItemRemove;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDpDate;
    private javax.swing.JTextField txtDpNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtOrderFromDate;
    private javax.swing.JTextField txtOrderToDate;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {
        txtPartyCode.setEnabled(pStat);
        txtOrderFromDate.setEnabled(pStat);
        txtOrderToDate.setEnabled(pStat);
        lblPartyName.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        jButton1.setEnabled(pStat);
        //cmdAdd.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDpDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtPartyCode.setText("");
        txtOrderFromDate.setText("");
        txtOrderToDate.setText("");
        lblPartyName.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 771)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltPacking.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltPacking.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            GenerateYearCombo();
            String dpNo = ObjFeltPacking.getAttribute("DOC_NO").getString();
            lblTitle.setText(" ADVANCE ANNUAL ORDER SELECTION FORM DETAILS - " + dpNo);
            lblRevNo.setText(Integer.toString((int) ObjFeltPacking.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, ObjFeltPacking.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate = true;

            txtDpNo.setText(dpNo);
            txtDpDate.setText(EITLERPGLOBAL.formatDate(ObjFeltPacking.getAttribute("DOC_DATE").getString()));
            txtPartyCode.setText(ObjFeltPacking.getAttribute("PARTY_CODE").getString());
            lblPartyName.setText(ObjFeltPacking.getAttribute("PARTY_NAME").getString());
            txtOrderFromDate.setText(EITLERPGLOBAL.formatDate(ObjFeltPacking.getAttribute("ORDER_FROM_DATE").getString()));
            txtOrderToDate.setText(EITLERPGLOBAL.formatDate(ObjFeltPacking.getAttribute("ORDER_TO_DATE").getString()));
            EITLERPGLOBAL.setComboIndex(cmbYear, ObjFeltPacking.getAttribute("FIN_YEAR").getInt());
//            EITLERPGLOBAL.setComboIndex(cmbYear, (int) ObjFeltPacking.getAttribute("FIN_YEAR").getVal());

            //Now Generate Table
            FormatGrid();
            for (int i = 1; i <= ObjFeltPacking.hmFeltPackingDetails.size(); i++) {
                clsFeltSchemeDetails ObjFeltPackingDetails = (clsFeltSchemeDetails) ObjFeltPacking.hmFeltPackingDetails.get(Integer.toString(i));

                Object[] rowData = new Object[30];
                rowData[0] = Integer.toString(i);
                rowData[1] = ObjFeltPackingDetails.getAttribute("PIECE_NO").getString();
                rowData[2] = ObjFeltPackingDetails.getAttribute("ORDER_NO").getString();
                rowData[3] = EITLERPGLOBAL.formatDate(ObjFeltPackingDetails.getAttribute("ORDER_DATE").getString());
                rowData[4] = ObjFeltPackingDetails.getAttribute("PARTY_CODE1").getString();
                rowData[5] = ObjFeltPackingDetails.getAttribute("PARTY_NAME1").getString();
                rowData[6] = ObjFeltPackingDetails.getAttribute("MC_POSITION").getString();
                rowData[7] = ObjFeltPackingDetails.getAttribute("MC_POSITION_DESC").getString();
                rowData[8] = ObjFeltPackingDetails.getAttribute("MC_NO").getString();
                rowData[9] = ObjFeltPackingDetails.getAttribute("REQ_MONTH").getString();
                rowData[10] = ObjFeltPackingDetails.getAttribute("EMAIL").getString();
                rowData[11] = ObjFeltPackingDetails.getAttribute("YEAR").getString();
                rowData[12] = ObjFeltPackingDetails.getAttribute("PRODUCT_CODE").getString();
                rowData[13] = ObjFeltPackingDetails.getAttribute("GROUP_NAME").getString();
                rowData[14] = ObjFeltPackingDetails.getAttribute("PRODUCT_GROUP_DESC").getString();
                rowData[15] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("BASIC_VALUE").getVal(), 2));
                rowData[16] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("DISCOUNT").getVal(), 2));
                rowData[17] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("ORDER_AMT").getVal(), 2));
                rowData[18] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("LENGTH").getVal(), 2));
                rowData[19] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("WIDTH").getVal(), 2));
                rowData[20] = Double.toString(EITLERPGLOBAL.round(ObjFeltPackingDetails.getAttribute("GSM").getVal(), 2));

                DataModelPieceNo.addRow(rowData);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(771, ObjFeltPacking.getAttribute("DOC_NO").getString());
            for (int i = 1; i <= hmList.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltScheme.getHistoryList(ObjFeltPacking.getAttribute("DOC_DATE").getString(), dpNo);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltScheme ObjFeltPacking = (clsFeltScheme) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltPacking.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltPacking.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltPacking.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltPacking.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltPacking.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltPacking.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=771 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=771 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void SetupApproval() {
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(771, ObjFeltPacking.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(771, FromUserID, ObjFeltPacking.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(771, ObjFeltPacking.getAttribute("DOC_NO").getString())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6090, 60901)) {
            cmdNew.setEnabled(true);
        } else {
//            cmdNew.setEnabled(false);
            cmdNew.setEnabled(true);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6090, 60902)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6090, 60903)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6090, 60904)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //== Financial Year Validation-------------//

        jPopupMenu.show(cmdNew, 0, 30);

//        if (!EITLERPGLOBAL.YearIsOpen) {
//            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//        ----------------------------------//
//
//        Generate new document no.
//        aList.ModuleID = 771;
//        aList.FirstFreeNo = 240;
//        FFNo = aList.FirstFreeNo;
//        EditMode = EITLERPGLOBAL.ADD;
//        SetFields(true);
//        DisableToolbar();
//        ClearFields();
//        FFNo = aList.FirstFreeNo;
//        SetupApproval();
//        txtDpNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 771, FFNo, false));
//        lblTitle.setText("ADVANCE ANNUAL ORDER SELECTION FORM DETAILS - " + txtDpNo.getText());
//        lblTitle.setBackground(Color.GRAY);
//        txtDpDate.setEnabled(true);
//        txtPartyCode.setEditable(true);
//        cmdAdd.setEnabled(true);
    }

    private void Edit() {
        if (ObjFeltPacking.IsEditable(txtDpNo.getText(), ObjFeltPacking.getAttribute("DOC_DATE").getString(), EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            if (!ApprovalFlow.IsCreator(771, txtDpNo.getText().trim()) && !clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {

            }
            if (clsFeltProductionApprovalFlow.IsCreator(771, ObjFeltPacking.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            } else {
                EnableApproval();
                if (!ApprovalFlow.IsCreator(771, txtDpNo.getText().trim()) && !clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {

                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//

        if (ObjFeltPacking.CanDelete(txtDpNo.getText(), txtDpDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {

        String dpDate, dpNo, baleNo, baleDate, partyCode = "", partyName = "";

        dpNo = txtDpNo.getText().trim();
        dpDate = txtDpDate.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        partyName = lblPartyName.getText();

        //Form level validations
        if (dpNo.equals("")) {
            // JOptionPane.showMessageDialog(this, "Enter Packing No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (dpDate.equals("") || !EITLERPGLOBAL.isDate(dpDate)) {
            //  JOptionPane.showMessageDialog(this, "Enter Valid Packing Date", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Packing Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date dp_Date = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(dpDate));
        if ((dp_Date.after(FinFromDate) || dp_Date.compareTo(FinFromDate) == 0) && (dp_Date.before(FinToDate) || dp_Date.compareTo(FinToDate) == 0)) {
            //Within the year
        } else {
            JOptionPane.showMessageDialog(this, "Doc Date is Not Within Financial Year.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (dp_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(this, "Doc Date Must be Before or the Same Date as Today.", "Wrong Doc Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

//        if (partyCode.equals("")) {
//            //JOptionPane.showMessageDialog(this, "Enter Party Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        //Check the no. of items
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Enter Piece No Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int i = 0, j = 0;
        try {
            String orderno = "", orderdate = "", pieceno = "", mcposition = "", mcpositiondesc = "", mcno = "", deliverymonth = "", pidate = "", partycode1 = "", email = "", partyname1 = "", year = "";
            String productCode = "", productGroupDesc = "", BasicValue = "", Discount = "", OrderAmt = "", GroupName = "";
            String length = "", width = "", gsm = "";

            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {
                pieceno = ((String) Table.getValueAt(i, 1)).trim();
                orderno = ((String) Table.getValueAt(i, 2)).trim();
                orderdate = ((String) Table.getValueAt(i, 3)).trim();
                partycode1 = ((String) Table.getValueAt(i, 4)).trim();
                partyname1 = ((String) Table.getValueAt(i, 5)).trim();
                mcposition = ((String) Table.getValueAt(i, 6)).trim();
                mcpositiondesc = ((String) Table.getValueAt(i, 7)).trim();
                mcno = ((String) Table.getValueAt(i, 8)).trim();
                deliverymonth = ((String) Table.getValueAt(i, 9)).trim();
                email = ((String) Table.getValueAt(i, 10)).trim();
                year = ((String) Table.getValueAt(i, 11)).trim();
                productCode = ((String) Table.getValueAt(i, 12)).trim();
                GroupName = ((String) Table.getValueAt(i, 13)).trim();
                productGroupDesc = ((String) Table.getValueAt(i, 14)).trim();
                BasicValue = Table.getValueAt(i, 15).toString().trim();
                Discount = Table.getValueAt(i, 16).toString().trim();
                OrderAmt = Table.getValueAt(i, 17).toString().trim();
                length = Table.getValueAt(i, 18).toString().trim();
                width = Table.getValueAt(i, 19).toString().trim();
                gsm = Table.getValueAt(i, 20).toString().trim();

                j++;
                if (orderno.equals("") || orderno.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Piece No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                if (orderdate.equals("")) {

                }

                j++;
                if (pieceno.equals("")) {

                }

                j++;
                if (partycode1.equals("")) {
                }

                j++;
                if (partyname1.equals("")) {
                }

                j++;
                if (mcposition.equals("")) {
                }

                j++;
                if (mcpositiondesc.equals("")) {
                }

                j++;
                if (mcno.equals("")) {
                }

                j++;
                if (deliverymonth.equals("")) {
                }

                j++;
                if (email.equals("") || email.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Email", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                if (year.equals("")) {
                }

                j++;
                if (productCode.equals("")) {
                }

                j++;
                if (GroupName.equals("")) {
                }

                j++;
                if (productGroupDesc.equals("")) {
                }

                j++;
                if (BasicValue.equals("")) {
                }

                j++;
                if (Discount.equals("")) {
                }

                j++;
                if (OrderAmt.equals("")) {
                }

                j++;
                if (length.equals("")) {
                }

                j++;
                if (width.equals("")) {
                }

                j++;
                if (gsm.equals("")) {
                }

                j = 0;

            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is : " + nfe.getMessage());
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send");
            return;
        }

        //set data for insert/update
        SetData();
        flg = false;

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltPacking.Insert()) {
                ObjFeltPacking.LoadData();
                DisplayData();
                jButton1.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltPacking.Update()) {
                ObjFeltPacking.LoadData();
                DisplayData();
                jButton1.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + ObjFeltPacking.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        jButton1.setVisible(true);
        jLabel4.setVisible(true);
        jLabel9.setVisible(true);
        jLabel10.setVisible(true);
        txtOrderFromDate.setVisible(true);
        txtOrderToDate.setVisible(true);
        cmbYear.setVisible(true);
        //lblPartyName.setText("");
        txtDpDate.setEnabled(false);
        txtToRemarks.setText("");
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        String dpNo, dpDate, baleDate, baleNo, partyCode = "", partyName = "", fromDt = "", toDt = "";

        dpNo = txtDpNo.getText().trim();
        dpDate = txtDpDate.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        partyName = lblPartyName.getText().trim();
        fromDt = txtOrderFromDate.getText().trim();
        toDt = txtOrderToDate.getText().trim();

        ObjFeltPacking.setAttribute("FFNO", FFNo);
        ObjFeltPacking.setAttribute("DOC_NO", dpNo);
        ObjFeltPacking.setAttribute("DOC_DATE", dpDate);
        ObjFeltPacking.setAttribute("PARTY_CODE", partyCode);
        ObjFeltPacking.setAttribute("PARTY_NAME", partyName);
        ObjFeltPacking.setAttribute("ORDER_FROM_DATE", fromDt);
        ObjFeltPacking.setAttribute("ORDER_TO_DATE", toDt);
        ObjFeltPacking.setAttribute("FIN_YEAR", EITLERPGLOBAL.getComboCode(cmbYear));

        //-------- Update Approval Specific Fields -----------//
        ObjFeltPacking.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltPacking.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltPacking.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltPacking.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltPacking.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltPacking.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltPacking.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltPacking.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltPacking.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }

        ObjFeltPacking.hmFeltPackingDetails.clear();
        // Insert entered data in hashmap for update or insert
        for (int i = 0; i < Table.getRowCount(); i++) {
            clsFeltSchemeDetails ObjFeltPackingDetails = new clsFeltSchemeDetails();
            String PieceNo = (String) Table.getValueAt(i, 1);

            ObjFeltPackingDetails.setAttribute("PIECE_NO", PieceNo); //1
            ObjFeltPackingDetails.setAttribute("ORDER_NO", (String) Table.getValueAt(i, 2));
            ObjFeltPackingDetails.setAttribute("ORDER_DATE", (String) Table.getValueAt(i, 3));
            ObjFeltPackingDetails.setAttribute("PARTY_CODE1", (String) Table.getValueAt(i, 4));
            ObjFeltPackingDetails.setAttribute("PARTY_NAME1", (String) Table.getValueAt(i, 5));
            ObjFeltPackingDetails.setAttribute("MC_POSITION", (String) Table.getValueAt(i, 6));
            ObjFeltPackingDetails.setAttribute("MC_POSITION_DESC", (String) Table.getValueAt(i, 7));
            ObjFeltPackingDetails.setAttribute("MC_NO", (String) Table.getValueAt(i, 8));
            ObjFeltPackingDetails.setAttribute("REQ_MONTH", (String) Table.getValueAt(i, 9));
            ObjFeltPackingDetails.setAttribute("EMAIL", (String) Table.getValueAt(i, 10));
            ObjFeltPackingDetails.setAttribute("YEAR", (String) Table.getValueAt(i, 11));
            ObjFeltPackingDetails.setAttribute("PRODUCT_CODE", (String) Table.getValueAt(i, 12));
            ObjFeltPackingDetails.setAttribute("GROUP_NAME", (String) Table.getValueAt(i, 13));
            ObjFeltPackingDetails.setAttribute("PRODUCT_GROUP_DESC", (String) Table.getValueAt(i, 14));
            ObjFeltPackingDetails.setAttribute("BASIC_VALUE", Float.parseFloat(Table.getValueAt(i, 15).toString()));
            ObjFeltPackingDetails.setAttribute("DISCOUNT", Float.parseFloat(Table.getValueAt(i, 16).toString()));
            ObjFeltPackingDetails.setAttribute("ORDER_AMT", Float.parseFloat(Table.getValueAt(i, 17).toString()));
            ObjFeltPackingDetails.setAttribute("LENGTH", Float.parseFloat(Table.getValueAt(i, 18).toString()));
            ObjFeltPackingDetails.setAttribute("WIDTH", Float.parseFloat(Table.getValueAt(i, 19).toString()));
            ObjFeltPackingDetails.setAttribute("GSM", Float.parseFloat(Table.getValueAt(i, 20).toString()));

            ObjFeltPacking.hmFeltPackingDetails.put(Integer.toString(ObjFeltPacking.hmFeltPackingDetails.size() + 1), ObjFeltPackingDetails);
        }
    }

    private void Cancel() {
        ClearFields();
        DisplayData();
        EditMode = 0;
        ClearFields();
        SetFields(false);
//        lblPartyName.setText("");
        txtDpDate.setEnabled(false);
        cmbYear.setEnabled(false);
        jButton1.setVisible(true);
        jLabel4.setVisible(true);
        jLabel9.setVisible(true);
        jLabel10.setVisible(true);
        txtOrderFromDate.setVisible(true);
        txtOrderToDate.setVisible(true);
        cmbYear.setVisible(true);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltScheme.frmFindFeltScheme", true);
        frmFindFeltScheme ObjFindFeltPacking = (frmFindFeltScheme) ObjLoader.getObj();

        if (ObjFindFeltPacking.Cancelled == false) {
            if (!ObjFeltPacking.Filter(ObjFindFeltPacking.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltScheme.this, " No records found.", "Find Felt Scheme Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltPacking.Filter("DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
        jButton1.setVisible(false);
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltPacking.Filter("DOC_NO IN (SELECT H.DOC_NO FROM PRODUCTION.FELT_PACKING_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=771 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
        jButton1.setVisible(false);
    }

    private void MoveFirst() {
        ObjFeltPacking.MoveFirst();
        DisplayData();
        jButton1.setVisible(false);
    }

    private void MovePrevious() {
        ObjFeltPacking.MovePrevious();
        DisplayData();
        jButton1.setVisible(false);
    }

    private void MoveNext() {
        ObjFeltPacking.MoveNext();
        DisplayData();
        jButton1.setVisible(false);
    }

    private void MoveLast() {
        ObjFeltPacking.MoveLast();
        DisplayData();
        jButton1.setVisible(false);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(771, ObjFeltPacking.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(771, ObjFeltPacking.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(771, ObjFeltPacking.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(771, ObjFeltPacking.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void FormatGrid() {
        DataModelPieceNo = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModelPieceNo);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DataModelPieceNo.addColumn("Sr.No"); //0
        DataModelPieceNo.addColumn("Piece No"); //1
        DataModelPieceNo.addColumn("Order No"); //2
        DataModelPieceNo.addColumn("Order Date"); //3
        DataModelPieceNo.addColumn("Party Code"); //4
        DataModelPieceNo.addColumn("Party Name"); //5
        DataModelPieceNo.addColumn("Machine Position"); //6
        DataModelPieceNo.addColumn("Machine Position Desc"); //7
        DataModelPieceNo.addColumn("Machine No"); //8
        DataModelPieceNo.addColumn("Req Month"); //9
        DataModelPieceNo.addColumn("Email"); //10
        DataModelPieceNo.addColumn("Fin Year"); //11
        DataModelPieceNo.addColumn("Product Code"); //11
        DataModelPieceNo.addColumn("Group Name"); //11
        DataModelPieceNo.addColumn("Product Group Desc"); //11
        DataModelPieceNo.addColumn("Basic Value"); //11
        DataModelPieceNo.addColumn("Discount"); //11
        DataModelPieceNo.addColumn("Order Amount"); //11
        DataModelPieceNo.addColumn("Order Length"); //11
        DataModelPieceNo.addColumn("Order Width"); //11
        DataModelPieceNo.addColumn("Order GSM"); //11

        DataModelPieceNo.SetVariable(0, "");
        DataModelPieceNo.SetVariable(1, "PIECE_NO");
        DataModelPieceNo.SetVariable(2, "ORDER_NO");
        DataModelPieceNo.SetVariable(3, "ORDER_DATE");
        DataModelPieceNo.SetVariable(4, "PARTY_CODE1");
        DataModelPieceNo.SetVariable(5, "PARTY_NAME1");
        DataModelPieceNo.SetVariable(6, "MC_POSITION");
        DataModelPieceNo.SetVariable(7, "POSITION_DESC");
        DataModelPieceNo.SetVariable(8, "MC_NO");
        DataModelPieceNo.SetVariable(9, "REQ_MONTH");
        DataModelPieceNo.SetVariable(10, "EMAIL");
        DataModelPieceNo.SetVariable(11, "YEAR");
        DataModelPieceNo.SetVariable(12, "PRODUCT_CODE");
        DataModelPieceNo.SetVariable(13, "GROUP_NAME");
        DataModelPieceNo.SetVariable(14, "PRODUCT_GROUP_DESC");
        DataModelPieceNo.SetVariable(15, "BASIC_VALUE");
        DataModelPieceNo.SetVariable(16, "DISCOUNT");
        DataModelPieceNo.SetVariable(17, "ORDER_AMT");
        DataModelPieceNo.SetVariable(18, "LENGTH");
        DataModelPieceNo.SetVariable(19, "WIDTH");
        DataModelPieceNo.SetVariable(20, "GSM");

        Table.getColumnModel().getColumn(0).setMinWidth(10);
        Table.getColumnModel().getColumn(1).setMinWidth(50);
        Table.getColumnModel().getColumn(2).setMinWidth(70);
        Table.getColumnModel().getColumn(3).setMinWidth(100);
        Table.getColumnModel().getColumn(4).setMinWidth(80);
        Table.getColumnModel().getColumn(5).setMinWidth(100);
        Table.getColumnModel().getColumn(6).setMinWidth(20);
        Table.getColumnModel().getColumn(7).setMinWidth(50);
        Table.getColumnModel().getColumn(8).setMinWidth(40);
        Table.getColumnModel().getColumn(9).setMinWidth(100);
        Table.getColumnModel().getColumn(10).setMinWidth(100);
        Table.getColumnModel().getColumn(11).setMinWidth(100);
        Table.getColumnModel().getColumn(12).setMinWidth(100);
        Table.getColumnModel().getColumn(13).setMinWidth(100);
        Table.getColumnModel().getColumn(14).setMinWidth(100);
        Table.getColumnModel().getColumn(15).setMinWidth(100);
        Table.getColumnModel().getColumn(16).setMinWidth(100);
        Table.getColumnModel().getColumn(17).setMinWidth(100);
        Table.getColumnModel().getColumn(18).setMinWidth(100);
        Table.getColumnModel().getColumn(19).setMinWidth(100);
        Table.getColumnModel().getColumn(20).setMinWidth(100);

        //DataModelPieceNo.TableReadOnly(false);
        TableColumn dateColumn = Table.getColumnModel().getColumn(9);

        JComboBox monthbox = new JComboBox();
        String month_name = "";
        Date date = new Date();
        int month = date.getMonth() + 3;
        int year = date.getYear() + 1900;
        for (int i = 0; i < 10; i++) {
            month = month + 1;

            if (month > 12) {
                month = 1;
                year = year + 1;
            }

            if (month == 1) {
                month_name = "Jan";
            } else if (month == 2) {
                month_name = "Feb";
            } else if (month == 3) {
                month_name = "Mar";
            } else if (month == 4) {
                month_name = "Apr";
            } else if (month == 5) {
                month_name = "May";
            } else if (month == 6) {
                month_name = "Jun";
            } else if (month == 7) {
                month_name = "Jul";
            } else if (month == 8) {
                month_name = "Aug";
            } else if (month == 9) {
                month_name = "Sep";
            } else if (month == 10) {
                month_name = "Oct";
            } else if (month == 11) {
                month_name = "Nov";
            } else if (month == 12) {
                month_name = "Dec";
            } else if (month == 13) {
                month_name = "Jan";
            } else if (month == 14) {
                month_name = "Feb";
            } else if (month == 15) {
                month_name = "Mar";
            }

            int current_month = EITLERPGLOBAL.getCurrentMonth();
            ArrayList<String> list_month = new ArrayList<String>();

            for (int j = current_month; j <= current_month + 2; j++) {
                String text = "";
                int current_year = EITLERPGLOBAL.getCurrentYear();
                int selected_month = j;

                switch (selected_month) {
                    case 1:
                        text = "Jan";
                        break;
                    case 2:
                        text = "Feb";
                        break;
                    case 3:
                        text = "Mar";
                        break;
                    case 4:
                        text = "Apr";
                        break;
                    case 5:
                        text = "May";
                        break;
                    case 6:
                        text = "Jun";
                        break;
                    case 7:
                        text = "Jul";
                        break;
                    case 8:
                        text = "Aug";
                        break;
                    case 9:
                        text = "Sep";
                        break;
                    case 10:
                        text = "Oct";
                        break;
                    case 11:
                        text = "Nov";
                        break;
                    case 12:
                        text = "Dec";
                        break;
                }

                text = text + " - " + current_year;
                list_month.add(text);

            }
            boolean flag = true;
            for (String data_old_month : list_month) {
                if (data_old_month.equals(month_name + " - " + year)) {
                    flag = false;
                }
            }
            if (flag) {
                monthbox.addItem(month_name + " - " + year);
            } else {
                System.out.println("Skipped : " + (month_name + " - " + year));
            }
        }

        dateColumn.setCellEditor(new DefaultCellEditor(monthbox));

//        for (int i = 1; i <= 8; i++) {
//            DataModelPieceNo.SetReadOnly(i);
//        }
//        DataModelPieceNo.SetReadOnly(0);
//        DataModelPieceNo.SetReadOnly(1);
//        DataModelPieceNo.SetReadOnly(2);
//        DataModelPieceNo.SetReadOnly(3);
//        DataModelPieceNo.SetReadOnly(4);
//        DataModelPieceNo.SetReadOnly(5);
//        DataModelPieceNo.SetReadOnly(6);
//        DataModelPieceNo.SetReadOnly(7);
//        DataModelPieceNo.SetReadOnly(8);
//        DataModelPieceNo.SetReadOnly(9);
//        DataModelPieceNo.SetReadOnly(11);
//        DataModelPieceNo.SetReadOnly(12);
//        DataModelPieceNo.SetReadOnly(13);
//        DataModelPieceNo.SetReadOnly(14);
//        DataModelPieceNo.SetReadOnly(15);
//        DataModelPieceNo.SetReadOnly(16);
//        DataModelPieceNo.SetReadOnly(17);
//        Table.getColumnModel().getSelectionModel().addListSelectionListener(
//            new ListSelectionListener() {
//                public void valueChanged(ListSelectionEvent e) {
//                    int last=Table.getSelectedColumn();
//                    String strVar=DataModel.getVariable(last);
//                    
//                    //=============== Cell Editing Routine =======================//
//                    try {
//                        cellLastValue=(String)Table.getValueAt(Table.getSelectedRow(),Table.getSelectedColumn());
//                        
//                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
//                        if(Table.getEditorComponent() instanceof JTextComponent) {
//                            ((JTextComponent)Table.getEditorComponent()).selectAll();
//                        }
//                    }
//                    catch(Exception cell){}
//                    //============= Cell Editing Routine Ended =================//
//                    
//                    ShowMessage("Ready...");
//                    
//                    if(last==1) {
//                        ShowMessage("Press F1 for Position Code List...");
//                    }
//                    if(last==6) {
//                        ShowMessage("Press F1 for Press Type List...");
//                    }
//                    if(last==20){
//                        ShowMessage("Press F1 for Felt Type List...");
//                    }
//                    if(last==21){
//                        ShowMessage("Press F1 for Felt Style List...");
//                    }
//                    if(last==36){
//                        ShowMessage("Press F1 for Guide Type...");
//                    }
//                     if(last==52){
//                        ShowMessage("Press F1 for Felt Position...");
//                    }
//                    
//                    
//                }
//            }
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

//    private void PreviewReport() {
//        String partycode = txtPartyCode.getText().trim();
//        Connection Conn = null;
//        Statement st = null;
//        ResultSet rs = null;
//        try {
//            Conn = data.getConn();
//            st = Conn.createStatement();
//
//            HashMap parameterMap = new HashMap();
//
//            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
//
//            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE,E.PR_MACHINE_NO FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL B,PRODUCTION.FELT_SAL_SCHEME_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D,PRODUCTION.FELT_SALES_PIECE_REGISTER E WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.DOC_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_PARTY_CODE=C.PARTY_CODE AND AND B.PKG_PIECE_NO=E.PR_PIECE_NO AND A.APPROVED=1 AND A.CANCELED=0";
//            
//
//            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/rptFeltPacking.jrxml", 1, strSQL); //productlist is the name of my jasper file.
//            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing.jrxml", 1, strSQL); //productlist is the name of my jasper file.
//            rpt.callReport();
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        } 
//    }
//    private void PreviewReport1() {
//        String partycode = txtPartyCode.getText().trim();
//        Connection Conn = null;
//        Statement st = null;
//        ResultSet rs = null;
//        try {
//            Conn = data.getConn();
//            st = Conn.createStatement();
//
//            HashMap parameterMap = new HashMap();
//
//            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
//
//            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL B,PRODUCTION.FELT_SAL_SCHEME_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.DOC_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
//            
//
//            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing1.jrxml", 1, strSQL); //productlist is the name of my jasper file.
//            rpt.callReport();
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        } 
//    }
//    private void PreviewReport2() {
//        String partycode = txtPartyCode.getText().trim();
//        Connection Conn = null;
//        Statement st = null;
//        ResultSet rs = null;
//        try {
//            Conn = data.getConn();
//            st = Conn.createStatement();
//
//            HashMap parameterMap = new HashMap();
//
//            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
//
//            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL B,PRODUCTION.FELT_SAL_SCHEME_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.DOC_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
//            
//
//            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing2.jrxml", 1, strSQL); //productlist is the name of my jasper file.
//            rpt.callReport();
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        } 
//    }
//    private void PreviewReport3() {
//        String partycode = txtPartyCode.getText().trim();
//        Connection Conn = null;
//        Statement st = null;
//        ResultSet rs = null;
//        try {
//            Conn = data.getConn();
//            st = Conn.createStatement();
//
//            HashMap parameterMap = new HashMap();
//
//            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
//
//            String strSQL = "SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL B,PRODUCTION.FELT_SAL_SCHEME_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.DOC_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0";
//            
//
//            rpt.setReportName("/EITLERP/FeltSales/FeltPacking/Packing3.jrxml", 1, strSQL); //productlist is the name of my jasper file.
//            rpt.callReport();
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        } 
//    }
//    private void ReportShow() {
//        
//        try {
//            
//            
//            TReportWriter.SimpleDataProvider.TRow objRow;
//            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
//            
//            objReportData.AddColumn("ADDRESS1");//1
//            objReportData.AddColumn("POSITION_DESC");//2
//            objReportData.AddColumn("PKG_BALE_NO");//3
//            objReportData.AddColumn("PKG_BALE_DATE");//4
//            objReportData.AddColumn("PKG_PARTY_NAME");//5
//            objReportData.AddColumn("PKG_PARTY_CODE");//6
//            objReportData.AddColumn("PKG_ORDER_NO");//7
//            objReportData.AddColumn("PKG_ORDER_DATE");//8
//            objReportData.AddColumn("PKG_TRANSPORT_MODE");//9
//            objReportData.AddColumn("PKG_STATION");//10
//            objReportData.AddColumn("PKG_PIECE_NO");//11
//            objReportData.AddColumn("PKG_LENGTH");//12
//            objReportData.AddColumn("PKG_WIDTH");//13
//            objReportData.AddColumn("PKG_WEIGHT");//14
//            objReportData.AddColumn("PKG_GSM");//15
//            objReportData.AddColumn("PKG_SQM");//16
//            objReportData.AddColumn("PKG_MCN_POSITION_DESC");//17
//            objReportData.AddColumn("PKG_SYN_PER");//18
//            objReportData.AddColumn("PKG_STYLE");//19
//            objReportData.AddColumn("PKG_PRODUCT_CODE");//20
//            objReportData.AddColumn("PKG_PRODUCT_DESC");//21
//            objReportData.AddColumn("PKG_BOX_SIZE");//22
//            objReportData.AddColumn("PKG_PO_NO");//23
//            objReportData.AddColumn("PKG_PO_DATE");//24
//            objReportData.AddColumn("PKG_MACHINE_NO");//24
//            
//            
//            
//            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
//            
//            objOpeningRow.setValue("ADDRESS1","");//1
//            objOpeningRow.setValue("POSITION_DESC","");//2
//            objOpeningRow.setValue("PKG_BALE_NO","");//3
//            objOpeningRow.setValue("PKG_BALE_DATE","");//4
//            objOpeningRow.setValue("PKG_PARTY_NAME","");//5
//            objOpeningRow.setValue("PKG_PARTY_CODE","");//6
//            objOpeningRow.setValue("PKG_ORDER_NO","");//7
//            objOpeningRow.setValue("PKG_ORDER_DATE","");//8
//            objOpeningRow.setValue("PKG_TRANSPORT_MODE","");//9
//            objOpeningRow.setValue("PKG_STATION","");//10
//            objOpeningRow.setValue("PKG_PIECE_NO","");//11
//            objOpeningRow.setValue("PKG_LENGTH","");//12
//            objOpeningRow.setValue("PKG_WIDTH","");//13
//            objOpeningRow.setValue("PKG_GSM","");//14
//            objOpeningRow.setValue("PKG_WEIGHT","");//15
//            objOpeningRow.setValue("PKG_SQM","");//16
//            objOpeningRow.setValue("PKG_MCN_POSITION_DESC","");//17
//            objOpeningRow.setValue("PKG_SYN_PER","");//18
//            objOpeningRow.setValue("PKG_STYLE","");//19
//            objOpeningRow.setValue("PKG_PRODUCT_CODE","");//20
//            objOpeningRow.setValue("PKG_PRODUCT_DESC","");//21
//            objOpeningRow.setValue("PKG_BOX_SIZE","");//22
//            objOpeningRow.setValue("PKG_PO_NO","");//23
//            objOpeningRow.setValue("PKG_PO_DATE","");//24
//            objOpeningRow.setValue("PKG_MACHINE_NO","");//24
//           
//            String strSQL="SELECT C.ADDRESS1,D.POSITION_DESC,A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_TRANSACTION_CODE,A.PKG_TRANSPORT_MODE,A.PKG_BOX_SIZE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,A.PKG_STATION,B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH, B.PKG_WEIGHT, B.PKG_GSM, B.PKG_SYN_PER, B.PKG_STYLE,B.PKG_PRODUCT_CODE,B.PKG_PRODUCT_DESC, B.PKG_MCN_POSITION_DESC, B.PKG_ORDER_NO,B.PKG_SQM,B.PKG_ORDER_DATE,B.PKG_MACHINE_NO,B.PKG_PO_NO,B.PKG_PO_DATE FROM PRODUCTION.FELT_SAL_SCHEME_DETAIL B,PRODUCTION.FELT_SAL_SCHEME_HEADER A,DINESHMILLS.D_SAL_PARTY_MASTER C,PRODUCTION.FELT_MACHINE_POSITION_MST D WHERE D.POSITION_NO=B.PKG_MCN_POSITION_DESC AND A.DOC_NO='"+txtDpNo.getText().trim()+"' AND A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_PARTY_CODE=C.PARTY_CODE AND A.APPROVED=1 AND A.CANCELED=0 ";
//            
//            System.out.println(strSQL);
//            ResultSet rsTmp=data.getResult(strSQL);
//            rsTmp.first();
//            
//            int Counter = 0;
//            
//            if(rsTmp.getRow()>0) {
//                while(!rsTmp.isAfterLast()) {
//                    Counter ++;
//                    objRow=objReportData.newRow();
//                    
//                    objRow.setValue("ADDRESS1",UtilFunctions.getString(rsTmp,"ADDRESS1",""));
//                    objRow.setValue("POSITION_DESC",UtilFunctions.getString(rsTmp,"POSITION_DESC",""));
//                    objRow.setValue("PKG_BALE_NO",UtilFunctions.getString(rsTmp,"PKG_BALE_NO",""));
//                    objRow.setValue("PKG_BALE_DATE",UtilFunctions.getString(rsTmp,"PKG_BALE_DATE",""));
//                    objRow.setValue("PKG_PARTY_NAME",UtilFunctions.getString(rsTmp,"PKG_PARTY_NAME",""));
//                    objRow.setValue("PKG_PARTY_CODE",UtilFunctions.getString(rsTmp,"PKG_PARTY_CODE",""));
//                    objRow.setValue("PKG_ORDER_NO",UtilFunctions.getString(rsTmp,"PKG_ORDER_NO",""));
//                    objRow.setValue("PKG_ORDER_DATE",UtilFunctions.getString(rsTmp,"PKG_ORDER_DATE",""));
//                    objRow.setValue("PKG_TRANSPORT_MODE",UtilFunctions.getString(rsTmp,"PKG_TRANSPORT_MODE",""));
//                    objRow.setValue("PKG_STATION",UtilFunctions.getString(rsTmp,"PKG_STATION",""));
//                    objRow.setValue("PKG_PIECE_NO",UtilFunctions.getString(rsTmp,"PKG_PIECE_NO",""));
//                    objRow.setValue("PKG_LENGTH",UtilFunctions.getString(rsTmp,"PKG_LENGTH",""));
//                    objRow.setValue("PKG_WIDTH",UtilFunctions.getString(rsTmp,"PKG_WIDTH",""));
//                    objRow.setValue("PKG_GSM",UtilFunctions.getString(rsTmp,"PKG_GSM",""));
//                    objRow.setValue("PKG_WEIGHT",UtilFunctions.getString(rsTmp,"PKG_WEIGHT",""));
//                    objRow.setValue("PKG_SQM",UtilFunctions.getString(rsTmp,"PKG_SQM",""));
//                    objRow.setValue("PKG_MCN_POSITION_DESC",UtilFunctions.getString(rsTmp,"PKG_MCN_POSITION_DESC",""));
//                    objRow.setValue("PKG_SYN_PER",UtilFunctions.getString(rsTmp,"PKG_SYN_PER",""));
//                    objRow.setValue("PKG_STYLE",UtilFunctions.getString(rsTmp,"PKG_STYLE",""));
//                    objRow.setValue("PKG_PRODUCT_CODE",UtilFunctions.getString(rsTmp,"PKG_PRODUCT_CODE",""));
//                    objRow.setValue("PKG_PRODUCT_DESC",UtilFunctions.getString(rsTmp,"PKG_PRODUCT_DESC",""));
//                    objRow.setValue("PKG_BOX_SIZE",UtilFunctions.getString(rsTmp,"PKG_BOX_SIZE",""));
//                    objRow.setValue("PKG_PO_NO",UtilFunctions.getString(rsTmp,"PKG_PO_NO",""));
//                    objRow.setValue("PKG_PO_DATE",UtilFunctions.getString(rsTmp,"PKG_PO_DATE",""));
//                    objRow.setValue("PKG_MACHINE_NO",UtilFunctions.getString(rsTmp,"PKG_MACHINE_NO",""));
//                    
//                    objReportData.AddRow(objRow);
//                    
//                    rsTmp.next();
//                }
//            }
//            
//            int Comp_ID = EITLERPGLOBAL.gCompanyID;
//            
//            HashMap Parameters=new HashMap();
//           Parameters.put("DOC_NO",txtDpNo.getText().trim());
////            Parameters.put("BALE_NO",txtBaleNo.getText().trim());
////            Parameters.put("BALE_NO",txtBaleDate.getText().trim());
////            //Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
//            
//            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptPacking.rpt",Parameters,objReportData);
//            
//            
//        }
//        catch(Exception e) {
//            e.printStackTrace();
//        }
//    }
    private void ReasonResetReadonly() {

        //    txtamendreasonname.setText((String)cmbAmendReason.getSelectedItem());
        String mst = txtDpNo.getText().trim().substring(0, 1);

        if (mst.matches("A")) {

            DataModelPieceNo.SetReadOnly(0);
            DataModelPieceNo.SetReadOnly(1);
            DataModelPieceNo.SetReadOnly(2);
            DataModelPieceNo.SetReadOnly(3);
            DataModelPieceNo.SetReadOnly(4);
            DataModelPieceNo.SetReadOnly(5);
            DataModelPieceNo.SetReadOnly(6);
            DataModelPieceNo.SetReadOnly(7);
            DataModelPieceNo.SetReadOnly(8);
            DataModelPieceNo.SetReadOnly(9);
            DataModelPieceNo.SetReadOnly(11);
            DataModelPieceNo.SetReadOnly(12);
            DataModelPieceNo.SetReadOnly(13);
            DataModelPieceNo.SetReadOnly(14);
            DataModelPieceNo.SetReadOnly(15);
            DataModelPieceNo.SetReadOnly(16);
            DataModelPieceNo.SetReadOnly(17);
            DataModelPieceNo.SetReadOnly(18);
            DataModelPieceNo.SetReadOnly(19);
            DataModelPieceNo.SetReadOnly(20);

        }
        if (mst.matches("E")) {

            DataModelPieceNo.SetReadOnly(0);
            DataModelPieceNo.SetReadOnly(1);
            DataModelPieceNo.SetReadOnly(2);
            DataModelPieceNo.SetReadOnly(3);
            DataModelPieceNo.SetReadOnly(4);
            DataModelPieceNo.SetReadOnly(5);
            DataModelPieceNo.SetReadOnly(6);
            DataModelPieceNo.SetReadOnly(7);
            DataModelPieceNo.SetReadOnly(8);
            DataModelPieceNo.SetReadOnly(11);
            DataModelPieceNo.SetReadOnly(12);
            DataModelPieceNo.SetReadOnly(13);
            DataModelPieceNo.SetReadOnly(14);
            DataModelPieceNo.SetReadOnly(15);
            DataModelPieceNo.SetReadOnly(16);
            DataModelPieceNo.SetReadOnly(17);
            DataModelPieceNo.SetReadOnly(18);
            DataModelPieceNo.SetReadOnly(19);
            DataModelPieceNo.SetReadOnly(20);

        }

        if (mst.matches("R")) {

            DataModelPieceNo.SetReadOnly(0);
            DataModelPieceNo.SetReadOnly(1);
            DataModelPieceNo.SetReadOnly(2);
            DataModelPieceNo.SetReadOnly(3);
            DataModelPieceNo.SetReadOnly(4);
            DataModelPieceNo.SetReadOnly(5);
            DataModelPieceNo.SetReadOnly(6);
            DataModelPieceNo.SetReadOnly(7);
            DataModelPieceNo.SetReadOnly(8);
            DataModelPieceNo.SetReadOnly(9);
            DataModelPieceNo.SetReadOnly(10);
            DataModelPieceNo.SetReadOnly(11);
            DataModelPieceNo.SetReadOnly(12);
            DataModelPieceNo.SetReadOnly(13);
            DataModelPieceNo.SetReadOnly(14);
            DataModelPieceNo.SetReadOnly(15);
            DataModelPieceNo.SetReadOnly(16);
            DataModelPieceNo.SetReadOnly(17);
            DataModelPieceNo.SetReadOnly(18);
            DataModelPieceNo.SetReadOnly(19);
            DataModelPieceNo.SetReadOnly(20);

        }

    }

    private void GenerateYearCombo() {
        HashMap List2 = new HashMap();

        //----- Generate Department Combo ------- //
        cmbYearModel = new EITLComboModel();
        cmbYear.removeAllItems();
        cmbYear.setModel(cmbYearModel);

        try {
            ComboData combodata2 = new ComboData();
            combodata2.Code = 0;
            //   combodata2.Text="SELECT YEAR";

            cmbYearModel.addElement(combodata2);
            ResultSet rs2 = data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='ANNUAL_ORDER' ");
            while (!rs2.isAfterLast()) {
                combodata2 = new ComboData();
                combodata2.Code = rs2.getLong("PARA_CODE");
                combodata2.Text = rs2.getString("PARA_DESC");

                cmbYearModel.addElement(combodata2);
                rs2.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
}
