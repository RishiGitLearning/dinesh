/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.PieceMachineMisMatch;

import EITLERP.*;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.FeltSales.common.SelectKeyFields;
import EITLERP.FeltSales.common.clsOrderValueCalc;
import EITLERP.FeltSales.common.SelectSortFields;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import sdml.felt.commonUI.clsExcelExporter;

/**
 *
 * @author Dharmendra
 */
public class PieceMachineMisMatch extends javax.swing.JApplet {

    /**
     * Initializes the applet PieceMachineMisMatch
     */
    private EITLTableModel DataModelDesc, DataModel, DataModelM;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private clsExcelExporter exp = new clsExcelExporter();
    String key1 = "PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,"
            + "PR_PRODUCT_CODE,PR_LENGTH,PR_WIDTH,PR_GSM";
    String key2 = "MM_MACHINE_NO,MM_MACHINE_POSITION,MM_PARTY_CODE,"
            + "MM_ITEM_CODE,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM";

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the applet */
        initComponents();
        setSize(980, 480);
        ExporttoExcelFileChooser.show(false);
        showlistActionPerformed(null);

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        showlist = new javax.swing.JButton();
        PieceMachine = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        ExportData = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        match = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        lblrecordmatch = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mismatch = new javax.swing.JTable();
        ExportData1 = new javax.swing.JButton();
        lblrecordmissing = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mismatch1 = new javax.swing.JTable();
        ExportData2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblrecordmismatch = new javax.swing.JLabel();
        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        txtpartyname = new javax.swing.JLabel();
        cmbstage = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();

        jLabel1.setText("Party Code");

        showlist.setText("Show List");
        showlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showlistActionPerformed(evt);
            }
        });

        ExportData.setText("EXPORT TO EXCEL");
        ExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDataActionPerformed(evt);
            }
        });

        match.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(match);

        jLabel4.setText("TOTAL RECORDS:");

        lblrecordmatch.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblrecordmatch, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExportData, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExportData, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lblrecordmatch)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PieceMachine.addTab("Piece[s] Match Against Machine Master", jPanel1);

        mismatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(mismatch);

        ExportData1.setText("EXPORT TO EXCEL");
        ExportData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportData1ActionPerformed(evt);
            }
        });

        lblrecordmissing.setText("0");

        jLabel3.setText("TOTAL RECORDS:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblrecordmissing, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExportData1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ExportData1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(lblrecordmissing)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PieceMachine.addTab("Piece[s] Missing Against Machine Master", jPanel2);

        mismatch1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(mismatch1);

        ExportData2.setText("EXPORT TO EXCEL");
        ExportData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportData2ActionPerformed(evt);
            }
        });

        jLabel2.setText("TOTAL RECORDS:");

        lblrecordmismatch.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblrecordmismatch, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExportData2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExportData2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(lblrecordmismatch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PieceMachine.addTab("Piece[s] MisMatch Against Machine Master", jPanel3);

        cmbstage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "STOCK", "WIP" }));

        jLabel6.setText("Piece Stage");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtpartyname, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbstage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)
                                        .addComponent(showlist, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ExporttoExcelFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addComponent(PieceMachine, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ExporttoExcelFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbstage)
                    .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showlist))
                .addGap(3, 3, 3)
                .addComponent(txtpartyname, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PieceMachine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDataActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            ExporttoExcelFileChooser.show(true);
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(PieceMachineMisMatch.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                exp.fillData(match, new File(file + ".xls"), "MATCH PIECES");
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);

            }
            ExporttoExcelFileChooser.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportDataActionPerformed

    private void ExportData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportData1ActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            ExporttoExcelFileChooser.show(true);
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(PieceMachineMisMatch.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                exp.fillData(mismatch, new File(file + ".xls"), "MISSING PIECES");
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);

            }
            ExporttoExcelFileChooser.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportData1ActionPerformed

    private void showlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showlistActionPerformed
        // TODO add your handling code here:
        String cond = "", sql = "";
        if (txtpartycode.getText().trim().length() > 0) {
            cond = " AND PR_PARTY_CODE='" + txtpartycode.getText().trim() + "'";
        }
        if (cmbstage.getSelectedItem().toString().equalsIgnoreCase("STOCK")) {
            cond = cond + " AND PR_PIECE_STAGE IN ('IN STOCK','BSR')";
        }
        if (cmbstage.getSelectedItem().toString().equalsIgnoreCase("WIP")) {
            cond = cond + " AND PR_PIECE_STAGE NOT IN ('IN STOCK','BSR')";
        }
        data.Execute("TRUNCATE TABLE PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER");
        data.Execute("TRUNCATE TABLE PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL");
        sql = "INSERT INTO PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER "
                + "SELECT DISTINCT PR_PIECE_NO,PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,PR_PRODUCT_CODE,PR_STYLE,"
                + "PR_LENGTH,PR_WIDTH,PR_GSM,PR_PIECE_STAGE,NULL,NULL,PR_PRIORITY_HOLD_CAN_FLAG "
                + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER";
        data.Execute(sql);
        if (key1.equals("")) {
            key1 = "PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,"
                    + "PR_PRODUCT_CODE,PR_LENGTH,PR_WIDTH,PR_GSM";
            key2 = "MM_MACHINE_NO,MM_MACHINE_POSITION,MM_PARTY_CODE,"
                    + "MM_ITEM_CODE,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM";

        }
        sql = "UPDATE PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER "
                + "SET PR_MACHINE_NO=RIGHT(100+COALESCE(PR_MACHINE_NO,0),2),"
                + "PR_POSITION_NO=RIGHT(100+COALESCE(PR_POSITION_NO,0),2)";
        data.Execute(sql);
        sql = "UPDATE PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER "
                + "SET PR_KEY1=CONCAT(PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,PR_PRODUCT_CODE),"
                + "PR_KEY2=CONCAT(ROUND(COALESCE(CAST(PR_LENGTH as decimal(15,2)),0),2),ROUND(COALESCE(CAST(PR_WIDTH as decimal(15,2)),0),2),ROUND(COALESCE(CAST(PR_GSM as decimal(15,2)),0),2));";
        data.Execute(sql);
        sql = "INSERT INTO PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL "
                + "SELECT DISTINCT MM_PARTY_CODE,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_FELT_LENGTH,MM_FELT_WIDTH,"
                + "MM_FELT_GSM,MM_FELT_STYLE,MM_ITEM_CODE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,NULL,NULL "
                + "FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL";
        data.Execute(sql);
        sql = "UPDATE PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL "
                + "SET MM_MACHINE_NO=RIGHT(100+COALESCE(MM_MACHINE_NO,0),2),"
                + "MM_MACHINE_POSITION=RIGHT(100+COALESCE(MM_MACHINE_POSITION,0),2),"
                + "MM_FELT_LENGTH=(COALESCE(MM_FELT_LENGTH,0)+COALESCE(MM_FABRIC_LENGTH,0)),"
                + "MM_FELT_WIDTH=(COALESCE(MM_FELT_WIDTH,0)+COALESCE(MM_FABRIC_WIDTH,0))";
        data.Execute(sql);
        sql = "UPDATE PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL "
                + "SET MM_KEY1=CONCAT(MM_MACHINE_NO,RIGHT(100+MM_MACHINE_POSITION,2),MM_PARTY_CODE,MM_ITEM_CODE),"
                + "MM_KEY2=CONCAT(ROUND(COALESCE(MM_FELT_LENGTH,0),2),ROUND(COALESCE(MM_FELT_WIDTH,0),2),ROUND(MM_FELT_GSM*1,2));";

        data.Execute(sql);
        FormatGridPR();
        FormatGridMM();
        FormatGridM();
        sql = "SELECT DISTINCT PR_PIECE_NO,PR_KEY1,MM_KEY1,PR_KEY2,MM_KEY2,PR_STYLE,PR_PIECE_STAGE,"
                + "PR_PRODUCT_CODE,PRODUCT_DESC,GROUP_NAME,MM_ITEM_CODE,PR_MACHINE_NO,MM_MACHINE_NO,PR_POSITION_NO,POSITION_DESC,MM_MACHINE_POSITION,"
                + "PR_PARTY_CODE,PARTY_NAME,MM_PARTY_CODE,PR_LENGTH,MM_FELT_LENGTH,PR_WIDTH,MM_FELT_WIDTH,PR_GSM,MM_FELT_GSM "
                + "FROM PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER P "
                + "LEFT JOIN PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL M "
                + "ON PR_KEY1=MM_KEY1 AND PR_KEY2=MM_KEY2 "
                + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST "
                + "ON PR_POSITION_NO*1=POSITION_NO "
                + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                + "ON PR_PARTY_CODE=PARTY_CODE "
                + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                + "WHERE MM_KEY1 IS NOT NULL AND MM_KEY2 IS NOT NULL "
                + " AND PR_PIECE_STAGE NOT IN ('INVOICED','DIVERTED') AND MAIN_ACCOUNT_CODE=210010 AND PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5','') " + cond + " ORDER BY PR_PIECE_NO";
        displayPR(sql);
        sql = "SELECT DISTINCT PR_PIECE_NO,PR_KEY1,MM_KEY1,PR_KEY2,MM_KEY2,PR_STYLE,PR_PIECE_STAGE,"
                + "PR_PRODUCT_CODE,PRODUCT_DESC,GROUP_NAME,MM_ITEM_CODE,PR_MACHINE_NO,MM_MACHINE_NO,PR_POSITION_NO,POSITION_DESC,MM_MACHINE_POSITION,"
                + "PR_PARTY_CODE,PARTY_NAME,MM_PARTY_CODE,PR_LENGTH,MM_FELT_LENGTH,PR_WIDTH,MM_FELT_WIDTH,PR_GSM,MM_FELT_GSM "
                + "FROM PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER P "
                + "LEFT JOIN PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL M "
                + "ON PR_KEY1=MM_KEY1 "
                + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST "
                + "ON (PR_POSITION_NO*1)=POSITION_NO "
                + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                + "ON PR_PARTY_CODE=PARTY_CODE "
                + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                + "WHERE MM_KEY1 IS NULL "
                + "AND PR_PIECE_STAGE NOT IN ('INVOICED','DIVERTED') AND MAIN_ACCOUNT_CODE=210010 AND PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5','') " + cond + "  ORDER BY PR_PIECE_NO";
        displayMM(sql);
        sql = "SELECT DISTINCT PR_PIECE_NO,PR_KEY1,MM_KEY1,PR_KEY2,MM_KEY2,PR_STYLE,PR_PIECE_STAGE,"
                + "PR_PRODUCT_CODE,PRODUCT_DESC,GROUP_NAME,MM_ITEM_CODE,PR_MACHINE_NO,MM_MACHINE_NO,PR_POSITION_NO,POSITION_DESC,MM_MACHINE_POSITION,"
                + "PR_PARTY_CODE,PARTY_NAME,MM_PARTY_CODE,PR_LENGTH,MM_FELT_LENGTH,PR_WIDTH,MM_FELT_WIDTH,PR_GSM,MM_FELT_GSM "
                + "FROM PRODUCTION.TMP_FELT_SALES_PIECE_REGISTER P "
                + "LEFT JOIN PRODUCTION.TMP_FELT_MACHINE_MASTER_DETAIL M "
                + "ON PR_KEY1=MM_KEY1 "
                + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST "
                + "ON (PR_POSITION_NO*1)=POSITION_NO "
                + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                + "ON PR_PARTY_CODE=PARTY_CODE "
                + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                + "WHERE MM_KEY1 IS NOT NULL AND PR_KEY2!=MM_KEY2 "
                + "AND PR_PIECE_STAGE NOT IN ('INVOICED','DIVERTED') AND  MAIN_ACCOUNT_CODE=210010 AND PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5','') " + cond + "  ORDER BY PR_PIECE_NO;";
        displayM(sql);
    }//GEN-LAST:event_showlistActionPerformed

    private void ExportData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportData2ActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            ExporttoExcelFileChooser.show(true);
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(PieceMachineMisMatch.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                exp.fillData(mismatch1, new File(file + ".xls"), "MISMATCH PIECES");
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);

            }
            ExporttoExcelFileChooser.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportData2ActionPerformed

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        try {
            if (!txtpartycode.getText().equals("")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,INSURANCE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE = " + txtpartycode.getText().trim() + "";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                txtpartyname.setText(rsTmp.getString("PARTY_NAME"));
                /*txtaddress1.setText(rsTmp.getString("AD1"));
                txtaddress2.setText(rsTmp.getString("AD2"));
                txtstation.setText(rsTmp.getString("STATION"));
                txtchargeind.setText(rsTmp.getString("CHG_IND_2"));
                txttranscode.setText(rsTmp.getString("TRANS_CD"));
                txtinsuranceind.setText(rsTmp.getString("INSURANCE_CODE"));                */
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010'";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExportData;
    private javax.swing.JButton ExportData1;
    private javax.swing.JButton ExportData2;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JTabbedPane PieceMachine;
    private javax.swing.JComboBox<String> cmbstage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblrecordmatch;
    private javax.swing.JLabel lblrecordmismatch;
    private javax.swing.JLabel lblrecordmissing;
    private javax.swing.JTable match;
    private javax.swing.JTable mismatch;
    private javax.swing.JTable mismatch1;
    private javax.swing.JButton showlist;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JLabel txtpartyname;
    // End of variables declaration//GEN-END:variables
private void FormatGridPR() {
        try {

            DataModelDesc = new EITLTableModel();
            match.removeAll();
            match.setModel(DataModelDesc);
            TableColumnModel ColModel = match.getColumnModel();
            match.setAutoResizeMode(match.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModelDesc.addColumn("Sr.");  //0 - Read Only
            DataModelDesc.addColumn("PIECE NO");  //1              
            DataModelDesc.addColumn("MACHINE NO");//2
            DataModelDesc.addColumn("POSITION");//3
            DataModelDesc.addColumn("POSITION DESC");//4
            DataModelDesc.addColumn("PRODUCT CODE"); //5  
            DataModelDesc.addColumn("PRODUCT DESC"); //6  
            DataModelDesc.addColumn("GROUP"); //7  
            DataModelDesc.addColumn("PARTY CODE"); //8
            DataModelDesc.addColumn("PARTY NAME"); //9  
            DataModelDesc.addColumn("LENGTH");//10
            DataModelDesc.addColumn("WIDTH"); //11
            DataModelDesc.addColumn("GSM");  //12
            DataModelDesc.addColumn("STYLE"); //13            
            DataModelDesc.addColumn("STAGE"); //14

            match.getColumnModel().getColumn(0).setMaxWidth(50);

        } catch (Exception e) {

        }
        //Table formatting completed  
    }

    private void FormatGridMM() {

        try {

            DataModel = new EITLTableModel();
            mismatch.removeAll();
            mismatch.setModel(DataModel);
            TableColumnModel ColModel = mismatch.getColumnModel();
            mismatch.setAutoResizeMode(mismatch.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel.addColumn("Sr.");  //0 - Read Only
            DataModel.addColumn("PIECE NO");  //1              
            DataModel.addColumn("MACHINE NO");//2
            DataModel.addColumn("POSITION");//3
            DataModel.addColumn("POSITION DESC");//4
            DataModel.addColumn("PRODUCT CODE"); //5  
            DataModel.addColumn("PRODUCT DESC"); //6  
            DataModel.addColumn("GROUP"); //7  
            DataModel.addColumn("PARTY CODE"); //8
            DataModel.addColumn("PARTY NAME"); //9  
            DataModel.addColumn("LENGTH");//10
            DataModel.addColumn("WIDTH"); //11
            DataModel.addColumn("GSM");  //12
            DataModel.addColumn("STYLE"); //13            
            DataModel.addColumn("STAGE"); //14
            mismatch.getColumnModel().getColumn(0).setMaxWidth(50);

        } catch (Exception e) {

        }
        //Table formatting completed  
    }

    private void FormatGridM() {

        try {

            DataModelM = new EITLTableModel();
            mismatch1.removeAll();
            mismatch1.setModel(DataModelM);
            TableColumnModel ColModel = mismatch1.getColumnModel();
            mismatch1.setAutoResizeMode(mismatch1.AUTO_RESIZE_OFF);
            
            DataModelM.addColumn("Sr.");  //0 - Read Only
            DataModelM.addColumn("PIECE NO");  //1              
            DataModelM.addColumn("MACHINE NO");//2
            DataModelM.addColumn("POSITION");//3
            DataModelM.addColumn("POSITION DESC");//4
            DataModelM.addColumn("PRODUCT CODE"); //5  
            DataModelM.addColumn("PRODUCT DESC"); //6  
            DataModelM.addColumn("GROUP"); //7  
            DataModelM.addColumn("PARTY CODE"); //8
            DataModelM.addColumn("PARTY NAME"); //9  
            DataModelM.addColumn("PR LENGTH");//10
            DataModelM.addColumn("MM LENGTH");//11
            DataModelM.addColumn("PR WIDTH"); //12
            DataModelM.addColumn("MM WIDTH"); //13
            DataModelM.addColumn("PR GSM");  //14
            DataModelM.addColumn("MM GSM");  //15
            DataModelM.addColumn("STYLE"); //16          
            DataModelM.addColumn("STAGE"); //17
            mismatch1.getColumnModel().getColumn(0).setMaxWidth(50);
            mismatch1.getColumnModel().getColumn(11).setCellRenderer(Renderer);
            mismatch1.getColumnModel().getColumn(13).setCellRenderer(Renderer);
            mismatch1.getColumnModel().getColumn(15).setCellRenderer(Renderer);

        } catch (Exception e) {
            e.printStackTrace();

        }
        //Table formatting completed  
    }

    private void displayPR(String pQuery) {
        ResultSet rs = null;
        try {
            rs = data.getResult(pQuery);
            rs.first();
            int i = 1;
            while (!rs.isAfterLast()) {
                Object[] rowData = new Object[30];
                rowData[0] = Integer.toString(i);
                rowData[1] = rs.getString("PR_PIECE_NO");
                rowData[2] = rs.getString("PR_MACHINE_NO");
                rowData[3] = rs.getString("PR_POSITION_NO");
                rowData[4] = rs.getString("POSITION_DESC");
                rowData[5] = rs.getString("PR_PRODUCT_CODE");
                rowData[6] = rs.getString("PRODUCT_DESC");
                rowData[7] = rs.getString("GROUP_NAME");
                rowData[8] = rs.getString("PR_PARTY_CODE");
                rowData[9] = rs.getString("PARTY_NAME");
                rowData[10] = rs.getString("PR_LENGTH");
                rowData[11] = rs.getString("PR_WIDTH");
                rowData[12] = rs.getString("PR_GSM");
                rowData[13] = rs.getString("PR_STYLE");
                rowData[14] = rs.getString("PR_PIECE_STAGE");
                DataModelDesc.addRow(rowData);
                i++;
                rs.next();
            }
            lblrecordmatch.setText(String.valueOf(i - 1));
        } catch (Exception e) {
            lblrecordmatch.setText("0");
            e.printStackTrace();
        }
    }

    private void displayMM(String pQuery) {
        ResultSet rs = null;
        try {

            rs = data.getResult(pQuery);
            rs.first();
            int i = 1;
            while (!rs.isAfterLast()) {
                Object[] rowData = new Object[30];
                rowData[0] = Integer.toString(i);
                rowData[1] = rs.getString("PR_PIECE_NO");
                rowData[2] = rs.getString("PR_MACHINE_NO");
                rowData[3] = rs.getString("PR_POSITION_NO");
                rowData[4] = rs.getString("POSITION_DESC");
                rowData[5] = rs.getString("PR_PRODUCT_CODE");
                rowData[6] = rs.getString("PRODUCT_DESC");
                rowData[7] = rs.getString("GROUP_NAME");
                rowData[8] = rs.getString("PR_PARTY_CODE");
                rowData[9] = rs.getString("PARTY_NAME");
                rowData[10] = rs.getString("PR_LENGTH");
                rowData[11] = rs.getString("PR_WIDTH");
                rowData[12] = rs.getString("PR_GSM");
                rowData[13] = rs.getString("PR_STYLE");
                rowData[14] = rs.getString("PR_PIECE_STAGE");
                DataModel.addRow(rowData);
                i++;
                rs.next();
            }
            lblrecordmissing.setText(String.valueOf(i - 1));
        } catch (Exception e) {
            lblrecordmissing.setText("0");
            e.printStackTrace();
        }
    }

    private void displayM(String pQuery) {
        ResultSet rs = null;
        try {

            rs = data.getResult(pQuery);
            rs.first();
            int i = 1;
            double val1=0,val2=0;
            while (!rs.isAfterLast()) {
                Object[] rowData = new Object[30];
                rowData[0] = Integer.toString(i);
                rowData[1] = rs.getString("PR_PIECE_NO");
                rowData[2] = rs.getString("PR_MACHINE_NO");
                rowData[3] = rs.getString("PR_POSITION_NO");
                rowData[4] = rs.getString("POSITION_DESC");
                rowData[5] = rs.getString("PR_PRODUCT_CODE");
                rowData[6] = rs.getString("PRODUCT_DESC");
                rowData[7] = rs.getString("GROUP_NAME");
                rowData[8] = rs.getString("PR_PARTY_CODE");
                rowData[9] = rs.getString("PARTY_NAME");
                rowData[10] = rs.getString("PR_LENGTH");
                rowData[11] = rs.getString("MM_FELT_LENGTH");                
                rowData[12] = rs.getString("PR_WIDTH");
                rowData[13] = rs.getString("MM_FELT_WIDTH");
                rowData[14] = rs.getString("PR_GSM");
                rowData[15] = rs.getString("MM_FELT_GSM");
                rowData[16] = rs.getString("PR_STYLE");
                rowData[17] = rs.getString("PR_PIECE_STAGE");
                DataModelM.addRow(rowData);
                //Renderer.removeBackColors();
                val1=rs.getDouble("PR_LENGTH");
                val2=rs.getDouble("MM_FELT_LENGTH");
                if(val1 != val2)
                {
                    //DataModel.setValueByVariable("STYLE_UPDATED","",NewRow);
                    System.out.println("Changed : "+val1+" , "+val2);
                    Renderer.setBackColor(i-1, 11, Color.LIGHT_GRAY);
                }
                
                val1=rs.getDouble("PR_GSM");
                val2=rs.getDouble("MM_FELT_GSM");
                if(val1 != val2)
                {
                    //DataModel.setValueByVariable("STYLE_UPDATED","",NewRow);
                    System.out.println("Changed : "+val1+" , "+val2);
                    Renderer.setBackColor(i-1, 15, Color.LIGHT_GRAY);
                }
                
                val1=rs.getDouble("PR_WIDTH");
                val2=rs.getDouble("MM_FELT_WIDTH");
                if(val1 != val2)
                {
                    //DataModel.setValueByVariable("STYLE_UPDATED","",NewRow);
                    System.out.println("Changed : "+val1+" , "+val2);
                    Renderer.setBackColor(i-1, 13, Color.LIGHT_GRAY);
                }
                
                i++;
                rs.next();
            }
            lblrecordmismatch.setText(String.valueOf(i - 1));
        } catch (Exception e) {
            lblrecordmismatch.setText("0");
            e.printStackTrace();
        }
    }

    public void match_query_creator() {
        SelectKeyFields key = new SelectKeyFields();

        key.setField("PR_MACHINE_NO", "MACHINE NO");
        key.setFieldOther("MM_MACHINE_NO", "PR_MACHINE_NO");
        key.setField("PR_POSITION_NO", "POSITION");
        key.setFieldOther("MM_MACHINE_POSITION", "PR_POSITION_NO");
        key.setField("PR_PARTY_CODE", "PARTY CODE");
        key.setFieldOther("MM_PARTY_CODE", "PR_PARTY_CODE");
        key.setField("PR_PRODUCT_CODE", "PRODUCT CODE");
        key.setFieldOther("MM_ITEM_CODE", "PR_PRODUCT_CODE");
        key.setField("PR_STYLE", "STYLE");
        key.setFieldOther("MM_FELT_STYLE", "PR_STYLE");
        key.setField("PR_LENGTH", "LENGTH");
        key.setFieldOther("MM_FELT_LENGTH", "PR_LENGTH");
        key.setField("PR_WIDTH", "WIDTH");
        key.setFieldOther("MM_FELT_WIDTH", "PR_WIDTH");
        key.setField("PR_GSM", "GSM");
        key.setFieldOther("MM_FELT_GSM", "PR_GSM");

        key1 = key.getQuery();
        System.out.println(key1);
        key2 = key.getOtherKey(key1);
        System.out.println(key2);
        showlistActionPerformed(null);
    }
}
