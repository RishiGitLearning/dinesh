/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.FeltSales.PieceRegister;

import EITLERP.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.sql.*;
import java.net.*;
import java.math.*;
import java.lang.*;
import java.text.DecimalFormat;
import java.lang.Double;
import java.io.File;
import EITLERP.Production.ReportUI.*;
import java.awt.Cursor;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmFeltObsoleteRpt extends javax.swing.JApplet {

    private EITLTableModel DataModelFinishedGoods = new EITLTableModel();
    private EITLTableModel DataModelWIP = new EITLTableModel();
    private EITLTableModel DataModelCSS = new EITLTableModel();

    private EITLTableModel DataModelDetailFG = new EITLTableModel();
    private EITLTableModel DataModelDetailWIP = new EITLTableModel();
    private EITLTableModel DataModelDetailCS = new EITLTableModel();

    private EITLComboModel cmbSortFGModel = new EITLComboModel();
    private EITLComboModel cmbSortWIPModel = new EITLComboModel();
    private EITLComboModel cmbSortCSModel = new EITLComboModel();

    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    public void init() {
        System.gc();
        setSize(1000, 750);
        initComponents();
        GenerateCombo();
        FormatGridFinishedGoods();
        FormatGridWIP();
        FormatGridCSS();
        FormatGridDetailFG();
        FormatGridDetailWIP();
        FormatGridDetailCS();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        file1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cmdClearAll = new javax.swing.JButton();
        txtMonthLastdate = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        SummaryPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableFinishedGoods = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableWIP = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableCSS = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmdETEFinished = new javax.swing.JButton();
        cmdETEWIP = new javax.swing.JButton();
        cmdETECSS = new javax.swing.JButton();
        cmdShow = new javax.swing.JButton();
        FinishedGoodsDetailPanel = new javax.swing.JPanel();
        cmdShowFG = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDetailFG = new javax.swing.JTable();
        cmbSortFG = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtTotalSQFG = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtRecordFG = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        txtTotalKGFG = new javax.swing.JTextField();
        btnETE_FG = new javax.swing.JButton();
        WIPDetailPanel = new javax.swing.JPanel();
        cmdShowWIP = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableDetailWIP = new javax.swing.JTable();
        cmbSortWIP = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        txtTotalSQWIP = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtRecordWIP = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txtTotalKGWIP = new javax.swing.JTextField();
        btnETE_WIP = new javax.swing.JButton();
        ConvertedStockDetailPanel = new javax.swing.JPanel();
        cmdShowCS = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableDetailCS = new javax.swing.JTable();
        cmbSortCS = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        txtTotalSQCS = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtRecordCS = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        txtTotalKGCS = new javax.swing.JTextField();
        btnETE_CS = new javax.swing.JButton();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Felt's Historical Stock Information System  ");

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Obsolete Piece Movement Report");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(0, 0, 880, 30);

        jLabel13.setText("Month Closing Date");

        cmdClearAll.setText("Clear All");
        cmdClearAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdClearAll.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);

        SummaryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SummaryPanel.setToolTipText("Summary");
        SummaryPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        SummaryPanel.setLayout(null);

        jLabel2.setText("Stock of Finished Goods");
        SummaryPanel.add(jLabel2);
        jLabel2.setBounds(10, 60, 440, 20);

        TableFinishedGoods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableFinishedGoods.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableFinishedGoods.setMinimumSize(new java.awt.Dimension(1, 64));
        TableFinishedGoods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableFinishedGoodsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableFinishedGoods);

        SummaryPanel.add(jScrollPane3);
        jScrollPane3.setBounds(10, 90, 950, 60);

        TableWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableWIP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableWIP.setMinimumSize(new java.awt.Dimension(1, 64));
        TableWIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableWIPMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableWIP);

        SummaryPanel.add(jScrollPane4);
        jScrollPane4.setBounds(10, 200, 950, 60);

        TableCSS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableCSS.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableCSS.setMinimumSize(new java.awt.Dimension(1, 64));
        TableCSS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableCSSMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TableCSS);

        SummaryPanel.add(jScrollPane5);
        jScrollPane5.setBounds(10, 310, 950, 60);

        jLabel7.setText("Converted Stock Status");
        SummaryPanel.add(jLabel7);
        jLabel7.setBounds(10, 280, 440, 20);

        jLabel5.setText("Stock of WIP");
        SummaryPanel.add(jLabel5);
        jLabel5.setBounds(10, 170, 440, 20);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel4.setText("OP - Opening");
        SummaryPanel.add(jLabel4);
        jLabel4.setBounds(10, 390, 140, 17);

        jLabel10.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel10.setText("DL - Despatched/Liquited");
        SummaryPanel.add(jLabel10);
        jLabel10.setBounds(10, 410, 360, 17);

        jLabel14.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel14.setText("AD - Added");
        SummaryPanel.add(jLabel14);
        jLabel14.setBounds(160, 390, 140, 17);

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel3.setText("CN - Converted");
        SummaryPanel.add(jLabel3);
        jLabel3.setBounds(310, 390, 160, 17);

        jLabel9.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel9.setText("LS - Loss");
        SummaryPanel.add(jLabel9);
        jLabel9.setBounds(470, 390, 130, 17);

        jLabel6.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel6.setText("CL - Closing");
        SummaryPanel.add(jLabel6);
        jLabel6.setBounds(600, 390, 170, 17);

        jLabel15.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel15.setText("OB - Obsolescence");
        SummaryPanel.add(jLabel15);
        jLabel15.setBounds(780, 390, 190, 17);

        cmdETEFinished.setText("Export to Excel");
        cmdETEFinished.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdETEFinished.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdETEFinishedActionPerformed(evt);
            }
        });
        SummaryPanel.add(cmdETEFinished);
        cmdETEFinished.setBounds(780, 60, 150, 23);

        cmdETEWIP.setText("Export to Excel");
        cmdETEWIP.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdETEWIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdETEWIPActionPerformed(evt);
            }
        });
        SummaryPanel.add(cmdETEWIP);
        cmdETEWIP.setBounds(780, 170, 150, 23);

        cmdETECSS.setText("Export to Excel");
        cmdETECSS.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdETECSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdETECSSActionPerformed(evt);
            }
        });
        SummaryPanel.add(cmdETECSS);
        cmdETECSS.setBounds(780, 280, 150, 23);

        cmdShow.setText("Show List");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        SummaryPanel.add(cmdShow);
        cmdShow.setBounds(780, 10, 150, 30);

        jTabbedPane1.addTab("Summary", SummaryPanel);

        FinishedGoodsDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        FinishedGoodsDetailPanel.setToolTipText("Finished Goods Detail");
        FinishedGoodsDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        FinishedGoodsDetailPanel.setLayout(null);

        cmdShowFG.setText("Show List");
        cmdShowFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowFGActionPerformed(evt);
            }
        });
        FinishedGoodsDetailPanel.add(cmdShowFG);
        cmdShowFG.setBounds(830, 10, 118, 25);

        TableDetailFG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailFG.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane2.setViewportView(TableDetailFG);

        FinishedGoodsDetailPanel.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 960, 360);
        FinishedGoodsDetailPanel.add(cmbSortFG);
        cmbSortFG.setBounds(700, 10, 120, 24);

        jLabel11.setText("Sort By :");
        FinishedGoodsDetailPanel.add(jLabel11);
        jLabel11.setBounds(630, 10, 60, 20);

        txtTotalSQFG.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTotalSQFG.setEnabled(false);
        FinishedGoodsDetailPanel.add(txtTotalSQFG);
        txtTotalSQFG.setBounds(640, 410, 110, 19);

        jLabel16.setText("Total KG Rcvd");
        FinishedGoodsDetailPanel.add(jLabel16);
        jLabel16.setBounds(760, 410, 100, 20);

        txtRecordFG.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtRecordFG.setEnabled(false);
        FinishedGoodsDetailPanel.add(txtRecordFG);
        txtRecordFG.setBounds(100, 10, 70, 20);

        jLabel25.setText("Total Records");
        FinishedGoodsDetailPanel.add(jLabel25);
        jLabel25.setBounds(10, 10, 90, 20);

        jLabel33.setText("Total Sq. Mtr");
        FinishedGoodsDetailPanel.add(jLabel33);
        jLabel33.setBounds(530, 410, 100, 20);

        txtTotalKGFG.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTotalKGFG.setEnabled(false);
        FinishedGoodsDetailPanel.add(txtTotalKGFG);
        txtTotalKGFG.setBounds(860, 410, 90, 19);

        btnETE_FG.setText("Export to Excel");
        btnETE_FG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETE_FGActionPerformed(evt);
            }
        });
        FinishedGoodsDetailPanel.add(btnETE_FG);
        btnETE_FG.setBounds(20, 410, 180, 25);

        jTabbedPane1.addTab("Finished Goods Detail", FinishedGoodsDetailPanel);

        WIPDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        WIPDetailPanel.setToolTipText("WIP Detail");
        WIPDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        WIPDetailPanel.setLayout(null);

        cmdShowWIP.setText("Show List");
        cmdShowWIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowWIPActionPerformed(evt);
            }
        });
        WIPDetailPanel.add(cmdShowWIP);
        cmdShowWIP.setBounds(830, 10, 118, 25);

        TableDetailWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailFG.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane6.setViewportView(TableDetailWIP);

        WIPDetailPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 40, 960, 360);
        WIPDetailPanel.add(cmbSortWIP);
        cmbSortWIP.setBounds(700, 10, 120, 24);

        jLabel12.setText("Sort By :");
        WIPDetailPanel.add(jLabel12);
        jLabel12.setBounds(630, 10, 60, 20);

        txtTotalSQWIP.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTotalSQWIP.setEnabled(false);
        WIPDetailPanel.add(txtTotalSQWIP);
        txtTotalSQWIP.setBounds(640, 410, 110, 19);

        jLabel17.setText("Total KG Rcvd");
        WIPDetailPanel.add(jLabel17);
        jLabel17.setBounds(760, 410, 100, 20);

        txtRecordWIP.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtRecordWIP.setEnabled(false);
        WIPDetailPanel.add(txtRecordWIP);
        txtRecordWIP.setBounds(100, 10, 70, 20);

        jLabel26.setText("Total Records");
        WIPDetailPanel.add(jLabel26);
        jLabel26.setBounds(10, 10, 90, 20);

        jLabel34.setText("Total Sq. Mtr");
        WIPDetailPanel.add(jLabel34);
        jLabel34.setBounds(530, 410, 100, 20);

        txtTotalKGWIP.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTotalKGWIP.setEnabled(false);
        WIPDetailPanel.add(txtTotalKGWIP);
        txtTotalKGWIP.setBounds(860, 410, 90, 19);

        btnETE_WIP.setText("Export to Excel");
        btnETE_WIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETE_WIPActionPerformed(evt);
            }
        });
        WIPDetailPanel.add(btnETE_WIP);
        btnETE_WIP.setBounds(20, 410, 180, 25);

        jTabbedPane1.addTab("WIP Detail", WIPDetailPanel);

        ConvertedStockDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ConvertedStockDetailPanel.setToolTipText("ConvertedStock Detail");
        ConvertedStockDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ConvertedStockDetailPanel.setLayout(null);

        cmdShowCS.setText("Show List");
        cmdShowCS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowCSActionPerformed(evt);
            }
        });
        ConvertedStockDetailPanel.add(cmdShowCS);
        cmdShowCS.setBounds(830, 10, 118, 25);

        TableDetailCS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailFG.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        jScrollPane7.setViewportView(TableDetailCS);

        ConvertedStockDetailPanel.add(jScrollPane7);
        jScrollPane7.setBounds(10, 40, 960, 360);
        ConvertedStockDetailPanel.add(cmbSortCS);
        cmbSortCS.setBounds(700, 10, 120, 24);

        jLabel18.setText("Sort By :");
        ConvertedStockDetailPanel.add(jLabel18);
        jLabel18.setBounds(630, 10, 60, 20);

        txtTotalSQCS.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTotalSQCS.setEnabled(false);
        ConvertedStockDetailPanel.add(txtTotalSQCS);
        txtTotalSQCS.setBounds(640, 410, 110, 19);

        jLabel19.setText("Total KG Rcvd");
        ConvertedStockDetailPanel.add(jLabel19);
        jLabel19.setBounds(760, 410, 100, 20);

        txtRecordCS.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtRecordCS.setEnabled(false);
        ConvertedStockDetailPanel.add(txtRecordCS);
        txtRecordCS.setBounds(100, 10, 70, 20);

        jLabel27.setText("Total Records");
        ConvertedStockDetailPanel.add(jLabel27);
        jLabel27.setBounds(10, 10, 90, 20);

        jLabel35.setText("Total Sq. Mtr");
        ConvertedStockDetailPanel.add(jLabel35);
        jLabel35.setBounds(530, 410, 100, 20);

        txtTotalKGCS.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTotalKGCS.setEnabled(false);
        ConvertedStockDetailPanel.add(txtTotalKGCS);
        txtTotalKGCS.setBounds(860, 410, 90, 19);

        btnETE_CS.setText("Export to Excel");
        btnETE_CS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETE_CSActionPerformed(evt);
            }
        });
        ConvertedStockDetailPanel.add(btnETE_CS);
        btnETE_CS.setBounds(20, 410, 180, 25);

        jTabbedPane1.addTab("Converted Stock Detail", ConvertedStockDetailPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtMonthLastdate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(620, 620, 620)
                .addComponent(cmdClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMonthLastdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdClearAll))
                .addGap(5, 5, 5)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        txtMonthLastdate.setText("");
    }//GEN-LAST:event_cmdClearAllActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        if (txtMonthLastdate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter date.");
            return;
        } else if (!EITLERPGLOBAL.isDate(txtMonthLastdate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return;
        } else {
            GenerateFinishedGoods();
            GenerateWIP();
            GenerateCSS();
        }
    }//GEN-LAST:event_cmdShowActionPerformed

    private void TableFinishedGoodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableFinishedGoodsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableFinishedGoodsMouseClicked

    private void cmdETEFinishedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdETEFinishedActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableFinishedGoods, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdETEFinishedActionPerformed

    private void TableWIPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableWIPMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableWIPMouseClicked

    private void cmdETEWIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdETEWIPActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableWIP, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdETEWIPActionPerformed

    private void cmdETECSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdETECSSActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableCSS, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdETECSSActionPerformed

    private void TableCSSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableCSSMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCSSMouseClicked

    private void cmdShowFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowFGActionPerformed
        // TODO add your handling code here:
        txtRecordFG.setText("0");
        txtTotalSQFG.setText("0.00");
        txtTotalKGFG.setText("0.00");
        GenerateDetailFGList();
    }//GEN-LAST:event_cmdShowFGActionPerformed

    private void btnETE_FGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETE_FGActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableDetailFG, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETE_FGActionPerformed

    private void cmdShowWIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowWIPActionPerformed
        // TODO add your handling code here:
        txtRecordWIP.setText("0");
        txtTotalSQWIP.setText("0.00");
        txtTotalKGWIP.setText("0.00");
        GenerateDetailWIPList();
    }//GEN-LAST:event_cmdShowWIPActionPerformed

    private void btnETE_WIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETE_WIPActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableDetailWIP, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETE_WIPActionPerformed

    private void cmdShowCSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowCSActionPerformed
        // TODO add your handling code here:
        txtRecordCS.setText("0");
        txtTotalSQCS.setText("0.00");
        txtTotalKGCS.setText("0.00");
        GenerateDetailCSList();
    }//GEN-LAST:event_cmdShowCSActionPerformed

    private void btnETE_CSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETE_CSActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(TableDetailCS, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETE_CSActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ConvertedStockDetailPanel;
    private javax.swing.JPanel FinishedGoodsDetailPanel;
    private javax.swing.JPanel SummaryPanel;
    private javax.swing.JTable TableCSS;
    private javax.swing.JTable TableDetailCS;
    private javax.swing.JTable TableDetailFG;
    private javax.swing.JTable TableDetailWIP;
    private javax.swing.JTable TableFinishedGoods;
    private javax.swing.JTable TableWIP;
    private javax.swing.JPanel WIPDetailPanel;
    private javax.swing.JButton btnETE_CS;
    private javax.swing.JButton btnETE_FG;
    private javax.swing.JButton btnETE_WIP;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbSortCS;
    private javax.swing.JComboBox cmbSortFG;
    private javax.swing.JComboBox cmbSortWIP;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdETECSS;
    private javax.swing.JButton cmdETEFinished;
    private javax.swing.JButton cmdETEWIP;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdShowCS;
    private javax.swing.JButton cmdShowFG;
    private javax.swing.JButton cmdShowWIP;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtMonthLastdate;
    private javax.swing.JTextField txtRecordCS;
    private javax.swing.JTextField txtRecordFG;
    private javax.swing.JTextField txtRecordWIP;
    private javax.swing.JTextField txtTotalKGCS;
    private javax.swing.JTextField txtTotalKGFG;
    private javax.swing.JTextField txtTotalKGWIP;
    private javax.swing.JTextField txtTotalSQCS;
    private javax.swing.JTextField txtTotalSQFG;
    private javax.swing.JTextField txtTotalSQWIP;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {
        ComboData aData = new ComboData();

        cmbSortFGModel = new EITLComboModel();
        cmbSortFG.removeAllItems();
        cmbSortFG.setModel(cmbSortFGModel);

        cmbSortWIPModel = new EITLComboModel();
        cmbSortWIP.removeAllItems();
        cmbSortWIP.setModel(cmbSortWIPModel);

        cmbSortCSModel = new EITLComboModel();
        cmbSortCS.removeAllItems();
        cmbSortCS.setModel(cmbSortCSModel);

        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "CLOSING DATE DESC";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "PARTY CODE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "PARTY NAME";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "INCHARGE NAME";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "GROUPWISE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 6;
        aData.Text = "PRODUCT CODE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 7;
        aData.Text = "PIECE NO";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 8;
        aData.Text = "RECIEPT_DATE";
        cmbSortFGModel.addElement(aData);
        cmbSortWIPModel.addElement(aData);
        cmbSortCSModel.addElement(aData);
    }

    private void FormatGridFinishedGoods() {
        DataModelFinishedGoods = new EITLTableModel();
        TableFinishedGoods.removeAll();
        TableFinishedGoods.setModel(DataModelFinishedGoods);

        //  TableStockSummary.setAutoResizeMode(TableStockSummary.AUTO_RESIZE_OFF);
        DataModelFinishedGoods.addColumn("Sr.");
        DataModelFinishedGoods.addColumn("MONTH");
        DataModelFinishedGoods.addColumn("YEAR");

        DataModelFinishedGoods.addColumn("OPENING DATE");

        DataModelFinishedGoods.addColumn("OP COUNT");
        DataModelFinishedGoods.addColumn("OP KGS");
        DataModelFinishedGoods.addColumn("OP VALUE");

        DataModelFinishedGoods.addColumn("AD COUNT");
        DataModelFinishedGoods.addColumn("AD KGS");
        DataModelFinishedGoods.addColumn("AD VALUE");

        DataModelFinishedGoods.addColumn("CN COUNT");
        DataModelFinishedGoods.addColumn("CN KGS");
        DataModelFinishedGoods.addColumn("CN VALUE");

//        DataModelFinishedGoods.addColumn("LS COUNT");
        DataModelFinishedGoods.addColumn("LS KGS");
        DataModelFinishedGoods.addColumn("LS VALUE");

        DataModelFinishedGoods.addColumn("DL COUNT");
        DataModelFinishedGoods.addColumn("DL KGS");
        DataModelFinishedGoods.addColumn("DL VALUE");

        DataModelFinishedGoods.addColumn("CL COUNT");
        DataModelFinishedGoods.addColumn("CL KGS");
        DataModelFinishedGoods.addColumn("CL VALUE");

        DataModelFinishedGoods.addColumn("CLOSING DATE");

        DataModelFinishedGoods.TableReadOnly(true);
        TableFinishedGoods.getColumnModel().getColumn(0).setMaxWidth(30);
        for (int i = 1; i < 21; i++) {
            TableFinishedGoods.getColumnModel().getColumn(i).setMinWidth(100);
        }

    }

    private void GenerateFinishedGoods() {
        String strPreviousMonthLastDate = "";
        String strMonthFirstDate = "";
        String strMonthLastDate = "";
        String strDate = "";
        String strMonth = "";
        String strYear = "";
        String prdCode = "";
        String strSQL = "";
        try {
            FormatGridFinishedGoods(); //clear existing content of table
            strDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());
            strMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strDate + "') FROM DUAL");
            strMonth = data.getStringValueFromDB("SELECT MONTH('" + strMonthLastDate + "') FROM DUAL");
            strYear = data.getStringValueFromDB("SELECT YEAR('" + strMonthLastDate + "') FROM DUAL");
            strMonthFirstDate = data.getStringValueFromDB("SELECT SUBDATE(ADDDATE('" + strMonthLastDate + "', INTERVAL 1 DAY), INTERVAL 1 MONTH) FROM DUAL");
            strPreviousMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strMonthLastDate + "' - INTERVAL 1 MONTH) FROM DUAL");
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;

            if (!strDate.equals(strMonthLastDate)) {
                JOptionPane.showMessageDialog(null, "Please enter last date of month.");
                return;
            }

            strSQL = "";

            strSQL = "SELECT OP_CNT,COALESCE(OP_KG,0) AS OP_KG,COALESCE(OP_VALUE,0) AS OP_VALUE,AD_CNT,COALESCE(AD_KG,0) AS AD_KG,"
                    + "COALESCE(AD_VALUE,0) AS AD_VALUE,CN_CNT,COALESCE(CN_KG,0) AS CN_KG,COALESCE(CN_VALUE,0) AS CN_VALUE,"
                    + "COALESCE(LS_KG,0) AS LS_KG,COALESCE(LS_VALUE,0) AS LS_VALUE,DL_CNT,COALESCE(DL_KG,0) AS DL_KG,"
                    + "COALESCE(DL_VALUE,0) AS DL_VALUE,CL_CNT,COALESCE(CL_KG,0) AS CL_KG,"
                    + "COALESCE(CL_VALUE,0) AS CL_VALUE "
                    + "FROM  "
                    + "(SELECT COUNT(PIECE_NO) AS OP_CNT, SUM(COALESCE(WIEGHT,0)) AS OP_KG, SUM(FELT_VALUE) AS OP_VALUE "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK ,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE MTH_CLOSING_DATE = '" + strPreviousMonthLastDate + "' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' "
                    + "AND PR_PIECE_NO = PIECE_NO ) AS OPW "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PR_PIECE_NO) AS AD_CNT,SUM(PR_BILL_WEIGHT) AS AD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS AD_VALUE  "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE MONTH(PR_OBSOLETE_DATE)=MONTH('" + strMonthLastDate + "') "
                    + "AND YEAR(PR_OBSOLETE_DATE)=YEAR('" + strMonthLastDate + "') AND COALESCE(PR_DELINK,'')='OBSOLETE' "
                    + "AND COALESCE(PR_PIECE_STAGE,'') IN ('IN STOCK','BSR') "
                    + "AND PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK "
                    + "WHERE MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' AND OBSOLETE_STATUS='OBSOLETE') ) AS AD ON 1=1 "
                    //                    + "LEFT JOIN "
                    //                    + "(SELECT COUNT(PR_PIECE_NO) AS AD_CNT,SUM(PR_BILL_WEIGHT) AS AD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS AD_VALUE "
                    //                    + "FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_STOCK_DETAIL D,PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    //                    + "WHERE PIECE_NO=PR_PIECE_NO AND SELECTED=1 AND MONTH(D.MODIFIED_DATE)=MONTH('" + strMonthLastDate + "') "
                    //                    + "AND YEAR(D.MODIFIED_DATE)=YEAR('" + strMonthLastDate + "') ORDER BY PIECE_AMEND_STOCK_NO DESC ) AS AD ON 1=1 "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PIECE_NO) AS CN_CNT , SUM(COALESCE(CONVERTED_WEIGHT,0)) AS CN_KG, "
                    + "SUM(COALESCE(CONVERTED_VALUE,0)) AS CN_VALUE,COUNT(PIECE_NO) AS LS_CNT , "
                    + "SUM(CASE WHEN COALESCE(LOSS_WEIGHT,0)>0 THEN LOSS_WEIGHT ELSE 0 END) AS LS_KG, "
                    + "SUM(CASE WHEN COALESCE(LOSS_VALUE,0)>0 THEN LOSS_VALUE ELSE 0 END) AS LS_VALUE  "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE') AS CN ON 1=1  "
//                    + "LEFT JOIN "
//                    + "(SELECT COUNT(I.PIECE_NO) AS DL_CNT,SUM(ACTUAL_WEIGHT) AS DL_KG,SUM(INVOICE_AMT) AS DL_VALUE "
//                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK S, PRODUCTION.FELT_SAL_INVOICE_HEADER I "
//                    + "WHERE S.PIECE_NO=I.PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
//                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' ) AS DL ON 1=1 "
                    + "LEFT JOIN "
                    + "(SELECT SUM(DL_CNT) AS DL_CNT,SUM(DL_KG) AS DL_KG,SUM(DL_VALUE) AS DL_VALUE FROM "
                    + "(SELECT COUNT(I.PIECE_NO) AS DL_CNT,SUM(ACTUAL_WEIGHT) AS DL_KG,SUM(INVOICE_AMT) AS DL_VALUE "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK S, PRODUCTION.FELT_SAL_INVOICE_HEADER I "
                    + "WHERE S.PIECE_NO=I.PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' "
                    + "UNION ALL "
                    + "SELECT COUNT(I.PIECE_NO) AS DL_CNT,SUM(ACTUAL_WEIGHT) AS DL_KG,SUM(INVOICE_AMT) AS DL_VALUE "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK S, PRODUCTION.FELT_SAL_INVOICE_HEADER I "
                    + "WHERE S.CONVERTED_PIECE_NO=I.PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' "
                    + ") AS A "
                    + ") AS DL ON 1=1 "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PIECE_NO) AS CL_CNT , SUM(COALESCE(WIEGHT,0)) AS CL_KG, SUM(FELT_VALUE) AS CL_VALUE "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE = '" + strMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' ) AS CL ON 1=1 ";

            System.out.println("strSQL 1 :" + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {

                    cnt++;

                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = strMonth;
                    rowData[2] = strYear;
                    rowData[3] = EITLERPGLOBAL.formatDate(strMonthFirstDate);
                    rowData[4] = rsTmp.getString("OP_CNT");
                    rowData[5] = rsTmp.getString("OP_KG");
                    rowData[6] = rsTmp.getString("OP_VALUE");
                    rowData[7] = rsTmp.getString("AD_CNT");
                    rowData[8] = rsTmp.getString("AD_KG");
                    rowData[9] = rsTmp.getString("AD_VALUE");
                    rowData[10] = rsTmp.getString("CN_CNT");
                    rowData[11] = rsTmp.getString("CN_KG");
                    rowData[12] = rsTmp.getString("CN_VALUE");
                    rowData[13] = rsTmp.getString("LS_KG");
                    rowData[14] = rsTmp.getString("LS_VALUE");
                    rowData[15] = rsTmp.getString("DL_CNT");
                    rowData[16] = rsTmp.getString("DL_KG");
                    rowData[17] = rsTmp.getString("DL_VALUE");
                    rowData[18] = rsTmp.getString("CL_CNT");
                    rowData[19] = rsTmp.getString("CL_KG");
                    rowData[20] = rsTmp.getString("CL_VALUE");
                    rowData[21] = EITLERPGLOBAL.formatDate(strMonthLastDate);

                    DataModelFinishedGoods.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridWIP() {
        DataModelWIP = new EITLTableModel();
        TableWIP.removeAll();
        TableWIP.setModel(DataModelWIP);

        //  TableStockSummary.setAutoResizeMode(TableStockSummary.AUTO_RESIZE_OFF);
        DataModelWIP.addColumn("Sr.");
        DataModelWIP.addColumn("MONTH");
        DataModelWIP.addColumn("YEAR");

        DataModelWIP.addColumn("OPENING DATE");

        DataModelWIP.addColumn("OP COUNT");
        DataModelWIP.addColumn("OP KGS");
        DataModelWIP.addColumn("OP VALUE");

        DataModelWIP.addColumn("AD COUNT");
        DataModelWIP.addColumn("AD KGS");
        DataModelWIP.addColumn("AD VALUE");

        DataModelWIP.addColumn("CN COUNT");
        DataModelWIP.addColumn("CN KGS");
        DataModelWIP.addColumn("CN VALUE");

//        DataModelWIP.addColumn("LS COUNT");
        DataModelWIP.addColumn("LS KGS");
        DataModelWIP.addColumn("LS VALUE");

        DataModelWIP.addColumn("CL COUNT");
        DataModelWIP.addColumn("CL KGS");
        DataModelWIP.addColumn("CL VALUE");

        DataModelWIP.addColumn("CLOSING DATE");

        DataModelWIP.TableReadOnly(true);
        TableWIP.getColumnModel().getColumn(0).setMaxWidth(30);
        for (int i = 1; i < 18; i++) {
            TableWIP.getColumnModel().getColumn(i).setMinWidth(100);
        }

    }

    private void GenerateWIP() {
        String strPreviousMonthLastDate = "";
        String strMonthFirstDate = "";
        String strMonthLastDate = "";
        String strDate = "";
        String strMonth = "";
        String strYear = "";
        String prdCode = "";
        String strSQL = "";
        try {
            FormatGridWIP(); //clear existing content of table
            strDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());
            strMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strDate + "') FROM DUAL");
            strMonth = data.getStringValueFromDB("SELECT MONTH('" + strMonthLastDate + "') FROM DUAL");
            strYear = data.getStringValueFromDB("SELECT YEAR('" + strMonthLastDate + "') FROM DUAL");
            strMonthFirstDate = data.getStringValueFromDB("SELECT SUBDATE(ADDDATE('" + strMonthLastDate + "', INTERVAL 1 DAY), INTERVAL 1 MONTH) FROM DUAL");
            strPreviousMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strMonthLastDate + "' - INTERVAL 1 MONTH) FROM DUAL");
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;

            if (!strDate.equals(strMonthLastDate)) {
                JOptionPane.showMessageDialog(null, "Please enter last date of month.");
                return;
            }

            strSQL = "";

            strSQL = "SELECT OP_CNT,COALESCE(OP_KG,0) AS OP_KG,COALESCE(OP_VALUE,0) AS OP_VALUE,AD_CNT,COALESCE(AD_KG,0) AS AD_KG,"
                    + "COALESCE(AD_VALUE,0) AS AD_VALUE,CN_CNT,COALESCE(CN_KG,0) AS CN_KG,COALESCE(CN_VALUE,0) AS CN_VALUE,"
                    + "COALESCE(LS_KG,0) AS LS_KG,COALESCE(LS_VALUE,0) AS LS_VALUE,CL_CNT,COALESCE(CL_KG,0) AS CL_KG,COALESCE(CL_VALUE,0) AS CL_VALUE "
                    + "FROM  "
                    + "(SELECT COUNT(PIECE_NO) AS OP_CNT, SUM(COALESCE(WIEGHT,0)) AS OP_KG, SUM(FELT_VALUE) AS OP_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK ,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE MTH_CLOSING_DATE = '" + strPreviousMonthLastDate + "' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' "
                    + "AND PR_PIECE_NO = PIECE_NO ) AS OPW "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PR_PIECE_NO) AS AD_CNT,SUM(PR_BILL_WEIGHT) AS AD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS AD_VALUE  "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE MONTH(PR_OBSOLETE_DATE)=MONTH('" + strMonthLastDate + "') "
                    + "AND YEAR(PR_OBSOLETE_DATE)=YEAR('" + strMonthLastDate + "') AND COALESCE(PR_DELINK,'')='OBSOLETE' "
                    + "AND COALESCE(PR_PIECE_STAGE,'') IN ('NEEDLING','MENDING','SEAMING','FINISHING','WEAVING','PLANNING','BOOKING','GIDC','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') "
                    + "AND PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK "
                    + "WHERE MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' AND OBSOLETE_STATUS='OBSOLETE') "
                    + ") AS AD ON 1=1 "
//                    + "LEFT JOIN "
//                    + "(SELECT COUNT(PR_PIECE_NO) AS AD_CNT,SUM(PR_BILL_WEIGHT) AS AD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS AD_VALUE "
//                    + "FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_DETAIL D,PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + "WHERE PIECE_NO=PR_PIECE_NO AND SELECTED=1 AND MONTH(D.MODIFIED_DATE)=MONTH('" + strMonthLastDate + "') "
//                    + "AND YEAR(D.MODIFIED_DATE)=YEAR('" + strMonthLastDate + "') ORDER BY PIECE_AMEND_NO DESC ) AS AD ON 1=1 "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PIECE_NO) AS CN_CNT , SUM(COALESCE(CONVERTED_WEIGHT,0)) AS CN_KG, "
                    + "SUM(COALESCE(CONVERTED_VALUE,0)) AS CN_VALUE,COUNT(PIECE_NO) AS LS_CNT , "
                    + "SUM(CASE WHEN COALESCE(LOSS_WEIGHT,0)>0 THEN LOSS_WEIGHT ELSE 0 END) AS LS_KG, "
                    + "SUM(CASE WHEN COALESCE(LOSS_VALUE,0)>0 THEN LOSS_VALUE ELSE 0 END) AS LS_VALUE  "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK WHERE MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE') AS CN ON 1=1  "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PIECE_NO) AS CL_CNT , SUM(COALESCE(WIEGHT,0)) AS CL_KG, SUM(FELT_VALUE) AS CL_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK WHERE MTH_CLOSING_DATE = '" + strMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' ) AS CL ON 1=1 ";

            System.out.println("strSQL 2 :" + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {

                    cnt++;

                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = strMonth;
                    rowData[2] = strYear;
                    rowData[3] = EITLERPGLOBAL.formatDate(strMonthFirstDate);
                    rowData[4] = rsTmp.getString("OP_CNT");
                    rowData[5] = rsTmp.getString("OP_KG");
                    rowData[6] = rsTmp.getString("OP_VALUE");
                    rowData[7] = rsTmp.getString("AD_CNT");
                    rowData[8] = rsTmp.getString("AD_KG");
                    rowData[9] = rsTmp.getString("AD_VALUE");
                    rowData[10] = rsTmp.getString("CN_CNT");
                    rowData[11] = rsTmp.getString("CN_KG");
                    rowData[12] = rsTmp.getString("CN_VALUE");
                    rowData[13] = rsTmp.getString("LS_KG");
                    rowData[14] = rsTmp.getString("LS_VALUE");
                    rowData[15] = rsTmp.getString("CL_CNT");
                    rowData[16] = rsTmp.getString("CL_KG");
                    rowData[17] = rsTmp.getString("CL_VALUE");
                    rowData[18] = EITLERPGLOBAL.formatDate(strMonthLastDate);

                    DataModelWIP.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCSS() {
        DataModelCSS = new EITLTableModel();
        TableCSS.removeAll();
        TableCSS.setModel(DataModelCSS);

        //  TableStockSummary.setAutoResizeMode(TableStockSummary.AUTO_RESIZE_OFF);
        DataModelCSS.addColumn("Sr.");
        DataModelCSS.addColumn("MONTH");
        DataModelCSS.addColumn("YEAR");

        DataModelCSS.addColumn("OPENING DATE");

        DataModelCSS.addColumn("OP COUNT");
        DataModelCSS.addColumn("OP KGS");
        DataModelCSS.addColumn("OP VALUE");

        DataModelCSS.addColumn("AD COUNT");
        DataModelCSS.addColumn("AD KGS");
        DataModelCSS.addColumn("AD VALUE");

        DataModelCSS.addColumn("DL COUNT");
        DataModelCSS.addColumn("DL KGS");
        DataModelCSS.addColumn("DL VALUE");

        DataModelCSS.addColumn("OB COUNT");
        DataModelCSS.addColumn("OB KGS");
        DataModelCSS.addColumn("OB VALUE");

        DataModelCSS.addColumn("CL COUNT");
        DataModelCSS.addColumn("CL KGS");
        DataModelCSS.addColumn("CL VALUE");

        DataModelCSS.addColumn("CLOSING DATE");

        DataModelCSS.TableReadOnly(true);
        TableCSS.getColumnModel().getColumn(0).setMaxWidth(30);
        for (int i = 1; i < 19; i++) {
            TableCSS.getColumnModel().getColumn(i).setMinWidth(100);
        }

    }
    
    private void GenerateCSS() {
        String strPreviousMonthLastDate = "";
        String strMonthFirstDate = "";
        String strMonthLastDate = "";
        String strCurtMonthLastDate = "";
        String strDate = "";
        String strMonth = "";
        String strYear = "";
        String prdCode = "";
        String strSQL = "";
        try {
            FormatGridCSS(); //clear existing content of table
            strDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());
            strMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strDate + "') FROM DUAL");
            strMonth = data.getStringValueFromDB("SELECT MONTH('" + strMonthLastDate + "') FROM DUAL");
            strYear = data.getStringValueFromDB("SELECT YEAR('" + strMonthLastDate + "') FROM DUAL");
            strMonthFirstDate = data.getStringValueFromDB("SELECT SUBDATE(ADDDATE('" + strMonthLastDate + "', INTERVAL 1 DAY), INTERVAL 1 MONTH) FROM DUAL");
            strPreviousMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strMonthLastDate + "' - INTERVAL 1 MONTH) FROM DUAL");
            strCurtMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY(ADDDATE('" + strMonthLastDate + "', INTERVAL 1 DAY)) FROM DUAL");
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;

            if (!strDate.equals(strMonthLastDate)) {
                JOptionPane.showMessageDialog(null, "Please enter last date of month.");
                return;
            }

            strSQL = "";

//            strSQL = "SELECT OP_CNT,COALESCE(OP_KG,0) AS OP_KG,COALESCE(OP_VALUE,0) AS OP_VALUE,AD_CNT,COALESCE(AD_KG,0) AS AD_KG,"
//                    + "COALESCE(AD_VALUE,0) AS AD_VALUE,DL_CNT,COALESCE(DL_KG,0) AS DL_KG,COALESCE(DL_VALUE,0) AS DL_VALUE,"
//                    + "OB_CNT,COALESCE(OB_KG,0) AS OB_KG,COALESCE(OB_VALUE,0) AS OB_VALUE,CL_CNT,COALESCE(CL_KG,0) AS CL_KG,COALESCE(CL_VALUE,0) AS CL_VALUE "
//                    + "FROM  "
//                    + "(SELECT COUNT(PIECE_NO) AS OP_CNT , SUM(COALESCE(CONVERTED_WEIGHT,0)) AS OP_KG, SUM(COALESCE(CONVERTED_VALUE,0)) AS OP_VALUE "
//                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
//                    + "AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE') AS OPW "
//                    + "LEFT JOIN "
//                    + "(SELECT COUNT(PR_PIECE_NO) AS AD_CNT,SUM(PR_BILL_WEIGHT) AS AD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS AD_VALUE "
//                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + "WHERE PR_PIECE_NO IN (SELECT CONCAT(TRIM(PR_PIECE_NO),'V') FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + "WHERE COALESCE(PR_PIECE_STAGE,'')='DIVERTED' AND MONTH(PR_DIVERTED_DATE)=MONTH('" + strCurtMonthLastDate + "') "
//                    + "AND YEAR(PR_DIVERTED_DATE)=YEAR('" + strCurtMonthLastDate + "') AND COALESCE(PR_DELINK,'')='OBSOLETE') "
////                    + "AND COALESCE(PR_DELINK,'')='OBSOLETE' "
//                    + ") AS AD ON 1=1 "
//                    + "LEFT JOIN "
//                    + "(SELECT COUNT(I.PIECE_NO) AS DL_CNT,SUM(ACTUAL_WEIGHT) AS DL_KG,SUM(INVOICE_AMT) AS DL_VALUE "
//                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK S, PRODUCTION.FELT_SAL_INVOICE_HEADER I "
//                    + "WHERE S.CONVERTED_PIECE_NO=I.PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
//                    + "AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE') AS DL ON 1=1  "
//                    + "LEFT JOIN "
//                    + "(SELECT COUNT(PR_PIECE_NO) AS OB_CNT,SUM(PR_BILL_WEIGHT) AS OB_KG,SUM(PR_FELT_VALUE_WITH_GST) AS OB_VALUE "
//                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK S, PRODUCTION.FELT_SALES_PIECE_REGISTER I "
//                    + "WHERE S.CONVERTED_PIECE_NO=I.PR_PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
//                    + "AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' "
//                    + "AND COALESCE(PR_PIECE_STAGE,'') IN ('CANCELED')) AS OB ON 1=1  "
//                    + "LEFT JOIN "
//                    + "(SELECT COUNT(PIECE_NO) AS CL_CNT , SUM(COALESCE(WIEGHT,0)) AS CL_KG, SUM(FELT_VALUE) AS CL_VALUE "
//                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE = '" + strMonthLastDate + "' "
//                    + "AND COALESCE(NEW_PIECE_STAGE,'')='DIVERTED' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' ) AS CL ON 1=1 ";

            strSQL = "SELECT OP_CNT,COALESCE(OP_KG,0) AS OP_KG,COALESCE(OP_VALUE,0) AS OP_VALUE,AD_CNT,COALESCE(AD_KG,0) AS AD_KG,"
                    + "COALESCE(AD_VALUE,0) AS AD_VALUE,DL_CNT,COALESCE(DL_KG,0) AS DL_KG,COALESCE(DL_VALUE,0) AS DL_VALUE,"
                    + "OB_CNT,COALESCE(OB_KG,0) AS OB_KG,COALESCE(OB_VALUE,0) AS OB_VALUE,CL_CNT,COALESCE(CL_KG,0) AS CL_KG,COALESCE(CL_VALUE,0) AS CL_VALUE "
                    + "FROM  "
                    + "(SELECT COUNT(PIECE_NO) AS OP_CNT , SUM(COALESCE(WIEGHT,0)) AS OP_KG, SUM(COALESCE(FELT_VALUE,0)) AS OP_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK, PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "WHERE PIECE_NO=PR_PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' AND PR_PIECE_STAGE IN ('IN STOCK','BSR') "
                    + ") AS OPW "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PIECE_NO) AS AD_CNT , SUM(COALESCE(WIEGHT,0)) AS AD_KG, SUM(COALESCE(FELT_VALUE,0)) AS AD_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK WHERE MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' AND FNSG_DATE!='0000-00-00' "
                    + ") AS AD ON 1=1 "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(I.PIECE_NO) AS DL_CNT,SUM(ACTUAL_WEIGHT) AS DL_KG,SUM(INVOICE_AMT) AS DL_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK S, PRODUCTION.FELT_SAL_INVOICE_HEADER I "
                    + "WHERE S.PIECE_NO=I.PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE') AS DL ON 1=1  "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PR_PIECE_NO) AS OB_CNT,SUM(PR_BILL_WEIGHT) AS OB_KG,SUM(PR_FELT_VALUE_WITH_GST) AS OB_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK, PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "WHERE PIECE_NO=PR_PIECE_NO AND MTH_CLOSING_DATE='" + strPreviousMonthLastDate + "' "
                    + "AND PR_PIECE_STAGE IN ('CANCELED','JOINED') AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' "
                    + ") AS OB ON 1=1  "
                    + "LEFT JOIN "
                    + "(SELECT COUNT(PIECE_NO) AS CL_CNT , SUM(COALESCE(WIEGHT,0)) AS CL_KG, SUM(FELT_VALUE) AS CL_VALUE "
                    + "FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK WHERE MTH_CLOSING_DATE = '" + strMonthLastDate + "' "
                    + "AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' AND FNSG_DATE!='0000-00-00' "
                    + ") AS CL ON 1=1 ";

            System.out.println("strSQL 3 :" + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {

                    cnt++;

                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = strMonth;
                    rowData[2] = strYear;
                    rowData[3] = EITLERPGLOBAL.formatDate(strMonthFirstDate);
                    rowData[4] = rsTmp.getString("OP_CNT");
                    rowData[5] = rsTmp.getString("OP_KG");
                    rowData[6] = rsTmp.getString("OP_VALUE");
                    rowData[7] = rsTmp.getString("AD_CNT");
                    rowData[8] = rsTmp.getString("AD_KG");
                    rowData[9] = rsTmp.getString("AD_VALUE");
                    rowData[10] = rsTmp.getString("DL_CNT");
                    rowData[11] = rsTmp.getString("DL_KG");
                    rowData[12] = rsTmp.getString("DL_VALUE");
                    rowData[13] = rsTmp.getString("OB_CNT");
                    rowData[14] = rsTmp.getString("OB_KG");
                    rowData[15] = rsTmp.getString("OB_VALUE");
                    rowData[16] = rsTmp.getString("CL_CNT");
                    rowData[17] = rsTmp.getString("CL_KG");
                    rowData[18] = rsTmp.getString("CL_VALUE");
                    rowData[19] = EITLERPGLOBAL.formatDate(strMonthLastDate);

                    DataModelCSS.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDetailFG() {
        DataModelDetailFG = new EITLTableModel();
        TableDetailFG.removeAll();
        TableDetailFG.setModel(DataModelDetailFG);

        TableDetailFG.setAutoResizeMode(TableDetailFG.AUTO_RESIZE_OFF);
        DataModelDetailFG.addColumn("SR.");
        DataModelDetailFG.addColumn("CLOSING DATE");
        DataModelDetailFG.addColumn("PRODUCT CODE");
        DataModelDetailFG.addColumn("GROUP");
        DataModelDetailFG.addColumn("PIECE NO");
        DataModelDetailFG.addColumn("RECIEPT DATE");
        DataModelDetailFG.addColumn("LENGTH");
        DataModelDetailFG.addColumn("WIDTH");
        DataModelDetailFG.addColumn("GSM");
        DataModelDetailFG.addColumn("SQMTR");
        DataModelDetailFG.addColumn("WEIGHT");
        DataModelDetailFG.addColumn("STAGE");
        DataModelDetailFG.addColumn("PARTY CODE");
        DataModelDetailFG.addColumn("PARTY NAME");
        DataModelDetailFG.addColumn("UPN");
        DataModelDetailFG.addColumn("INCHARGE NAME");
        DataModelDetailFG.addColumn("FELT_VALUE");
        DataModelDetailFG.addColumn("OC MONTH");
        DataModelDetailFG.addColumn("CURRENT SALES MONTH");
        DataModelDetailFG.addColumn("OBSOLETE STATUS");
        DataModelDetailFG.addColumn("OBSOLETE DATE");
        DataModelDetailFG.addColumn("OBSOLETE REMARK");

        DataModelDetailFG.TableReadOnly(true);
        TableDetailFG.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDetailFGList() {
        String strMonthLastDate = "";
        try {
            FormatGridDetailFG();  //clear existing content of table
            strMonthLastDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());

            ResultSet rsTmp;

            String strSQL = "";

            strSQL += "SELECT * FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE >='2018-03-31' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' ";
            if (!txtMonthLastdate.getText().equals("")) {
                strSQL += " AND MTH_CLOSING_DATE = '" + strMonthLastDate + "' ";
            }

            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortFG);

            if (Orderby == 1) {
                strSQL += " ORDER BY MTH_CLOSING_DATE DESC";
            }

            if (Orderby == 2) {
                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 3) {
                strSQL += " ORDER BY PARTY_NAME";
            }

            if (Orderby == 4) {
                strSQL += " ORDER BY INCHARGE_NAME  ";
            }

            if (Orderby == 5) {
                strSQL += " ORDER BY PRODUCT_GROUP ";
            }
            if (Orderby == 6) {
                strSQL += " ORDER BY PRODUCT_CODE ";
            }
            if (Orderby == 7) {
                strSQL += " ORDER BY PIECE_NO ";
            }
            if (Orderby == 8) {
                strSQL += " ORDER BY FNSG_DATE,PIECE_NO ";
            }

//            System.out.println("FG Detail :- " + strSQL);
            rsTmp = data.getResult(strSQL);
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double tSQM = 0.00;
                //float sum = 0;
                double tKG = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtRecordFG.setText(Integer.toString(cnt));

                    tSQM += Double.parseDouble(rsTmp.getString("SQMTR"));
                    tKG += Double.parseDouble(rsTmp.getString("WIEGHT"));

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalSQFG.setText(df.format(tSQM));
                    txtTotalKGFG.setText(df.format(tKG));

                    Object[] rowData = new Object[25];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = EITLERPGLOBAL.formatDate(rsTmp.getString("MTH_CLOSING_DATE"));
                    rowData[2] = rsTmp.getString("PRODUCT_CODE");
                    rowData[3] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[4] = rsTmp.getString("PIECE_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("FNSG_DATE"));
                    rowData[6] = rsTmp.getString("LENGTH");
                    rowData[7] = rsTmp.getString("WIDTH");
                    rowData[8] = rsTmp.getString("GSM");
                    rowData[9] = rsTmp.getString("SQMTR");
                    rowData[10] = rsTmp.getString("WIEGHT");
                    rowData[11] = rsTmp.getString("PIECE_STAGE");
                    rowData[12] = rsTmp.getString("PARTY_CODE");
                    rowData[13] = rsTmp.getString("PARTY_NAME");
                    rowData[14] = rsTmp.getString("UPN");
                    rowData[15] = rsTmp.getString("INCHARGE_NAME");
                    rowData[16] = rsTmp.getString("FELT_VALUE");
                    rowData[17] = rsTmp.getString("OC_MONTH");
                    rowData[18] = rsTmp.getString("CURR_SALES_MONTH");
                    rowData[19] = rsTmp.getString("OBSOLETE_STATUS");
                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("OBSOLETE_DATE"));
                    rowData[21] = rsTmp.getString("OBSOLETE_REMARK");

                    DataModelDetailFG.addRow(rowData);
                    rsTmp.next();
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDetailWIP() {
        DataModelDetailWIP = new EITLTableModel();
        TableDetailWIP.removeAll();
        TableDetailWIP.setModel(DataModelDetailWIP);

        TableDetailWIP.setAutoResizeMode(TableDetailWIP.AUTO_RESIZE_OFF);
        DataModelDetailWIP.addColumn("SR.");
        DataModelDetailWIP.addColumn("CLOSING DATE");
        DataModelDetailWIP.addColumn("PRODUCT CODE");
        DataModelDetailWIP.addColumn("GROUP");
        DataModelDetailWIP.addColumn("PIECE NO");
        DataModelDetailWIP.addColumn("RECIEPT DATE");
        DataModelDetailWIP.addColumn("LENGTH");
        DataModelDetailWIP.addColumn("WIDTH");
        DataModelDetailWIP.addColumn("GSM");
        DataModelDetailWIP.addColumn("SQMTR");
        DataModelDetailWIP.addColumn("WEIGHT");
        DataModelDetailWIP.addColumn("STAGE");
        DataModelDetailWIP.addColumn("PARTY CODE");
        DataModelDetailWIP.addColumn("PARTY NAME");
        DataModelDetailWIP.addColumn("UPN");
        DataModelDetailWIP.addColumn("INCHARGE NAME");
        DataModelDetailWIP.addColumn("FELT_VALUE");
        DataModelDetailWIP.addColumn("OC MONTH");
        DataModelDetailWIP.addColumn("CURRENT SALES MONTH");
        DataModelDetailWIP.addColumn("OBSOLETE STATUS");
        DataModelDetailWIP.addColumn("OBSOLETE DATE");
        DataModelDetailWIP.addColumn("OBSOLETE REMARK");

        DataModelDetailWIP.TableReadOnly(true);
        TableDetailWIP.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDetailWIPList() {
        String strMonthLastDate = "";
        try {
            FormatGridDetailWIP();  //clear existing content of table
            strMonthLastDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());

            ResultSet rsTmp;

            String strSQL = "";

            strSQL += "SELECT * FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK WHERE MTH_CLOSING_DATE >='2018-03-31' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' ";
            if (!txtMonthLastdate.getText().equals("")) {
                strSQL += " AND MTH_CLOSING_DATE = '" + strMonthLastDate + "' ";
            }

            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortWIP);

            if (Orderby == 1) {
                strSQL += " ORDER BY MTH_CLOSING_DATE DESC";
            }

            if (Orderby == 2) {
                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 3) {
                strSQL += " ORDER BY PARTY_NAME";
            }

            if (Orderby == 4) {
                strSQL += " ORDER BY INCHARGE_NAME  ";
            }

            if (Orderby == 5) {
                strSQL += " ORDER BY PRODUCT_GROUP ";
            }
            if (Orderby == 6) {
                strSQL += " ORDER BY PRODUCT_CODE ";
            }
            if (Orderby == 7) {
                strSQL += " ORDER BY PIECE_NO ";
            }
            if (Orderby == 8) {
                strSQL += " ORDER BY FNSG_DATE,PIECE_NO ";
            }

//            System.out.println("WIP Detail :- " + strSQL);
            rsTmp = data.getResult(strSQL);
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double tSQM = 0.00;
                //float sum = 0;
                double tKG = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtRecordWIP.setText(Integer.toString(cnt));

                    tSQM += Double.parseDouble(rsTmp.getString("SQMTR"));
                    tKG += Double.parseDouble(rsTmp.getString("WIEGHT"));

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalSQWIP.setText(df.format(tSQM));
                    txtTotalKGWIP.setText(df.format(tKG));

                    Object[] rowData = new Object[25];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = EITLERPGLOBAL.formatDate(rsTmp.getString("MTH_CLOSING_DATE"));
                    rowData[2] = rsTmp.getString("PRODUCT_CODE");
                    rowData[3] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[4] = rsTmp.getString("PIECE_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("FNSG_DATE"));
                    rowData[6] = rsTmp.getString("LENGTH");
                    rowData[7] = rsTmp.getString("WIDTH");
                    rowData[8] = rsTmp.getString("GSM");
                    rowData[9] = rsTmp.getString("SQMTR");
                    rowData[10] = rsTmp.getString("WIEGHT");
                    rowData[11] = rsTmp.getString("PIECE_STAGE");
                    rowData[12] = rsTmp.getString("PARTY_CODE");
                    rowData[13] = rsTmp.getString("PARTY_NAME");
                    rowData[14] = rsTmp.getString("UPN");
                    rowData[15] = rsTmp.getString("INCHARGE_NAME");
                    rowData[16] = rsTmp.getString("FELT_VALUE");
                    rowData[17] = rsTmp.getString("OC_MONTH");
                    rowData[18] = rsTmp.getString("CURR_SALES_MONTH");
                    rowData[19] = rsTmp.getString("OBSOLETE_STATUS");
                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("OBSOLETE_DATE"));
                    rowData[21] = rsTmp.getString("OBSOLETE_REMARK");

                    DataModelDetailWIP.addRow(rowData);
                    rsTmp.next();
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDetailCS() {
        DataModelDetailCS = new EITLTableModel();
        TableDetailCS.removeAll();
        TableDetailCS.setModel(DataModelDetailCS);

        TableDetailCS.setAutoResizeMode(TableDetailCS.AUTO_RESIZE_OFF);
        DataModelDetailCS.addColumn("SR.");
        DataModelDetailCS.addColumn("CLOSING DATE");
        DataModelDetailCS.addColumn("PRODUCT CODE");
        DataModelDetailCS.addColumn("GROUP");
        DataModelDetailCS.addColumn("PIECE NO");
        DataModelDetailCS.addColumn("RECIEPT DATE");
        DataModelDetailCS.addColumn("LENGTH");
        DataModelDetailCS.addColumn("WIDTH");
        DataModelDetailCS.addColumn("GSM");
        DataModelDetailCS.addColumn("SQMTR");
        DataModelDetailCS.addColumn("WEIGHT");
        DataModelDetailCS.addColumn("STAGE");
        DataModelDetailCS.addColumn("PARTY CODE");
        DataModelDetailCS.addColumn("PARTY NAME");
        DataModelDetailCS.addColumn("UPN");
        DataModelDetailCS.addColumn("INCHARGE NAME");
        DataModelDetailCS.addColumn("FELT_VALUE");
        DataModelDetailCS.addColumn("OC MONTH");
        DataModelDetailCS.addColumn("CURRENT SALES MONTH");
        DataModelDetailCS.addColumn("OBSOLETE STATUS");
        DataModelDetailCS.addColumn("OBSOLETE DATE");
        DataModelDetailCS.addColumn("OBSOLETE REMARK");

        DataModelDetailCS.TableReadOnly(true);
        TableDetailCS.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDetailCSList() {
        String strMonthLastDate = "";
        try {
            FormatGridDetailCS();  //clear existing content of table
            strMonthLastDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());

            ResultSet rsTmp;

            String strSQL = "";

            strSQL += "SELECT * FROM PRODUCTION.TMP_WH_MTH_CLOSING_WIP_PIECE_STOCK WHERE MTH_CLOSING_DATE >='2018-03-31' AND COALESCE(OBSOLETE_STATUS,'')='OBSOLETE' AND FNSG_DATE!='0000-00-00' ";
            if (!txtMonthLastdate.getText().equals("")) {
                strSQL += " AND MTH_CLOSING_DATE = '" + strMonthLastDate + "' ";
            }

            int Orderby = EITLERPGLOBAL.getComboCode(cmbSortCS);

            if (Orderby == 1) {
                strSQL += " ORDER BY MTH_CLOSING_DATE DESC";
            }

            if (Orderby == 2) {
                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 3) {
                strSQL += " ORDER BY PARTY_NAME";
            }

            if (Orderby == 4) {
                strSQL += " ORDER BY INCHARGE_NAME  ";
            }

            if (Orderby == 5) {
                strSQL += " ORDER BY PRODUCT_GROUP ";
            }
            if (Orderby == 6) {
                strSQL += " ORDER BY PRODUCT_CODE ";
            }
            if (Orderby == 7) {
                strSQL += " ORDER BY PIECE_NO ";
            }
            if (Orderby == 8) {
                strSQL += " ORDER BY FNSG_DATE,PIECE_NO ";
            }

//            System.out.println("FG Detail :- " + strSQL);
            rsTmp = data.getResult(strSQL);
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double tSQM = 0.00;
                //float sum = 0;
                double tKG = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtRecordCS.setText(Integer.toString(cnt));

                    tSQM += Double.parseDouble(rsTmp.getString("SQMTR"));
                    tKG += Double.parseDouble(rsTmp.getString("WIEGHT"));

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalSQCS.setText(df.format(tSQM));
                    txtTotalKGCS.setText(df.format(tKG));

                    Object[] rowData = new Object[25];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = EITLERPGLOBAL.formatDate(rsTmp.getString("MTH_CLOSING_DATE"));
                    rowData[2] = rsTmp.getString("PRODUCT_CODE");
                    rowData[3] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[4] = rsTmp.getString("PIECE_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("FNSG_DATE"));
                    rowData[6] = rsTmp.getString("LENGTH");
                    rowData[7] = rsTmp.getString("WIDTH");
                    rowData[8] = rsTmp.getString("GSM");
                    rowData[9] = rsTmp.getString("SQMTR");
                    rowData[10] = rsTmp.getString("WIEGHT");
                    rowData[11] = rsTmp.getString("PIECE_STAGE");
                    rowData[12] = rsTmp.getString("PARTY_CODE");
                    rowData[13] = rsTmp.getString("PARTY_NAME");
                    rowData[14] = rsTmp.getString("UPN");
                    rowData[15] = rsTmp.getString("INCHARGE_NAME");
                    rowData[16] = rsTmp.getString("FELT_VALUE");
                    rowData[17] = rsTmp.getString("OC_MONTH");
                    rowData[18] = rsTmp.getString("CURR_SALES_MONTH");
                    rowData[19] = rsTmp.getString("OBSOLETE_STATUS");
                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("OBSOLETE_DATE"));
                    rowData[21] = rsTmp.getString("OBSOLETE_REMARK");

                    DataModelDetailCS.addRow(rowData);
                    rsTmp.next();
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
}
