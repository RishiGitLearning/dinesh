/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package EITLERP.FeltSales.PieceRegister;

import EITLERP.*;
import EITLERP.FeltSales.FeltPieceMaster.FrmPieceMasterDetail;
import EITLERP.FeltSales.GroupMasterAmend.clsFeltGroupMasterAmend;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.FeltSales.common.clsOrderValueCalc;
import EITLERP.FeltSales.common.SelectSortFields;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsVoucher;
import EITLERP.Production.FeltCreditNote.clsExcelExporter;
import EITLERP.Sales.clsSalesInvoice;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class frmPieceMaster extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelContacts = new EITLTableModel();
    private EITLTableModel DataModelTarget = new EITLTableModel();
    private EITLTableModel DataModelProductionProcess = new EITLTableModel();
    private EITLTableModel DataModelAgeing = new EITLTableModel();
    private EITLTableModel DataModelSalesY = new EITLTableModel();
    private EITLTableModel DataModelSalesM = new EITLTableModel();
    private EITLTableModel DataModelMISAgeing = new EITLTableModel();
    private EITLTableModel DataModelMISAgeing1 = new EITLTableModel();
    private EITLTableModel DataModelMachine = new EITLTableModel();
    private EITLTableModel DataModelDiscount = new EITLTableModel();
    private EITLTableModel DataModelSalesParty = new EITLTableModel();
    private EITLTableModel DataModelPieceStage = new EITLTableModel();
    private EITLTableModel DataModelOrderConfirmation = new EITLTableModel();
    private EITLTableModel DataModelPieceMFGRejection = new EITLTableModel();
    private EITLTableModel DataModelAgreedDate = new EITLTableModel();
    private EITLTableModel DataModelOrder = new EITLTableModel();
    private EITLTableModel DataModelInvoiceParameterModification = new EITLTableModel();
    private EITLTableModel DataModelInvoiced = new EITLTableModel();
    private EITLTableModel DataModelBSR = new EITLTableModel();
    private EITLTableModel DataModelEXP_Invoice = new EITLTableModel();
    private EITLTableModel DataModelCancelledPiece = new EITLTableModel();
    private EITLTableModel DataModelDivList = new EITLTableModel();
    private EITLTableModel DataModelPendingList = new EITLTableModel();
    private EITLTableModel DataModelCobolERP = new EITLTableModel();
    private EITLTableModel DataModelDelink = new EITLTableModel();
    private EITLTableModel DataModelOrderRegister = new EITLTableModel();
    private EITLTableModel DataModelPR = new EITLTableModel();
    private EITLComboModel cmbPRModel = new EITLComboModel();
    private EITLTableModel DataModel_WIPReview = new EITLTableModel();
    private EITLTableModel DataModelGR = new EITLTableModel();
    private EITLTableModel DataModelDiverted = new EITLTableModel();
    private EITLComboModel cmbGRModel = new EITLComboModel();
    private EITLComboModel cmbOC = new EITLComboModel();
    private EITLComboModel cmbReqCP = new EITLComboModel();
    private EITLComboModel cmbOCCP = new EITLComboModel();
    private EITLTableModel DataModelPAN = new EITLTableModel();
    private EITLTableModel DataModelPStatus = new EITLTableModel();

    private EITLComboModel cmbStage = new EITLComboModel();

    private EITLTableModel DataModelFnsdvsInv = new EITLTableModel();
    private EITLComboModel cmbFnsdvsInvModel = new EITLComboModel();

    private EITLTableModel DataModelProduction = new EITLTableModel();
    private EITLTableModel DataModelWIPProduction = new EITLTableModel();
    private EITLComboModel cmbProductionStatusModel = new EITLComboModel();
    private EITLComboModel cmbProductionStageModel = new EITLComboModel();
    private EITLComboModel cmbWIPProductionStatusModel = new EITLComboModel();
    private EITLComboModel cmbWIPProductionStageModel = new EITLComboModel();

    private EITLTableModel DataModelStock = new EITLTableModel();
    private EITLTableModel DataModelStock_DFS = new EITLTableModel();

    private EITLTableModel DataModelHold = new EITLTableModel();
    private EITLTableModel DataModelObsolete = new EITLTableModel();
    private EITLTableModel DataModelOSGStock = new EITLTableModel();

    private EITLComboModel cmbMachineModel = new EITLComboModel();
    private EITLComboModel cmbDiscountModel = new EITLComboModel();
    private EITLComboModel cmbSalesPartyModel = new EITLComboModel();
    private EITLComboModel cmbPieceStageModel = new EITLComboModel();
    private EITLComboModel cmbPieceMFGRejectionModel = new EITLComboModel();
    private EITLComboModel cmbInvoiceParameterModificationModel = new EITLComboModel();
    private EITLComboModel cmbOrderModel = new EITLComboModel();
    private EITLComboModel cmbStatusModel = new EITLComboModel();
    private EITLComboModel cmbInvStatusModel = new EITLComboModel();
    private EITLComboModel cmbIncharge;
    private EITLComboModel cmbInvOrderByModel = new EITLComboModel();
    private EITLComboModel cmbBSRStatusModel = new EITLComboModel();
    private EITLComboModel cmbBSROrderByModel = new EITLComboModel();
    private EITLComboModel cmbPLOrderByModel = new EITLComboModel();
    private EITLComboModel cmbCOBOLERPModel = new EITLComboModel();
    private EITLComboModel cmbCobolErpModel = new EITLComboModel();

    private EITLComboModel cmbUserListModel = new EITLComboModel();
    private EITLComboModel cmbModuleListModel = new EITLComboModel();

    private EITLTableModel DataModelSalesExpY = new EITLTableModel();
    private EITLTableModel DataModelSalesExpM = new EITLTableModel();

    private EITLTableModel DataModelDiversion = new EITLTableModel();
    private EITLComboModel cmbDiversionOrderByModel = new EITLComboModel();
    private EITLComboModel cmbDiversionStatusModel = new EITLComboModel();

    private EITLTableModel DataModelGIDC_SDF = new EITLTableModel();

    private EITLTableModel DataModelCurrentScheduleMonth = new EITLTableModel();
    private EITLComboModel cmbCS = new EITLComboModel();
    private EITLComboModel cmbCSStageModel = new EITLComboModel();
    private EITLComboModel cmbCSOC = new EITLComboModel();
    private EITLComboModel cmbCSSPO = new EITLComboModel();

    private EITLTableModel DataModelCapacityPlanning = new EITLTableModel();

    String MFGPlan = "REQ";
    String strProductCode = "";
    private JDialog aDialog;
    private boolean InvFlag = false;
    private boolean BSRFlag = false;
    private boolean PLFlag = false;
    private boolean cblerpFlag = false;
    private boolean DiversionFlag = false;
//    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    HashMap hmPieceList = new HashMap();
    String ORDER_BY = "";
    String ORDER_BY_ORDER_REGISTER = "";
    private clsExcelExporter exp = new clsExcelExporter();
    public EITLERP.Sales.clsExcelExporter export = new EITLERP.Sales.clsExcelExporter();

    private EITLTableCellRenderer Stock_Renderer = new EITLTableCellRenderer();

    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
//        cobolerpinvlist.setVisible(false);
        REGION.setVisible(false);
        jLabel26.setVisible(false);
//        FormatGrid();//1043, 642
//        setSize(980, 680);
        setSize(1000, 750);
        cmbIncharge = new EITLComboModel();
        GenerateCombo();
        RunDefaultQuery();
        enableText();
        //getAllData();
        jLabel1.setForeground(Color.WHITE);

        GenerateInvoiceParameterModificationCombo();
        GenerateInvoiceCombo();
        GenerateDiversionCombo();
        GenerateBSRCombo();
        GenerateOCMonth();
        GenerateCapacityRequestedMonth();
        GenerateCapacityOCMonth();
        GenerateCSMonth();
        GenerateCSOCMonth();
        GenerateCSSPOMonth();

//        GenerateCOBOLERPCombo();
//        FormatGridCobolERP();
        FormatGridPieceStage();
        FormatGridOrderConfirmation();
        FormatGridPieceMFGRejection();
        FormatGridOrderRegister();
        FormatGridGR();
        FormatGridPR();
        FormatGridFnsdvsInv();
        FormatGridProduction();
        FormatGridStock();
        FormatGridDiscount();
        FormatGridPieceDelink();
        FormatGridDiverted();
        FormatGridPendingList();
        FormatGridSalesParty();
        FormatGridMachine();
        FormatGridContacts();
        FormatGridWIPPieceReview();
        FormatGridInvoiceParameterModification();
        FormatGridAgeing();
        FormatGridMISAgeing1();
        FormatGridMISAgeing();
        FormatGridSalesY();
        FormatGridSalesM();
        FormatGridDivList();
        FormatGridEXP_Invoice();
        FormatGridHold();
        FormatGridOrder();
        FormatGridOSG_Stock();
        FormatGridBSR();
        FormatGridInvoiced();
        FormatGridCancelledPiece();
        FormatGridSalesExpY();
        FormatGridSalesExpM();
        FormatGridDiversion();
        FormatGridGIDC_SDF_Status();
        FormatGridCurrentScheduleMonth();

        GenerateUserCombo();
        GenerateModuleCombo();

        txtdatefrom.setText("");
        txtdateto.setText("");

        cmbProductionStage.setVisible(false);
        cmbProductionStage.setSelectedIndex(0);
        cmbProductionStatus.setVisible(true);
        cmbProductionStatus.setSelectedIndex(0);

        cmbcapacityreqmonth.setVisible(true);
        cmbcapacityreqmonth.setSelectedIndex(0);
        cmbcapacityOCmonth.setVisible(false);
        cmbcapacityOCmonth.setSelectedIndex(0);

        cmbWIPProd_ProductionStage.setVisible(false);
        cmbWIPProd_ProductionStage.setSelectedIndex(0);
        cmbWIPProd_WIPStatus.setVisible(true);
        cmbWIPProd_WIPStatus.setSelectedIndex(0);

        BTN_SORT_DATA_OBSOLETE.setVisible(false);

        SHOW_BTN_PendingListActionPerformed(null);
        //   jTabbedPane2.remove(Capacityplanning);
//        jTabbedPane2.remove(DiscountPanel);
        if (EITLERPGLOBAL.gUserID == 47 || EITLERPGLOBAL.gUserID == 98) {
            
        } else {
            jTabbedPane2.remove(DiscountPanel);
        }
        jTabbedPane2.remove(WIPSalesPanel);
        jTabbedPane2.remove(MFGRejectionPanel);
        jTabbedPane2.remove(WIPReViewReportPanel);
        jTabbedPane2.remove(OrderConfirmationPanel);
        jTabbedPane2.remove(InvParaModiPanel);
        if (EITLERPGLOBAL.gUserID != 47) {
            jTabbedPane2.remove(PaymentReceiptPanel);
        }
//        else if (EITLERPGLOBAL.gUserID != 98) {
//            jTabbedPane2.remove(PaymentReceiptPanel);
//        }
        jTabbedPane2.remove(FinishedVSInvoicedPanel);
        jTabbedPane2.remove(DiversionListPanel);
        jTabbedPane2.remove(DivertedPanel);
        jTabbedPane2.remove(HoldPanel);
        if (EITLERPGLOBAL.gUserID != 47) {
            jTabbedPane2.remove(SalesPartyMasterPanel);
        }
//        else if (EITLERPGLOBAL.gUserID != 98) {
//            jTabbedPane2.remove(SalesPartyMasterPanel);
//        }
        //DiscountPanel.setVisible(false);
    }

    private void GenerateCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        S_ENGINEER.setModel(cmbIncharge);
        cmbIncharge.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbIncharge.addElement(aData);
        }

    }

    private void RunDefaultQuery() {
        try {
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_BILL_STYLE=PR_STYLE WHERE PR_BILL_STYLE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_BILL_STYLE=PR_STYLE WHERE PR_BILL_STYLE =''");

            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WVG_A_DATE ='0000-00-00' WHERE PR_WVG_A_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WVG_B_DATE ='0000-00-00' WHERE PR_WVG_B_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_MND_A_DATE ='0000-00-00' WHERE PR_MND_A_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_MND_B_DATE ='0000-00-00' WHERE PR_MND_B_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PKG_DP_DATE ='0000-00-00' WHERE PR_PKG_DP_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_SALES_RETURNS_DATE ='0000-00-00' WHERE PR_SALES_RETURNS_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WARP_EXECUTE_DATE ='0000-00-00' WHERE PR_WARP_EXECUTE_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_SPLICE_DATE ='0000-00-00' WHERE PR_SPLICE_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_SEAM_DATE ='0000-00-00' WHERE  PR_SEAM_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_OBSOLETE_DATE ='0000-00-00' WHERE  PR_OBSOLETE_DATE IS NULL");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_EXPORT_BL_DATE ='0000-00-00' WHERE  PR_EXPORT_BL_DATE IS NULL");

            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'IN STOCK'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND DATE_ADD(PR_FNSG_DATE,INTERVAL 90 DAY) <= NOW()");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'MENDING'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND DATE_ADD(PR_WVG_DATE,INTERVAL 90 DAY) <= NOW()");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'NEEDLING'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND DATE_ADD(PR_MND_DATE,INTERVAL 90 DAY) <= NOW()");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'FINISHING'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND DATE_ADD(PR_NDL_DATE,INTERVAL 90 DAY) <= NOW()");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'SPIRALLING'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND DATE_ADD(PR_NDL_DATE,INTERVAL 90 DAY) <= NOW()");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'ASSEMBLY'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND DATE_ADD(PR_NDL_DATE,INTERVAL 90 DAY) <= NOW()");
            //data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DIVERSION_FLAG = 'READY' WHERE PR_PIECE_STAGE = 'WEAVING'  AND PR_DIVERSION_FLAG IN ('','CLOSED') AND PR_PRIORITY_HOLD_CAN_FLAG IN ('1','2','3','4','5') AND DATE_ADD(PR_ORDER_DATE,INTERVAL 90 DAY) <= NOW()");
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, DINESHMILLS.D_SAL_PARTY_MASTER SET PR_INCHARGE = INCHARGE_CD WHERE PARTY_CODE = PR_PARTY_CODE");
            // data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_INCHARGE = 5 WHERE SUBSTRING(PR_PRODUCT_CODE,1,3) IN (619,629,639)");
            String sql25 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WARP_DATE = COALESCE(PR_WARP_DATE,'0000-00-00') WHERE PR_WARP_DATE IS NULL";
            data.Execute(sql25);
            String sql26 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_ORDER_DATE = COALESCE(PR_ORDER_DATE,'0000-00-00') WHERE PR_ORDER_DATE IS NULL";
            data.Execute(sql26);

            //# --------UPN UPDATE 
            String sql21 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,PRODUCTION.FELT_MACHINE_POSITION_MST "
                    + "SET PR_UPN = CONCAT(PR_PARTY_CODE,'000000') "
                    + "WHERE PR_POSITION_NO = POSITION_NO AND LENGTH(PR_MACHINE_NO) IN (0)";
            data.Execute(sql21);

            String sql22 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,PRODUCTION.FELT_MACHINE_POSITION_MST "
                    + "SET PR_UPN = CONCAT(PR_PARTY_CODE,'000000') "
                    + "WHERE PR_POSITION_NO = POSITION_NO AND LENGTH(PR_MACHINE_NO) IN ('')";
            data.Execute(sql22);
            String sql23 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,PRODUCTION.FELT_MACHINE_POSITION_MST  "
                    + "SET PR_UPN = CONCAT(PR_PARTY_CODE,PR_MACHINE_NO,POSITION_DESIGN_NO) "
                    + "WHERE PR_POSITION_NO = POSITION_NO AND LENGTH(PR_MACHINE_NO) =2";
            data.Execute(sql23);
            String sql24 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,PRODUCTION.FELT_MACHINE_POSITION_MST  "
                    + "SET PR_UPN =  CONCAT(PR_PARTY_CODE,'000000') "
                    + "WHERE PR_POSITION_NO = POSITION_NO AND LENGTH(PR_MACHINE_NO) =2 AND PR_DELINK IN ('DELINK','OBSOLETE')";
            data.Execute(sql24);

           //--------- Production Query Start Part 1
        /*             
           
             String sql1 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1 GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_WEAVING_WEIGHT = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql1);

             String sql2 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('A')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_WEAVING_WEIGHT_A = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql2);

             String sql3 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1  "
             + "AND  RIGHT(PROD_PIECE_NO,1) IN ('B')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_WEAVING_WEIGHT_B = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql3);
             String sql4 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('R')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_WEAVING_WEIGHT_A = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql4);

             String sql5 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1  "
             + "AND RIGHT(PROD_PIECE_NO,1) NOT IN ('A','B','R')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_WEAVING_WEIGHT_A = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql5);

             //#------- TO UPDATE WEAVING MAX WEAVING DATE AND WVG_LAYER _REMARK 
             String sql6 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,MAX(PROD_DATE) AS MAXDATE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) '  ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1 GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET WVG_LAYER_REMARK = PIECEPROD, "
             + "PR_WVG_DATE=MAXDATE  "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql6);

             String sql7 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WVG_A_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='WEAVING' AND PR_WVG_A_DATE != PROD_DATE  "
             + "AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('A')";
             data.Execute(sql7);

             String sql8 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WVG_B_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='WEAVING' AND PR_WVG_B_DATE != PROD_DATE  "
             + "AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('B')";
             data.Execute(sql8);

             String sql9 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WVG_A_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='WEAVING' AND PR_WVG_A_DATE != PROD_DATE  "
             + "AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('R')";
             // data.Execute(sql9);

             String sql10 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WVG_A_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='WEAVING' AND PR_WVG_A_DATE != PROD_DATE  "
             + "AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) NOT IN ('A','B','R')";
             data.Execute(sql10);

             //#---------------UPDATE MENDING DATE & WEIGHT ( A & B)
             //--------------------------------------------------------------------------------
             String sql11 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1 GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_MENDING_WEIGHT = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql11);

             String sql12 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1 "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_MENDING_WEIGHT_A = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql12);

             String sql13 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1  "
             + "AND  RIGHT(PROD_PIECE_NO,1) IN ('B')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_MENDING_WEIGHT_B = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql13);

             String sql14 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1 "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('R')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_MENDING_WEIGHT_A = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             //  data.Execute(sql14);

             String sql15 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,SUM(WEIGHT) AS WT "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1 "
             + "AND RIGHT(PROD_PIECE_NO,1) NOT IN ('A','B','R')  "
             + "GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_MENDING_WEIGHT_A = WT "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql15);

             //#------- TO UPDATE MENDING MAX WEAVING DATE AND WVG_LAYER _REMARK 
             String sql16 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,MAX(PROD_DATE) AS MAXDATE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) '  ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1 GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A  "
             + "SET PR_MND_LAYER_REMARK = PIECEPROD, "
             + "PR_MND_DATE=MAXDATE  "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql16);

             String sql17 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_MND_A_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='MENDING' AND PR_MND_A_DATE != PROD_DATE AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('A')";
             data.Execute(sql17);

             String sql18 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_MND_B_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='MENDING' AND PR_MND_B_DATE != PROD_DATE AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('B')";
             data.Execute(sql18);

             String sql19 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_MND_A_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='MENDING' AND PR_MND_A_DATE != PROD_DATE AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) IN ('R')";
             //   data.Execute(sql19);

             String sql20 = "UPDATE  PRODUCTION.FELT_PROD_DATA,PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_MND_A_DATE= PROD_DATE "
             + "WHERE SUBSTRING(PROD_PIECE_NO,1,5) = PR_PIECE_NO "
             + "AND PROD_DEPT ='MENDING' AND PR_MND_A_DATE != PROD_DATE AND APPROVED =1 AND CANCELED =0  "
             + "AND RIGHT(PROD_PIECE_NO,1) NOT IN ('A','B','R')";
             data.Execute(sql20);

             String sql20_1 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, "
             + "( "
             + "SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,MAX(PROD_DATE) AS MAXDATE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) ' ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'NEEDLING' AND CANCELED =0 AND APPROVED =1 GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) "
             + ") AS A "
             + "SET PR_NDL_DATE=MAXDATE "
             + "WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5)";
             data.Execute(sql20_1);

            
            
 
        


             data.Execute("UPDATE  PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WARP_A_DATE ='0000-00-00',PR_WARP_B_DATE='0000-00-00',PR_WARP_LAYER_REMARK=''");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT SUBSTRING(PIECE_NO,1,5) AS PIECE,MAX(H.APPROVED_DATE) AS MAXDATE, "
             + "GROUP_CONCAT(PIECE_NO,' ( ',H.APPROVED_DATE,' ) '  ORDER BY PIECE_NO SEPARATOR ', ') AS PIECEPROD "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 "
             + "AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') GROUP BY SUBSTRING(PIECE_NO,1,5) ) AS A SET PR_WARP_LAYER_REMARK = PIECEPROD, "
             + "PR_WARP_DATE=MAXDATE WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5) AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT SUBSTRING(PIECE_NO,1,5) AS PIECE,MAX(H.APPROVED_DATE) AS MAXDATE, "
             + "GROUP_CONCAT(PIECE_NO,' ( ',H.APPROVED_DATE,' ) '  ORDER BY PIECE_NO SEPARATOR ', ') AS PIECEPROD "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 "
             + "AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') GROUP BY SUBSTRING(PIECE_NO,1,5) ) AS A SET PR_WARP_LAYER_REMARK = PIECEPROD, "
             + "PR_WARP_DATE=MAXDATE WHERE PIECE =PR_PIECE_NO AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('A') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE  AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('B') GROUP BY PIECE_NO ) AS A SET PR_WARP_B_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_B =WEIGHT "
             + "WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO AND PR_WARP_B_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) NOT IN ('A','B') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) NOT IN ('A','B') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE PIECE = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('A','B') GROUP BY PIECE_NO ) AS A SET PR_PIECE_AB_FLAG ='AB' WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO "
             + "AND PR_PIECE_AB_FLAG !='AB' AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

             //HDS
             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT SUBSTRING(PIECE_NO,1,5) AS PIECE,MAX(H.APPROVED_DATE) AS MAXDATE, "
             + "GROUP_CONCAT(PIECE_NO,' ( ',H.APPROVED_DATE,' ) '  ORDER BY PIECE_NO SEPARATOR ', ') AS PIECEPROD "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 "
             + "AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') GROUP BY SUBSTRING(PIECE_NO,1,5) ) AS A SET PR_WARP_LAYER_REMARK = PIECEPROD, "
             + "PR_WARP_DATE=MAXDATE WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5) AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('A') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('A') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE PIECE = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('B') GROUP BY PIECE_NO ) AS A SET PR_WARP_B_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_B =WEIGHT "
             + "WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO AND PR_WARP_B_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) NOT IN ('A','B') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) NOT IN ('A','B') GROUP BY PIECE_NO ) AS A SET PR_WARP_A_DATE = APPROVED_DATE,PR_WARPING_WEIGHT_A =WEIGHT "
             + "WHERE PIECE = PR_PIECE_NO AND PR_WARP_A_DATE != APPROVED_DATE AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PIECE_NO AS PIECE,MAX(H.APPROVED_DATE) AS APPROVED_DATE,AVG(WEIGHT) AS WEIGHT "
             + "FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
             + "WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE') "
             + "AND RIGHT(PIECE_NO,1) IN ('A','B') GROUP BY PIECE_NO ) AS A SET PR_PIECE_AB_FLAG ='AB' WHERE SUBSTRING(PIECE,1,5) = PR_PIECE_NO "
             + "AND PR_PIECE_AB_FLAG !='AB'  AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT SUBSTRING(PROD_PIECE_NO,1,5) AS PIECE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) '  ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD "
             + "FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT IN ('WEAVING','MENDING') AND CANCELED =0 AND APPROVED =1  AND RIGHT(PROD_PIECE_NO,1) IN ('A','B') GROUP BY SUBSTRING(PROD_PIECE_NO,1,5) ) AS A "
             + "SET PR_PIECE_AB_FLAG ='AB' WHERE PIECE =SUBSTRING(PR_PIECE_NO,1,5) AND PR_PIECE_AB_FLAG !='AB' AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

            
             */
        // Production Query Part 1 end
            /*

             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (1,2,3,4,5) LIMIT 1000000000000;

             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='WEAVING';


             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='MENDING' AND PR_WVG_DATE !='0000-00-00' ;
             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='NEEDLING' AND PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00';
             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='FINISHING' AND PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00';

             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='FINISHING' AND PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00';




             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_WARP_DATE IS NULL;


             SELECT * FROM (SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5')  AND PR_PIECE_STAGE IN ('WARPING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING')  AND PR_WIP_STATUS = 'ORDERED'  ) AS PR LEFT JOIN  (SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  ON PR.PR_PARTY_CODE=PM.PARTY_CODE  LEFT JOIN  (SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  WHERE H.GROUP_CODE=D.GROUP_CODE  AND H.APPROVED=1 AND H.CANCELED=0) AS GM  ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE LEFT JOIN  (SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE LEFT JOIN  (SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  ON PR.PR_POSITION_NO=MP.POSITION_NO LEFT JOIN  (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  ON PR.PR_INCHARGE=IM.INCHARGE_CD  ;


             SELECT * FROM  FELT_SALES_PIECE_REGISTER 
             WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)  
             AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00'  AND PR_MND_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'

             */
            /*
             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER ,PRODUCTION.FELT_REJECTION "
             + " SET PR_WARP_DATE='0000-00-00',PR_WVG_DATE = '0000-00-00' ,PR_MND_DATE = '0000-00-00',PR_NDL_DATE = '0000-00-00',PR_SEAM_DATE='0000-00-00',"
             + "PR_FNSG_DATE= '0000-00-00',PR_SPLICE_DATE ='0000-00-00', PR_PIECE_STAGE = 'BOOKING',PR_WIP_STATUS = 'ACCEPTED',"
             + "WVG_LAYER_REMARK ='',PR_WVG_A_DATE='0000-00-00',PR_WVG_B_DATE ='0000-00-00',PR_WEAVING_WEIGHT =0,PR_WEAVING_WEIGHT_A=0,PR_WEAVING_WEIGHT_B =0,"
             + "PR_MND_LAYER_REMARK ='',PR_MND_A_DATE='0000-00-00',PR_MND_B_DATE ='0000-00-00',PR_MENDING_WEIGHT =0,PR_MENDING_WEIGHT_A=0,PR_MENDING_WEIGHT_B =0,"
             + "PR_WARP_LAYER_REMARK ='',PR_WARP_A_DATE='0000-00-00',PR_WARP_B_DATE ='0000-00-00',PR_WARPING_WEIGHT =0,PR_WARPING_WEIGHT_A=0,PR_WARPING_WEIGHT_B =0 "
             + " WHERE APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO "
             + " AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING')");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,(SELECT PIECE_NO,APPROVED_DATE FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + " WHERE H.DOC_NO = D.DOC_NO AND PIECE_NO LIKE ('%R%') AND APPROVED =1 AND CANCELED =0) AS D "
             + "SET PR_WARP_DATE = D.APPROVED_DATE "
             + "WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND PIECE_NO = PR_PIECE_NO "
             + "AND RIGHT(REJ_PIECE_NO,1) NOT IN ('A','B') "
             + "AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D "
             + " SET PR_WVG_DATE = PROD_DATE , PR_WVG_A_DATE= PROD_DATE"
             + " WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND PROD_PIECE_NO = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0 "
             + " AND RIGHT(REJ_PIECE_NO,1) NOT IN ('A','B') "
             + " AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') "
             + " AND PROD_DEPT = 'WEAVING'  AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D"
             + "SET PR_MND_DATE = PROD_DATE ,PR_MND_A_DATE = PROD_DATE "
             + "WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND PROD_PIECE_NO = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0 "
             + "AND RIGHT(REJ_PIECE_NO,1) NOT IN ('A','B')  "
             + "AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') "
             + "AND PROD_DEPT = 'MENDING' AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D "
             + "SET PR_SEAM_DATE = PROD_DATE "
             + "WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND PROD_PIECE_NO = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0 "
             + "AND RIGHT(REJ_PIECE_NO,1) NOT IN ('A','B')  "
             + "AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') "
             + "AND PROD_DEPT = 'SEAMING' AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D "
             + "SET PR_NDL_DATE = PROD_DATE "
             + "WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND PROD_PIECE_NO = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0 "
             + "AND RIGHT(REJ_PIECE_NO,1) NOT IN ('A','B')  "
             + "AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') "
             + "AND PROD_DEPT = 'NEEDLING' AND COALESCE(PR_REJECTED_FLAG,0) =0 ");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,(SELECT PIECE_NO,APPROVED_DATE FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
             + " WHERE H.DOC_NO = D.DOC_NO AND PIECE_NO LIKE ('%R%') AND APPROVED =1 AND CANCELED =0) AS D "
             + " SET PR_WARP_DATE = D.APPROVED_DATE , PR_WARP_A_DATE = CASE WHEN RIGHT(PIECE_NO,1) IN ('A') THEN D.APPROVED_DATE ELSE '0000-00-00' END, "
             + " PR_WARP_B_DATE = CASE WHEN RIGHT(PIECE_NO,1) IN ('B') THEN D.APPROVED_DATE ELSE '0000-00-00' END "
             + " WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND SUBSTRING(PIECE_NO,1,6) = PR_PIECE_NO "
             + " AND RIGHT(PIECE_NO,1) IN ('A','B') "
             + " AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D "
             + " SET PR_WVG_DATE = PROD_DATE , PR_WVG_A_DATE= CASE WHEN RIGHT(PROD_PIECE_NO,1) IN ('A') THEN PROD_DATE ELSE '0000-00-00' END, PR_WVG_B_DATE= CASE WHEN RIGHT(PROD_PIECE_NO,1) IN ('B') THEN PROD_DATE ELSE '0000-00-00' END"
             + " WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND SUBSTRING(PROD_PIECE_NO,1,6) = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0"
             + " AND RIGHT(PROD_PIECE_NO,1) IN ('A','B')"
             + " AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING')"
             + " AND PROD_DEPT = 'WEAVING'  AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D"
             + " SET PR_MND_DATE = PROD_DATE ,PR_MND_A_DATE = CASE WHEN RIGHT(PROD_PIECE_NO,1) IN ('A') THEN PROD_DATE ELSE '0000-00-00' END,PR_MND_B_DATE = CASE WHEN RIGHT(PROD_PIECE_NO,1) IN ('B') THEN PROD_DATE ELSE '0000-00-00' END"
             + " WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND SUBSTRING(PROD_PIECE_NO,1,6) = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0"
             + " AND RIGHT(PROD_PIECE_NO,1) IN ('A','B') "
             + " AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') "
             + " AND PROD_DEPT = 'MENDING' AND COALESCE(PR_REJECTED_FLAG,0) =0");

             data.Execute("UPDATE PRODUCTION.FELT_REJECTION R ,PRODUCTION.FELT_SALES_PIECE_REGISTER P,PRODUCTION.FELT_PROD_DATA D "
             + " SET PR_NDL_DATE = PROD_DATE "
             + " WHERE R.APPROVED =1 AND PR_PIECE_NO = REJ_NEW_PIECE_NO AND SUBSTRING(PROD_PIECE_NO,1,6) = PR_PIECE_NO AND D.APPROVED =1 AND D.CANCELED =0"
             + " AND RIGHT(PROD_PIECE_NO,1) IN ('A','B') "
             + " AND PR_PIECE_STAGE IN ( 'BOOKING','PLANNING','WEAVING','MENDING','SEAMING','SPLICING','NEEDLING','FINISHING') "
             + " AND PROD_DEPT = 'NEEDLING' AND COALESCE(PR_REJECTED_FLAG,0) =0");

            
            
            
            
            
             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PIECE_NO AS PIECE,CASE WHEN INDICATOR ='DELETE' THEN '0000-00-00' END AS MAXDATE, '' AS PIECEPROD FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR IN ('DELETE')  GROUP BY PIECE_NO)  AS B SET PR_WARP_LAYER_REMARK = PIECEPROD, PR_WARP_DATE=MAXDATE, PR_WARP_A_DATE = MAXDATE  WHERE PIECE =PR_PIECE_NO ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PIECE_NO AS PIECE,CASE WHEN INDICATOR ='INSERT' THEN H.APPROVED_DATE  WHEN INDICATOR ='ADD' THEN D.INDICATOR_DATE WHEN COALESCE(INDICATOR,'') ='' THEN H.APPROVED_DATE END AS MAXDATE, GROUP_CONCAT(PIECE_NO,' ( ',CASE WHEN INDICATOR ='INSERT' THEN H.APPROVED_DATE  WHEN INDICATOR ='ADD' THEN D.INDICATOR_DATE WHEN COALESCE(INDICATOR,'') ='' THEN H.APPROVED_DATE END,' ) '  ORDER BY PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE')  GROUP BY PIECE_NO)  AS B SET PR_WARP_LAYER_REMARK = PIECEPROD, PR_WARP_DATE=MAXDATE, PR_WARP_A_DATE = MAXDATE  WHERE PIECE =PR_PIECE_NO ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PIECE_NO AS PIECE,CASE WHEN INDICATOR ='INSERT' THEN H.APPROVED_DATE  WHEN INDICATOR ='ADD' THEN D.INDICATOR_DATE WHEN COALESCE(INDICATOR,'') ='' THEN H.APPROVED_DATE END AS MAXDATE, GROUP_CONCAT(PIECE_NO,' ( ',CASE WHEN INDICATOR ='INSERT' THEN H.APPROVED_DATE  WHEN INDICATOR ='ADD' THEN D.INDICATOR_DATE WHEN COALESCE(INDICATOR,'') ='' THEN H.APPROVED_DATE END,' ) '  ORDER BY PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D,PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H WHERE H.DOC_NO = D.DOC_NO AND APPROVED =1 AND CANCELED =0  AND INDICATOR NOT IN ('DELETE')  GROUP BY PIECE_NO)  AS B SET PR_WARP_LAYER_REMARK = PIECEPROD, PR_WARP_DATE=MAXDATE, PR_WARP_A_DATE = MAXDATE  WHERE PIECE =PR_PIECE_NO ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER,(SELECT PROD_PIECE_NO AS PIECE,MAX(PROD_DATE) AS MAXDATE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) '  ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'WEAVING' AND CANCELED =0 AND APPROVED =1 GROUP BY PROD_PIECE_NO) AS A  SET WVG_LAYER_REMARK = PIECEPROD,PR_WVG_DATE=MAXDATE ,PR_WVG_A_DATE = MAXDATE WHERE PIECE =PR_PIECE_NO");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, ( SELECT PROD_PIECE_NO AS PIECE,MAX(PROD_DATE) AS MAXDATE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) '  ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'MENDING' AND CANCELED =0 AND APPROVED =1 GROUP BY PROD_PIECE_NO ) AS A SET PR_MND_LAYER_REMARK = PIECEPROD,PR_MND_DATE=MAXDATE ,PR_MND_A_DATE = MAXDATE WHERE PIECE =PR_PIECE_NO");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER, (SELECT PROD_PIECE_NO AS PIECE,MAX(PROD_DATE) AS MAXDATE,GROUP_CONCAT(PROD_PIECE_NO,' ( ',PROD_DATE,' ) '  ORDER BY PROD_PIECE_NO SEPARATOR ', ') AS PIECEPROD FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'NEEDLING' AND CANCELED =0 AND APPROVED =1 GROUP BY PROD_PIECE_NO ) AS A SET PR_NDL_DATE=MAXDATE WHERE PIECE =PR_PIECE_NO");

             String sql27 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'BOOKING'  "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00'  AND PR_MND_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING')";
             data.Execute(sql27);

             */
            /* ///////*
            
             String sql28 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'WEAVING', PR_WIP_STATUS = 'WARPED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE ='0000-00-00'  AND PR_MND_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0')";
             data.Execute(sql28);

             String sql29 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'MENDING',PR_WIP_STATUS = 'WOVEN' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0')";
             data.Execute(sql29);

             String sql30 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'MENDING' ,PR_WIP_STATUS = 'WOVEN' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)  "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0')";
             data.Execute(sql30);

             String sql31 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'NEEDLING' ,PR_WIP_STATUS = 'MENDED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0') AND PR_GROUP NOT IN ('HDS','M50','M35')";
             data.Execute(sql31);

             String sql32 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'NEEDLING' , PR_WIP_STATUS = 'MENDED'   "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0') AND PR_GROUP NOT IN ('HDS','M50','M35')";
             data.Execute(sql32);
           
            
             String sql34 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' , PR_WIP_STATUS = 'NEEDLED'  "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0')";
             data.Execute(sql34);
            
             String sql341 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' ,PR_WIP_STATUS = 'NEEDLED'  "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','0')";
             data.Execute(sql341);

             *//////
            /*
                        
             String sql33 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'NEEDLING'  "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING')";
             data.Execute(sql33);
         

             String sql35 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING'  "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)   "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,1) =7    "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING')";
             data.Execute(sql35);
             */
            /*
             String sql36 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'ACCEPTED' AND PR_PIECE_STAGE = 'BOOKING' WHERE  PR_WARP_DATE ='0000-00-00' AND PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' AND PR_";
             //data.Execute(sql36);

             String sql37 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'WARPED' WHERE  PR_WARP_DATE !='0000-00-00' AND PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             // data.Execute(sql37);
             String sql38 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'WOVEN' WHERE  PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             // data.Execute(sql38);
             String sql39 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'MENDED' WHERE PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             //  data.Execute(sql39);
             String sql40 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'MENDED' WHERE PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             //  data.Execute(sql40);

             String sql41 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'NEEDLED' WHERE PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             //  data.Execute(sql41);
             String sql42 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'NEEDLED' WHERE PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             //   data.Execute(sql42);

             String sql43 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'NEEDLED' WHERE PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'";
             //   data.Execute(sql43);

             //#SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER LIMIT 10000000000 ;
             String sql44 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'FINISHED' WHERE PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE !='0000-00-00'";
             //  data.Execute(sql44);
             String sql45 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'FINISHED' WHERE PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE !='0000-00-00'";
             //  data.Execute(sql45);

             String sql46 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'FINISHED' WHERE PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE !='0000-00-00'";
             //  data.Execute(sql46);

             String sql47 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'FINISHED' WHERE PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE !='0000-00-00' AND PR_FNSG_DATE !='0000-00-00'";
             //  data.Execute(sql47);

             */
            //String sql48 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'DIVERTED' WHERE PR_PIECE_STAGE IN ('DIVERTED')";
            //    data.Execute(sql48);
            // String sql49 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'RE-PROCESS' WHERE PR_PIECE_STAGE = 'FINISHING' AND PR_PIECE_NO LIKE '%V%'";
            //  data.Execute(sql49);
            String sql50 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_WIP_STATUS = 'CANCELED' WHERE PR_PIECE_STAGE IN ('CANCELED')";
            data.Execute(sql50);

//#---------------------------------------------------------------------------
         /*
             String sql51 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_WVG =0";
             data.Execute(sql51);
             String sql52 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_WVG = "
             + "CASE WHEN PR_WVG_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_ORDER_DATE),0) "
             + " WHEN PR_WVG_DATE !='0000-00-00' AND PR_WVG_DATE >= PR_ORDER_DATE THEN  COALESCE(DATEDIFF(PR_WVG_DATE,PR_ORDER_DATE),0) "
             + "WHEN PR_WVG_DATE !='0000-00-00'AND PR_WVG_DATE < PR_ORDER_DATE  THEN 0 "
             + "END";
             data.Execute(sql52);
             String sql53 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_MND =0";
             data.Execute(sql53);
             String sql54 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_MND = "
             + "CASE WHEN PR_MND_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_ORDER_DATE),0) "
             + " WHEN PR_MND_DATE !='0000-00-00' AND PR_MND_DATE >= PR_ORDER_DATE THEN  COALESCE(DATEDIFF(PR_MND_DATE,PR_ORDER_DATE),0) "
             + "WHEN PR_MND_DATE !='0000-00-00'AND PR_MND_DATE < PR_ORDER_DATE  THEN 0 "
             + "END";
             data.Execute(sql54);

             String sql55 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_NDL =0";
             data.Execute(sql55);
             String sql56 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_NDL =  "
             + "CASE WHEN PR_NDL_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_ORDER_DATE),0) "
             + " WHEN PR_NDL_DATE !='0000-00-00' AND PR_NDL_DATE >= PR_ORDER_DATE THEN  COALESCE(DATEDIFF(PR_NDL_DATE,PR_ORDER_DATE),0) "
             + "WHEN PR_NDL_DATE !='0000-00-00'AND PR_NDL_DATE < PR_ORDER_DATE  THEN 0 "
             + "END";
             data.Execute(sql56);

             String sql57 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_FNG =0";
             data.Execute(sql57);
             String sql58 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_FNG =  "
             + "CASE WHEN PR_FNSG_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_ORDER_DATE),0) "
             + " WHEN PR_FNSG_DATE !='0000-00-00' AND PR_FNSG_DATE >= PR_ORDER_DATE THEN  COALESCE(DATEDIFF(PR_FNSG_DATE,PR_ORDER_DATE),0) "
             + "WHEN PR_FNSG_DATE !='0000-00-00'AND PR_FNSG_DATE < PR_ORDER_DATE  THEN 0 "
             + "END";
             data.Execute(sql58);

             String sql59 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_WVG_MND = 0";
             data.Execute(sql59);
             String sql60 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_WVG_MND =  "
             + "CASE WHEN PR_MND_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_WVG_DATE),0) "
             + " WHEN PR_MND_DATE !='0000-00-00' AND PR_MND_DATE >= PR_WVG_DATE THEN  COALESCE(DATEDIFF(PR_MND_DATE,PR_WVG_DATE),0) "
             + "WHEN PR_MND_DATE !='0000-00-00'AND PR_MND_DATE < PR_WVG_DATE  THEN 0 "
             + "END";
             data.Execute(sql60);

             String sql61 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_MND_NDL = 0";
             data.Execute(sql61);
             String sql62 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_MND_NDL = "
             + "CASE WHEN PR_NDL_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_MND_DATE),0) "
             + " WHEN PR_NDL_DATE !='0000-00-00' AND PR_NDL_DATE >= PR_MND_DATE THEN  COALESCE(DATEDIFF(PR_NDL_DATE,PR_MND_DATE),0) "
             + "WHEN PR_NDL_DATE !='0000-00-00'AND PR_NDL_DATE < PR_MND_DATE  THEN 0 "
             + "END";
             data.Execute(sql62);

             String sql63 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_NDL_FNG =0";
             data.Execute(sql63);
             String sql64 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_NDL_FNG =  "
             + "CASE WHEN PR_FNSG_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_NDL_DATE),0) "
             + " WHEN PR_FNSG_DATE !='0000-00-00' AND PR_FNSG_DATE >= PR_NDL_DATE THEN  COALESCE(DATEDIFF(PR_FNSG_DATE,PR_NDL_DATE),0) "
             + "WHEN PR_FNSG_DATE !='0000-00-00'AND PR_FNSG_DATE < PR_NDL_DATE  THEN 0 "
             + "END";
             data.Execute(sql64);

             String sql65 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_MND_FNG = 0";
             data.Execute(sql65);

             String sql66 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_MND_FNG =  "
             + "CASE WHEN PR_FNSG_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_MND_DATE),0) "
             + " WHEN PR_FNSG_DATE !='0000-00-00' AND PR_FNSG_DATE >= PR_MND_DATE THEN  COALESCE(DATEDIFF(PR_FNSG_DATE,PR_MND_DATE),0) "
             + "WHEN PR_FNSG_DATE !='0000-00-00'AND PR_FNSG_DATE < PR_MND_DATE  THEN 0 "
             + "END  "
             + "WHERE SUBSTRING(PR_PRODUCT_CODE,1,1) =7";
             data.Execute(sql66);

             String sql67 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_INVOICE = 0";
             data.Execute(sql67);

             String sql68 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_INVOICE =  "
             + "CASE WHEN PR_INVOICE_DATE ='0000-00-00' THEN  COALESCE(DATEDIFF(NOW(),PR_ORDER_DATE),0) "
             + " WHEN PR_INVOICE_DATE !='0000-00-00' AND PR_INVOICE_DATE >= PR_ORDER_DATE THEN  COALESCE(DATEDIFF(PR_INVOICE_DATE,PR_ORDER_DATE),0) "
             + "WHEN PR_INVOICE_DATE !='0000-00-00'AND PR_INVOICE_DATE < PR_ORDER_DATE  THEN 0 "
             + "END";
             data.Execute(sql68);

             String sql69 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_WH_STOCK =0,PR_DAYS_STOCK_INVOICE =0,PR_DAYS_WH_PACKED=0,PR_DAYS_PACK_NOT_INVOICE=0,PR_DAYS_PACK_INVOICE=0";
             data.Execute(sql69);
             */
//            String sql70 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  "
//                    + "SET  "
//                    + "PR_DAYS_WH_STOCK = "
//                    + "CASE WHEN PR_INVOICE_DATE <>'0000-00-00' THEN DATEDIFF(PR_INVOICE_DATE,PR_FNSG_DATE)  "
//                    + "WHEN  PR_INVOICE_DATE ='0000-00-00' THEN  DATEDIFF(NOW(),PR_FNSG_DATE) END , "
//                    + "PR_DAYS_WH_PACKED= "
//                    + "CASE WHEN PR_INVOICE_DATE ='0000-00-00'  AND  PR_PACKED_DATE ='0000-00-00' THEN 0 "
//                    + "WHEN PR_INVOICE_DATE ='0000-00-00'  AND  PR_PACKED_DATE <>'0000-00-00' THEN DATEDIFF(PR_PACKED_DATE,PR_FNSG_DATE)  "
//                    + " WHEN PR_INVOICE_DATE <>'0000-00-00'  AND  PR_PACKED_DATE <>'0000-00-00' THEN DATEDIFF(PR_PACKED_DATE,PR_FNSG_DATE) END, "
//                    + "PR_DAYS_STOCK_INVOICE = "
//                    + "CASE WHEN PR_INVOICE_DATE <>'0000-00-00' AND PR_FNSG_DATE <>'0000-00-00' THEN DATEDIFF(PR_INVOICE_DATE,PR_FNSG_DATE) "
//                    + " WHEN PR_INVOICE_DATE ='0000-00-00' AND PR_FNSG_DATE <>'0000-00-00' THEN 0 "
//                    + "  END , "
//                    + "PR_DAYS_PACK_INVOICE= CASE WHEN PR_INVOICE_DATE ='0000-00-00'  AND  PR_PACKED_DATE ='0000-00-00' THEN 0 "
//                    + "WHEN PR_INVOICE_DATE ='0000-00-00' THEN 0 ELSE DATEDIFF(PR_INVOICE_DATE,PR_PACKED_DATE) END "
//                    + "WHERE PR_PIECE_STAGE IN ('IN STOCK','INVOICED','BSR','EXP-INVOICE','EXP_INVOICED')";
            //ata.Execute(sql70);

            /*
             String sql71 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_STOCK_INVOICE_STATUS = CASE WHEN PR_PIECE_STAGE = 'INVOICED' AND PR_DAYS_STOCK_INVOICE >=0 AND PR_DAYS_STOCK_INVOICE <=30 THEN 'INVOICED:WITHIN 30 DAYS OF W/H RCVD' "
             + "WHEN PR_PIECE_STAGE = 'INVOICED' AND PR_DAYS_STOCK_INVOICE >=31 AND PR_DAYS_STOCK_INVOICE <=90  THEN 'INVOICED:BETWEEN 31 TO 90 DAYS OF W/H RCVD' "
             + "WHEN PR_PIECE_STAGE = 'INVOICED' AND PR_DAYS_STOCK_INVOICE >=91 AND PR_DAYS_STOCK_INVOICE <=180  THEN 'INVOICED:BETWEEN 91 TO 180 DAYS OF W/H RCVD' "
             + "WHEN PR_PIECE_STAGE = 'INVOICED' AND PR_DAYS_STOCK_INVOICE >=181 AND PR_DAYS_STOCK_INVOICE <=365 THEN 'INVOICED:BETWEEN 181 TO 365 DAYS OF W/H RCVD' "
             + "WHEN PR_PIECE_STAGE = 'INVOICED' AND PR_DAYS_STOCK_INVOICE >=366 THEN 'INVOICED:AFTER 365 DAYS OF W/H RCVD' END "
             + "WHERE PR_PIECE_STAGE IN ('INVOICED')";
             //   data.Execute(sql71);

             String sql72 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_STATUS = PR_DAYS_STOCK_INVOICE_STATUS "
             + "WHERE PR_PIECE_STAGE IN ('INVOICED')";
             data.Execute(sql72);

             String sql73 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_PACK_NOT_INVOICE_STATUS = "
             + "CASE WHEN PR_PIECE_STAGE = 'BSR' AND PR_DAYS_PACK_NOT_INVOICE >=0 AND PR_DAYS_PACK_NOT_INVOICE <=30 THEN 'PACKED:NOT_INVOICED WITHIN 30 DAYS OF BALE DATE' "
             + "WHEN PR_PIECE_STAGE = 'BSR' AND PR_DAYS_PACK_NOT_INVOICE >=31 AND PR_DAYS_PACK_NOT_INVOICE <=90  THEN 'PACKED:NOT_INVOICED BETWEEN 31 TO 90 DAYS OF BALE DATE' "
             + "WHEN PR_PIECE_STAGE = 'BSR' AND PR_DAYS_PACK_NOT_INVOICE >=91 AND PR_DAYS_PACK_NOT_INVOICE <=180  THEN 'PACKED:NOT_INVOICED BETWEEN 91 TO 180 DAYS OF BALE DATE' "
             + "WHEN PR_PIECE_STAGE = 'BSR' AND PR_DAYS_PACK_NOT_INVOICE >=181 AND PR_DAYS_PACK_NOT_INVOICE <=365 THEN 'PACKED:NOT_INVOICED BETWEEN 181 TO 365 DAYS OF BALE DATE' "
             + "WHEN PR_PIECE_STAGE = 'BSR' AND PR_DAYS_PACK_NOT_INVOICE >=366 THEN 'PACKED:NOT_INVOICED AFTER 365 DAYS OF BALE DATE' END "
             + "WHERE PR_PIECE_STAGE IN ('BSR')";
             data.Execute(sql73);

             String sql74 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_STATUS = PR_DAYS_PACK_NOT_INVOICE_STATUS "
             + "WHERE PR_PIECE_STAGE IN ('BSR')";
             data.Execute(sql74);

             String sql75 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_WH_STOCK_STATUS =  "
             + "CASE WHEN PR_PIECE_STAGE = 'IN STOCK' AND PR_DAYS_WH_STOCK >=0 AND PR_DAYS_WH_STOCK <=30 THEN 'INSTOCK:NOT_INVOICED WITHIN 30 DAYS OF W/H RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'IN STOCK' AND PR_DAYS_WH_STOCK >=31 AND PR_DAYS_WH_STOCK <=90  THEN 'INSTOCK:NOT_INVOICED BETWEEN 31 TO 90 DAYS OF W/H RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'IN STOCK' AND PR_DAYS_WH_STOCK >=91 AND PR_DAYS_WH_STOCK <=180  THEN 'INSTOCK:NOT_INVOICED BETWEEN 91 TO 180 DAYS OF W/H RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'IN STOCK' AND PR_DAYS_WH_STOCK >=181 AND PR_DAYS_WH_STOCK <=365 THEN 'INSTOCK:NOT_INVOICED BETWEEN 181 TO 365 DAYS OF W/H RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'IN STOCK' AND PR_DAYS_WH_STOCK >=366 THEN 'INSTOCK:NOT_INVOICED AFTER 365 DAYS OF W/H RECIEPT' END  "
             + "WHERE PR_PIECE_STAGE IN ('IN STOCK')";
             data.Execute(sql75);

             String sql76 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_STATUS = PR_DAYS_WH_STOCK_STATUS "
             + "WHERE PR_PIECE_STAGE IN ('IN STOCK')";
             data.Execute(sql76);

             String sql77 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_WVG_STATUS = ''";
             data.Execute(sql77);

             String sql78 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_WVG_STATUS =  "
             + "CASE WHEN PR_PIECE_STAGE = 'WEAVING' AND PR_DAYS_ORDER_WVG >=0 AND PR_DAYS_ORDER_WVG <=30 THEN 'NOT_WEAVED WITHIN 30 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'WEAVING' AND PR_DAYS_ORDER_WVG >=31 AND PR_DAYS_ORDER_WVG <=90  THEN 'NOT_WEAVED BETWEEN 31 TO 90 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'WEAVING' AND PR_DAYS_ORDER_WVG >=91 AND PR_DAYS_ORDER_WVG <=180  THEN 'NOT_WEAVED BETWEEN 91 TO 180 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'WEAVING' AND PR_DAYS_ORDER_WVG >=181 AND PR_DAYS_ORDER_WVG <=365 THEN 'NOT_WEAVED BETWEEN 181 TO 365 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE = 'WEAVING' AND PR_DAYS_ORDER_WVG >=366 THEN 'NOT_WEAVED AFTER 365 DAYS OF ORDER RECIEPT' END  "
             + "WHERE PR_PIECE_STAGE IN ('WEAVING')";
             data.Execute(sql78);

             String sql79 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_STATUS = PR_DAYS_ORDER_WVG_STATUS  "
             + "WHERE PR_PIECE_STAGE IN ('WEAVING')";
             data.Execute(sql79);

             String sql80 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_ORDER_WVG_STATUS =  "
             + "CASE WHEN PR_PIECE_STAGE != 'WEAVING' AND PR_DAYS_ORDER_WVG >=0 AND PR_DAYS_ORDER_WVG <=60 THEN 'WEAVED WITHIN 60 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE != 'WEAVING' AND PR_DAYS_ORDER_WVG >=61 AND PR_DAYS_ORDER_WVG <=90  THEN 'WEAVED BETWEEN 61 TO 90 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE != 'WEAVING' AND PR_DAYS_ORDER_WVG >=91 AND PR_DAYS_ORDER_WVG <=180  THEN 'WEAVED BETWEEN 91 TO 180 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE != 'WEAVING' AND PR_DAYS_ORDER_WVG >=181 AND PR_DAYS_ORDER_WVG <=365 THEN 'WEAVED BETWEEN 181 TO 365 DAYS OF ORDER RECIEPT' "
             + "WHEN PR_PIECE_STAGE != 'WEAVING' AND PR_DAYS_ORDER_WVG >=366 THEN 'WEAVED AFTER 365 DAYS OF ORDER RECIEPT' END  "
             + "WHERE PR_PIECE_STAGE NOT IN ('WEAVING')";
             data.Execute(sql80);

             String sql81 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_WVG_MND_STATUS =  "
             + "CASE  "
             + "WHEN PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_DAYS_WVG_MND =0  THEN ' FELT PROCESS NOT STARTED' "
             + "WHEN PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=0 AND PR_DAYS_WVG_MND <=30 THEN 'NOT MENDED: WITHIN 30 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=31 AND PR_DAYS_WVG_MND<=90  THEN 'NO TMENDED: BETWEEN 31 TO 90 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=91 AND PR_DAYS_WVG_MND <=180  THEN 'NOT MENDED: BETWEEN 91 TO 180 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=181 AND PR_DAYS_WVG_MND <=365 THEN 'NOT MENDED: BETWEEN 181 TO 365 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=366 THEN 'NOT MENDED: AFTER 365 DAYS OF WEAVING'  "
             + "WHEN PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=0 AND PR_DAYS_WVG_MND <=30 THEN 'MENDED: WITHIN 30 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=31 AND PR_DAYS_WVG_MND<=90  THEN 'MENDED: BETWEEN 31 TO 90 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=91 AND PR_DAYS_WVG_MND <=180  THEN 'MENDED: BETWEEN 91 TO 180 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=181 AND PR_DAYS_WVG_MND <=365 THEN 'MENDED: BETWEEN 181 TO 365 DAYS OF WEAVING' "
             + "WHEN PR_MND_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=366 THEN 'MENDED: AFTER 365 DAYS OF WEAVING' END";
             data.Execute(sql81);

             String sql82 = "UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_DAYS_MND_NDL_STATUS =  "
             + "CASE  "
             + "WHEN PR_NDL_DATE ='0000-00-00' AND PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_DAYS_MND_NDL =0  THEN ' FELT PROCESS NOT STARTED' "
             + "WHEN PR_NDL_DATE ='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_MND_NDL >=0 AND PR_DAYS_MND_NDL <=30 THEN 'NOT NEEDLED: WITHIN 30 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE ='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_MND_NDL >=31 AND PR_DAYS_MND_NDL <=90  THEN 'NOTNEEDLED: BETWEEN 31 TO 90 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE ='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_MND_NDL >=91 AND PR_DAYS_MND_NDL <=180  THEN 'NOT NEEDLED: BETWEEN 91 TO 180 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE ='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=181 AND PR_DAYS_MND_NDL <=365 THEN 'NOT NEEDLED: BETWEEN 181 TO 365 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE ='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=366 THEN 'NOT NEEDLED: AFTER 365 DAYS OF MENDING'  "
             + "WHEN PR_NDL_DATE !='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=0 AND PR_DAYS_MND_NDL <=30 THEN 'NEEDLED: WITHIN 30 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE !='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=31 AND PR_DAYS_MND_NDL <=90  THEN 'NEEDLED: BETWEEN 31 TO 90 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE !='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=91 AND PR_DAYS_MND_NDL <=180  THEN 'NEEDLED: BETWEEN 91 TO 180 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE !='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=181 AND PR_DAYS_MND_NDL <=365 THEN 'NEEDLED: BETWEEN 181 TO 365 DAYS OF MENDING' "
             + "WHEN PR_NDL_DATE !='0000-00-00' AND PR_MND_DATE !='0000-00-00' AND PR_DAYS_WVG_MND >=366 THEN 'NEEDLED: AFTER 365 DAYS OF MENDING' END";
             data.Execute(sql82);

             //   data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_AB_FLAG ='AB' WHERE PR_PRODUCT_CODE IN (259001,259010,259011,269001,269010,269011,279010,279011,289010,289011,299010,299011,639000)");
             // data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_AB_FLAG = COALESCE(PR_PIECE_AB_FLAG,'') WHERE COALESCE(PR_PIECE_AB_FLAG,'') != 'AB' ");

             // data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_AB_FLAG ='AB' WHERE RIGHT(TRIM(PR_STYLE),1) ='L' AND COALESCE(PR_PIECE_AB_FLAG,'') != 'AB' ");
             */
            /*

             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER 

             WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (1,2,3,4,5) 
             AND  PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_FNSG_DATE !='0000-00-00' 
             LIMIT 1000000000000;



             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER 

             WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (1,2,3,4,5) 
             AND  PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00' AND PR_FNSG_DATE !='0000-00-00' 
             LIMIT 1000000000000;



             SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER 
             WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (1,2,3,4,5) LIMIT 1000000000000;

             */
            /*
             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' ,PR_WIP_STATUS = 'MENDED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)  "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,1) =7  "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING') ");
             *
             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' ,PR_WIP_STATUS = 'MENDED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' AND PR_SEAM_DATE ='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,2) =15 "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','SEAMING') ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' ,PR_WIP_STATUS = 'MENDED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' AND PR_SEAM_DATE ='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,2) =15 "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','SEAMING') ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'SEAMING' ,PR_WIP_STATUS = 'MENDED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,1) =7   AND  SUBSTRING(PR_PRODUCT_CODE,1,3) !=729 "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','SEAMING') ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'SEAMING' ,PR_WIP_STATUS = 'MENDED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,1) =7   AND  SUBSTRING(PR_PRODUCT_CODE,1,3) !=729 "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','SEAMING') ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' ,PR_WIP_STATUS = 'SEAMED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) "
             + "AND PR_WARP_DATE !='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'  AND PR_SEAM_DATE !='0000-00-00' AND SUBSTRING(PR_PRODUCT_CODE,1,1) =7 AND  SUBSTRING(PR_PRODUCT_CODE,1,3) !=729 "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','SEAMING') ");

             data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'FINISHING' ,PR_WIP_STATUS = 'SEAMED' "
             + "WHERE PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) "
             + "AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE !='0000-00-00'  AND PR_MND_DATE !='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' AND PR_SEAM_DATE !='0000-00-00'  AND  SUBSTRING(PR_PRODUCT_CODE,1,1) =7   AND  SUBSTRING(PR_PRODUCT_CODE,1,3) !=729 "
             + "AND  PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING','SEAMING') ");
             */
            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_REQUESTED_MONTH = '' WHERE PR_DELINK = 'OBSOLETE' AND PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5) ");

            data.Execute("UPDATE  PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_OC_LAST_DDMMYY = LAST_DAY(CONCAT(RIGHT(TRIM(PR_OC_MONTHYEAR),4),'-',CASE WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Jan' THEN '01'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Feb' THEN '02'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Mar' THEN '03'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Apr' THEN '04'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'May' THEN '05'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Jun' THEN '06'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Jul' THEN '07'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Aug' THEN '08'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Sep' THEN '09'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Oct' THEN '10'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Nov' THEN '11'  WHEN SUBSTRING(TRIM(PR_OC_MONTHYEAR),1,3) = 'Dec' THEN '12' END,'-01'))");

            data.Execute("UPDATE  PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_REQ_MTH_LAST_DDMMYY = LAST_DAY(CONCAT(RIGHT(TRIM(PR_REQUESTED_MONTH),4),'-',CASE WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Jan' THEN '01'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Feb' THEN '02'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Mar' THEN '03'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Apr' THEN '04'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'May' THEN '05'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Jun' THEN '06'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Jul' THEN '07'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Aug' THEN '08'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Sep' THEN '09'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Oct' THEN '10'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Nov' THEN '11'  WHEN SUBSTRING(TRIM(PR_REQUESTED_MONTH),1,3) = 'Dec' THEN '12' END,'-01'))");

            data.Execute("UPDATE  PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_CURRENT_SCH_LAST_DDMMYY = LAST_DAY(CONCAT(RIGHT(TRIM(PR_CURRENT_SCH_MONTH),4),'-',CASE WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Jan' THEN '01'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Feb' THEN '02'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Mar' THEN '03'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Apr' THEN '04'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'May' THEN '05'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Jun' THEN '06'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Jul' THEN '07'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Aug' THEN '08'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Sep' THEN '09'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Oct' THEN '10'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Nov' THEN '11'  WHEN SUBSTRING(TRIM(PR_CURRENT_SCH_MONTH),1,3) = 'Dec' THEN '12' ELSE '0' END,'-01'))");

            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_REQ_MTH_LAST_DDMMYY ='0000-00-00' WHERE PR_REQUESTED_MONTH IS NULL OR PR_REQUESTED_MONTH ='' OR PR_REQUESTED_MONTH ='0'");

            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_OC_LAST_DDMMYY ='0000-00-00' WHERE PR_OC_MONTHYEAR IS NULL OR PR_OC_MONTHYEAR ='' OR PR_OC_MONTHYEAR ='0'");

            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_CURRENT_SCH_LAST_DDMMYY ='0000-00-00' WHERE PR_CURRENT_SCH_MONTH IS NULL OR PR_CURRENT_SCH_MONTH ='' OR PR_CURRENT_SCH_MONTH ='0'");

            // data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'BOOKING',PR_WIP_STATUS = 'ACCEPTED' WHERE  PR_WARP_DATE ='0000-00-00' AND PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' AND PR_INVOICE_DATE ='0000-00-00' AND  PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)");
            //  data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'PLANNING',PR_WIP_STATUS = 'CONFIRMED' WHERE  PR_WARP_DATE ='0000-00-00' AND PR_MND_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00' AND PR_INVOICE_DATE ='0000-00-00' AND PR_OC_LAST_DDMMYY >= '2018-12-31' AND  PR_PRIORITY_HOLD_CAN_FLAG  IN (0,1,2,3,4,5) AND PR_PIECE_STAGE !='GIDC' ");
            //  data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_PIECE_STAGE = 'BOOKING',WIP_STATUS = 'ACCEPTED' WHERE  WIP_WARP_DATE ='0000-00-00' AND WIP_MND_DATE ='0000-00-00' AND WIP_WVG_DATE ='0000-00-00' AND WIP_NDL_DATE ='0000-00-00' AND WIP_FNSG_DATE ='0000-00-00' AND  WIP_PRIORITY_HOLD_CAN_FLAG  IN (0,1,2,3,4,5)");
            //   data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_PIECE_STAGE = 'PLANNING',WIP_STATUS = 'CONFIRMED' WHERE  WIP_WARP_DATE ='0000-00-00' AND WIP_MND_DATE ='0000-00-00' AND WIP_WVG_DATE ='0000-00-00' AND WIP_NDL_DATE ='0000-00-00' AND WIP_FNSG_DATE ='0000-00-00' AND WIP_OC_LAST_DDMMYY >= '2018-12-31' AND  WIP_PRIORITY_HOLD_CAN_FLAG  IN (0,1,2,3,4,5)");
            data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER SET WIP_PIECE_STAGE = 'CANCELED',WIP_STATUS = 'CANCELED' WHERE WIP_PRIORITY_HOLD_CAN_FLAG  IN (9) ");

            data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE = 'CANCELED',PR_WIP_STATUS = 'CANCELED' WHERE PR_PRIORITY_HOLD_CAN_FLAG  IN (9) ");

            //  data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER P SET PR_PIECE_STAGE ='FINISHING',PR_WIP_STATUS = 'RE-PROCESS'  WHERE PR_GROUP ='SDF' AND PR_PRIORITY_HOLD_CAN_FLAG =5 AND RIGHT(PR_PIECE_NO,2) ='RV' AND PR_WARP_DATE ='0000-00-00' AND PR_WVG_DATE ='0000-00-00'  AND PR_MND_DATE ='0000-00-00' AND PR_NDL_DATE ='0000-00-00' AND PR_FNSG_DATE ='0000-00-00'  AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','FINISHING')");
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            System.out.println("Run Successfully....!");
        }
    }

    /*public frmChangePassword() {
     setSize(430,250);
     initComponents();
     lblUser.setText(clsUser.getUserName(SDMLERPGLOBAL.gCompanyID,SDMLERPGLOBAL.gUserID));
     }*/
    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        misaginggrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtlengthto = new javax.swing.JTextField();
        txtlengthfrom = new javax.swing.JTextField();
        txtwidthfrom = new javax.swing.JTextField();
        txtwidthto = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtgsmfrom = new javax.swing.JTextField();
        txtgsmto = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        txtpieceno = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtproductcode = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtdatefrom = new javax.swing.JTextField();
        txtdateto = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        REGION = new javax.swing.JComboBox();
        S_ENGINEER = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtMachineNo = new javax.swing.JTextField();
        txtPosition = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        PendingList = new javax.swing.JPanel();
        jScrollPane29 = new javax.swing.JScrollPane();
        Table_PendingList = new javax.swing.JTable();
        SHOW_BTN_PendingList = new javax.swing.JButton();
        PieceStage2 = new javax.swing.JButton();
        cmbPLOrderBy = new javax.swing.JComboBox();
        jLabel88 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        jLabel97 = new javax.swing.JLabel();
        cmbUserList = new javax.swing.JComboBox();
        jLabel98 = new javax.swing.JLabel();
        cmbModuleList = new javax.swing.JComboBox();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane27 = new javax.swing.JScrollPane();
        TablePieceStage = new javax.swing.JTable();
        SHOW_BTN_PIECE_STAGE = new javax.swing.JButton();
        PieceStage = new javax.swing.JButton();
        BTN_SORT_DATA_PIECE_STAGE = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        WIPSalesPanel = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        TableProduction = new javax.swing.JTable();
        btnProduction = new javax.swing.JButton();
        Export_Production1 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        txtTotalWeight_production2 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtTotalAmount_production2 = new javax.swing.JTextField();
        cmbProductionStatus = new javax.swing.JComboBox();
        cmbProductionStage = new javax.swing.JComboBox();
        rbtnWIPStatus = new javax.swing.JRadioButton();
        rbtnPieceStage = new javax.swing.JRadioButton();
        BTN_SORT_DATA_WIP = new javax.swing.JButton();
        WIP_Production = new javax.swing.JPanel();
        jScrollPane43 = new javax.swing.JScrollPane();
        TableWIPProd_Production = new javax.swing.JTable();
        btnWIPProd_Production = new javax.swing.JButton();
        Export_WIPProd_Production = new javax.swing.JButton();
        jLabel110 = new javax.swing.JLabel();
        txtWIPProd_TotalWeight_production = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        txtWIPProd_TotalAmount_production = new javax.swing.JTextField();
        cmbWIPProd_WIPStatus = new javax.swing.JComboBox();
        cmbWIPProd_ProductionStage = new javax.swing.JComboBox();
        rbtnWIPProd_WIPStatus = new javax.swing.JRadioButton();
        rbtnWIPProd_PieceStage = new javax.swing.JRadioButton();
        BTN_SORT_DATA_WIP1 = new javax.swing.JButton();
        rbtnWIP_ProdView = new javax.swing.JRadioButton();
        rbtnWIP_SalesView = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel92 = new javax.swing.JLabel();
        btnShowPieceDetails_WIP = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        SHOW_BTN = new javax.swing.JButton();
        Export_Order = new javax.swing.JButton();
        ORDER_TEXT = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtTotalWeight_order = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtTotalAmount_order = new javax.swing.JTextField();
        cmbOrder = new javax.swing.JComboBox();
        jLabel77 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_Order_Register = new javax.swing.JTable();
        SHOW_BTN1 = new javax.swing.JButton();
        Export_Order1 = new javax.swing.JButton();
        BTN_SORT_DATA_PR2 = new javax.swing.JButton();
        withBlankPiece = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        Table_STOCK = new javax.swing.JTable();
        Export_Stock = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtTotalWeight_stock = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTotalAmount_stock = new javax.swing.JTextField();
        jLabel94 = new javax.swing.JLabel();
        txtTotalBillWeight_stock = new javax.swing.JTextField();
        SHOW_BTN_STOCK = new javax.swing.JButton();
        BTN_SORT_DATA_STOCK = new javax.swing.JButton();
        jLabel112 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        btnShowPieceDetail_STOCK = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane34 = new javax.swing.JScrollPane();
        Table_OSGSTOCK = new javax.swing.JTable();
        SHOW_BTN_OSGSTOCK = new javax.swing.JButton();
        Export_OSGStock = new javax.swing.JButton();
        BTN_SORT_DATA_OSGSTOCK = new javax.swing.JButton();
        jLabel99 = new javax.swing.JLabel();
        txtTotalWeight_OSGstock = new javax.swing.JTextField();
        jLabel101 = new javax.swing.JLabel();
        txtTotalAmount_OSGstock = new javax.swing.JTextField();
        jLabel104 = new javax.swing.JLabel();
        txtTotalBillWeight_OSGstock = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Table_BSR = new javax.swing.JTable();
        SHOW_BTN_BSR = new javax.swing.JButton();
        Export_BSR = new javax.swing.JButton();
        jLabel86 = new javax.swing.JLabel();
        cmbBSRStatus = new javax.swing.JComboBox();
        jLabel87 = new javax.swing.JLabel();
        cmbBSROrderBy = new javax.swing.JComboBox();
        jLabel41 = new javax.swing.JLabel();
        txtTotalWeight_bsr = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        txtTotalBillWeight_bsr = new javax.swing.JTextField();
        jLabel95 = new javax.swing.JLabel();
        txtBsrTotalInvAmt = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane33 = new javax.swing.JScrollPane();
        TableGR = new javax.swing.JTable();
        btnGR = new javax.swing.JButton();
        Export_GR = new javax.swing.JButton();
        jLabel100 = new javax.swing.JLabel();
        txtGRTotalAmt = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        cmbGRStatus = new javax.swing.JComboBox();
        jLabel103 = new javax.swing.JLabel();
        cmbGROrderBy = new javax.swing.JComboBox();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table_INVOICED = new javax.swing.JTable();
        SHOW_BTN_INVOICED = new javax.swing.JButton();
        Export_INVOICED = new javax.swing.JButton();
        jLabel45 = new javax.swing.JLabel();
        txtTotalWeight_INV = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        txtTotalAmount_INV = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        cmbInvStatus = new javax.swing.JComboBox();
        cmbInvOrderBy = new javax.swing.JComboBox();
        jLabel85 = new javax.swing.JLabel();
        jLabel113 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        InvParaModiPanel = new javax.swing.JPanel();
        jScrollPane28 = new javax.swing.JScrollPane();
        TableInvoiceParameterModi = new javax.swing.JTable();
        cmbInvoiceParameterModi = new javax.swing.JButton();
        PieceStage1 = new javax.swing.JButton();
        cmbInvoiceParameterModification = new javax.swing.JComboBox();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jLabel78 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        txtBaleNo = new javax.swing.JTextField();
        PaymentReceiptPanel = new javax.swing.JPanel();
        jScrollPane35 = new javax.swing.JScrollPane();
        TablePR = new javax.swing.JTable();
        btnPR = new javax.swing.JButton();
        Export_PR = new javax.swing.JButton();
        jLabel107 = new javax.swing.JLabel();
        cmbPROrderBy = new javax.swing.JComboBox();
        FinishedVSInvoicedPanel = new javax.swing.JPanel();
        jScrollPane36 = new javax.swing.JScrollPane();
        TableFnsdvsInv = new javax.swing.JTable();
        btnFnsdvsInv = new javax.swing.JButton();
        Export_FnsdvsInv = new javax.swing.JButton();
        jLabel108 = new javax.swing.JLabel();
        cmbFnsdvsInvOrderBy = new javax.swing.JComboBox();
        DiversionListPanel = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        Table_DIV_LIST = new javax.swing.JTable();
        SHOW_BTN_DIV_LIST = new javax.swing.JButton();
        Export_Div_List = new javax.swing.JButton();
        BTN_SORT_DATA_DIV_LIST = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        txtTotalWeight_DLIST = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtTotalAmount_DLIST = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        cmbProductionStageDivList = new javax.swing.JComboBox();
        jPanel26 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        Table_Diversion = new javax.swing.JTable();
        SHOW_BTN_DIVERSION = new javax.swing.JButton();
        Export_Diversion = new javax.swing.JButton();
        jLabel89 = new javax.swing.JLabel();
        cmbDiversionStatus = new javax.swing.JComboBox();
        cmbDiversionOrderBy = new javax.swing.JComboBox();
        jLabel90 = new javax.swing.JLabel();
        DivertedPanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        Table_DIVERTED = new javax.swing.JTable();
        SHOW_BTN_DIVERTED = new javax.swing.JButton();
        Export_Diverted = new javax.swing.JButton();
        BTN_SORT_DATA_DIVERTED = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        txtTotalWeight_DIV = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtTotalAmount_DIV = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        Table_CANCELLED = new javax.swing.JTable();
        SHOW_BTN_CANCELLED = new javax.swing.JButton();
        Export_Cancelled = new javax.swing.JButton();
        BTN_SORT_DATA_CAN = new javax.swing.JButton();
        jLabel68 = new javax.swing.JLabel();
        txtTotalWeight_CAN = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane32 = new javax.swing.JScrollPane();
        Table_Delink = new javax.swing.JTable();
        SHOW_BTN_Delink = new javax.swing.JButton();
        Export_Div_List1 = new javax.swing.JButton();
        BTN_SORT_DATA_OBSOLETE = new javax.swing.JButton();
        cmbProductionStageObsolete = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        HoldPanel = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        Table_HOLD = new javax.swing.JTable();
        SHOW_BTN_HOLD = new javax.swing.JButton();
        Export_Hold = new javax.swing.JButton();
        BTN_SORT_DATA_HOLD = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        txtTotalWeight_HOLD = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        txtTotalAmount_HOLD = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane26 = new javax.swing.JScrollPane();
        Table_EXP_INVOICE = new javax.swing.JTable();
        SHOW_BTN_EXP_INVOICE = new javax.swing.JButton();
        Export_Invoice = new javax.swing.JButton();
        BTN_SORT_DATA_EXP_INVOICE = new javax.swing.JButton();
        jLabel74 = new javax.swing.JLabel();
        txtTotalWeight_Exp_Inv = new javax.swing.JTextField();
        jLabel75 = new javax.swing.JLabel();
        txtTotalAmount_Exp_Inv = new javax.swing.JTextField();
        MachinePanel = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        TableMachine = new javax.swing.JTable();
        cmdShowMachine = new javax.swing.JButton();
        txtMachineTotal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cmbMachine = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        CmdmachineExportExcel = new javax.swing.JButton();
        jLabel106 = new javax.swing.JLabel();
        cmbMachineType = new javax.swing.JComboBox();
        DiscountPanel = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        TableDiscount = new javax.swing.JTable();
        cmdShowDiscont = new javax.swing.JButton();
        txtDiscountTotal = new javax.swing.JTextField();
        jLabel70 = new javax.swing.JLabel();
        cmbDiscount = new javax.swing.JComboBox();
        jLabel71 = new javax.swing.JLabel();
        CmdDiscountExportExcel = new javax.swing.JButton();
        SalesPartyMasterPanel = new javax.swing.JPanel();
        jScrollPane25 = new javax.swing.JScrollPane();
        TableSalesParty = new javax.swing.JTable();
        cmdShowSalesParty = new javax.swing.JButton();
        txtSalesPartyTotal = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        cmbSalesParty = new javax.swing.JComboBox();
        jLabel73 = new javax.swing.JLabel();
        CmdSalesPartyExportExcel = new javax.swing.JButton();
        jLabel109 = new javax.swing.JLabel();
        cmbPartyType = new javax.swing.JComboBox();
        ContactsPanel = new javax.swing.JPanel();
        cmdShowContacts = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        TableContacts = new javax.swing.JTable();
        jLabel66 = new javax.swing.JLabel();
        txtcontactstotal = new javax.swing.JTextField();
        cmdcontactsExporttoExcel = new javax.swing.JButton();
        jLabel118 = new javax.swing.JLabel();
        txtATotal = new javax.swing.JTextField();
        jLabel119 = new javax.swing.JLabel();
        txtIATotal = new javax.swing.JTextField();
        txtMCTotal = new javax.swing.JTextField();
        jLabel120 = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        cmbPartyTagInd = new javax.swing.JComboBox();
        jLabel121 = new javax.swing.JLabel();
        txtTCTotal = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        SalesPanel = new javax.swing.JPanel();
        cmdshowSalesY = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        TableSalesY = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        TableSalesM = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        txtsalestotal = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        txtsalestotal1 = new javax.swing.JTextField();
        cmdsalesyrExporttoExcel = new javax.swing.JButton();
        cmdsalesmonthExportToExcel = new javax.swing.JButton();
        ExportSalesPanel = new javax.swing.JPanel();
        cmdshowSalesExpY = new javax.swing.JButton();
        jScrollPane30 = new javax.swing.JScrollPane();
        TableSalesExpY = new javax.swing.JTable();
        jScrollPane38 = new javax.swing.JScrollPane();
        TableSalesExpM = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        txtsalesexptotal = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        txtsalesexptotal1 = new javax.swing.JTextField();
        cmdsalesExpyrExporttoExcel = new javax.swing.JButton();
        cmdsalesExpmonthExportToExcel = new javax.swing.JButton();
        AgeingPanel = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        TableAgeing = new javax.swing.JTable();
        cmdShowAgeing = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        txtageingtotal = new javax.swing.JTextField();
        txtless45counttotal = new javax.swing.JTextField();
        txtless90counttotal = new javax.swing.JTextField();
        txtless180counttotal = new javax.swing.JTextField();
        txtless365counttotal = new javax.swing.JTextField();
        txtless730counttotal = new javax.swing.JTextField();
        txtmore730counttotal = new javax.swing.JTextField();
        txtlesscounttotal = new javax.swing.JTextField();
        txtless45qtytotal = new javax.swing.JTextField();
        txtless90qtytotal = new javax.swing.JTextField();
        txtless180qtytotal = new javax.swing.JTextField();
        txtless365qtytotal = new javax.swing.JTextField();
        txtless730qtytotal = new javax.swing.JTextField();
        txtmore730qtytotal = new javax.swing.JTextField();
        txtlessqtytotal = new javax.swing.JTextField();
        txtless45amttotal = new javax.swing.JTextField();
        txtless90amttotal = new javax.swing.JTextField();
        txtless180amttotal = new javax.swing.JTextField();
        txtless365amttotal = new javax.swing.JTextField();
        txtless730amttotal = new javax.swing.JTextField();
        txtmore730amttotal = new javax.swing.JTextField();
        txtlessamttotal = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        cmdAgeingExportToExcel = new javax.swing.JButton();
        MisageingPanel = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        TableMISAgeing = new javax.swing.JTable();
        cmdShowMISAgeing = new javax.swing.JButton();
        jScrollPane20 = new javax.swing.JScrollPane();
        TableMISAgeing1 = new javax.swing.JTable();
        jLabel62 = new javax.swing.JLabel();
        txtmisageingtotal = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        txtmisageingtotal1 = new javax.swing.JTextField();
        txtamttotal = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        txtqtytotal = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        txtcounttotal = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        cmdMISAgeingExportToExcel = new javax.swing.JButton();
        cmdmisagingaExportToExcel = new javax.swing.JButton();
        withoutobsolete = new javax.swing.JRadioButton();
        withobsolete = new javax.swing.JRadioButton();
        MFGRejectionPanel = new javax.swing.JPanel();
        jScrollPane31 = new javax.swing.JScrollPane();
        TablePieceMFGRejection = new javax.swing.JTable();
        cmbCobolErp1 = new javax.swing.JButton();
        PieceMFGRejection = new javax.swing.JButton();
        cmbPieceMFGRejection = new javax.swing.JComboBox();
        jLabel93 = new javax.swing.JLabel();
        WIPReViewReportPanel = new javax.swing.JPanel();
        Export_Production2 = new javax.swing.JButton();
        jScrollPane37 = new javax.swing.JScrollPane();
        WIP_Piece_Review = new javax.swing.JTable();
        btnShowWIPPiece = new javax.swing.JButton();
        btnReviewStatus = new javax.swing.JComboBox();
        jLabel105 = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane39 = new javax.swing.JScrollPane();
        TableGIDC_SDF = new javax.swing.JTable();
        btnGIDC_SDF = new javax.swing.JButton();
        Export_GIDC_SDF = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        txtTotalWeight_GIDC_SDF = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtTotalAmount_GIDC_SDF = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        cmbGIDCStatus = new javax.swing.JComboBox();
        OrderConfirmationPanel = new javax.swing.JPanel();
        jScrollPane40 = new javax.swing.JScrollPane();
        TablePieceStage1 = new javax.swing.JTable();
        SHOW_BTN_PIECE_STAGE1 = new javax.swing.JButton();
        PieceStage3 = new javax.swing.JButton();
        BTN_SORT_DATA_PIECE_STAGE1 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        cmbocmonth = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        cmbstage = new javax.swing.JComboBox();
        jPanel29 = new javax.swing.JPanel();
        jScrollPane41 = new javax.swing.JScrollPane();
        TableCS = new javax.swing.JTable();
        SHOW_BTN_CS = new javax.swing.JButton();
        Export_CS = new javax.swing.JButton();
        BTN_SORT_DATA_CS = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        cmbCSMonth = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        cmbCSStage = new javax.swing.JComboBox();
        jLabel69 = new javax.swing.JLabel();
        cmbCSOCmonth = new javax.swing.JComboBox();
        jLabel80 = new javax.swing.JLabel();
        cmbCSSpillMonth = new javax.swing.JComboBox();
        jLabel91 = new javax.swing.JLabel();
        cmbCSSPOmonth = new javax.swing.JComboBox();
        Capacityplanning = new javax.swing.JPanel();
        jScrollPane42 = new javax.swing.JScrollPane();
        TableCapacityPlanning = new javax.swing.JTable();
        SHOW_BTN_CAPACITY = new javax.swing.JButton();
        cmbcapacityxls = new javax.swing.JButton();
        cmbcapacityreqmonth = new javax.swing.JComboBox();
        cmbcapacityOCmonth = new javax.swing.JComboBox();
        rbtnReqMonth = new javax.swing.JRadioButton();
        rbtnOCMonth = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane44 = new javax.swing.JScrollPane();
        Table_STOCK_DFS = new javax.swing.JTable();
        Export_Stock_DFS = new javax.swing.JButton();
        jLabel114 = new javax.swing.JLabel();
        txtTotalWeight_stock_DFS = new javax.swing.JTextField();
        jLabel115 = new javax.swing.JLabel();
        txtTotalAmount_stock_DFS = new javax.swing.JTextField();
        jLabel116 = new javax.swing.JLabel();
        txtTotalBillWeight_stock_DFS = new javax.swing.JTextField();
        SHOW_BTN_STOCK_DFS = new javax.swing.JButton();
        BTN_SORT_DATA_STOCK_DFS = new javax.swing.JButton();
        jLabel117 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        PANBaseTO = new javax.swing.JPanel();
        cmdShowPAN = new javax.swing.JButton();
        jScrollPane45 = new javax.swing.JScrollPane();
        TablePAN = new javax.swing.JTable();
        cmdPANExporttoExcel = new javax.swing.JButton();
        PartyStatus = new javax.swing.JPanel();
        jScrollPane46 = new javax.swing.JScrollPane();
        TablePartyStatus = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        BtnView = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        CLR_BTN = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtgroupcode = new javax.swing.JTextField();
        txtgroupname = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtupnno = new javax.swing.JTextField();
        txtpartycode = new javax.swing.JTextField();
        txtpartyind = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        chkKeyClientInd = new javax.swing.JCheckBox();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Advance Search - Felt Sales Information System");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1000, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 120, 1000, 10);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Party Code");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 90, 20);

        txtlengthto = new JTextFieldHint(new JTextField(),"To");
        getContentPane().add(txtlengthto);
        txtlengthto.setBounds(170, 70, 50, 20);

        txtlengthfrom = new JTextFieldHint(new JTextField(),"From");
        getContentPane().add(txtlengthfrom);
        txtlengthfrom.setBounds(110, 70, 50, 20);

        txtwidthfrom = new JTextFieldHint(new JTextField(),"From");
        getContentPane().add(txtwidthfrom);
        txtwidthfrom.setBounds(320, 70, 50, 20);

        txtwidthto = new JTextFieldHint(new JTextField(),"To");
        getContentPane().add(txtwidthto);
        txtwidthto.setBounds(380, 70, 50, 20);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Length (M)");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(10, 70, 90, 20);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Width (M)");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(220, 70, 90, 20);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("GSM");
        getContentPane().add(jLabel20);
        jLabel20.setBounds(450, 70, 50, 20);

        txtgsmfrom = new JTextFieldHint(new JTextField(),"From");
        getContentPane().add(txtgsmfrom);
        txtgsmfrom.setBounds(510, 70, 50, 20);

        txtgsmto = new JTextFieldHint(new JTextField(),"To");
        getContentPane().add(txtgsmto);
        txtgsmto.setBounds(570, 70, 50, 20);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Piece No");
        getContentPane().add(jLabel34);
        jLabel34.setBounds(9, 90, 90, 20);

        txtpieceno = new JTextFieldHint(new JTextField(),"Multiple Selection Seprated by comma(,) ");
        txtpieceno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpiecenoFocusLost(evt);
            }
        });
        getContentPane().add(txtpieceno);
        txtpieceno.setBounds(110, 90, 180, 20);

        jLabel35.setText("Product Code");
        getContentPane().add(jLabel35);
        jLabel35.setBounds(310, 90, 120, 20);

        txtproductcode.setToolTipText("Press F! key to search Product Code");
        txtproductcode = new JTextFieldHint(new JTextField(),"Search By Press F1");
        txtproductcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtproductcodeActionPerformed(evt);
            }
        });
        txtproductcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtproductcodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtproductcode);
        txtproductcode.setBounds(410, 90, 170, 20);

        jLabel26.setText("Zone");
        getContentPane().add(jLabel26);
        jLabel26.setBounds(600, 30, 40, 20);

        jLabel13.setText("Date");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(710, 20, 50, 40);

        txtdatefrom = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        getContentPane().add(txtdatefrom);
        txtdatefrom.setBounds(760, 30, 100, 20);

        txtdateto = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        getContentPane().add(txtdateto);
        txtdateto.setBounds(890, 30, 100, 20);

        jLabel14.setText("To");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(870, 20, 20, 40);

        jLabel76.setText("Incharge");
        getContentPane().add(jLabel76);
        jLabel76.setBounds(630, 90, 70, 20);

        REGION.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "EZ", "WZ", "SZ", "NZ" }));
        getContentPane().add(REGION);
        REGION.setBounds(640, 30, 60, 20);

        S_ENGINEER.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Sales Eng 1", "Sales Eng 2", "Sales Eng 3" }));
        getContentPane().add(S_ENGINEER);
        S_ENGINEER.setBounds(700, 90, 150, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Machine No");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(440, 50, 80, 20);

        txtMachineNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtMachineNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMachineNoKeyPressed(evt);
            }
        });
        getContentPane().add(txtMachineNo);
        txtMachineNo.setBounds(530, 50, 40, 20);

        txtPosition = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPositionKeyPressed(evt);
            }
        });
        getContentPane().add(txtPosition);
        txtPosition.setBounds(660, 50, 40, 20);

        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });
        jTabbedPane2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTabbedPane2KeyPressed(evt);
            }
        });

        PendingList.setLayout(null);

        Table_PendingList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_PendingList.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_PendingList.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_PendingList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_PendingListKeyPressed(evt);
            }
        });
        jScrollPane29.setViewportView(Table_PendingList);

        PendingList.add(jScrollPane29);
        jScrollPane29.setBounds(10, 80, 930, 260);

        SHOW_BTN_PendingList.setText("Show List");
        SHOW_BTN_PendingList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_PendingListActionPerformed(evt);
            }
        });
        PendingList.add(SHOW_BTN_PendingList);
        SHOW_BTN_PendingList.setBounds(800, 40, 130, 30);

        PieceStage2.setText("EXPORT TO EXCEL");
        PieceStage2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieceStage2ActionPerformed(evt);
            }
        });
        PendingList.add(PieceStage2);
        PieceStage2.setBounds(770, 350, 170, 25);
        PendingList.add(cmbPLOrderBy);
        cmbPLOrderBy.setBounds(800, 10, 130, 30);

        jLabel88.setText("Order By :");
        PendingList.add(jLabel88);
        jLabel88.setBounds(720, 10, 80, 30);

        jLabel96.setText("Type : ");
        PendingList.add(jLabel96);
        jLabel96.setBounds(10, 10, 47, 30);

        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Userwise Modulewise Summary", "Modulewise Userwise Summary", "Detail" }));
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });
        PendingList.add(cmbType);
        cmbType.setBounds(60, 10, 260, 30);

        jLabel97.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel97.setText("User List :");
        PendingList.add(jLabel97);
        jLabel97.setBounds(340, 10, 120, 30);

        cmbUserList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select User" }));
        PendingList.add(cmbUserList);
        cmbUserList.setBounds(470, 10, 230, 30);

        jLabel98.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel98.setText("Module List :");
        jLabel98.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel98MouseEntered(evt);
            }
        });
        PendingList.add(jLabel98);
        jLabel98.setBounds(330, 40, 130, 30);

        cmbModuleList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Module" }));
        PendingList.add(cmbModuleList);
        cmbModuleList.setBounds(470, 40, 230, 30);

        jTabbedPane2.addTab("Document Approval Pending list", PendingList);

        jPanel16.setLayout(null);

        TablePieceStage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePieceStage.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TablePieceStage.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TablePieceStage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePieceStageKeyPressed(evt);
            }
        });
        jScrollPane27.setViewportView(TablePieceStage);

        jPanel16.add(jScrollPane27);
        jScrollPane27.setBounds(10, 50, 930, 280);

        SHOW_BTN_PIECE_STAGE.setText("Show List");
        SHOW_BTN_PIECE_STAGE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_PIECE_STAGEActionPerformed(evt);
            }
        });
        jPanel16.add(SHOW_BTN_PIECE_STAGE);
        SHOW_BTN_PIECE_STAGE.setBounds(810, 10, 130, 30);

        PieceStage.setText("EXPORT TO EXCEL");
        PieceStage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieceStageActionPerformed(evt);
            }
        });
        jPanel16.add(PieceStage);
        PieceStage.setBounds(770, 340, 170, 25);

        BTN_SORT_DATA_PIECE_STAGE.setText("SORT DATA");
        BTN_SORT_DATA_PIECE_STAGE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_PIECE_STAGEActionPerformed(evt);
            }
        });
        jPanel16.add(BTN_SORT_DATA_PIECE_STAGE);
        BTN_SORT_DATA_PIECE_STAGE.setBounds(670, 10, 120, 25);

        jButton1.setText("Show Piece Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton1);
        jButton1.setBounds(544, 340, 210, 25);

        jTabbedPane2.addTab("Piece Stage", jPanel16);

        WIPSalesPanel.setLayout(null);

        TableProduction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableProduction.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableProduction.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableProduction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableProductionKeyPressed(evt);
            }
        });
        jScrollPane16.setViewportView(TableProduction);

        WIPSalesPanel.add(jScrollPane16);
        jScrollPane16.setBounds(0, 50, 940, 330);

        btnProduction.setText("Show List");
        btnProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductionActionPerformed(evt);
            }
        });
        WIPSalesPanel.add(btnProduction);
        btnProduction.setBounds(800, 10, 130, 30);

        Export_Production1.setText("EXPORT TO EXCEL");
        Export_Production1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_Production1ActionPerformed(evt);
            }
        });
        WIPSalesPanel.add(Export_Production1);
        Export_Production1.setBounds(770, 390, 170, 25);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("TOTAL WEIGHT");
        WIPSalesPanel.add(jLabel23);
        jLabel23.setBounds(240, 390, 130, 30);
        WIPSalesPanel.add(txtTotalWeight_production2);
        txtTotalWeight_production2.setBounds(380, 390, 110, 19);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("TOTAL AMOUNT");
        WIPSalesPanel.add(jLabel24);
        jLabel24.setBounds(490, 390, 130, 30);
        WIPSalesPanel.add(txtTotalAmount_production2);
        txtTotalAmount_production2.setBounds(630, 390, 110, 30);

        cmbProductionStatus.setMaximumRowCount(10);
        cmbProductionStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "ACCEPTED", "CONFIRMED", "WARPED", "WOVEN", "SPLICED", "MENDED", "NEEDLED", "SEAMED", "FINISHED", "RE-PROCESS", "GIDC" }));
        cmbProductionStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductionStatusItemStateChanged(evt);
            }
        });
        cmbProductionStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProductionStatusActionPerformed(evt);
            }
        });
        WIPSalesPanel.add(cmbProductionStatus);
        cmbProductionStatus.setBounds(290, 10, 130, 30);

        cmbProductionStage.setMaximumRowCount(10);
        cmbProductionStage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "BOOKING", "PLANNING", "WEAVING", "SPLICING", "MENDING", "NEEDLING", "SEAMING", "FINISHING", "GIDC" }));
        cmbProductionStage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductionStageItemStateChanged(evt);
            }
        });
        cmbProductionStage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProductionStageActionPerformed(evt);
            }
        });
        WIPSalesPanel.add(cmbProductionStage);
        cmbProductionStage.setBounds(290, 10, 130, 30);

        buttonGroup1.add(rbtnWIPStatus);
        rbtnWIPStatus.setText("WIP Status");
        rbtnWIPStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnWIPStatusMouseClicked(evt);
            }
        });
        WIPSalesPanel.add(rbtnWIPStatus);
        rbtnWIPStatus.setBounds(10, 10, 140, 23);

        buttonGroup1.add(rbtnPieceStage);
        rbtnPieceStage.setText("Piece Stage");
        rbtnPieceStage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnPieceStageMouseClicked(evt);
            }
        });
        WIPSalesPanel.add(rbtnPieceStage);
        rbtnPieceStage.setBounds(150, 10, 130, 23);

        BTN_SORT_DATA_WIP.setText("SORT DATA");
        BTN_SORT_DATA_WIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_WIPActionPerformed(evt);
            }
        });
        WIPSalesPanel.add(BTN_SORT_DATA_WIP);
        BTN_SORT_DATA_WIP.setBounds(670, 10, 120, 25);

        jTabbedPane2.addTab("WIP-Sales", WIPSalesPanel);

        WIP_Production.setLayout(null);

        TableWIPProd_Production.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableWIPProd_Production.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableWIPProd_Production.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableWIPProd_Production.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableWIPProd_ProductionKeyPressed(evt);
            }
        });
        jScrollPane43.setViewportView(TableWIPProd_Production);

        WIP_Production.add(jScrollPane43);
        jScrollPane43.setBounds(0, 70, 940, 310);

        btnWIPProd_Production.setText("Show List");
        btnWIPProd_Production.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWIPProd_ProductionActionPerformed(evt);
            }
        });
        WIP_Production.add(btnWIPProd_Production);
        btnWIPProd_Production.setBounds(800, 10, 130, 30);

        Export_WIPProd_Production.setText("EXPORT TO EXCEL");
        Export_WIPProd_Production.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_WIPProd_ProductionActionPerformed(evt);
            }
        });
        WIP_Production.add(Export_WIPProd_Production);
        Export_WIPProd_Production.setBounds(770, 390, 170, 25);

        jLabel110.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel110.setText("TOTAL WEIGHT");
        WIP_Production.add(jLabel110);
        jLabel110.setBounds(240, 390, 130, 30);
        WIP_Production.add(txtWIPProd_TotalWeight_production);
        txtWIPProd_TotalWeight_production.setBounds(380, 390, 110, 19);

        jLabel111.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel111.setText("TOTAL AMOUNT");
        WIP_Production.add(jLabel111);
        jLabel111.setBounds(490, 390, 130, 30);
        WIP_Production.add(txtWIPProd_TotalAmount_production);
        txtWIPProd_TotalAmount_production.setBounds(630, 390, 110, 30);

        cmbWIPProd_WIPStatus.setMaximumRowCount(10);
        cmbWIPProd_WIPStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "ACCEPTED", "CONFIRMED", "WARPED", "WOVEN", "SPLICED", "MENDED", "NEEDLED", "SEAMED", "WAIT_FOR_SPIRAL", "SPIRALED", "ASSEMBLED", "FINISHED", "RE-PROCESS", "GIDC", "HEAT_SET", "MARKED", "SPLICED" }));
        cmbWIPProd_WIPStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbWIPProd_WIPStatusItemStateChanged(evt);
            }
        });
        cmbWIPProd_WIPStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbWIPProd_WIPStatusActionPerformed(evt);
            }
        });
        WIP_Production.add(cmbWIPProd_WIPStatus);
        cmbWIPProd_WIPStatus.setBounds(340, 30, 130, 30);

        cmbWIPProd_ProductionStage.setMaximumRowCount(10);
        cmbWIPProd_ProductionStage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "BOOKING", "PLANNING", "WEAVING", "SPLICING", "MENDING", "NEEDLING", "SEAMING", "SPIRALLING", "ASSEMBLY", "FINISHING", "GIDC", "HEAT_SETTING", "MARKING", "SPLICING" }));
        cmbWIPProd_ProductionStage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbWIPProd_ProductionStageItemStateChanged(evt);
            }
        });
        cmbWIPProd_ProductionStage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbWIPProd_ProductionStageActionPerformed(evt);
            }
        });
        WIP_Production.add(cmbWIPProd_ProductionStage);
        cmbWIPProd_ProductionStage.setBounds(340, 30, 130, 30);

        buttonGroup1.add(rbtnWIPProd_WIPStatus);
        rbtnWIPProd_WIPStatus.setSelected(true);
        rbtnWIPProd_WIPStatus.setText("WIP Status");
        rbtnWIPProd_WIPStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnWIPProd_WIPStatusMouseClicked(evt);
            }
        });
        WIP_Production.add(rbtnWIPProd_WIPStatus);
        rbtnWIPProd_WIPStatus.setBounds(10, 40, 140, 23);

        buttonGroup1.add(rbtnWIPProd_PieceStage);
        rbtnWIPProd_PieceStage.setText("Piece Stage");
        rbtnWIPProd_PieceStage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnWIPProd_PieceStageMouseClicked(evt);
            }
        });
        rbtnWIPProd_PieceStage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnWIPProd_PieceStageActionPerformed(evt);
            }
        });
        WIP_Production.add(rbtnWIPProd_PieceStage);
        rbtnWIPProd_PieceStage.setBounds(170, 40, 130, 23);

        BTN_SORT_DATA_WIP1.setText("SORT DATA");
        BTN_SORT_DATA_WIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_WIP1ActionPerformed(evt);
            }
        });
        WIP_Production.add(BTN_SORT_DATA_WIP1);
        BTN_SORT_DATA_WIP1.setBounds(670, 10, 120, 30);

        buttonGroup2.add(rbtnWIP_ProdView);
        rbtnWIP_ProdView.setSelected(true);
        rbtnWIP_ProdView.setText("Production View");
        WIP_Production.add(rbtnWIP_ProdView);
        rbtnWIP_ProdView.setBounds(10, 10, 150, 23);

        buttonGroup2.add(rbtnWIP_SalesView);
        rbtnWIP_SalesView.setText("Sales View");
        WIP_Production.add(rbtnWIP_SalesView);
        rbtnWIP_SalesView.setBounds(170, 10, 130, 23);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(220, 45, 45));
        jTextField1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("OBSOLETE");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        WIP_Production.add(jTextField1);
        jTextField1.setBounds(520, 0, 130, 20);

        jLabel92.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel92.setText("Color Indicates");
        WIP_Production.add(jLabel92);
        jLabel92.setBounds(390, 0, 130, 20);

        btnShowPieceDetails_WIP.setText("Show Piece Details");
        btnShowPieceDetails_WIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPieceDetails_WIPActionPerformed(evt);
            }
        });
        WIP_Production.add(btnShowPieceDetails_WIP);
        btnShowPieceDetails_WIP.setBounds(10, 390, 220, 25);

        jTabbedPane2.addTab("WIP", WIP_Production);

        jPanel1.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 50, 930, 280);

        SHOW_BTN.setText("Show List");
        SHOW_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(SHOW_BTN);
        SHOW_BTN.setBounds(800, 10, 130, 30);

        Export_Order.setText("EXPORT TO EXCEL");
        Export_Order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_OrderActionPerformed(evt);
            }
        });
        jPanel1.add(Export_Order);
        Export_Order.setBounds(760, 350, 170, 25);
        jPanel1.add(ORDER_TEXT);
        ORDER_TEXT.setBounds(90, 20, 580, 30);

        jLabel9.setText("TOTAL WEIGHT");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(290, 360, 130, 15);
        jPanel1.add(txtTotalWeight_order);
        txtTotalWeight_order.setBounds(390, 350, 110, 19);

        jLabel17.setText("TOTAL AMOUNT");
        jPanel1.add(jLabel17);
        jLabel17.setBounds(520, 360, 130, 15);
        jPanel1.add(txtTotalAmount_order);
        txtTotalAmount_order.setBounds(630, 350, 110, 19);
        jPanel1.add(cmbOrder);
        cmbOrder.setBounds(660, 10, 130, 24);

        jLabel77.setText("Order By");
        jPanel1.add(jLabel77);
        jLabel77.setBounds(600, 10, 60, 30);

        jTabbedPane2.addTab("Order Pending", jPanel1);

        jPanel3.setLayout(null);

        Table_Order_Register.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Order_Register.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_Order_Register.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_Order_Register.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_Order_RegisterKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(Table_Order_Register);

        jPanel3.add(jScrollPane3);
        jScrollPane3.setBounds(0, 50, 930, 330);

        SHOW_BTN1.setText("Show List");
        SHOW_BTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN1ActionPerformed(evt);
            }
        });
        jPanel3.add(SHOW_BTN1);
        SHOW_BTN1.setBounds(800, 10, 130, 30);

        Export_Order1.setText("EXPORT TO EXCEL");
        Export_Order1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_Order1ActionPerformed(evt);
            }
        });
        jPanel3.add(Export_Order1);
        Export_Order1.setBounds(760, 400, 170, 25);

        BTN_SORT_DATA_PR2.setText("SORT DATA");
        BTN_SORT_DATA_PR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_PR2ActionPerformed(evt);
            }
        });
        jPanel3.add(BTN_SORT_DATA_PR2);
        BTN_SORT_DATA_PR2.setBounds(680, 10, 110, 25);

        withBlankPiece.setText("with Blank Piece No");
        jPanel3.add(withBlankPiece);
        withBlankPiece.setBounds(450, 10, 180, 23);

        jTabbedPane2.addTab("Order Register", jPanel3);

        jPanel8.setLayout(null);

        Table_STOCK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_STOCK.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_STOCK.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_STOCK.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_STOCKKeyPressed(evt);
            }
        });
        jScrollPane8.setViewportView(Table_STOCK);

        jPanel8.add(jScrollPane8);
        jScrollPane8.setBounds(10, 50, 920, 270);

        Export_Stock.setText("EXPORT TO EXCEL");
        Export_Stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_StockActionPerformed(evt);
            }
        });
        jPanel8.add(Export_Stock);
        Export_Stock.setBounds(760, 330, 170, 25);

        jLabel5.setText("TOTAL WEIGHT");
        jPanel8.add(jLabel5);
        jLabel5.setBounds(30, 340, 130, 15);
        jPanel8.add(txtTotalWeight_stock);
        txtTotalWeight_stock.setBounds(130, 330, 110, 19);

        jLabel8.setText("TOTAL AMOUNT");
        jPanel8.add(jLabel8);
        jLabel8.setBounds(520, 340, 130, 15);
        jPanel8.add(txtTotalAmount_stock);
        txtTotalAmount_stock.setBounds(630, 330, 110, 19);

        jLabel94.setText("TOTAL BILL WEIGHT");
        jPanel8.add(jLabel94);
        jLabel94.setBounds(250, 340, 170, 15);
        jPanel8.add(txtTotalBillWeight_stock);
        txtTotalBillWeight_stock.setBounds(400, 330, 110, 19);

        SHOW_BTN_STOCK.setText("Show List");
        SHOW_BTN_STOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_STOCKActionPerformed(evt);
            }
        });
        jPanel8.add(SHOW_BTN_STOCK);
        SHOW_BTN_STOCK.setBounds(800, 10, 130, 30);

        BTN_SORT_DATA_STOCK.setText("SORT DATA");
        BTN_SORT_DATA_STOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_STOCKActionPerformed(evt);
            }
        });
        jPanel8.add(BTN_SORT_DATA_STOCK);
        BTN_SORT_DATA_STOCK.setBounds(670, 10, 120, 25);

        jLabel112.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel112.setText("Color Indicates");
        jPanel8.add(jLabel112);
        jLabel112.setBounds(360, 0, 130, 20);

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(255, 152, 98));
        jTextField2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("Normal GR");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel8.add(jTextField2);
        jTextField2.setBounds(490, 20, 130, 20);

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(220, 45, 45));
        jTextField3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("OBSOLETE");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jPanel8.add(jTextField3);
        jTextField3.setBounds(360, 20, 130, 20);

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(120, 193, 109));
        jTextField4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField4.setText("F6 GR");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jPanel8.add(jTextField4);
        jTextField4.setBounds(490, 0, 130, 20);

        btnShowPieceDetail_STOCK.setText("Show Piece Details");
        btnShowPieceDetail_STOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowPieceDetail_STOCKActionPerformed(evt);
            }
        });
        jPanel8.add(btnShowPieceDetail_STOCK);
        btnShowPieceDetail_STOCK.setBounds(734, 370, 190, 25);

        jTabbedPane2.addTab("Stock", jPanel8);

        jPanel21.setLayout(null);

        Table_OSGSTOCK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_OSGSTOCK.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_OSGSTOCK.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_OSGSTOCK.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_OSGSTOCKKeyPressed(evt);
            }
        });
        jScrollPane34.setViewportView(Table_OSGSTOCK);

        jPanel21.add(jScrollPane34);
        jScrollPane34.setBounds(10, 50, 920, 310);

        SHOW_BTN_OSGSTOCK.setText("Show List");
        SHOW_BTN_OSGSTOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_OSGSTOCKActionPerformed(evt);
            }
        });
        jPanel21.add(SHOW_BTN_OSGSTOCK);
        SHOW_BTN_OSGSTOCK.setBounds(800, 10, 130, 30);

        Export_OSGStock.setText("EXPORT TO EXCEL");
        Export_OSGStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_OSGStockActionPerformed(evt);
            }
        });
        jPanel21.add(Export_OSGStock);
        Export_OSGStock.setBounds(760, 370, 170, 25);

        BTN_SORT_DATA_OSGSTOCK.setText("SORT DATA");
        BTN_SORT_DATA_OSGSTOCK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_OSGSTOCKActionPerformed(evt);
            }
        });
        jPanel21.add(BTN_SORT_DATA_OSGSTOCK);
        BTN_SORT_DATA_OSGSTOCK.setBounds(680, 10, 110, 25);

        jLabel99.setText("TOTAL WEIGHT");
        jPanel21.add(jLabel99);
        jLabel99.setBounds(30, 380, 130, 15);
        jPanel21.add(txtTotalWeight_OSGstock);
        txtTotalWeight_OSGstock.setBounds(130, 370, 110, 19);

        jLabel101.setText("TOTAL AMOUNT");
        jPanel21.add(jLabel101);
        jLabel101.setBounds(520, 380, 130, 15);
        jPanel21.add(txtTotalAmount_OSGstock);
        txtTotalAmount_OSGstock.setBounds(630, 370, 110, 19);

        jLabel104.setText("TOTAL BILL WEIGHT");
        jPanel21.add(jLabel104);
        jLabel104.setBounds(250, 380, 170, 15);
        jPanel21.add(txtTotalBillWeight_OSGstock);
        txtTotalBillWeight_OSGstock.setBounds(400, 370, 110, 19);

        jTabbedPane2.addTab("OSG Stock", jPanel21);

        jPanel9.setLayout(null);

        Table_BSR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_BSR.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_BSR.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_BSR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_BSRKeyPressed(evt);
            }
        });
        jScrollPane9.setViewportView(Table_BSR);

        jPanel9.add(jScrollPane9);
        jScrollPane9.setBounds(10, 50, 920, 280);

        SHOW_BTN_BSR.setText("Show List");
        SHOW_BTN_BSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_BSRActionPerformed(evt);
            }
        });
        jPanel9.add(SHOW_BTN_BSR);
        SHOW_BTN_BSR.setBounds(800, 10, 130, 30);

        Export_BSR.setText("EXPORT TO EXCEL");
        Export_BSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_BSRActionPerformed(evt);
            }
        });
        jPanel9.add(Export_BSR);
        Export_BSR.setBounds(760, 340, 170, 25);

        jLabel86.setText("Status");
        jPanel9.add(jLabel86);
        jLabel86.setBounds(60, 10, 60, 20);

        cmbBSRStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBSRStatusItemStateChanged(evt);
            }
        });
        jPanel9.add(cmbBSRStatus);
        cmbBSRStatus.setBounds(120, 10, 130, 24);

        jLabel87.setText("Order By");
        jPanel9.add(jLabel87);
        jLabel87.setBounds(590, 10, 60, 30);
        jPanel9.add(cmbBSROrderBy);
        cmbBSROrderBy.setBounds(650, 10, 130, 24);

        jLabel41.setText("TOTAL WEIGHT");
        jPanel9.add(jLabel41);
        jLabel41.setBounds(120, 340, 100, 15);
        jPanel9.add(txtTotalWeight_bsr);
        txtTotalWeight_bsr.setBounds(240, 340, 110, 19);

        jLabel44.setText("TOTAL BILL WEIGHT");
        jPanel9.add(jLabel44);
        jLabel44.setBounds(410, 340, 140, 15);
        jPanel9.add(txtTotalBillWeight_bsr);
        txtTotalBillWeight_bsr.setBounds(560, 340, 110, 19);

        jLabel95.setText("TOTAL INVOICE AMOUNT");
        jPanel9.add(jLabel95);
        jLabel95.setBounds(230, 370, 160, 15);
        jPanel9.add(txtBsrTotalInvAmt);
        txtBsrTotalInvAmt.setBounds(400, 370, 150, 19);

        jTabbedPane2.addTab("BSR", jPanel9);

        jPanel18.setLayout(null);

        TableGR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableGR.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableGR.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableGR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableGRKeyPressed(evt);
            }
        });
        jScrollPane33.setViewportView(TableGR);

        jPanel18.add(jScrollPane33);
        jScrollPane33.setBounds(10, 50, 920, 310);

        btnGR.setText("Show List");
        btnGR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGRActionPerformed(evt);
            }
        });
        jPanel18.add(btnGR);
        btnGR.setBounds(800, 10, 130, 30);

        Export_GR.setText("EXPORT TO EXCEL");
        Export_GR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_GRActionPerformed(evt);
            }
        });
        jPanel18.add(Export_GR);
        Export_GR.setBounds(760, 370, 170, 25);

        jLabel100.setText("TOTAL AMOUNT");
        jPanel18.add(jLabel100);
        jLabel100.setBounds(500, 380, 130, 15);
        jPanel18.add(txtGRTotalAmt);
        txtGRTotalAmt.setBounds(620, 370, 120, 19);

        jLabel102.setText("Status");
        jPanel18.add(jLabel102);
        jLabel102.setBounds(60, 10, 60, 20);

        cmbGRStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Approved", "Unapproved", "Cancelled" }));
        cmbGRStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGRStatusItemStateChanged(evt);
            }
        });
        jPanel18.add(cmbGRStatus);
        cmbGRStatus.setBounds(120, 10, 130, 24);

        jLabel103.setText("Order By");
        jPanel18.add(jLabel103);
        jLabel103.setBounds(580, 10, 60, 30);
        jPanel18.add(cmbGROrderBy);
        cmbGROrderBy.setBounds(650, 10, 130, 24);

        jTabbedPane2.addTab("Goods Return", jPanel18);

        jPanel10.setLayout(null);

        Table_INVOICED.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_INVOICED.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_INVOICED.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_INVOICED.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_INVOICEDKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(Table_INVOICED);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 930, 290);

        SHOW_BTN_INVOICED.setText("Show List");
        SHOW_BTN_INVOICED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_INVOICEDActionPerformed(evt);
            }
        });
        jPanel10.add(SHOW_BTN_INVOICED);
        SHOW_BTN_INVOICED.setBounds(810, 10, 130, 30);

        Export_INVOICED.setText("EXPORT TO EXCEL");
        Export_INVOICED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_INVOICEDActionPerformed(evt);
            }
        });
        jPanel10.add(Export_INVOICED);
        Export_INVOICED.setBounds(760, 350, 170, 25);

        jLabel45.setText("TOTAL WEIGHT");
        jPanel10.add(jLabel45);
        jLabel45.setBounds(290, 360, 130, 20);
        jPanel10.add(txtTotalWeight_INV);
        txtTotalWeight_INV.setBounds(390, 350, 110, 30);

        jLabel46.setText("TOTAL AMOUNT");
        jPanel10.add(jLabel46);
        jLabel46.setBounds(520, 360, 130, 20);
        jPanel10.add(txtTotalAmount_INV);
        txtTotalAmount_INV.setBounds(630, 350, 110, 30);

        jLabel84.setText("Status");
        jPanel10.add(jLabel84);
        jLabel84.setBounds(10, 10, 60, 20);

        cmbInvStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInvStatusItemStateChanged(evt);
            }
        });
        jPanel10.add(cmbInvStatus);
        cmbInvStatus.setBounds(70, 10, 240, 24);

        cmbInvOrderBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInvOrderByActionPerformed(evt);
            }
        });
        jPanel10.add(cmbInvOrderBy);
        cmbInvOrderBy.setBounds(650, 10, 130, 24);

        jLabel85.setText("Order By");
        jPanel10.add(jLabel85);
        jLabel85.setBounds(590, 10, 60, 30);

        jLabel113.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel113.setText("Color Indicates");
        jPanel10.add(jLabel113);
        jLabel113.setBounds(320, 0, 130, 20);

        jTextField5.setEditable(false);
        jTextField5.setBackground(new java.awt.Color(120, 193, 109));
        jTextField5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField5.setText("F6 GR");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField5);
        jTextField5.setBounds(450, 0, 130, 20);

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(255, 152, 98));
        jTextField6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField6.setText("Normal GR");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        jPanel10.add(jTextField6);
        jTextField6.setBounds(450, 20, 130, 20);

        jTabbedPane2.addTab("Invoiced", jPanel10);

        InvParaModiPanel.setLayout(null);

        TableInvoiceParameterModi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableInvoiceParameterModi.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableInvoiceParameterModi.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableInvoiceParameterModi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableInvoiceParameterModiKeyPressed(evt);
            }
        });
        jScrollPane28.setViewportView(TableInvoiceParameterModi);

        InvParaModiPanel.add(jScrollPane28);
        jScrollPane28.setBounds(10, 50, 930, 280);

        cmbInvoiceParameterModi.setText("Show List");
        cmbInvoiceParameterModi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInvoiceParameterModiActionPerformed(evt);
            }
        });
        InvParaModiPanel.add(cmbInvoiceParameterModi);
        cmbInvoiceParameterModi.setBounds(810, 10, 130, 30);

        PieceStage1.setText("EXPORT TO EXCEL");
        PieceStage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieceStage1ActionPerformed(evt);
            }
        });
        InvParaModiPanel.add(PieceStage1);
        PieceStage1.setBounds(770, 340, 170, 25);
        InvParaModiPanel.add(cmbInvoiceParameterModification);
        cmbInvoiceParameterModification.setBounds(650, 10, 130, 24);

        jLabel81.setText("Order By");
        InvParaModiPanel.add(jLabel81);
        jLabel81.setBounds(590, 10, 60, 30);

        jLabel82.setText("Status");
        InvParaModiPanel.add(jLabel82);
        jLabel82.setBounds(60, 10, 60, 20);
        InvParaModiPanel.add(cmbStatus);
        cmbStatus.setBounds(120, 10, 130, 24);

        jLabel78.setText("Insurance code = 1 treated as No Insurance Amount Calculated");
        InvParaModiPanel.add(jLabel78);
        jLabel78.setBounds(110, 350, 640, 15);

        jLabel83.setText("NOTES :");
        InvParaModiPanel.add(jLabel83);
        jLabel83.setBounds(50, 350, 55, 15);

        jLabel79.setText("Bale No ");
        InvParaModiPanel.add(jLabel79);
        jLabel79.setBounds(300, 10, 70, 15);
        InvParaModiPanel.add(txtBaleNo);
        txtBaleNo.setBounds(370, 10, 150, 19);

        jTabbedPane2.addTab("Invoice Parameter Modification", InvParaModiPanel);

        PaymentReceiptPanel.setLayout(null);

        TablePR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePR.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TablePR.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TablePR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePRKeyPressed(evt);
            }
        });
        jScrollPane35.setViewportView(TablePR);

        PaymentReceiptPanel.add(jScrollPane35);
        jScrollPane35.setBounds(10, 50, 920, 310);

        btnPR.setText("Show List");
        btnPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPRActionPerformed(evt);
            }
        });
        PaymentReceiptPanel.add(btnPR);
        btnPR.setBounds(800, 10, 130, 30);

        Export_PR.setText("EXPORT TO EXCEL");
        Export_PR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_PRActionPerformed(evt);
            }
        });
        PaymentReceiptPanel.add(Export_PR);
        Export_PR.setBounds(760, 370, 170, 25);

        jLabel107.setText("Order By");
        PaymentReceiptPanel.add(jLabel107);
        jLabel107.setBounds(580, 10, 60, 30);
        PaymentReceiptPanel.add(cmbPROrderBy);
        cmbPROrderBy.setBounds(650, 10, 130, 24);

        jTabbedPane2.addTab("Payment Receipt", PaymentReceiptPanel);

        FinishedVSInvoicedPanel.setLayout(null);

        TableFnsdvsInv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableFnsdvsInv.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableFnsdvsInv.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableFnsdvsInv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableFnsdvsInvKeyPressed(evt);
            }
        });
        jScrollPane36.setViewportView(TableFnsdvsInv);

        FinishedVSInvoicedPanel.add(jScrollPane36);
        jScrollPane36.setBounds(10, 50, 920, 310);

        btnFnsdvsInv.setText("Show List");
        btnFnsdvsInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFnsdvsInvActionPerformed(evt);
            }
        });
        FinishedVSInvoicedPanel.add(btnFnsdvsInv);
        btnFnsdvsInv.setBounds(800, 10, 130, 30);

        Export_FnsdvsInv.setText("EXPORT TO EXCEL");
        Export_FnsdvsInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_FnsdvsInvActionPerformed(evt);
            }
        });
        FinishedVSInvoicedPanel.add(Export_FnsdvsInv);
        Export_FnsdvsInv.setBounds(760, 370, 170, 25);

        jLabel108.setText("Order By");
        FinishedVSInvoicedPanel.add(jLabel108);
        jLabel108.setBounds(580, 10, 60, 30);
        FinishedVSInvoicedPanel.add(cmbFnsdvsInvOrderBy);
        cmbFnsdvsInvOrderBy.setBounds(650, 10, 130, 24);

        jTabbedPane2.addTab("Finished vs Invoiced", FinishedVSInvoicedPanel);

        DiversionListPanel.setLayout(null);

        Table_DIV_LIST.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_DIV_LIST.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_DIV_LIST.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_DIV_LIST.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_DIV_LISTKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(Table_DIV_LIST);

        DiversionListPanel.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 930, 280);

        SHOW_BTN_DIV_LIST.setText("Show List");
        SHOW_BTN_DIV_LIST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_DIV_LISTActionPerformed(evt);
            }
        });
        DiversionListPanel.add(SHOW_BTN_DIV_LIST);
        SHOW_BTN_DIV_LIST.setBounds(810, 10, 130, 30);

        Export_Div_List.setText("EXPORT TO EXCEL");
        Export_Div_List.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_Div_ListActionPerformed(evt);
            }
        });
        DiversionListPanel.add(Export_Div_List);
        Export_Div_List.setBounds(760, 350, 170, 25);

        BTN_SORT_DATA_DIV_LIST.setText("SORT DATA");
        BTN_SORT_DATA_DIV_LIST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_DIV_LISTActionPerformed(evt);
            }
        });
        DiversionListPanel.add(BTN_SORT_DATA_DIV_LIST);
        BTN_SORT_DATA_DIV_LIST.setBounds(670, 10, 130, 25);

        jLabel37.setText("TOTAL WEIGHT");
        DiversionListPanel.add(jLabel37);
        jLabel37.setBounds(250, 350, 130, 20);
        DiversionListPanel.add(txtTotalWeight_DLIST);
        txtTotalWeight_DLIST.setBounds(390, 340, 110, 30);

        jLabel38.setText("TOTAL AMOUNT");
        DiversionListPanel.add(jLabel38);
        jLabel38.setBounds(520, 350, 130, 20);
        DiversionListPanel.add(txtTotalAmount_DLIST);
        txtTotalAmount_DLIST.setBounds(630, 340, 110, 30);

        jLabel25.setText("Piece Stage");
        DiversionListPanel.add(jLabel25);
        jLabel25.setBounds(20, 10, 90, 30);

        cmbProductionStageDivList.setMaximumRowCount(10);
        cmbProductionStageDivList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "WIP", "IN STOCK", "BSR" }));
        cmbProductionStageDivList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductionStageDivListItemStateChanged(evt);
            }
        });
        DiversionListPanel.add(cmbProductionStageDivList);
        cmbProductionStageDivList.setBounds(110, 10, 130, 24);

        jTabbedPane2.addTab("Diversion List", DiversionListPanel);

        jPanel26.setLayout(null);

        Table_Diversion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Diversion.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_Diversion.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_Diversion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_DiversionKeyPressed(evt);
            }
        });
        jScrollPane21.setViewportView(Table_Diversion);

        jPanel26.add(jScrollPane21);
        jScrollPane21.setBounds(10, 50, 930, 290);

        SHOW_BTN_DIVERSION.setText("Show List");
        SHOW_BTN_DIVERSION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_DIVERSIONActionPerformed(evt);
            }
        });
        jPanel26.add(SHOW_BTN_DIVERSION);
        SHOW_BTN_DIVERSION.setBounds(810, 10, 130, 30);

        Export_Diversion.setText("EXPORT TO EXCEL");
        Export_Diversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_DiversionActionPerformed(evt);
            }
        });
        jPanel26.add(Export_Diversion);
        Export_Diversion.setBounds(760, 350, 170, 25);

        jLabel89.setText("Status");
        jPanel26.add(jLabel89);
        jLabel89.setBounds(60, 10, 60, 20);

        cmbDiversionStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDiversionStatusItemStateChanged(evt);
            }
        });
        jPanel26.add(cmbDiversionStatus);
        cmbDiversionStatus.setBounds(120, 10, 130, 24);

        cmbDiversionOrderBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDiversionOrderByActionPerformed(evt);
            }
        });
        jPanel26.add(cmbDiversionOrderBy);
        cmbDiversionOrderBy.setBounds(650, 10, 130, 24);

        jLabel90.setText("Order By");
        jPanel26.add(jLabel90);
        jLabel90.setBounds(590, 10, 60, 30);

        jTabbedPane2.addTab("Diversion", jPanel26);

        DivertedPanel.setLayout(null);

        Table_DIVERTED.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_DIVERTED.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_DIVERTED.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_DIVERTED.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_DIVERTEDKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(Table_DIVERTED);

        DivertedPanel.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 940, 280);

        SHOW_BTN_DIVERTED.setText("Show List");
        SHOW_BTN_DIVERTED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_DIVERTEDActionPerformed(evt);
            }
        });
        DivertedPanel.add(SHOW_BTN_DIVERTED);
        SHOW_BTN_DIVERTED.setBounds(810, 10, 130, 30);

        Export_Diverted.setText("EXPORT TO EXCEL");
        Export_Diverted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_DivertedActionPerformed(evt);
            }
        });
        DivertedPanel.add(Export_Diverted);
        Export_Diverted.setBounds(780, 340, 170, 25);

        BTN_SORT_DATA_DIVERTED.setText("SORT DATA");
        BTN_SORT_DATA_DIVERTED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_DIVERTEDActionPerformed(evt);
            }
        });
        DivertedPanel.add(BTN_SORT_DATA_DIVERTED);
        BTN_SORT_DATA_DIVERTED.setBounds(690, 10, 110, 25);

        jLabel39.setText("TOTAL WEIGHT");
        DivertedPanel.add(jLabel39);
        jLabel39.setBounds(270, 350, 130, 20);
        DivertedPanel.add(txtTotalWeight_DIV);
        txtTotalWeight_DIV.setBounds(400, 340, 110, 30);

        jLabel40.setText("TOTAL AMOUNT");
        DivertedPanel.add(jLabel40);
        jLabel40.setBounds(510, 350, 130, 20);
        DivertedPanel.add(txtTotalAmount_DIV);
        txtTotalAmount_DIV.setBounds(640, 340, 110, 30);

        jTabbedPane2.addTab("Diverted", DivertedPanel);

        jPanel14.setLayout(null);

        Table_CANCELLED.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_CANCELLED.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_CANCELLED.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_CANCELLED.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_CANCELLEDKeyPressed(evt);
            }
        });
        jScrollPane14.setViewportView(Table_CANCELLED);

        jPanel14.add(jScrollPane14);
        jScrollPane14.setBounds(10, 50, 930, 280);

        SHOW_BTN_CANCELLED.setText("Show List");
        SHOW_BTN_CANCELLED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_CANCELLEDActionPerformed(evt);
            }
        });
        jPanel14.add(SHOW_BTN_CANCELLED);
        SHOW_BTN_CANCELLED.setBounds(810, 10, 130, 30);

        Export_Cancelled.setText("EXPORT TO EXCEL");
        Export_Cancelled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_CancelledActionPerformed(evt);
            }
        });
        jPanel14.add(Export_Cancelled);
        Export_Cancelled.setBounds(770, 340, 170, 25);

        BTN_SORT_DATA_CAN.setText("SORT DATA");
        BTN_SORT_DATA_CAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_CANActionPerformed(evt);
            }
        });
        jPanel14.add(BTN_SORT_DATA_CAN);
        BTN_SORT_DATA_CAN.setBounds(690, 10, 110, 25);

        jLabel68.setText("TOTAL WEIGHT");
        jPanel14.add(jLabel68);
        jLabel68.setBounds(470, 340, 130, 30);
        jPanel14.add(txtTotalWeight_CAN);
        txtTotalWeight_CAN.setBounds(610, 340, 110, 30);

        jTabbedPane2.addTab("Cancelled", jPanel14);

        jPanel20.setLayout(null);

        Table_Delink.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Delink.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_Delink.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_Delink.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_DelinkKeyPressed(evt);
            }
        });
        jScrollPane32.setViewportView(Table_Delink);

        jPanel20.add(jScrollPane32);
        jScrollPane32.setBounds(10, 50, 930, 290);

        SHOW_BTN_Delink.setText("Show List");
        SHOW_BTN_Delink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_DelinkActionPerformed(evt);
            }
        });
        jPanel20.add(SHOW_BTN_Delink);
        SHOW_BTN_Delink.setBounds(810, 10, 130, 30);

        Export_Div_List1.setText("EXPORT TO EXCEL");
        Export_Div_List1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_Div_List1ActionPerformed(evt);
            }
        });
        jPanel20.add(Export_Div_List1);
        Export_Div_List1.setBounds(770, 360, 170, 25);

        BTN_SORT_DATA_OBSOLETE.setText("SORT DATA");
        BTN_SORT_DATA_OBSOLETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_OBSOLETEActionPerformed(evt);
            }
        });
        jPanel20.add(BTN_SORT_DATA_OBSOLETE);
        BTN_SORT_DATA_OBSOLETE.setBounds(680, 10, 110, 25);

        cmbProductionStageObsolete.setMaximumRowCount(10);
        cmbProductionStageObsolete.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "WIP", "IN STOCK", "BSR" }));
        cmbProductionStageObsolete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductionStageObsoleteItemStateChanged(evt);
            }
        });
        jPanel20.add(cmbProductionStageObsolete);
        cmbProductionStageObsolete.setBounds(110, 10, 130, 24);

        jLabel10.setText("Piece Stage");
        jPanel20.add(jLabel10);
        jLabel10.setBounds(20, 10, 90, 30);

        jTabbedPane2.addTab("Obsolete Pieces", jPanel20);

        HoldPanel.setLayout(null);

        Table_HOLD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_HOLD.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_HOLD.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_HOLD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_HOLDKeyPressed(evt);
            }
        });
        jScrollPane13.setViewportView(Table_HOLD);

        HoldPanel.add(jScrollPane13);
        jScrollPane13.setBounds(10, 50, 920, 290);

        SHOW_BTN_HOLD.setText("Show List");
        SHOW_BTN_HOLD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_HOLDActionPerformed(evt);
            }
        });
        HoldPanel.add(SHOW_BTN_HOLD);
        SHOW_BTN_HOLD.setBounds(800, 10, 130, 30);

        Export_Hold.setText("EXPORT TO EXCEL");
        Export_Hold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_HoldActionPerformed(evt);
            }
        });
        HoldPanel.add(Export_Hold);
        Export_Hold.setBounds(760, 350, 170, 25);

        BTN_SORT_DATA_HOLD.setText("SORT DATA");
        BTN_SORT_DATA_HOLD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_HOLDActionPerformed(evt);
            }
        });
        HoldPanel.add(BTN_SORT_DATA_HOLD);
        BTN_SORT_DATA_HOLD.setBounds(680, 10, 110, 25);

        jLabel47.setText("TOTAL WEIGHT");
        HoldPanel.add(jLabel47);
        jLabel47.setBounds(300, 360, 130, 20);
        HoldPanel.add(txtTotalWeight_HOLD);
        txtTotalWeight_HOLD.setBounds(400, 350, 110, 30);

        jLabel48.setText("TOTAL AMOUNT");
        HoldPanel.add(jLabel48);
        jLabel48.setBounds(530, 360, 130, 20);
        HoldPanel.add(txtTotalAmount_HOLD);
        txtTotalAmount_HOLD.setBounds(640, 350, 110, 30);

        jTabbedPane2.addTab("Hold", HoldPanel);

        jPanel15.setLayout(null);

        Table_EXP_INVOICE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_EXP_INVOICE.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_EXP_INVOICE.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_EXP_INVOICE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_EXP_INVOICEKeyPressed(evt);
            }
        });
        jScrollPane26.setViewportView(Table_EXP_INVOICE);

        jPanel15.add(jScrollPane26);
        jScrollPane26.setBounds(0, 50, 940, 290);

        SHOW_BTN_EXP_INVOICE.setText("Show List");
        SHOW_BTN_EXP_INVOICE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_EXP_INVOICEActionPerformed(evt);
            }
        });
        jPanel15.add(SHOW_BTN_EXP_INVOICE);
        SHOW_BTN_EXP_INVOICE.setBounds(800, 10, 130, 30);

        Export_Invoice.setText("EXPORT TO EXCEL");
        Export_Invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_InvoiceActionPerformed(evt);
            }
        });
        jPanel15.add(Export_Invoice);
        Export_Invoice.setBounds(770, 350, 170, 25);

        BTN_SORT_DATA_EXP_INVOICE.setText("SORT DATA");
        BTN_SORT_DATA_EXP_INVOICE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_EXP_INVOICEActionPerformed(evt);
            }
        });
        jPanel15.add(BTN_SORT_DATA_EXP_INVOICE);
        BTN_SORT_DATA_EXP_INVOICE.setBounds(680, 10, 110, 25);

        jLabel74.setText("TOTAL WEIGHT");
        jPanel15.add(jLabel74);
        jLabel74.setBounds(290, 360, 130, 15);
        jPanel15.add(txtTotalWeight_Exp_Inv);
        txtTotalWeight_Exp_Inv.setBounds(390, 350, 110, 19);

        jLabel75.setText("TOTAL AMOUNT");
        jPanel15.add(jLabel75);
        jLabel75.setBounds(520, 360, 130, 15);
        jPanel15.add(txtTotalAmount_Exp_Inv);
        txtTotalAmount_Exp_Inv.setBounds(630, 350, 110, 19);

        jTabbedPane2.addTab("Export Invoice", jPanel15);

        MachinePanel.setToolTipText("Machine");
        MachinePanel.setLayout(null);

        TableMachine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane23.setViewportView(TableMachine);

        MachinePanel.add(jScrollPane23);
        jScrollPane23.setBounds(10, 50, 930, 320);

        cmdShowMachine.setText("Show List");
        cmdShowMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowMachineActionPerformed(evt);
            }
        });
        MachinePanel.add(cmdShowMachine);
        cmdShowMachine.setBounds(840, 10, 100, 25);

        txtMachineTotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtMachineTotal.setEnabled(false);
        MachinePanel.add(txtMachineTotal);
        txtMachineTotal.setBounds(110, 10, 60, 19);

        jLabel7.setText("Total Records");
        MachinePanel.add(jLabel7);
        jLabel7.setBounds(10, 10, 90, 20);
        MachinePanel.add(cmbMachine);
        cmbMachine.setBounds(700, 10, 130, 24);

        jLabel27.setText("Order By");
        MachinePanel.add(jLabel27);
        jLabel27.setBounds(640, 10, 60, 30);

        CmdmachineExportExcel.setLabel("Export to Excel");
        CmdmachineExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdmachineExportExcelActionPerformed(evt);
            }
        });
        MachinePanel.add(CmdmachineExportExcel);
        CmdmachineExportExcel.setBounds(800, 378, 150, 30);

        jLabel106.setText("Type :");
        MachinePanel.add(jLabel106);
        jLabel106.setBounds(210, 10, 50, 20);

        cmbMachineType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Closed", "All" }));
        MachinePanel.add(cmbMachineType);
        cmbMachineType.setBounds(260, 10, 100, 24);

        jTabbedPane2.addTab("Machine", MachinePanel);

        DiscountPanel.setToolTipText("Machine");
        DiscountPanel.setEnabled(false);
        DiscountPanel.setLayout(null);

        TableDiscount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane24.setViewportView(TableDiscount);

        DiscountPanel.add(jScrollPane24);
        jScrollPane24.setBounds(10, 50, 930, 320);

        cmdShowDiscont.setText("Show List");
        cmdShowDiscont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowDiscontActionPerformed(evt);
            }
        });
        DiscountPanel.add(cmdShowDiscont);
        cmdShowDiscont.setBounds(840, 10, 100, 25);

        txtDiscountTotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtDiscountTotal.setEnabled(false);
        DiscountPanel.add(txtDiscountTotal);
        txtDiscountTotal.setBounds(110, 10, 60, 19);

        jLabel70.setText("Total Records");
        DiscountPanel.add(jLabel70);
        jLabel70.setBounds(10, 10, 90, 20);
        DiscountPanel.add(cmbDiscount);
        cmbDiscount.setBounds(700, 10, 130, 24);

        jLabel71.setText("Order By");
        DiscountPanel.add(jLabel71);
        jLabel71.setBounds(640, 10, 60, 30);

        CmdDiscountExportExcel.setLabel("Export to Excel");
        CmdDiscountExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdDiscountExportExcelActionPerformed(evt);
            }
        });
        DiscountPanel.add(CmdDiscountExportExcel);
        CmdDiscountExportExcel.setBounds(800, 378, 150, 30);

        jTabbedPane2.addTab("Discount", DiscountPanel);

        SalesPartyMasterPanel.setToolTipText("Machine");
        SalesPartyMasterPanel.setLayout(null);

        TableSalesParty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane25.setViewportView(TableSalesParty);

        SalesPartyMasterPanel.add(jScrollPane25);
        jScrollPane25.setBounds(10, 50, 930, 320);

        cmdShowSalesParty.setText("Show List");
        cmdShowSalesParty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowSalesPartyActionPerformed(evt);
            }
        });
        SalesPartyMasterPanel.add(cmdShowSalesParty);
        cmdShowSalesParty.setBounds(840, 10, 100, 25);

        txtSalesPartyTotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtSalesPartyTotal.setEnabled(false);
        SalesPartyMasterPanel.add(txtSalesPartyTotal);
        txtSalesPartyTotal.setBounds(110, 10, 60, 19);

        jLabel72.setText("Total Records");
        SalesPartyMasterPanel.add(jLabel72);
        jLabel72.setBounds(10, 10, 90, 20);
        SalesPartyMasterPanel.add(cmbSalesParty);
        cmbSalesParty.setBounds(700, 10, 130, 24);

        jLabel73.setText("Order By");
        SalesPartyMasterPanel.add(jLabel73);
        jLabel73.setBounds(640, 10, 60, 30);

        CmdSalesPartyExportExcel.setLabel("Export to Excel");
        CmdSalesPartyExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdSalesPartyExportExcelActionPerformed(evt);
            }
        });
        SalesPartyMasterPanel.add(CmdSalesPartyExportExcel);
        CmdSalesPartyExportExcel.setBounds(800, 378, 150, 30);

        jLabel109.setText("Type :");
        SalesPartyMasterPanel.add(jLabel109);
        jLabel109.setBounds(210, 10, 50, 20);

        cmbPartyType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Closed", "All" }));
        SalesPartyMasterPanel.add(cmbPartyType);
        cmbPartyType.setBounds(260, 10, 100, 24);

        jTabbedPane2.addTab("Party Master O/S & Adv Amt", SalesPartyMasterPanel);

        ContactsPanel.setToolTipText("Contacts");
        ContactsPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ContactsPanel.setLayout(null);

        cmdShowContacts.setText("Show List");
        cmdShowContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowContactsActionPerformed(evt);
            }
        });
        ContactsPanel.add(cmdShowContacts);
        cmdShowContacts.setBounds(830, 40, 120, 30);

        TableContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(TableContacts);

        ContactsPanel.add(jScrollPane15);
        jScrollPane15.setBounds(0, 70, 950, 300);

        jLabel66.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel66.setText("Tagging Ind ");
        ContactsPanel.add(jLabel66);
        jLabel66.setBounds(610, 40, 120, 20);

        txtcontactstotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtcontactstotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtcontactstotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtcontactstotal.setEnabled(false);
        ContactsPanel.add(txtcontactstotal);
        txtcontactstotal.setBounds(920, 10, 60, 19);

        cmdcontactsExporttoExcel.setText("Export to Excel");
        cmdcontactsExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdcontactsExporttoExcelActionPerformed(evt);
            }
        });
        ContactsPanel.add(cmdcontactsExporttoExcel);
        cmdcontactsExporttoExcel.setBounds(820, 380, 130, 25);

        jLabel118.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel118.setText("Active");
        ContactsPanel.add(jLabel118);
        jLabel118.setBounds(10, 10, 60, 20);

        txtATotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtATotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtATotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtATotal.setEnabled(false);
        ContactsPanel.add(txtATotal);
        txtATotal.setBounds(80, 10, 60, 19);

        jLabel119.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel119.setText("In Active");
        ContactsPanel.add(jLabel119);
        jLabel119.setBounds(160, 10, 70, 20);

        txtIATotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtIATotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtIATotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtIATotal.setEnabled(false);
        ContactsPanel.add(txtIATotal);
        txtIATotal.setBounds(240, 10, 60, 19);

        txtMCTotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtMCTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMCTotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtMCTotal.setEnabled(false);
        ContactsPanel.add(txtMCTotal);
        txtMCTotal.setBounds(470, 10, 60, 19);

        jLabel120.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel120.setText("Permanently Closed");
        ContactsPanel.add(jLabel120);
        jLabel120.setBounds(310, 10, 150, 20);

        jLabel122.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel122.setText("Total Records");
        ContactsPanel.add(jLabel122);
        jLabel122.setBounds(790, 10, 120, 20);

        cmbPartyTagInd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "0", "1", "2", "3", "4" }));
        ContactsPanel.add(cmbPartyTagInd);
        cmbPartyTagInd.setBounds(740, 40, 45, 24);

        jLabel121.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel121.setText("Temporary Closed");
        ContactsPanel.add(jLabel121);
        jLabel121.setBounds(540, 10, 150, 20);

        txtTCTotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtTCTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTCTotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtTCTotal.setEnabled(false);
        ContactsPanel.add(txtTCTotal);
        txtTCTotal.setBounds(700, 10, 60, 19);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ContactsPanel.add(jPanel2);
        jPanel2.setBounds(150, 0, 630, 40);

        jTabbedPane2.addTab("Contacts", ContactsPanel);

        SalesPanel.setToolTipText("Sales");
        SalesPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        SalesPanel.setLayout(null);

        cmdshowSalesY.setText("Show List");
        cmdshowSalesY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdshowSalesYActionPerformed(evt);
            }
        });
        SalesPanel.add(cmdshowSalesY);
        cmdshowSalesY.setBounds(820, 10, 120, 25);

        TableSalesY.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane17.setViewportView(TableSalesY);

        SalesPanel.add(jScrollPane17);
        jScrollPane17.setBounds(20, 40, 920, 170);

        TableSalesM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane18.setViewportView(TableSalesM);

        SalesPanel.add(jScrollPane18);
        jScrollPane18.setBounds(20, 250, 930, 160);

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel15.setText("YEARLY SALES");
        SalesPanel.add(jLabel15);
        jLabel15.setBounds(20, 10, 320, 20);

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setText("MONTHWISE YEARLY SALES");
        SalesPanel.add(jLabel16);
        jLabel16.setBounds(20, 230, 380, 20);

        jLabel42.setText("Total Records");
        SalesPanel.add(jLabel42);
        jLabel42.setBounds(210, 10, 90, 20);

        txtsalestotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtsalestotal.setEnabled(false);
        SalesPanel.add(txtsalestotal);
        txtsalestotal.setBounds(300, 10, 100, 19);

        jLabel43.setText("Total Records");
        SalesPanel.add(jLabel43);
        jLabel43.setBounds(310, 220, 90, 20);

        txtsalestotal1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtsalestotal1.setEnabled(false);
        SalesPanel.add(txtsalestotal1);
        txtsalestotal1.setBounds(400, 220, 100, 19);

        cmdsalesyrExporttoExcel.setText("Export to Excel");
        cmdsalesyrExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsalesyrExporttoExcelActionPerformed(evt);
            }
        });
        SalesPanel.add(cmdsalesyrExporttoExcel);
        cmdsalesyrExporttoExcel.setBounds(410, 10, 130, 25);

        cmdsalesmonthExportToExcel.setText("Export to Excel");
        cmdsalesmonthExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsalesmonthExportToExcelActionPerformed(evt);
            }
        });
        SalesPanel.add(cmdsalesmonthExportToExcel);
        cmdsalesmonthExportToExcel.setBounds(520, 220, 130, 25);

        jTabbedPane2.addTab("Sales", SalesPanel);

        ExportSalesPanel.setToolTipText("Sales");
        ExportSalesPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ExportSalesPanel.setLayout(null);

        cmdshowSalesExpY.setText("Show List");
        cmdshowSalesExpY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdshowSalesExpYActionPerformed(evt);
            }
        });
        ExportSalesPanel.add(cmdshowSalesExpY);
        cmdshowSalesExpY.setBounds(820, 10, 120, 25);

        TableSalesExpY.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane30.setViewportView(TableSalesExpY);

        ExportSalesPanel.add(jScrollPane30);
        jScrollPane30.setBounds(20, 40, 920, 170);

        TableSalesExpM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane38.setViewportView(TableSalesExpM);

        ExportSalesPanel.add(jScrollPane38);
        jScrollPane38.setBounds(20, 250, 930, 160);

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel21.setText("YEARLY EXPORT SALES");
        ExportSalesPanel.add(jLabel21);
        jLabel21.setBounds(20, 10, 320, 20);

        jLabel22.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel22.setText("MONTHWISE YEARLY EXPORT SALES");
        ExportSalesPanel.add(jLabel22);
        jLabel22.setBounds(20, 230, 380, 20);

        jLabel49.setText("Total Records");
        ExportSalesPanel.add(jLabel49);
        jLabel49.setBounds(210, 10, 90, 20);

        txtsalesexptotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtsalesexptotal.setEnabled(false);
        ExportSalesPanel.add(txtsalesexptotal);
        txtsalesexptotal.setBounds(300, 10, 100, 19);

        jLabel50.setText("Total Records");
        ExportSalesPanel.add(jLabel50);
        jLabel50.setBounds(310, 220, 90, 20);

        txtsalesexptotal1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtsalesexptotal1.setEnabled(false);
        ExportSalesPanel.add(txtsalesexptotal1);
        txtsalesexptotal1.setBounds(400, 220, 100, 19);

        cmdsalesExpyrExporttoExcel.setText("Export to Excel");
        cmdsalesExpyrExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsalesExpyrExporttoExcelActionPerformed(evt);
            }
        });
        ExportSalesPanel.add(cmdsalesExpyrExporttoExcel);
        cmdsalesExpyrExporttoExcel.setBounds(410, 10, 130, 25);

        cmdsalesExpmonthExportToExcel.setText("Export to Excel");
        cmdsalesExpmonthExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsalesExpmonthExportToExcelActionPerformed(evt);
            }
        });
        ExportSalesPanel.add(cmdsalesExpmonthExportToExcel);
        cmdsalesExpmonthExportToExcel.setBounds(520, 220, 130, 25);

        jTabbedPane2.addTab("Sales Export", ExportSalesPanel);

        AgeingPanel.setToolTipText("Ageing");
        AgeingPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        AgeingPanel.setLayout(null);

        TableAgeing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane22.setViewportView(TableAgeing);

        AgeingPanel.add(jScrollPane22);
        jScrollPane22.setBounds(20, 50, 910, 230);

        cmdShowAgeing.setText("Show List");
        cmdShowAgeing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowAgeingActionPerformed(evt);
            }
        });
        AgeingPanel.add(cmdShowAgeing);
        cmdShowAgeing.setBounds(830, 10, 100, 25);

        jLabel51.setText("Total Records");
        AgeingPanel.add(jLabel51);
        jLabel51.setBounds(20, 20, 90, 20);

        txtageingtotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtageingtotal.setEnabled(false);
        AgeingPanel.add(txtageingtotal);
        txtageingtotal.setBounds(110, 20, 70, 19);
        AgeingPanel.add(txtless45counttotal);
        txtless45counttotal.setBounds(80, 360, 110, 19);
        AgeingPanel.add(txtless90counttotal);
        txtless90counttotal.setBounds(200, 360, 110, 19);
        AgeingPanel.add(txtless180counttotal);
        txtless180counttotal.setBounds(320, 360, 120, 19);
        AgeingPanel.add(txtless365counttotal);
        txtless365counttotal.setBounds(450, 360, 120, 19);
        AgeingPanel.add(txtless730counttotal);
        txtless730counttotal.setBounds(580, 360, 120, 19);
        AgeingPanel.add(txtmore730counttotal);
        txtmore730counttotal.setBounds(710, 360, 100, 19);
        AgeingPanel.add(txtlesscounttotal);
        txtlesscounttotal.setBounds(820, 360, 110, 19);
        AgeingPanel.add(txtless45qtytotal);
        txtless45qtytotal.setBounds(80, 390, 110, 19);
        AgeingPanel.add(txtless90qtytotal);
        txtless90qtytotal.setBounds(200, 390, 110, 19);
        AgeingPanel.add(txtless180qtytotal);
        txtless180qtytotal.setBounds(320, 390, 120, 19);
        AgeingPanel.add(txtless365qtytotal);
        txtless365qtytotal.setBounds(450, 390, 120, 19);
        AgeingPanel.add(txtless730qtytotal);
        txtless730qtytotal.setBounds(580, 390, 120, 19);
        AgeingPanel.add(txtmore730qtytotal);
        txtmore730qtytotal.setBounds(710, 390, 100, 19);
        AgeingPanel.add(txtlessqtytotal);
        txtlessqtytotal.setBounds(820, 390, 110, 19);
        AgeingPanel.add(txtless45amttotal);
        txtless45amttotal.setBounds(80, 420, 110, 19);
        AgeingPanel.add(txtless90amttotal);
        txtless90amttotal.setBounds(200, 420, 110, 19);
        AgeingPanel.add(txtless180amttotal);
        txtless180amttotal.setBounds(320, 420, 120, 19);
        AgeingPanel.add(txtless365amttotal);
        txtless365amttotal.setBounds(450, 420, 120, 19);
        AgeingPanel.add(txtless730amttotal);
        txtless730amttotal.setBounds(580, 420, 120, 19);
        AgeingPanel.add(txtmore730amttotal);
        txtmore730amttotal.setBounds(710, 420, 100, 19);
        AgeingPanel.add(txtlessamttotal);
        txtlessamttotal.setBounds(820, 420, 110, 19);

        jLabel52.setText("Count");
        AgeingPanel.add(jLabel52);
        jLabel52.setBounds(30, 360, 40, 15);

        jLabel53.setText("Qty");
        AgeingPanel.add(jLabel53);
        jLabel53.setBounds(30, 390, 40, 15);

        jLabel54.setText("Amt");
        AgeingPanel.add(jLabel54);
        jLabel54.setBounds(30, 420, 40, 15);

        jLabel55.setText("<=45");
        AgeingPanel.add(jLabel55);
        jLabel55.setBounds(100, 330, 50, 15);

        jLabel56.setText(">45<=90");
        AgeingPanel.add(jLabel56);
        jLabel56.setBounds(220, 330, 80, 15);

        jLabel57.setText(">90<=180");
        AgeingPanel.add(jLabel57);
        jLabel57.setBounds(340, 330, 80, 15);

        jLabel58.setText(">180<=365");
        AgeingPanel.add(jLabel58);
        jLabel58.setBounds(470, 330, 90, 15);

        jLabel59.setText(">365<=730");
        AgeingPanel.add(jLabel59);
        jLabel59.setBounds(590, 330, 90, 15);

        jLabel60.setText(">730");
        AgeingPanel.add(jLabel60);
        jLabel60.setBounds(740, 330, 50, 15);

        jLabel61.setText("Total");
        AgeingPanel.add(jLabel61);
        jLabel61.setBounds(850, 330, 70, 15);

        cmdAgeingExportToExcel.setText("Export to Excel");
        cmdAgeingExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAgeingExportToExcelActionPerformed(evt);
            }
        });
        AgeingPanel.add(cmdAgeingExportToExcel);
        cmdAgeingExportToExcel.setBounds(800, 290, 130, 25);

        jTabbedPane2.addTab("Ageing", AgeingPanel);

        MisageingPanel.setToolTipText("MIS Ageing");
        MisageingPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        MisageingPanel.setLayout(null);

        TableMISAgeing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane19.setViewportView(TableMISAgeing);

        MisageingPanel.add(jScrollPane19);
        jScrollPane19.setBounds(10, 50, 520, 300);

        cmdShowMISAgeing.setText("Show List");
        cmdShowMISAgeing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowMISAgeingActionPerformed(evt);
            }
        });
        MisageingPanel.add(cmdShowMISAgeing);
        cmdShowMISAgeing.setBounds(830, 10, 110, 25);

        TableMISAgeing1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane20.setViewportView(TableMISAgeing1);

        MisageingPanel.add(jScrollPane20);
        jScrollPane20.setBounds(540, 50, 400, 300);

        jLabel62.setText("Total Records");
        MisageingPanel.add(jLabel62);
        jLabel62.setBounds(10, 20, 90, 15);

        txtmisageingtotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtmisageingtotal.setEnabled(false);
        MisageingPanel.add(txtmisageingtotal);
        txtmisageingtotal.setBounds(110, 20, 50, 19);

        jLabel63.setText("Total Records");
        MisageingPanel.add(jLabel63);
        jLabel63.setBounds(540, 10, 90, 30);

        txtmisageingtotal1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtmisageingtotal1.setEnabled(false);
        MisageingPanel.add(txtmisageingtotal1);
        txtmisageingtotal1.setBounds(640, 20, 50, 19);

        txtamttotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        MisageingPanel.add(txtamttotal);
        txtamttotal.setBounds(410, 390, 120, 19);

        jLabel64.setText("Amt Total");
        MisageingPanel.add(jLabel64);
        jLabel64.setBounds(440, 370, 70, 20);

        txtqtytotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        MisageingPanel.add(txtqtytotal);
        txtqtytotal.setBounds(300, 390, 80, 19);

        jLabel65.setText("QTY Total");
        MisageingPanel.add(jLabel65);
        jLabel65.setBounds(300, 370, 70, 20);

        txtcounttotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        MisageingPanel.add(txtcounttotal);
        txtcounttotal.setBounds(160, 390, 120, 19);

        jLabel67.setText("Count Total");
        MisageingPanel.add(jLabel67);
        jLabel67.setBounds(160, 370, 90, 20);

        cmdMISAgeingExportToExcel.setText("Export to Excel");
        cmdMISAgeingExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMISAgeingExportToExcelActionPerformed(evt);
            }
        });
        MisageingPanel.add(cmdMISAgeingExportToExcel);
        cmdMISAgeingExportToExcel.setBounds(10, 370, 130, 25);

        cmdmisagingaExportToExcel.setText("Export to Excel");
        cmdmisagingaExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdmisagingaExportToExcelActionPerformed(evt);
            }
        });
        MisageingPanel.add(cmdmisagingaExportToExcel);
        cmdmisagingaExportToExcel.setBounds(540, 370, 137, 25);

        misaginggrp.add(withoutobsolete);
        withoutobsolete.setText("WITHOUT OBSOLETE");
        MisageingPanel.add(withoutobsolete);
        withoutobsolete.setBounds(330, 10, 190, 30);

        misaginggrp.add(withobsolete);
        withobsolete.setSelected(true);
        withobsolete.setText("WITH OBSOLETE");
        MisageingPanel.add(withobsolete);
        withobsolete.setBounds(170, 10, 140, 30);

        jTabbedPane2.addTab("MIS Ageing", MisageingPanel);

        MFGRejectionPanel.setLayout(null);

        TablePieceMFGRejection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePieceMFGRejection.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TablePieceMFGRejection.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TablePieceMFGRejection.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePieceMFGRejectionKeyPressed(evt);
            }
        });
        jScrollPane31.setViewportView(TablePieceMFGRejection);

        MFGRejectionPanel.add(jScrollPane31);
        jScrollPane31.setBounds(10, 50, 930, 290);

        cmbCobolErp1.setText("Show List");
        cmbCobolErp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCobolErp1ActionPerformed(evt);
            }
        });
        MFGRejectionPanel.add(cmbCobolErp1);
        cmbCobolErp1.setBounds(810, 10, 130, 30);

        PieceMFGRejection.setText("EXPORT TO EXCEL");
        PieceMFGRejection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieceMFGRejectionActionPerformed(evt);
            }
        });
        MFGRejectionPanel.add(PieceMFGRejection);
        PieceMFGRejection.setBounds(770, 350, 170, 25);
        MFGRejectionPanel.add(cmbPieceMFGRejection);
        cmbPieceMFGRejection.setBounds(650, 10, 130, 24);

        jLabel93.setText("Order By");
        MFGRejectionPanel.add(jLabel93);
        jLabel93.setBounds(590, 10, 60, 30);

        jTabbedPane2.addTab("Piece MFG Rejection", MFGRejectionPanel);

        WIPReViewReportPanel.setLayout(null);

        Export_Production2.setText("EXPORT TO EXCEL");
        Export_Production2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_Production2ActionPerformed(evt);
            }
        });
        WIPReViewReportPanel.add(Export_Production2);
        Export_Production2.setBounds(770, 390, 170, 25);

        WIP_Piece_Review.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane37.setViewportView(WIP_Piece_Review);

        WIPReViewReportPanel.add(jScrollPane37);
        jScrollPane37.setBounds(2, 70, 950, 310);

        btnShowWIPPiece.setText("SHOW DATA");
        btnShowWIPPiece.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowWIPPieceActionPerformed(evt);
            }
        });
        WIPReViewReportPanel.add(btnShowWIPPiece);
        btnShowWIPPiece.setBounds(816, 20, 130, 25);

        btnReviewStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Approved", "Pending" }));
        WIPReViewReportPanel.add(btnReviewStatus);
        btnReviewStatus.setBounds(568, 20, 200, 24);

        jLabel105.setText("Review Status");
        WIPReViewReportPanel.add(jLabel105);
        jLabel105.setBounds(460, 30, 110, 15);

        jTabbedPane2.addTab("WIP Piece Review Report", WIPReViewReportPanel);

        jPanel27.setLayout(null);

        TableGIDC_SDF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableGIDC_SDF.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableGIDC_SDF.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableGIDC_SDF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableGIDC_SDFKeyPressed(evt);
            }
        });
        jScrollPane39.setViewportView(TableGIDC_SDF);

        jPanel27.add(jScrollPane39);
        jScrollPane39.setBounds(0, 50, 940, 330);

        btnGIDC_SDF.setText("Show List");
        btnGIDC_SDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGIDC_SDFActionPerformed(evt);
            }
        });
        jPanel27.add(btnGIDC_SDF);
        btnGIDC_SDF.setBounds(800, 10, 130, 30);

        Export_GIDC_SDF.setText("EXPORT TO EXCEL");
        Export_GIDC_SDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_GIDC_SDFActionPerformed(evt);
            }
        });
        jPanel27.add(Export_GIDC_SDF);
        Export_GIDC_SDF.setBounds(770, 390, 170, 25);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("TOTAL WEIGHT");
        jPanel27.add(jLabel28);
        jLabel28.setBounds(240, 390, 130, 30);
        jPanel27.add(txtTotalWeight_GIDC_SDF);
        txtTotalWeight_GIDC_SDF.setBounds(380, 390, 110, 19);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel29.setText("TOTAL AMOUNT");
        jPanel27.add(jLabel29);
        jLabel29.setBounds(490, 390, 130, 30);
        jPanel27.add(txtTotalAmount_GIDC_SDF);
        txtTotalAmount_GIDC_SDF.setBounds(630, 390, 110, 30);

        jLabel30.setText("GIDC Status");
        jPanel27.add(jLabel30);
        jLabel30.setBounds(20, 10, 100, 30);

        cmbGIDCStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "YET_TO_MFG", "SPIRALED", "ASSEMBLED", "READY_TO_DESPATCH", "GIDC_TO_SDML" }));
        jPanel27.add(cmbGIDCStatus);
        cmbGIDCStatus.setBounds(110, 10, 220, 24);

        jTabbedPane2.addTab("GIDC SDF", jPanel27);

        OrderConfirmationPanel.setLayout(null);

        TablePieceStage1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePieceStage1.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TablePieceStage1.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TablePieceStage1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePieceStage1KeyPressed(evt);
            }
        });
        jScrollPane40.setViewportView(TablePieceStage1);

        OrderConfirmationPanel.add(jScrollPane40);
        jScrollPane40.setBounds(10, 50, 930, 280);

        SHOW_BTN_PIECE_STAGE1.setText("Show List");
        SHOW_BTN_PIECE_STAGE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_PIECE_STAGE1ActionPerformed(evt);
            }
        });
        OrderConfirmationPanel.add(SHOW_BTN_PIECE_STAGE1);
        SHOW_BTN_PIECE_STAGE1.setBounds(810, 10, 130, 30);

        PieceStage3.setText("EXPORT TO EXCEL");
        PieceStage3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieceStage3ActionPerformed(evt);
            }
        });
        OrderConfirmationPanel.add(PieceStage3);
        PieceStage3.setBounds(770, 340, 170, 25);

        BTN_SORT_DATA_PIECE_STAGE1.setText("SORT DATA");
        BTN_SORT_DATA_PIECE_STAGE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_PIECE_STAGE1ActionPerformed(evt);
            }
        });
        OrderConfirmationPanel.add(BTN_SORT_DATA_PIECE_STAGE1);
        BTN_SORT_DATA_PIECE_STAGE1.setBounds(670, 10, 120, 30);

        jLabel31.setText("Order Confirmation Month");
        OrderConfirmationPanel.add(jLabel31);
        jLabel31.setBounds(10, 10, 180, 30);

        cmbocmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        OrderConfirmationPanel.add(cmbocmonth);
        cmbocmonth.setBounds(190, 10, 130, 30);

        jLabel32.setText("Stages");
        OrderConfirmationPanel.add(jLabel32);
        jLabel32.setBounds(400, 10, 60, 20);

        cmbstage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        OrderConfirmationPanel.add(cmbstage);
        cmbstage.setBounds(460, 10, 140, 30);

        jTabbedPane2.addTab("Order Confirmation", OrderConfirmationPanel);

        jPanel29.setLayout(null);

        TableCS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableCS.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableCS.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableCS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableCSKeyPressed(evt);
            }
        });
        jScrollPane41.setViewportView(TableCS);

        jPanel29.add(jScrollPane41);
        jScrollPane41.setBounds(20, 90, 930, 280);

        SHOW_BTN_CS.setText("Show List");
        SHOW_BTN_CS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_CSActionPerformed(evt);
            }
        });
        jPanel29.add(SHOW_BTN_CS);
        SHOW_BTN_CS.setBounds(810, 10, 130, 30);

        Export_CS.setText("EXPORT TO EXCEL");
        Export_CS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_CSActionPerformed(evt);
            }
        });
        jPanel29.add(Export_CS);
        Export_CS.setBounds(780, 380, 170, 25);

        BTN_SORT_DATA_CS.setText("SORT DATA");
        BTN_SORT_DATA_CS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_CSActionPerformed(evt);
            }
        });
        jPanel29.add(BTN_SORT_DATA_CS);
        BTN_SORT_DATA_CS.setBounds(810, 50, 130, 30);

        jLabel33.setText("Current Sales Plan Month");
        jPanel29.add(jLabel33);
        jLabel33.setBounds(10, 10, 170, 30);

        cmbCSMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel29.add(cmbCSMonth);
        cmbCSMonth.setBounds(180, 10, 130, 30);

        jLabel36.setText("Stages");
        jPanel29.add(jLabel36);
        jLabel36.setBounds(590, 20, 60, 20);

        cmbCSStage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel29.add(cmbCSStage);
        cmbCSStage.setBounds(650, 10, 150, 30);

        jLabel69.setText("Order Confirmation Month");
        jPanel29.add(jLabel69);
        jLabel69.setBounds(10, 40, 180, 30);

        cmbCSOCmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel29.add(cmbCSOCmonth);
        cmbCSOCmonth.setBounds(180, 40, 130, 30);

        jLabel80.setText("Spillover");
        jPanel29.add(jLabel80);
        jLabel80.setBounds(360, 10, 70, 30);

        cmbCSSpillMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Yes", "No" }));
        jPanel29.add(cmbCSSpillMonth);
        cmbCSSpillMonth.setBounds(430, 10, 130, 30);

        jLabel91.setText("Spillover Month");
        jPanel29.add(jLabel91);
        jLabel91.setBounds(320, 40, 110, 30);

        cmbCSSPOmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel29.add(cmbCSSPOmonth);
        cmbCSSPOmonth.setBounds(430, 40, 130, 30);

        jTabbedPane2.addTab("Current Sales Plan Month /Spillover Month", jPanel29);

        Capacityplanning.setLayout(null);

        TableCapacityPlanning.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableCapacityPlanning.setSelectionBackground(new java.awt.Color(208, 220, 234));
        TableCapacityPlanning.setSelectionForeground(new java.awt.Color(231, 16, 16));
        TableCapacityPlanning.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableCapacityPlanningKeyPressed(evt);
            }
        });
        jScrollPane42.setViewportView(TableCapacityPlanning);

        Capacityplanning.add(jScrollPane42);
        jScrollPane42.setBounds(10, 50, 930, 280);

        SHOW_BTN_CAPACITY.setText("Show List");
        SHOW_BTN_CAPACITY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_CAPACITYActionPerformed(evt);
            }
        });
        Capacityplanning.add(SHOW_BTN_CAPACITY);
        SHOW_BTN_CAPACITY.setBounds(810, 10, 130, 30);

        cmbcapacityxls.setText("EXPORT TO EXCEL");
        cmbcapacityxls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbcapacityxlsActionPerformed(evt);
            }
        });
        Capacityplanning.add(cmbcapacityxls);
        cmbcapacityxls.setBounds(770, 340, 170, 25);

        cmbcapacityreqmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Capacityplanning.add(cmbcapacityreqmonth);
        cmbcapacityreqmonth.setBounds(330, 10, 130, 30);

        cmbcapacityOCmonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Capacityplanning.add(cmbcapacityOCmonth);
        cmbcapacityOCmonth.setBounds(330, 10, 130, 30);

        buttonGroup1.add(rbtnReqMonth);
        rbtnReqMonth.setText("Requested Month");
        rbtnReqMonth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnReqMonthMouseClicked(evt);
            }
        });
        rbtnReqMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnReqMonthActionPerformed(evt);
            }
        });
        Capacityplanning.add(rbtnReqMonth);
        rbtnReqMonth.setBounds(10, 10, 140, 23);

        buttonGroup1.add(rbtnOCMonth);
        rbtnOCMonth.setText("OC Month");
        rbtnOCMonth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbtnOCMonthMouseClicked(evt);
            }
        });
        Capacityplanning.add(rbtnOCMonth);
        rbtnOCMonth.setBounds(150, 10, 130, 23);

        jTabbedPane2.addTab("Mfg Plan ProductWise/ AreaWise Quantity  Allocation Monthwise", Capacityplanning);

        jPanel11.setLayout(null);

        Table_STOCK_DFS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_STOCK_DFS.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table_STOCK_DFS.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table_STOCK_DFS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_STOCK_DFSKeyPressed(evt);
            }
        });
        jScrollPane44.setViewportView(Table_STOCK_DFS);

        jPanel11.add(jScrollPane44);
        jScrollPane44.setBounds(10, 50, 920, 270);

        Export_Stock_DFS.setText("EXPORT TO EXCEL");
        Export_Stock_DFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_Stock_DFSActionPerformed(evt);
            }
        });
        jPanel11.add(Export_Stock_DFS);
        Export_Stock_DFS.setBounds(760, 330, 170, 25);

        jLabel114.setText("TOTAL WEIGHT");
        jPanel11.add(jLabel114);
        jLabel114.setBounds(30, 340, 130, 15);
        jPanel11.add(txtTotalWeight_stock_DFS);
        txtTotalWeight_stock_DFS.setBounds(130, 330, 110, 19);

        jLabel115.setText("TOTAL AMOUNT");
        jPanel11.add(jLabel115);
        jLabel115.setBounds(520, 340, 130, 15);
        jPanel11.add(txtTotalAmount_stock_DFS);
        txtTotalAmount_stock_DFS.setBounds(630, 330, 110, 19);

        jLabel116.setText("TOTAL BILL WEIGHT");
        jPanel11.add(jLabel116);
        jLabel116.setBounds(250, 340, 170, 15);
        jPanel11.add(txtTotalBillWeight_stock_DFS);
        txtTotalBillWeight_stock_DFS.setBounds(400, 330, 110, 19);

        SHOW_BTN_STOCK_DFS.setText("Show List");
        SHOW_BTN_STOCK_DFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_BTN_STOCK_DFSActionPerformed(evt);
            }
        });
        jPanel11.add(SHOW_BTN_STOCK_DFS);
        SHOW_BTN_STOCK_DFS.setBounds(800, 10, 130, 30);

        BTN_SORT_DATA_STOCK_DFS.setText("SORT DATA");
        BTN_SORT_DATA_STOCK_DFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SORT_DATA_STOCK_DFSActionPerformed(evt);
            }
        });
        jPanel11.add(BTN_SORT_DATA_STOCK_DFS);
        BTN_SORT_DATA_STOCK_DFS.setBounds(670, 10, 120, 25);

        jLabel117.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel117.setText("Color Indicates");
        jPanel11.add(jLabel117);
        jLabel117.setBounds(360, 0, 130, 20);

        jTextField7.setEditable(false);
        jTextField7.setBackground(new java.awt.Color(255, 152, 98));
        jTextField7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField7.setText("Normal GR");
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jPanel11.add(jTextField7);
        jTextField7.setBounds(490, 20, 130, 20);

        jTextField8.setEditable(false);
        jTextField8.setBackground(new java.awt.Color(220, 45, 45));
        jTextField8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField8.setText("OBSOLETE");
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });
        jPanel11.add(jTextField8);
        jTextField8.setBounds(360, 20, 130, 20);

        jTextField9.setEditable(false);
        jTextField9.setBackground(new java.awt.Color(120, 193, 109));
        jTextField9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField9.setText("F6 GR");
        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });
        jPanel11.add(jTextField9);
        jTextField9.setBounds(490, 0, 130, 20);

        jTabbedPane2.addTab("Diverted Finishing Stock", jPanel11);

        PANBaseTO.setToolTipText("Contacts");
        PANBaseTO.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        PANBaseTO.setLayout(null);

        cmdShowPAN.setText("Show List");
        cmdShowPAN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowPANActionPerformed(evt);
            }
        });
        PANBaseTO.add(cmdShowPAN);
        cmdShowPAN.setBounds(830, 10, 120, 30);

        TablePAN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane45.setViewportView(TablePAN);

        PANBaseTO.add(jScrollPane45);
        jScrollPane45.setBounds(0, 50, 950, 320);

        cmdPANExporttoExcel.setText("Export to Excel");
        cmdPANExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPANExporttoExcelActionPerformed(evt);
            }
        });
        PANBaseTO.add(cmdPANExporttoExcel);
        cmdPANExporttoExcel.setBounds(820, 380, 130, 25);

        jTabbedPane2.addTab("PAN Base TurnOver/Sales Data", PANBaseTO);

        PartyStatus.setToolTipText("Contacts");
        PartyStatus.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        PartyStatus.setLayout(null);

        TablePartyStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane46.setViewportView(TablePartyStatus);

        PartyStatus.add(jScrollPane46);
        jScrollPane46.setBounds(0, 50, 950, 320);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        PartyStatus.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(110, 10, 120, 30);

        BtnView.setText("View");
        BtnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnViewActionPerformed(evt);
            }
        });
        PartyStatus.add(BtnView);
        BtnView.setBounds(10, 10, 90, 30);

        jTabbedPane2.addTab("Party Order Status", PartyStatus);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 133, 1000, 620);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Position");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(580, 50, 70, 20);

        CLR_BTN.setText("Clear All");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(870, 80, 110, 30);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Group Code");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(10, 50, 90, 20);

        txtgroupcode.setToolTipText("Press F1 key for search Party Code");
        txtgroupcode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtgroupcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtgroupcodeFocusLost(evt);
            }
        });
        txtgroupcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgroupcodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtgroupcode);
        txtgroupcode.setBounds(110, 50, 70, 20);

        txtgroupname.setDisabledTextColor(java.awt.Color.black);
        txtgroupname = new JTextFieldHint(new JTextField(),"Group Name");
        txtgroupname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgroupnameActionPerformed(evt);
            }
        });
        getContentPane().add(txtgroupname);
        txtgroupname.setBounds(180, 50, 240, 20);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("UPN No");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(700, 50, 90, 20);

        txtupnno.setToolTipText("Press F1 key for search Party Code");
        txtupnno = new JTextFieldHint(new JTextField(),"Search by F1");
        txtupnno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtupnnoFocusLost(evt);
            }
        });
        txtupnno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtupnnoKeyPressed(evt);
            }
        });
        getContentPane().add(txtupnno);
        txtupnno.setBounds(800, 50, 140, 20);

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(110, 30, 70, 20);

        txtpartyind.setDisabledTextColor(java.awt.Color.black);
        txtpartyname = new JTextFieldHint(new JTextField(),"Party Name");
        txtpartyind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartyindActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyind);
        txtpartyind.setBounds(420, 30, 150, 20);

        txtpartyname.setDisabledTextColor(java.awt.Color.black);
        txtpartyname = new JTextFieldHint(new JTextField(),"Party Name");
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(180, 30, 240, 20);

        chkKeyClientInd.setText("Key Client");
        getContentPane().add(chkKeyClientInd);
        chkKeyClientInd.setBounds(700, 70, 140, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void txtpiecenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpiecenoFocusLost

    }//GEN-LAST:event_txtpiecenoFocusLost

    private void txtproductcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtproductcodeKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
//            aList.SQL = "SELECT SUBSTRING(ITEM_CODE,1,6) AS ITEM_CODE,ITEM_DESC,GRUP FROM PRODUCTION.FELT_RATE_MASTER ORDER BY ITEM_CODE ";
            aList.SQL = "SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC,GROUP_NAME FROM PRODUCTION.FELT_QLT_RATE_MASTER ORDER BY PRODUCT_CODE ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            if (aList.ShowLOV()) {
                //txtpartycode.setText(aList.ReturnVal);
                //txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
                //txtproductcode.setText(aList.ReturnVal);
                txtproductcode.setText(txtproductcode.getText() + aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtproductcodeKeyPressed

    private void txtMachineNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMachineNoKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            if (!txtpartycode.getText().trim().equals("")) {
                aList.SQL = "SELECT DISTINCT MM_MACHINE_NO FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_PARTY_CODE='" + txtpartycode.getText() + "' ";
            } else {
                aList.SQL = "SELECT DISTINCT MM_MACHINE_NO FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER";
            }
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtMachineNo.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtMachineNoKeyPressed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtpartyname.setText("");
        txtpartycode.setText("");
        txtpartyind.setText("");
        txtgroupcode.setText("");
        txtgroupname.setText("");
        txtlengthfrom.setText("");
        txtlengthto.setText("");
        txtwidthfrom.setText("");
        txtwidthto.setText("");
        txtgsmfrom.setText("");
        txtgsmto.setText("");
        txtpieceno.setText("");
        txtproductcode.setText("");
        txtdatefrom.setText("");
        txtdateto.setText("");
        txtMachineNo.setText("");
        txtPosition.setText("");
        txtupnno.setText("");
        S_ENGINEER.setSelectedIndex(0);
        REGION.setSelectedIndex(0);
        chkKeyClientInd.setSelected(false);
//        
//        txtpartyname.setEnabled(true);
//        txtpartycode.setEnabled(true);
//        txtgroupcode.setEnabled(true);
//        txtgroupname.setEnabled(true);
//        txtlengthfrom.setEnabled(true);
//        txtlengthto.setEnabled(true);
//        txtwidthfrom.setEnabled(true);
//        txtwidthto.setEnabled(true);
//        txtgsmfrom.setEnabled(true);
//        txtgsmto.setEnabled(true);
//        txtpieceno.setEnabled(true);
//        txtproductcode.setEnabled(true);
//        txtdatefrom.setEnabled(true);
//        txtdateto.setEnabled(true);
//        REGION.setEnabled(true);
//        S_ENGINEER.setEnabled(true);
//        txtMachineNo.setEnabled(true);
//        txtPosition.setEnabled(true);
//        txtupnno.setEnabled(true);
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void cmdAgeingExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAgeingExportToExcelActionPerformed
        try {
            exp.fillData(TableAgeing, new File("D://Ageing.xls"));
//            exp.fillData(TableAgeing, new File("/root/Desktop/Ageing.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Ageing.xls' successfully in Linux PC or 'D://Ageing.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableAgeing, new File(System.getProperty("user.home") + "/Desktop/Ageing.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Ageing.xls' or 'D://Ageing.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdAgeingExportToExcelActionPerformed

    private void cmdShowAgeingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowAgeingActionPerformed
        txtageingtotal.setText("0");
        GenerateAgeingDetail();
    }//GEN-LAST:event_cmdShowAgeingActionPerformed

    private void cmdcontactsExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdcontactsExporttoExcelActionPerformed
        try {
            exp.fillData(TableContacts, new File("D://Contacts.xls"));
//            exp.fillData(TableContacts, new File("/root/Desktop/Contacts.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Contacts.xls' successfully in Linux PC or 'D://Contacts.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableContacts, new File(System.getProperty("user.home") + "/Desktop/Contacts.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Contacts.xls' or 'D://Contacts.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdcontactsExporttoExcelActionPerformed

    private void cmdShowContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowContactsActionPerformed
        GenerateContacts();
    }//GEN-LAST:event_cmdShowContactsActionPerformed

    private void BTN_SORT_DATA_CANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_CANActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_CANCELLEDActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_CANActionPerformed

    private void Export_CancelledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_CancelledActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(Table_CANCELLED, new File("/root/Desktop/Cancelled_Piece_Report.xls"));
            exp.fillData(Table_CANCELLED, new File("D://Cancelled_Piece_Report.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Cancelled_Piece_Report.xls' successfully in Linux PC or 'D://Cancelled_Piece_Report.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_CANCELLED, new File(System.getProperty("user.home") + "/Desktop/Cancelled_Piece_Report.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Cancelled_Piece_Report.xls' or 'D://Cancelled_Piece_Report.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_CancelledActionPerformed

    private void SHOW_BTN_CANCELLEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_CANCELLEDActionPerformed
        // TODO add your handling code here:
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER) + "", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), txtupnno.getText(), "CANCELED", ORDER_BY);
//        setData_CANCELED();

        FormatGridCancelledPiece();
        GenerateCancelledPiece();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_CANCELLEDActionPerformed

    private void Table_CANCELLEDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_CANCELLEDKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_CANCELLEDKeyPressed

    private void BTN_SORT_DATA_HOLDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_HOLDActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_HOLDActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_HOLDActionPerformed

    private void Export_HoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_HoldActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(Table_HOLD, new File("/root/Desktop/Hold_Piece_Report.xls"));
            exp.fillData(Table_HOLD, new File("D://Hold_Piece_Report.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Hold_Piece_Report.xls' successfully in Linux PC or 'D://Hold_Piece_Report.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_HOLD, new File(System.getProperty("user.home") + "/Desktop/Hold_Piece_Report.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Hold_Piece_Report.xls' or 'D://Hold_Piece_Report.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_HoldActionPerformed

    private void SHOW_BTN_HOLDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_HOLDActionPerformed
        // TODO add your handling code here:
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER) + "", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), txtupnno.getText(), "HOLD", ORDER_BY);
//        setData_HOLD();

        FormatGridHold();
        GenerateHold();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_HOLDActionPerformed

    private void Table_HOLDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_HOLDKeyPressed
        //TODO add your handling code here:
    }//GEN-LAST:event_Table_HOLDKeyPressed

    private void Export_INVOICEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_INVOICEDActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(Table_INVOICED, new File("/root/Desktop/INVOICED_REPORT.xls"));
            exp.fillData(Table_INVOICED, new File("D://INVOICED_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/INVOICED_REPORT.xls' successfully in Linux PC or 'D://INVOICED_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_INVOICED, new File(System.getProperty("user.home") + "/Desktop/INVOICED_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/INVOICED_REPORT.xls' or 'D://INVOICED_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_INVOICEDActionPerformed

    private void SHOW_BTN_INVOICEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_INVOICEDActionPerformed
        // TODO add your handling code here:
        if (!txtdatefrom.getText().equals("") && !txtdateto.getText().equals("")) {
            GenerateInvoiced();
            InvFlag = true;
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter From/To Date.");
            return;
        }

//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsqfrom.getText(), txtgsqto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER)+"", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), "INVOICED", ORDER_BY);
//        //hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsqfrom.getText(), txtgsqto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER)+"", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), "INVOICE", ORDER_BY);
//        setData_INVOICED();
    }//GEN-LAST:event_SHOW_BTN_INVOICEDActionPerformed

    private void Table_INVOICEDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_INVOICEDKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_INVOICEDKeyPressed

    private void Export_BSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_BSRActionPerformed
        // TODO add your handling code here:
        try {

//            exp.fillData(Table_BSR, new File("/root/Desktop/BSR_REPORT.xls"));
            exp.fillData(Table_BSR, new File("D://BSR_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/BSR_REPORT.xls' successfully in Linux PC or 'D://BSR_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_BSR, new File(System.getProperty("user.home") + "/Desktop/BSR_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/BSR_REPORT.xls' or 'D://BSR_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_BSRActionPerformed

    private void SHOW_BTN_BSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_BSRActionPerformed
        // TODO add your handling code here:
//        if (!txtdatefrom.getText().equals("") && !txtdateto.getText().equals("")) {
        GenerateBSR();
        BSRFlag = true;
//        } else {
//            JOptionPane.showMessageDialog(null, "Please Enter From/To Date.");
//            return;
//        }

//        GenerateBSR();
//        BSRFlag = true;
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsqfrom.getText(), txtgsqto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER)+"", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), "BSR", ORDER_BY);
//        setData_BSR();
    }//GEN-LAST:event_SHOW_BTN_BSRActionPerformed

    private void Table_BSRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_BSRKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_BSRKeyPressed

    private void BTN_SORT_DATA_DIVERTEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_DIVERTEDActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_DIVERTEDActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_DIVERTEDActionPerformed

    private void Export_DivertedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_DivertedActionPerformed
        // TODO add your handling code here:
        try {

//            exp.fillData(Table_DIVERTED, new File("/root/Desktop/DIVERTED_REPORT.xls"));
            exp.fillData(Table_DIVERTED, new File("D://DIVERTED_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/DIVERTED_REPORT.xls' successfully in Linux PC or 'D://DIVERTED_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_DIVERTED, new File(System.getProperty("user.home") + "/Desktop/DIVERTED_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/DIVERTED_REPORT.xls' or 'D://DIVERTED_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_DivertedActionPerformed

    private void SHOW_BTN_DIVERTEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_DIVERTEDActionPerformed
        // TODO add your handling code here:

//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER) + "", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), "DIVERTED", ORDER_BY);
//        setData_DIVERTED();
        FormatGridDiverted();
        GenerateDiverted();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_DIVERTEDActionPerformed

    private void Table_DIVERTEDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_DIVERTEDKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_DIVERTEDKeyPressed

    private void BTN_SORT_DATA_DIV_LISTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_DIV_LISTActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_DIV_LISTActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_DIV_LISTActionPerformed

    private void Export_Div_ListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_Div_ListActionPerformed
        // TODO add your handling code here:
        try {

//            exp.fillData(Table_DIV_LIST, new File("/root/Desktop/DIVERSION_LIST_REPORT.xls"));
            exp.fillData(Table_DIV_LIST, new File("D://DIVERSION_LIST_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/DIVERSION_LIST_REPORT.xls' successfully in Linux PC or 'D://DIVERSION_LIST_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_DIV_LIST, new File(System.getProperty("user.home") + "/Desktop/DIVERSION_LIST_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/DIVERSION_LIST_REPORT.xls' or 'D://DIVERSION_LIST_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_Div_ListActionPerformed

    private void SHOW_BTN_DIV_LISTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_DIV_LISTActionPerformed
        // TODO add your handling code here:
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER) + "", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), "DIV_LIST", ORDER_BY);
//        setData_DIV_LIST();
        FormatGridDivList();
        GenerateDivList();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_DIV_LISTActionPerformed

    private void Table_DIV_LISTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_DIV_LISTKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_DIV_LISTKeyPressed

    private void Export_StockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_StockActionPerformed
        // TODO add your handling code here:
        try {

//            exp.fillData(Table_STOCK, new File("/root/Desktop/STOCK_REPORT.xls"));
            exp.fillData(Table_STOCK, new File("D://STOCK_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/STOCK_REPORT.xls' successfully in Linux PC or 'D://STOCK_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_STOCK, new File(System.getProperty("user.home") + "/Desktop/STOCK_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/STOCK_REPORT.xls' or 'D://STOCK_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_StockActionPerformed

    private void Table_STOCKKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_STOCKKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_STOCKKeyPressed

    private void Export_OrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_OrderActionPerformed
        // TODO add your handling code here:
        try {

            exp.fillData(Table, new File("/root/Desktop/ORDERED_REPORT.xls"));

            exp.fillData(Table, new File("D://ORDERED_REPORT.xls"));

            File file = new File("/root/Desktop/ORDERED_REPORT.xls");
            File file1 = new File("D://ORDERED_REPORT.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }             // TODO add your handling code here:
    }//GEN-LAST:event_Export_OrderActionPerformed

    private void SHOW_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTNActionPerformed
        //txtSalesPartyTotal.setText("0");
        GenerateOrder();
//        int size = DataModel[1].getRowCount();
//        for (int j = size - 1; j >= 0; j--) {
//            DataModel[1].removeRow(j);
//        }
//
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        if("".equals(ORDER_BY))
//        {
//            ORDER_BY = " ORDER BY PR_ORDER_DATE DESC";
//        }
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsqfrom.getText(), txtgsqto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER)+"", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), "ORDERED", ORDER_BY);
//        setData_order();
    }//GEN-LAST:event_SHOW_BTNActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyPressed

    private void cmdshowSalesYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdshowSalesYActionPerformed
        txtsalestotal.setText("0");
        txtsalestotal1.setText("0");
        txtdatefrom.setText("");
        txtdateto.setText((""));
        //GenerateSalesDetailY();
        //GenerateSalesDetailM();        
        GenerateSalesDetailYNew();
        GenerateSalesDetailMNew();
    }//GEN-LAST:event_cmdshowSalesYActionPerformed
    private void GenerateSalesDetailY() {
        String SelUserID = "";
        String strSQL = "";
        String chkI = "";
        try {
            FormatGridSalesY();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            String strZone = REGION.getSelectedItem().toString();
            if (strZone.equals("All")) {
                strZone = "";
            }
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
            //strSQL+= "SELECT FINYR,SUM(TOTAL_NET_AMOUNT) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA ";

            strSQL = "SELECT FINYR, SUM(INVOICE_AMT) AS TOTAL, SUM(ACTUAL_WEIGHT) AS KG, SUM(SQMTR) AS SQMTR, SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN INVOICE_AMT END,0))  AS DRYNET, SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN ACTUAL_WEIGHT END ,0))  AS DRYKG, SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN SQMTR END,0))  AS DRYSQMTR, SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN INVOICE_AMT END,0))  AS WETNET, SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN ACTUAL_WEIGHT END ,0))  AS WETKG, SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN SQMTR END,0))  AS WETSQMTR, SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN INVOICE_AMT END,0))  AS ACNET, SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN ACTUAL_WEIGHT END ,0))  AS ACKG, SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN SQMTR END,0))  AS ACSQMTR  FROM ( SELECT  *  FROM ( SELECT A.BALE_NO,A.PARTY_CODE,A.FINYR,C.CATEGORY,B.INVOICE_AMT,B.ACTUAL_WEIGHT,B.SQMTR FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A,PRODUCTION.FELT_SAL_INVOICE_DETAIL B, PRODUCTION.FELT_QLT_RATE_MASTER C WHERE SUBSTRING(B.PRODUCT_CODE,1,6) = C.PRODUCT_CODE AND A.INVOICE_NO=B.INVOICE_NO AND A.BALE_NO=B.BALE_NO AND CAST(A.INVOICE_DATE as date) = CAST(B.INVOICE_DATE AS date) AND";
            if (!txtproductcode.getText().equals("")) {
                strSQL = strSQL + "SUBSTRING(B.PRODUCT_CODE,1,6) IN (" + strProductCode + ") AND";
            }

            if (!txtpartycode.getText().equals("")) {
                strSQL = strSQL + " A.PARTY_CODE = " + SelUserID + " AND ";
            }
            //strSQL = strSQL + " A.FINYR != '2007-2008') AS AD LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS BD ON AD.PARTY_CODE = BD.PARTY) AS CD WHERE INCHARGE_CD = 1 GROUP BY FINYR ORDER BY FINYR DESC";
            strSQL = strSQL + " A.FINYR != '2007-2008') AS AD LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS BD ON AD.PARTY_CODE = BD.PARTY) AS CD ";
            
            if (chkKeyClientInd.isSelected()){
                chkI = " AND KEY_CLIENT_IND=1 ";
            }
            
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            if (inchargeby == 0) {
                strSQL += "";
            }
            if (inchargeby == 1) {
                strSQL += "WHERE INCHARGE_CD = 1"+chkI;
            }
            if (inchargeby == 2) {
                strSQL += "WHERE INCHARGE_CD = 2"+chkI;
            }
            if (inchargeby == 3) {
                strSQL += "WHERE INCHARGE_CD = 3"+chkI;
            }
            if (inchargeby == 4) {
                strSQL += "WHERE INCHARGE_CD = 4"+chkI;
            }
            if (inchargeby == 5) {
                strSQL += "WHERE INCHARGE_CD = 5"+chkI;
            }
            if (inchargeby == 6) {
                strSQL += "WHERE INCHARGE_CD = 6"+chkI;
            }
            if (inchargeby == 7) {
                strSQL += "WHERE INCHARGE_CD IS NULL";
            }
            strSQL += " GROUP BY FINYR ORDER BY FINYR DESC";
            System.out.println("QUERY L: " + strSQL);
//          strSQL+="SELECT  FINYR,SUM(TOTAL_NET_AMOUNT) AS TOTAL,SUM(GROSS_KG) AS KG,SUM(GROSS_SQ_MTR) AS SQMTR,SUM(COALESCE(CASE WHEN CATEGORY ='DRY' THEN TOTAL_NET_AMOUNT END,0))  AS DRYNET,SUM(COALESCE(CASE WHEN  CATEGORY ='DRY' THEN GROSS_KG END ,0))  AS DRYKG,SUM(COALESCE(CASE WHEN   CATEGORY ='DRY' THEN GROSS_SQ_MTR END,0))  AS DRYSQMTR,SUM(COALESCE(CASE WHEN   CATEGORY ='WET' THEN TOTAL_NET_AMOUNT END,0))  AS WETNET,SUM(COALESCE(CASE WHEN   CATEGORY ='WET' THEN GROSS_KG END ,0))  AS WETKG,SUM(COALESCE(CASE WHEN   CATEGORY ='WET' THEN GROSS_SQ_MTR END,0))  AS WETSQMTR,SUM(COALESCE(CASE WHEN   CATEGORY ='AC' THEN TOTAL_NET_AMOUNT END,0))  AS ACNET,SUM(COALESCE(CASE WHEN   CATEGORY ='AC' THEN GROSS_KG END ,0))  AS ACKG,SUM(COALESCE(CASE WHEN   CATEGORY ='AC' THEN GROSS_SQ_MTR END,0))  AS ACSQMTR  FROM (SELECT  *  FROM (SELECT * FROM PRODUCTION.FELT_INVOICE_DATA,PRODUCTION.FELT_RATE_MASTER  ";
//          strSQL+= "WHERE QUALITY_NO = ITEM_CODE AND ";        
//        if(!txtpartycode.getText().equals("")){
//          strSQL+= "PARTY_CODE = "+SelUserID+" AND ";  
//        }
//        if(!txtproductcode.getText().equals("")){
//          strSQL+= "SUBSTRING(QUALITY_NO,1,6) IN ("+strProductCode+") AND ";  
//        }
//        if(!strZone.equals("")){
//          strSQL+= "ZONE1='"+strZone+"' AND ";  
//        }        
//        //strSQL+= "FINYR != '2007-2008' GROUP BY FINYR ";
//        //strSQL+= "ORDER BY FINYR DESC"; 
//          strSQL+="FINYR != '2007-2008') AS A LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON A.PARTY_CODE = B.PARTY) AS C ";
//         int inchargeby=EITLERPGLOBAL.getComboCode(S_ENGINEER);
//        if(inchargeby==0){
//          strSQL+="";    
//        }
//        if(inchargeby==1){
//          strSQL+="WHERE INCHARGE_CD = 1";    
//        }         
//        if(inchargeby==2){
//          strSQL+="WHERE INCHARGE_CD = 2";    
//        }
//        if(inchargeby==3){
//          strSQL+="WHERE INCHARGE_CD = 3";    
//        }
//        if(inchargeby==4){
//          strSQL+="WHERE INCHARGE_CD = 4";    
//        }
//        if(inchargeby==5){
//          strSQL+="WHERE INCHARGE_CD = 5";    
//        }
//        if(inchargeby==6){
//          strSQL+="WHERE INCHARGE_CD = 6";    
//        }
//         if(inchargeby==7){
//          strSQL+="WHERE INCHARGE_CD IS NULL";    
//        }
//         strSQL+=" GROUP BY FINYR ORDER BY FINYR DESC ";
            //System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtsalestotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[15];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("TOTAL");
                    rowData[3] = rsTmp.getString("KG");
                    rowData[4] = rsTmp.getString("SQMTR");
                    rowData[5] = rsTmp.getString("DRYNET");
                    rowData[6] = rsTmp.getString("DRYKG");
                    rowData[7] = rsTmp.getString("DRYSQMTR");
                    rowData[8] = rsTmp.getString("WETNET");
                    rowData[9] = rsTmp.getString("WETKG");
                    rowData[10] = rsTmp.getString("WETSQMTR");
                    rowData[11] = rsTmp.getString("ACNET");
                    rowData[12] = rsTmp.getString("ACKG");
                    rowData[13] = rsTmp.getString("ACSQMTR");
                    DataModelSalesY.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSalesDetailYNew() {
        String SelUserID = "";
        String strSQL = "";
        try {
            FormatGridSalesY();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            String strZone = REGION.getSelectedItem().toString();
            if (strZone.equals("All")) {
                strZone = "";
            }
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
//            strSQL += "SELECT FINYR,";
//            strSQL += "SUM(INVOICE_AMT) AS TOTAL, SUM(ACTUAL_WEIGHT) AS KG, SUM(SQMTR) AS SQMTR,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN INVOICE_AMT END,0))  AS DRYNET,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN ACTUAL_WEIGHT END ,0))  AS DRYKG,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN SQMTR END,0))  AS DRYSQMTR,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN INVOICE_AMT END,0))  AS WETNET,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN ACTUAL_WEIGHT END ,0))  AS WETKG,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN SQMTR END,0))  AS WETSQMTR,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN INVOICE_AMT END,0))  AS ACNET,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN ACTUAL_WEIGHT END ,0))  AS ACKG,";
//            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN SQMTR END,0))  AS ACSQMTR ";
//            strSQL += "FROM (";
//            strSQL += "SELECT  BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR,CATEGORY,";
//            strSQL += "CASE WHEN SUBSTRING(PRODUCT_CODE,1,1) IN (6)  THEN 5  ELSE INCHARGE_CD END AS INCHARGE_CD   FROM (";
//            strSQL += "SELECT BALE_NO,PARTY_CODE,FINYR,A.PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, CATEGORY ";
//            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A, PRODUCTION.FELT_QLT_RATE_MASTER C ";
//            strSQL += "WHERE A.PRODUCT_CODE = C.PRODUCT_CODE AND A.APPROVED=1 AND A.CANCELLED=0 AND C.EFFECTIVE_TO='0000-00-00') AS A ";
//            strSQL += "LEFT JOIN (";
//            strSQL += "SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON PARTY_CODE = PARTY";
//            strSQL += ") AS C WHERE PARTY_CODE != '' ";
//            if (!txtpartycode.getText().equals("")) {
//                strSQL += " AND PARTY_CODE= '" + SelUserID + "' ";
//            }
//
//            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
//            System.out.println(inchargeby);
//            if (inchargeby != 0) {
//                strSQL += "AND INCHARGE_CD = " + inchargeby + "";
//            } else {
//                strSQL += "";
//            }
//
////            if (inchargeby == 0) {
////                strSQL += "";
////            }
////            if (inchargeby == 1) {
////                strSQL += "AND INCHARGE_CD = 1";
////            }
////            if (inchargeby == 2) {
////                strSQL += "AND INCHARGE_CD = 2";
////            }
////            if (inchargeby == 3) {
////                strSQL += "AND INCHARGE_CD = 3";
////            }
////            if (inchargeby == 4) {
////                strSQL += "AND INCHARGE_CD = 4";
////            }
////            if (inchargeby == 5) {
////                strSQL += "AND INCHARGE_CD = 5";
////            }
////            if (inchargeby == 6) {
////                strSQL += "AND INCHARGE_CD = 6";
////            }
////            if (inchargeby == 7) {
////                strSQL += "AND INCHARGE_CD IS NULL";
////            }
//            if (!txtproductcode.getText().equals("")) {
//                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
//            }
//
////"--GROUP BY FINYR,PRODUCT_CODE" +
//            strSQL += " GROUP BY FINYR ORDER BY FINYR DESC ";

            String Cndtn = " ";
            if (!txtpartycode.getText().equals("")) {
                Cndtn += " AND PARTY_CODE= '" + SelUserID + "' ";
            }

            String chkI = "";
            if (chkKeyClientInd.isSelected()){
                chkI = " AND KEY_CLIENT_IND=1 ";
            }
                    
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            System.out.println(inchargeby);
            if (inchargeby != 0) {
                Cndtn += "AND INCHARGE_CD = " + inchargeby + "";
            } else {
                Cndtn += "";
            }
            if (!txtproductcode.getText().equals("")) {
                Cndtn += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

            String CndtnGR = " ";
            if (!txtpartycode.getText().equals("")) {
                CndtnGR += " AND D.PARTY_CODE= '" + SelUserID + "' ";
            }

            int inchargebyGR = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            System.out.println(inchargebyGR);
            if (inchargebyGR != 0) {
                CndtnGR += "AND INCHARGE_CD = " + inchargeby + "";
            } else {
                CndtnGR += "";
            }
            if (!txtproductcode.getText().equals("")) {
                CndtnGR += " AND QUALITY_NO IN (" + strProductCode + ") ";
            }

            strSQL += "SELECT FINYR, ";
            strSQL += "TOTAL,COALESCE(GTOTAL,0) AS GTOTAL,TOTAL-COALESCE(GTOTAL,0) AS NTOTAL, ";
            strSQL += "KG,COALESCE(GKG,0) AS GKG,KG-COALESCE(GKG,0) AS NKG, ";
            strSQL += "SQMTR,COALESCE(GSQMTR,0) AS GSQMTR,SQMTR-COALESCE(GSQMTR,0) AS NSQMTR, ";
            strSQL += "PRESSNET,COALESCE(GPRESSNET,0) AS GPRESSNET,PRESSNET-COALESCE(GPRESSNET,0) AS NPRESSNET, ";
            strSQL += "PRESSKG,COALESCE(GPRESSKG,0) AS GPRESSKG,PRESSKG-COALESCE(GPRESSKG,0) AS NPRESSKG, ";
            strSQL += "PRESSSQMTR,COALESCE(GPRESSSQMTR,0) AS GPRESSSQMTR,PRESSSQMTR-COALESCE(GPRESSSQMTR,0) AS NPRESSSQMTR, ";
            strSQL += "HDSNET,COALESCE(GHDSNET,0) AS GHDSNET,HDSNET-COALESCE(GHDSNET,0) AS NHDSNET, ";
            strSQL += "HDSKG,COALESCE(GHDSKG,0) AS GHDSKG,HDSKG-COALESCE(GHDSKG,0) AS NHDSKG, ";
            strSQL += "HDSSQMTR,COALESCE(GHDSSQMTR,0) AS GHDSSQMTR,HDSSQMTR-COALESCE(GHDSSQMTR,0) AS NHDSSQMTR, ";
            strSQL += "SDFNET,COALESCE(GSDFNET,0) AS GSDFNET,SDFNET-COALESCE(GSDFNET,0) AS NSDFNET, ";
            strSQL += "SDFKG,COALESCE(GSDFKG,0) AS GSDFKG,SDFKG-COALESCE(GSDFKG,0) AS NSDFKG, ";
            strSQL += "SDFSQMTR,COALESCE(GSDFSQMTR,0) AS GSDFSQMTR,SDFSQMTR-COALESCE(GSDFSQMTR,0) AS NSDFSQMTR, ";
            strSQL += "ACNET,COALESCE(GACNET,0) AS GACNET,ACNET-COALESCE(GACNET,0) AS NACNET, ";
            strSQL += "ACKG,COALESCE(GACKG,0) AS GACKG,ACKG-COALESCE(GACKG,0) AS NACKG, ";
            strSQL += "ACSQMTR,COALESCE(GACSQMTR,0) AS GACSQMTR,ACSQMTR-COALESCE(GACSQMTR,0) AS NACSQMTR ";
            strSQL += "FROM ";
            strSQL += "(SELECT * FROM ";
            strSQL += "(SELECT FINYR, ";
            strSQL += "ROUND(SUM(INVOICE_AMT/100000),2) AS TOTAL, ROUND(SUM(ACTUAL_WEIGHT),2) AS KG, ROUND(SUM(SQMTR),2) AS SQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN INVOICE_AMT/100000 END,0)),2)  AS PRESSNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN ACTUAL_WEIGHT END ,0)),2)  AS PRESSKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN SQMTR END,0)),2)  AS PRESSSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN INVOICE_AMT/100000 END,0)),2)  AS HDSNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN ACTUAL_WEIGHT END ,0)),2)  AS HDSKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN SQMTR END,0)),2)  AS HDSSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='4' THEN INVOICE_AMT/100000 END,0)),2)  AS SDFNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='4' THEN ACTUAL_WEIGHT END ,0)),2)  AS SDFKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='4' THEN SQMTR END,0)),2)  AS SDFSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN INVOICE_AMT/100000 END,0)),2)  AS ACNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN ACTUAL_WEIGHT END ,0)),2)  AS ACKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN SQMTR END,0)),2)  AS ACSQMTR ";
            strSQL += "FROM ( ";
            strSQL += "SELECT  BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR,CATEGORY, ";
//            strSQL += "CASE WHEN SUBSTRING(PRODUCT_CODE,1,1) IN (6)  THEN 5  ELSE INCHARGE_CD END AS INCHARGE_CD   FROM ( ";
            strSQL += "INCHARGE_CD   FROM ( ";
            strSQL += "SELECT BALE_NO,PARTY_CODE,FINYR,A.PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, C.CATEGORY ";
            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A, PRODUCTION.FELT_QLT_RATE_MASTER C ";
            strSQL += "WHERE A.PRODUCT_CODE = C.PRODUCT_CODE AND A.APPROVED=1 AND A.CANCELLED=0 AND C.EFFECTIVE_TO='0000-00-00') AS A ";
            strSQL += "LEFT JOIN ( ";
            strSQL += "SELECT PARTY_CODE AS PARTY,INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON PARTY_CODE = PARTY ";
            strSQL += ") AS C WHERE PARTY_CODE != '' " + Cndtn + " " + chkI + " ";
            strSQL += "GROUP BY FINYR ) AS A ";
            strSQL += "LEFT JOIN ";
            strSQL += "(SELECT FIN_YR, ";
            strSQL += "ROUND(SUM(NET_AMOUNT/100000),2) AS GTOTAL, ROUND(SUM(D.ACTUAL_WEIGHT),2) AS GKG, ROUND(SUM(SQMTR),2) AS GSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='3' THEN NET_AMOUNT/100000 END,0)),2)  AS GPRESSNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='3' THEN D.ACTUAL_WEIGHT END ,0)),2)  AS GPRESSKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='3' THEN SQMTR END,0)),2)  AS GPRESSSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='2' THEN NET_AMOUNT/100000 END,0)),2)  AS GHDSNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='2' THEN D.ACTUAL_WEIGHT END ,0)),2)  AS GHDSKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='2' THEN SQMTR END,0)),2)  AS GHDSSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='4' THEN NET_AMOUNT/100000 END,0)),2)  AS GSDFNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='4' THEN D.ACTUAL_WEIGHT END ,0)),2)  AS GSDFKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='4' THEN SQMTR END,0)),2)  AS GSDFSQMTR, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='1' THEN NET_AMOUNT/100000 END,0)),2)  AS GACNET, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='1' THEN D.ACTUAL_WEIGHT END ,0)),2)  AS GACKG, ";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN QTYCATEGORY ='1' THEN SQMTR END,0)),2)  AS GACSQMTR ";
            strSQL += "FROM PRODUCTION.FELT_SALES_RETURNS_HEADER H,PRODUCTION.FELT_SALES_RETURNS_DETAIL D, DINESHMILLS.D_SAL_FIN_YEAR, DINESHMILLS.D_SAL_PARTY_MASTER PM, ";
            strSQL += "(SELECT BALE_NO,PARTY_CODE,FINYR,A.PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, CATEGORY AS QTYCATEGORY ,INVOICE_NO ";
            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A, PRODUCTION.FELT_QLT_RATE_MASTER C WHERE A.PRODUCT_CODE = C.PRODUCT_CODE AND A.APPROVED=1 AND A.CANCELLED=0 AND C.EFFECTIVE_TO='0000-00-00') AS INV ";
            strSQL += "WHERE H.DOC_NO= D.DOC_NO AND  H.APPROVED=1 AND H.CANCELED=0 AND H.DOC_DATE >= DATE_FROM AND H.DOC_DATE <=DATE_TO ";
            strSQL += "AND INV.INVOICE_NO = D.INVOICE_NO AND  INV.INVOICE_DATE = D.INVOICE_DATE ";
            strSQL += "AND D.PARTY_CODE=PM.PARTY_CODE " + CndtnGR + " " + chkI + " ";
            strSQL += "GROUP BY FIN_YR) AS B ";
            strSQL += "ON FINYR = FIN_YR) AS M ";
            strSQL += "GROUP BY FINYR ORDER BY FINYR DESC ";

            System.out.println("QUERY L: " + strSQL);
//          
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtsalestotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[50];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
//                    rowData[1] = rsTmp.getString("FINYR");
//                    rowData[2] = rsTmp.getString("TOTAL");
//                    rowData[3] = rsTmp.getString("KG");
//                    rowData[4] = rsTmp.getString("SQMTR");
//                    rowData[5] = rsTmp.getString("DRYNET");
//                    rowData[6] = rsTmp.getString("DRYKG");
//                    rowData[7] = rsTmp.getString("DRYSQMTR");
//                    rowData[8] = rsTmp.getString("WETNET");
//                    rowData[9] = rsTmp.getString("WETKG");
//                    rowData[10] = rsTmp.getString("WETSQMTR");
//                    rowData[11] = rsTmp.getString("ACNET");
//                    rowData[12] = rsTmp.getString("ACKG");
//                    rowData[13] = rsTmp.getString("ACSQMTR");
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("TOTAL");
                    rowData[3] = rsTmp.getString("GTOTAL");
                    rowData[4] = rsTmp.getString("NTOTAL");
                    rowData[5] = rsTmp.getString("KG");
                    rowData[6] = rsTmp.getString("GKG");
                    rowData[7] = rsTmp.getString("NKG");
                    rowData[8] = rsTmp.getString("SQMTR");
                    rowData[9] = rsTmp.getString("GSQMTR");
                    rowData[10] = rsTmp.getString("NSQMTR");
                    rowData[11] = rsTmp.getString("PRESSNET");
                    rowData[12] = rsTmp.getString("GPRESSNET");
                    rowData[13] = rsTmp.getString("NPRESSNET");
                    rowData[14] = rsTmp.getString("PRESSKG");
                    rowData[15] = rsTmp.getString("GPRESSKG");
                    rowData[16] = rsTmp.getString("NPRESSKG");
                    rowData[17] = rsTmp.getString("PRESSSQMTR");
                    rowData[18] = rsTmp.getString("GPRESSSQMTR");
                    rowData[19] = rsTmp.getString("NPRESSSQMTR");
                    rowData[20] = rsTmp.getString("HDSNET");
                    rowData[21] = rsTmp.getString("GHDSNET");
                    rowData[22] = rsTmp.getString("NHDSNET");
                    rowData[23] = rsTmp.getString("HDSKG");
                    rowData[24] = rsTmp.getString("GHDSKG");
                    rowData[25] = rsTmp.getString("NHDSKG");
                    rowData[26] = rsTmp.getString("HDSSQMTR");
                    rowData[27] = rsTmp.getString("GHDSSQMTR");
                    rowData[28] = rsTmp.getString("NHDSSQMTR");
                    rowData[29] = rsTmp.getString("SDFNET");
                    rowData[30] = rsTmp.getString("GSDFNET");
                    rowData[31] = rsTmp.getString("NSDFNET");
                    rowData[32] = rsTmp.getString("SDFKG");
                    rowData[33] = rsTmp.getString("GSDFKG");
                    rowData[34] = rsTmp.getString("NSDFKG");
                    rowData[35] = rsTmp.getString("SDFSQMTR");
                    rowData[36] = rsTmp.getString("GSDFSQMTR");
                    rowData[37] = rsTmp.getString("NSDFSQMTR");
                    rowData[38] = rsTmp.getString("ACNET");
                    rowData[39] = rsTmp.getString("GACNET");
                    rowData[40] = rsTmp.getString("NACNET");
                    rowData[41] = rsTmp.getString("ACKG");
                    rowData[42] = rsTmp.getString("GACKG");
                    rowData[43] = rsTmp.getString("NACKG");
                    rowData[44] = rsTmp.getString("ACSQMTR");
                    rowData[45] = rsTmp.getString("GACSQMTR");
                    rowData[46] = rsTmp.getString("NACSQMTR");
                    DataModelSalesY.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSalesDetailM() {
        String SelUserID = "";
        String strSQL = "";
        try {
            FormatGridSalesM();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            String strZone = REGION.getSelectedItem().toString();
            if (strZone.equals("All")) {
                strZone = "";
            }
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
            //strSQL+= "SELECT PARTY_CODE,EXTRACT(YEAR FROM INVOICE_DATE) As YEAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC,";
            //strSQL+= " SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA ";
            //strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
            //strSQL+= "GROUP BY PARTY_CODE,EXTRACT(YEAR FROM INVOICE_DATE)";
            //strSQL+="SELECT PARTY_CODE ,EXTRACT(YEAR FROM INVOICE_DATE) AS YEAR ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC1 ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12)  THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA WHERE PARTY_CODE = "+SelUserID+" GROUP BY PARTY_CODE,EXTRACT(YEAR FROM INVOICE_DATE)";    

            //strSQL+="SELECT FINYR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC1 ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12)  THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA ";
            strSQL = "SELECT FINYR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN INVOICE_AMT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN INVOICE_AMT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN INVOICE_AMT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN INVOICE_AMT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN INVOICE_AMT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN INVOICE_AMT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN INVOICE_AMT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN INVOICE_AMT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN INVOICE_AMT END) AS DEC1,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN INVOICE_AMT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN INVOICE_AMT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN INVOICE_AMT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN INVOICE_AMT END) AS TOTAL FROM (SELECT  *  FROM (SELECT A.BALE_NO,A.PARTY_CODE,A.FINYR,C.CATEGORY,B.INVOICE_AMT,B.INVOICE_DATE,B.ACTUAL_WEIGHT,B.SQMTR   FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A,PRODUCTION.FELT_SAL_INVOICE_DETAIL B,PRODUCTION.FELT_QLT_RATE_MASTER C WHERE ";

            if (!txtpartycode.getText().equals("")) {
                //strSQL = strSQL + " A.PARTY_CODE = '826638' AND";
                strSQL = strSQL + " A.PARTY_CODE = '" + SelUserID + "' AND";
            }
            strSQL = strSQL + " SUBSTRING(B.PRODUCT_CODE,1,6) = C.PRODUCT_CODE AND  A.INVOICE_NO=B.INVOICE_NO AND A.BALE_NO=B.BALE_NO AND CAST(A.INVOICE_DATE as date) = CAST(B.INVOICE_DATE AS date) AND ";
            if (!txtproductcode.getText().equals("")) {
                //strSQL = strSQL + " SUBSTRING(B.PRODUCT_CODE,1,6) IN ('259010') AND ";
                strSQL = strSQL + " SUBSTRING(B.PRODUCT_CODE,1,6) IN (" + strProductCode + ") AND ";
            }
            strSQL = strSQL + " FINYR != '2007-2008') AS A  LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON A.PARTY_CODE = B.PARTY) AS C ";
            
            String chkI = "";
            if (chkKeyClientInd.isSelected()){
                chkI = " AND KEY_CLIENT_IND=1 ";
            }
            
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            if (inchargeby == 0) {
                strSQL += "";
            }
            if (inchargeby == 1) {
                strSQL += "WHERE INCHARGE_CD = 1"+chkI;
            }
            if (inchargeby == 2) {
                strSQL += "WHERE INCHARGE_CD = 2"+chkI;
            }
            if (inchargeby == 3) {
                strSQL += "WHERE INCHARGE_CD = 3"+chkI;
            }
            if (inchargeby == 4) {
                strSQL += "WHERE INCHARGE_CD = 4"+chkI;
            }
            if (inchargeby == 5) {
                strSQL += "WHERE INCHARGE_CD = 5"+chkI;
            }
            if (inchargeby == 6) {
                strSQL += "WHERE INCHARGE_CD = 6"+chkI;
            }
            if (inchargeby == 7) {
                strSQL += "WHERE INCHARGE_CD IS NULL";
            }
            strSQL += " GROUP BY FINYR ORDER BY FINYR DESC ";

//        strSQL="SELECT FINYR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC1 ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12)  THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM (SELECT  *  FROM (SELECT *  FROM PRODUCTION.FELT_INVOICE_DATA ";
//         strSQL+="WHERE ";
//         if(!txtpartycode.getText().equals("")){
//          strSQL+="PARTY_CODE = "+SelUserID+" AND ";
//        }
//         if(!txtproductcode.getText().equals("")){
//          strSQL+="SUBSTRING(QUALITY_NO,1,6) IN ("+strProductCode+") AND ";
//        } 
//         if(!strZone.equals("")){
//          strSQL+="ZONE1='"+REGION.getSelectedItem()+"' AND ";
//        }
//         //strSQL+="FINYR != '2007-2008' GROUP BY FINYR ORDER BY FINYR DESC ";  
//         strSQL+="FINYR != '2007-2008') AS A LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON A.PARTY_CODE = B.PARTY) AS C ";
//         int inchargeby=EITLERPGLOBAL.getComboCode(S_ENGINEER);
//        if(inchargeby==0){
//          strSQL+="";    
//        }
//        if(inchargeby==1){
//          strSQL+="WHERE INCHARGE_CD = 1";    
//        }         
//        if(inchargeby==2){
//          strSQL+="WHERE INCHARGE_CD = 2";    
//        }
//        if(inchargeby==3){
//          strSQL+="WHERE INCHARGE_CD = 3";    
//        }
//        if(inchargeby==4){
//          strSQL+="WHERE INCHARGE_CD = 4";    
//        }
//        if(inchargeby==5){
//          strSQL+="WHERE INCHARGE_CD = 5";    
//        }
//        if(inchargeby==6){
//          strSQL+="WHERE INCHARGE_CD = 6";    
//        }
//         if(inchargeby==7){
//          strSQL+="WHERE INCHARGE_CD IS NULL";    
//        }
//         strSQL+=" GROUP BY FINYR ORDER BY FINYR DESC ";
            // strSQL+="SELECT FINYR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC1 ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12)  THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA WHERE FINYR != '2007-2008' GROUP BY FINYR ORDER BY FINYR DESC";    
            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtsalestotal1.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[15];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("APR");
                    rowData[3] = rsTmp.getString("MAY");
                    rowData[4] = rsTmp.getString("JUN");
                    rowData[5] = rsTmp.getString("JUL");
                    rowData[6] = rsTmp.getString("AUG");
                    rowData[7] = rsTmp.getString("SEP");
                    rowData[8] = rsTmp.getString("OCT");
                    rowData[9] = rsTmp.getString("NOV");
                    rowData[10] = rsTmp.getString("DEC1");
                    rowData[11] = rsTmp.getString("JAN");
                    rowData[12] = rsTmp.getString("FEB");
                    rowData[13] = rsTmp.getString("MAR");
                    rowData[14] = rsTmp.getString("TOTAL");
                    DataModelSalesM.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSalesDetailMNew() {
        String SelUserID = "";
        String strSQL = "";
        try {
            FormatGridSalesM();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            String strZone = REGION.getSelectedItem().toString();
            if (strZone.equals("All")) {
                strZone = "";
            }
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";

//            strSQL += "SELECT FINYR, ";
////--SELECT FINYR,PRODUCT_CODE, 
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN INVOICE_AMT END) AS APR, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN INVOICE_AMT END) AS MAY, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN INVOICE_AMT END) AS JUN, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN INVOICE_AMT END) AS JUL, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN INVOICE_AMT END) AS AUG, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN INVOICE_AMT END) AS SEP, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN INVOICE_AMT END) AS OCT,";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN INVOICE_AMT END) AS NOV, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN INVOICE_AMT END) AS DEC1, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN INVOICE_AMT END) AS JAN, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN INVOICE_AMT END) AS FEB, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN INVOICE_AMT END) AS MAR, ";
//            strSQL += "SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN INVOICE_AMT END) AS TOTAL ";
//            strSQL += "FROM (SELECT  BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, ";
//            strSQL += "CASE WHEN SUBSTRING(PRODUCT_CODE,1,1) IN (6)  THEN 5  ELSE INCHARGE_CD END AS INCHARGE_CD   FROM ( ";
//            strSQL += "SELECT BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR   FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A WHERE APPROVED=1 AND CANCELLED=0) AS A ";
//            strSQL += "LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON PARTY_CODE = PARTY) AS C ";
//            strSQL += "WHERE PARTY_CODE != '' ";
//            
//            if (!txtpartycode.getText().equals("")) {
//                strSQL += " AND PARTY_CODE = '" + SelUserID + "' ";
//            }
//            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
//            System.out.println(inchargeby);
//            if (inchargeby != 0) {
//                strSQL += "AND INCHARGE_CD = " + inchargeby + "";
//            } else {
//                strSQL += "";
//            }
//
////            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
////            if (inchargeby == 0) {
////                strSQL += "";
////            }
////            if (inchargeby == 1) {
////                strSQL += "AND INCHARGE_CD = 1";
////            }
////            if (inchargeby == 2) {
////                strSQL += "AND INCHARGE_CD = 2";
////            }
////            if (inchargeby == 3) {
////                strSQL += "AND INCHARGE_CD = 3";
////            }
////            if (inchargeby == 4) {
////                strSQL += "AND INCHARGE_CD = 4";
////            }
////            if (inchargeby == 5) {
////                strSQL += "AND INCHARGE_CD = 5";
////            }
////            if (inchargeby == 6) {
////                strSQL += "AND INCHARGE_CD = 6";
////            }
////            if (inchargeby == 7) {
////                strSQL += "AND INCHARGE_CD IS NULL";
////            }
//            if (!txtproductcode.getText().equals("")) {
//                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
//            }
//
////--GROUP BY FINYR,PRODUCT_CODE
//            strSQL += " GROUP BY FINYR ";
//            strSQL += " ORDER BY FINYR DESC ";
            String Cndtn = " ";
            if (!txtpartycode.getText().equals("")) {
                Cndtn += " AND PARTY_CODE = '" + SelUserID + "' ";
            }
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            System.out.println(inchargeby);
            if (inchargeby != 0) {
                Cndtn += "AND INCHARGE_CD = " + inchargeby + "";
            } else {
                Cndtn += "";
            }
            if (!txtproductcode.getText().equals("")) {
                Cndtn += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

            String CndtnGR = " ";
            if (!txtpartycode.getText().equals("")) {
                CndtnGR += " AND D.PARTY_CODE = '" + SelUserID + "' ";
            }
            
            String chkI = "";
            if (chkKeyClientInd.isSelected()){
                chkI = " AND KEY_CLIENT_IND=1 ";
            }
            int inchargebyGR = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            System.out.println(inchargebyGR);
            if (inchargebyGR != 0) {
                CndtnGR += "AND INCHARGE_CD = " + inchargeby + "";
            } else {
                CndtnGR += "";
            }
            if (!txtproductcode.getText().equals("")) {
                CndtnGR += " AND QUALITY_NO IN (" + strProductCode + ") ";
            }

            strSQL += "SELECT FINYR, ";
            strSQL += "APR,COALESCE(GAPR,0) AS GAPR,APR-COALESCE(GAPR,0) AS NAPR, ";
            strSQL += "MAY,COALESCE(GMAY,0) AS GMAY,MAY-COALESCE(GMAY,0) AS NMAY, ";
            strSQL += "JUN,COALESCE(GJUN,0) AS GJUN,JUN-COALESCE(GJUN,0) AS NJUN, ";
            strSQL += "JUL,COALESCE(GJUL,0) AS GJUL,JUL-COALESCE(GJUL,0) AS NJUL, ";
            strSQL += "AUG,COALESCE(GAUG,0) AS GAUG,AUG-COALESCE(GAUG,0) AS NAUG, ";
            strSQL += "SEP,COALESCE(GSEP,0) AS GSEP,SEP-COALESCE(GSEP,0) AS NSEP, ";
            strSQL += "OCT,COALESCE(GOCT,0) AS GOCT,OCT-COALESCE(GOCT,0) AS NOCT, ";
            strSQL += "NOV,COALESCE(GNOV,0) AS GNOV,NOV-COALESCE(GNOV,0) AS NNOV, ";
            strSQL += "DEC1,COALESCE(GDEC,0) AS GDEC,DEC1-COALESCE(GDEC,0) AS NDEC, ";
            strSQL += "JAN,COALESCE(GJAN,0) AS GJAN,JAN-COALESCE(GJAN,0) AS NJAN, ";
            strSQL += "FEB,COALESCE(GFEB,0) AS GFEB,FEB-COALESCE(GFEB,0) AS NFEB, ";
            strSQL += "MAR,COALESCE(GMAR,0) AS GMAR,MAR-COALESCE(GMAR,0) AS NMAR, ";
            strSQL += "TOTAL,COALESCE(GTOTAL,0) AS GTOTAL,TOTAL-COALESCE(GTOTAL,0) AS NTOTAL ";
            strSQL += "FROM ";
            strSQL += "(SELECT * FROM ";
            strSQL += "(SELECT FINYR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS APR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS MAY, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS JUN, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS JUL, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS AUG, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS SEP, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS OCT, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS NOV, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS DEC1, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS JAN, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS FEB, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN INVOICE_AMT/100000 ELSE 0 END),2) AS MAR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN INVOICE_AMT/100000 ELSE 0 END),2) AS TOTAL ";
            strSQL += "FROM (SELECT  BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, ";
//            strSQL += "CASE WHEN SUBSTRING(PRODUCT_CODE,1,1) IN (6)  THEN 5  ELSE INCHARGE_CD END AS INCHARGE_CD   FROM ( ";
            strSQL += "INCHARGE_CD   FROM ( ";
            strSQL += "SELECT BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR   FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A WHERE APPROVED=1 AND CANCELLED=0) AS A ";
            strSQL += "LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON PARTY_CODE = PARTY) AS C ";
            strSQL += "WHERE PARTY_CODE != '' " + Cndtn + " " + chkI + " ";
            strSQL += "GROUP BY FINYR ) AS A ";
            strSQL += "LEFT JOIN ";
            strSQL += "(SELECT FIN_YR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =4  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GAPR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =5  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GMAY, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =6  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GJUN, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =7  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GJUL, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =8  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GAUG, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =9  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GSEP, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =10  THEN NET_AMOUNT/100000  ELSE 0 END),2) AS GOCT, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =11  THEN NET_AMOUNT/100000  ELSE 0 END),2) AS GNOV, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =12  THEN NET_AMOUNT/100000  ELSE 0 END),2) AS GDEC, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =1  THEN NET_AMOUNT/100000 ELSE 0 END),2) AS GJAN, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =2  THEN NET_AMOUNT/100000  ELSE 0 END),2) AS GFEB, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) =3  THEN NET_AMOUNT/100000  ELSE 0 END),2) AS GMAR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM H.DOC_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN NET_AMOUNT/100000  ELSE 0 END),2) AS GTOTAL ";
            strSQL += "FROM PRODUCTION.FELT_SALES_RETURNS_HEADER H,PRODUCTION.FELT_SALES_RETURNS_DETAIL D, DINESHMILLS.D_SAL_FIN_YEAR, DINESHMILLS.D_SAL_PARTY_MASTER PM ";
            strSQL += "WHERE H.DOC_NO= D.DOC_NO AND  H.APPROVED=1 AND H.CANCELED=0 AND H.DOC_DATE >= DATE_FROM AND H.DOC_DATE <=DATE_TO ";
            strSQL += "AND D.PARTY_CODE=PM.PARTY_CODE " + CndtnGR + " " + chkI + " ";
            strSQL += "GROUP BY FIN_YR) AS B ";
            strSQL += "ON FIN_YR = FINYR) AS L ";
            strSQL += "ORDER BY FINYR DESC ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtsalestotal1.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[50];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("APR");
                    rowData[3] = rsTmp.getString("GAPR");
                    rowData[4] = rsTmp.getString("NAPR");
                    rowData[5] = rsTmp.getString("MAY");
                    rowData[6] = rsTmp.getString("GMAY");
                    rowData[7] = rsTmp.getString("NMAY");
                    rowData[8] = rsTmp.getString("JUN");
                    rowData[9] = rsTmp.getString("GJUN");
                    rowData[10] = rsTmp.getString("NJUN");
                    rowData[11] = rsTmp.getString("JUL");
                    rowData[12] = rsTmp.getString("GJUL");
                    rowData[13] = rsTmp.getString("NJUL");
                    rowData[14] = rsTmp.getString("AUG");
                    rowData[15] = rsTmp.getString("GAUG");
                    rowData[16] = rsTmp.getString("NAUG");
                    rowData[17] = rsTmp.getString("SEP");
                    rowData[18] = rsTmp.getString("GSEP");
                    rowData[19] = rsTmp.getString("NSEP");
                    rowData[20] = rsTmp.getString("OCT");
                    rowData[21] = rsTmp.getString("GOCT");
                    rowData[22] = rsTmp.getString("NOCT");
                    rowData[23] = rsTmp.getString("NOV");
                    rowData[24] = rsTmp.getString("GNOV");
                    rowData[25] = rsTmp.getString("NNOV");
                    rowData[26] = rsTmp.getString("DEC1");
                    rowData[27] = rsTmp.getString("GDEC");
                    rowData[28] = rsTmp.getString("NDEC");
                    rowData[29] = rsTmp.getString("JAN");
                    rowData[30] = rsTmp.getString("GJAN");
                    rowData[31] = rsTmp.getString("NJAN");
                    rowData[32] = rsTmp.getString("FEB");
                    rowData[33] = rsTmp.getString("GFEB");
                    rowData[34] = rsTmp.getString("NFEB");
                    rowData[35] = rsTmp.getString("MAR");
                    rowData[36] = rsTmp.getString("GMAR");
                    rowData[37] = rsTmp.getString("NMAR");
                    rowData[38] = rsTmp.getString("TOTAL");
                    rowData[39] = rsTmp.getString("GTOTAL");
                    rowData[40] = rsTmp.getString("NTOTAL");
                    DataModelSalesM.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void cmdsalesyrExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsalesyrExporttoExcelActionPerformed
        try {
            exp.fillData(TableSalesY, new File("D://Salesyearly.xls"));
//            exp.fillData(TableSalesY, new File("/root/Desktop/Salesyearly.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Salesyearly.xls' successfully in Linux PC or 'D://Salesyearly.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableSalesY, new File(System.getProperty("user.home") + "/Desktop/Salesyearly.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Salesyearly.xls' or 'D://Salesyearly.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdsalesyrExporttoExcelActionPerformed

    private void cmdsalesmonthExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsalesmonthExportToExcelActionPerformed
        try {
            exp.fillData(TableSalesM, new File("D://Salesmonthly.xls"));
//            exp.fillData(TableSalesM, new File("/root/Desktop/Salesmonthly.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Salesmonthly.xls' successfully in Linux PC or 'D://Salesmonthly.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableSalesM, new File(System.getProperty("user.home") + "/Desktop/Salesmonthly.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Salesmonthly.xls' or 'D://Salesmonthly.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdsalesmonthExportToExcelActionPerformed

    private void cmdShowMISAgeingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowMISAgeingActionPerformed
        GenerateMISAgeingDetail();
        GenerateMISAgeingDetail1();
    }//GEN-LAST:event_cmdShowMISAgeingActionPerformed

    private void cmdMISAgeingExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMISAgeingExportToExcelActionPerformed
        try {
            exp.fillData(TableMISAgeing, new File("D://MisAgeing.xls"));
//            exp.fillData(TableMISAgeing, new File("/root/Desktop/MisAgeing.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/MisAgeing.xls' successfully in Linux PC or 'D://MisAgeing.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableMISAgeing, new File(System.getProperty("user.home") + "/Desktop/MisAgeing.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/MisAgeing.xls' or 'D://MisAgeing.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdMISAgeingExportToExcelActionPerformed

    private void cmdmisagingaExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdmisagingaExportToExcelActionPerformed
        try {
            exp.fillData(TableMISAgeing1, new File("D://MisAgeingA.xls"));
//            exp.fillData(TableMISAgeing1, new File("/root/Desktop/MisAgeingA.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/MisAgeingA.xls' successfully in Linux PC or 'D://MisAgeingA.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableMISAgeing1, new File(System.getProperty("user.home") + "/Desktop/MisAgeingA.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/MisAgeingA.xls' or 'D://MisAgeingA.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdmisagingaExportToExcelActionPerformed

    private void txtproductcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtproductcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtproductcodeActionPerformed

    private void cmdShowMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowMachineActionPerformed
        txtMachineTotal.setText("0");
        GenerateMachine();
    }//GEN-LAST:event_cmdShowMachineActionPerformed

    private void CmdmachineExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdmachineExportExcelActionPerformed
        try {
            exp.fillData(TableMachine, new File("D://machinedetail.xls"));
//            exp.fillData(TableMachine, new File("/root/Desktop/machinedetail.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/machinedetail.xls' successfully in Linux PC or 'D://machinedetail.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableMachine, new File(System.getProperty("user.home") + "/Desktop/machinedetail.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/machinedetail.xls' or 'D://machinedetail.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_CmdmachineExportExcelActionPerformed

    private void cmdShowDiscontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowDiscontActionPerformed
        txtDiscountTotal.setText("0");
        GenerateDiscount();                // TODO add your handling code here:
    }//GEN-LAST:event_cmdShowDiscontActionPerformed

    private void CmdDiscountExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdDiscountExportExcelActionPerformed
        try {
            exp.fillData(TableDiscount, new File("D://Discountdetail.xls"));
//            exp.fillData(TableDiscount, new File("/root/Desktop/Discountdetail.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Discountdetail.xls' successfully in Linux PC or 'D://Discountdetail.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableDiscount, new File(System.getProperty("user.home") + "/Desktop/Discountdetail.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Discountdetail.xls' or 'D://Discountdetail.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_CmdDiscountExportExcelActionPerformed

    private void cmdShowSalesPartyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowSalesPartyActionPerformed
        txtSalesPartyTotal.setText("0");
        GenerateSalesParty();         // TODO add your handling code here:
    }//GEN-LAST:event_cmdShowSalesPartyActionPerformed

    private void CmdSalesPartyExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdSalesPartyExportExcelActionPerformed
        try {
            exp.fillData(TableSalesParty, new File("D://SalesPartyMasterdetail.xls"));
//            exp.fillData(TableSalesParty, new File("/root/Desktop/SalesPartyMasterdetail.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/SalesPartyMasterdetail.xls' successfully in Linux PC or 'D://SalesPartyMasterdetail.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableSalesParty, new File(System.getProperty("user.home") + "/Desktop/SalesPartyMasterdetail.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/SalesPartyMasterdetail.xls' or 'D://SalesPartyMasterdetail.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }      // TODO add your handling code here:
    }//GEN-LAST:event_CmdSalesPartyExportExcelActionPerformed

    private void Table_EXP_INVOICEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_EXP_INVOICEKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_EXP_INVOICEKeyPressed

    private void SHOW_BTN_EXP_INVOICEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_EXP_INVOICEActionPerformed
        //ORDER_BY = "";
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        if ("".equals(ORDER_BY)) {
//            ORDER_BY = "";
//        }
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER) + "", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), txtupnno.getText(), "EXP-INVOICE", ORDER_BY);
//        setData_EXP_INVOICE();        // TODO add your handling code here:

        FormatGridEXP_Invoice();
        GenerateEXP_Invoice();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_EXP_INVOICEActionPerformed

    private void Export_InvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_InvoiceActionPerformed
        try {
            exp.fillData(Table_EXP_INVOICE, new File("D://ExportInvoicedetail.xls"));
//            exp.fillData(Table_EXP_INVOICE, new File("/root/Desktop/ExportInvoicedetail.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/ExportInvoicedetail.xls' successfully in Linux PC or 'D://ExportInvoicedetail.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_EXP_INVOICE, new File(System.getProperty("user.home") + "/Desktop/ExportInvoicedetail.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/ExportInvoicedetail.xls' or 'D://ExportInvoicedetail.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }         // TODO add your handling code here:
    }//GEN-LAST:event_Export_InvoiceActionPerformed

    private void BTN_SORT_DATA_EXP_INVOICEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_EXP_INVOICEActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_EXP_INVOICEActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_EXP_INVOICEActionPerformed

    private void TablePieceStageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePieceStageKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePieceStageKeyPressed

    private void SHOW_BTN_PIECE_STAGEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_PIECE_STAGEActionPerformed
        if (!txtpieceno.getText().equals("")) {
            GeneratePieceStage();
            ORDER_BY = "";
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter The Piece No");
        }
    }//GEN-LAST:event_SHOW_BTN_PIECE_STAGEActionPerformed

    private void PieceStageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieceStageActionPerformed
        try {
            exp.fillData(TablePieceStage, new File("D://PieceStagedetails.xls"));
//            exp.fillData(TablePieceStage, new File("/root/Desktop/PieceStagedetails.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/PieceStagedetails.xls' successfully in Linux PC or 'D://PieceStagedetails.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TablePieceStage, new File(System.getProperty("user.home") + "/Desktop/PieceStagedetails.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PieceStagedetails.xls' or 'D://PieceStagedetails.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_PieceStageActionPerformed

    private void TableInvoiceParameterModiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableInvoiceParameterModiKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableInvoiceParameterModiKeyPressed

    private void cmbInvoiceParameterModiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInvoiceParameterModiActionPerformed
        // if(!txtpieceno.getText().equals(""))
        //{ 
        GenerateInvoiceParameterModification();
        // }
//    else{
//            JOptionPane.showMessageDialog(null,"Please Enter The Piece No");
//    }            // TODO add your handling code here:
    }//GEN-LAST:event_cmbInvoiceParameterModiActionPerformed

    private void PieceStage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieceStage1ActionPerformed
        try {
            exp.fillData(TableInvoiceParameterModi, new File("D://InvoiceParameterModificationdetails.xls"));
//            exp.fillData(TableInvoiceParameterModi, new File("/root/Desktop/InvoiceParameterModificationdetails.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/InvoiceParameterModificationdetails.xls' successfully in Linux PC or 'D://InvoiceParameterModificationdetails.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableInvoiceParameterModi, new File(System.getProperty("user.home") + "/Desktop/InvoiceParameterModificationdetails.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/InvoiceParameterModificationdetails.xls' or 'D://InvoiceParameterModificationdetails.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }         // TODO add your handling code here:
    }//GEN-LAST:event_PieceStage1ActionPerformed

    private void cmbInvStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInvStatusItemStateChanged
        // TODO add your handling code here:
        if (InvFlag) {
            GenerateInvoiced();
        }
    }//GEN-LAST:event_cmbInvStatusItemStateChanged

    private void cmbInvOrderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInvOrderByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbInvOrderByActionPerformed

    private void cmbBSRStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBSRStatusItemStateChanged
        // TODO add your handling code here:
        if (BSRFlag) {
            GenerateBSR();
        }
    }//GEN-LAST:event_cmbBSRStatusItemStateChanged

    private void Table_PendingListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_PendingListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_PendingListKeyPressed

    private void SHOW_BTN_PendingListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_PendingListActionPerformed
        // TODO add your handling code here:
        GeneratePendingDoc();
//        GeneratePendingList();
        PLFlag = true;
    }//GEN-LAST:event_SHOW_BTN_PendingListActionPerformed

    private void PieceStage2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieceStage2ActionPerformed
//       try {
//            File file;
//            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
//            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
//            int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmPieceMaster.this);
//            if (returnVal == JFileChooser.APPROVE_OPTION) {
//                file = ExporttoExcelFileChooser.getSelectedFile();
//                export.fillData(Table_PendingList, new File(file + ".xls"));
//                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
        try {
//            exp.fillData(Table_PendingList, new File("/root/Desktop/SALES_PENDING_LIST_REPORT.xls"));
            exp.fillData(Table_PendingList, new File("D://SALES_PENDING_LIST_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/SALES_PENDING_LIST_REPORT.xls' successfully in Linux PC or 'D://SALES_PENDING_LIST_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_PendingList, new File(System.getProperty("user.home") + "/Desktop/SALES_PENDING_LIST_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/SALES_PENDING_LIST_REPORT.xls' or 'D://SALES_PENDING_LIST_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_PieceStage2ActionPerformed

    private void TablePieceMFGRejectionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePieceMFGRejectionKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePieceMFGRejectionKeyPressed

    private void cmbCobolErp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCobolErp1ActionPerformed
        // TODO add your handling code here:
//        GeneratePieceMFGRejectin();
        FormatGridPieceMFGRejection();
        GeneratePieceMFGRejection();
    }//GEN-LAST:event_cmbCobolErp1ActionPerformed

    private void PieceMFGRejectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieceMFGRejectionActionPerformed
        try {
//            exp.fillData(TablePieceMFGRejection, new File("/root/Desktop/PIECE_MFG_REJECTIN_REPORT.xls"));
            exp.fillData(TablePieceMFGRejection, new File("D://PIECE_MFG_REJECTIN_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/PIECE_MFG_REJECTIN_REPORT.xls' successfully in Linux PC or 'D://PIECE_MFG_REJECTIN_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TablePieceMFGRejection, new File(System.getProperty("user.home") + "/Desktop/PIECE_MFG_REJECTIN_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PIECE_MFG_REJECTIN_REPORT.xls' or 'D://PIECE_MFG_REJECTIN_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }// TODO add your handling code here:
    }//GEN-LAST:event_PieceMFGRejectionActionPerformed

    private void Table_DelinkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_DelinkKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_DelinkKeyPressed

    private void SHOW_BTN_DelinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_DelinkActionPerformed
        // TODO add your handling code here:
//        GeneratePieceDelink();
        FormatGridObsolete();
        GenerateObsolete();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_DelinkActionPerformed

    private void Export_Div_List1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_Div_List1ActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(Table_Delink, new File("/root/Desktop/OBSOLETE_REPORT.xls"));
            exp.fillData(Table_Delink, new File("D://OBSOLETE_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/OBSOLETE_REPORT.xls' successfully in Linux PC or 'D://OBSOLETE_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_Delink, new File(System.getProperty("user.home") + "/Desktop/OBSOLETE_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/OBSOLETE_REPORT.xls' or 'D://OBSOLETE_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_Div_List1ActionPerformed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseEntered

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked
        // TODO add your handling code here:        
//        enableText();
    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void jTabbedPane2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTabbedPane2KeyPressed
        // TODO add your handling code here:
//        enableText();
    }//GEN-LAST:event_jTabbedPane2KeyPressed

    private void Table_Order_RegisterKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_Order_RegisterKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_Order_RegisterKeyPressed

    private void SHOW_BTN1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN1ActionPerformed
        // TODO add your handling code here:
        String cndtn = " ";
        String cndtn1 = " ";
        try {
            FormatGridOrderRegister(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String Machineno = txtMachineNo.getText().toString();
            String Position = txtPosition.getText().toString();
            String Orderdtfrom = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim());
            String Orderdtto = EITLERPGLOBAL.formatDateDB(txtdateto.getText().trim());
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();
            String Pieceno = txtpieceno.getText().toString();

            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND A.PARTY_CODE= '" + PartyCode + "'";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (B.PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR B.PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (B.PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR B.PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND B.MACHINE_NO='" + Machineno + "' ";
            }
            if (!txtPosition.getText().equals("")) {
                cndtn += " AND B.POSITION IN  (" + Position + ") ";
            }
            if (!txtdatefrom.getText().equals("")) {
                cndtn += " AND A.S_ORDER_DATE>='" + Orderdtfrom + "' ";
            }
            if (!txtdateto.getText().equals("")) {
                cndtn += " AND A.S_ORDER_DATE<='" + Orderdtto + "' ";
            }
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND B.LENGTH >= '" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND B.LENGTH <= '" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND B.WIDTH >= '" + Widthfrom + "' ";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND B.WIDTH <= '" + Widthto + "' ";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND B.GSM >= '" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += " AND B.GSM <= '" + GSMto + "' ";
            }

            if (!withBlankPiece.isSelected()) {
                cndtn += " AND B.PIECE_NO != '' ";
            }

            if (!txtupnno.getText().equals("")) {
                cndtn += " AND B.UPN = '" + txtupnno.getText().trim() + "' ";
            }
            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn1 += " AND PM_INCHARGE_CD = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn1 = " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                cndtn1 += " AND KEY_CLIENT_IND=1 ";
            }

//            String strSQL = "SELECT A.S_ORDER_NO,A.S_ORDER_DATE,A.REGION,A.SALES_ENGINEER,A.PARTY_CODE,A.PARTY_NAME,A.APPROVED,B.MACHINE_NO,B.POSITION,B.POSITION_DESC,B.PIECE_NO,B.PRODUCT_CODE,B.S_GROUP,B.LENGTH,B.WIDTH,B.GSM,B.THORITICAL_WIDTH,B.SQ_MTR,B.STYLE,B.SYN_PER,B.REQ_MONTH,B.UPN FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.CANCELED=0  " + cndtn;
            String strSQL = "";
            strSQL = "SELECT * FROM  "
                    + "(SELECT B.PIECE_NO,A.S_ORDER_NO,A.S_ORDER_DATE,A.PARTY_CODE,B.MACHINE_NO, "
                    + "B.POSITION,B.UPN,B.PRODUCT_CODE,B.S_GROUP,B.LENGTH,B.WIDTH,B.GSM,B.SQ_MTR,COALESCE(B.DM_REVISION_NO,'') AS DM_REVISION_NO, "
                    + "B.THORITICAL_WIDTH,B.STYLE,B.SYN_PER,B.REQ_MONTH,A.APPROVED  "
                    + "FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B  "
                    + "WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.CANCELED=0  "
                    + cndtn + " ) AS ORD "
                    + "LEFT JOIN   "
                    + "(SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME,INCHARGE_CD AS PM_INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER   "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM   "
                    + "ON ORD.PARTY_CODE=PM.PM_PARTY_CODE   "
                    + "LEFT JOIN   "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE   "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D   "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE   "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM   "
                    + "ON ORD.PARTY_CODE=GM.GROUP_PARTY_CODE  "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM   "
                    + "ON IM.INCHARGE_CD = PM.PM_INCHARGE_CD "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP   "
                    + "ON ORD.POSITION=MP.POSITION_NO "
                    + " WHERE 1=1 " + cndtn1 + " ";

            if (!"".equals(ORDER_BY_ORDER_REGISTER)) {
                strSQL = strSQL + ORDER_BY_ORDER_REGISTER;
            }

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    //txtSalesPartyTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("S_ORDER_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("S_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("UPN");
                    p++;
                    rowData[p] = rsTmp.getString("DM_REVISION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("S_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("GSM");
                    p++;
                    rowData[p] = rsTmp.getString("SQ_MTR");
                    p++;
                    rowData[p] = rsTmp.getString("THORITICAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("REQ_MONTH");
                    p++;
//                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
//                    p++;
//                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
//                    p++;
                    if (rsTmp.getBoolean("APPROVED")) {
                        rowData[p] = "APPROVED";
                        p++;
                    } else {
                        rowData[p] = "";
                        p++;
                    }
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PIECE_NO");
//                    rowData[2] = rsTmp.getString("S_ORDER_NO");
//                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("S_ORDER_DATE"));
//                    rowData[4] = rsTmp.getString("GROUP_DESC");
//                    rowData[5] = rsTmp.getString("PARTY_CODE");
//                    rowData[6] = rsTmp.getString("PARTY_NAME");
//                    rowData[7] = rsTmp.getString("MACHINE_NO");
//                    rowData[8] = rsTmp.getString("POSITION");
//                    rowData[9] = rsTmp.getString("POSITION_DESC");
//                    rowData[10] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[11] = rsTmp.getString("UPN");
//                    rowData[12] = rsTmp.getString("PRODUCT_CODE");
//                    rowData[13] = rsTmp.getString("S_GROUP");
//                    rowData[14] = rsTmp.getString("LENGTH");
//                    rowData[15] = rsTmp.getString("WIDTH");
//                    rowData[16] = rsTmp.getString("GSM");
//                    rowData[17] = rsTmp.getString("SQ_MTR");
//                    rowData[18] = rsTmp.getString("THORITICAL_WIDTH");
//                    rowData[19] = rsTmp.getString("STYLE");
//                    rowData[20] = rsTmp.getString("SYN_PER");
//                    rowData[21] = rsTmp.getString("REQ_MONTH");
//                    if (rsTmp.getBoolean("APPROVED")) {
//                        rowData[22] = "APPROVED";
//                    } else {
//                        rowData[22] = "";
//                    }
//                    rowData[23] = rsTmp.getString("INCHARGE_NAME");
                    DataModelOrderRegister.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_SHOW_BTN1ActionPerformed

    private void Export_Order1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_Order1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        try {

            exp.fillData(Table_Order_Register, new File("/root/Desktop/ORDERED_REGISTER.xls"));

            exp.fillData(Table_Order_Register, new File("D://ORDERED_REGISTER.xls"));

            File file = new File("/root/Desktop/ORDERED_REGISTER.xls");
            File file1 = new File("D://ORDERED_REGISTER.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_Order1ActionPerformed

    private void BTN_SORT_DATA_PR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_PR2ActionPerformed
        // TODO add your handling code here:
        sort_query_creator_order_register();
        if (!"".equals(ORDER_BY_ORDER_REGISTER)) {
            SHOW_BTN1ActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_PR2ActionPerformed

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTypeActionPerformed

    private void TableGRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableGRKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableGRKeyPressed

    private void btnGRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGRActionPerformed
        // TODO add your handling code here:
        txtGRTotalAmt.setText("");
        GenerateGR();
    }//GEN-LAST:event_btnGRActionPerformed

    private void Export_GRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_GRActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(TableGR, new File("/root/Desktop/GR_REPORT.xls"));
            exp.fillData(TableGR, new File("D://GR_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/GR_REPORT.xls' successfully in Linux PC or 'D://GR_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableGR, new File(System.getProperty("user.home") + "/Desktop/GR_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/GR_REPORT.xls' or 'D://GR_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_GRActionPerformed

    private void cmbGRStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGRStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbGRStatusItemStateChanged

    private void Table_OSGSTOCKKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_OSGSTOCKKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_OSGSTOCKKeyPressed

    private void SHOW_BTN_OSGSTOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_OSGSTOCKActionPerformed
        // TODO add your handling code here:
//        clsPieceMaster pieceMaster = new clsPieceMaster();
//        if ("".equals(ORDER_BY)) {
//            ORDER_BY = " ORDER BY PR_RCV_DATE DESC";
//        }
//        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), EITLERPGLOBAL.getComboCode(S_ENGINEER) + "", txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), txtupnno.getText(), "OSG STOCK", ORDER_BY);
//        setData_OSGSTOCK();

        FormatGridOSG_Stock();
        GenerateOSG_Stock();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_OSGSTOCKActionPerformed

    private void Export_OSGStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_OSGStockActionPerformed
        // TODO add your handling code here:
        try {

//            exp.fillData(Table_OSGSTOCK, new File("/root/Desktop/OSG_STOCK_REPORT.xls"));
            exp.fillData(Table_OSGSTOCK, new File("D://OSG_STOCK_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/OSG_STOCK_REPORT.xls' successfully in Linux PC or 'D://OSG_STOCK_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_OSGSTOCK, new File(System.getProperty("user.home") + "/Desktop/OSG_STOCK_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/OSG_STOCK_REPORT.xls' or 'D://OSG_STOCK_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_OSGStockActionPerformed

    private void BTN_SORT_DATA_OSGSTOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_OSGSTOCKActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_OSGSTOCKActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_OSGSTOCKActionPerformed

    private void TablePRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePRKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePRKeyPressed

    private void btnPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPRActionPerformed
        // TODO add your handling code here:
        if (!txtdatefrom.getText().equals("") && !txtdateto.getText().equals("")) {
            GeneratePR();
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter From/To Date.");
            return;
        }
    }//GEN-LAST:event_btnPRActionPerformed

    private void Export_PRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_PRActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(TablePR, new File("/root/Desktop/PaymentRecipt_REPORT.xls"));
            exp.fillData(TablePR, new File("D://PaymentRecipt_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/PaymentRecipt_REPORT.xls' successfully in Linux PC or 'D://PaymentRecipt_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TablePR, new File(System.getProperty("user.home") + "/Desktop/PaymentRecipt_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PaymentRecipt_REPORT.xls' or 'D://PaymentRecipt_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_PRActionPerformed

    private void TableFnsdvsInvKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableFnsdvsInvKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableFnsdvsInvKeyPressed

    private void btnFnsdvsInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFnsdvsInvActionPerformed
        // TODO add your handling code here:
        if (!txtdatefrom.getText().equals("") && !txtdateto.getText().equals("")) {
            GenerateFnsdvsInv();
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter From/To Date.");
            return;
        }
    }//GEN-LAST:event_btnFnsdvsInvActionPerformed

    private void Export_FnsdvsInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_FnsdvsInvActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(TableFnsdvsInv, new File("/root/Desktop/FnsdVsInv_REPORT.xls"));
            exp.fillData(TableFnsdvsInv, new File("D://FnsdVsInv_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/FnsdVsInv_REPORT.xls' successfully in Linux PC or 'D://FnsdVsInv_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableFnsdvsInv, new File(System.getProperty("user.home") + "/Desktop/FnsdVsInv_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/FnsdVsInv_REPORT.xls' or 'D://FnsdVsInv_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_FnsdvsInvActionPerformed

    private void txtgroupcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtgroupcodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgroupcodeFocusLost

    private void txtgroupcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgroupcodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT GROUP_CODE,GROUP_DESC FROM PRODUCTION.FELT_GROUP_MASTER_HEADER WHERE APPROVED=1 AND CANCELED=0 ORDER BY GROUP_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtgroupcode.setText(aList.ReturnVal);
                txtgroupname.setText(clsFeltGroupMasterAmend.getgroupdesc(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtgroupcodeKeyPressed

    private void txtgroupnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgroupnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgroupnameActionPerformed

    private void txtPositionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPositionKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            if (!txtpartycode.getText().trim().equals("") && !txtMachineNo.getText().trim().equals("")) {
                aList.SQL = "SELECT MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE= '" + txtpartycode.getText().trim() + "' AND MM_MACHINE_NO=" + txtMachineNo.getText().trim() + " ORDER BY MM_MACHINE_POSITION ";
            } else if (!txtpartycode.getText().trim().equals("") && txtMachineNo.getText().trim().equals("")) {
                aList.SQL = "SELECT DISTINCT MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE= '" + txtpartycode.getText().trim() + "' ORDER BY MM_MACHINE_POSITION ";
            } else if (txtpartycode.getText().trim().equals("") && !txtMachineNo.getText().trim().equals("")) {
                aList.SQL = "SELECT DISTINCT MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_MACHINE_NO= " + txtMachineNo.getText().trim() + " ORDER BY MM_MACHINE_POSITION ";
            } else {
                aList.SQL = "SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO!=0";
            }

//            aList.SQL = "SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO!=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtPosition.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtPositionKeyPressed

    private void txtupnnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtupnnoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtupnnoFocusLost

    private void txtupnnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtupnnoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            String strSQL = "SELECT DISTINCT MM_UPN_NO,PARTY_NAME,MM_MACHINE_NO,MM_MACHINE_POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL,DINESHMILLS.D_SAL_PARTY_MASTER WHERE MM_PARTY_CODE=PARTY_CODE ";
//AND MM_PARTY_CODE= '832072' AND MM_MACHINE_NO=1 AND MM_MACHINE_POSITION=1 ORDER BY MM_MACHINE_POSITION  ";

            if (!txtpartycode.getText().trim().equals("")) {
                strSQL = strSQL + " AND MM_PARTY_CODE= '" + txtpartycode.getText() + "' ";
            }
            if (!txtMachineNo.getText().trim().equals("")) {
                strSQL = strSQL + " AND MM_MACHINE_NO= " + txtMachineNo.getText() + " ";
            }
            if (!txtPosition.getText().trim().equals("")) {
                strSQL = strSQL + " AND MM_MACHINE_POSITION= " + txtPosition.getText() + " ";
            }

            strSQL = strSQL + " ORDER BY MM_PARTY_CODE,MM_MACHINE_NO,MM_MACHINE_POSITION ";

//            aList.SQL = "SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO!=0";
            aList.SQL = strSQL;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtupnno.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtupnnoKeyPressed

    private void TableProductionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableProductionKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableProductionKeyPressed

    private void btnProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductionActionPerformed
        // TODO add your handling code here:
        FormatGridProduction();
        GenerateProduction();
        ORDER_BY = "";
    }//GEN-LAST:event_btnProductionActionPerformed

    private void Export_Production1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_Production1ActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(TableProduction, new File("/root/Desktop/WIP_Production_REPORT.xls"));
            exp.fillData(TableProduction, new File("D://WIP_Production_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/WIP_Production_REPORT.xls' successfully in Linux PC or 'D://WIP_Production_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableProduction, new File(System.getProperty("user.home") + "/Desktop/WIP_Production_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/WIP_Production_REPORT.xls' or 'D://WIP_Production_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_Production1ActionPerformed

    private void cmbProductionStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductionStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProductionStatusItemStateChanged

    private void cmbProductionStageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductionStageItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProductionStageItemStateChanged

    private void rbtnPieceStageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnPieceStageMouseClicked
        // TODO add your handling code here:
        cmbProductionStage.setVisible(true);
        cmbProductionStage.setSelectedIndex(0);
        cmbProductionStatus.setVisible(false);
        cmbProductionStatus.setSelectedIndex(0);
    }//GEN-LAST:event_rbtnPieceStageMouseClicked

    private void rbtnWIPStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnWIPStatusMouseClicked
        // TODO add your handling code here:
        cmbProductionStage.setVisible(false);
        cmbProductionStage.setSelectedIndex(0);
        cmbProductionStatus.setVisible(true);
        cmbProductionStatus.setSelectedIndex(0);
    }//GEN-LAST:event_rbtnWIPStatusMouseClicked

    private void SHOW_BTN_STOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_STOCKActionPerformed
        // TODO add your handling code here:
        FormatGridStock();
        GenerateStock();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_STOCKActionPerformed

    private void Export_Production2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_Production2ActionPerformed
        // TODO add your handling code here:
        try {

            exp.fillData(WIP_Piece_Review, new File("/root/Desktop/WIP_Piece_Review.xls"));
            exp.fillData(WIP_Piece_Review, new File("D://WIP_Piece_Review.xls"));
            //            JOptionPane.showMessageDialog(null, "Data saved at " +
            //            "'/root/Desktop/WIP_REPORT.xls' successfully in Linux PC or 'D://WIP_REPORT.xls' successfully in Windows PC    ", "Message",
            //            JOptionPane.INFORMATION_MESSAGE);

            File file = new File("/root/Desktop/WIP_Piece_Review.xls");
            File file1 = new File("D://WIP_Piece_Review.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_Production2ActionPerformed


    private void btnShowWIPPieceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowWIPPieceActionPerformed
        // TODO add your handling code here:
        try {
            FormatGridWIPPieceReview();

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            String From_date = txtdatefrom.getText();
            String To_date = txtdateto.getText();
            String SQL_DATE = "";
            String cndtn = "";
            String grp_cndtn = "";
            if (!From_date.equals("") && !To_date.equals("")) {
                //  criteria.add(Restrictions.between("prOrderDate", df.parse(From_date), df.parse(To_date)));
                try {

                    SQL_DATE = SQL_DATE + " AND (PIECE_AMEND_DATE BETWEEN '" + df1.format(df.parse(From_date)) + "' AND '" + df1.format(df.parse(To_date)) + "') ";
                    //SQL = SQL + " AND (PR_ORDER_DATE BETWEEN '" + df1.format(df.parse(From_date)) + "' AND '" + df1.format(df.parse(To_date)) + "') ";

                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                //  criteria.add(Restrictions.gt("prOrderDate", df.parse(From_date)));
                try {
                    SQL_DATE = SQL_DATE + " AND PIECE_AMEND_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                    //SQL = SQL + " AND PR_ORDER_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                // criteria.add(Restrictions.lt("prOrderDate", df.parse(To_date)));
                try {

                    SQL_DATE = SQL_DATE + " AND PIECE_AMEND_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                    //SQL = SQL + " AND PR_ORDER_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            String Review_Status = "";
            if (btnReviewStatus.getSelectedItem().equals("Approved")) {
                Review_Status = Review_Status + " AND H.APPROVED=1";
            } else if (btnReviewStatus.getSelectedItem().equals("Pending")) {
                Review_Status = Review_Status + " AND H.APPROVED=0";
            }

            String Party_code = "";
            if (!txtpartycode.getText().equals("")) {
                Party_code = " AND H.MM_PARTY_CODE=" + txtpartycode.getText();
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (D.PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR D.PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().equals("")) {
                String[] Products = txtproductcode.getText().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR.PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR.PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR.PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR.PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR.PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR.PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                cndtn += " AND PM.KEY_CLIENT_IND=1 ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn = " WHERE GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

//            String str = "SELECT H.PIECE_AMEND_NO AS 'DOC_NO',H.PIECE_AMEND_DATE AS 'DOC_DATE',D.PIECE_NO AS 'PIECE_NO',PR.PR_PRODUCT_CODE AS 'QUALITY_CODE',H.MM_PARTY_CODE AS 'PARTY_CODE',PM.PARTY_NAME AS 'PARTY_NAME',D.CHANGE_POSIBILITY AS 'CHANGE_POSIBILITY',D.DELINK AS 'DELINK',D.ACTUAL_CHANGE AS 'APPLY_CHANGE',D.REMARKS AS 'REMARKS',D.PROD_REMARKS AS 'PROD_REMARKS',PR.PR_PIECE_STAGE AS 'PIECE_STAGE',CURRENT_DATE() AS 'CURRENT_DATE',DATEDIFF(CURRENT_DATE(), H.PIECE_AMEND_DATE) AS 'DAYS_1',"
//                    + "PR.PR_FNSG_DATE AS 'WH_RECIEVED_DATE',DATEDIFF(CURRENT_DATE(), PR.PR_FNSG_DATE) AS 'DAYS_2',"
//                    + "PR.PR_INVOICE_DATE AS 'INVOICE_DATE',DATEDIFF(CURRENT_DATE(), PR.PR_INVOICE_DATE) AS 'DAYS_3',IF(H.APPROVED=1,'APPROVED','PENDING') AS 'REVIEW_STATUS' "
//                    + "FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP H,"
//                    + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP D,"
//                    + "PRODUCTION.FELT_SALES_PIECE_REGISTER PR,"
//                    + "DINESHMILLS.D_SAL_PARTY_MASTER PM "
//                    + "WHERE H.PIECE_AMEND_NO=D.PIECE_AMEND_NO "
//                    + "AND D.PIECE_NO=PR.PR_PIECE_NO "
//                    + "AND H.MM_PARTY_CODE=PM.PARTY_CODE " + SQL_DATE + Review_Status + Party_code;
            String str = "SELECT * FROM ( "
                    + "SELECT H.PIECE_AMEND_NO AS 'DOC_NO',H.PIECE_AMEND_DATE AS 'DOC_DATE',D.PIECE_NO AS 'PIECE_NO',PR.PR_PRODUCT_CODE AS 'QUALITY_CODE',H.MM_PARTY_CODE AS 'PARTY_CODE',PM.PARTY_NAME AS 'PARTY_NAME',D.CHANGE_POSIBILITY AS 'CHANGE_POSIBILITY',D.DELINK AS 'DELINK',D.ACTUAL_CHANGE AS 'APPLY_CHANGE',D.REMARKS AS 'REMARKS',D.PROD_REMARKS AS 'PROD_REMARKS',PR.PR_PIECE_STAGE AS 'PIECE_STAGE',CURRENT_DATE() AS 'CURRENT_DATE',DATEDIFF(CURRENT_DATE(), H.PIECE_AMEND_DATE) AS 'DAYS_1',"
                    + "PR.PR_UPN,PR.PR_INCHARGE,PR.PR_MACHINE_NO,PR.PR_POSITION_NO,PR.PR_GROUP, "
                    + "PR.PR_FNSG_DATE AS 'WH_RECIEVED_DATE',DATEDIFF(CURRENT_DATE(), PR.PR_FNSG_DATE) AS 'DAYS_2',"
                    + "PR.PR_INVOICE_DATE AS 'INVOICE_DATE',DATEDIFF(CURRENT_DATE(), PR.PR_INVOICE_DATE) AS 'DAYS_3',IF(H.APPROVED=1,'APPROVED','PENDING') AS 'REVIEW_STATUS' "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP H,"
                    + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP D,"
                    + "PRODUCTION.FELT_SALES_PIECE_REGISTER PR,"
                    + "DINESHMILLS.D_SAL_PARTY_MASTER PM "
                    + "WHERE H.PIECE_AMEND_NO=D.PIECE_AMEND_NO "
                    + "AND D.PIECE_NO=PR.PR_PIECE_NO "
                    + "AND H.MM_PARTY_CODE=PM.PARTY_CODE " + cndtn + " " + SQL_DATE + " " + Review_Status + " " + Party_code + " "
                    + " ) AS WIP "
                    + "LEFT JOIN   "
                    + "(SELECT P.PARTY_CODE AS PM_PARTY_CODE,P.INCHARGE_CD,INCHARGE_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_INCHARGE I  "
                    + "WHERE P.INCHARGE_CD = I.INCHARGE_CD AND P.MAIN_ACCOUNT_CODE='210010' AND P.APPROVED=1 AND P.CANCELLED=0) AS PIM   "
                    + "ON WIP.PARTY_CODE=PIM.PM_PARTY_CODE   "
                    + "LEFT JOIN   "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE   "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D   "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE   "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM   "
                    + "ON WIP.PARTY_CODE=GM.GROUP_PARTY_CODE  "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP   "
                    + "ON WIP.PR_POSITION_NO=MP.POSITION_NO "
                    + grp_cndtn + " ";

            ResultSet rsTmp;
            System.out.println("str = " + str);
            rsTmp = data.getResult(str);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    //txtcontactstotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[50];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[1] = rsTmp.getString("DOC_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE"));
                    rowData[3] = rsTmp.getString("PIECE_NO");
                    rowData[4] = rsTmp.getString("QUALITY_CODE");
                    rowData[5] = rsTmp.getString("PR_GROUP");
                    rowData[6] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[7] = rsTmp.getString("PR_POSITION_NO");
                    rowData[8] = rsTmp.getString("POSITION_DESC");
                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
                    rowData[10] = rsTmp.getString("PR_UPN");
                    rowData[11] = rsTmp.getString("GROUP_DESC");
                    rowData[12] = rsTmp.getString("PARTY_CODE");
                    rowData[13] = rsTmp.getString("PARTY_NAME");
                    rowData[14] = rsTmp.getString("CHANGE_POSIBILITY");
                    rowData[15] = rsTmp.getString("DELINK");
                    rowData[16] = rsTmp.getString("APPLY_CHANGE");
                    rowData[17] = rsTmp.getString("REMARKS");
                    rowData[18] = rsTmp.getString("PROD_REMARKS");
                    rowData[19] = rsTmp.getString("PIECE_STAGE");
                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("CURRENT_DATE"));
                    rowData[21] = rsTmp.getString("DAYS_1");
                    rowData[22] = EITLERPGLOBAL.formatDate(rsTmp.getString("WH_RECIEVED_DATE"));
                    rowData[23] = rsTmp.getString("DAYS_2");
                    rowData[24] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[25] = rsTmp.getString("DAYS_3");
                    rowData[26] = rsTmp.getString("REVIEW_STATUS");
                    rowData[27] = rsTmp.getString("INCHARGE_NAME");

                    DataModel_WIPReview.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnShowWIPPieceActionPerformed

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
//        if (!txtpartycode.getText().trim().equals("")) {
        if (!txtpartycode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText().trim() + "' AND MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0")) {
            txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));
//            int Ind = data.getIntValueFromDB("SELECT PARTY_CLOSE_IND FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText() + "' ");
////                    clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, txtpartycode.getText());
//
//            if (Ind == 1) {
//                txtpartyind.setText("Closed");
//            } else {
//                txtpartyind.setText("Active");
//            }
//            txtpartyind.setText(clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));
//        }
            String pStatus = data.getStringValueFromDB("SELECT CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText() + "' ");
            txtpartyind.setText(pStatus);
        } else {
            if (!txtpartycode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Party Code doesn't exist/under approval.");
            }
            txtpartycode.setText("");
            txtpartyname.setText("");
            txtpartyind.setText("");
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
//            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 ";
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,DISPATCH_STATION,CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                int Ind = data.getIntValueFromDB("SELECT PARTY_CLOSE_IND FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' ");
////                clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
//                if (Ind == 1) {
//                    txtpartyind.setText("Closed");
//                } else {
//                    txtpartyind.setText("Active");
//                }
//                txtpartyind.setText(clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                String pStatus = data.getStringValueFromDB("SELECT CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' ");
                txtpartyind.setText(pStatus);
            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void BTN_SORT_DATA_STOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_STOCKActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_STOCKActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_STOCKActionPerformed

    private void BTN_SORT_DATA_PIECE_STAGEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_PIECE_STAGEActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_PIECE_STAGEActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_PIECE_STAGEActionPerformed

    private void BTN_SORT_DATA_WIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_WIPActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            btnProductionActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_WIPActionPerformed

    private void txtpartyindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartyindActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartyindActionPerformed

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartynameActionPerformed

    private void BTN_SORT_DATA_OBSOLETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_OBSOLETEActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_DelinkActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_OBSOLETEActionPerformed

    private void jLabel98MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel98MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel98MouseEntered

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        // TODO add your handling code here:
//        if (jTabbedPane2.getSelectedIndex() == jPanel16.toString())
//        System.out.println("TABBED : " + jTabbedPane2.getSelectedIndex() + " aAaaa : " + jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()) + " bBbbb.");

        if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("WIP-Sales")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("WIP")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Order Pending")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Order Register")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Stock")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("OSG Stock")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("BSR")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Diversion List")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Diversion")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Diverted")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Cancelled")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Obsolete Pieces")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Hold")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Export Invoice")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("GIDC SDF")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(true);
            txtlengthto.setEnabled(true);
            txtwidthfrom.setEnabled(true);
            txtwidthto.setEnabled(true);
            txtgsmfrom.setEnabled(true);
            txtgsmto.setEnabled(true);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(true);
            txtdateto.setEnabled(true);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Piece Stage")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Order Confirmation")
                || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Current Despatch Schedule/Spillover Month")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(true);
            txtlengthto.setEnabled(true);
            txtwidthfrom.setEnabled(true);
            txtwidthto.setEnabled(true);
            txtgsmfrom.setEnabled(true);
            txtgsmto.setEnabled(true);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Goods Return")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(true);
            txtlengthto.setEnabled(true);
            txtwidthfrom.setEnabled(true);
            txtwidthto.setEnabled(true);
            txtgsmfrom.setEnabled(true);
            txtgsmto.setEnabled(true);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(true);
            txtdateto.setEnabled(true);
            txtMachineNo.setEnabled(false);
            txtPosition.setEnabled(false);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Invoiced")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(true);
            txtlengthto.setEnabled(true);
            txtwidthfrom.setEnabled(true);
            txtwidthto.setEnabled(true);
            txtgsmfrom.setEnabled(true);
            txtgsmto.setEnabled(true);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(true);
            txtdateto.setEnabled(true);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Invoice Parameter Modification")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(false);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(false);
            txtproductcode.setEnabled(false);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(false);
            txtPosition.setEnabled(false);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(false);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(false);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Payment Receipt")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(true);
            txtdateto.setEnabled(true);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Finished vs Invoiced")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(false);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(true);
            txtdateto.setEnabled(true);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Machine")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(true);
            txtlengthto.setEnabled(true);
            txtwidthfrom.setEnabled(true);
            txtwidthto.setEnabled(true);
            txtgsmfrom.setEnabled(true);
            txtgsmto.setEnabled(true);
            txtpieceno.setEnabled(false);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Discount")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Party Master O/S & Adv Amt")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(false);
            txtproductcode.setEnabled(false);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(false);
            txtPosition.setEnabled(false);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Contacts")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(false);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(false);
            txtproductcode.setEnabled(false);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(false);
            txtPosition.setEnabled(false);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Sales") || jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Sales Export")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
//            txtgroupcode.setEnabled(false);
            txtgroupcode.setEnabled(true);//on 12/07/2019
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(false);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(false);
            txtPosition.setEnabled(false);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("WIP Piece Review Report")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(true);
            txtdateto.setEnabled(true);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(true);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(true);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Piece MFG Rejection")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(false);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(true);
            txtlengthto.setEnabled(true);
            txtwidthfrom.setEnabled(true);
            txtwidthto.setEnabled(true);
            txtgsmfrom.setEnabled(true);
            txtgsmto.setEnabled(true);
            txtpieceno.setEnabled(true);
            txtproductcode.setEnabled(true);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(true);
            txtPosition.setEnabled(true);
            txtupnno.setEnabled(true);
            S_ENGINEER.setEnabled(false);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(false);
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("Party Order Status")) {
            txtpartycode.setEnabled(true);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(true);
            txtgroupname.setEnabled(false);
        }else {
            txtpartycode.setEnabled(false);
            txtpartyname.setEnabled(false);
            txtpartyind.setEnabled(false);
            txtgroupcode.setEnabled(false);
            txtgroupname.setEnabled(false);
            txtlengthfrom.setEnabled(false);
            txtlengthto.setEnabled(false);
            txtwidthfrom.setEnabled(false);
            txtwidthto.setEnabled(false);
            txtgsmfrom.setEnabled(false);
            txtgsmto.setEnabled(false);
            txtpieceno.setEnabled(false);
            txtproductcode.setEnabled(false);
            txtdatefrom.setEnabled(false);
            txtdateto.setEnabled(false);
            txtMachineNo.setEnabled(false);
            txtPosition.setEnabled(false);
            txtupnno.setEnabled(false);
            S_ENGINEER.setEnabled(false);
            REGION.setEnabled(false);
            chkKeyClientInd.setEnabled(false);
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void Table_DiversionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_DiversionKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_DiversionKeyPressed

    private void SHOW_BTN_DIVERSIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_DIVERSIONActionPerformed
        // TODO add your handling code here:
        GenerateDiversion();
        DiversionFlag = true;
    }//GEN-LAST:event_SHOW_BTN_DIVERSIONActionPerformed

    private void Export_DiversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_DiversionActionPerformed
        // TODO add your handling code here:
        try {

//            exp.fillData(Table_Diversion, new File("/root/Desktop/DIVERSION_REPORT.xls"));
            exp.fillData(Table_Diversion, new File("D://DIVERSION_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/DIVERSION_REPORT.xls' successfully in Linux PC or 'D://DIVERSION_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(Table_Diversion, new File(System.getProperty("user.home") + "/Desktop/DIVERSION_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/DIVERSION_REPORT.xls' or 'D://DIVERSION_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_DiversionActionPerformed

    private void cmbDiversionStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDiversionStatusItemStateChanged
        // TODO add your handling code here:
        if (DiversionFlag) {
            GenerateDiversion();
        }
    }//GEN-LAST:event_cmbDiversionStatusItemStateChanged

    private void cmbDiversionOrderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDiversionOrderByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDiversionOrderByActionPerformed

    private void cmdshowSalesExpYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdshowSalesExpYActionPerformed
        // TODO add your handling code here:
        txtsalesexptotal.setText("0");
        txtsalesexptotal1.setText("0");
        txtdatefrom.setText("");
        txtdateto.setText((""));
        //GenerateSalesDetailY();
        //GenerateSalesDetailM();        
        GenerateSalesExpDetailYNew();
        GenerateSalesExpDetailMNew();
    }//GEN-LAST:event_cmdshowSalesExpYActionPerformed

    private void cmdsalesExpyrExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsalesExpyrExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableSalesExpY, new File("D://SalesExportYearly.xls"));
//            exp.fillData(TableSalesExpY, new File("/root/Desktop/SalesExportYearly.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/SalesExportYearly.xls' successfully in Linux PC or 'D://SalesExportYearly.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableSalesExpY, new File(System.getProperty("user.home") + "/Desktop/SalesExportYearly.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/SalesExportYearly.xls' or 'D://SalesExportYearly.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdsalesExpyrExporttoExcelActionPerformed

    private void cmdsalesExpmonthExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsalesExpmonthExportToExcelActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableSalesExpM, new File("D://SalesExportMonthly.xls"));
//            exp.fillData(TableSalesExpM, new File("/root/Desktop/SalesExportMonthly.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/SalesExportMonthly.xls' successfully in Linux PC or 'D://SalesExportMonthly.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableSalesExpM, new File(System.getProperty("user.home") + "/Desktop/SalesExportMonthly.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/SalesExportMonthly.xls' or 'D://SalesExportMonthly.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdsalesExpmonthExportToExcelActionPerformed

    private void cmbProductionStageObsoleteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductionStageObsoleteItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProductionStageObsoleteItemStateChanged

    private void cmbProductionStageDivListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductionStageDivListItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProductionStageDivListItemStateChanged

    private void TableGIDC_SDFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableGIDC_SDFKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableGIDC_SDFKeyPressed

    private void btnGIDC_SDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGIDC_SDFActionPerformed
        // TODO add your handling code here:
        FormatGridGIDC_SDF_Status();
        GenerateGIDC_SDF_Status();
    }//GEN-LAST:event_btnGIDC_SDFActionPerformed

    private void Export_GIDC_SDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_GIDC_SDFActionPerformed
        // TODO add your handling code here:
        try {
//            exp.fillData(TableGIDC_SDF, new File("/root/Desktop/GIDC_SDF_REPORT.xls"));
            exp.fillData(TableGIDC_SDF, new File("D://GIDC_SDF_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/GIDC_SDF_REPORT.xls' successfully in Linux PC or 'D://GIDC_SDF_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableGIDC_SDF, new File(System.getProperty("user.home") + "/Desktop/GIDC_SDF_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/GIDC_SDF_REPORT.xls' or 'D://GIDC_SDF_REPORT.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_GIDC_SDFActionPerformed

    private void cmbProductionStageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProductionStageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProductionStageActionPerformed

    private void cmbProductionStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProductionStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProductionStatusActionPerformed

    private void TablePieceStage1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePieceStage1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePieceStage1KeyPressed

    private void SHOW_BTN_PIECE_STAGE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_PIECE_STAGE1ActionPerformed
        // TODO add your handling code here:
        GenerateOrderConfirmation();
        ORDER_BY = "";

    }//GEN-LAST:event_SHOW_BTN_PIECE_STAGE1ActionPerformed

    private void PieceStage3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieceStage3ActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TablePieceStage1, new File("D://OrderConfirmation.xls"));
            exp.fillData(TablePieceStage1, new File(System.getProperty("user.home") + "/Desktop/OrderConfirmation.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/OrderConfirmation.xls' or 'D://OrderConfirmation.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_PieceStage3ActionPerformed

    private void BTN_SORT_DATA_PIECE_STAGE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_PIECE_STAGE1ActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_PIECE_STAGE1ActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_PIECE_STAGE1ActionPerformed

    private void TableCSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableCSKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCSKeyPressed

    private void SHOW_BTN_CSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_CSActionPerformed
        // TODO add your handling code here:
        GenerateCurrentScheduleMonth();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_CSActionPerformed

    private void Export_CSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_CSActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TableCS, new File("D://CurrentSchedule.xls"));
            exp.fillData(TableCS, new File(System.getProperty("user.home") + "/Desktop/CurrentSchedule.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/CurrentSchedule.xls' or 'D://CurrentSchedule.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_CSActionPerformed

    private void BTN_SORT_DATA_CSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_CSActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        if (!"".equals(ORDER_BY)) {
            SHOW_BTN_CSActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_CSActionPerformed

    private void TableCapacityPlanningKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableCapacityPlanningKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCapacityPlanningKeyPressed

    private void SHOW_BTN_CAPACITYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_CAPACITYActionPerformed
        GenerateCapacityPlanning();
        ORDER_BY = ""; // TODO add your handling code here:
    }//GEN-LAST:event_SHOW_BTN_CAPACITYActionPerformed

    private void cmbcapacityxlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbcapacityxlsActionPerformed
        try {
            exp.fillData(TableCapacityPlanning, new File("D://Mfg_plan_Qltwise_areawise_qty_alloation.xls"));
            exp.fillData(TableCapacityPlanning, new File(System.getProperty("user.home") + "/Desktop/Mfg_plan_Qltwise_areawise_qty_alloation.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/Mfg_plan_Qltwise_areawise_qty_alloation.xls' or 'D://Mfg_plan_Qltwise_areawise_qty_alloation.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmbcapacityxlsActionPerformed

    private void TableWIPProd_ProductionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableWIPProd_ProductionKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableWIPProd_ProductionKeyPressed

    private void btnWIPProd_ProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWIPProd_ProductionActionPerformed
        // TODO add your handling code here:
        //  ORDER_BY = " ORDER BY WIP_EXT_PIECE_NO";

//        FormatGridWIPProduction();
//        GenerateWIPProduction();
//        ORDER_BY = "";
        if (rbtnWIP_ProdView.isSelected()) {
            FormatGridWIPProduction();
            GenerateWIPProduction();
            ORDER_BY = "";
        } else {
            FormatGridWIPSalesView();
            GenerateWIPSalesView();
            ORDER_BY = "";
        }

    }//GEN-LAST:event_btnWIPProd_ProductionActionPerformed

    private void Export_WIPProd_ProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_WIPProd_ProductionActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        try {
//            exp.fillData(TableProduction, new File("/root/Desktop/WIP_Production_REPORT.xls"));
            exp.fillData(TableWIPProd_Production, new File("D://WIP_Production_REPORT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/WIP_Production_REPORT.xls' successfully in Linux PC or 'D://WIP_Production_REPORT.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TableWIPProd_Production, new File(System.getProperty("user.home") + "/Desktop/WIP_Production_REPORT.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/WIPProd_Production.xls' or 'D://WIPProd_Production.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_WIPProd_ProductionActionPerformed

    private void cmbWIPProd_WIPStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbWIPProd_WIPStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWIPProd_WIPStatusItemStateChanged

    private void cmbWIPProd_WIPStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbWIPProd_WIPStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWIPProd_WIPStatusActionPerformed

    private void cmbWIPProd_ProductionStageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbWIPProd_ProductionStageItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWIPProd_ProductionStageItemStateChanged

    private void cmbWIPProd_ProductionStageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbWIPProd_ProductionStageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbWIPProd_ProductionStageActionPerformed

    private void rbtnWIPProd_WIPStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnWIPProd_WIPStatusMouseClicked
        cmbWIPProd_ProductionStage.setVisible(false);
        cmbWIPProd_ProductionStage.setSelectedIndex(0);
        cmbWIPProd_WIPStatus.setVisible(true);
        cmbWIPProd_WIPStatus.setSelectedIndex(0);  // TODO add your handling code here:
    }//GEN-LAST:event_rbtnWIPProd_WIPStatusMouseClicked

    private void rbtnWIPProd_PieceStageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnWIPProd_PieceStageMouseClicked
        cmbWIPProd_ProductionStage.setVisible(true);
        cmbWIPProd_ProductionStage.setSelectedIndex(0);
        cmbWIPProd_WIPStatus.setVisible(false);
        cmbWIPProd_WIPStatus.setSelectedIndex(0);
    }//GEN-LAST:event_rbtnWIPProd_PieceStageMouseClicked

    private void BTN_SORT_DATA_WIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_WIP1ActionPerformed
        if (rbtnWIP_ProdView.isSelected()) {
            sort_query_creator_WIP();
        } else if (rbtnWIP_SalesView.isSelected()) {
            sort_query_creator();
        }
        if (!"".equals(ORDER_BY)) {
            btnWIPProd_ProductionActionPerformed(null);
        }
    }//GEN-LAST:event_BTN_SORT_DATA_WIP1ActionPerformed

    private void rbtnReqMonthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnReqMonthMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnReqMonthMouseClicked

    private void rbtnOCMonthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbtnOCMonthMouseClicked
        cmbcapacityreqmonth.setVisible(false);
        cmbcapacityreqmonth.setSelectedIndex(0);
        cmbcapacityOCmonth.setVisible(true);
        cmbcapacityOCmonth.setSelectedIndex(0);

        MFGPlan = "OC";

        System.out.println(MFGPlan);
    }//GEN-LAST:event_rbtnOCMonthMouseClicked

    private void rbtnReqMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnReqMonthActionPerformed
        cmbcapacityreqmonth.setVisible(true);
        cmbcapacityreqmonth.setSelectedIndex(0);
        cmbcapacityOCmonth.setVisible(false);
        cmbcapacityOCmonth.setSelectedIndex(0);

        MFGPlan = "REQ";
        System.out.println(MFGPlan);
    }//GEN-LAST:event_rbtnReqMonthActionPerformed

    private void rbtnWIPProd_PieceStageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnWIPProd_PieceStageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnWIPProd_PieceStageActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void Table_STOCK_DFSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_STOCK_DFSKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_STOCK_DFSKeyPressed

    private void Export_Stock_DFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_Stock_DFSActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(Table_STOCK_DFS, new File("D://DivertedFinishingStock.xls"));

            exp.fillData(Table_STOCK_DFS, new File(System.getProperty("user.home") + "/Desktop/DivertedFinishingStock.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/DivertedFinishingStock.xls' or 'D://DivertedFinishingStock.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_Stock_DFSActionPerformed

    private void SHOW_BTN_STOCK_DFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_BTN_STOCK_DFSActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:

        FormatGridStock_DFS();
        GenerateStock_DFS();
        ORDER_BY = "";
    }//GEN-LAST:event_SHOW_BTN_STOCK_DFSActionPerformed

    private void BTN_SORT_DATA_STOCK_DFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SORT_DATA_STOCK_DFSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BTN_SORT_DATA_STOCK_DFSActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void cmdShowPANActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowPANActionPerformed
        // TODO add your handling code here:
        GeneratePANReport();
    }//GEN-LAST:event_cmdShowPANActionPerformed

    private void cmdPANExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPANExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(TablePAN, new File("D://PANBaseTO.xls"));
//            exp.fillData(TableContacts, new File("/root/Desktop/Contacts.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Contacts.xls' successfully in Linux PC or 'D://Contacts.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TablePAN, new File(System.getProperty("user.home") + "/Desktop/PANBaseTO.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PANBaseTO.xls' or 'D://PANBaseTO.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdPANExporttoExcelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (TablePieceStage.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select any Piece");
        } else {
            String PieceNo = TablePieceStage.getValueAt(TablePieceStage.getSelectedRow(), 6).toString();

            AppletFrame aFrame = new AppletFrame("Felt Piece Details");
            aFrame.startAppletEx("EITLERP.FeltSales.FeltPieceMaster.FrmPieceMasterDetail", "Felt Piece Details");
            FrmPieceMasterDetail ObjItem = (FrmPieceMasterDetail) aFrame.ObjApplet;

            ObjItem.requestFocus();

            ObjItem.setData(PieceNo);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnShowPieceDetail_STOCKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPieceDetail_STOCKActionPerformed
        // TODO add your handling code here:
        if (Table_STOCK.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select any Piece");
        } else {
            String PieceNo = Table_STOCK.getValueAt(Table_STOCK.getSelectedRow(), 6).toString();

            AppletFrame aFrame = new AppletFrame("Felt Piece Details");
            aFrame.startAppletEx("EITLERP.FeltSales.FeltPieceMaster.FrmPieceMasterDetail", "Felt Piece Details");
            FrmPieceMasterDetail ObjItem = (FrmPieceMasterDetail) aFrame.ObjApplet;

            ObjItem.requestFocus();
            ObjItem.setData(PieceNo);
        }
    }//GEN-LAST:event_btnShowPieceDetail_STOCKActionPerformed

    private void btnShowPieceDetails_WIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowPieceDetails_WIPActionPerformed
        // TODO add your handling code here:
        if (TableWIPProd_Production.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select any Piece");
        } else {
            String PieceNo = TableWIPProd_Production.getValueAt(TableWIPProd_Production.getSelectedRow(), 6).toString();

            AppletFrame aFrame = new AppletFrame("Felt Piece Details");
            aFrame.startAppletEx("EITLERP.FeltSales.FeltPieceMaster.FrmPieceMasterDetail", "Felt Piece Details");
            FrmPieceMasterDetail ObjItem = (FrmPieceMasterDetail) aFrame.ObjApplet;

            ObjItem.requestFocus();
            ObjItem.setData(PieceNo);
        }
    }//GEN-LAST:event_btnShowPieceDetails_WIPActionPerformed

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
         try {
            exp.fillData(TablePartyStatus, new File("D://PartyOrderStatus.xls"));
//            exp.fillData(TableContacts, new File("/root/Desktop/Contacts.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'/root/Desktop/Contacts.xls' successfully in Linux PC or 'D://Contacts.xls' successfully in Windows PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);

            exp.fillData(TablePartyStatus, new File(System.getProperty("user.home") + "/Desktop/PartyOrderStatus.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/PartyOrderStatus.xls' or 'D://PartyOrderStatus.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void BtnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnViewActionPerformed
        // TODO add your handling code here:
        GenerateData();
    }//GEN-LAST:event_BtnViewActionPerformed
    private void FormatGridPartyStatus() {
        DataModelPStatus = new EITLTableModel();
        TablePartyStatus.removeAll();
        TablePartyStatus.setModel(DataModelPStatus);

        TablePartyStatus.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModelPStatus.addColumn("Unit");//0
        DataModelPStatus.addColumn("Party Code");//1
        DataModelPStatus.addColumn("Party Name");//2
        DataModelPStatus.addColumn("Machine No.");//3
        DataModelPStatus.addColumn("Position No.");//4
        DataModelPStatus.addColumn("Position Desc");//5
        DataModelPStatus.addColumn("PO No.");//6
        DataModelPStatus.addColumn("PO Date");//7
        DataModelPStatus.addColumn("Group");//8
        DataModelPStatus.addColumn("Length");//9
        DataModelPStatus.addColumn("Width");//10
        DataModelPStatus.addColumn("SQMTR");//11
        DataModelPStatus.addColumn("GSM");//12
        DataModelPStatus.addColumn("Pending as on 01/04/" + EITLERPGLOBAL.FinYearFrom);//13
        DataModelPStatus.addColumn("Invoiced");//14
        DataModelPStatus.addColumn("Still Pending as on " + EITLERPGLOBAL.getCurrentDate());//15
        DataModelPStatus.addColumn("All Pieces");//16
        DataModelPStatus.addColumn("Value Pieces");//17
        DataModelPStatus.addColumn("WIP Pieces");//18
        DataModelPStatus.addColumn("WIP Pieces Value");//19
        DataModelPStatus.addColumn("Stock Pieces");//20
        DataModelPStatus.addColumn("Stock Pieces Value");//21
        DataModelPStatus.addColumn("Invoiced Pieces");//22
        DataModelPStatus.addColumn("Invoiced Pieces Value");//23
        DataModelPStatus.addColumn("NxtYear Pending");//24
        DataModelPStatus.addColumn("NxtYear Pieces");//24
        DataModelPStatus.addColumn("NxtYear Pieces Value");//25
        DataModelPStatus.addColumn("Run Date");//26

        DataModelPStatus.TableReadOnly(true);
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        for (int i = 9; i <= 15; i++) {
            TablePartyStatus.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
        }
        TablePartyStatus.getColumnModel().getColumn(17).setCellRenderer(rightRenderer);
        TablePartyStatus.getColumnModel().getColumn(19).setCellRenderer(rightRenderer);
        TablePartyStatus.getColumnModel().getColumn(21).setCellRenderer(rightRenderer);
        TablePartyStatus.getColumnModel().getColumn(23).setCellRenderer(rightRenderer);
        TablePartyStatus.getColumnModel().getColumn(24).setCellRenderer(rightRenderer);
        TablePartyStatus.getColumnModel().getColumn(26).setCellRenderer(rightRenderer);
    }
    private void GenerateData() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridPartyStatus(); //clear existing content of table
            ResultSet rsTmp;
            if (txtpartycode.getText().trim().length() > 0) {
                cndtn = " AND PR_PARTY_CODE IN (" + txtpartycode.getText() + ")";
            }
            if (txtgroupcode.getText().trim().length() > 0) {
                grp_cndtn = " AND GROUP_DESC IN ('" + txtgroupname.getText() + "')";
            }

            String strSQL = "";

            strSQL = "SELECT P.*,COALESCE(NPIECE,'') AS NPIECE,COALESCE(NPENDING,0) AS NPENDING,COALESCE(NPENDINGVALUE,0) AS NPENDINGVALUE "
                    + " FROM (SELECT DATE_FORMAT(NOW(),'%d/%m/%Y %r') AS  RUNDATE,COALESCE(GROUP_DESC,'') AS GROUP_DESC,PR_PARTY_CODE,PARTY_NAME,"
                    + "PR_MACHINE_NO,PR_POSITION_NO,PR_PO_NO,"
                    + "CASE WHEN COALESCE(PR_PO_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PO_DATE,'%d/%m/%Y') END  AS PO_DATE,"
                    + "POSITION_DESC,PR_GROUP,PR_LENGTH,PR_WIDTH,PR_SQMTR,PR_GSM,COUNT(PR_PIECE_NO) AS PENDING,"
                    + "SUM(PR_FELT_VALUE_WITH_GST) AS PENDINGVALUE,"
                    + "SUM(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN 0 ELSE 1 END) AS INVOICED,"
                    + "SUM(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN 0 ELSE PR_FELT_VALUE_WITH_GST  END) AS INVOICEDVALUE,"
                    + "GROUP_CONCAT(DISTINCT CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE)) AS PIECE,"
                    + "COALESCE(GROUP_CONCAT(DISTINCT CASE WHEN PR_PIECE_STAGE IN ('PLANNING','BOOKING','SPIRALLING') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_ORDER_DATE),' Days) (OC - ',COALESCE(PR_OC_MONTHYEAR,''),')') "
                    + " WHEN PR_PIECE_STAGE IN ('WEAVING') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_WARP_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " WHEN PR_PIECE_STAGE IN ('SEAMING','NEEDLING') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_MND_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " WHEN PR_PIECE_STAGE IN ('MENDING') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_WVG_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " WHEN PR_PIECE_STAGE IN ('ASSEMBLY') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_SDF_SPIRALED_DATE ),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " WHEN PR_PIECE_STAGE IN ('FINISHING') AND PR_GROUP IN ('HDS') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_SEAM_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " WHEN PR_PIECE_STAGE IN ('FINISHING') AND PR_GROUP IN ('SDF') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_SDF_ASSEMBLED_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " WHEN PR_PIECE_STAGE IN ('FINISHING') AND PR_GROUP NOT IN ('HDS','SDF') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_NDL_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + " END),'') AS WIPPIECE,"
                    + "SUM(CASE WHEN PR_PIECE_STAGE IN ('PLANNING','BOOKING','SPIRALLING','WEAVING','SEAMING','NEEDLING','MENDING','ASSEMBLY','FINISHING','HEAT_SETTING','MARKING','SPLICING') "
                    + " THEN PR_FELT_VALUE_WITH_GST END) AS WIPPIECEVALUE,"
                    + "COALESCE(GROUP_CONCAT(DISTINCT CASE WHEN PR_PIECE_STAGE IN ('BSR') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_PACKED_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + "WHEN PR_PIECE_STAGE IN ('IN STOCK') THEN CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE,' -(',DATEDIFF(CURDATE(),PR_FNSG_DATE),' Days) (OC - ',PR_OC_MONTHYEAR,')') "
                    + "END),'') AS STKPIECE,"
                    + "SUM(CASE WHEN PR_PIECE_STAGE IN ('BSR','IN STOCK') "
                    + " THEN PR_FELT_VALUE_WITH_GST END) AS STKPIECEVALUE,"
                    + "COALESCE(GROUP_CONCAT(DISTINCT CASE WHEN PR_PIECE_STAGE IN ('INVOICED','EXP-INVOICE') THEN CONCAT(PR_PIECE_NO,'-(',DATE_FORMAT(PR_INVOICE_DATE,'%d/%m/%Y'),')') END),'') AS INVPIECE "
                    + " FROM PRODUCTION.FELT_SALES_PIECE_REGISTER R "
                    + " LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,'(',CITY_ID,')') AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM ON R.PR_PARTY_CODE=PARTY_CODE "
                    + " LEFT JOIN (SELECT DISTINCT PARTY_CODE,GROUP_DESC FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D1 ,PRODUCTION.FELT_GROUP_MASTER_HEADER H "
                    + " WHERE H.GROUP_CODE = D1.GROUP_CODE) AS G ON R.PR_PARTY_CODE=G.PARTY_CODE "
                    + " LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON PR_POSITION_NO+0=POSITION_NO+0 "
                    + " WHERE PR_PIECE_STAGE NOT IN ('CANCELED','JOINED','RETURN','SCRAP','DIVIDED','DIVERTED','CANCELLED','OSG STOCK') "
                    + " AND COALESCE(PR_DELINK,'')!='OBSOLETE' "
                    + " AND (COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' OR PR_INVOICE_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "') "
                    + " AND COALESCE(PR_OC_LAST_DDMMYY,'0000-00-00')<='" + EITLERPGLOBAL.FinYearTo + "-03-31' "
                    + cndtn + " "
                    + grp_cndtn + " "
                    + " GROUP BY GROUP_DESC,PR_PARTY_CODE,PR_PO_NO,PR_PO_DATE,PR_UPN "
                    + " ORDER BY GROUP_DESC,PR_PARTY_CODE,PR_PO_NO,PR_PO_DATE,PR_UPN ) AS P "
                    + "LEFT JOIN ("
                    + "SELECT PR_PARTY_CODE AS NPCD,PR_MACHINE_NO AS NMC,PR_POSITION_NO AS NPOS,PR_PO_NO AS NPO,"
                    + "CASE WHEN COALESCE(PR_PO_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PO_DATE,'%d/%m/%Y') END  AS NPODATE,"
                    + "COUNT(PR_PIECE_NO) AS NPENDING,SUM(PR_FELT_VALUE_WITH_GST) AS NPENDINGVALUE,"
                    + "GROUP_CONCAT(DISTINCT CONCAT(PR_PIECE_NO,'-',PR_PIECE_STAGE)) AS NPIECE "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER R "
                    + " LEFT JOIN (SELECT DISTINCT PARTY_CODE,GROUP_DESC FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D1 ,PRODUCTION.FELT_GROUP_MASTER_HEADER H "
                    + " WHERE H.GROUP_CODE = D1.GROUP_CODE) AS G ON R.PR_PARTY_CODE=G.PARTY_CODE "
                    + "WHERE PR_PIECE_STAGE NOT IN ('CANCELED','JOINED','RETURN','SCRAP','DIVIDED','DIVERTED','CANCELLED','OSG STOCK') "
                    + " AND COALESCE(PR_DELINK,'')!='OBSOLETE' "
                    + " AND (COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' OR PR_INVOICE_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "') "
                    + " AND COALESCE(PR_OC_LAST_DDMMYY,'0000-00-00')>'" + EITLERPGLOBAL.FinYearTo + "-03-31' "
                    + cndtn + " "
                    + grp_cndtn + " "
                    + " GROUP BY GROUP_DESC,PR_PARTY_CODE,PR_PO_NO,PR_PO_DATE,PR_UPN "
                    + " ORDER BY GROUP_DESC,PR_PARTY_CODE,PR_PO_NO,PR_PO_DATE,PR_UPN) AS N "
                    + "ON P.PR_PARTY_CODE=N.NPCD AND P.PR_MACHINE_NO=N.NMC AND P.PR_POSITION_NO=N.NPOS AND P.PR_PO_NO=N.NPO AND P.PO_DATE=N.NPODATE";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int pos = 0;
                while (!rsTmp.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    pos = 0;
                    rowData[pos] = rsTmp.getString("GROUP_DESC");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_PARTY_CODE");
                    pos++;
                    rowData[pos] = rsTmp.getString("PARTY_NAME");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_MACHINE_NO");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_POSITION_NO");
                    pos++;
                    rowData[pos] = rsTmp.getString("POSITION_DESC");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_PO_NO");
                    pos++;
                    rowData[pos] = rsTmp.getString("PO_DATE");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_GROUP");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_LENGTH");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_WIDTH");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_SQMTR");
                    pos++;
                    rowData[pos] = rsTmp.getString("PR_GSM");
                    pos++;
                    rowData[pos] = rsTmp.getString("PENDING");
                    pos++;
                    rowData[pos] = rsTmp.getString("INVOICED");
                    pos++;
                    rowData[pos] = rsTmp.getDouble("PENDING") - rsTmp.getDouble("INVOICED");
                    pos++;
                    rowData[pos] = rsTmp.getString("PIECE");
                    pos++;
                    rowData[pos] = rsTmp.getString("PENDINGVALUE");
                    pos++;
                    rowData[pos] = rsTmp.getString("WIPPIECE");
                    pos++;
                    rowData[pos] = rsTmp.getString("WIPPIECEVALUE");
                    pos++;
                    rowData[pos] = rsTmp.getString("STKPIECE");
                    pos++;
                    rowData[pos] = rsTmp.getString("STKPIECEVALUE");
                    pos++;
                    rowData[pos] = rsTmp.getString("INVPIECE");
                    pos++;
                    rowData[pos] = rsTmp.getString("INVOICEDVALUE");
                    pos++;
                    rowData[pos] = rsTmp.getString("NPENDING");
                    pos++;
                    rowData[pos] = rsTmp.getString("NPIECE");
                    pos++;
                    rowData[pos] = rsTmp.getString("NPENDINGVALUE");
                    pos++;
                    rowData[pos] = rsTmp.getString("RUNDATE");

                    DataModelPStatus.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = TablePartyStatus.getColumnModel();
                for (int column = 0; column < TablePartyStatus.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TablePartyStatus.getRowCount(); row++) {
                        TableCellRenderer renderer = TablePartyStatus.getCellRenderer(row, column);
                        Component comp = TablePartyStatus.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Zero (0) Record Found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    private void GenerateContacts() {
        try {
            FormatGridContacts();  //clear existing content of table
            String SelUserID = txtpartycode.getText().toString();
            String strProductCode = txtproductcode.getText().toString();
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            String strSQL = "";
            String cndtn = "";

            txtATotal.setText("");
            txtIATotal.setText("");
            txtMCTotal.setText("");
            txtTCTotal.setText("");
            txtcontactstotal.setText("");

//            //strSQL+="SELECT A.PARTY_CODE,NAME,AD1,AD2,STATION,ZONE,CONTACT_PERSON,MOBILE,LANDLINE,EMAIL,FAX,OFFICE_ADD,WORK_ADD,CASE WHEN SUBSTRING(A.PARTY_CODE,1,3) IN (821,824,826) THEN 'GURDIP RAWAT'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (811,825,827,828,829,832) THEN 'NITESH JHANWAR'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (822,823,831,833,834) THEN 'NARESH DHYANI'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (812,813,814,815) THEN 'V.G.MUTTINAMUDI'  END AS SR FROM ";
//            //strSQL+="SELECT PARTY_COD,NAME,AD1,AD2,STATION,ZONE,CONTACT_PERSON,MOBILE,LANDLINE,EMAIL,FAX,OFFICE_ADD,WORK_ADD,SR,INCHARGE_NAME FROM (SELECT A.PARTY_CODE AS PARTY_COD,NAME,AD1,AD2,STATION,ZONE,CONTACT_PERSON,MOBILE,LANDLINE,EMAIL,FAX,OFFICE_ADD,WORK_ADD,CASE WHEN SUBSTRING(A.PARTY_CODE,1,3) IN (821,824,826) THEN 'GURDIP RAWAT'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (811,825,827,828,829,832) THEN 'NITESH JHANWAR'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (822,823,831,833,834) THEN 'NARESH DHYANI'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (812,813,814,815) THEN 'V.G.MUTTINAMUDI'  END AS SR,REGION FROM ";
//            strSQL += "SELECT PARTY_COD,PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,ZONE,CONTACT_PERSON,MOBILE,LANDLINE,EMAIL,FAX,OFFICE_ADD,WORK_ADD,SR,INCHARGE_NAME FROM (SELECT A.PARTY_CODE AS PARTY_COD,PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,ZONE,CONTACT_PERSON,MOBILE,LANDLINE,EMAIL,FAX,OFFICE_ADD,WORK_ADD,CASE WHEN SUBSTRING(A.PARTY_CODE,1,3) IN (821,824,826) THEN 'GURDIP RAWAT'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (811,825,827,828,829,832) THEN 'NITESH JHANWAR'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (822,823,831,833,834) THEN 'NARESH DHYANI'  WHEN   SUBSTRING(A.PARTY_CODE,1,3) IN (812,813,814,815) THEN 'V.G.MUTTINAMUDI' END AS SR,INCHARGE_CD FROM ";
//            //strSQL+="(SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER ";
//            //strSQL+="(SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER "; 
//            strSQL += "(SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,ZONE,INCHARGE_CD,MAIN_ACCOUNT_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE";
//            if (!txtpartycode.getText().equals("")) {
//                strSQL += " PARTY_CODE = " + SelUserID + " AND ";
//            }
//            //strSQL+=") AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_PARTY_EXTRA_INFO) AS B ON A.PARTY_CODE = B.PARTY_CODE"; 
//            strSQL += " MAIN_ACCOUNT_CODE='210010') AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_PARTY_EXTRA_INFO) AS B ON A.PARTY_CODE = B.PARTY_CODE) AS C LEFT JOIN (SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AS FI ON FI.INCHARGE_CD=C.INCHARGE_CD ";
            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PARTY_CODE = " + SelUserID + " ";
            }
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            if (inchargeby != 0) {
                cndtn += " AND INCHARGE_CD = " + inchargeby + "";
            } else {
                cndtn += "";
            }
            if (chkKeyClientInd.isSelected()){
                cndtn += " AND KEY_CLIENT_IND=1 ";
            }
            if (!cmbPartyTagInd.getSelectedItem().toString().equalsIgnoreCase("All")) {
                cndtn += " AND COALESCE(TAGGING_APPROVAL_IND,0) = '" + cmbPartyTagInd.getSelectedItem() + "'";
            }
//            strSQL = "SELECT * FROM (SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,DISPATCH_STATION,ZONE,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,EMAIL_ID2,EMAIL_ID3,CONTACT_PERSON,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 " + cndtn + ") AS C LEFT JOIN (SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AS FI ON FI.INCHARGE_CD=C.INCHARGE_CD ";
//            strSQL = "SELECT *,CASE WHEN PARTY_CLOSE_IND=0 THEN 'ACTIVE' ELSE CASE WHEN COALESCE(CLOSED_IND,0)=1 THEN 'MILL CLOSED' ELSE 'IN-ACTIVE' END END AS PARTY_STATUS FROM (SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,DISPATCH_STATION,ZONE,DISTRICT,PHONE_NO,MOBILE_NO,MOBILE_NO_2,MOBILE_NO_3,EMAIL,EMAIL_ID2,EMAIL_ID3,CONTACT_PERSON,CONTACT_PERSON_2,CONTACT_PERSON_3,CONT_PERS_DESIGNATION,CONT_PERS_DESIGNATION_2,CONT_PERS_DESIGNATION_3,INCHARGE_CD,TRANSPORTER_NAME,DELIVERY_MODE,COALESCE(PARTY_CLOSE_IND,0) AS PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 " + cndtn + ") AS C LEFT JOIN (SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AS FI ON FI.INCHARGE_CD=C.INCHARGE_CD LEFT JOIN (SELECT PARTY_CODE AS PC_PARTY_CODE,CLOSED_IND FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO LIKE ('FPC%') AND APPROVED=1 AND CANCELLED=0 AND CLOSED_IND=1 ORDER BY DOC_NO DESC) AS PC ON C.PARTY_CODE=PC.PC_PARTY_CODE ";

//            strSQL = "SELECT *,CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'MILL CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'MILL CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'MILL CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PARTY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PARTY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PARTY CLOSED' END AS PARTY_STATUS FROM (SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_INACTIVE_IND,PARTY_MILL_CLOSED_IND,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,DISPATCH_STATION,ZONE,DISTRICT,PHONE_NO,MOBILE_NO,MOBILE_NO_2,MOBILE_NO_3,EMAIL,EMAIL_ID2,EMAIL_ID3,CONTACT_PERSON,CONTACT_PERSON_2,CONTACT_PERSON_3,CONT_PERS_DESIGNATION,CONT_PERS_DESIGNATION_2,CONT_PERS_DESIGNATION_3,INCHARGE_CD,TRANSPORTER_NAME,DELIVERY_MODE,COALESCE(PARTY_CLOSE_IND,0) AS PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 " + cndtn + ") AS C LEFT JOIN (SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AS FI ON FI.INCHARGE_CD=C.INCHARGE_CD LEFT JOIN (SELECT PARTY_CODE AS PC_PARTY_CODE,CLOSED_IND FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO LIKE ('FPC%') AND APPROVED=1 AND CANCELLED=0 AND CLOSED_IND=1 ORDER BY DOC_NO DESC) AS PC ON C.PARTY_CODE=PC.PC_PARTY_CODE ";
//            strSQL = "SELECT *,CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'MILL CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'MILL CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'MILL CLOSED' END AS PARTY_STATUS FROM (SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_INACTIVE_IND,PARTY_MILL_CLOSED_IND,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,DISPATCH_STATION,ZONE,DISTRICT,PHONE_NO,MOBILE_NO,MOBILE_NO_2,MOBILE_NO_3,EMAIL,EMAIL_ID2,EMAIL_ID3,CONTACT_PERSON,CONTACT_PERSON_2,CONTACT_PERSON_3,CONT_PERS_DESIGNATION,CONT_PERS_DESIGNATION_2,CONT_PERS_DESIGNATION_3,INCHARGE_CD,TRANSPORTER_NAME,DELIVERY_MODE,COALESCE(PARTY_CLOSE_IND,0) AS PARTY_CLOSE_IND, CHARGE_CODE, COALESCE(TAGGING_APPROVAL_IND,0) AS PARTY_TAGGING_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 " + cndtn + ") AS C LEFT JOIN (SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AS FI ON FI.INCHARGE_CD=C.INCHARGE_CD LEFT JOIN (SELECT PARTY_CODE AS PC_PARTY_CODE,CLOSED_IND FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO LIKE ('FPC%') AND APPROVED=1 AND CANCELLED=0 AND CLOSED_IND=1 ORDER BY DOC_NO DESC) AS PC ON C.PARTY_CODE=PC.PC_PARTY_CODE ";
            strSQL = "SELECT *,CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM (SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_INACTIVE_IND,PARTY_MILL_CLOSED_IND,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,STATE_ID AS PM_STATE_ID,DISPATCH_STATION,ZONE,DISTRICT,PHONE_NO,MOBILE_NO,MOBILE_NO_2,MOBILE_NO_3,EMAIL,EMAIL_ID2,EMAIL_ID3,CONTACT_PERSON,CONTACT_PERSON_2,CONTACT_PERSON_3,CONT_PERS_DESIGNATION,CONT_PERS_DESIGNATION_2,CONT_PERS_DESIGNATION_3,INCHARGE_CD,TRANSPORTER_NAME,DELIVERY_MODE,COALESCE(PARTY_CLOSE_IND,0) AS PARTY_CLOSE_IND, CHARGE_CODE, COALESCE(TAGGING_APPROVAL_IND,0) AS PARTY_TAGGING_IND, COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 " + cndtn + ") AS C LEFT JOIN (SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AS FI ON FI.INCHARGE_CD=C.INCHARGE_CD LEFT JOIN (SELECT PARTY_CODE AS PC_PARTY_CODE,CLOSED_IND FROM PRODUCTION.FELT_PARTY_MACHINE_POSITION_CLOSURE WHERE DOC_NO LIKE ('FPC%') AND APPROVED=1 AND CANCELLED=0 AND CLOSED_IND=1 ORDER BY DOC_NO DESC) AS PC ON C.PARTY_CODE=PC.PC_PARTY_CODE LEFT JOIN (SELECT STATE_ID AS SM_STATE_ID, STATE_NAME FROM D_SAL_STATE_MASTER WHERE COUNTRY_ID=1) AS SM ON C.PM_STATE_ID=SM.SM_STATE_ID";

//            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
//            if (inchargeby == 0) {
//                strSQL += " ";
//            }
//            if (inchargeby == 1) {
//                strSQL += " WHERE FI.INCHARGE_CD=1";
//            }
//            if (inchargeby == 2) {
//                strSQL += " WHERE FI.INCHARGE_CD=2";
//            }
//            if (inchargeby == 3) {
//                strSQL += " WHERE FI.INCHARGE_CD=3";
//            }
//            if (inchargeby == 4) {
//                strSQL += " WHERE FI.INCHARGE_CD=4";
//            }
//            if (inchargeby == 5) {
//                strSQL += " WHERE FI.INCHARGE_CD=5";
//            }
//            if (inchargeby == 6) {
//                strSQL += " WHERE FI.INCHARGE_CD=6";
//            }
//            if (inchargeby == 7) {
//                strSQL += " WHERE C.INCHARGE_CD IS NULL";
//            }
            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                int aCnt = 0;
                int iaCnt = 0;
                int mcCnt = 0;
                int tcCnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtcontactstotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[50];
                    rowData[0] = Integer.toString(cnt);
//                    //rowData[1]=rsTmp.getString("PARTY_CODE");
//                    rowData[1] = rsTmp.getString("PARTY_CODE");
//                    rowData[2] = rsTmp.getString("PARTY_NAME");
//                    rowData[3] = rsTmp.getString("ADDRESS1");
//                    rowData[4] = rsTmp.getString("ADDRESS2");
//                    rowData[5] = rsTmp.getString("DISPATCH_STATION");
//                    rowData[6] = rsTmp.getString("ZONE");
//                    rowData[7] = rsTmp.getString("CONTACT_PERSON");
//                    rowData[8] = rsTmp.getString("MOBILE_NO");
//                    rowData[9] = rsTmp.getString("PHONE_NO");
//                    rowData[10] = rsTmp.getString("EMAIL");
////                    rowData[11] = rsTmp.getString("FAX");
////                    rowData[12] = rsTmp.getString("OFFICE_ADD");
////                    rowData[13] = rsTmp.getString("WORK_ADD");
////                    //rowData[14]=rsTmp.getString("SR");
////                    rowData[14] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[11] = rsTmp.getString("EMAIL_ID2");
//                    rowData[12] = rsTmp.getString("EMAIL_ID2");
//                    rowData[13] = rsTmp.getString("INCHARGE_NAME");

                    rowData[1] = rsTmp.getString("PARTY_CODE");
                    rowData[2] = rsTmp.getString("PARTY_NAME");
                    rowData[3] = rsTmp.getString("ADDRESS1");
                    rowData[4] = rsTmp.getString("ADDRESS2");
                    rowData[5] = rsTmp.getString("STATE_NAME");
                    rowData[6] = rsTmp.getString("DISPATCH_STATION");
                    rowData[7] = rsTmp.getString("PINCODE");
                    rowData[8] = rsTmp.getString("PHONE_NO");
                    rowData[9] = rsTmp.getString("CONTACT_PERSON");
                    rowData[10] = rsTmp.getString("CONT_PERS_DESIGNATION");
                    rowData[11] = rsTmp.getString("MOBILE_NO");
                    rowData[12] = rsTmp.getString("EMAIL");
                    rowData[13] = rsTmp.getString("CONTACT_PERSON_2");
                    rowData[14] = rsTmp.getString("CONT_PERS_DESIGNATION_2");
                    rowData[15] = rsTmp.getString("MOBILE_NO_2");
                    rowData[16] = rsTmp.getString("EMAIL_ID2");
                    rowData[17] = rsTmp.getString("CONTACT_PERSON_3");
                    rowData[18] = rsTmp.getString("CONT_PERS_DESIGNATION_3");
                    rowData[19] = rsTmp.getString("MOBILE_NO_3");
                    rowData[20] = rsTmp.getString("EMAIL_ID3");
                    rowData[21] = rsTmp.getString("ZONE");
                    rowData[22] = rsTmp.getString("INCHARGE_NAME");
                    rowData[23] = rsTmp.getString("TRANSPORTER_NAME");
                    rowData[24] = rsTmp.getString("DELIVERY_MODE");
                    rowData[25] = rsTmp.getString("PARTY_STATUS");
                    rowData[26] = rsTmp.getString("CHARGE_CODE");
                    rowData[27] = rsTmp.getString("PARTY_TAGGING_IND");

                    if (rsTmp.getString("PARTY_STATUS").equals("ACTIVE")) {
                        aCnt++;
                    }
                    if (rsTmp.getString("PARTY_STATUS").equals("IN-ACTIVE")) {
                        iaCnt++;
                    }
                    if (rsTmp.getString("PARTY_STATUS").equals("PERMANENTLY CLOSED")) {
                        mcCnt++;
                    }
                    if (rsTmp.getString("PARTY_STATUS").equals("TEMPORARY CLOSED")) {
                        tcCnt++;
                    }

                    DataModelContacts.addRow(rowData);
                    rsTmp.next();
                }
                txtATotal.setText(aCnt + "");
                txtIATotal.setText(iaCnt + "");
                txtMCTotal.setText(mcCnt + "");
                txtTCTotal.setText(tcCnt + "");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridContacts() {
        DataModelContacts = new EITLTableModel();
        TableContacts.removeAll();
        TableContacts.setModel(DataModelContacts);

        TableContacts.setAutoResizeMode(TableContacts.AUTO_RESIZE_OFF);
        DataModelContacts.addColumn("Sr.");
        DataModelContacts.addColumn("Party Code");
        DataModelContacts.addColumn("Name");
        DataModelContacts.addColumn("Address 1");
        DataModelContacts.addColumn("Address 2");
        DataModelContacts.addColumn("State");
//        DataModelContacts.addColumn("Station");
//        DataModelContacts.addColumn("Zone");
//        DataModelContacts.addColumn("Contact Person");
//        DataModelContacts.addColumn("Mobile");
//        DataModelContacts.addColumn("Landline");
//        DataModelContacts.addColumn("Email");
//        DataModelContacts.addColumn("Email 2");// Added on 03/06/2019
//        DataModelContacts.addColumn("Email 3");// Added on 03/06/2019
////        DataModelContacts.addColumn("Fax");//Closed on 03/06/2019
////        DataModelContacts.addColumn("Office Address");//Closed on 03/06/2019
////        DataModelContacts.addColumn("Work Address");//Closed on 03/06/2019
//        //DataModelContacts.addColumn("Sales Representative");
//        DataModelContacts.addColumn("Incharge");
        DataModelContacts.addColumn("Station");
        DataModelContacts.addColumn("Pin Code");
        DataModelContacts.addColumn("Landline");
        DataModelContacts.addColumn("Contact Person");
        DataModelContacts.addColumn("Designation");
        DataModelContacts.addColumn("Mobile");
        DataModelContacts.addColumn("Email");
        DataModelContacts.addColumn("Contact Person 2");
        DataModelContacts.addColumn("Designation 2");
        DataModelContacts.addColumn("Mobile 2");
        DataModelContacts.addColumn("Email 2");
        DataModelContacts.addColumn("Contact Person 3");
        DataModelContacts.addColumn("Designation 3");
        DataModelContacts.addColumn("Mobile 3");
        DataModelContacts.addColumn("Email 3");
        DataModelContacts.addColumn("Zone");
        DataModelContacts.addColumn("Incharge");
        DataModelContacts.addColumn("Transporter");
        DataModelContacts.addColumn("Delivery Mode");
        DataModelContacts.addColumn("Party Status");
        DataModelContacts.addColumn("Charge Code");
        DataModelContacts.addColumn("Party Tagging Ind");

        DataModelContacts.TableReadOnly(true);
        TableContacts.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    public void sort_query_creator() {
        SelectSortFields sort = new SelectSortFields();

        sort.setField("PR_PIECE_NO", "PIECE NO");
        sort.setField("PR_ORDER_DATE", "ORDER DATE");
        sort.setField("PR_DOC_NO", "DOC NO");
        sort.setField("PR_MACHINE_NO", "MACHINE NO");
        sort.setField("PR_POSITION_NO", "POSITION");
        sort.setField("PR_PARTY_CODE", "PARTY CODE");
        sort.setField("PR_PRODUCT_CODE", "PRODUCT CODE");
        sort.setField("PR_GROUP", "GROUP");
        sort.setField("PR_STYLE", "STYLE");
        sort.setField("PR_LENGTH", "LENGTH");
        sort.setField("PR_WIDTH", "WIDTH");
        sort.setField("PR_GSM", "GSM");
        sort.setField("PR_THORITICAL_WEIGHT", "WEIGHT");
        sort.setField("PR_SQMTR", "SQR MTR");
        sort.setField("PR_SYN_PER", "SYN PER");
        sort.setField("PR_REGION", "REGION");
        sort.setField("PR_INCHARGE", "INCHARGE");
        sort.setField("PR_REFERENCE", "REFERENCE");
        sort.setField("PR_REFERENCE_DATE", "REFERENCE DATE");
        sort.setField("PR_PO_NO", "P O NO");
        sort.setField("PR_PO_DATE", "P O DATE");
        sort.setField("PR_PIECE_STAGE", "PIECE STAGE");
        sort.setField("PR_WARP_DATE", "WARPING DATE");
        sort.setField("PR_WVG_DATE", "WEAVING DATE");
        sort.setField("PR_MND_DATE", "MENDING DATE");
        sort.setField("PR_NDL_DATE", "NEEDLING DATE");
        sort.setField("PR_FNSG_DATE", "FINISHING DATE");
        sort.setField("PR_ACTUAL_WEIGHT", "ACTUAL WEIGHT");
        sort.setField("PR_ACTUAL_LENGTH", "ACTUAL LENGTH");
        sort.setField("PR_ACTUAL_WIDTH", "ACTUAL WIDTH");
        sort.setField("PR_BALE_NO", "BALE NO");
        sort.setField("PR_PACKED_DATE", "PACKED DATE");
        sort.setField("PR_OC_LAST_DDMMYY", "OC MONTH");
        sort.setField("PR_REQ_MTH_LAST_DDMMYY", "REQUESTED MONTH");
        sort.setField("PR_CURRENT_SCH_LAST_DDMMYY", "CURRENT DESPATCH SCHEDULE MONTH");
        ORDER_BY = sort.getQuery(SelectSortFields.DEFAULT_ORDER.ASCENDING);
    }

    public void sort_query_creator_WIP() {
        SelectSortFields sort = new SelectSortFields();

        sort.setField("WIP_PIECE_NO", "PIECE NO");
        sort.setField("WIP_EXT_PIECE_NO", "EXT_PIECE NO");
        sort.setField("WIP_ORDER_DATE", "ORDER DATE");
        sort.setField("WIP_DOC_NO", "DOC NO");
        sort.setField("WIP_MACHINE_NO", "MACHINE NO");
        sort.setField("WIP_POSITION_NO", "POSITION");
        sort.setField("WIP_PARTY_CODE", "PARTY CODE");
        sort.setField("WIP_PRODUCT_CODE", "PRODUCT CODE");
        sort.setField("WIP_GROUP", "GROUP");
        sort.setField("WIP_STYLE", "STYLE");
        sort.setField("WIP_LENGTH", "LENGTH");
        sort.setField("WIP_WIDTH", "WIDTH");
        sort.setField("WIP_GSM", "GSM");
        sort.setField("WIP_THORITICAL_WEIGHT", "WEIGHT");
        sort.setField("WIP_SQMTR", "SQR MTR");
        sort.setField("WIP_SYN_PER", "SYN PER");
        sort.setField("WIP_REGION", "REGION");
        sort.setField("WIP_INCHARGE", "INCHARGE");
        sort.setField("WIP_REFERENCE", "REFERENCE");
        sort.setField("WIP_REFERENCE_DATE", "REFERENCE DATE");
        sort.setField("WIP_PO_NO", "P O NO");
        sort.setField("WIP_PO_DATE", "P O DATE");
        sort.setField("WIP_PIECE_STAGE", "PIECE STAGE");
        sort.setField("WIP_WARP_DATE", "WARPING DATE");
        sort.setField("WIP_WVG_DATE", "WEAVING DATE");
        sort.setField("WIP_MND_DATE", "MENDING DATE");
        sort.setField("WIP_NDL_DATE", "NEEDLING DATE");
        sort.setField("WIP_FNSG_DATE", "FINISHING DATE");
        sort.setField("WIP_ACTUAL_WEIGHT", "ACTUAL WEIGHT");
        sort.setField("WIP_ACTUAL_LENGTH", "ACTUAL LENGTH");
        sort.setField("WIP_ACTUAL_WIDTH", "ACTUAL WIDTH");
        sort.setField("WIP_OC_LAST_DDMMYY", "OC MONTH");
        sort.setField("WIP_REQ_MTH_LAST_DDMMYY", "REQUESTED MONTH");
        sort.setField("WIP_CURRENT_SCH_LAST_DDMMYY", "CURRENT DESPATCH SCHEDULE MONTH");

        ORDER_BY = sort.getQuery(SelectSortFields.DEFAULT_ORDER.ASCENDING);
    }

    public void sort_query_creator_order_register() {
        SelectSortFields sort = new SelectSortFields();

        sort.setField("S_ORDER_NO", "S_ORDER_NO");
        sort.setField("S_ORDER_DATE", "S_ORDER_DATE");
        sort.setField("REGION", "REGION");
        sort.setField("SALES_ENGINEER", "SALES_ENGINEER");
        sort.setField("PARTY_CODE", "PARTY_CODE");
        sort.setField("MACHINE_NO", "MACHINE_NO");
        sort.setField("POSITION", "POSITION");
        sort.setField("POSITION_DESC", "POSITION_DESC");
        sort.setField("PIECE_NO", "PIECE_NO");
        sort.setField("PRODUCT_CODE", "PRODUCT_CODE");
        sort.setField("S_GROUP", "S_GROUP");
        sort.setField("LENGTH", "LENGTH");
        sort.setField("WIDTH", "WIDTH");
        sort.setField("GSM", "GSM");
        sort.setField("SQ_MTR", "SQ_MTR");
        sort.setField("STYLE", "STYLE");
        sort.setField("SYN_PER", "SYN_PER");
        sort.setField("REQ_MONTH", "REQ_MONTH");

        ORDER_BY_ORDER_REGISTER = sort.getQuery(SelectSortFields.DEFAULT_ORDER.ASCENDING);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AgeingPanel;
    private javax.swing.JButton BTN_SORT_DATA_CAN;
    private javax.swing.JButton BTN_SORT_DATA_CS;
    private javax.swing.JButton BTN_SORT_DATA_DIVERTED;
    private javax.swing.JButton BTN_SORT_DATA_DIV_LIST;
    private javax.swing.JButton BTN_SORT_DATA_EXP_INVOICE;
    private javax.swing.JButton BTN_SORT_DATA_HOLD;
    private javax.swing.JButton BTN_SORT_DATA_OBSOLETE;
    private javax.swing.JButton BTN_SORT_DATA_OSGSTOCK;
    private javax.swing.JButton BTN_SORT_DATA_PIECE_STAGE;
    private javax.swing.JButton BTN_SORT_DATA_PIECE_STAGE1;
    private javax.swing.JButton BTN_SORT_DATA_PR2;
    private javax.swing.JButton BTN_SORT_DATA_STOCK;
    private javax.swing.JButton BTN_SORT_DATA_STOCK_DFS;
    private javax.swing.JButton BTN_SORT_DATA_WIP;
    private javax.swing.JButton BTN_SORT_DATA_WIP1;
    private javax.swing.JButton BtnView;
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JPanel Capacityplanning;
    private javax.swing.JButton CmdDiscountExportExcel;
    private javax.swing.JButton CmdSalesPartyExportExcel;
    private javax.swing.JButton CmdmachineExportExcel;
    private javax.swing.JPanel ContactsPanel;
    private javax.swing.JPanel DiscountPanel;
    private javax.swing.JPanel DiversionListPanel;
    private javax.swing.JPanel DivertedPanel;
    private javax.swing.JPanel ExportSalesPanel;
    private javax.swing.JButton Export_BSR;
    private javax.swing.JButton Export_CS;
    private javax.swing.JButton Export_Cancelled;
    private javax.swing.JButton Export_Div_List;
    private javax.swing.JButton Export_Div_List1;
    private javax.swing.JButton Export_Diversion;
    private javax.swing.JButton Export_Diverted;
    private javax.swing.JButton Export_FnsdvsInv;
    private javax.swing.JButton Export_GIDC_SDF;
    private javax.swing.JButton Export_GR;
    private javax.swing.JButton Export_Hold;
    private javax.swing.JButton Export_INVOICED;
    private javax.swing.JButton Export_Invoice;
    private javax.swing.JButton Export_OSGStock;
    private javax.swing.JButton Export_Order;
    private javax.swing.JButton Export_Order1;
    private javax.swing.JButton Export_PR;
    private javax.swing.JButton Export_Production1;
    private javax.swing.JButton Export_Production2;
    private javax.swing.JButton Export_Stock;
    private javax.swing.JButton Export_Stock_DFS;
    private javax.swing.JButton Export_WIPProd_Production;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JPanel FinishedVSInvoicedPanel;
    private javax.swing.JPanel HoldPanel;
    private javax.swing.JPanel InvParaModiPanel;
    private javax.swing.JPanel MFGRejectionPanel;
    private javax.swing.JPanel MachinePanel;
    private javax.swing.JPanel MisageingPanel;
    private javax.swing.JLabel ORDER_TEXT;
    private javax.swing.JPanel OrderConfirmationPanel;
    private javax.swing.JPanel PANBaseTO;
    private javax.swing.JPanel PartyStatus;
    private javax.swing.JPanel PaymentReceiptPanel;
    private javax.swing.JPanel PendingList;
    private javax.swing.JButton PieceMFGRejection;
    private javax.swing.JButton PieceStage;
    private javax.swing.JButton PieceStage1;
    private javax.swing.JButton PieceStage2;
    private javax.swing.JButton PieceStage3;
    private javax.swing.JComboBox REGION;
    private javax.swing.JButton SHOW_BTN;
    private javax.swing.JButton SHOW_BTN1;
    private javax.swing.JButton SHOW_BTN_BSR;
    private javax.swing.JButton SHOW_BTN_CANCELLED;
    private javax.swing.JButton SHOW_BTN_CAPACITY;
    private javax.swing.JButton SHOW_BTN_CS;
    private javax.swing.JButton SHOW_BTN_DIVERSION;
    private javax.swing.JButton SHOW_BTN_DIVERTED;
    private javax.swing.JButton SHOW_BTN_DIV_LIST;
    private javax.swing.JButton SHOW_BTN_Delink;
    private javax.swing.JButton SHOW_BTN_EXP_INVOICE;
    private javax.swing.JButton SHOW_BTN_HOLD;
    private javax.swing.JButton SHOW_BTN_INVOICED;
    private javax.swing.JButton SHOW_BTN_OSGSTOCK;
    private javax.swing.JButton SHOW_BTN_PIECE_STAGE;
    private javax.swing.JButton SHOW_BTN_PIECE_STAGE1;
    private javax.swing.JButton SHOW_BTN_PendingList;
    private javax.swing.JButton SHOW_BTN_STOCK;
    private javax.swing.JButton SHOW_BTN_STOCK_DFS;
    private javax.swing.JComboBox S_ENGINEER;
    private javax.swing.JPanel SalesPanel;
    private javax.swing.JPanel SalesPartyMasterPanel;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableAgeing;
    private javax.swing.JTable TableCS;
    private javax.swing.JTable TableCapacityPlanning;
    private javax.swing.JTable TableContacts;
    private javax.swing.JTable TableDiscount;
    private javax.swing.JTable TableFnsdvsInv;
    private javax.swing.JTable TableGIDC_SDF;
    private javax.swing.JTable TableGR;
    private javax.swing.JTable TableInvoiceParameterModi;
    private javax.swing.JTable TableMISAgeing;
    private javax.swing.JTable TableMISAgeing1;
    private javax.swing.JTable TableMachine;
    private javax.swing.JTable TablePAN;
    private javax.swing.JTable TablePR;
    private javax.swing.JTable TablePartyStatus;
    private javax.swing.JTable TablePieceMFGRejection;
    private javax.swing.JTable TablePieceStage;
    private javax.swing.JTable TablePieceStage1;
    private javax.swing.JTable TableProduction;
    private javax.swing.JTable TableSalesExpM;
    private javax.swing.JTable TableSalesExpY;
    private javax.swing.JTable TableSalesM;
    private javax.swing.JTable TableSalesParty;
    private javax.swing.JTable TableSalesY;
    private javax.swing.JTable TableWIPProd_Production;
    private javax.swing.JTable Table_BSR;
    private javax.swing.JTable Table_CANCELLED;
    private javax.swing.JTable Table_DIVERTED;
    private javax.swing.JTable Table_DIV_LIST;
    private javax.swing.JTable Table_Delink;
    private javax.swing.JTable Table_Diversion;
    private javax.swing.JTable Table_EXP_INVOICE;
    private javax.swing.JTable Table_HOLD;
    private javax.swing.JTable Table_INVOICED;
    private javax.swing.JTable Table_OSGSTOCK;
    private javax.swing.JTable Table_Order_Register;
    private javax.swing.JTable Table_PendingList;
    private javax.swing.JTable Table_STOCK;
    private javax.swing.JTable Table_STOCK_DFS;
    private javax.swing.JPanel WIPReViewReportPanel;
    private javax.swing.JPanel WIPSalesPanel;
    private javax.swing.JTable WIP_Piece_Review;
    private javax.swing.JPanel WIP_Production;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnFnsdvsInv;
    private javax.swing.JButton btnGIDC_SDF;
    private javax.swing.JButton btnGR;
    private javax.swing.JButton btnPR;
    private javax.swing.JButton btnProduction;
    private javax.swing.JComboBox btnReviewStatus;
    private javax.swing.JButton btnShowPieceDetail_STOCK;
    private javax.swing.JButton btnShowPieceDetails_WIP;
    private javax.swing.JButton btnShowWIPPiece;
    private javax.swing.JButton btnWIPProd_Production;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkKeyClientInd;
    private javax.swing.JComboBox cmbBSROrderBy;
    private javax.swing.JComboBox cmbBSRStatus;
    private javax.swing.JComboBox cmbCSMonth;
    private javax.swing.JComboBox cmbCSOCmonth;
    private javax.swing.JComboBox cmbCSSPOmonth;
    private javax.swing.JComboBox cmbCSSpillMonth;
    private javax.swing.JComboBox cmbCSStage;
    private javax.swing.JButton cmbCobolErp1;
    private javax.swing.JComboBox cmbDiscount;
    private javax.swing.JComboBox cmbDiversionOrderBy;
    private javax.swing.JComboBox cmbDiversionStatus;
    private javax.swing.JComboBox cmbFnsdvsInvOrderBy;
    private javax.swing.JComboBox cmbGIDCStatus;
    private javax.swing.JComboBox cmbGROrderBy;
    private javax.swing.JComboBox cmbGRStatus;
    private javax.swing.JComboBox cmbInvOrderBy;
    private javax.swing.JComboBox cmbInvStatus;
    private javax.swing.JButton cmbInvoiceParameterModi;
    private javax.swing.JComboBox cmbInvoiceParameterModification;
    private javax.swing.JComboBox cmbMachine;
    private javax.swing.JComboBox cmbMachineType;
    private javax.swing.JComboBox cmbModuleList;
    private javax.swing.JComboBox cmbOrder;
    private javax.swing.JComboBox cmbPLOrderBy;
    private javax.swing.JComboBox cmbPROrderBy;
    private javax.swing.JComboBox cmbPartyTagInd;
    private javax.swing.JComboBox cmbPartyType;
    private javax.swing.JComboBox cmbPieceMFGRejection;
    private javax.swing.JComboBox cmbProductionStage;
    private javax.swing.JComboBox cmbProductionStageDivList;
    private javax.swing.JComboBox cmbProductionStageObsolete;
    private javax.swing.JComboBox cmbProductionStatus;
    private javax.swing.JComboBox cmbSalesParty;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JComboBox cmbUserList;
    private javax.swing.JComboBox cmbWIPProd_ProductionStage;
    private javax.swing.JComboBox cmbWIPProd_WIPStatus;
    private javax.swing.JComboBox cmbcapacityOCmonth;
    private javax.swing.JComboBox cmbcapacityreqmonth;
    private javax.swing.JButton cmbcapacityxls;
    private javax.swing.JComboBox cmbocmonth;
    private javax.swing.JComboBox cmbstage;
    private javax.swing.JButton cmdAgeingExportToExcel;
    private javax.swing.JButton cmdMISAgeingExportToExcel;
    private javax.swing.JButton cmdPANExporttoExcel;
    private javax.swing.JButton cmdShowAgeing;
    private javax.swing.JButton cmdShowContacts;
    private javax.swing.JButton cmdShowDiscont;
    private javax.swing.JButton cmdShowMISAgeing;
    private javax.swing.JButton cmdShowMachine;
    private javax.swing.JButton cmdShowPAN;
    private javax.swing.JButton cmdShowSalesParty;
    private javax.swing.JButton cmdcontactsExporttoExcel;
    private javax.swing.JButton cmdmisagingaExportToExcel;
    private javax.swing.JButton cmdsalesExpmonthExportToExcel;
    private javax.swing.JButton cmdsalesExpyrExporttoExcel;
    private javax.swing.JButton cmdsalesmonthExportToExcel;
    private javax.swing.JButton cmdsalesyrExporttoExcel;
    private javax.swing.JButton cmdshowSalesExpY;
    private javax.swing.JButton cmdshowSalesY;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane31;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane33;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane35;
    private javax.swing.JScrollPane jScrollPane36;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane38;
    private javax.swing.JScrollPane jScrollPane39;
    private javax.swing.JScrollPane jScrollPane40;
    private javax.swing.JScrollPane jScrollPane41;
    private javax.swing.JScrollPane jScrollPane42;
    private javax.swing.JScrollPane jScrollPane43;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane45;
    private javax.swing.JScrollPane jScrollPane46;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.ButtonGroup misaginggrp;
    private javax.swing.JRadioButton rbtnOCMonth;
    private javax.swing.JRadioButton rbtnPieceStage;
    private javax.swing.JRadioButton rbtnReqMonth;
    private javax.swing.JRadioButton rbtnWIPProd_PieceStage;
    private javax.swing.JRadioButton rbtnWIPProd_WIPStatus;
    private javax.swing.JRadioButton rbtnWIPStatus;
    private javax.swing.JRadioButton rbtnWIP_ProdView;
    private javax.swing.JRadioButton rbtnWIP_SalesView;
    private javax.swing.JTextField txtATotal;
    private javax.swing.JTextField txtBaleNo;
    private javax.swing.JTextField txtBsrTotalInvAmt;
    private javax.swing.JTextField txtDiscountTotal;
    private javax.swing.JTextField txtGRTotalAmt;
    private javax.swing.JTextField txtIATotal;
    private javax.swing.JTextField txtMCTotal;
    private javax.swing.JTextField txtMachineNo;
    private javax.swing.JTextField txtMachineTotal;
    private javax.swing.JTextField txtPosition;
    private javax.swing.JTextField txtSalesPartyTotal;
    private javax.swing.JTextField txtTCTotal;
    private javax.swing.JTextField txtTotalAmount_DIV;
    private javax.swing.JTextField txtTotalAmount_DLIST;
    private javax.swing.JTextField txtTotalAmount_Exp_Inv;
    private javax.swing.JTextField txtTotalAmount_GIDC_SDF;
    private javax.swing.JTextField txtTotalAmount_HOLD;
    private javax.swing.JTextField txtTotalAmount_INV;
    private javax.swing.JTextField txtTotalAmount_OSGstock;
    private javax.swing.JTextField txtTotalAmount_order;
    private javax.swing.JTextField txtTotalAmount_production2;
    private javax.swing.JTextField txtTotalAmount_stock;
    private javax.swing.JTextField txtTotalAmount_stock_DFS;
    private javax.swing.JTextField txtTotalBillWeight_OSGstock;
    private javax.swing.JTextField txtTotalBillWeight_bsr;
    private javax.swing.JTextField txtTotalBillWeight_stock;
    private javax.swing.JTextField txtTotalBillWeight_stock_DFS;
    private javax.swing.JTextField txtTotalWeight_CAN;
    private javax.swing.JTextField txtTotalWeight_DIV;
    private javax.swing.JTextField txtTotalWeight_DLIST;
    private javax.swing.JTextField txtTotalWeight_Exp_Inv;
    private javax.swing.JTextField txtTotalWeight_GIDC_SDF;
    private javax.swing.JTextField txtTotalWeight_HOLD;
    private javax.swing.JTextField txtTotalWeight_INV;
    private javax.swing.JTextField txtTotalWeight_OSGstock;
    private javax.swing.JTextField txtTotalWeight_bsr;
    private javax.swing.JTextField txtTotalWeight_order;
    private javax.swing.JTextField txtTotalWeight_production2;
    private javax.swing.JTextField txtTotalWeight_stock;
    private javax.swing.JTextField txtTotalWeight_stock_DFS;
    private javax.swing.JTextField txtWIPProd_TotalAmount_production;
    private javax.swing.JTextField txtWIPProd_TotalWeight_production;
    private javax.swing.JTextField txtageingtotal;
    private javax.swing.JTextField txtamttotal;
    private javax.swing.JTextField txtcontactstotal;
    private javax.swing.JTextField txtcounttotal;
    private javax.swing.JTextField txtdatefrom;
    private javax.swing.JTextField txtdateto;
    private javax.swing.JTextField txtgroupcode;
    private javax.swing.JTextField txtgroupname;
    private javax.swing.JTextField txtgsmfrom;
    private javax.swing.JTextField txtgsmto;
    private javax.swing.JTextField txtlengthfrom;
    private javax.swing.JTextField txtlengthto;
    private javax.swing.JTextField txtless180amttotal;
    private javax.swing.JTextField txtless180counttotal;
    private javax.swing.JTextField txtless180qtytotal;
    private javax.swing.JTextField txtless365amttotal;
    private javax.swing.JTextField txtless365counttotal;
    private javax.swing.JTextField txtless365qtytotal;
    private javax.swing.JTextField txtless45amttotal;
    private javax.swing.JTextField txtless45counttotal;
    private javax.swing.JTextField txtless45qtytotal;
    private javax.swing.JTextField txtless730amttotal;
    private javax.swing.JTextField txtless730counttotal;
    private javax.swing.JTextField txtless730qtytotal;
    private javax.swing.JTextField txtless90amttotal;
    private javax.swing.JTextField txtless90counttotal;
    private javax.swing.JTextField txtless90qtytotal;
    private javax.swing.JTextField txtlessamttotal;
    private javax.swing.JTextField txtlesscounttotal;
    private javax.swing.JTextField txtlessqtytotal;
    private javax.swing.JTextField txtmisageingtotal;
    private javax.swing.JTextField txtmisageingtotal1;
    private javax.swing.JTextField txtmore730amttotal;
    private javax.swing.JTextField txtmore730counttotal;
    private javax.swing.JTextField txtmore730qtytotal;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyind;
    private javax.swing.JTextField txtpartyname;
    private javax.swing.JTextField txtpieceno;
    private javax.swing.JTextField txtproductcode;
    private javax.swing.JTextField txtqtytotal;
    private javax.swing.JTextField txtsalesexptotal;
    private javax.swing.JTextField txtsalesexptotal1;
    private javax.swing.JTextField txtsalestotal;
    private javax.swing.JTextField txtsalestotal1;
    private javax.swing.JTextField txtupnno;
    private javax.swing.JTextField txtwidthfrom;
    private javax.swing.JTextField txtwidthto;
    private javax.swing.JCheckBox withBlankPiece;
    private javax.swing.JRadioButton withobsolete;
    private javax.swing.JRadioButton withoutobsolete;
    // End of variables declaration//GEN-END:variables
    private JTableHeader header;
    private Object selectedColumn = null;

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel[17];
            DataModel[1] = new EITLTableModel();
            DataModel[2] = new EITLTableModel();
            DataModel[3] = new EITLTableModel();
            DataModel[4] = new EITLTableModel();
            DataModel[5] = new EITLTableModel();
            DataModel[6] = new EITLTableModel();
            DataModel[7] = new EITLTableModel();
            DataModel[8] = new EITLTableModel();
            DataModel[9] = new EITLTableModel();
            DataModel[10] = new EITLTableModel();
            DataModel[11] = new EITLTableModel();
            DataModel[12] = new EITLTableModel();
            DataModel[13] = new EITLTableModel();
            DataModel[14] = new EITLTableModel();
            DataModel[15] = new EITLTableModel();
            DataModel[16] = new EITLTableModel();

            Table.removeAll();
            Table.setModel(DataModel[1]);
            Table.setAutoResizeMode(0);

            // Table.setAutoCreateRowSorter(true);
            //  Table.setColumnSelectionAllowed(true);
//           Table.setRowSorter(new TableRowSorter<TableModel>(DataModel[1]) {
//
//                        @Override
//                        public void toggleSortOrder(int column) {
//                        }
//            });
//            header = Table.getTableHeader();
//            header.getActionMap().put("toggleSortOrder2", new AbstractAction() {
//
//                    private static final long serialVersionUID = 1L;
//
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//                        e.setSource(Table);
//                        Table.getActionMap().get("focusHeader").actionPerformed(e);
//                        if (selectedColumn != null) {
//                            int i = header.getColumnModel().getColumnIndex(selectedColumn);
//                            SortOrder order = SortOrder.ASCENDING;
//                            List<RowSorter.SortKey> keys = new ArrayList<SortKey>(Table.getRowSorter().getSortKeys());
//                            if (!keys.isEmpty()) {
//                                SortKey sortKey = keys.get(0);
//                                if (sortKey.getColumn() == i && sortKey.getSortOrder() == SortOrder.ASCENDING) {
//                                    order = SortOrder.DESCENDING;
//                                }
//                            }
//                            Table.getRowSorter().setSortKeys(Arrays.asList(new SortKey(i, order)));
//                        }
//                header.repaint();
//                }
//            });
//            InputMap im = header.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
//            im.put(KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0), "toggleSortOrder2");
//            header.addMouseListener(new MouseAdapter() {
//
//                @Override
//                public void mouseClicked(MouseEvent e) {
//                    JTableHeader h = (JTableHeader) e.getSource();
//                    int i = h.columnAtPoint(e.getPoint());
//                    Object o = h.getColumnModel().getColumn(i).getHeaderValue();
//                    if (i < 0 || o == selectedColumn) {
//                        selectedColumn = null;
//                        return;
//                    }
//                    selectedColumn = o;
//                    h.requestFocusInWindow();
//                }
//            });
//            final TableCellRenderer hr = Table.getTableHeader().getDefaultRenderer();
//            header.setDefaultRenderer(new TableCellRenderer() {
//
//                @Override
//                public Component getTableCellRendererComponent(JTable t, Object v,
//                        boolean isS, boolean hasF, int row, int col) {
//                    return (v == selectedColumn) ? hr.getTableCellRendererComponent(
//                            t, v, true, true, row, col) : hr.getTableCellRendererComponent(
//                            t, v, false, false, row, col);
//                }
//            });
//            Table_weaving.removeAll();
//            Table_weaving.setModel(DataModel[2]);
//            Table_weaving.setAutoResizeMode(0);
//            Table_weaving.setAutoCreateRowSorter(true);
//            Table_warping.removeAll();
//            Table_warping.setModel(DataModel[3]);
//            Table_warping.setAutoResizeMode(0);
//            Table_warping.setAutoCreateRowSorter(true);
//            Table_mending.removeAll();
//            Table_mending.setModel(DataModel[4]);
//            Table_mending.setAutoResizeMode(0);
//            Table_mending.setAutoCreateRowSorter(true);
//
//            Table_NEEDLING.removeAll();
//            Table_NEEDLING.setModel(DataModel[5]);
//            Table_NEEDLING.setAutoResizeMode(0);
//            Table_NEEDLING.setAutoCreateRowSorter(true);
//            Table_NEEDLING.setEnabled(false);
//
//            Table_FINISHING.removeAll();
//            Table_FINISHING.setModel(DataModel[6]);
//            Table_FINISHING.setAutoResizeMode(0);
//            Table_FINISHING.setAutoCreateRowSorter(true);
//
//            Table_WIP.removeAll();
//            Table_WIP.setModel(DataModel[7]);
//            Table_WIP.setAutoResizeMode(0);
//            Table_WIP.setAutoCreateRowSorter(true);
            Table_EXP_INVOICE.removeAll();
            Table_EXP_INVOICE.setModel(DataModel[15]);
            Table_EXP_INVOICE.setAutoResizeMode(0);
            Table_EXP_INVOICE.setAutoCreateRowSorter(true);

            Table_STOCK.removeAll();
            Table_STOCK.setModel(DataModel[8]);
            Table_STOCK.setAutoResizeMode(0);
            Table_STOCK.setAutoCreateRowSorter(true);

            Table_BSR.removeAll();
            Table_BSR.setModel(DataModel[9]);
            Table_BSR.setAutoResizeMode(0);
            Table_BSR.setAutoCreateRowSorter(true);

            Table_INVOICED.removeAll();
            Table_INVOICED.setModel(DataModel[10]);
            Table_INVOICED.setAutoResizeMode(0);
            Table_INVOICED.setAutoCreateRowSorter(true);

            Table_DIVERTED.removeAll();
            Table_DIVERTED.setModel(DataModel[11]);
            Table_DIVERTED.setAutoResizeMode(0);
            Table_DIVERTED.setAutoCreateRowSorter(true);

            Table_DIV_LIST.removeAll();
            Table_DIV_LIST.setModel(DataModel[12]);
            Table_DIV_LIST.setAutoResizeMode(0);
            Table_DIV_LIST.setAutoCreateRowSorter(true);

            Table_HOLD.removeAll();
            Table_HOLD.setModel(DataModel[13]);
            Table_HOLD.setAutoResizeMode(0);
            Table_HOLD.setAutoCreateRowSorter(true);

            Table_CANCELLED.removeAll();
            Table_CANCELLED.setModel(DataModel[14]);
            Table_CANCELLED.setAutoResizeMode(0);
            Table_CANCELLED.setAutoCreateRowSorter(true);

            TablePieceStage.removeAll();
            TablePieceStage.setModel(DataModel[14]);
            TablePieceStage.setAutoResizeMode(0);
            TablePieceStage.setAutoCreateRowSorter(true);

            Table_OSGSTOCK.removeAll();
            Table_OSGSTOCK.setModel(DataModel[16]);
            Table_OSGSTOCK.setAutoResizeMode(0);
            Table_OSGSTOCK.setAutoCreateRowSorter(true);

            for (int i = 1; i <= 16; i++) {
                DataModel[i].addColumn("SR NO"); //0 - Read Only
                DataModel[i].addColumn("PIECE NO"); //0 - Read Only
                DataModel[i].addColumn("ORDER DATE");
                DataModel[i].addColumn("DOC NO");
                DataModel[i].addColumn("MACHINE NO");
                DataModel[i].addColumn("POSITION NO");
                DataModel[i].addColumn("POSITION DESC");
                DataModel[i].addColumn("PARTY CODE");
                DataModel[i].addColumn("PARTY");
                DataModel[i].addColumn("PRODUCT CODE");
                DataModel[i].addColumn("PRODUCT DESC"); //
                DataModel[i].addColumn("GROUP"); //
                DataModel[i].addColumn("STYLE"); //
                DataModel[i].addColumn("LENGTH"); //
                DataModel[i].addColumn("WIDTH"); //
                DataModel[i].addColumn("GSM"); //
                DataModel[i].addColumn("THORTICAL WEIGHT"); //
                DataModel[i].addColumn("SQ MT"); //
                DataModel[i].addColumn("SYN(%)"); //
                DataModel[i].addColumn("REQ MONTH"); //
                DataModel[i].addColumn("REGION"); //
                DataModel[i].addColumn("INCHARGE"); //
                DataModel[i].addColumn("REFERENCE"); //
                DataModel[i].addColumn("REF DATE"); //
                DataModel[i].addColumn("PO NO"); //
                DataModel[i].addColumn("PO DATE"); //
                DataModel[i].addColumn("ORDER REMARK"); //
                DataModel[i].addColumn("PIECE REMARK"); //
                DataModel[i].addColumn("Rate"); //
                DataModel[i].addColumn("BAS AMT"); //
                DataModel[i].addColumn("CHEM TRT CHG"); //
                DataModel[i].addColumn("SPIRAL CHG"); //
                DataModel[i].addColumn("PIN CHG"); //
                DataModel[i].addColumn("SEAM CHG"); //
                DataModel[i].addColumn("INS IND"); //
                DataModel[i].addColumn("INS AMT"); //
                DataModel[i].addColumn("EXCISE"); //
                DataModel[i].addColumn("DISC PER"); //
                DataModel[i].addColumn("DISC AMT"); //
                DataModel[i].addColumn("DISC BAS AMT"); //
                DataModel[i].addColumn("AMT"); //
                DataModel[i].addColumn("PIECE STAGE"); //
                DataModel[i].addColumn("WARP DATE"); //
                DataModel[i].addColumn("WVG DATE"); //
                DataModel[i].addColumn("MND DATE"); //
                DataModel[i].addColumn("NDL DATE"); //
                DataModel[i].addColumn("FNSG DATE"); //
                DataModel[i].addColumn("RCV DATE"); //
                DataModel[i].addColumn("ACTUAL WEIGHT"); //
                DataModel[i].addColumn("ACTUAL LENGTH"); //
                DataModel[i].addColumn("ACTUAL WIDTH"); //
                DataModel[i].addColumn("BALE NO"); //
                DataModel[i].addColumn("PACKED DATE"); //
                DataModel[i].addColumn("REJECTED"); //
                DataModel[i].addColumn("REJECTED REMARK"); //
                DataModel[i].addColumn("DIVERSION"); //
                DataModel[i].addColumn("DIVERSION REGION"); //
                DataModel[i].addColumn("EXP DISPATCH"); //
                DataModel[i].addColumn("PRIORITY HOLD CAN"); //
                DataModel[i].addColumn("INVOICE NO"); //
                DataModel[i].addColumn("INVOICE DATE"); //
                DataModel[i].addColumn("LR NO"); //
                DataModel[i].addColumn("LR DATE"); //
                DataModel[i].addColumn("INVOICE PARTY"); //
                DataModel[i].addColumn("PARTY CODE ORIGINAL"); //\
                DataModel[i].addColumn("PIECE NO ORIGINAL"); //
                DataModel[i].addColumn("BILL LENGTH"); //
                DataModel[i].addColumn("BILL WIDTH"); //
                DataModel[i].addColumn("BILL WEIGHT"); //
                DataModel[i].addColumn("BILL SQMTR"); //
                DataModel[i].addColumn("BILL GSM"); //
                DataModel[i].addColumn("BILL PRODUCT CODE"); //
                DataModel[i].addColumn("UPN");
                DataModel[i].addColumn("PKG DP NO"); //
                DataModel[i].addColumn("PKG DP DATE"); //

                DataModel[i].SetVariable(0, "SR_NO");
                DataModel[i].SetVariable(1, "PIECE_NO");
                DataModel[i].SetVariable(2, "ORDER_DATE");
                DataModel[i].SetVariable(3, "DOC_NO");
                DataModel[i].SetVariable(4, "MACHINE_NO");
                DataModel[i].SetVariable(5, "POSITION_NO");
                DataModel[i].SetVariable(6, "POSITION_DESC");
                DataModel[i].SetVariable(7, "PARTY_CODE");
                DataModel[i].SetVariable(8, "PARTY");
                DataModel[i].SetVariable(9, "PRODUCT_CODE");
                DataModel[i].SetVariable(10, "PRODUCT_DESC"); //
                DataModel[i].SetVariable(11, "GROUP"); //
                DataModel[i].SetVariable(12, "STYLE"); //
                DataModel[i].SetVariable(13, "LENGTH"); //
                DataModel[i].SetVariable(14, "WIDTH"); //
                DataModel[i].SetVariable(15, "GSM"); //
                DataModel[i].SetVariable(16, "THORTICAL_WEIGHT"); //
                DataModel[i].SetVariable(17, "SQ_MT"); //
                DataModel[i].SetVariable(18, "SYN"); //
                DataModel[i].SetVariable(19, "REQ_MONTH"); //
                DataModel[i].SetVariable(20, "REGION"); //
                DataModel[i].SetVariable(21, "INCHARGE"); //
                DataModel[i].SetVariable(22, "REFERENCE"); //
                DataModel[i].SetVariable(23, "REF_DATE"); //
                DataModel[i].SetVariable(24, "PO_NO"); //
                DataModel[i].SetVariable(25, "PO_DATE"); //
                DataModel[i].SetVariable(26, "ORDER_REMARK"); //
                DataModel[i].SetVariable(27, "PIECE_REMARK"); //
                DataModel[i].SetVariable(28, "Rate"); //
                DataModel[i].SetVariable(29, "BAS AMT"); //
                DataModel[i].SetVariable(30, "CHEM TRT CHG"); //
                DataModel[i].SetVariable(31, "SPIRAL CHG"); //
                DataModel[i].SetVariable(32, "PIN_CHG"); //
                DataModel[i].SetVariable(33, "SEAM_CHG"); //
                DataModel[i].SetVariable(34, "INS_IND"); //
                DataModel[i].SetVariable(35, "INS_AMT"); //
                DataModel[i].SetVariable(36, "EXCISE");//
                DataModel[i].SetVariable(37, "DISC_PER");//
                DataModel[i].SetVariable(38, "DISC_AMT");//
                DataModel[i].SetVariable(39, "DISC_BAS_AMT");//
                DataModel[i].SetVariable(40, "AMT");//
                DataModel[i].SetVariable(41, "PIECE_STAGE");//
                DataModel[i].SetVariable(42, "WARP_DATE");
                DataModel[i].SetVariable(43, "WVG_DATE");
                DataModel[i].SetVariable(44, "MND_DATE");
                DataModel[i].SetVariable(45, "NDL_DATE");
                DataModel[i].SetVariable(46, "FNSG_DATE");
                DataModel[i].SetVariable(47, "RCV_DATE");
                DataModel[i].SetVariable(48, "ACTUAL_WEIGHT");
                DataModel[i].SetVariable(49, "ACTUAL_LENGTH");
                DataModel[i].SetVariable(50, "ACTUAL_WIDTH");
                DataModel[i].SetVariable(51, "BALE_NO");
                DataModel[i].SetVariable(52, "PACKED_DATE");
                DataModel[i].SetVariable(53, "REJECTED");
                DataModel[i].SetVariable(54, "REJECTED_REMARK");
                DataModel[i].SetVariable(55, "DIVERSION");
                DataModel[i].SetVariable(56, "DIVERSION_REGION");
                DataModel[i].SetVariable(57, "EXP_DISPATCH");
                DataModel[i].SetVariable(58, "PRIORITY_HOLD_CAN");
                DataModel[i].SetVariable(59, "INVOICE_NO");
                DataModel[i].SetVariable(60, "INVOICE_DATE");
                DataModel[i].SetVariable(61, "LR_NO");
                DataModel[i].SetVariable(62, "LR_DATE");
                DataModel[i].SetVariable(63, "INVOICE_PARTY");
                DataModel[i].SetVariable(64, "PARTY_CODE_ORIGINAL");
                DataModel[i].SetVariable(65, "PIECE_NO_ORIGINAL");
                DataModel[i].SetVariable(66, "PR_BILL_LENGTH");
                DataModel[i].SetVariable(67, "PR_BILL_WIDTH");
                DataModel[i].SetVariable(68, "PR_BILL_WEIGHT");
                DataModel[i].SetVariable(69, "PR_BILL_SQMTR");
                DataModel[i].SetVariable(70, "PR_BILL_GSM");
                DataModel[i].SetVariable(71, "PR_BILL_PRODUCT_CODE");
                DataModel[i].SetVariable(72, "PR_UPN");
                DataModel[i].SetVariable(73, "PF_PKG_DP_NO");
                DataModel[i].SetVariable(74, "PR_PKG_DP_DATE");

                for (int j = 0; j <= 72; j++) {
                    DataModel[i].SetReadOnly(j);
                }

            }

            Table.getColumnModel().getColumn(0).setMinWidth(20);
            Table.getColumnModel().getColumn(1).setMinWidth(90);
            Table.getColumnModel().getColumn(2).setMinWidth(70);
            Table.getColumnModel().getColumn(3).setMinWidth(80);
            Table.getColumnModel().getColumn(4).setMinWidth(90);
            Table.getColumnModel().getColumn(5).setMinWidth(100);
            Table.getColumnModel().getColumn(6).setMinWidth(90);
            Table.getColumnModel().getColumn(7).setMinWidth(80);
            Table.getColumnModel().getColumn(8).setMinWidth(70);
            Table.getColumnModel().getColumn(9).setMinWidth(270);
            Table.getColumnModel().getColumn(10).setMinWidth(50);
            Table.getColumnModel().getColumn(11).setMinWidth(100);
            Table.getColumnModel().getColumn(12).setMinWidth(80);
            Table.getColumnModel().getColumn(13).setMinWidth(80);
            Table.getColumnModel().getColumn(14).setMinWidth(80);
            Table.getColumnModel().getColumn(15).setMinWidth(100);
            Table.getColumnModel().getColumn(16).setMinWidth(60);
            Table.getColumnModel().getColumn(17).setMinWidth(100);
            Table.getColumnModel().getColumn(18).setMinWidth(100);
            Table.getColumnModel().getColumn(19).setMinWidth(100);
            Table.getColumnModel().getColumn(20).setMinWidth(100);
            Table.getColumnModel().getColumn(21).setMinWidth(100);
            Table.getColumnModel().getColumn(22).setMinWidth(100);
            Table.getColumnModel().getColumn(23).setMinWidth(60);
            Table.getColumnModel().getColumn(24).setMinWidth(100);
            Table.getColumnModel().getColumn(25).setMinWidth(100);
            Table.getColumnModel().getColumn(26).setMinWidth(100);
            Table.getColumnModel().getColumn(27).setMinWidth(100);
            Table.getColumnModel().getColumn(28).setMinWidth(100);
            Table.getColumnModel().getColumn(29).setMinWidth(100);
            Table.getColumnModel().getColumn(30).setMinWidth(100);
            Table.getColumnModel().getColumn(31).setMinWidth(100);
            Table.getColumnModel().getColumn(32).setMinWidth(100);
            Table.getColumnModel().getColumn(33).setMinWidth(100);
            Table.getColumnModel().getColumn(34).setMinWidth(100);
            Table.getColumnModel().getColumn(35).setMinWidth(100);
            Table.getColumnModel().getColumn(36).setMinWidth(100);
            Table.getColumnModel().getColumn(37).setMinWidth(100);
            Table.getColumnModel().getColumn(38).setMinWidth(100);
            Table.getColumnModel().getColumn(39).setMinWidth(100);
            Table.getColumnModel().getColumn(40).setMinWidth(100);
            Table.getColumnModel().getColumn(41).setMinWidth(100);
            Table.getColumnModel().getColumn(42).setMinWidth(100);
            Table.getColumnModel().getColumn(43).setMinWidth(100);
            Table.getColumnModel().getColumn(44).setMinWidth(100);
            Table.getColumnModel().getColumn(45).setMinWidth(100);
            Table.getColumnModel().getColumn(46).setMinWidth(100);

            //RCV Date - Display Non
            Table.getColumnModel().getColumn(47).setMinWidth(0);
            Table.getColumnModel().getColumn(47).setMaxWidth(0);

            Table.getColumnModel().getColumn(48).setMinWidth(100);
            Table.getColumnModel().getColumn(49).setMinWidth(100);
            Table.getColumnModel().getColumn(50).setMinWidth(100);
            Table.getColumnModel().getColumn(51).setMinWidth(100);
            Table.getColumnModel().getColumn(52).setMinWidth(100);
            Table.getColumnModel().getColumn(53).setMinWidth(100);
            Table.getColumnModel().getColumn(54).setMinWidth(100);
            Table.getColumnModel().getColumn(55).setMinWidth(100);
            Table.getColumnModel().getColumn(56).setMinWidth(100);
            Table.getColumnModel().getColumn(57).setMinWidth(100);
            Table.getColumnModel().getColumn(58).setMinWidth(100);
            Table.getColumnModel().getColumn(59).setMinWidth(100);
            Table.getColumnModel().getColumn(60).setMinWidth(100);
            Table.getColumnModel().getColumn(61).setMinWidth(100);
            Table.getColumnModel().getColumn(62).setMinWidth(100);
            Table.getColumnModel().getColumn(63).setMinWidth(100);
            Table.getColumnModel().getColumn(64).setMinWidth(100);

            //RCV Date - Display Non
//            Table_weaving.getColumnModel().getColumn(47).setMinWidth(0);
//            Table_weaving.getColumnModel().getColumn(47).setMaxWidth(0);
            Table_BSR.getColumnModel().getColumn(47).setMinWidth(0);
            Table_BSR.getColumnModel().getColumn(47).setMaxWidth(0);

            Table_CANCELLED.getColumnModel().getColumn(47).setMinWidth(0);
            Table_CANCELLED.getColumnModel().getColumn(47).setMaxWidth(0);

            TablePieceStage.getColumnModel().getColumn(47).setMinWidth(0);
            TablePieceStage.getColumnModel().getColumn(47).setMaxWidth(0);

            Table_DIVERTED.getColumnModel().getColumn(47).setMinWidth(0);
            Table_DIVERTED.getColumnModel().getColumn(47).setMaxWidth(0);

            Table_DIV_LIST.getColumnModel().getColumn(47).setMinWidth(0);
            Table_DIV_LIST.getColumnModel().getColumn(47).setMaxWidth(0);

//            Table_FINISHING.getColumnModel().getColumn(47).setMinWidth(0);
//            Table_FINISHING.getColumnModel().getColumn(47).setMaxWidth(0);
            Table_HOLD.getColumnModel().getColumn(47).setMinWidth(0);
            Table_HOLD.getColumnModel().getColumn(47).setMaxWidth(0);

            Table_INVOICED.getColumnModel().getColumn(47).setMinWidth(0);
            Table_INVOICED.getColumnModel().getColumn(47).setMaxWidth(0);

//            Table_NEEDLING.getColumnModel().getColumn(47).setMinWidth(0);
//            Table_NEEDLING.getColumnModel().getColumn(47).setMaxWidth(0);
            Table_STOCK.getColumnModel().getColumn(47).setMinWidth(0);
            Table_STOCK.getColumnModel().getColumn(47).setMaxWidth(0);

//            Table_WIP.getColumnModel().getColumn(47).setMinWidth(0);
//            Table_WIP.getColumnModel().getColumn(47).setMaxWidth(0);
            Table_EXP_INVOICE.getColumnModel().getColumn(47).setMinWidth(0);
            Table_EXP_INVOICE.getColumnModel().getColumn(47).setMaxWidth(0);

//            Table_mending.getColumnModel().getColumn(47).setMinWidth(0);
//            Table_mending.getColumnModel().getColumn(47).setMaxWidth(0);
            Table_OSGSTOCK.getColumnModel().getColumn(47).setMinWidth(0);
            Table_OSGSTOCK.getColumnModel().getColumn(47).setMaxWidth(0);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void getAllData() {

        clsPieceMaster pieceMaster = new clsPieceMaster();
        hmPieceList = pieceMaster.getAdvSearch(txtpartycode.getText(), txtlengthfrom.getText(), txtlengthto.getText(), txtwidthfrom.getText(), txtwidthto.getText(), txtgsmfrom.getText(), txtgsmto.getText(), txtpieceno.getText(), txtproductcode.getText(), REGION.getSelectedItem().toString(), S_ENGINEER.getSelectedItem().toString(), txtdatefrom.getText(), txtdateto.getText(), txtMachineNo.getText(), txtPosition.getText(), txtupnno.getText(), "ORDERED", ORDER_BY);
        setData_order();
    }

    public void setData_order() {

        int size = DataModel[1].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[1].removeRow(j);
        }
        if (hmPieceList.size() == 0) {
            JOptionPane.showMessageDialog(null, "No Record Found!");
        }
        int i = 0;

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            i++;
            Object[] rowData = new Object[73];
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            // rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Error on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            rowData[58] = (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_order.setText(df.format(total_weight));
            txtTotalAmount_order.setText(df.format(total_amount));

            DataModel[1].addRow(rowData);
        }

    }

    public void setData_weaving() {
        int size = DataModel[2].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[2].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            // rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_WVG.setText(df.format(total_weight));
//            txtTotalAmount_WVG.setText(df.format(total_amount));

            DataModel[2].addRow(rowData);
        }

    }

    public void setData_WARPING() {
        int size = DataModel[3].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[3].removeRow(j);
        }

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[72];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[1] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[2] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[3] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            // FeltMachineMasterServiceImpl mm_service = new FeltMachineMasterServiceImpl();
            //  FeltMachineMasterDetail mmDetail;
            //  mmDetail = mm_service.getDetailByMM_NOandMM_POS(piece.getPrMachineNo(), piece.getPrPositionNo());
            rowData[5] = "";

            try {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT MM_MACHINE_POSITION_DESC from PRODUCTION.FELT_MACHINE_MASTER_DETAIL where MM_MACHINE_NO='" + (String) piece.getAttribute("PR_MACHINE_NO").getObj() + "' and MM_MACHINE_POSITION = '" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();

                rowData[5] = rsTmp.getString("MM_MACHINE_POSITION_DESC");
            } catch (Exception ew) {
                //ew.printStackTrace();
                System.out.println("Error on getting from Machine Master");
            }

            rowData[6] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[7] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[8] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[9] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[10] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[11] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[12] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[13] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[15] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[16] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[18] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[19] = (String) piece.getAttribute("PR_REGION").getObj();
            rowData[20] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            rowData[21] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[22] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[25] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[26] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[27] = inv_calc.getFicRate();
                rowData[28] = inv_calc.getFicBasAmount();
                rowData[29] = inv_calc.getFicChemTrtChg();
                rowData[30] = inv_calc.getFicSpiralChg();
                rowData[31] = inv_calc.getFicPinChg();
                rowData[32] = inv_calc.getFicSeamChg();
                rowData[33] = inv_calc.getFicInsInd();
                rowData[34] = inv_calc.getFicInsAmt();
                rowData[35] = inv_calc.getFicExcise();
                rowData[36] = inv_calc.getFicDiscPer();
                rowData[37] = inv_calc.getFicDiscAmt();
                rowData[38] = inv_calc.getFicDiscBasamt();
                rowData[39] = inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[40] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();
            DataModel[3].addRow(rowData);
        }

    }

    public void setData_MENDING() {
        int size = DataModel[4].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[4].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_MNG.setText(df.format(total_weight));
//            txtTotalAmount_MNG.setText(df.format(total_amount));

            DataModel[4].addRow(rowData);
        }

    }

    public void setData_NEEDLING() {
        int size = DataModel[5].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[5].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_NDL.setText(df.format(total_weight));
//            txtTotalAmount_NDL.setText(df.format(total_amount));

            DataModel[5].addRow(rowData);
        }

    }

    public void setData_FINISHING() {
        int size = DataModel[6].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[6].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        // Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            // rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_FNG.setText(df.format(total_weight));
//            txtTotalAmount_FNG.setText(df.format(total_amount));

            DataModel[6].addRow(rowData);
        }
    }

    public void setData_WIP() {
        int size = DataModel[7].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[7].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();

            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();

            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_production.setText(df.format(total_weight));
//            txtTotalAmount_production.setText(df.format(total_amount));

            DataModel[7].addRow(rowData);
        }
    }

    public void setData_STOCK() {
        int size = DataModel[8].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[8].removeRow(j);
        }

        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[75];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            // In stock weight calculate by using ACTUAL WEIGHT
            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_ACTUAL_WEIGHT").getObj() + "");
            total_bill_weight = total_bill_weight + Double.parseDouble(piece.getAttribute("PR_BILL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj()),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj()),
                        //                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj()),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_BILL_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_SQMTR").getObj()),
                        //                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());
                        EITLERPGLOBAL.getCurrentDateDB());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = Math.round(total_amount + inv_calc.getFicInvAmt());

            } catch (Exception e) {
                System.out.println("Error on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_PKG_DP_NO").getObj();
            rowData[73] = (String) piece.getAttribute("PR_PKG_DP_DATE").getObj();
            //rowData[65] =   (String) piece.getAttribute("PR_WH_CODE").getObj();

//                piece.setAttribute("PR_WH_CODE", resultSet.getString("PR_WH_CODE"));
//                piece.setAttribute("PR_INWARD_NO", resultSet.getString("PR_INWARD_NO"));
//                piece.setAttribute("PR_RACK_NO", resultSet.getString("PR_RACK_NO"));
//                piece.setAttribute("PR_PIECE_ID", resultSet.getString("PR_PIECE_ID"));
//                piece.setAttribute("PR_LOCATION", resultSet.getString("PR_LOCATION"));
//                piece.setAttribute("PR_HOLD_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("PR_HOLD_DATE")));
//                piece.setAttribute("PR_HOLD_REASON", resultSet.getString("PR_HOLD_REASON"));
//                piece.setAttribute("PR_RELEASE_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("PR_RELEASE_DATE")));
//                piece.setAttribute("PR_PIECE_STAGE", resultSet.getString("PR_PIECE_STAGE"));
//                piece.setAttribute("CREATED_DATE", resultSet.getString("CREATED_DATE"));
//                piece.setAttribute("CREATED_BY", resultSet.getString("CREATED_BY"));
//                piece.setAttribute("MODIFIED_DATE", resultSet.getString("MODIFIED_DATE"));
//                piece.setAttribute("MODIFIED_BY", resultSet.getString("MODIFIED_BY"));
//                piece.setAttribute("HIERARCHY_ID", resultSet.getString("HIERARCHY_ID"));
//                piece.setAttribute("APPROVER_BY", resultSet.getString("APPROVER_BY"));
//                piece.setAttribute("APPROVER_DATE", resultSet.getString("APPROVER_DATE"));
//                piece.setAttribute("APPROVER_REMARK", resultSet.getString("APPROVER_REMARK"));
//            DataModel[i].SetVariable(41, "WARP_DATE");
//                DataModel[i].SetVariable(42, "WVG_DATE");
//                DataModel[i].SetVariable(43, "MND_DATE");
//                DataModel[i].SetVariable(44, "NDL_DATE");
//                DataModel[i].SetVariable(45, "FNSG_DATE");
//                DataModel[i].SetVariable(46, "RCV_DATE");
//                DataModel[i].SetVariable(47, "ACTUAL_WEIGHT");
//                DataModel[i].SetVariable(48, "ACTUAL_LENGTH");
//                DataModel[i].SetVariable(49, "ACTUAL_WIDTH");
//                DataModel[i].SetVariable(50, "BALE_NO");
//                DataModel[i].SetVariable(51, "PACKED_DATE");
//                DataModel[i].SetVariable(52, "REJECTED");
//                DataModel[i].SetVariable(53, "REJECTED_REMARK");
//                DataModel[i].SetVariable(54, "DIVERSION");
//                DataModel[i].SetVariable(55, "DIVERSION_REGION");
//                DataModel[i].SetVariable(56, "EXP_DISPATCH");
//                DataModel[i].SetVariable(57, "PRIORITY_HOLD_CAN");
//                DataModel[i].SetVariable(58, "INVOICE_NO");
//                DataModel[i].SetVariable(59, "INVOICE_DATE");
//                DataModel[i].SetVariable(60, "LR_NO");
//                DataModel[i].SetVariable(61, "LR_DATE");
//                DataModel[i].SetVariable(61, "INVOICE_PARTY");
//                DataModel[i].SetVariable(63, "PARTY_CODE_ORIGINAL");
//                DataModel[i].SetVariable(64, "PIECE_NO_ORIGINAL");
            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_stock.setText(df.format(total_weight));
            txtTotalBillWeight_stock.setText(df.format(total_bill_weight));
            txtTotalAmount_stock.setText(df.format(total_amount));

//            txtTotalWeight_stock.setText(EITLERPGLOBAL.round(total_weight,1)+"");
//            txtTotalAmount_stock.setText(EITLERPGLOBAL.round(total_amount,1)+"");
            DataModel[8].addRow(rowData);
        }

    }

    public void setData_BSR() {
        int size = DataModel[9].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[9].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[72];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_BSR.setText(df.format(total_weight));
//            txtTotalAmount_BSR.setText(df.format(total_amount));

            DataModel[9].addRow(rowData);
        }

    }

    public void setData_INVOICED() {
        int size = DataModel[10].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[10].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[72];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_INV.setText(df.format(total_weight));
            txtTotalAmount_INV.setText(df.format(total_amount));

            DataModel[10].addRow(rowData);
        }

    }

    public void setData_HOLD() {
        int size = DataModel[13].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[13].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            // rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_HOLD.setText(df.format(total_weight));
            txtTotalAmount_HOLD.setText(df.format(total_amount));

            DataModel[13].addRow(rowData);
        }

    }

    public void setData_CANCELED() {
        int size = DataModel[14].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[14].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;
        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_CAN.setText(df.format(total_weight));
//            txtTotalAmount_CAN.setText(df.format(total_amount));

            DataModel[14].addRow(rowData);
        }

    }

    public void setData_PIECE_STAGE() {
        int size = DataModel[14].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[14].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;
        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[72];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_CAN.setText(df.format(total_weight));
//            txtTotalAmount_CAN.setText(df.format(total_amount));

            DataModel[14].addRow(rowData);
        }

    }

    public void setData_DIVERTED() {
        int size = DataModel[11].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[11].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[72];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();
            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_DIV.setText(df.format(total_weight));
            txtTotalAmount_DIV.setText(df.format(total_amount));

            DataModel[11].addRow(rowData);
        }

    }

    public void setData_DIV_LIST() {
        int size = DataModel[12].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[12].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[72];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");
                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_DLIST.setText(df.format(total_weight));
            txtTotalAmount_DLIST.setText(df.format(total_amount));

            DataModel[12].addRow(rowData);
        }

    }

    private void processSalesTarget() {
        try {
            Connection conn = data.getConn();
            Statement stmt = conn.createStatement();

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET T, ( SELECT PARTY_CODE,QNO,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-04-01' AND INVOICE_DATE <='2016-06-30'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ1,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-07-01' AND INVOICE_DATE <='2016-09-30'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ2,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-10-01' AND INVOICE_DATE <='2016-12-31'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ3,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2017-01-01' AND INVOICE_DATE <='2017-03-31'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ4,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-04-01' AND INVOICE_DATE <='2017-03-31'  THEN TOTAL_NET_AMOUNT END,0))  AS T_SALES  FROM (SELECT PARTY_CODE, CASE WHEN QUALITY_NO IN ( 1551000 , 2251000 , 2590000 , 2590100 ,2690000, 2690100, 7190110.7190310,7190410,7190510, 7290000 ) THEN QUALITY_NO  WHEN QUALITY_NO IN ( 6190000, 6290000,6390000 ) THEN 'ACNE'  WHEN QUALITY_NO NOT IN ( 1551000 , 2251000 , 2590000 , 2590100 ,2690000, 2690100, 6190000, 6290000,6390000,7190110 , 7190310,7190410,7190510, 7290000 )  THEN  'OTHER'   END AS QNO,TOTAL_NET_AMOUNT,INVOICE_DATE  FROM PRODUCTION.FELT_INVOICE_DATA   WHERE INVOICE_DATE >= '2016-04-01' AND INVOICE_DATE <='2017-03-31') AS Q GROUP BY PARTY_CODE,QNO) AS I SET TOTAL_SALES = T_SALES,SALES_QTR1= SQ1,SALES_QTR2= SQ2,SALES_QTR3= SQ3,SALES_QTR4= SQ4 WHERE I.PARTY_CODE = T.PARTY_CODE AND I.QNO  = T.PRODUCT_CODE");

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET T, ( SELECT PARTY_CODE,QNO,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2015-04-01' AND INVOICE_DATE <='2016-03-31'  THEN TOTAL_NET_AMOUNT END,0))  AS T_SALES  FROM (SELECT PARTY_CODE, CASE WHEN QUALITY_NO IN ( 1551000 , 2251000 , 2590000 , 2590100 ,2690000, 2690100, 7190110.7190310,7190410,7190510, 7290000 )THEN QUALITY_NO  WHEN QUALITY_NO IN ( 6190000, 6290000,6390000 )THEN 'ACNE'  WHEN QUALITY_NO NOT IN ( 1551000 , 2251000 , 2590000 , 2590100 ,2690000, 2690100, 6190000, 6290000,6390000,7190110 , 7190310,7190410,7190510, 7290000 )THEN 'OTHER' END AS QNO,TOTAL_NET_AMOUNT,INVOICE_DATE  FROM PRODUCTION.FELT_INVOICE_DATA   WHERE INVOICE_DATE >= '2015-04-01' AND INVOICE_DATE <='2016-03-31' LIMIT 100000) AS Q GROUP BY PARTY_CODE,QNO) AS I SET LAST_YR_SALES = T_SALES WHERE I.PARTY_CODE = T.PARTY_CODE AND I.QNO  = T.PRODUCT_CODE");

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET T, (SELECT PARTY_CODE,'TOTAL' AS QNO,SUM(TOTAL_NET_AMOUNT)  AS T_SALES FROM PRODUCTION.FELT_INVOICE_DATA WHERE INVOICE_DATE >= '2015-04-01' AND INVOICE_DATE <='2016-03-31' GROUP BY PARTY_CODE) AS I SET LAST_YR_SALES = T_SALES WHERE I.PARTY_CODE = T.PARTY_CODE  AND I.QNO  = T.PRODUCT_CODE");

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET T, ( SELECT PARTY_CODE,'TOTAL' AS QNO,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-04-01' AND INVOICE_DATE <='2016-06-30'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ1,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-07-01' AND INVOICE_DATE <='2016-09-30'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ2,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-10-01' AND INVOICE_DATE <='2016-12-31'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ3,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2017-01-01' AND INVOICE_DATE <='2017-03-31'  THEN TOTAL_NET_AMOUNT END,0))  AS SQ4,SUM(COALESCE(CASE WHEN  INVOICE_DATE >= '2016-04-01' AND INVOICE_DATE <='2017-03-31'  THEN TOTAL_NET_AMOUNT END,0))  AS T_SALES FROM PRODUCTION.FELT_INVOICE_DATA WHERE INVOICE_DATE >= '2016-04-01' AND INVOICE_DATE <='2017-03-31' GROUP BY PARTY_CODE) AS I SET TOTAL_SALES = T_SALES,SALES_QTR1= SQ1,SALES_QTR2= SQ2,SALES_QTR3= SQ3,SALES_QTR4= SQ4 WHERE I.PARTY_CODE = T.PARTY_CODE AND I.QNO  = T.PRODUCT_CODE");

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET SET SALES_Q1Q2 = ROUND(SALES_QTR1+ SALES_QTR2,0)");

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET SET SALES_Q1Q2Q3 = ROUND(SALES_QTR1+ SALES_QTR2 + SALES_QTR3,0)");

            stmt.execute("UPDATE PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET SET PER_Q1 = COALESCE(ROUND(((SALES_QTR1 - TGT_QTR_1)/TGT_QTR_1) *100,1),0),PER_Q2 = COALESCE(ROUND(((SALES_QTR2 - TGT_QTR_2)/TGT_QTR_2) *100,1),0),PER_Q3 = COALESCE(ROUND(((SALES_QTR3 - TGT_QTR_3)/TGT_QTR_3) *100,1),0),PER_Q4 = COALESCE(ROUND(((SALES_QTR4 - TGT_QTR_4)/TGT_QTR_4) *100,1),0),PER_Q1Q2 =  COALESCE(ROUND(((SALES_Q1Q2  - TOTAL_TGT)/TOTAL_TGT) *100,1),0),PER_Q1Q2Q3 =  COALESCE(ROUND(((SALES_Q1Q2Q3  - TOTAL_TGT)/TOTAL_TGT) *100,1),0),PER_YR = COALESCE(ROUND(((TOTAL_SALES - TOTAL_TGT)/TOTAL_TGT) *100,1),0),PER_LAST_YR = COALESCE(ROUND(((TOTAL_SALES - LAST_YR_SALES)/TOTAL_SALES) *100,1),0)");

            //    stmt.execute("INSERT INTO TEMP_DATABASE.TM80 SELECT CND_MAIN_ACCOUNT_CODE,CASE WHEN CND_SUB_ACCOUNT_CODE=317707 THEN 319907 ELSE CND_SUB_ACCOUNT_CODE END,SUM(CND_INVOICE_AMOUNT) AS INVAMT,0 AS B FROM SALES.D_CREDIT_NOTE_DETAIL WHERE CND_TYPE ='LCQTR'  AND CND_INVOICE_DATE >='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"'  AND CND_INVOICE_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'  GROUP BY CND_MAIN_ACCOUNT_CODE,CASE WHEN CND_SUB_ACCOUNT_CODE=317707 THEN 319907 ELSE CND_SUB_ACCOUNT_CODE END UNION ALL SELECT 210027 AS A,PARTY_CODE,SUM(NET_AMOUNT) AS INVAMT,0 AS B FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_TYPE =1  AND INVOICE_DATE >='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"'  AND INVOICE_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'  AND PARTY_CODE IN (670201,279965,319907,619913,317707,549901,279965,739901,739990) AND SUBSTRING(PAYMENT_TERM_CODE,1,1)  IN (9) GROUP BY  PARTY_CODE");
        } catch (SQLException e) {

            e.printStackTrace();
        }

    }

    private void GenerateAgeingDetail() {

        try {
            FormatGridAgeing();  //clear existing content of table
            String SelUserID = txtpartycode.getText().toString();
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            String strSQL = "";
//            strSQL += "SELECT SUBSTRING(PRODUCT_CD,1,6) AS PRODUCT_CD,ITEM_DESC,COALESCE(COUNT(CASE WHEN DAYS <= 45 THEN RECD_KG END),0) AS 'COUNT<=45',COALESCE(SUM(CASE WHEN DAYS <= 45 THEN RECD_KG END),0) AS 'QTY<=45',COALESCE(SUM(CASE WHEN DAYS <= 45 THEN INV_AMT END),0) AS 'AMT<=45',COALESCE(COUNT(CASE WHEN DAYS > 45 AND DAYS <= 90 THEN RECD_KG END),0) AS 'COUNT>45<=90',COALESCE(SUM(CASE WHEN DAYS > 45 AND DAYS <= 90 THEN RECD_KG END),0) AS 'QTY>45<=90',COALESCE(SUM(CASE WHEN DAYS > 45 AND DAYS <= 90 THEN INV_AMT END),0) AS 'AMT>45<=90',COALESCE(COUNT(CASE WHEN DAYS > 90 AND DAYS <= 180 THEN RECD_KG END),0) AS 'COUNT>90<=180',COALESCE(SUM(CASE WHEN DAYS > 90 AND DAYS <= 180 THEN RECD_KG END),0) AS 'QTY>90<=180',COALESCE(SUM(CASE WHEN DAYS > 90 AND DAYS <= 180 THEN INV_AMT END),0) AS 'AMT>90<=180',COALESCE(COUNT(CASE WHEN DAYS > 180 AND DAYS <= 365 THEN RECD_KG END),0) AS 'COUNT>180<=365',COALESCE(SUM(CASE WHEN DAYS > 180 AND DAYS <= 365 THEN RECD_KG END),0) AS 'QTY>180<=365',COALESCE(SUM(CASE WHEN DAYS > 180 AND DAYS <= 365 THEN INV_AMT END),0) AS 'AMT>180<=365',COALESCE(COUNT(CASE WHEN DAYS > 365 AND DAYS <= 730 THEN RECD_KG END),0) AS 'COUNT>365<=730',COALESCE(SUM(CASE WHEN DAYS > 365 AND DAYS <= 730 THEN RECD_KG END),0) AS 'QTY>365<=730',COALESCE(SUM(CASE WHEN DAYS > 365 AND DAYS <= 730 THEN INV_AMT END),0) AS 'AMT>365<=730',COALESCE(COUNT(CASE WHEN DAYS > 730  THEN RECD_KG END),0) AS 'COUNT>730',COALESCE(SUM(CASE WHEN DAYS > 730  THEN RECD_KG END),0) AS 'QTY>730',COALESCE(SUM(CASE WHEN DAYS > 730  THEN INV_AMT END),0) AS 'AMT>730',COALESCE(COUNT(RECD_KG ),0) AS 'TOTAL_COUNT',COALESCE(SUM(RECD_KG ),0) AS 'TOTAL_QTY',COALESCE(SUM(INV_AMT),0) AS 'TOTAL_AMT' FROM (SELECT PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE ,COMM_DATE, PRODUCT_CODE AS PRODUCT_CD,ITEM AS ITEM_DESC,STYLE,LNGTH AS MTRS_ORDER,RCVD_MTR ,WIDTH AS WIDTH_ORDER,RECD_WDTH,WEIGHT AS KG_CALC,RECD_KG ,SQM_RATE,WT_RATE,(SQM_RATE+WT_RATE) AS RATE,ROUND(BAS_AMT,2) AS BAS_AMT,MEMO_DATE,DISC_PER,ROUND(DISAMT,0) AS DISAMT,ROUND(DISBASAMT,0) AS DISBASAMT,GSQ,ROUND(EXCISE,2) AS EXCISE,ROUND(WPSC,2) AS SEAM_CHG,CASE WHEN INSURANCE_CODE =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INSURANCE_CODE !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INSURANCE_CODE =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INSURANCE_CODE !=1 THEN 0  END) ,2) AS INV_AMT,REF_NO,CONF_NO,MACHINE_NO,POSITION,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,INSURANCE_CODE,DATEDIFF(NOW(),RCVD_DATE) AS DAYS FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INSURANCE_CODE,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,GSQ,((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INSURANCE_CODE,MEMO_DATE,DELIV_DATE ,COMM_DATE,GSQ,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,FA.PIECE_NO,PARTY_CD,COALESCE(LTRIM(RTRIM(PARTY_NAME)),'PARTY DELETED IN COBOL') AS PARTY_NAME,COALESCE(DISPATCH_STATION,'Z STATION PARTY DELETED') AS DISPATCH_STATION,COALESCE(ZONE,' ZERO ')AS ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,COALESCE(INSURANCE_CODE,0) AS INSURANCE_CODE,DELIV_DATE ,COMM_DATE, GSQ,BAS_AMT,WPSC, ST_FLAG_1 FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CD AS PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,DELIV_DATE ,COMM_DATE, GSQ,CASE WHEN SQM_IND =1 THEN RCVD_MTR * RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN  RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN  RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC, ST_FLAG_1 FROM PRODUCTION.FELT_PIECE_REGISTER A,PRODUCTION.FELT_ORDER_MASTER B,PRODUCTION.FELT_RATE_MASTER H WHERE A.PRODUCT_CD = H.ITEM_CODE AND ( A.WH_CD =0  OR (A.WH_CD =2 AND ST_FLAG_1 !='P')) AND A.ORDER_NO = B.PIECE_NO ) AS FA LEFT JOIN (SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' ) AS FP ON FA.PARTY_CD = FP.PARTY_CODE) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(SUBSTRING(M.PIECE_NO,2,5),M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C) AS D GROUP BY PRODUCT_CD,ITEM_DESC ";

            strSQL += "SELECT PR_PRODUCT_CODE AS PRODUCT_CD,GROUP_NAME AS ITEM_DESC,"
                    + "COALESCE(COUNT(CASE WHEN PR_DAYS_WH_STOCK <= 45 THEN PR_BILL_WEIGHT END),0) AS 'COUNT<=45', "
                    + "COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK <= 45 THEN PR_BILL_WEIGHT END),0) AS 'QTY<=45', "
                    + "ROUND(COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK <= 45 THEN PR_FELT_VALUE_WITH_GST END),0),0) AS 'AMT<=45', "
                    + "COALESCE(COUNT(CASE WHEN PR_DAYS_WH_STOCK > 45 AND PR_DAYS_WH_STOCK <= 90 THEN PR_BILL_WEIGHT END),0) AS 'COUNT>45<=90', "
                    + "COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 45 AND PR_DAYS_WH_STOCK <= 90 THEN PR_BILL_WEIGHT END),0) AS 'QTY>45<=90', "
                    + "ROUND(COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 45 AND PR_DAYS_WH_STOCK <= 90 THEN PR_FELT_VALUE_WITH_GST END),0),0) AS 'AMT>45<=90', "
                    + "COALESCE(COUNT(CASE WHEN PR_DAYS_WH_STOCK > 90 AND PR_DAYS_WH_STOCK <= 180 THEN PR_BILL_WEIGHT END),0) AS 'COUNT>90<=180', "
                    + "COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 90 AND PR_DAYS_WH_STOCK <= 180 THEN PR_BILL_WEIGHT END),0) AS 'QTY>90<=180', "
                    + "ROUND(COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 90 AND PR_DAYS_WH_STOCK <= 180 THEN PR_FELT_VALUE_WITH_GST END),0),0) AS 'AMT>90<=180', "
                    + "COALESCE(COUNT(CASE WHEN PR_DAYS_WH_STOCK > 180 AND PR_DAYS_WH_STOCK <= 365 THEN PR_BILL_WEIGHT END),0) AS 'COUNT>180<=365', "
                    + "COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 180 AND PR_DAYS_WH_STOCK <= 365 THEN PR_BILL_WEIGHT END),0) AS 'QTY>180<=365', "
                    + "ROUND(COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 180 AND PR_DAYS_WH_STOCK <= 365 THEN PR_FELT_VALUE_WITH_GST END),0),0) AS 'AMT>180<=365', "
                    + "COALESCE(COUNT(CASE WHEN PR_DAYS_WH_STOCK > 365 AND PR_DAYS_WH_STOCK <= 730 THEN PR_BILL_WEIGHT END),0) AS 'COUNT>365<=730', "
                    + "COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 365 AND PR_DAYS_WH_STOCK <= 730 THEN PR_BILL_WEIGHT END),0) AS 'QTY>365<=730', "
                    + "ROUND(COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 365 AND PR_DAYS_WH_STOCK <= 730 THEN PR_FELT_VALUE_WITH_GST END),0),0) AS 'AMT>365<=730', "
                    + "COALESCE(COUNT(CASE WHEN PR_DAYS_WH_STOCK > 730  THEN PR_BILL_WEIGHT END),0) AS 'COUNT>730', "
                    + "COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 730  THEN PR_BILL_WEIGHT END),0) AS 'QTY>730', "
                    + "ROUND(COALESCE(SUM(CASE WHEN PR_DAYS_WH_STOCK > 730  THEN PR_FELT_VALUE_WITH_GST END),0),0) AS 'AMT>730', "
                    + "COALESCE(COUNT(PR_BILL_WEIGHT),0) AS 'TOTAL_COUNT', "
                    + "COALESCE(SUM(PR_BILL_WEIGHT),0) AS 'TOTAL_QTY', "
                    + "ROUND(COALESCE(SUM(PR_FELT_VALUE_WITH_GST),0),0) AS 'TOTAL_AMT' "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER, "
                    + "PRODUCTION.FELT_QLT_RATE_MASTER "
                    + "WHERE PR_PIECE_STAGE IN ('IN STOCK') "
                    + "AND PRODUCT_CODE =PR_PRODUCT_CODE AND EFFECTIVE_TO ='0000-00-00' "
                    + "GROUP BY PR_PRODUCT_CODE,GROUP_NAME ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double less45countsum = 0.00;
                double less90countsum = 0.00;
                double less180countsum = 0.00;
                double less365countsum = 0.00;
                double less730countsum = 0.00;
                double more730countsum = 0.00;
                double totalcountsum = 0.00;

                double less45qtysum = 0.00;
                double less90qtysum = 0.00;
                double less180qtysum = 0.00;
                double less365qtysum = 0.00;
                double less730qtysum = 0.00;
                double more730qtysum = 0.00;
                double totalqtysum = 0.00;

                double less45amtsum = 0.00;
                double less90amtsum = 0.00;
                double less180amtsum = 0.00;
                double less365amtsum = 0.00;
                double less730amtsum = 0.00;
                double more730amtsum = 0.00;
                double totalamtsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtageingtotal.setText(Integer.toString(cnt));
                    less45countsum += Double.parseDouble(rsTmp.getString("COUNT<=45"));
                    less90countsum += Double.parseDouble(rsTmp.getString("COUNT>45<=90"));
                    less180countsum += Double.parseDouble(rsTmp.getString("COUNT>90<=180"));
                    less365countsum += Double.parseDouble(rsTmp.getString("COUNT>180<=365"));
                    less730countsum += Double.parseDouble(rsTmp.getString("COUNT>365<=730"));
                    more730countsum += Double.parseDouble(rsTmp.getString("COUNT>730"));
                    totalcountsum += Double.parseDouble(rsTmp.getString("TOTAL_COUNT"));

                    less45qtysum += Double.parseDouble(rsTmp.getString("QTY<=45"));
                    less90qtysum += Double.parseDouble(rsTmp.getString("QTY>45<=90"));
                    less180qtysum += Double.parseDouble(rsTmp.getString("QTY>90<=180"));
                    less365qtysum += Double.parseDouble(rsTmp.getString("QTY>180<=365"));
                    less730qtysum += Double.parseDouble(rsTmp.getString("QTY>365<=730"));
                    more730qtysum += Double.parseDouble(rsTmp.getString("QTY>730"));
                    totalqtysum += Double.parseDouble(rsTmp.getString("TOTAL_QTY"));

                    less45amtsum += Double.parseDouble(rsTmp.getString("AMT<=45"));
                    less90amtsum += Double.parseDouble(rsTmp.getString("AMT>45<=90"));
                    less180amtsum += Double.parseDouble(rsTmp.getString("AMT>90<=180"));
                    less365amtsum += Double.parseDouble(rsTmp.getString("AMT>180<=365"));
                    less730amtsum += Double.parseDouble(rsTmp.getString("AMT>365<=730"));
                    more730amtsum += Double.parseDouble(rsTmp.getString("AMT>730"));
                    totalamtsum += Double.parseDouble(rsTmp.getString("TOTAL_AMT"));

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtless45counttotal.setText(df.format(less45countsum));
                    txtless90counttotal.setText(df.format(less90countsum));
                    txtless180counttotal.setText(df.format(less180countsum));
                    txtless365counttotal.setText(df.format(less365countsum));
                    txtless730counttotal.setText(df.format(less730countsum));
                    txtmore730counttotal.setText(df.format(more730countsum));
                    txtlesscounttotal.setText(df.format(totalcountsum));

                    txtless45qtytotal.setText(df.format(less45qtysum));
                    txtless90qtytotal.setText(df.format(less90qtysum));
                    txtless180qtytotal.setText(df.format(less180qtysum));
                    txtless365qtytotal.setText(df.format(less365qtysum));
                    txtless730qtytotal.setText(df.format(less730qtysum));
                    txtmore730qtytotal.setText(df.format(more730qtysum));
                    txtlessqtytotal.setText(df.format(totalqtysum));

                    txtless45amttotal.setText(df.format(less45amtsum));
                    txtless90amttotal.setText(df.format(less90amtsum));
                    txtless180amttotal.setText(df.format(less180amtsum));
                    txtless365amttotal.setText(df.format(less365amtsum));
                    txtless730amttotal.setText(df.format(less730amtsum));
                    txtmore730amttotal.setText(df.format(more730amtsum));
                    txtlessamttotal.setText(df.format(totalamtsum));

                    Object[] rowData = new Object[24];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PRODUCT_CD");
                    rowData[2] = rsTmp.getString("ITEM_DESC");
                    rowData[3] = rsTmp.getString("COUNT<=45");
                    rowData[4] = rsTmp.getString("QTY<=45");
                    rowData[5] = rsTmp.getString("AMT<=45");
                    rowData[6] = rsTmp.getString("COUNT>45<=90");
                    rowData[7] = rsTmp.getString("QTY>45<=90");
                    rowData[8] = rsTmp.getString("AMT>45<=90");
                    rowData[9] = rsTmp.getString("COUNT>90<=180");
                    rowData[10] = rsTmp.getString("QTY>90<=180");
                    rowData[11] = rsTmp.getString("AMT>90<=180");
                    rowData[12] = rsTmp.getString("COUNT>180<=365");
                    rowData[13] = rsTmp.getString("QTY>180<=365");
                    rowData[14] = rsTmp.getString("AMT>180<=365");
                    rowData[15] = rsTmp.getString("COUNT>365<=730");
                    rowData[16] = rsTmp.getString("QTY>365<=730");
                    rowData[17] = rsTmp.getString("AMT>365<=730");
                    rowData[18] = rsTmp.getString("COUNT>730");
                    rowData[19] = rsTmp.getString("QTY>730");
                    rowData[20] = rsTmp.getString("AMT>730");
                    rowData[21] = rsTmp.getString("TOTAL_COUNT");
                    rowData[22] = rsTmp.getString("TOTAL_QTY");
                    rowData[23] = rsTmp.getString("TOTAL_AMT");

                    DataModelAgeing.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }

    private void FormatGridAgeing() {
        DataModelAgeing = new EITLTableModel();
        TableAgeing.removeAll();
        TableAgeing.setModel(DataModelAgeing);

        TableAgeing.setAutoResizeMode(TableAgeing.AUTO_RESIZE_OFF);

        DataModelAgeing.addColumn("Sr.");
        DataModelAgeing.addColumn("Product Code");
        DataModelAgeing.addColumn("Item Desc");
        DataModelAgeing.addColumn("Count<=45");
        DataModelAgeing.addColumn("Qty<=45");
        DataModelAgeing.addColumn("Amt<=45");
        DataModelAgeing.addColumn("Count>45<=90");
        DataModelAgeing.addColumn("Qty>45<=90");
        DataModelAgeing.addColumn("Amt>45<=90");
        DataModelAgeing.addColumn("Count>90<=180");
        DataModelAgeing.addColumn("Qty>90<=180");
        DataModelAgeing.addColumn("Amt>90<=180");
        DataModelAgeing.addColumn("Count>180<=365");
        DataModelAgeing.addColumn("Qty>180<=365");
        DataModelAgeing.addColumn("Amt>180<=365");
        DataModelAgeing.addColumn("Count>365<=730");
        DataModelAgeing.addColumn("Qty>365<=730");
        DataModelAgeing.addColumn("Amt>365<=730");
        DataModelAgeing.addColumn("Count>730");
        DataModelAgeing.addColumn("Qty>730");
        DataModelAgeing.addColumn("Amt>730");
        DataModelAgeing.addColumn("Total Count");
        DataModelAgeing.addColumn("Total Qty");
        DataModelAgeing.addColumn("Total Amt");
        DataModelAgeing.TableReadOnly(true);
        TableAgeing.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridSalesY() {
        DataModelSalesY = new EITLTableModel();
        TableSalesY.removeAll();
        TableSalesY.setModel(DataModelSalesY);

        TableSalesY.setAutoResizeMode(TableSalesY.AUTO_RESIZE_OFF);
        DataModelSalesY.addColumn("Sr.");
        //DataModelSalesY.addColumn("Party Code");
//        DataModelSalesY.addColumn("Fin Year");
//        DataModelSalesY.addColumn("Total(lacs)");
//        DataModelSalesY.addColumn("Total(KG)");
//        DataModelSalesY.addColumn("Total(SQMTR)");
//        DataModelSalesY.addColumn("Dry (lacs)");
//        DataModelSalesY.addColumn("Dry (KG)");
//        DataModelSalesY.addColumn("Dry (SQMTR)");
//        DataModelSalesY.addColumn("Wet (lacs)");
//        DataModelSalesY.addColumn("Wet (KG)");
//        DataModelSalesY.addColumn("Wet (SQMTR)");
//        DataModelSalesY.addColumn("ACNE(lacs)");
//        DataModelSalesY.addColumn("ACNE(KG)");
//        DataModelSalesY.addColumn("ACNE(SQMTR)");

        DataModelSalesY.addColumn("Fin Year");
        DataModelSalesY.addColumn("Total(lacs)");
        DataModelSalesY.addColumn("GR Total(lacs)");
        DataModelSalesY.addColumn("Net Total(lacs)");
        DataModelSalesY.addColumn("Total(KG)");
        DataModelSalesY.addColumn("GR(KG)");
        DataModelSalesY.addColumn("Net(KG)");
        DataModelSalesY.addColumn("Total(SqMtr)");
        DataModelSalesY.addColumn("GR(SqMtr)");
        DataModelSalesY.addColumn("Net(SqMtr)");
        DataModelSalesY.addColumn("Press (lacs)");
        DataModelSalesY.addColumn("GR Press(lacs)");
        DataModelSalesY.addColumn("Net Press(lacs)");
        DataModelSalesY.addColumn("Press(KG)");
        DataModelSalesY.addColumn("GR Press(KG)");
        DataModelSalesY.addColumn("Net Press(KG)");
        DataModelSalesY.addColumn("Press(SqMtr)");
        DataModelSalesY.addColumn("GR Press(SqMtr)");
        DataModelSalesY.addColumn("Net Press(SqMtr)");
        DataModelSalesY.addColumn("HDS (lacs)");
        DataModelSalesY.addColumn("GR HDS(lacs)");
        DataModelSalesY.addColumn("Net HDS(lacs)");
        DataModelSalesY.addColumn("HDS(KG)");
        DataModelSalesY.addColumn("GR HDS(KG)");
        DataModelSalesY.addColumn("Net HDS(KG)");
        DataModelSalesY.addColumn("HDS(SqMtr)");
        DataModelSalesY.addColumn("GR HDS(SqMtr)");
        DataModelSalesY.addColumn("Net HDS(SqMtr)");
        DataModelSalesY.addColumn("SDF (lacs)");
        DataModelSalesY.addColumn("GR SDF(lacs)");
        DataModelSalesY.addColumn("Net SDF(lacs)");
        DataModelSalesY.addColumn("SDF(KG)");
        DataModelSalesY.addColumn("GR SDF(KG)");
        DataModelSalesY.addColumn("Net SDF(KG)");
        DataModelSalesY.addColumn("SDF(SqMtr)");
        DataModelSalesY.addColumn("GR SDF(SqMtr)");
        DataModelSalesY.addColumn("Net SDF(SqMtr)");
        DataModelSalesY.addColumn("ACNE (lacs)");
        DataModelSalesY.addColumn("GR ACNE(lacs)");
        DataModelSalesY.addColumn("Net ACNE(lacs)");
        DataModelSalesY.addColumn("ACNE(KG)");
        DataModelSalesY.addColumn("GR ACNE(KG)");
        DataModelSalesY.addColumn("Net ACNE(KG)");
        DataModelSalesY.addColumn("ACNE(SqMtr)");
        DataModelSalesY.addColumn("GR ACNE(SqMtr)");
        DataModelSalesY.addColumn("Net ACNE(SqMtr)");
        DataModelSalesY.TableReadOnly(true);
        TableSalesY.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridSalesM() {
        DataModelSalesM = new EITLTableModel();
        TableSalesM.removeAll();
        TableSalesM.setModel(DataModelSalesM);

        TableSalesM.setAutoResizeMode(TableSalesM.AUTO_RESIZE_OFF);
        DataModelSalesM.addColumn("Sr.");
        //DataModelSalesM.addColumn("Party Code");
        DataModelSalesM.addColumn("Fin Year");
        DataModelSalesM.addColumn("Total Apr");
        DataModelSalesM.addColumn("GR Apr");
        DataModelSalesM.addColumn("Net Apr");
        DataModelSalesM.addColumn("Total May");
        DataModelSalesM.addColumn("GR May");
        DataModelSalesM.addColumn("Net May");
        DataModelSalesM.addColumn("Total Jun");
        DataModelSalesM.addColumn("GR Jun");
        DataModelSalesM.addColumn("Net Jun");
        DataModelSalesM.addColumn("Total Jul");
        DataModelSalesM.addColumn("GR Jul");
        DataModelSalesM.addColumn("Net Jul");
        DataModelSalesM.addColumn("Total Aug");
        DataModelSalesM.addColumn("GR Aug");
        DataModelSalesM.addColumn("Net Aug");
        DataModelSalesM.addColumn("Total Sep");
        DataModelSalesM.addColumn("GR Sep");
        DataModelSalesM.addColumn("Net Sep");
        DataModelSalesM.addColumn("Total Oct");
        DataModelSalesM.addColumn("GR Oct");
        DataModelSalesM.addColumn("Net Oct");
        DataModelSalesM.addColumn("Total Nov");
        DataModelSalesM.addColumn("GR Nov");
        DataModelSalesM.addColumn("Net Nov");
        DataModelSalesM.addColumn("Total Dec");
        DataModelSalesM.addColumn("GR Dec");
        DataModelSalesM.addColumn("Net Dec");
        DataModelSalesM.addColumn("Total Jan");
        DataModelSalesM.addColumn("GR Jan");
        DataModelSalesM.addColumn("Net Jan");
        DataModelSalesM.addColumn("Total Feb");
        DataModelSalesM.addColumn("GR Feb");
        DataModelSalesM.addColumn("Net Feb");
        DataModelSalesM.addColumn("Total Mar");
        DataModelSalesM.addColumn("GR Mar");
        DataModelSalesM.addColumn("Net Mar");
        DataModelSalesM.addColumn("Total");
        DataModelSalesM.addColumn("GR Total");
        DataModelSalesM.addColumn("Net Total");
        DataModelSalesM.TableReadOnly(true);
        TableSalesM.getColumnModel().getColumn(0).setMaxWidth(50);
    }

//    private void GenerateTargetDetail() {
//
//        String SelUserID = "";
//        String strSQL = "";
//        try {
//
//            processSalesTarget();
//            FormatGridTarget();  //clear existing content of table
//            SelUserID = txtpartycode.getText().toString();
//            //  strZone = txtzone.getText().toString();
//            strProductCode = txtproductcode.getText().toString();
//
//            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
//
//            strSQL = "";
//            strSQL += "SELECT MAIN_ACCOUNT_CODE,PARTY_CODE,PARTY_NAME,PRODUCT_CODE,LAST_YR_SALES, TOTAL_SALES,PER_LAST_YR,TGT_FY_YR,TGT_FROM_DATE,TGT_TO_DATE,TOTAL_TGT,PER_YR,TGT_QTR_1,SALES_QTR1,PER_Q1,TGT_QTR_2,SALES_QTR2,PER_Q2,SALES_Q1Q2 ,PER_Q1Q2,TGT_QTR_3,SALES_QTR3,PER_Q3,SALES_Q1Q2Q3,PER_Q1Q2Q3,TGT_QTR_4,SALES_QTR4,PER_Q4,INCHARGE_ID,INCHARGE_NAME FROM (SELECT B.MAIN_ACCOUNT_CODE,A.PARTY_CODE,PARTY_NAME,PRODUCT_CODE,ROUND((LAST_YR_SALES/100000),2) AS LAST_YR_SALES, PER_LAST_YR, ROUND((TOTAL_SALES/100000),2) AS TOTAL_SALES,TGT_FY_YR,TGT_FROM_DATE,TGT_TO_DATE,ROUND((TOTAL_TGT/100000),2) AS TOTAL_TGT,PER_YR, ROUND((TGT_QTR_1/100000),2) AS TGT_QTR_1,ROUND((SALES_QTR1/100000),2) AS SALES_QTR1,PER_Q1, ROUND((TGT_QTR_2/100000),2) AS TGT_QTR_2,ROUND((SALES_QTR2/100000),2) AS SALES_QTR2,PER_Q2,ROUND((SALES_Q1Q2/100000),2) AS SALES_Q1Q2 ,PER_Q1Q2, ROUND((TGT_QTR_3/100000),2) AS TGT_QTR_3,ROUND((SALES_QTR3/100000),2) AS SALES_QTR3,PER_Q3,ROUND((SALES_Q1Q2Q3/100000),2) AS SALES_Q1Q2Q3 ,PER_Q1Q2Q3, ROUND((TGT_QTR_4/100000),2) AS TGT_QTR_4,ROUND((SALES_QTR4/100000),2) AS SALES_QTR4,PER_Q4,INCHARGE_ID FROM PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET AS A,DINESHMILLS.D_SAL_PARTY_MASTER AS B  WHERE  A.PARTY_CODE = B.PARTY_CODE AND MAIN_ACCOUNT_CODE='210010'  AND TOTAL_TGT + TOTAL_SALES >0 ) AS C LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE ) AS FI ON FI.INCHARGE_CD=C.INCHARGE_ID ";// ORDER BY PARTY_CODE,PRODUCT_CODE";
//            //  strSQL+="SELECT MAIN_ACCOUNT_CODE,PARTY_CODE,PARTY_NAME,PRODUCT_CODE,LAST_YR_SALES, TOTAL_SALES,PER_LAST_YR,TGT_FY_YR,TGT_FROM_DATE,TGT_TO_DATE,TOTAL_TGT,PER_YR,TGT_QTR_1,SALES_QTR1,PER_Q1,TGT_QTR_2,SALES_QTR2,PER_Q2,SALES_Q1Q2 ,PER_Q1Q2,TGT_QTR_3,SALES_QTR3,PER_Q3,SALES_Q1Q2Q3,PER_Q1Q2Q3,TGT_QTR_4,SALES_QTR4,PER_Q4,INCHARGE_ID,INCHARGE_NAME FROM (SELECT B.MAIN_ACCOUNT_CODE,A.PARTY_CODE,PARTY_NAME,PRODUCT_CODE,LAST_YR_SALES, PER_LAST_YR,TOTAL_SALES,TGT_FY_YR,TGT_FROM_DATE,TGT_TO_DATE,TOTAL_TGT,PER_YR,TGT_QTR_1,SALES_QTR1,PER_Q1,TGT_QTR_2,SALES_QTR2,PER_Q2,SALES_Q1Q2 ,PER_Q1Q2,TGT_QTR_3,SALES_QTR3,PER_Q3,SALES_Q1Q2Q3,PER_Q1Q2Q3,TGT_QTR_4,SALES_QTR4,PER_Q4,INCHARGE_ID FROM PRODUCTION.FELT_PARTY_ITEM_POSITION_TARGET AS A,DINESHMILLS.D_SAL_PARTY_MASTER AS B  WHERE  A.PARTY_CODE = B.PARTY_CODE AND MAIN_ACCOUNT_CODE='210010'  AND TOTAL_TGT + TOTAL_SALES >0 ) AS C LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE ) AS FI ON FI.INCHARGE_CD=C.INCHARGE_ID ";// ORDER BY PARTY_CODE,PRODUCT_CODE";
//            strSQL += "WHERE MAIN_ACCOUNT_CODE = 210010 ";
//
//            if (!txtpartycode.getText().equals("")) {
//                strSQL += "AND PARTY_CODE = " + SelUserID + " ";
//            }
//
//            if (!txtproductcode.getText().equals("")) {
//
//                if (txtproductcode.getText().equals("619000") || txtproductcode.getText().equals("629000") || txtproductcode.getText().equals("639000") || txtproductcode.getText().equals("ACNE") || txtproductcode.getText().equals("acne")) {
//                    strSQL += " AND PRODUCT_CODE = 'ACNE' ";
//                } else if (txtproductcode.getText().equals("TOTAL") || txtproductcode.getText().equals("total")) {
//                    strSQL += " AND PRODUCT_CODE = 'TOTAL' ";
//                } else {
//                    strSQL += " AND SUBSTRING(PRODUCT_CODE,1,6) = " + strProductCode + " ";
//                }
//            }
//
//            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
//            if (inchargeby == 0) {
//                strSQL += "";
//            }
//            if (inchargeby == 1) {
//                strSQL += " AND INCHARGE_CD=1 ";
//            }
//            if (inchargeby == 2) {
//                strSQL += " AND INCHARGE_CD=2 ";
//            }
//            if (inchargeby == 3) {
//                strSQL += " AND INCHARGE_CD=3 ";
//            }
//            if (inchargeby == 4) {
//                strSQL += " AND INCHARGE_CD=4 ";
//            }
//            if (inchargeby == 5) {
//                strSQL += " AND INCHARGE_CD=5 ";
//            }
//            if (inchargeby == 6) {
//                strSQL += " AND INCHARGE_CD=6 ";
//            }
//            if (inchargeby == 7) {
//                strSQL += " AND INCHARGE_CD IS NULL ";
//            }
//
//            /*
//             int Orderby=EITLERPGLOBAL.getComboCode(cmbTarget);
//            
//             if(Orderby==1) {
//             strSQL=strSQL+" ORDER BY PIECE_NO ";
//             }
//          
//             */
//            strSQL += " ORDER BY PARTY_CODE,PRODUCT_CODE";
//
//            System.out.println(strSQL);
//            rsTmp = data.getResult(strSQL);
//            rsTmp.first();
//            if (rsTmp.getRow() > 0) {
//                int cnt = 0;
//                while (!rsTmp.isAfterLast()) {
//                    cnt++;
//                    txttargettotal.setText(Integer.toString(cnt));
//
//                    Object[] rowData = new Object[30];
//                    rowData[0] = Integer.toString(cnt);
//                    //rowData[1]=rsTmp.getString("PARTY_CODE");
//                    rowData[1] = rsTmp.getString("PARTY_CODE");
//                    rowData[2] = rsTmp.getString("PARTY_NAME");
//                    rowData[3] = rsTmp.getString("PRODUCT_CODE");
//                    rowData[4] = rsTmp.getString("TGT_FY_YR");
//                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("TGT_FROM_DATE"));
//                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("TGT_TO_DATE"));
//                    rowData[7] = rsTmp.getString("LAST_YR_SALES");
//                    rowData[8] = rsTmp.getString("TOTAL_SALES");
//                    rowData[9] = rsTmp.getString("PER_LAST_YR");
//                    rowData[10] = rsTmp.getString("TOTAL_TGT");
//
//                    rowData[11] = rsTmp.getString("TGT_QTR_1");
//                    rowData[12] = rsTmp.getString("SALES_QTR1");
//                    rowData[13] = rsTmp.getString("PER_Q1");
//
//                    rowData[14] = rsTmp.getString("TGT_QTR_2");
//                    rowData[15] = rsTmp.getString("SALES_QTR2");
//                    rowData[16] = rsTmp.getString("PER_Q2");
//
//                    rowData[17] = rsTmp.getString("TGT_QTR_3");
//                    rowData[18] = rsTmp.getString("SALES_QTR3");
//                    rowData[19] = rsTmp.getString("PER_Q3");
//
//                    rowData[20] = rsTmp.getString("TGT_QTR_4");
//                    rowData[21] = rsTmp.getString("SALES_QTR4");
//                    rowData[22] = rsTmp.getString("PER_Q4");
//
//                    rowData[23] = rsTmp.getString("SALES_Q1Q2");
//                    rowData[24] = rsTmp.getString("PER_Q1Q2");
//
//                    rowData[25] = rsTmp.getString("SALES_Q1Q2Q3");
//                    rowData[26] = rsTmp.getString("PER_Q1Q2Q3");
//
//                    rowData[27] = rsTmp.getString("PER_YR");
//
//                    rowData[28] = rsTmp.getString("INCHARGE_NAME");
//                    DataModelTarget.addRow(rowData);
//                    rsTmp.next();
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//
//    }
//    private void FormatGridTarget() {
//        DataModelTarget = new EITLTableModel();
//        TableTarget.removeAll();
//        TableTarget.setModel(DataModelTarget);
//        TableTarget.setAutoResizeMode(TableTarget.AUTO_RESIZE_OFF);
//        DataModelTarget.addColumn("Sr.");
//        DataModelTarget.addColumn("Party Code");
//        DataModelTarget.addColumn("Party Name");
//        DataModelTarget.addColumn("Product Code");
//        DataModelTarget.addColumn("TGT FY Yr");
//        DataModelTarget.addColumn("TGT From Date");
//        DataModelTarget.addColumn("TGT To Date");
//        DataModelTarget.addColumn("Last Yr. Sales");
//        DataModelTarget.addColumn("Curr. Sales");
//        DataModelTarget.addColumn("Last Sales%");
//        DataModelTarget.addColumn("TotalTarget");
//
//        DataModelTarget.addColumn("TGT Q1");
//        DataModelTarget.addColumn("Sales-Q1");
//        DataModelTarget.addColumn("Q1%");
//
//        DataModelTarget.addColumn("TGT Q2");
//        DataModelTarget.addColumn("Sales-Q2");
//        DataModelTarget.addColumn("Q2%");
//
//        DataModelTarget.addColumn("TGT Q3");
//        DataModelTarget.addColumn("Sales-Q3");
//        DataModelTarget.addColumn("Q3%");
//
//        DataModelTarget.addColumn("TGT Q4");
//        DataModelTarget.addColumn("Sales-Q4");
//        DataModelTarget.addColumn("Q4%");
//
//        DataModelTarget.addColumn("SalesQ1Q2");
//        DataModelTarget.addColumn("Q1Q2%");
//
//        DataModelTarget.addColumn("SalesQ1Q2Q3");
//        DataModelTarget.addColumn("Q1Q2Q3%");
//
//        DataModelTarget.addColumn("YR%");
//
//        DataModelTarget.addColumn("Incharge");
//
//        DataModelTarget.TableReadOnly(true);
//        TableTarget.getColumnModel().getColumn(0).setMaxWidth(50);
//    }
    private void GenerateMISAgeingDetail() {

        try {
            FormatGridMISAgeing();  //clear existing content of table
            String SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            String strSQL = "";

//            strSQL += "SELECT FINYR,SUBSTRING(PRODUCT_CD,1,6) AS PRODUCT_CD,ITEM_DESC,COALESCE(COUNT(RECD_KG ),0) AS 'TOTAL_COUNT',COALESCE(SUM(RECD_KG ),0) AS 'TOTAL_QTY',COALESCE(SUM(INV_AMT),0) AS 'TOTAL_AMT' FROM (SELECT PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE ,COMM_DATE, PRODUCT_CODE AS PRODUCT_CD,ITEM AS ITEM_DESC,STYLE,LNGTH AS MTRS_ORDER,RCVD_MTR ,WIDTH AS WIDTH_ORDER,RECD_WDTH,WEIGHT AS KG_CALC,RECD_KG ,SQM_RATE,WT_RATE,(SQM_RATE+WT_RATE) AS RATE,ROUND(BAS_AMT,2) AS BAS_AMT,MEMO_DATE,DISC_PER,ROUND(DISAMT,0) AS DISAMT,ROUND(DISBASAMT,0) AS DISBASAMT,GSQ,CASE WHEN EXTRACT(MONTH FROM RCVD_DATE) IN (4,5,6,7,8,9,10,11,12)  THEN CONCAT_WS('-',EXTRACT(YEAR FROM RCVD_DATE),EXTRACT(YEAR FROM DATE_ADD(RCVD_DATE,INTERVAL 1 YEAR)))  WHEN EXTRACT(MONTH FROM RCVD_DATE) IN (1,2,3)  THEN CONCAT_WS('-',EXTRACT(YEAR FROM DATE_SUB(RCVD_DATE,INTERVAL 1 YEAR)),EXTRACT(YEAR FROM RCVD_DATE))  END AS FINYR,ROUND(EXCISE,2) AS EXCISE,ROUND(WPSC,2) AS SEAM_CHG, CASE WHEN INSURANCE_CODE =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INSURANCE_CODE !=1 THEN 0  END  AS INSACC_AMT, ROUND((DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INSURANCE_CODE =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INSURANCE_CODE !=1 THEN 0  END) ,2) AS INV_AMT,REF_NO,CONF_NO,MACHINE_NO,POSITION,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,INSURANCE_CODE,DATEDIFF(NOW(),RCVD_DATE) AS DAYS FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INSURANCE_CODE,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,GSQ, ((DISBASAMT+COALESCE(WPSC,0)) *.12+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INSURANCE_CODE,MEMO_DATE,DELIV_DATE ,COMM_DATE,GSQ,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,FA.PIECE_NO,PARTY_CD,COALESCE(LTRIM(RTRIM(PARTY_NAME)),'PARTY DELETED IN COBOL') AS PARTY_NAME,COALESCE(DISPATCH_STATION,'Z STATION PARTY DELETED') AS DISPATCH_STATION,COALESCE(ZONE,' ZERO ')AS ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,COALESCE(INSURANCE_CODE,0) AS INSURANCE_CODE,DELIV_DATE ,COMM_DATE, GSQ,BAS_AMT,WPSC, ST_FLAG_1 FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CD AS PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,DELIV_DATE ,COMM_DATE, GSQ,CASE WHEN SQM_IND =1 THEN RCVD_MTR * RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN  RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN  RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC, ST_FLAG_1 FROM PRODUCTION.FELT_PIECE_REGISTER A,PRODUCTION.FELT_ORDER_MASTER B,PRODUCTION.FELT_RATE_MASTER H WHERE ";
//            if (!txtproductcode.getText().equals("")) {
//                strSQL += " SUBSTRING(A.PRODUCT_CD,1,6) = '" + strProductCode + "' AND ";
//            }
//            strSQL += "A.PRODUCT_CD = H.ITEM_CODE AND ( A.WH_CD =0  OR (A.WH_CD =2 AND ST_FLAG_1 !='P')) AND A.ORDER_NO = B.PIECE_NO) AS FA LEFT JOIN (SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010') AS FP ON FA.PARTY_CD = FP.PARTY_CODE ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(SUBSTRING(M.PIECE_NO,2,5),M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C) AS D GROUP BY FINYR,PRODUCT_CD,ITEM_DESC ORDER BY PRODUCT_CD,FINYR DESC,ITEM_DESC";
            strSQL += "SELECT JD AS FINYR,PR_PRODUCT_CODE AS PRODUCT_CD,GROUP_NAME AS ITEM_DESC, "
                    + "COALESCE(COUNT(PR_BILL_WEIGHT),0) AS 'TOTAL_COUNT', "
                    + "COALESCE(SUM(PR_BILL_WEIGHT),0) AS 'TOTAL_QTY', "
                    + "ROUND(COALESCE(SUM(PR_FELT_VALUE_WITH_GST),0),0) AS 'TOTAL_AMT' "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER, "
                    + "(SELECT DISTINCT YEAR_FROM,YEAR_TO,CONCAT(YEAR_FROM,'-04-01') AS DF,CONCAT(YEAR_TO,'-03-31') AS DT,CONCAT(YEAR_FROM,'-',YEAR_TO) AS JD FROM DINESHMILLS.D_COM_FIN_YEAR ) AS FIN, "
                    + "PRODUCTION.FELT_QLT_RATE_MASTER "
                    + "WHERE ";
            if (withoutobsolete.isSelected()) {
                strSQL = strSQL + " COALESCE(PR_DELINK,'')!='OBSOLETE' AND ";
            }
            strSQL = strSQL + " PR_PIECE_STAGE IN ('IN STOCK') AND PR_FNSG_DATE >=DF AND PR_FNSG_DATE <=DT "
                    + "AND PRODUCT_CODE =PR_PRODUCT_CODE ";
            if (!txtproductcode.getText().equals("")) {
                strSQL += "AND PR_PRODUCT_CODE = '" + strProductCode + "' ";
            }
            strSQL += "AND EFFECTIVE_TO ='0000-00-00' "
                    + "GROUP BY JD,PR_PRODUCT_CODE,GROUP_NAME "
                    + "ORDER BY JD DESC ,PR_PRODUCT_CODE,GROUP_NAME ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double countsum = 0.00;
                double qtysum = 0.00;
                double amtsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtmisageingtotal.setText(Integer.toString(cnt));
                    countsum += Double.parseDouble(rsTmp.getString("TOTAL_COUNT"));
                    qtysum += Double.parseDouble(rsTmp.getString("TOTAL_QTY"));
                    amtsum += Double.parseDouble(rsTmp.getString("TOTAL_AMT"));
                    DecimalFormat df = new DecimalFormat("###.##");

                    txtcounttotal.setText(df.format(countsum));
                    txtqtytotal.setText(df.format(qtysum));
                    txtamttotal.setText(df.format(amtsum));

                    Object[] rowData = new Object[7];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("PRODUCT_CD");
                    rowData[3] = rsTmp.getString("ITEM_DESC");
                    rowData[4] = rsTmp.getString("TOTAL_COUNT");
                    rowData[5] = rsTmp.getString("TOTAL_QTY");
                    rowData[6] = rsTmp.getString("TOTAL_AMT");

                    DataModelMISAgeing.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateMISAgeingDetail1() {

        try {
            FormatGridMISAgeing1();  //clear existing content of table
            String SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            String strSQL = "";

//            strSQL += "SELECT FINYR,SUBSTRING(PRODUCT_CD,1,6) AS PRODUCT_CD,ITEM_DESC,COALESCE(COUNT(RECD_KG ),0) AS 'TOTAL_COUNT',COALESCE(SUM(RECD_KG ),0) AS 'TOTAL_QTY',COALESCE(SUM(INV_AMT),0) AS 'TOTAL_AMT' FROM (SELECT PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE ,COMM_DATE, PRODUCT_CODE AS PRODUCT_CD,ITEM AS ITEM_DESC,STYLE,LNGTH AS MTRS_ORDER,RCVD_MTR ,WIDTH AS WIDTH_ORDER,RECD_WDTH,WEIGHT AS KG_CALC,RECD_KG ,SQM_RATE,WT_RATE,(SQM_RATE+WT_RATE) AS RATE,ROUND(BAS_AMT,2) AS BAS_AMT,MEMO_DATE,DISC_PER,ROUND(DISAMT,0) AS DISAMT,ROUND(DISBASAMT,0) AS DISBASAMT,GSQ,CASE WHEN EXTRACT(MONTH FROM RCVD_DATE) IN (4,5,6,7,8,9,10,11,12)  THEN CONCAT_WS('-',EXTRACT(YEAR FROM RCVD_DATE),EXTRACT(YEAR FROM DATE_ADD(RCVD_DATE,INTERVAL 1 YEAR)))  WHEN EXTRACT(MONTH FROM RCVD_DATE) IN (1,2,3)  THEN CONCAT_WS('-',EXTRACT(YEAR FROM DATE_SUB(RCVD_DATE,INTERVAL 1 YEAR)),EXTRACT(YEAR FROM RCVD_DATE))  END AS FINYR,ROUND(EXCISE,2) AS EXCISE,ROUND(WPSC,2) AS SEAM_CHG, CASE WHEN INSURANCE_CODE =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INSURANCE_CODE !=1 THEN 0  END  AS INSACC_AMT, ROUND((DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INSURANCE_CODE =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INSURANCE_CODE !=1 THEN 0  END) ,2) AS INV_AMT,REF_NO,CONF_NO,MACHINE_NO,POSITION,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,INSURANCE_CODE,DATEDIFF(NOW(),RCVD_DATE) AS DAYS FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INSURANCE_CODE,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,GSQ, ((DISBASAMT+COALESCE(WPSC,0)) *.12+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,PARTY_NAME,DISPATCH_STATION,ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INSURANCE_CODE,MEMO_DATE,DELIV_DATE ,COMM_DATE,GSQ,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,FA.PIECE_NO,PARTY_CD,COALESCE(LTRIM(RTRIM(PARTY_NAME)),'PARTY DELETED IN COBOL') AS PARTY_NAME,COALESCE(DISPATCH_STATION,'Z STATION PARTY DELETED') AS DISPATCH_STATION,COALESCE(ZONE,' ZERO ')AS ZONE,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,COALESCE(INSURANCE_CODE,0) AS INSURANCE_CODE,DELIV_DATE ,COMM_DATE, GSQ,BAS_AMT,WPSC, ST_FLAG_1 FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CD AS PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,DELIV_DATE ,COMM_DATE, GSQ,CASE WHEN SQM_IND =1 THEN RCVD_MTR * RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN  RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN  RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC, ST_FLAG_1 FROM PRODUCTION.FELT_PIECE_REGISTER A,PRODUCTION.FELT_ORDER_MASTER B,PRODUCTION.FELT_RATE_MASTER H WHERE ";
//            //if(!txtproductcode.getText().equals("")){
//            //   strSQL+=" SUBSTRING(A.PRODUCT_CD,1,6) = '"+strProductCode+"' AND ";
//            // }
//            strSQL += "A.PRODUCT_CD = H.ITEM_CODE AND ( A.WH_CD =0  OR (A.WH_CD =2 AND ST_FLAG_1 !='P')) AND A.ORDER_NO = B.PIECE_NO) AS FA LEFT JOIN (SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' ) AS FP ON FA.PARTY_CD = FP.PARTY_CODE ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(SUBSTRING(M.PIECE_NO,2,5),M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C) AS D GROUP BY FINYR ORDER BY FINYR DESC";
            strSQL += "SELECT JD AS FINYR, "
                    + "COALESCE(COUNT(PR_BILL_WEIGHT),0) AS 'TOTAL_COUNT', "
                    + "COALESCE(SUM(PR_BILL_WEIGHT),0) AS 'TOTAL_QTY', "
                    + "ROUND(COALESCE(SUM(PR_FELT_VALUE_WITH_GST),0),0) AS 'TOTAL_AMT' "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER, "
                    + "(SELECT DISTINCT YEAR_FROM,YEAR_TO,CONCAT(YEAR_FROM,'-04-01') AS DF,CONCAT(YEAR_TO,'-03-31') AS DT,CONCAT(YEAR_FROM,'-',YEAR_TO) AS JD FROM DINESHMILLS.D_COM_FIN_YEAR ) AS FIN, "
                    + "PRODUCTION.FELT_QLT_RATE_MASTER "
                    + "WHERE ";
            if (withoutobsolete.isSelected()) {
                strSQL = strSQL + " COALESCE(PR_DELINK,'')!='OBSOLETE' AND ";
            }
            strSQL = strSQL + " PR_PIECE_STAGE IN ('IN STOCK') AND PR_FNSG_DATE >=DF AND PR_FNSG_DATE <=DT "
                    + "AND PRODUCT_CODE =PR_PRODUCT_CODE AND EFFECTIVE_TO ='0000-00-00' "
                    + "GROUP BY JD "
                    + "ORDER BY JD DESC ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtmisageingtotal1.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[5];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("TOTAL_COUNT");
                    rowData[3] = rsTmp.getString("TOTAL_QTY");
                    rowData[4] = rsTmp.getString("TOTAL_AMT");

                    DataModelMISAgeing1.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }

    private void FormatGridMISAgeing() {
        DataModelMISAgeing = new EITLTableModel();
        TableMISAgeing.removeAll();
        TableMISAgeing.setModel(DataModelMISAgeing);

        TableMISAgeing.setAutoResizeMode(TableMISAgeing.AUTO_RESIZE_OFF);
        DataModelMISAgeing.addColumn("Sr.");
        //DataModelSalesM.addColumn("Party Code");
        DataModelMISAgeing.addColumn("Fin Year");
        DataModelMISAgeing.addColumn("Product Code");
        DataModelMISAgeing.addColumn("Item Desc");
        DataModelMISAgeing.addColumn("Total Count");
        DataModelMISAgeing.addColumn("Total QTY");
        DataModelMISAgeing.addColumn("Total Amt");

        DataModelMISAgeing.TableReadOnly(true);
        TableMISAgeing.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridMISAgeing1() {
        DataModelMISAgeing1 = new EITLTableModel();
        TableMISAgeing1.removeAll();
        TableMISAgeing1.setModel(DataModelMISAgeing1);

        TableMISAgeing1.setAutoResizeMode(TableMISAgeing1.AUTO_RESIZE_OFF);
        DataModelMISAgeing1.addColumn("Sr.");
        //DataModelSalesM.addColumn("Party Code");
        DataModelMISAgeing1.addColumn("Fin Year");
        DataModelMISAgeing1.addColumn("Total Count");
        DataModelMISAgeing1.addColumn("Total QTY");
        DataModelMISAgeing1.addColumn("Total Amt");
        DataModelMISAgeing1.TableReadOnly(true);
        TableMISAgeing1.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    //Machine 
    private void GenerateMachine_old() {
        String cndtn = "";
        try {
            FormatGridMachine(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String Machineno = txtMachineNo.getText().toString();
            String Position = txtPosition.getText().toString();
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND D.MM_PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtproductcode.getText().equals("")) {
                //cndtn += " AND D.MM_ITEM_CODE LIKE '" + ItemCode + "%'";
                cndtn += " AND D.MM_ITEM_CODE IN (" + ItemCode + ") ";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND D.MM_MACHINE_NO= '" + Machineno + "' ";
            }
            if (!txtPosition.getText().equals("")) {
                cndtn += " AND D.MM_MACHINE_POSITION= '" + Position + "' ";
            }
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND D.MM_FELT_LENGTH+D.MM_FABRIC_LENGTH >= '" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND D.MM_FELT_LENGTH+D.MM_FABRIC_LENGTH <= '" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND D.MM_FELT_WIDTH+D.MM_FABRIC_WIDTH >= '" + Widthfrom + "' ";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND D.MM_FELT_WIDTH+D.MM_FABRIC_WIDTH <= '" + Widthto + "' ";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND D.MM_FELT_GSM >= '" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += " AND D.MM_FELT_GSM <= '" + GSMto + "' ";
            }
            if (!txtupnno.getText().equals("")) {
                cndtn += " AND D.MM_UPN_NO = '" + txtupnno.getText().trim() + "' ";
            }

            int machineType = cmbMachineType.getSelectedIndex();
            if (machineType == 0) {
                cndtn += " AND D.POSITION_CLOSE_IND!=1 ";
            }
            if (machineType == 1) {
                cndtn += " AND D.POSITION_CLOSE_IND=1 ";
            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
            //strSQL = "SELECT MM_DOC_NO,MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 " + cndtn + ")  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ";
            strSQL = "SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,INCHARGE_NAME,CITY_ID,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,MM_UPN_NO,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,D.MM_DRIVE_TYPE MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,D.MM_UPN_NO FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 " + cndtn + ")  AS MM LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,CITY_ID,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE LEFT JOIN (SELECT INCHARGE_NAME,INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE) AS RJ ON RJ.INCHARGE_CD = PM.INCHARGE_CD ";

            int Orderby = cmbMachine.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                strSQL += " ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_NO ";
            }
            if (Orderby == 2) {
                strSQL += " ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION ";
            }

            cmbMachineModel = new EITLComboModel();
            cmbMachine.removeAllItems();
            cmbMachine.setModel(cmbMachineModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "MACHINE NO";
            cmbMachineModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "MACHINE POSITION NO";
            cmbMachineModel.addElement(aData);

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtMachineTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MM_DOC_NO");
                    rowData[2] = rsTmp.getString("MM_PARTY_CODE");
                    rowData[3] = rsTmp.getString("PARTY_NAME");
                    rowData[4] = rsTmp.getString("INCHARGE_NAME");
                    rowData[5] = rsTmp.getString("CITY_ID");
                    rowData[6] = rsTmp.getString("MM_MACHINE_NO");
                    rowData[7] = rsTmp.getString("MM_MACHINE_TYPE_FORMING");
                    rowData[8] = rsTmp.getString("MM_PAPER_GRADE");
                    rowData[9] = rsTmp.getString("MM_MACHINE_SPEED_RANGE");
                    rowData[10] = rsTmp.getString("MM_PAPER_GSM_RANGE");
                    rowData[11] = rsTmp.getString("MM_MACHINE_TYPE_PRESSING");
                    rowData[12] = rsTmp.getString("MM_FURNISH");
                    rowData[13] = rsTmp.getString("MM_TYPE_OF_FILLER");
                    rowData[14] = rsTmp.getString("MM_WIRE_DETAIL_1");
                    rowData[15] = rsTmp.getString("MM_WIRE_DETAIL_2");
                    rowData[16] = rsTmp.getString("MM_WIRE_DETAIL_3");
                    rowData[17] = rsTmp.getString("MM_WIRE_DETAIL_4");
                    rowData[18] = rsTmp.getString("MM_PAPER_DECKLE_AFTER_WIRE");
                    rowData[19] = rsTmp.getString("MM_PAPER_DECKLE_AFTER_PRESS");
                    rowData[20] = rsTmp.getString("MM_PAPER_DECKLE_AT_POPE_REEL");
                    rowData[21] = rsTmp.getString("MM_DRYER_SECTION");
                    rowData[22] = rsTmp.getString("MM_ZONE");
                    rowData[23] = rsTmp.getString("MM_CAPACITY");
                    rowData[24] = rsTmp.getString("MM_MACHINE_STATUS");
                    rowData[25] = rsTmp.getString("MM_ZONE_REPRESENTATIVE");
                    rowData[26] = rsTmp.getString("MM_DATE_OF_UPDATE");
                    rowData[27] = rsTmp.getString("MM_TOTAL_DRYER_GROUP");
                    rowData[28] = rsTmp.getString("MM_UNIRUM_GROUP");
                    rowData[29] = rsTmp.getString("MM_CONVENTIONAL_GROUP");
                    rowData[30] = rsTmp.getString("MM_HOOD_TYPE");
                    rowData[31] = rsTmp.getString("MM_SIZE_PRESS");
                    rowData[32] = rsTmp.getString("MM_SIZE_PRESS_POSITION");
                    rowData[33] = rsTmp.getString("MM_SHEET_DRYNESS_SIZE_PRESS");
                    rowData[34] = rsTmp.getString("MM_MACHINE_POSITION");
                    rowData[35] = rsTmp.getString("MM_MACHINE_POSITION_DESC");
                    rowData[36] = rsTmp.getString("MM_COMBINATION_CODE");
                    rowData[37] = rsTmp.getString("MM_PRESS_TYPE");
                    rowData[38] = rsTmp.getString("MM_PRESS_ROLL_DAI_MM");
                    rowData[39] = rsTmp.getString("MM_PRESS_ROLL_FACE_TOTAL_MM");
                    rowData[40] = rsTmp.getString("MM_PRESS_ROLL_FACE_NET_MM");
                    rowData[41] = rsTmp.getString("MM_FELT_ROLL_WIDTH_MM");
                    rowData[42] = rsTmp.getString("MM_PRESS_LOAD");
                    rowData[43] = rsTmp.getString("MM_VACCUM_CAPACITY");
                    rowData[44] = rsTmp.getString("MM_UHLE_BOX");
                    rowData[45] = rsTmp.getString("MM_HP_SHOWER");
                    rowData[46] = rsTmp.getString("MM_LP_SHOWER");
                    rowData[47] = rsTmp.getString("MM_FELT_LENGTH");
                    rowData[48] = rsTmp.getString("MM_FELT_WIDTH");
                    rowData[49] = rsTmp.getString("MM_FELT_GSM");
                    rowData[50] = rsTmp.getString("MM_FELT_WEIGHT");
                    rowData[51] = rsTmp.getString("MM_FELT_TYPE");
                    rowData[52] = rsTmp.getString("MM_FELT_STYLE");
                    rowData[53] = rsTmp.getString("MM_AVG_LIFE");
                    rowData[54] = rsTmp.getString("MM_AVG_PRODUCTION");
                    rowData[55] = rsTmp.getString("MM_FELT_CONSUMPTION");
                    rowData[56] = rsTmp.getString("MM_DINESH_SHARE");
                    rowData[57] = rsTmp.getString("MM_REMARK_DESIGN");
                    rowData[58] = rsTmp.getString("MM_REMARK_GENERAL");
                    rowData[59] = rsTmp.getString("MM_NO_DRYER_CYLINDER");
                    rowData[60] = rsTmp.getString("MM_CYLINDER_DIA_MM");
                    rowData[61] = rsTmp.getString("MM_CYLINDER_FACE_NET_MM");
                    rowData[62] = rsTmp.getString("MM_DRIVE_TYPE");
                    rowData[63] = rsTmp.getString("MM_GUIDE_TYPE");
                    rowData[64] = rsTmp.getString("MM_GUIDE_PAM_TYPE");
                    rowData[65] = rsTmp.getString("MM_VENTILATION_TYPE");
                    rowData[66] = rsTmp.getString("MM_FABRIC_LENGTH");
                    rowData[67] = rsTmp.getString("MM_FABRIC_WIDTH");
                    rowData[68] = rsTmp.getString("MM_SIZE_M2");
                    rowData[69] = rsTmp.getString("MM_SCREEN_TYPE");
                    rowData[70] = rsTmp.getString("MM_STYLE_DRY");
                    rowData[71] = rsTmp.getString("MM_CFM_DRY");
                    rowData[72] = rsTmp.getString("MM_AVG_LIFE_DRY");
                    rowData[73] = rsTmp.getString("MM_CONSUMPTION_DRY");
                    rowData[74] = rsTmp.getString("MM_DINESH_SHARE_DRY");
                    rowData[75] = rsTmp.getString("MM_REMARK_DRY");
                    rowData[76] = rsTmp.getString("MM_ITEM_CODE");
                    rowData[77] = rsTmp.getString("MM_GRUP");
                    rowData[78] = rsTmp.getString("MM_UPN_NO");

                    DataModelMachine.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMachine_old() {
        DataModelMachine = new EITLTableModel();
        TableMachine.removeAll();
        TableMachine.setModel(DataModelMachine);

        TableMachine.setAutoResizeMode(TableMachine.AUTO_RESIZE_OFF);

        DataModelMachine.addColumn("Sr.");
        DataModelMachine.addColumn("MM_DOC_NO");
        DataModelMachine.addColumn("MM_PARTY_CODE");
        DataModelMachine.addColumn("MM_PARTY_NAME");
        DataModelMachine.addColumn("MM_INCHARGE_NAME");
        DataModelMachine.addColumn("MM_STATION");
        DataModelMachine.addColumn("MM_MACHINE_NO");
        DataModelMachine.addColumn("MM_MACHINE_TYPE_FORMING");
        DataModelMachine.addColumn("MM_PAPER_GRADE");
        DataModelMachine.addColumn("MM_MACHINE_SPEED_RANGE");
        DataModelMachine.addColumn("MM_PAPER_GSM_RANGE");
        DataModelMachine.addColumn("MM_MACHINE_TYPE_PRESSING");
        DataModelMachine.addColumn("MM_FURNISH");
        DataModelMachine.addColumn("MM_TYPE_OF_FILLER");
        DataModelMachine.addColumn("MM_WIRE_DETAIL_1");
        DataModelMachine.addColumn("MM_WIRE_DETAIL_2");
        DataModelMachine.addColumn("MM_WIRE_DETAIL_3");
        DataModelMachine.addColumn("MM_WIRE_DETAIL_4");
        DataModelMachine.addColumn("MM_PAPER_DECKLE_AFTER_WIRE");
        DataModelMachine.addColumn("MM_PAPER_DECKLE_AFTER_PRESS");
        DataModelMachine.addColumn("MM_PAPER_DECKLE_AT_POPE_REEL");
        DataModelMachine.addColumn("MM_DRYER_SECTION");
        DataModelMachine.addColumn("MM_ZONE");
        DataModelMachine.addColumn("MM_CAPACITY");
        DataModelMachine.addColumn("MM_MACHINE_STATUS");
        DataModelMachine.addColumn("MM_ZONE_REPRESENTATIVE");
        DataModelMachine.addColumn("MM_DATE_OF_UPDATE");
        DataModelMachine.addColumn("MM_TOTAL_DRYER_GROUP");
        DataModelMachine.addColumn("MM_UNIRUM_GROUP");
        DataModelMachine.addColumn("MM_CONVENTIONAL_GROUP");
        DataModelMachine.addColumn("MM_HOOD_TYPE");
        DataModelMachine.addColumn("MM_SIZE_PRESS");
        DataModelMachine.addColumn("MM_SIZE_PRESS_POSITION");
        DataModelMachine.addColumn("MM_SHEET_DRYNESS_SIZE_PRESS");
        DataModelMachine.addColumn("MM_MACHINE_POSITION");
        DataModelMachine.addColumn("MM_MACHINE_POSITION_DESC");
        DataModelMachine.addColumn("MM_COMBINATION_CODE");
        DataModelMachine.addColumn("MM_PRESS_TYPE");
        DataModelMachine.addColumn("MM_PRESS_ROLL_DAI_MM");
        DataModelMachine.addColumn("MM_PRESS_ROLL_FACE_TOTAL_MM");
        DataModelMachine.addColumn("MM_PRESS_ROLL_FACE_NET_MM");
        DataModelMachine.addColumn("MM_FELT_ROLL_WIDTH_MM");
        DataModelMachine.addColumn("MM_PRESS_LOAD");
        DataModelMachine.addColumn("MM_VACCUM_CAPACITY");
        DataModelMachine.addColumn("MM_UHLE_BOX");
        DataModelMachine.addColumn("MM_HP_SHOWER");
        DataModelMachine.addColumn("MM_LP_SHOWER");
        DataModelMachine.addColumn("MM_FELT_LENGTH");
        DataModelMachine.addColumn("MM_FELT_WIDTH");
        DataModelMachine.addColumn("MM_FELT_GSM");
        DataModelMachine.addColumn("MM_FELT_WEIGHT");
        DataModelMachine.addColumn("MM_FELT_TYPE");
        DataModelMachine.addColumn("MM_FELT_STYLE");
        DataModelMachine.addColumn("MM_AVG_LIFE");
        DataModelMachine.addColumn("MM_AVG_PRODUCTION");
        DataModelMachine.addColumn("MM_FELT_CONSUMPTION");
        DataModelMachine.addColumn("MM_DINESH_SHARE");
        DataModelMachine.addColumn("MM_REMARK_DESIGN");
        DataModelMachine.addColumn("MM_REMARK_GENERAL");
        DataModelMachine.addColumn("MM_NO_DRYER_CYLINDER");
        DataModelMachine.addColumn("MM_CYLINDER_DIA_MM");
        DataModelMachine.addColumn("MM_CYLINDER_FACE_NET_MM");
        DataModelMachine.addColumn("MM_DRIVE_TYPE");
        DataModelMachine.addColumn("MM_GUIDE_TYPE");
        DataModelMachine.addColumn("MM_GUIDE_PAM_TYPE");
        DataModelMachine.addColumn("MM_VENTILATION_TYPE");
        DataModelMachine.addColumn("MM_FABRIC_LENGTH");
        DataModelMachine.addColumn("MM_FABRIC_WIDTH");
        DataModelMachine.addColumn("MM_SIZE_M2");
        DataModelMachine.addColumn("MM_SCREEN_TYPE");
        DataModelMachine.addColumn("MM_STYLE_DRY");
        DataModelMachine.addColumn("MM_CFM_DRY");
        DataModelMachine.addColumn("MM_AVG_LIFE_DRY");
        DataModelMachine.addColumn("MM_CONSUMPTION_DRY");
        DataModelMachine.addColumn("MM_DINESH_SHARE_DRY");
        DataModelMachine.addColumn("MM_REMARK_DRY");
        DataModelMachine.addColumn("MM_ITEM_CODE");
        DataModelMachine.addColumn("MM_GRUP");
        DataModelMachine.addColumn("MM_UPN_NO");

        DataModelMachine.TableReadOnly(true);
        TableMachine.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridSalesParty() {
        DataModelSalesParty = new EITLTableModel();
        TableSalesParty.removeAll();
        TableSalesParty.setModel(DataModelSalesParty);

        TableSalesParty.setAutoResizeMode(TableSalesParty.AUTO_RESIZE_OFF);

        DataModelSalesParty.addColumn("Sr.");
        DataModelSalesParty.addColumn("GROUP CODE");//1
        DataModelSalesParty.addColumn("GROUP DESC");//1
        DataModelSalesParty.addColumn("PARTY CODE");//1
        DataModelSalesParty.addColumn("PARTY NAME ");//4
        DataModelSalesParty.addColumn("CHARGE CODE");//7
        DataModelSalesParty.addColumn("ADDRESS1");//8
        DataModelSalesParty.addColumn("ADDRESS2");//9
        DataModelSalesParty.addColumn("PINCODE");//10
        DataModelSalesParty.addColumn("CITY ID");//11
        DataModelSalesParty.addColumn("GSTIN NO");//39
        DataModelSalesParty.addColumn("GSTIN DATE");//40
        DataModelSalesParty.addColumn("STATE");//41
        DataModelSalesParty.addColumn("STATE GST CODE");//42
        DataModelSalesParty.addColumn("STATE CODE");//43
        DataModelSalesParty.addColumn("DISPATCH STATION");//13
        DataModelSalesParty.addColumn("DISTRICT");//14
        DataModelSalesParty.addColumn("PHONE NO");//15
        DataModelSalesParty.addColumn("MOBILE NO");//16
        DataModelSalesParty.addColumn("EMAIL");//17
        DataModelSalesParty.addColumn("CONTACT PERSON");//18
        DataModelSalesParty.addColumn("BANK ID");//19
        DataModelSalesParty.addColumn("BANK NAME");//20
        DataModelSalesParty.addColumn("BANK ADDRESS");//21
        DataModelSalesParty.addColumn("BANK CITY");//22
        DataModelSalesParty.addColumn("TRANSPORTER ID");//23
        DataModelSalesParty.addColumn("TRANSPORTER NAME");//24
        DataModelSalesParty.addColumn("PAN NO");//25
        DataModelSalesParty.addColumn("PAN DATE");//26
        DataModelSalesParty.addColumn("INSURANCE CODE");//27
        DataModelSalesParty.addColumn("INCHARGE NAME");//28
        DataModelSalesParty.addColumn("COUNTRY ID");//29
        DataModelSalesParty.addColumn("GROUP CRITICAL LIMIT AMOUNT");//29
        DataModelSalesParty.addColumn("PARTY CRITICAL LIMIT AMOUNT");//29
        DataModelSalesParty.addColumn("PARTY ACTIVE");//29
        DataModelSalesParty.addColumn("CASH DISCOUNT");//29
        DataModelSalesParty.addColumn("YEAR END DISCOUNT");//29
        DataModelSalesParty.addColumn("O/S AMT");
        DataModelSalesParty.addColumn("ADV AMT");
        DataModelSalesParty.addColumn("RUN TIME");

        DataModelSalesParty.TableReadOnly(true);
        TableSalesParty.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridOrder_old() {
        DataModelOrder = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModelOrder);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModelOrder.addColumn("Sr.");
        DataModelOrder.addColumn("ORDER NO");//1
        DataModelOrder.addColumn("ORDER DATE");//1
        DataModelOrder.addColumn("PIECE NO ");//4
        DataModelOrder.addColumn("SALES ENGINEER");//7
        DataModelOrder.addColumn("PARTY CODE");//8
        DataModelOrder.addColumn("PARTY NAME");//9
        DataModelOrder.addColumn("REFERENCE");//10
        DataModelOrder.addColumn("REFERENCE DATE");//11
        DataModelOrder.addColumn("PO NO");//39
        DataModelOrder.addColumn("PO DATE");//40
        DataModelOrder.addColumn("MACHINE NO");//41
        DataModelOrder.addColumn("POSITION");//42
        DataModelOrder.addColumn("POSITION DESC");//43
        DataModelOrder.addColumn("PRODUCT CODE");//42
        DataModelOrder.addColumn("PRODUCT DESC");//43
        DataModelOrder.addColumn("GROUP");//13
        DataModelOrder.addColumn("LENGTH");//14
        DataModelOrder.addColumn("WIDTH");//15
        DataModelOrder.addColumn("GSM");//16
        DataModelOrder.addColumn("THEORETICAL WEIGHT");//17
        DataModelOrder.addColumn("SQMTR");//18
        DataModelOrder.addColumn("STYLE");//19
        DataModelOrder.addColumn("REQ MONTH");//20
        DataModelOrder.addColumn("SYN PER");//21
        DataModelOrder.addColumn("RATE");//23
        DataModelOrder.addColumn("BASE AMOUNT");//24
        DataModelOrder.addColumn("CHEM TRT CHG");//25
        DataModelOrder.addColumn("SPIRAL CHG");//26
        DataModelOrder.addColumn("PIN CHG");//27
        DataModelOrder.addColumn("SEAM CHG");//28
        DataModelOrder.addColumn("INS IND");//29
        DataModelOrder.addColumn("INS AMT");//29
        DataModelOrder.addColumn("EXCISE");//29
        DataModelOrder.addColumn("DISC PER");//29
        DataModelOrder.addColumn("DISC AMT");//29
        DataModelOrder.addColumn("DISC BASE AMT");//29
        DataModelOrder.addColumn("AMT");//29
        DataModelOrder.addColumn("ORDER DETAIL CODE");//29
        DataModelOrder.addColumn("CGST PER");//29
        DataModelOrder.addColumn("CGST AMT");//29
        DataModelOrder.addColumn("SGST PER");//29
        DataModelOrder.addColumn("SGSR AMT");//29
        DataModelOrder.addColumn("IGST PER");//29
        DataModelOrder.addColumn("IGST AMT");//29
        DataModelOrder.addColumn("COMPOSITION PER");//29
        DataModelOrder.addColumn("COMPOSITION AMT");//29
        DataModelOrder.addColumn("RCM PER");//29
        DataModelOrder.addColumn("RCM AMT");//29
        DataModelOrder.addColumn("GST COMPENSATION CESS PER");//29
        DataModelOrder.addColumn("GST COMPENSATION CESS AMT");//29
        DataModelOrder.addColumn("BILL LENGTH");//29
        DataModelOrder.addColumn("BILL WIDTH");//29
        DataModelOrder.addColumn("BILL WEIGHT");//29
        DataModelOrder.addColumn("BILL SQMTR");//29
        DataModelOrder.addColumn("BILL GSM");//29
        DataModelOrder.addColumn("BILL PRODUCT CODE");//29
        DataModelOrder.addColumn("STATUS");//29
        DataModelOrder.addColumn("USER NAME");//29
        DataModelOrder.addColumn("UPN");//29

        DataModelOrder.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridPieceMFGRejection_old() {
        DataModelPieceMFGRejection = new EITLTableModel();
        TablePieceMFGRejection.removeAll();
        TablePieceMFGRejection.setModel(DataModelPieceMFGRejection);

        TablePieceMFGRejection.setAutoResizeMode(TablePieceMFGRejection.AUTO_RESIZE_OFF);

        DataModelPieceMFGRejection.addColumn("Sr.");
        DataModelPieceMFGRejection.addColumn("PIECE NO");//1
        DataModelPieceMFGRejection.addColumn("PR DATE");//1
        DataModelPieceMFGRejection.addColumn("ORDER DATE");//1
        DataModelPieceMFGRejection.addColumn("DOC NO ");//4
        DataModelPieceMFGRejection.addColumn("MACHINE NO");//7
        DataModelPieceMFGRejection.addColumn("POSITION NO");//8
        DataModelPieceMFGRejection.addColumn("PARTY CODE");//9
        DataModelPieceMFGRejection.addColumn("PRODUCT CODE");//10
        DataModelPieceMFGRejection.addColumn("GROUP");//11
        DataModelPieceMFGRejection.addColumn("STYLE");//39
        DataModelPieceMFGRejection.addColumn("LENGTH");//40
        DataModelPieceMFGRejection.addColumn("WIDTH");//41
        DataModelPieceMFGRejection.addColumn("GSM");//42
        DataModelPieceMFGRejection.addColumn("THORITICAL WEIGHT");//43
        DataModelPieceMFGRejection.addColumn("SQMTR");//13
        DataModelPieceMFGRejection.addColumn("SYN PER");//14
        DataModelPieceMFGRejection.addColumn("REQUESTED MONTH");//15
        DataModelPieceMFGRejection.addColumn("REGION");//16
        DataModelPieceMFGRejection.addColumn("INCAHRGE");//17
        DataModelPieceMFGRejection.addColumn("REFENECE");//18
        DataModelPieceMFGRejection.addColumn("REFENECE DATE");//19
        DataModelPieceMFGRejection.addColumn("PO NO");//20
        DataModelPieceMFGRejection.addColumn("PO DATE");//21
        DataModelPieceMFGRejection.addColumn("ORDER REMARK");//22
        DataModelPieceMFGRejection.addColumn("PIECE REMARK");//23
        DataModelPieceMFGRejection.addColumn("PIECE STAGE");//24
        DataModelPieceMFGRejection.addColumn("WARPING DATE");//25
        DataModelPieceMFGRejection.addColumn("WEAVING DATE");//26
        DataModelPieceMFGRejection.addColumn("MENDING DATE");//27
        DataModelPieceMFGRejection.addColumn("NEEDLING DATE");//28
        DataModelPieceMFGRejection.addColumn("FINISING DATE");//29
        DataModelPieceMFGRejection.addColumn("RECEVIED DATE");//29
        DataModelPieceMFGRejection.addColumn("ACTUAL WEIGHT");//29
        DataModelPieceMFGRejection.addColumn("ACTUAL LENGTH");//29
        DataModelPieceMFGRejection.addColumn("ACTUAL WIDTH");//29
        DataModelPieceMFGRejection.addColumn("BALE NO");//29
        DataModelPieceMFGRejection.addColumn("DIVERSION FLAG");//29
        DataModelPieceMFGRejection.addColumn("PRIORITY HOLD CAN FLAG");//29
        DataModelPieceMFGRejection.addColumn("INVOICE NO");//29
        DataModelPieceMFGRejection.addColumn("INVOICE DATE");//29
        DataModelPieceMFGRejection.addColumn("HOLD REASON");//29
        DataModelPieceMFGRejection.addColumn("BILL LENGTH");//29
        DataModelPieceMFGRejection.addColumn("BILL WIDTH");//29
        DataModelPieceMFGRejection.addColumn("BILL WEIGHT");//29
        DataModelPieceMFGRejection.addColumn("BILL SQMTR");//29
        DataModelPieceMFGRejection.addColumn("BILL GSM");//29
        DataModelPieceMFGRejection.addColumn("BILL PRODUCT CODE");//29
        DataModelPieceMFGRejection.addColumn("BILL STYLE");//29
        DataModelPieceMFGRejection.addColumn("DELINK");//29
        DataModelPieceMFGRejection.addColumn("DELINK REASON");//29
        DataModelPieceMFGRejection.addColumn("UPN");//29

        DataModelPieceMFGRejection.TableReadOnly(true);
        TablePieceMFGRejection.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridPieceDelink() {
        DataModelDelink = new EITLTableModel();
        Table_Delink.removeAll();
        Table_Delink.setModel(DataModelDelink);

        Table_Delink.setAutoResizeMode(Table_Delink.AUTO_RESIZE_OFF);

        DataModelDelink.addColumn("Sr.");
        DataModelDelink.addColumn("PIECE NO");//1
        DataModelDelink.addColumn("PR DATE");//1
        DataModelDelink.addColumn("ORDER DATE");//1
        DataModelDelink.addColumn("DOC NO ");//4
        DataModelDelink.addColumn("MACHINE NO");//7
        DataModelDelink.addColumn("POSITION NO");//8
        DataModelDelink.addColumn("PARTY CODE");//9
        DataModelDelink.addColumn("PARTY NAME");//9
        DataModelDelink.addColumn("PRODUCT CODE");//10
        DataModelDelink.addColumn("GROUP");//11
        DataModelDelink.addColumn("STYLE");//39
        DataModelDelink.addColumn("LENGTH");//40
        DataModelDelink.addColumn("WIDTH");//41
        DataModelDelink.addColumn("GSM");//42
        DataModelDelink.addColumn("THORITICAL WEIGHT");//43
        DataModelDelink.addColumn("SQMTR");//13
        DataModelDelink.addColumn("SYN PER");//14
        DataModelDelink.addColumn("REQUESTED MONTH");//15
        DataModelDelink.addColumn("REGION");//16
        DataModelDelink.addColumn("INCAHRGE");//17
        DataModelDelink.addColumn("REFENECE");//18
        DataModelDelink.addColumn("REFENECE DATE");//19
        DataModelDelink.addColumn("PO NO");//20
        DataModelDelink.addColumn("PO DATE");//21
        DataModelDelink.addColumn("ORDER REMARK");//22
        DataModelDelink.addColumn("PIECE REMARK");//23
        DataModelDelink.addColumn("PIECE STAGE");//24
        DataModelDelink.addColumn("WARPING DATE");//25
        DataModelDelink.addColumn("WEAVING DATE");//26
        DataModelDelink.addColumn("MENDING DATE");//27
        DataModelDelink.addColumn("NEEDLING DATE");//28
        DataModelDelink.addColumn("FINISING DATE");//29
        DataModelDelink.addColumn("RECEVIED DATE");//29
        DataModelDelink.addColumn("ACTUAL WEIGHT");//29
        DataModelDelink.addColumn("ACTUAL LENGTH");//29
        DataModelDelink.addColumn("ACTUAL WIDTH");//29
        DataModelDelink.addColumn("BALE NO");//29
        DataModelDelink.addColumn("DIVERSION FLAG");//29
        DataModelDelink.addColumn("PRIORITY HOLD CAN FLAG");//29
        DataModelDelink.addColumn("INVOICE NO");//29
        DataModelDelink.addColumn("INVOICE DATE");//29
        DataModelDelink.addColumn("HOLD REASON");//29
        DataModelDelink.addColumn("BILL LENGTH");//29
        DataModelDelink.addColumn("BILL WIDTH");//29
        DataModelDelink.addColumn("BILL WEIGHT");//29
        DataModelDelink.addColumn("BILL SQMTR");//29
        DataModelDelink.addColumn("BILL GSM");//29
        DataModelDelink.addColumn("BILL PRODUCT CODE");//29
        DataModelDelink.addColumn("DELINK");//29
        DataModelDelink.addColumn("DELINK REASON");//29
        DataModelDelink.addColumn("UPN");//29

        DataModelDelink.TableReadOnly(true);
        Table_Delink.getColumnModel().getColumn(0).setMaxWidth(50);
        for (int i = 1; i < 51; i++) {
            Table_Delink.getColumnModel().getColumn(i).setMinWidth(120);
        }

    }

    private void FormatGridInvoiceParameterModification() {
        DataModelInvoiceParameterModification = new EITLTableModel();
        TableInvoiceParameterModi.removeAll();
        TableInvoiceParameterModi.setModel(DataModelInvoiceParameterModification);

        TableInvoiceParameterModi.setAutoResizeMode(TablePieceStage.AUTO_RESIZE_OFF);

        DataModelInvoiceParameterModification.addColumn("Sr.");
        DataModelInvoiceParameterModification.addColumn("APPROVAL STATUS");//1
        DataModelInvoiceParameterModification.addColumn("DOC NO");//2
        DataModelInvoiceParameterModification.addColumn("DOC DATE");//3
        DataModelInvoiceParameterModification.addColumn("PROCESSING DATE");//4
        DataModelInvoiceParameterModification.addColumn("PARTY CODE");//5
        DataModelInvoiceParameterModification.addColumn("PARTY NAME");//6
        DataModelInvoiceParameterModification.addColumn("BALE NO");//7
        DataModelInvoiceParameterModification.addColumn("BALE DATE");//8
        DataModelInvoiceParameterModification.addColumn("REMARKS");//9
        DataModelInvoiceParameterModification.addColumn("CHARGE CODE");//10
        DataModelInvoiceParameterModification.addColumn("F6");//11
        DataModelInvoiceParameterModification.addColumn("INSURANCE CODE");//12
        DataModelInvoiceParameterModification.addColumn("TRANSPORTER CODE");//13
        DataModelInvoiceParameterModification.addColumn("CRITICAL LIMIT");//14
        DataModelInvoiceParameterModification.addColumn("WITHOUT CRITICAL LIMIT");//15
        DataModelInvoiceParameterModification.addColumn("ADV DOC NO");//16
        DataModelInvoiceParameterModification.addColumn("ADV AGN IGST AMT");//17
        DataModelInvoiceParameterModification.addColumn("ADV AGN CGST AMT");//18
        DataModelInvoiceParameterModification.addColumn("ADV AGN SGST AMT");//19

        DataModelInvoiceParameterModification.TableReadOnly(true);
        TableInvoiceParameterModi.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridInvoiced_old() {
        DataModelInvoiced = new EITLTableModel();
        Table_INVOICED.removeAll();
        Table_INVOICED.setModel(DataModelInvoiced);

        Table_INVOICED.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelInvoiced.addColumn("Sr.");
        DataModelInvoiced.addColumn("APPROVAL_STATUS");
        DataModelInvoiced.addColumn("REMARKS");
        DataModelInvoiced.addColumn("INVOICE_NO");
        DataModelInvoiced.addColumn("INVOICE_DATE");
        DataModelInvoiced.addColumn("DUE_DATE");
        DataModelInvoiced.addColumn("BALE_NO");
        DataModelInvoiced.addColumn("PACKING_DATE");
        DataModelInvoiced.addColumn("PARTY_CODE");
        DataModelInvoiced.addColumn("PARTY_NAME");
        DataModelInvoiced.addColumn("DISPATCH_STATION");
        DataModelInvoiced.addColumn("NO_OF_PIECES");
        DataModelInvoiced.addColumn("PIECE_NO");
        DataModelInvoiced.addColumn("MACHINE_NO");
        DataModelInvoiced.addColumn("POSITION_NO");
        DataModelInvoiced.addColumn("POSITION_DESC");
        DataModelInvoiced.addColumn("PRODUCT_CODE");
        DataModelInvoiced.addColumn("PRODUCT_DESC");
        DataModelInvoiced.addColumn("STYLE");
        DataModelInvoiced.addColumn("LENGTH");
        DataModelInvoiced.addColumn("WIDTH");
        DataModelInvoiced.addColumn("GSM");
        DataModelInvoiced.addColumn("ACTUAL_WEIGHT");
        DataModelInvoiced.addColumn("SQMTR");
        DataModelInvoiced.addColumn("RATE");
        DataModelInvoiced.addColumn("RATE_UNIT");
        DataModelInvoiced.addColumn("DISC_PER");
        DataModelInvoiced.addColumn("CHARGE_CODE");
        DataModelInvoiced.addColumn("PARTY_CHARGE_CODE");
        DataModelInvoiced.addColumn("BAS_AMT");
        DataModelInvoiced.addColumn("DISC_AMT");
        DataModelInvoiced.addColumn("DISC_BAS_AMT");
        DataModelInvoiced.addColumn("SEAM_CHG");
        DataModelInvoiced.addColumn("CHEM_TRT_CHG");
        DataModelInvoiced.addColumn("PIN_CHG");
        DataModelInvoiced.addColumn("SPIRAL_CHG");
        DataModelInvoiced.addColumn("GROSS_AMT");
        DataModelInvoiced.addColumn("INSURANCE_AMT");
        DataModelInvoiced.addColumn("IGST_PER");
        DataModelInvoiced.addColumn("IGST_AMT");
        DataModelInvoiced.addColumn("CGST_PER");
        DataModelInvoiced.addColumn("CGST_AMT");
        DataModelInvoiced.addColumn("SGST_PER");
        DataModelInvoiced.addColumn("SGST_AMT");
        DataModelInvoiced.addColumn("NET_AMT");
        DataModelInvoiced.addColumn("INVOICE_AMT");
        DataModelInvoiced.addColumn("DESP_MODE");
        DataModelInvoiced.addColumn("TRANSPORTER_CODE");
        DataModelInvoiced.addColumn("TRANSPORTER_NAME");
        DataModelInvoiced.addColumn("GATEPASS_NO");
        DataModelInvoiced.addColumn("DOCUMENT_THROUGH");
        DataModelInvoiced.addColumn("PARTY_BANK_NAME");
        DataModelInvoiced.addColumn("PARTY_BANK_ADDRESS1");
        DataModelInvoiced.addColumn("PARTY_BANK_ADDRESS2");
        DataModelInvoiced.addColumn("HSN_CODE");
        DataModelInvoiced.addColumn("GSTIN_NO");
        DataModelInvoiced.addColumn("ADDRESS1");
        DataModelInvoiced.addColumn("ADDRESS2");
        DataModelInvoiced.addColumn("PINCODE");
        DataModelInvoiced.addColumn("CITY_ID");
        DataModelInvoiced.addColumn("PLACE_OF_SUPPLY");
        DataModelInvoiced.addColumn("FINYR");
        DataModelInvoiced.addColumn("PR_INVOICE_NO");
        DataModelInvoiced.addColumn("PR_INVOICE_DATE");
        DataModelInvoiced.addColumn("PR_BALE_NO");
        DataModelInvoiced.addColumn("PR_PACKED_DATE");
        DataModelInvoiced.addColumn("PR_PIECE_NO");
        DataModelInvoiced.addColumn("PR_DOC_NO");
        DataModelInvoiced.addColumn("PR_ORDER_DATE");
        DataModelInvoiced.addColumn("PR_REFERENCE");
        DataModelInvoiced.addColumn("PR_REFERENCE_DATE");
        DataModelInvoiced.addColumn("PR_PO_NO");
        DataModelInvoiced.addColumn("PR_PO_DATE");
        DataModelInvoiced.addColumn("PR_GROUP");
        DataModelInvoiced.addColumn("PR_WVG_DATE");
        DataModelInvoiced.addColumn("PR_MND_DATE");
        DataModelInvoiced.addColumn("PR_NDL_DATE");
        DataModelInvoiced.addColumn("PR_FNSG_DATE");
        DataModelInvoiced.addColumn("PR_INCHARGE");
        DataModelInvoiced.addColumn("PR_LENGTH");
        DataModelInvoiced.addColumn("PR_ACTUAL_LENGTH");
        DataModelInvoiced.addColumn("PR_BILL_LENGTH");
        DataModelInvoiced.addColumn("PR_WIDTH");
        DataModelInvoiced.addColumn("PR_ACTUAL_WIDTH");
        DataModelInvoiced.addColumn("PR_BILL_WIDTH");
        DataModelInvoiced.addColumn("PR_THORITICAL_WEIGHT");
        DataModelInvoiced.addColumn("PR_ACTUAL_WEIGHT");
        DataModelInvoiced.addColumn("PR_BILL_WEIGHT");
        DataModelInvoiced.addColumn("PR_GSM");
        DataModelInvoiced.addColumn("PR_BILL_GSM");
        DataModelInvoiced.addColumn("PR_PRODUCT_CODE");
        DataModelInvoiced.addColumn("PR_BILL_PRODUCT_CODE");
        DataModelInvoiced.addColumn("PR_INVOICE_PARTY");
        DataModelInvoiced.addColumn("PR_PARTY_CODE_ORIGINAL");
        DataModelInvoiced.addColumn("PR_PIECE_NO_ORIGINAL");
        DataModelInvoiced.addColumn("LR_INVOICE_NO");
        DataModelInvoiced.addColumn("LR_INVOICE_DATE");
        DataModelInvoiced.addColumn("LR_NO");
        DataModelInvoiced.addColumn("LR_DATE");
        DataModelInvoiced.addColumn("CARRIER");
        DataModelInvoiced.addColumn("FREIGHT");
        DataModelInvoiced.addColumn("LR_REMARK");

        DataModelInvoiced.TableReadOnly(true);
        Table_INVOICED.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateInvoiced_old() {
        String cndtn = "";
        String orderBy = "";

        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridInvoiced(); //clear existing content of table
            ResultSet rsTmp;

//-------------------------------------------------------------------------------------------------------------------
            int status = cmbInvStatus.getSelectedIndex();
            if (status == 3) {

                cndtn += "";
            }
            if (status == 0) {

                cndtn += " AND APPROVAL_STATUS='APPROVED' ";
            }
            if (status == 1) {

                cndtn += " AND APPROVAL_STATUS='UNAPPROVED' ";
            }
            if (status == 2) {

                cndtn += " AND APPROVAL_STATUS='CANCELLED' ";
            }

            String Party_Code = txtpartycode.getText();
            String Length_from = txtlengthfrom.getText();
            String Length_to = txtlengthto.getText();
            String Width_from = txtwidthfrom.getText();
            String Width_to = txtwidthto.getText();
            String GSM_from = txtgsmfrom.getText();
            String GSM_to = txtgsmto.getText();
            String Piece_No = txtpieceno.getText();
            String Product_Code = txtproductcode.getText();
            String Incharge = EITLERPGLOBAL.getComboCode(S_ENGINEER) + "";
            String From_date = txtdatefrom.getText();
            String To_date = txtdateto.getText();
            String MachineNo = txtMachineNo.getText();
            String Position = txtPosition.getText();

            if (!Party_Code.equals("")) {
                cndtn += " AND PARTY_CODE = '" + Party_Code + "' ";
            }

            if (!Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND LENGTH >=  '" + Length_from + "' AND LENGTH <=  '" + Length_to + "' ";
            } else if (!Length_from.equals("") && Length_to.equals("")) {
                cndtn += " AND LENGTH >= '" + Length_from + "' ";
            } else if (Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND LENGTH <= '" + Length_to + "' ";
            }

            if (!Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND WIDTH >= '" + Width_from + "' AND WIDTH <= '" + Width_to + "' ";
            } else if (!Width_from.equals("") && Width_to.equals("")) {
                cndtn += " AND WIDTH >= '" + Width_from + "' ";
            } else if (Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND WIDTH <= '" + Width_to + "' ";
            }

            if (!GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND GSM >=  '" + GSM_from + "' AND GSM <= '" + GSM_to + "' ";
            } else if (!GSM_from.equals("") && GSM_to.equals("")) {
                cndtn += " AND GSM >= '" + GSM_from + "' ";
            } else if (GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND GSM <= '" + GSM_to + "' ";
            }

            if (!Piece_No.equals("")) {
                String[] Pieces = Piece_No.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }

                cndtn += ")";
            }

            if (!Product_Code.equals("")) {

                //Addition using (,)
                String[] Products = Product_Code.split(",");
                for (int i = 0; i < Products.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!Incharge.equals("0")) {
                cndtn += " AND PR_INCHARGE = '" + Incharge + "' ";
            }

            if (!MachineNo.equals("")) {
                cndtn += " AND MACHINE_NO = '" + MachineNo + "' ";
            }

            if (!Position.equals("")) {
                cndtn += " AND POSITION_NO = '" + Position + "' ";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND INVOICE_DATE >= '" + df1.format(df.parse(From_date)) + "' AND INVOICE_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND INVOICE_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND INVOICE_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            int Orderby = cmbInvOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                orderBy += " ORDER BY INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 2) {

                orderBy += " ORDER BY PARTY_CODE,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 3) {

                orderBy += " ORDER BY PIECE_NO,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 4) {

                orderBy += " ORDER BY BALE_NO,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 5) {

                orderBy += " ORDER BY PRODUCT_CODE,INVOICE_DATE DESC,INVOICE_NO ";
            }

            cmbInvOrderByModel = new EITLComboModel();
            cmbInvOrderBy.removeAllItems();
            cmbInvOrderBy.setModel(cmbInvOrderByModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "Select Order";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "Party Code";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "Piece No";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 4;
            aData.Text = "Bale No";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 5;
            aData.Text = "Product Code";
            cmbInvOrderByModel.addElement(aData);

//------------------------------------------------------------------------------------------------------------------------------------
            String strSQL = "";

//            strSQL = "SELECT GROUP_CODE,GROUP_DESC,PARTY_ACTIVE,GROUP_CRITICAL_LIMIT,AMOUNT_LIMIT,CASH_DISC_FLAG,YEAR_END_DISC_FLAG,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID,TRANSPORTER_NAME,PAN_NO,PAN_DATE,INSURANCE_CODE,COUNTRY_ID,INCHARGE_NAME FROM(SELECT AMOUNT_LIMIT,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID AS TRANSPORTER,PAN_NO,PAN_DATE,INSURANCE_CODE,INCHARGE_CD,COUNTRY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE  MAIN_ACCOUNT_CODE=210010 ) AS JR LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AB ON JR.INCHARGE_CD=AB.INCHARGE_CD LEFT JOIN ( SELECT TRANSPORTER_ID,TRANSPORTER_NAME FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER ) AC ON JR.TRANSPORTER=AC.TRANSPORTER_ID LEFT JOIN(SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_CODE AS PARTY,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG FROM PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE D.GROUP_CODE=E.GROUP_CODE AND D.APPROVED=1 AND D.CANCELED=0)  AS JJ ON  JJ.PARTY=JR.PARTY_CODE " + cndtn + "";
            strSQL = "SELECT * FROM(SELECT * FROM(SELECT ";
            strSQL += "CASE WHEN H.APPROVED = 0 AND H.CANCELLED = 0 THEN 'UNAPPROVED' WHEN H.APPROVED = 1 AND H.CANCELLED = 0 THEN 'APPROVED' WHEN H.APPROVED = 0 AND H.CANCELLED = 1 THEN 'CANCELLED' END AS APPROVAL_STATUS, ";
            strSQL += "CANCEL_REASON,INVOICE_NO,INVOICE_DATE,DUE_DATE,BALE_NO,PACKING_DATE,PARTY_CODE,PARTY_NAME,DISPATCH_STATION,NO_OF_PIECES,PIECE_NO,MACHINE_NO,POSITION_NO,POSITION_DESC,PRODUCT_CODE,PRODUCT_DESC,STYLE,LENGTH,WIDTH,GSM,ACTUAL_WEIGHT,SQMTR,RATE,RATE_UNIT,DISC_PER, ";
            strSQL += "CHARGE_CODE,PARTY_CHARGE_CODE,BAS_AMT,DISC_AMT,DISC_BAS_AMT,SEAM_CHG,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,GROSS_AMT,INSURANCE_AMT,IGST_PER,IGST_AMT,CGST_PER,CGST_AMT,SGST_PER,SGST_AMT,NET_AMT,INVOICE_AMT, ";
            strSQL += "DESP_MODE,TRANSPORTER_CODE,TRANSPORTER_NAME,GATEPASS_NO,DOCUMENT_THROUGH,PARTY_BANK_NAME,PARTY_BANK_ADDRESS1,PARTY_BANK_ADDRESS2,HSN_CODE,GSTIN_NO,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,PLACE_OF_SUPPLY,FINYR ";
            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H) AS I ";
            strSQL += "LEFT JOIN ";
            strSQL += "(SELECT PR_INVOICE_NO, PR_INVOICE_DATE, PR_BALE_NO, PR_PACKED_DATE, PR_PIECE_NO, PR_DOC_NO, PR_ORDER_DATE, PR_REFERENCE, PR_REFERENCE_DATE, PR_PO_NO, PR_PO_DATE, PR_GROUP, PR_WVG_DATE, PR_MND_DATE, PR_NDL_DATE, PR_FNSG_DATE, PR_INCHARGE, PR_LENGTH, PR_ACTUAL_LENGTH, PR_BILL_LENGTH, PR_WIDTH, PR_ACTUAL_WIDTH, PR_BILL_WIDTH, PR_THORITICAL_WEIGHT, PR_ACTUAL_WEIGHT, PR_BILL_WEIGHT, PR_GSM, PR_BILL_GSM, PR_PRODUCT_CODE, PR_BILL_PRODUCT_CODE, PR_INVOICE_PARTY, PR_PARTY_CODE_ORIGINAL, PR_PIECE_NO_ORIGINAL ";
            strSQL += "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER) AS P ";
            strSQL += "ON PR_PACKED_DATE = PACKING_DATE ";
            strSQL += "AND BALE_NO = PR_BALE_NO ) AS IP ";
            strSQL += "LEFT JOIN ";
            strSQL += "(SELECT INVOICE_NO AS LR_INVOICE_NO, INVOICE_DATE AS LR_INVOICE_DATE, LR_NO, LR_DATE, CARRIER, FREIGHT, REMARKS AS LR_REMARK FROM PRODUCTION.FELT_SAL_INVOICE_EXTRA_DETAIL WHERE APPROVED = 1 ) AS IE ";
            strSQL += "ON IE.LR_INVOICE_NO = IP.INVOICE_NO AND IE.LR_INVOICE_DATE = IP.INVOICE_DATE ";
            strSQL += "WHERE 1=1 " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[110];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("APPROVAL_STATUS");
                    rowData[2] = rsTmp.getString("CANCEL_REASON");
                    rowData[3] = rsTmp.getString("INVOICE_NO");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("DUE_DATE"));
                    rowData[6] = rsTmp.getString("BALE_NO");
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("PACKING_DATE"));
                    rowData[8] = rsTmp.getString("PARTY_CODE");
                    rowData[9] = rsTmp.getString("PARTY_NAME");
                    rowData[10] = rsTmp.getString("DISPATCH_STATION");
                    rowData[11] = rsTmp.getString("NO_OF_PIECES");
                    rowData[12] = rsTmp.getString("PIECE_NO");
                    rowData[13] = rsTmp.getString("MACHINE_NO");
                    rowData[14] = rsTmp.getString("POSITION_NO");
                    rowData[15] = rsTmp.getString("POSITION_DESC");
                    rowData[16] = rsTmp.getString("PRODUCT_CODE");
                    rowData[17] = rsTmp.getString("PRODUCT_DESC");
                    rowData[18] = rsTmp.getString("STYLE");
                    rowData[19] = rsTmp.getString("LENGTH");
                    rowData[20] = rsTmp.getString("WIDTH");
                    rowData[21] = rsTmp.getString("GSM");
                    rowData[22] = rsTmp.getString("ACTUAL_WEIGHT");

                    total_weight = total_weight + Double.parseDouble(rsTmp.getString("ACTUAL_WEIGHT"));

                    rowData[23] = rsTmp.getString("SQMTR");
                    rowData[24] = rsTmp.getString("RATE");
                    rowData[25] = rsTmp.getString("RATE_UNIT");
                    rowData[26] = rsTmp.getString("DISC_PER");
                    rowData[27] = rsTmp.getString("CHARGE_CODE");
                    rowData[28] = rsTmp.getString("PARTY_CHARGE_CODE");
                    rowData[29] = rsTmp.getString("BAS_AMT");
                    rowData[30] = rsTmp.getString("DISC_AMT");
                    rowData[31] = rsTmp.getString("DISC_BAS_AMT");
                    rowData[32] = rsTmp.getString("SEAM_CHG");
                    rowData[33] = rsTmp.getString("CHEM_TRT_CHG");
                    rowData[34] = rsTmp.getString("PIN_CHG");
                    rowData[35] = rsTmp.getString("SPIRAL_CHG");
                    rowData[36] = rsTmp.getString("GROSS_AMT");
                    rowData[37] = rsTmp.getString("INSURANCE_AMT");
                    rowData[38] = rsTmp.getString("IGST_PER");
                    rowData[39] = rsTmp.getString("IGST_AMT");
                    rowData[40] = rsTmp.getString("CGST_PER");
                    rowData[41] = rsTmp.getString("CGST_AMT");
                    rowData[42] = rsTmp.getString("SGST_PER");
                    rowData[43] = rsTmp.getString("SGST_AMT");
                    rowData[44] = rsTmp.getString("NET_AMT");
                    rowData[45] = rsTmp.getString("INVOICE_AMT");

                    total_amount = total_amount + Double.parseDouble(rsTmp.getString("INVOICE_AMT"));

                    rowData[46] = rsTmp.getString("DESP_MODE");
                    rowData[47] = rsTmp.getString("TRANSPORTER_CODE");
                    rowData[48] = rsTmp.getString("TRANSPORTER_NAME");
                    rowData[49] = rsTmp.getString("GATEPASS_NO");
                    rowData[50] = rsTmp.getString("DOCUMENT_THROUGH");
                    rowData[51] = rsTmp.getString("PARTY_BANK_NAME");
                    rowData[52] = rsTmp.getString("PARTY_BANK_ADDRESS1");
                    rowData[53] = rsTmp.getString("PARTY_BANK_ADDRESS2");
                    rowData[54] = rsTmp.getString("HSN_CODE");
                    rowData[55] = rsTmp.getString("GSTIN_NO");
                    rowData[56] = rsTmp.getString("ADDRESS1");
                    rowData[57] = rsTmp.getString("ADDRESS2");
                    rowData[58] = rsTmp.getString("PINCODE");
                    rowData[59] = rsTmp.getString("CITY_ID");
                    rowData[60] = rsTmp.getString("PLACE_OF_SUPPLY");
                    rowData[61] = rsTmp.getString("FINYR");
                    rowData[62] = rsTmp.getString("PR_INVOICE_NO");
                    rowData[63] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    rowData[64] = rsTmp.getString("PR_BALE_NO");
                    rowData[65] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    rowData[66] = rsTmp.getString("PR_PIECE_NO");
                    rowData[67] = rsTmp.getString("PR_DOC_NO");
                    rowData[68] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[69] = rsTmp.getString("PR_REFERENCE");
                    rowData[70] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    rowData[71] = rsTmp.getString("PR_PO_NO");
                    rowData[72] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[73] = rsTmp.getString("PR_GROUP");
                    rowData[74] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    rowData[75] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[76] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[77] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[78] = rsTmp.getString("PR_INCHARGE");
                    String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE WHERE INCHARGE_CD = '" + rsTmp.getString("PR_INCHARGE") + "'");
                    rowData[78] = InchargeName;
                    rowData[79] = rsTmp.getString("PR_LENGTH");
                    rowData[80] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[81] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[82] = rsTmp.getString("PR_WIDTH");
                    rowData[83] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[84] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[85] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[86] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    rowData[87] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[88] = rsTmp.getString("PR_GSM");
                    rowData[89] = rsTmp.getString("PR_BILL_GSM");
                    rowData[90] = rsTmp.getString("PR_PRODUCT_CODE");
                    rowData[91] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[92] = rsTmp.getString("PR_INVOICE_PARTY");
                    rowData[93] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    rowData[94] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    rowData[95] = rsTmp.getString("LR_INVOICE_NO");
                    rowData[96] = EITLERPGLOBAL.formatDate(rsTmp.getString("LR_INVOICE_DATE"));
                    rowData[97] = rsTmp.getString("LR_NO");
                    rowData[98] = EITLERPGLOBAL.formatDate(rsTmp.getString("LR_DATE"));
                    rowData[99] = rsTmp.getString("CARRIER");
                    rowData[100] = rsTmp.getString("FREIGHT");
                    rowData[101] = rsTmp.getString("LR_REMARK");

                    DecimalFormat dfinv = new DecimalFormat("###.##");
                    txtTotalWeight_INV.setText(dfinv.format(total_weight));
                    txtTotalAmount_INV.setText(dfinv.format(total_amount));

                    DataModelInvoiced.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridBSR_old() {
        DataModelBSR = new EITLTableModel();
        Table_BSR.removeAll();
        Table_BSR.setModel(DataModelBSR);

        Table_BSR.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelBSR.addColumn("Sr.");
        DataModelBSR.addColumn("APPROVAL_STATUS");
        DataModelBSR.addColumn("REMARK");
        DataModelBSR.addColumn("PKG_DP_NO");
        DataModelBSR.addColumn("PKG_DP_DATE");
        DataModelBSR.addColumn("PKG_BALE_NO");
        DataModelBSR.addColumn("PKG_BALE_DATE");
        DataModelBSR.addColumn("PKG_PIECE_NO");
        DataModelBSR.addColumn("PKG_PARTY_CODE");
        DataModelBSR.addColumn("PKG_PARTY_NAME");
        DataModelBSR.addColumn("PKG_STATION");
        DataModelBSR.addColumn("PKG_BOX_SIZE");
        DataModelBSR.addColumn("PKG_TRANSPORT_MODE");
        DataModelBSR.addColumn("PR_INVOICE_NO");
        DataModelBSR.addColumn("PR_INVOICE_DATE");
        DataModelBSR.addColumn("PR_BALE_NO");
        DataModelBSR.addColumn("PR_PACKED_DATE");
        DataModelBSR.addColumn("PR_PKG_DP_NO");
        DataModelBSR.addColumn("PR_PKG_DP_DATE");
        DataModelBSR.addColumn("PR_PIECE_NO");
        DataModelBSR.addColumn("PR_MACHINE_NO");
        DataModelBSR.addColumn("PR_POSITION_NO");
        DataModelBSR.addColumn("PR_DOC_NO");
        DataModelBSR.addColumn("PR_ORDER_DATE");
        DataModelBSR.addColumn("PR_REFERENCE");
        DataModelBSR.addColumn("PR_REFERENCE_DATE");
        DataModelBSR.addColumn("PR_PO_NO");
        DataModelBSR.addColumn("PR_PO_DATE");
        DataModelBSR.addColumn("PR_GROUP");
        DataModelBSR.addColumn("PR_WVG_DATE");
        DataModelBSR.addColumn("PR_MND_DATE");
        DataModelBSR.addColumn("PR_NDL_DATE");
        DataModelBSR.addColumn("PR_FNSG_DATE");
        DataModelBSR.addColumn("PR_INCHARGE");
        DataModelBSR.addColumn("PR_LENGTH");
        DataModelBSR.addColumn("PR_ACTUAL_LENGTH");
        DataModelBSR.addColumn("PR_BILL_LENGTH");
        DataModelBSR.addColumn("PR_WIDTH");
        DataModelBSR.addColumn("PR_ACTUAL_WIDTH");
        DataModelBSR.addColumn("PR_BILL_WIDTH");
        DataModelBSR.addColumn("PR_THORITICAL_WEIGHT");
        DataModelBSR.addColumn("PR_ACTUAL_WEIGHT");
        DataModelBSR.addColumn("PR_BILL_WEIGHT");
        DataModelBSR.addColumn("PR_GSM");
        DataModelBSR.addColumn("PR_BILL_GSM");
        DataModelBSR.addColumn("PR_PRODUCT_CODE");
        DataModelBSR.addColumn("PR_BILL_PRODUCT_CODE");
        DataModelBSR.addColumn("PR_INVOICE_PARTY");
        DataModelBSR.addColumn("PR_PARTY_CODE_ORIGINAL");
        DataModelBSR.addColumn("PR_PIECE_NO_ORIGINAL");
        DataModelBSR.addColumn("PR_BILL_SQMTR");
        DataModelBSR.addColumn("Rate");
        DataModelBSR.addColumn("BASE AMT");
        DataModelBSR.addColumn("CHEM TRT CHG");
        DataModelBSR.addColumn("SPIRAL CHG");
        DataModelBSR.addColumn("PIN CHG");
        DataModelBSR.addColumn("SEAM CHG");
        DataModelBSR.addColumn("INS IND");
        DataModelBSR.addColumn("INS AMT");
        DataModelBSR.addColumn("EXCISE");
        DataModelBSR.addColumn("DISC PER");
        DataModelBSR.addColumn("DISC AMT");
        DataModelBSR.addColumn("DISC BAS AMT");
        DataModelBSR.addColumn("INV AMT");

        DataModelBSR.TableReadOnly(true);
        Table_BSR.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateBSR_old() {
        String cndtn = "";
        String orderBy = "";

        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridBSR(); //clear existing content of table
            ResultSet rsTmp;

//-------------------------------------------------------------------------------------------------------------------
            int status = cmbBSRStatus.getSelectedIndex();
            if (status == 5) {

                cndtn += "";
            }
            if (status == 0) {

                cndtn += " AND APPROVAL_STATUS='APPROVED' ";
            }
            if (status == 1) {

                cndtn += " AND APPROVAL_STATUS='UNAPPROVED' ";
            }
            if (status == 2) {

                cndtn += " AND APPROVAL_STATUS='CANCELLED' ";
            }
            if (status == 3) {

                cndtn += " AND APPROVAL_STATUS='BALE INVOICED' ";
            }
            if (status == 4) {

                cndtn += " AND APPROVAL_STATUS='REOPEN BALE' ";
            }

            String Party_Code = txtpartycode.getText();
            String Length_from = txtlengthfrom.getText();
            String Length_to = txtlengthto.getText();
            String Width_from = txtwidthfrom.getText();
            String Width_to = txtwidthto.getText();
            String GSM_from = txtgsmfrom.getText();
            String GSM_to = txtgsmto.getText();
            String Piece_No = txtpieceno.getText();
            String Product_Code = txtproductcode.getText();
            String Incharge = EITLERPGLOBAL.getComboCode(S_ENGINEER) + "";
            String From_date = txtdatefrom.getText();
            String To_date = txtdateto.getText();
            String MachineNo = txtMachineNo.getText();
            String Position = txtPosition.getText();

            if (!Party_Code.equals("")) {
                cndtn += " AND PKG_PARTY_CODE = '" + Party_Code + "' ";
            }

            if (!Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND PR_BILL_LENGTH >=  '" + Length_from + "' AND PR_BILL_LENGTH <=  '" + Length_to + "' ";
            } else if (!Length_from.equals("") && Length_to.equals("")) {
                cndtn += " AND PR_BILL_LENGTH >= '" + Length_from + "' ";
            } else if (Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND PR_BILL_LENGTH <= '" + Length_to + "' ";
            }

            if (!Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND PR_BILL_WIDTH >= '" + Width_from + "' AND PR_BILL_WIDTH <= '" + Width_to + "' ";
            } else if (!Width_from.equals("") && Width_to.equals("")) {
                cndtn += " AND PR_BILL_WIDTH >= '" + Width_from + "' ";
            } else if (Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND PR_BILL_WIDTH <= '" + Width_to + "' ";
            }

            if (!GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND PR_BILL_GSM >=  '" + GSM_from + "' AND PR_BILL_GSM <= '" + GSM_to + "' ";
            } else if (!GSM_from.equals("") && GSM_to.equals("")) {
                cndtn += " AND PR_BILL_GSM >= '" + GSM_from + "' ";
            } else if (GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND PR_BILL_GSM <= '" + GSM_to + "' ";
            }

            if (!Piece_No.equals("")) {
                String[] Pieces = Piece_No.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PKG_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PKG_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }

                cndtn += ")";
            }

            if (!Product_Code.equals("")) {

                //Addition using (,)
                String[] Products = Product_Code.split(",");
                for (int i = 0; i < Products.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PR_BILL_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_BILL_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!Incharge.equals("0")) {
                cndtn += " AND PR_INCHARGE = '" + Incharge + "' ";
            }

            if (!MachineNo.equals("")) {
                cndtn += " AND PR_MACHINE_NO = '" + MachineNo + "' ";
            }

            if (!Position.equals("")) {
                cndtn += " AND PR_POSITION_NO = '" + Position + "' ";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE >= '" + df1.format(df.parse(From_date)) + "' AND PKG_DP_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            int Orderby = cmbBSROrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                orderBy += " ORDER BY PKG_DP_DATE DESC,PKG_DP_NO ";
            }
            if (Orderby == 2) {

                orderBy += " ORDER BY PKG_PARTY_CODE,PKG_DP_DATE DESC,PKG_DP_NO ";
            }
            if (Orderby == 3) {

                orderBy += " ORDER BY PKG_PIECE_NO,PKG_DP_DATE DESC,PKG_DP_NO ";
            }
            if (Orderby == 4) {

                orderBy += " ORDER BY PKG_BALE_NO,PKG_DP_DATE DESC,PKG_DP_NO ";
            }

            cmbBSROrderByModel = new EITLComboModel();
            cmbBSROrderBy.removeAllItems();
            cmbBSROrderBy.setModel(cmbBSROrderByModel);
            ComboData bData = new ComboData();

            bData.Code = 1;
            bData.Text = "Select Order";
            cmbBSROrderByModel.addElement(bData);

            bData.Code = 2;
            bData.Text = "Party Code";
            cmbBSROrderByModel.addElement(bData);

            bData.Code = 3;
            bData.Text = "Piece No";
            cmbBSROrderByModel.addElement(bData);

            bData.Code = 4;
            bData.Text = "Bale No";
            cmbBSROrderByModel.addElement(bData);

//------------------------------------------------------------------------------------------------------------------------------------
            String strSQL = "";

//            strSQL = "SELECT GROUP_CODE,GROUP_DESC,PARTY_ACTIVE,GROUP_CRITICAL_LIMIT,AMOUNT_LIMIT,CASH_DISC_FLAG,YEAR_END_DISC_FLAG,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID,TRANSPORTER_NAME,PAN_NO,PAN_DATE,INSURANCE_CODE,COUNTRY_ID,INCHARGE_NAME FROM(SELECT AMOUNT_LIMIT,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID AS TRANSPORTER,PAN_NO,PAN_DATE,INSURANCE_CODE,INCHARGE_CD,COUNTRY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE  MAIN_ACCOUNT_CODE=210010 ) AS JR LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AB ON JR.INCHARGE_CD=AB.INCHARGE_CD LEFT JOIN ( SELECT TRANSPORTER_ID,TRANSPORTER_NAME FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER ) AC ON JR.TRANSPORTER=AC.TRANSPORTER_ID LEFT JOIN(SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_CODE AS PARTY,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG FROM PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE D.GROUP_CODE=E.GROUP_CODE AND D.APPROVED=1 AND D.CANCELED=0)  AS JJ ON  JJ.PARTY=JR.PARTY_CODE " + cndtn + "";
            strSQL = "SELECT * FROM ";
            strSQL += "(SELECT CASE WHEN H.APPROVED =0 AND H.CANCELED =0 AND H.BALE_REOPEN_FLG = 0 THEN 'UNAPPROVED' WHEN H.APPROVED =1 AND H.CANCELED =0 AND H.INVOICE_FLG =0 AND H.BALE_REOPEN_FLG = 0 THEN 'APPROVED' WHEN H.APPROVED =1 AND H.CANCELED =0 AND H.INVOICE_FLG =1 AND H.BALE_REOPEN_FLG = 0 THEN 'BALE INVOICED'  WHEN H.APPROVED =0 AND H.CANCELED =1 AND H.BALE_REOPEN_FLG = 0 THEN 'CANCELLED' WHEN H.APPROVED =1 AND H.CANCELED =0 AND H.BALE_REOPEN_FLG = 1 THEN 'REOPEN BALE'  END  AS APPROVAL_STATUS, ";
            strSQL += "PKG_CANCEL_REASON,H.PKG_DP_NO,H.PKG_DP_DATE,H.PKG_BALE_NO,H.PKG_BALE_DATE,PKG_PIECE_NO,H.PKG_PARTY_CODE,PKG_PARTY_NAME,PKG_STATION,PKG_BOX_SIZE,PKG_TRANSPORT_MODE ";
            strSQL += "FROM PRODUCTION.FELT_PKG_SLIP_HEADER H,PRODUCTION.FELT_PKG_SLIP_DETAIL D ";
            strSQL += "WHERE H.PKG_DP_NO = D.PKG_DP_NO ";
            //strSQL += "AND H.PKG_DP_DATE >='2017-11-01' AND H.PKG_DP_DATE <='2017-11-30' ";
            strSQL += ") AS PKG ";
            strSQL += "LEFT JOIN ";
            strSQL += "(SELECT PR_INVOICE_NO,PR_INVOICE_DATE,PR_BALE_NO,PR_PACKED_DATE,PR_PKG_DP_NO,PR_PKG_DP_DATE,PR_PIECE_NO,PR_MACHINE_NO,PR_POSITION_NO,PR_DOC_NO,PR_ORDER_DATE, ";
            strSQL += "PR_REFERENCE,PR_REFERENCE_DATE,PR_PO_NO,PR_PO_DATE,PR_GROUP,PR_WVG_DATE,PR_MND_DATE,PR_NDL_DATE, ";
            strSQL += "PR_FNSG_DATE,PR_INCHARGE,PR_LENGTH,PR_ACTUAL_LENGTH,PR_BILL_LENGTH,PR_WIDTH,PR_ACTUAL_WIDTH, ";
            strSQL += "PR_BILL_WIDTH,PR_THORITICAL_WEIGHT,PR_ACTUAL_WEIGHT,PR_BILL_WEIGHT,PR_GSM,PR_BILL_GSM,PR_PRODUCT_CODE, ";
            strSQL += "PR_BILL_PRODUCT_CODE,PR_INVOICE_PARTY,PR_PARTY_CODE_ORIGINAL,PR_PIECE_NO_ORIGINAL,PR_BILL_SQMTR ";
            strSQL += "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER) AS PR ";
            strSQL += "ON PKG.PKG_PIECE_NO=PR.PR_PIECE_NO ";
//	    strSQL += "ON PKG.PKG_BALE_NO=PR.PR_BALE_NO ";
//            strSQL += "AND PKG.PKG_BALE_DATE=PR.PR_PACKED_DATE ";
//            strSQL += "AND PKG.PKG_PIECE_NO=PR.PR_PIECE_NO ";
            //strSQL += "WHERE 1=1 " + cndtn + " ) AS M WHERE  SUBSTRING(PR_INVOICE_NO,1,2) NOT IN ('FE') " + orderBy;
            strSQL += "WHERE 1=1 " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[110];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("APPROVAL_STATUS");
                    rowData[2] = rsTmp.getString("PKG_CANCEL_REASON");
                    rowData[3] = rsTmp.getString("PKG_DP_NO");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_DP_DATE"));
                    rowData[5] = rsTmp.getString("PKG_BALE_NO");
                    rowData[6] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_BALE_DATE"));
                    rowData[7] = rsTmp.getString("PKG_PIECE_NO");
                    rowData[8] = rsTmp.getString("PKG_PARTY_CODE");
                    rowData[9] = rsTmp.getString("PKG_PARTY_NAME");
                    rowData[10] = rsTmp.getString("PKG_STATION");
                    rowData[11] = rsTmp.getString("PKG_BOX_SIZE");
                    rowData[12] = rsTmp.getString("PKG_TRANSPORT_MODE");
                    rowData[13] = rsTmp.getString("PR_INVOICE_NO");
                    rowData[14] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    rowData[15] = rsTmp.getString("PR_BALE_NO");
                    rowData[16] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    rowData[17] = rsTmp.getString("PR_PKG_DP_NO");
                    rowData[18] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    rowData[19] = rsTmp.getString("PR_PIECE_NO");
                    rowData[20] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[21] = rsTmp.getString("PR_POSITION_NO");
                    rowData[22] = rsTmp.getString("PR_DOC_NO");
                    rowData[23] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[24] = rsTmp.getString("PR_REFERENCE");
                    rowData[25] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    rowData[26] = rsTmp.getString("PR_PO_NO");
                    rowData[27] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[28] = rsTmp.getString("PR_GROUP");
                    rowData[29] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[31] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    //rowData[33] = rsTmp.getString("PR_INCHARGE");
                    String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE WHERE INCHARGE_CD = '" + rsTmp.getString("PR_INCHARGE") + "'");
                    rowData[33] = InchargeName;
                    rowData[34] = rsTmp.getString("PR_LENGTH");
                    rowData[35] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[36] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[37] = rsTmp.getString("PR_WIDTH");
                    rowData[38] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[39] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[40] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[41] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    rowData[42] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[43] = rsTmp.getString("PR_GSM");
                    rowData[44] = rsTmp.getString("PR_BILL_GSM");
                    rowData[45] = rsTmp.getString("PR_PRODUCT_CODE");
                    rowData[46] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[47] = rsTmp.getString("PR_INVOICE_PARTY");
                    rowData[48] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    rowData[49] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    rowData[50] = rsTmp.getString("PR_BILL_SQMTR");
                    // DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculate(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_PRODUCT_CODE"),
                                rsTmp.getString("PR_INVOICE_PARTY"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        rowData[51] = inv_calc.getFicRate();
                        rowData[52] = inv_calc.getFicBasAmount();
                        rowData[53] = inv_calc.getFicChemTrtChg();
                        rowData[54] = inv_calc.getFicSpiralChg();
                        rowData[55] = inv_calc.getFicPinChg();
                        rowData[56] = inv_calc.getFicSeamChg();
                        rowData[57] = inv_calc.getFicInsInd();
                        rowData[58] = inv_calc.getFicInsAmt();
                        rowData[59] = inv_calc.getFicExcise();
                        rowData[60] = inv_calc.getFicDiscPer();
                        rowData[61] = inv_calc.getFicDiscAmt();
                        rowData[62] = inv_calc.getFicDiscBasamt();
                        rowData[63] = inv_calc.getFicInvAmt();

                        total_amount = Math.round(total_amount + inv_calc.getFicInvAmt());

                    } catch (Exception e) {
                        System.out.println("Error on PIECE REGISTER : " + e.getMessage());
                    }

//                    rowData[50] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[51] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[52] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    total_weight = total_weight + Double.parseDouble(rsTmp.getString("PR_ACTUAL_WEIGHT"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(rsTmp.getString("PR_BILL_WEIGHT"));

                    DecimalFormat dfbsr = new DecimalFormat("###.##");
                    txtTotalWeight_bsr.setText(dfbsr.format(total_weight));
                    txtTotalBillWeight_bsr.setText(dfbsr.format(total_bill_weight));
                    txtBsrTotalInvAmt.setText(dfbsr.format(total_amount));

                    DataModelBSR.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridPendingList() {
        DataModelPendingList = new EITLTableModel();
        Table_PendingList.removeAll();
        Table_PendingList.setModel(DataModelPendingList);

        Table_PendingList.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelPendingList.addColumn("Sr.");
        DataModelPendingList.addColumn("MODULE_ID");
        DataModelPendingList.addColumn("MODULE_DESC");
        DataModelPendingList.addColumn("DOC_NO");
        DataModelPendingList.addColumn("DOC_DATE");
        DataModelPendingList.addColumn("USER_ID");
        DataModelPendingList.addColumn("USER_NAME");
        DataModelPendingList.addColumn("RECEIVED_DATE");
        DataModelPendingList.addColumn("REMARKS");

        DataModelPendingList.TableReadOnly(true);
        Table_PendingList.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridOrderRegister_old() {
        DataModelOrderRegister = new EITLTableModel();
        Table_Order_Register.removeAll();
        Table_Order_Register.setModel(DataModelOrderRegister);

        Table_Order_Register.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelOrderRegister.addColumn("SrNo");
        DataModelOrderRegister.addColumn("PIECE_NO");
        DataModelOrderRegister.addColumn("S_ORDER_NO");
        DataModelOrderRegister.addColumn("S_ORDER_DATE");
        DataModelOrderRegister.addColumn("PARTY_CODE");
        DataModelOrderRegister.addColumn("PARTY_NAME");
        //DataModelOrderRegister.addColumn("REGION");
        //DataModelOrderRegister.addColumn("SALES_ENGINEER");
        DataModelOrderRegister.addColumn("MACHINE_NO");
        DataModelOrderRegister.addColumn("POSITION");
        DataModelOrderRegister.addColumn("POSITION_DESC");
        DataModelOrderRegister.addColumn("PRODUCT_CODE");
        DataModelOrderRegister.addColumn("S_GROUP");
        DataModelOrderRegister.addColumn("STYLE");
        DataModelOrderRegister.addColumn("LENGTH");
        DataModelOrderRegister.addColumn("WIDTH");
        DataModelOrderRegister.addColumn("GSM");
        DataModelOrderRegister.addColumn("THORITICAL_WWEIGHT");
        DataModelOrderRegister.addColumn("SQ_MTR");
        DataModelOrderRegister.addColumn("SYN_PER");
        DataModelOrderRegister.addColumn("REQ_MONTH");
        DataModelOrderRegister.addColumn("APPROVED");
        DataModelOrderRegister.addColumn("UPN");

        DataModelOrderRegister.SetVariable(0, "SrNo");
        DataModelOrderRegister.SetVariable(1, "PIECE_NO");
        DataModelOrderRegister.SetVariable(2, "S_ORDER_NO");
        DataModelOrderRegister.SetVariable(3, "S_ORDER_DATE");
        DataModelOrderRegister.SetVariable(4, "PARTY_CODE");
        DataModelOrderRegister.SetVariable(5, "PARTY_NAME");
        //DataModelOrderRegister.SetVariable(6, "REGION");
        //DataModelOrderRegister.SetVariable(7, "SALES_ENGINEER");
        DataModelOrderRegister.SetVariable(6, "MACHINE_NO");
        DataModelOrderRegister.SetVariable(7, "POSITION");
        DataModelOrderRegister.SetVariable(8, "POSITION_DESC");
        DataModelOrderRegister.SetVariable(9, "PRODUCT_CODE");
        DataModelOrderRegister.SetVariable(10, "S_GROUP");
        DataModelOrderRegister.SetVariable(11, "STYLE");
        DataModelOrderRegister.SetVariable(12, "LENGTH");
        DataModelOrderRegister.SetVariable(13, "WIDTH");
        DataModelOrderRegister.SetVariable(14, "GSM");
        DataModelOrderRegister.SetVariable(15, "THORITICAL_WIDTH");
        DataModelOrderRegister.SetVariable(16, "SQ_MTR");
        DataModelOrderRegister.SetVariable(17, "SYN_PER");
        DataModelOrderRegister.SetVariable(18, "REQ_MONTH");
        DataModelOrderRegister.SetVariable(19, "APPROVED");
        DataModelOrderRegister.SetVariable(20, "UPN");

        DataModelOrderRegister.TableReadOnly(true);
        Table_Order_Register.getColumnModel().getColumn(0).setMaxWidth(50);

        for (int i = 1; i <= 20; i++) {
            Table_Order_Register.getColumnModel().getColumn(i).setMinWidth(100);
        }

    }

    private void GeneratePendingList() {
        String cndtn = "";
        String orderBy = " ORDER BY MODULE_ID,RECEIVED_DATE DESC ";

        try {
            FormatGridPendingList(); //clear existing content of table
            ResultSet rsTmp;

//-------------------------------------------------------------------------------------------------------------------
//            int status = cmbInvStatus.getSelectedIndex();
//            if (status == 3) {
//
//                cndtn += "";
//            }
//            if (status == 0) {
//
//                cndtn += " AND APPROVAL_STATUS='APPROVED' ";
//            }
//            if (status == 1) {
//
//                cndtn += " AND APPROVAL_STATUS='UNAPPROVED' ";
//            }
//            if (status == 2) {
//
//                cndtn += " AND APPROVAL_STATUS='CANCELLED' ";
//            }
            String Party_Code = txtpartycode.getText();
            String Length_from = txtlengthfrom.getText();
            String Length_to = txtlengthto.getText();
            String Width_from = txtwidthfrom.getText();
            String Width_to = txtwidthto.getText();
            String GSM_from = txtgsmfrom.getText();
            String GSM_to = txtgsmto.getText();
            String Piece_No = txtpieceno.getText();
            String Product_Code = txtproductcode.getText();
            String Incharge = EITLERPGLOBAL.getComboCode(S_ENGINEER) + "";
            String From_date = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim());
            String To_date = EITLERPGLOBAL.formatDateDB(txtdateto.getText().trim());

            String MachineNo = txtMachineNo.getText();
            String Position = txtPosition.getText();

//            if (!Party_Code.equals("")) {
//                cndtn += " AND PARTY_CODE = '" + Party_Code + "' ";
//            }
//
//            if (!Length_from.equals("") && !Length_to.equals("")) {
//                cndtn += " AND LENGTH >=  '" + Length_from + "' AND LENGTH <=  '" + Length_to + "' ";
//            } else if (!Length_from.equals("") && Length_to.equals("")) {
//                cndtn += " AND LENGTH >= '" + Length_from + "' ";
//            } else if (Length_from.equals("") && !Length_to.equals("")) {
//                cndtn += " AND LENGTH <= '" + Length_to + "' ";
//            }
//
//            if (!Width_from.equals("") && !Width_to.equals("")) {
//                cndtn += " AND WIDTH >= '" + Width_from + "' AND WIDTH <= '" + Width_to + "' ";
//            } else if (!Width_from.equals("") && Width_to.equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + Width_from + "' ";
//            } else if (Width_from.equals("") && !Width_to.equals("")) {
//                cndtn += " AND PR_WIDTH <= '" + Width_to + "' ";
//            }
//
//            if (!GSM_from.equals("") && !GSM_to.equals("")) {
//                cndtn += " AND GSM >=  '" + GSM_from + "' AND GSM <= '" + GSM_to + "' ";
//            } else if (!GSM_from.equals("") && GSM_to.equals("")) {
//                cndtn += " AND PR_GSM >= '" + GSM_from + "' ";
//            } else if (GSM_from.equals("") && !GSM_to.equals("")) {
//                cndtn += " AND PR_GSM <= '" + GSM_to + "' ";
//            }
//
//            if (!Piece_No.equals("")) {
//                String[] Pieces = Piece_No.split(",");
//                for (int i = 0; i < Pieces.length; i++) {
//
//                    if (i == 0) {
//                        cndtn += " AND (PIECE_NO = '" + Pieces[i] + "' ";
//                    } else {
//                        cndtn += " OR PIECE_NO = '" + Pieces[i] + "' ";
//                    }
//                }
//
//                cndtn += ")";
//            }
//
//            if (!Product_Code.equals("")) {
//
//                //Addition using (,)
//                String[] Products = Product_Code.split(",");
//                for (int i = 0; i < Products.length; i++) {
//
//                    if (i == 0) {
//                        cndtn += " AND (PRODUCT_CODE = '" + Products[i] + "' ";
//                    } else {
//                        cndtn += " OR PRODUCT_CODE = '" + Products[i] + "' ";
//                    }
//                }
//                cndtn += ")";
//            }
//
//            if (!Incharge.equals("0")) {
//                cndtn += " AND PR_INCHARGE = '" + Incharge + "' ";
//            }
//
//            if (!MachineNo.equals("")) {
//                cndtn += " AND MACHINE_NO = '" + MachineNo + "' ";
//            }
//
//            if (!Position.equals("")) {
//                cndtn += " AND POSITION_NO = '" + Position + "' ";
//            }
            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    //cndtn += " AND DOC_DATE >= '" + df1.format(df.parse(From_date)) + "' AND DOC_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                    cndtn += " AND DOC_DATE >= '" + From_date + "' AND DOC_DATE <= '" + To_date + "' AND DOC_DATE  >= '2017-10-01' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    //cndtn += " AND DOC_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                    cndtn += " AND DOC_DATE  >= '" + From_date + "' AND DOC_DATE  >= '2017-10-01' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND DOC_DATE  <= '" + From_date + "' AND DOC_DATE  >= '2017-10-01' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    cndtn += " AND DOC_DATE  >= '2017-10-01' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            int Orderby = cmbPLOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                orderBy = " ORDER BY MODULE_ID,RECEIVED_DATE DESC ";
            }
            if (Orderby == 2) {

                orderBy = " ORDER BY MODULE_ID ";
            }
            if (Orderby == 3) {

                orderBy = " ORDER BY USER_NAME,MODULE_ID ";
            }
//            if (Orderby == 3) {
//
//                orderBy += " ORDER BY PIECE_NO,INVOICE_DATE DESC,INVOICE_NO ";
//            }
//            if (Orderby == 4) {
//
//                orderBy += " ORDER BY BALE_NO,INVOICE_DATE DESC,INVOICE_NO ";
//            }
//            if (Orderby == 5) {
//
//                orderBy += " ORDER BY PRODUCT_CODE,INVOICE_DATE DESC,INVOICE_NO ";
//            }

            cmbPLOrderByModel = new EITLComboModel();
            cmbPLOrderBy.removeAllItems();
            cmbPLOrderBy.setModel(cmbPLOrderByModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "Select Order";
            cmbPLOrderByModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "Module ID";
            cmbPLOrderByModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "User Name";
            cmbPLOrderByModel.addElement(aData);
//
//            aData.Code = 4;
//            aData.Text = "Bale No";
//            cmbInvOrderByModel.addElement(aData);
//
//            aData.Code = 5;
//            aData.Text = "Product Code";
//            cmbInvOrderByModel.addElement(aData);

//------------------------------------------------------------------------------------------------------------------------------------
            String strSQL = "";

//            strSQL = "SELECT GROUP_CODE,GROUP_DESC,PARTY_ACTIVE,GROUP_CRITICAL_LIMIT,AMOUNT_LIMIT,CASH_DISC_FLAG,YEAR_END_DISC_FLAG,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID,TRANSPORTER_NAME,PAN_NO,PAN_DATE,INSURANCE_CODE,COUNTRY_ID,INCHARGE_NAME FROM(SELECT AMOUNT_LIMIT,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID AS TRANSPORTER,PAN_NO,PAN_DATE,INSURANCE_CODE,INCHARGE_CD,COUNTRY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE  MAIN_ACCOUNT_CODE=210010 ) AS JR LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AB ON JR.INCHARGE_CD=AB.INCHARGE_CD LEFT JOIN ( SELECT TRANSPORTER_ID,TRANSPORTER_NAME FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER ) AC ON JR.TRANSPORTER=AC.TRANSPORTER_ID LEFT JOIN(SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_CODE AS PARTY,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG FROM PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE D.GROUP_CODE=E.GROUP_CODE AND D.APPROVED=1 AND D.CANCELED=0)  AS JJ ON  JJ.PARTY=JR.PARTY_CODE " + cndtn + "";
            strSQL = "SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS,NOW() AS RUN_DATE FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID " + cndtn + orderBy;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[110];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MODULE_ID");
                    rowData[2] = rsTmp.getString("MODULE_DESC");
                    rowData[3] = rsTmp.getString("DOC_NO");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE"));
                    rowData[5] = rsTmp.getString("USER_ID");
                    rowData[6] = rsTmp.getString("USER_NAME");
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("RECEIVED_DATE"));
                    rowData[8] = rsTmp.getString("REMARKS");

                    DataModelPendingList.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSalesParty() {
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridSalesParty(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn = " WHERE GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }
            if (!txtproductcode.getText().equals("")) {
                cndtn += " AND CHARGE_CODE LIKE '" + ItemCode + "%'";
            }
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            if (inchargeby != 0) {
                cndtn += " AND INCHARGE_CD = " + inchargeby + "";
            } else {
                cndtn += "";
            }
            if (chkKeyClientInd.isSelected()){
                cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            int partyType = cmbPartyType.getSelectedIndex();
            if (partyType == 0) {
                cndtn += " AND PARTY_CLOSE_IND!=1 ";
            }
            if (partyType == 1) {
                cndtn += " AND PARTY_CLOSE_IND=1 ";
            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
            //  strSQL = "SELECT A.PARTY_CODE,A.PARTY_NAME,A.CHARGE_CODE,A.ADDRESS1,A.ADDRESS2,A.PINCODE,A.CITY_ID,A.GSTIN_NO,A.GSTIN_DATE,A.STATE,A.STATE_GST_CODE,A.STATE_CODE,A.DISPATCH_STATION,A.DISTRICT,A.PHONE_NO,A.MOBILE_NO,A.EMAIL,A.CONTACT_PERSON,A.BANK_ID,A.BANK_NAME,A.BANK_ADDRESS,A.BANK_CITY,A.TRANSPORTER_ID,C.TRANSPORTER_NAME,A.PAN_NO,A.PAN_DATE,A.INSURANCE_CODE,A.INCHARGE_CD,A.COUNTRY_ID,B.INCHARGE_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER A,PRODUCTION.FELT_INCHARGE B,DINESHMILLS.D_SAL_TRANSPORTER_MASTER C WHERE A.INCHARGE_CD=B.INCHARGE_CD AND A.TRANSPORTER_ID=C.TRANSPORTER_ID AND MAIN_ACCOUNT_CODE=210010 " + cndtn + "";
            //strSQL = "SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,A.AMOUNT_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG,A.PARTY_CODE,A.PARTY_NAME,A.CHARGE_CODE,A.ADDRESS1,A.ADDRESS2,A.PINCODE,A.CITY_ID,A.GSTIN_NO,A.GSTIN_DATE,A.STATE,A.STATE_GST_CODE,A.STATE_CODE,A.DISPATCH_STATION,A.DISTRICT,A.PHONE_NO,A.MOBILE_NO,A.EMAIL,A.CONTACT_PERSON,A.BANK_ID,A.BANK_NAME,A.BANK_ADDRESS,A.BANK_CITY,A.TRANSPORTER_ID,C.TRANSPORTER_NAME,A.PAN_NO,A.PAN_DATE,A.INSURANCE_CODE,A.INCHARGE_CD,A.COUNTRY_ID,B.INCHARGE_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER A,PRODUCTION.FELT_INCHARGE B,DINESHMILLS.D_SAL_TRANSPORTER_MASTER C,PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE A.INCHARGE_CD=B.INCHARGE_CD AND A.TRANSPORTER_ID=C.TRANSPORTER_ID AND D.GROUP_CODE=E.GROUP_CODE AND E.PARTY_CODE=A.PARTY_CODE AND MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELED=0 " + cndtn + "";
            strSQL = "SELECT GROUP_CODE,GROUP_DESC,PARTY_ACTIVE,GROUP_CRITICAL_LIMIT,AMOUNT_LIMIT,CASH_DISC_FLAG,YEAR_END_DISC_FLAG,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID,TRANSPORTER_NAME,PAN_NO,PAN_DATE,INSURANCE_CODE,COUNTRY_ID,INCHARGE_NAME,KEY_CLIENT_IND FROM(SELECT AMOUNT_LIMIT,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID AS TRANSPORTER,PAN_NO,PAN_DATE,INSURANCE_CODE,INCHARGE_CD,COUNTRY_ID,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE  MAIN_ACCOUNT_CODE=210010 " + cndtn + ") AS JR LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AB ON JR.INCHARGE_CD=AB.INCHARGE_CD LEFT JOIN ( SELECT TRANSPORTER_ID,TRANSPORTER_NAME FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER ) AC ON JR.TRANSPORTER=AC.TRANSPORTER_ID LEFT JOIN(SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_CODE AS PARTY,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG FROM PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE D.GROUP_CODE=E.GROUP_CODE AND D.APPROVED=1 AND D.CANCELED=0)  AS JJ ON  JJ.PARTY=JR.PARTY_CODE " + grp_cndtn + " ";

//            int Orderby = EITLERPGLOBAL.getComboCode(cmbDiscount);
//            if (Orderby == 1) {
//           //strSQL+=" ORDER BY MACHINE_NO ";
//                strSQL += " ORDER BY A.PARTY_CODE ";
//            }
//            if (Orderby == 2) {
//                //strSQL+=" ORDER BY POSITION ";
//                strSQL += " ORDER BY B.PRODUCT_CODE ";
//            }
            int Orderby = cmbSalesParty.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                strSQL += " ORDER BY PARTY_CODE ";
            }

            cmbSalesPartyModel = new EITLComboModel();
            cmbSalesParty.removeAllItems();
            cmbSalesParty.setModel(cmbSalesPartyModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbSalesPartyModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");

                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    txtSalesPartyTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("GROUP_CODE");
                    rowData[2] = rsTmp.getString("GROUP_DESC");
                    rowData[3] = rsTmp.getString("PARTY_CODE");
                    rowData[4] = rsTmp.getString("PARTY_NAME");
                    rowData[5] = rsTmp.getString("CHARGE_CODE");
                    rowData[6] = rsTmp.getString("ADDRESS1");
                    rowData[7] = rsTmp.getString("ADDRESS2");
                    rowData[8] = rsTmp.getString("PINCODE");
                    rowData[9] = rsTmp.getString("CITY_ID");
                    rowData[10] = rsTmp.getString("GSTIN_NO");
                    rowData[11] = EITLERPGLOBAL.formatDate(rsTmp.getString("GSTIN_DATE"));
                    rowData[12] = rsTmp.getString("STATE");
                    rowData[13] = rsTmp.getString("STATE_GST_CODE");
                    rowData[14] = rsTmp.getString("STATE_CODE");
                    rowData[15] = rsTmp.getString("DISPATCH_STATION");
                    rowData[16] = rsTmp.getString("DISTRICT");
                    rowData[17] = rsTmp.getString("PHONE_NO");
                    rowData[18] = rsTmp.getString("MOBILE_NO");
                    rowData[19] = rsTmp.getString("EMAIL");
                    rowData[20] = rsTmp.getString("CONTACT_PERSON");
                    rowData[21] = rsTmp.getString("BANK_ID");
                    rowData[22] = rsTmp.getString("BANK_NAME");
                    rowData[23] = rsTmp.getString("BANK_ADDRESS");
                    rowData[24] = rsTmp.getString("BANK_CITY");
                    rowData[25] = rsTmp.getString("TRANSPORTER_ID");
                    rowData[26] = rsTmp.getString("TRANSPORTER_NAME");
                    rowData[27] = rsTmp.getString("PAN_NO");
                    rowData[28] = EITLERPGLOBAL.formatDate(rsTmp.getString("PAN_DATE"));

                    //   String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '"+(String) piece.getAttribute("PR_INCHARGE").getObj()+"'");
                    rowData[29] = rsTmp.getString("INSURANCE_CODE");
                    rowData[30] = rsTmp.getString("INCHARGE_NAME");
                    rowData[31] = rsTmp.getString("COUNTRY_ID");
                    rowData[32] = rsTmp.getString("GROUP_CRITICAL_LIMIT");
                    rowData[33] = rsTmp.getString("AMOUNT_LIMIT");
                    rowData[34] = rsTmp.getString("PARTY_ACTIVE");
                    rowData[35] = rsTmp.getString("CASH_DISC_FLAG");
                    rowData[36] = rsTmp.getString("YEAR_END_DISC_FLAG");

                    double osAmt = OutStandingAmt("210010", rsTmp.getString("PARTY_CODE"));
                    rowData[37] = df.format(osAmt);

                    double advAmt = AdvanceAmt("210010", rsTmp.getString("PARTY_CODE"));
                    rowData[38] = df.format(advAmt);

                    rowData[39] = EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime();

                    DataModelSalesParty.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateOrder_old() {
        String cndtn = " ";
        try {
            FormatGridOrder(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String Machineno = txtMachineNo.getText().toString();
            String Position = txtPosition.getText().toString();
            String Orderdtfrom = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim());
            String Orderdtto = EITLERPGLOBAL.formatDateDB(txtdateto.getText().trim());
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();

            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND A.PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtproductcode.getText().equals("")) {
                cndtn += " AND B.PRODUCT_CODE IN  (" + ItemCode + ") ";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND B.MACHINE_NO='" + Machineno + "' ";
            }
            if (!txtPosition.getText().equals("")) {
                cndtn += " AND B.POSITION IN  (" + Position + ") ";
            }
            if (!txtdatefrom.getText().equals("")) {
                cndtn += " AND A.S_ORDER_DATE>='" + Orderdtfrom + "' ";
            }
            if (!txtdateto.getText().equals("")) {
                cndtn += " AND A.S_ORDER_DATE<='" + Orderdtto + "' ";
            }
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND B.LENGTH >= '" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND B.LENGTH <= '" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND B.WIDTH >= '" + Widthfrom + "' ";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND B.WIDTH <= '" + Widthto + "' ";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND B.GSM >= '" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += " AND B.GSM <= '" + GSMto + "' ";
            }

            if (!txtupnno.getText().equals("")) {
                cndtn += " AND B.UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {

                cndtn += " AND SALES_ENGINEER = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";

            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
            strSQL = "SELECT C.STATUS,D.USER_NAME,A.S_ORDER_NO,A.S_ORDER_DATE,B.PIECE_NO,A.SALES_ENGINEER,A.PARTY_CODE,A.PARTY_NAME,A.REFERENCE,A.REFERENCE_DATE,A.P_O_NO,A.P_O_DATE,B.MACHINE_NO,B.POSITION,B.POSITION_DESC,B.PIECE_NO,B.PRODUCT_CODE,B.PRODUCT_DESC,B.S_GROUP,B.LENGTH,B.WIDTH,B.GSM,B.THORITICAL_WIDTH,B.SQ_MTR,B.STYLE,B.REQ_MONTH,B.SYN_PER,B.STYLE,B.REMARK,B.OV_RATE,B.OV_BAS_AMOUNT,B.OV_CHEM_TRT_CHG,B.OV_SPIRAL_CHG,B.OV_PIN_CHG,B.OV_SEAM_CHG,B.OV_INS_IND,B.OV_INS_AMT,B.OV_EXCISE,B.OV_DISC_PER,B.OV_DISC_AMT,B.OV_DISC_BASAMT,B.OV_AMT,B.S_ORDER_DETAIL_CODE,B.CGST_PER,B.CGST_AMT,B.SGST_PER,B.SGST_AMT,B.IGST_PER,B.IGST_AMT,B.COMPOSITION_PER,B.COMPOSITION_AMT,B.RCM_PER,B.RCM_AMT,B.GST_COMPENSATION_CESS_PER,B.GST_COMPENSATION_CESS_AMT,B.PR_BILL_LENGTH,B.PR_BILL_WIDTH,B.PR_BILL_WEIGHT,B.PR_BILL_SQMTR,B.PR_BILL_GSM,PR_BILL_PRODUCT_CODE,B.UPN FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B,PRODUCTION.FELT_PROD_DOC_DATA C,DINESHMILLS.D_COM_USER_MASTER D WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.APPROVED=0 AND CANCELED=0 AND A.S_ORDER_NO=C.DOC_NO AND C.STATUS='W' AND C.USER_ID=D.USER_ID" + cndtn + "";

            int Orderby = cmbOrder.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                strSQL += " ORDER BY A.PARTY_CODE ";
            }
            if (Orderby == 2) {

                strSQL += " ORDER BY B.PIECE_NO ";
            }
            if (Orderby == 3) {

                strSQL += " ORDER BY B.PRODUCT_CODE ";
            }
            if (Orderby == 4) {

                strSQL += " ORDER BY B.POSITION ";
            }
            if (Orderby == 5) {

                strSQL += " ORDER BY B.MACHINE_NO ";
            }
            if (Orderby == 6) {

                strSQL += " ORDER BY A.S_ORDER_DATE ";
            }

            cmbOrderModel = new EITLComboModel();
            cmbOrder.removeAllItems();
            cmbOrder.setModel(cmbOrderModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbOrderModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "PIECE NO";
            cmbOrderModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "PRODUCT CODE ";
            cmbOrderModel.addElement(aData);

            aData.Code = 4;
            aData.Text = "POSITION NO ";
            cmbOrderModel.addElement(aData);

            aData.Code = 5;
            aData.Text = "MACHINE NO";
            cmbOrderModel.addElement(aData);

            aData.Code = 6;
            aData.Text = "ORDER DATE";
            cmbOrderModel.addElement(aData);

//            int Orderby = EITLERPGLOBAL.getComboCode(cmbDiscount);
//            if (Orderby == 1) {
//           //strSQL+=" ORDER BY MACHINE_NO ";
//                strSQL += " ORDER BY A.PARTY_CODE ";
//            }
//            if (Orderby == 2) {
//                //strSQL+=" ORDER BY POSITION ";
//                strSQL += " ORDER BY B.PRODUCT_CODE ";
//            }
//            int Orderby = cmbSalesParty.getSelectedIndex();
//            Orderby++;
//            if (Orderby == 1) {
//           
//                strSQL += " ORDER BY PARTY_CODE ";
//            }
//             
//                
////        cmbO = new EITLComboModel();
//        cmbSalesParty.removeAllItems();
//        cmbSalesParty.setModel(cmbSalesPartyModel);
//        ComboData aData = new ComboData();
//
//        aData.Code = 1;
//        aData.Text = "PARTY CODE";
//        cmbSalesPartyModel.addElement(aData);
            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    //txtSalesPartyTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("S_ORDER_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("S_ORDER_DATE"));
                    rowData[3] = rsTmp.getString("PIECE_NO");
                    rowData[4] = "";
                    if (!rsTmp.getString("SALES_ENGINEER").equals("")) {
                        String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + rsTmp.getString("SALES_ENGINEER") + "'");
                        rowData[4] = InchargeName;
                    }

                    rowData[5] = rsTmp.getString("PARTY_CODE");
                    rowData[6] = rsTmp.getString("PARTY_NAME");
                    rowData[7] = rsTmp.getString("REFERENCE");
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("REFERENCE_DATE"));
                    rowData[9] = rsTmp.getString("P_O_NO");
                    rowData[10] = EITLERPGLOBAL.formatDate(rsTmp.getString("P_O_DATE"));
                    rowData[11] = rsTmp.getString("MACHINE_NO");
                    rowData[12] = rsTmp.getString("POSITION");
                    rowData[13] = rsTmp.getString("POSITION_DESC");
                    rowData[14] = rsTmp.getString("PRODUCT_CODE");
                    rowData[15] = rsTmp.getString("PRODUCT_DESC");
                    rowData[16] = rsTmp.getString("S_GROUP");
                    rowData[17] = rsTmp.getString("LENGTH");
                    rowData[18] = rsTmp.getString("WIDTH");
                    rowData[19] = rsTmp.getString("GSM");
                    rowData[20] = EITLERPGLOBAL.round(rsTmp.getDouble("THORITICAL_WIDTH"), 2);
                    rowData[21] = EITLERPGLOBAL.round(rsTmp.getDouble("SQ_MTR"), 2);
                    rowData[22] = rsTmp.getString("STYLE");
                    rowData[23] = rsTmp.getString("REQ_MONTH");
                    rowData[24] = rsTmp.getString("SYN_PER");

                    //   String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '"+(String) piece.getAttribute("PR_INCHARGE").getObj()+"'");
                    rowData[25] = rsTmp.getString("OV_RATE");
                    rowData[26] = rsTmp.getString("OV_BAS_AMOUNT");
                    rowData[27] = rsTmp.getString("OV_CHEM_TRT_CHG");
                    rowData[28] = rsTmp.getString("OV_SPIRAL_CHG");
                    rowData[29] = rsTmp.getString("OV_PIN_CHG");
                    rowData[30] = rsTmp.getString("OV_SEAM_CHG");
                    rowData[31] = rsTmp.getString("OV_INS_IND");
                    rowData[32] = rsTmp.getString("OV_INS_AMT");
                    rowData[33] = rsTmp.getString("OV_EXCISE");
                    rowData[34] = rsTmp.getString("OV_DISC_PER");
                    rowData[35] = rsTmp.getString("OV_DISC_AMT");
                    rowData[36] = rsTmp.getString("OV_DISC_BASAMT");
                    rowData[37] = rsTmp.getString("OV_AMT");
                    rowData[38] = rsTmp.getString("S_ORDER_DETAIL_CODE");
                    rowData[39] = rsTmp.getString("CGST_PER");
                    rowData[40] = rsTmp.getString("CGST_AMT");
                    rowData[41] = rsTmp.getString("SGST_PER");
                    rowData[42] = rsTmp.getString("SGST_AMT");
                    rowData[43] = rsTmp.getString("IGST_PER");
                    rowData[44] = rsTmp.getString("IGST_AMT");
                    rowData[45] = rsTmp.getString("COMPOSITION_PER");
                    rowData[46] = rsTmp.getString("COMPOSITION_AMT");
                    rowData[47] = rsTmp.getString("RCM_PER");
                    rowData[48] = rsTmp.getString("RCM_AMT");
                    rowData[49] = rsTmp.getString("GST_COMPENSATION_CESS_PER");
                    rowData[50] = rsTmp.getString("GST_COMPENSATION_CESS_AMT");
                    rowData[51] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[52] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[53] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[54] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[55] = rsTmp.getString("PR_BILL_GSM");
                    rowData[56] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[57] = rsTmp.getString("STATUS");
                    rowData[58] = rsTmp.getString("USER_NAME");
                    rowData[59] = rsTmp.getString("UPN");

                    DataModelOrder.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void setData_EXP_INVOICE() {
        int size = DataModel[15].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[7].removeRow(j);
        }

        double total_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[73];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();

            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_THORITICAL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        (String) piece.getAttribute("PR_PRODUCT_CODE").getObj(),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        Float.parseFloat((String) piece.getAttribute("PR_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = total_amount + inv_calc.getFicInvAmt();

            } catch (Exception e) {
                System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();

            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();

            DecimalFormat df = new DecimalFormat("###.##");
//            txtTotalWeight_production.setText(df.format(total_weight));
//            txtTotalAmount_production.setText(df.format(total_amount));

            DataModel[15].addRow(rowData);
        }
    }

    private void GenerateInvoiceParameterModification() {
        String cndtn = "";
        try {
            FormatGridInvoiceParameterModification(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String PieceNo = txtpieceno.getText().toString();
            String BaleNo = txtBaleNo.getText().toString();

            boolean flag = false;
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PARTY_CODE= '" + PartyCode + "'";
            }

            if (!txtBaleNo.getText().equals("")) {
                cndtn += " AND BALE_NO= '" + BaleNo + "'";
            }

            int status = cmbStatus.getSelectedIndex();
            if (status == 3) {

                cndtn += "";
            }
            if (status == 0) {

                cndtn += " AND A.APPROVED=1 AND A.CANCELED=0 ";
            }
            if (status == 1) {

                cndtn += " AND A.APPROVED=0 AND A.CANCELED=0 ";
            }
            if (status == 2) {

                cndtn += " AND A.CANCELED=1 ";
            }

            String strSQL = "";
            strSQL = "SELECT CASE WHEN A.APPROVED =0 AND A.CANCELED =0 THEN 'UNAPPROVED' WHEN A.APPROVED =1 AND A.CANCELED =0 THEN 'APPROVED' WHEN A.APPROVED =0 AND A.CANCELED =1 THEN 'CANCELLED' END  AS APPROVAL_STATUS,DOC_NO,DOC_DATE,PROCESSING_DATE,PARTY_CODE,PARTY_NAME,BALE_NO,PKG_BALE_DATE,REMARKS,CHARGE_CODE_NEW,F6,INSURANCE_CODE,TRANSPORTER_CODE,CRITICAL_LIMIT_NEW,WITHOUT_CRITICAL_LIMIT,ADV_DOC_NO,ADV_AGN_IGST_AMT,ADV_AGN_CGST_AMT,ADV_AGN_SGST_AMT FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST A ,PRODUCTION.FELT_PKG_SLIP_HEADER B WHERE  BALE_NO = PKG_BALE_NO AND BALE_DATE = PKG_BALE_DATE AND BALE_NO !='' AND PROCESSING_DATE >= NOW() " + cndtn + " ";

            int Orderby = cmbInvoiceParameterModification.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 2) {

                strSQL += " ORDER BY CHARGE_CODE_NEW ";
            }
            if (Orderby == 3) {

                strSQL += " ORDER BY BALE_NO ";
            }
            if (Orderby == 4) {

                strSQL += " ORDER BY INSURANCE_CODE ";
            }

            cmbInvoiceParameterModificationModel = new EITLComboModel();
            cmbInvoiceParameterModification.removeAllItems();
            cmbInvoiceParameterModification.setModel(cmbInvoiceParameterModificationModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbInvoiceParameterModificationModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "CHARGE CODE";
            cmbInvoiceParameterModificationModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "BALE NO";
            cmbInvoiceParameterModificationModel.addElement(aData);

            aData.Code = 4;
            aData.Text = "INSURANCE CODE";
            cmbInvoiceParameterModificationModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("APPROVAL_STATUS");
                    rowData[2] = rsTmp.getString("DOC_NO");
                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE"));
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("PROCESSING_DATE"));
                    rowData[5] = rsTmp.getString("PARTY_CODE");
                    rowData[6] = rsTmp.getString("PARTY_NAME");
                    rowData[7] = rsTmp.getString("BALE_NO");
                    rowData[8] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_BALE_DATE"));
                    rowData[9] = rsTmp.getString("REMARKS");
                    rowData[10] = rsTmp.getString("CHARGE_CODE_NEW");
                    rowData[11] = rsTmp.getString("F6");
                    rowData[12] = rsTmp.getString("INSURANCE_CODE");
                    rowData[13] = rsTmp.getString("TRANSPORTER_CODE");
                    rowData[14] = rsTmp.getString("CRITICAL_LIMIT_NEW");
                    rowData[15] = rsTmp.getString("WITHOUT_CRITICAL_LIMIT");
                    rowData[16] = rsTmp.getString("ADV_DOC_NO");
                    rowData[17] = rsTmp.getString("ADV_AGN_IGST_AMT");
                    rowData[18] = rsTmp.getString("ADV_AGN_CGST_AMT");
                    rowData[19] = rsTmp.getString("ADV_AGN_SGST_AMT");

                    DataModelInvoiceParameterModification.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateInvoiceParameterModificationCombo() {

        HashMap hmAmendList = new HashMap();

        cmbStatusModel = new EITLComboModel();
        cmbStatus.removeAllItems();
        cmbStatus.setModel(cmbStatusModel);

        hmAmendList = clsPieceMaster.getStatusList();
        for (int i = 1; i <= hmAmendList.size(); i++) {
            cmbStatusModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
        }
    }

    private void GenerateInvoiceCombo() {

        HashMap hmAmendList = new HashMap();

        cmbInvStatusModel = new EITLComboModel();
        cmbInvStatus.removeAllItems();
        cmbInvStatus.setModel(cmbInvStatusModel);

        hmAmendList = getInvStatusList();
        for (int i = 1; i <= hmAmendList.size(); i++) {
            cmbInvStatusModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
        }
        ComboData aData = new ComboData();

        aData.Code = 4;
        aData.Text = "F6 Invoiced but not Despatched";
        cmbInvStatusModel.addElement(aData);

        aData.Code = 5;
        aData.Text = "All Invoiced but not Despatched";
        cmbInvStatusModel.addElement(aData);
    }

    public static HashMap getInvStatusList() {
        HashMap List = new HashMap();
        try {
            Connection Conn = data.getConn();
            Statement stTmp = Conn.createStatement();
            int counter = 1;
            ResultSet rsTmp = stTmp.executeQuery("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='STATUS' ORDER BY PARA_CODE");
            while (rsTmp.next()) {
                ComboData aData = new ComboData();
                aData.Code = rsTmp.getInt("PARA_CODE");
                aData.Text = rsTmp.getString("PARA_DESC");
                List.put(new Integer(counter++), aData);
            }
        } catch (SQLException e) {
            //      LastError = e.getMessage();
            e.printStackTrace();
        }
        return List;
    }

//    private void GenerateCOBOLERPCombo() {
//
//        HashMap hmAmendList = new HashMap();
//
//        cmbCobolErpModel = new EITLComboModel();
//        cmbCobolErpStatus.removeAllItems();
//        cmbCobolErpStatus.setModel(cmbCobolErpModel);
//
//        hmAmendList = clsPieceMaster.getCobolErpStatusList();
//        for (int i = 1; i <= hmAmendList.size(); i++) {
//            cmbCobolErpModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
//        }
//    }
    private void GenerateBSRCombo() {

        HashMap hmAmendList = new HashMap();

        cmbBSRStatusModel = new EITLComboModel();
        cmbBSRStatus.removeAllItems();
        cmbBSRStatus.setModel(cmbBSRStatusModel);

        hmAmendList = clsPieceMaster.getStatusList();
        for (int i = 1; i <= hmAmendList.size(); i++) {
            cmbBSRStatusModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
        }
    }

//    private void FormatGridCobolERP() {
//        DataModelCobolERP = new EITLTableModel();
//        TableCobolErp.removeAll();
//        TableCobolErp.setModel(DataModelCobolERP);
//
//        TableCobolErp.setAutoResizeMode(TableCobolErp.AUTO_RESIZE_OFF);
//
//        DataModelCobolERP.addColumn("Sr.");
//        DataModelCobolERP.addColumn("STATUS");//1
//        DataModelCobolERP.addColumn("C INVOICE NO");//2
//        DataModelCobolERP.addColumn("C INVOICE DATE");//3
//        DataModelCobolERP.addColumn("C PIECE NO");//4
//        DataModelCobolERP.addColumn("C PARTY CODE");//5
//        DataModelCobolERP.addColumn("C PARTY NAME");//6
//        DataModelCobolERP.addColumn("EIA PIECE NO");//7
//        DataModelCobolERP.addColumn("EIA INV NO");//8
//        DataModelCobolERP.addColumn("EIA INV DATE");//9
//        DataModelCobolERP.addColumn("EIU INV NO ");//10
//        DataModelCobolERP.addColumn("EIU INV DATE");//11
//        DataModelCobolERP.addColumn("PKG_BALE_NO");//12
//        DataModelCobolERP.addColumn("PKG_BALE_DATE");//13
//        DataModelCobolERP.addColumn("PKG_DP_NO");//14
//        DataModelCobolERP.addColumn("PKG_DP_DATE");//15
//        DataModelCobolERP.addColumn("NOW");//16
//
//        DataModelCobolERP.TableReadOnly(true);
//        TableCobolErp.getColumnModel().getColumn(0).setMaxWidth(50);
//    }
//    private void GenerateCombolErp() {
//        String cndtn = "";
//        String Cobolerp = "";
//
//        try {
//            FormatGridCobolERP(); //clear existing content of table
//            String PieceNo = txtpieceno.getText().trim();
//            //  String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim());
//            String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText().trim());
//            String PartyCode = txtpartycode.getText().trim();
//            boolean flag = false;
//            ResultSet rsTmp;
//
//            if (!txtpieceno.getText().equals("")) {
//                cndtn += " AND PR_PIECE_NO= '" + PieceNo + "'";
//            }
//
//            if (!txtpartycode.getText().equals("")) {
//                cndtn += " AND PARTY_CODE= '" + PartyCode + "'";
//            }
////            if (!EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim()).equals("")) {
////                cndtn += " INVOICE_DATE>= '" + FromDate + "'";
////            }
//
//            if (!EITLERPGLOBAL.formatDateDB(txtdateto.getText().trim()).equals("")) {
//                cndtn += " AND INVOICE_DATE<= '" + ToDate + "'";
//            }
//
//            int status = cmbCobolErpStatus.getSelectedIndex();
//
//            if (status == 0) {
//
//                Cobolerp += " WHERE STATUS='APPROVED INVOICE' ";
//            }
//            if (status == 1) {
//
//                Cobolerp += " WHERE STATUS='UNAPPROVED INVOICE' ";
//            }
//            if (status == 2) {
//
//                Cobolerp += " WHERE STATUS='INVOICE NOT PROCESSED' ";
//            }
//            if (status == 3) {
//
//                Cobolerp += " WHERE STATUS='UNAPPROVED BALE' ";
//            }
//            if (status == 4) {
//
//                Cobolerp += " WHERE STATUS='BALE NOT PROCESSED' ";
//            }
//            if (status == 5) {
//                Cobolerp += "WHERE STATUS IN ('UNAPPROVED INVOICE','INVOICE NOT PROCESSED','UNAPPROVED BALE','BALE NOT PROCESSED')";
//            }
//            if (status == 6) {
//                Cobolerp += "";
//            }
//
//            String strSQL = "";
//            strSQL = "SELECT * FROM (SELECT CASE WHEN COALESCE(EIA_INVNO,'') !='' AND COALESCE(EIU_INVNO,'') ='' AND COALESCE(PKG_BALE_NO,'') !='' AND COALESCE(PKG_DP_NO,'') ='' THEN 'APPROVED INVOICE' WHEN COALESCE(EIA_INVNO,'') ='' AND COALESCE(EIU_INVNO,'') !='' AND COALESCE(PKG_BALE_NO,'') !='' AND COALESCE(PKG_DP_NO,'') ='' THEN 'UNAPPROVED INVOICE' WHEN COALESCE(EIA_INVNO,'') ='' AND COALESCE(EIU_INVNO,'') ='' AND COALESCE(PKG_BALE_NO,'') !='' AND COALESCE(PKG_DP_NO,'') ='' THEN 'INVOICE NOT PROCESSED' WHEN COALESCE(EIA_INVNO,'') ='' AND COALESCE(EIU_INVNO,'') ='' AND COALESCE(PKG_BALE_NO,'') ='' AND COALESCE(PKG_DP_NO,'') !='' THEN 'UNAPPROVED BALE' WHEN COALESCE(EIA_INVNO,'') ='' AND COALESCE(EIU_INVNO,'') ='' AND COALESCE(PKG_BALE_NO,'') ='' AND COALESCE(PKG_DP_NO,'') ='' THEN 'BALE NOT PROCESSED' END AS STATUS,M.* FROM (SELECT C_INV_NO, C_INV_DATE,C_PIECE_NO, C_PARTY_CODE,C_PARTY_NAME,EIA_PIECE_NO,EIA_INVNO,EIA_INV_DATE,EIU_INVNO,EIU_INVDATE,PKG_BALE_NO ,PKG_BALE_DATE,PKG_DP_NO,PKG_DP_DATE,NOW() FROM (SELECT C_INV_NO, C_INV_DATE,C_PIECE_NO, C_PARTY_CODE,C_PARTY_NAME,EIA_PIECE_NO,EIA_INVNO,EIA_INV_DATE,EIU_INVNO,EIU_INVDATE,PKG_BALE_NO ,PKG_BALE_DATE FROM (SELECT C_INV_NO, C_INV_DATE,C_PIECE_NO, C_PARTY_CODE,C_PARTY_NAME,EIA_PIECE_NO,EIA_INVNO,EIA_INV_DATE,EIU_INVNO,EIU_INVDATE FROM (SELECT INV.INVOICE_NO AS C_INV_NO, INV.INVOICE_DATE AS C_INV_DATE,INV.PR_PIECE_NO AS C_PIECE_NO, INV.PARTY_CODE AS C_PARTY_CODE,INV.PARTY_NAME AS C_PARTY_NAME,IA.PIECE_NO AS EIA_PIECE_NO,IA.INVOICE_NO AS EIA_INVNO,IA.INVOICE_DATE AS EIA_INV_DATE FROM (SELECT INVOICE_NO,INVOICE_DATE,PIECE_NO,PR_PIECE_NO,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT FROM PRODUCTION.FELT_INVOICE_DATA WHERE INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim()) + "' " + cndtn + " AND SUBSTRING(INVOICE_NO,1,2) = 'FE' ) AS INV LEFT JOIN (SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PIECE_NO,INVOICE_AMT,APPROVED,APPROVED_DATE,CANCELLED FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H WHERE APPROVED =1 AND CANCELLED =0) AS IA ON SUBSTRING(INV.PR_PIECE_NO,1,5) = SUBSTRING(IA.PIECE_NO,1,5))  AS CEA LEFT JOIN (SELECT INVOICE_NO AS EIU_INVNO,INVOICE_DATE AS EIU_INVDATE,PARTY_CODE,PIECE_NO AS EIU_PIECE_NO,INVOICE_AMT,APPROVED,APPROVED_DATE,CANCELLED FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H WHERE APPROVED =0 AND CANCELLED =0) AS IU ON SUBSTRING(CEA.C_PIECE_NO,1,5) = SUBSTRING(IU.EIU_PIECE_NO,1,5)) AS EP LEFT JOIN (SELECT D.PKG_PIECE_NO ,H.PKG_PARTY_CODE,H.PKG_BALE_NO ,H.PKG_BALE_DATE FROM PRODUCTION.FELT_PKG_SLIP_HEADER H,PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_DP_NO = D.PKG_DP_NO AND H.CANCELED = 0 AND APPROVED =1) AS PA ON SUBSTRING(EP.C_PIECE_NO,1,5) = SUBSTRING(PA.PKG_PIECE_NO,1,5)) AS CPA LEFT JOIN (SELECT D.PKG_PIECE_NO ,H.PKG_PARTY_CODE,H.PKG_DP_NO ,H.PKG_DP_DATE FROM PRODUCTION.FELT_PKG_SLIP_HEADER H,PRODUCTION.FELT_PKG_SLIP_DETAIL D WHERE H.PKG_DP_NO = D.PKG_DP_NO AND H.CANCELED = 0 AND APPROVED =0) AS PU ON SUBSTRING(CPA.C_PIECE_NO,1,5) = SUBSTRING(PU.PKG_PIECE_NO,1,5))  AS M ) AS SUB " + Cobolerp + "";
//
//            int Orderby = cmbCobolERP.getSelectedIndex();
//            Orderby++;
//            if (Orderby == 1) {
//
//                strSQL += " ORDER BY C_PIECE_NO ";
//            }
//            if (Orderby == 2) {
//
//                strSQL += " ORDER BY C_INV_NO ";
//            }
//            if (Orderby == 3) {
//
//                strSQL += " ORDER BY C_INV_DATE ";
//            }
//            if (Orderby == 4) {
//
//                strSQL += " ORDER BY STATUS ";
//            }
//            if (Orderby == 5) {
//
//                strSQL += " ORDER BY C_PARTY_CODE ";
//            }
//
//            if (Orderby == 6) {
//
//                strSQL += " ORDER BY PKG_BALE_NO ";
//            }
//
//            cmbCOBOLERPModel = new EITLComboModel();
//            cmbCobolERP.removeAllItems();
//            cmbCobolERP.setModel(cmbCOBOLERPModel);
//            ComboData aData = new ComboData();
//
//            aData.Code = 1;
//            aData.Text = "PIECE NO";
//            cmbCOBOLERPModel.addElement(aData);
//
//            aData.Code = 2;
//            aData.Text = "INVOICE NO";
//            cmbCOBOLERPModel.addElement(aData);
//
//            aData.Code = 3;
//            aData.Text = "INVOICE DATE";
//            cmbCOBOLERPModel.addElement(aData);
//
//            aData.Code = 4;
//            aData.Text = "STATUS";
//            cmbCOBOLERPModel.addElement(aData);
//
//            aData.Code = 5;
//            aData.Text = "PARTY CODE";
//            cmbCOBOLERPModel.addElement(aData);
//
//            aData.Code = 6;
//            aData.Text = "BALE NO";
//            cmbCOBOLERPModel.addElement(aData);
//
//            System.out.println("Query..." + strSQL);
//            rsTmp = data.getResult(strSQL);
//            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
//            if (rsTmp.getRow() > 0) {
//                int cnt = 0;
//                while (!rsTmp.isAfterLast()) {
//                    cnt++;
//                    System.out.println(cnt);
//
//                    Object[] rowData = new Object[100];
//
//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("STATUS");
//                    rowData[2] = rsTmp.getString("C_INV_NO");
//                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("C_INV_DATE"));
//                    rowData[4] = rsTmp.getString("C_PIECE_NO");
//                    rowData[5] = rsTmp.getString("C_PARTY_CODE");
//                    rowData[6] = rsTmp.getString("C_PARTY_NAME");
//                    rowData[7] = rsTmp.getString("EIA_PIECE_NO");
//                    rowData[8] = rsTmp.getString("EIA_INVNO");
//                    rowData[9] = EITLERPGLOBAL.formatDate(rsTmp.getString("EIA_INV_DATE"));
//                    rowData[10] = rsTmp.getString("EIU_INVNO");
//                    rowData[11] = EITLERPGLOBAL.formatDate(rsTmp.getString("EIU_INVDATE"));
//                    rowData[12] = rsTmp.getString("PKG_BALE_NO");
//                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_BALE_DATE"));
//                    rowData[14] = rsTmp.getString("PKG_DP_NO");
//                    rowData[15] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_DP_DATE"));
//                    rowData[16] = EITLERPGLOBAL.formatDate(rsTmp.getString("NOW()"));
//
//                    DataModelCobolERP.addRow(rowData);
//                    rsTmp.next();
//                }
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//    }
    private void GeneratePieceMFGRejectin_old() {

        String cndtn = "";
        try {
            FormatGridPieceMFGRejection_old(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String PieceNo = txtpieceno.getText().toString();
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();
            String MachineNo = txtMachineNo.getText().toString();
            String PositionNo = txtPosition.getText().toString();

            boolean flag = false;
            ResultSet rsTmp;

            if (!PieceNo.equals("")) {

                String[] Pieces = PieceNo.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn = cndtn + " AND substr(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    } else {
                        cndtn = cndtn + " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                flag = true;
            }
            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtproductcode.getText().equals("")) {
                cndtn += " AND PR_PRODUCT_CODE LIKE '" + ItemCode + "%'";
            }
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND PR_BILL_LENGTH>='" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND PR_BILL_LENGTH<='" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND PR_BILL_WIDTH>='" + Widthfrom + "'";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND PR_BILL_WIDTH<='" + Widthto + "'";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND PR_BILL_GSM>='" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += "AND PR_BILL_GSM<='" + GSMto + "' ";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND PR_MACHINE_NO='" + MachineNo + "'";
            }
            if (!txtPosition.getText().equals("")) {
                cndtn += " AND PR_POSTION_NO='" + PositionNo + "'";
            }
            if (!txtupnno.getText().equals("")) {
                cndtn += " AND PR_UPN='" + txtupnno.getText().trim() + "'";
            }

            String strSQL = "";
            strSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_DELINK IN ('DELINK','OBSOLETE') " + cndtn + "";

            int Orderby = cmbPieceMFGRejection.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                strSQL += " ORDER BY PR_PARTY_CODE ";
            }
            if (Orderby == 2) {

                strSQL += " ORDER BY PR_PIECE_NO ";
            }

            cmbPieceMFGRejectionModel = new EITLComboModel();
            cmbPieceMFGRejection.removeAllItems();
            cmbPieceMFGRejection.setModel(cmbPieceMFGRejectionModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbPieceMFGRejectionModel.addElement(aData);

            aData.Code = 1;
            aData.Text = "PIECE NO";
            cmbPieceMFGRejectionModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PR_PIECE_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_DATE"));
                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[4] = rsTmp.getString("PR_DOC_NO");
                    rowData[5] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[6] = rsTmp.getString("PR_POSITION_NO");
                    rowData[7] = rsTmp.getString("PR_PARTY_CODE");
                    rowData[8] = rsTmp.getString("PR_PRODUCT_CODE");
                    rowData[9] = rsTmp.getString("PR_GROUP");
                    rowData[10] = rsTmp.getString("PR_STYLE");
                    rowData[11] = rsTmp.getString("PR_LENGTH");
                    rowData[12] = rsTmp.getString("PR_WIDTH");
                    rowData[13] = rsTmp.getString("PR_GSM");
                    rowData[14] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[15] = rsTmp.getString("PR_SQMTR");
                    rowData[16] = rsTmp.getString("PR_SYN_PER");
                    rowData[17] = rsTmp.getString("PR_REQUESTED_MONTH");
                    rowData[18] = rsTmp.getString("PR_REGION");
                    rowData[19] = rsTmp.getString("PR_INCHARGE");
                    rowData[20] = rsTmp.getString("PR_REFERENCE");
                    rowData[21] = rsTmp.getString("PR_REFERENCE_DATE");
                    rowData[22] = rsTmp.getString("PR_PO_NO");
                    rowData[23] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[24] = rsTmp.getString("PR_ORDER_REMARK");
                    rowData[25] = rsTmp.getString("PR_PIECE_REMARK");
                    rowData[26] = rsTmp.getString("PR_PIECE_STAGE");
                    rowData[27] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    rowData[28] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    rowData[29] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[31] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RCV_DATE"));
                    rowData[33] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    rowData[34] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[35] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[36] = rsTmp.getString("PR_BALE_NO");
                    rowData[37] = rsTmp.getString("PR_DIVERSION_FLAG");
                    rowData[38] = rsTmp.getString("PR_PRIORITY_HOLD_CAN_FLAG");
                    rowData[39] = rsTmp.getString("PR_INVOICE_NO");
                    rowData[40] = rsTmp.getString("PR_INVOICE_DATE");
                    rowData[41] = rsTmp.getString("PR_HOLD_REASON");
                    rowData[42] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[43] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[44] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[45] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[46] = rsTmp.getString("PR_BILL_GSM");
                    rowData[47] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[48] = rsTmp.getString("PR_BILL_STYLE");
                    rowData[49] = rsTmp.getString("PR_DELINK");
                    rowData[50] = rsTmp.getString("PR_DELINK_REASON");
                    rowData[51] = rsTmp.getString("PR_UPN");

                    DataModelPieceMFGRejection.addRow(rowData);

                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GeneratePieceDelink() {

        String cndtn = "";
        try {
            FormatGridPieceDelink(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String PieceNo = txtpieceno.getText().toString();
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();
            String MachineNo = txtMachineNo.getText().toString();
            String PositionNo = txtPosition.getText().toString();

            boolean flag = false;
            ResultSet rsTmp;

            if (!PieceNo.equals("")) {

                String[] Pieces = PieceNo.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn = cndtn + " AND substr(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    } else {
                        cndtn = cndtn + " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                flag = true;
            }
            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtproductcode.getText().equals("")) {
                cndtn += " AND PR_PRODUCT_CODE LIKE '" + ItemCode + "%'";
            }

            //String strSQL = "";
            //strSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_DELINK='DELINK' " + cndtn + "";
            //if (!txtlengthfrom.getText().equals("")) {
            //    cndtn += " AND PR_BILL_LENGTH>='" + Lengthfrom + "' AND PR_BILL_LENGTH<='" + Lengthto + "'";
            //}
            //if (!txtwidthfrom.getText().equals("")) {
            //    cndtn += " AND PR_BILL_WIDTH>='" + Widthfrom + "' AND PR_BILL_WIDTH<='" + Widthto + "'";
            //}
            //if (!txtgsqfrom.getText().equals("")) {
            //    cndtn += " AND PR_BILL_GSM>='" + GSMfrom + "' AND PR_BILL_GSM<='" + GSMto + "'";
            //}
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND PR_BILL_LENGTH >= '" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND PR_BILL_LENGTH <= '" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND PR_BILL_WIDTH >= '" + Widthfrom + "' ";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND PR_BILL_WIDTH <= '" + Widthto + "' ";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND PR_BILL_GSM >= '" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += " AND PR_BILL_GSM <= '" + GSMto + "' ";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND PR_MACHINE_NO='" + MachineNo + "'";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND PR_POSTION_NO='" + PositionNo + "'";
            }
            if (!txtupnno.getText().equals("")) {
                cndtn += " AND PR_UPN='" + txtupnno.getText().trim() + "'";
            }
            String strSQL = "";
            strSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_DELINK IN ('DELINK','OBSOLETE') " + cndtn + "";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PR_PIECE_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_DATE"));
                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[4] = rsTmp.getString("PR_DOC_NO");
                    rowData[5] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[6] = rsTmp.getString("PR_POSITION_NO");
                    rowData[7] = rsTmp.getString("PR_PARTY_CODE");
                    rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsTmp.getString("PR_PARTY_CODE"));
                    rowData[9] = rsTmp.getString("PR_PRODUCT_CODE");
                    rowData[10] = rsTmp.getString("PR_GROUP");
                    rowData[11] = rsTmp.getString("PR_STYLE");
                    rowData[12] = rsTmp.getString("PR_LENGTH");
                    rowData[13] = rsTmp.getString("PR_WIDTH");
                    rowData[14] = rsTmp.getString("PR_GSM");
                    rowData[15] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[16] = rsTmp.getString("PR_SQMTR");
                    rowData[17] = rsTmp.getString("PR_SYN_PER");
                    rowData[18] = rsTmp.getString("PR_REQUESTED_MONTH");
                    rowData[19] = rsTmp.getString("PR_REGION");
                    rowData[20] = rsTmp.getString("PR_INCHARGE");
                    rowData[21] = rsTmp.getString("PR_REFERENCE");
                    rowData[22] = rsTmp.getString("PR_REFERENCE_DATE");
                    rowData[23] = rsTmp.getString("PR_PO_NO");
                    rowData[24] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[25] = rsTmp.getString("PR_ORDER_REMARK");
                    rowData[26] = rsTmp.getString("PR_PIECE_REMARK");
                    rowData[27] = rsTmp.getString("PR_PIECE_STAGE");
                    rowData[28] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    rowData[29] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[31] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[33] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RCV_DATE"));
                    rowData[34] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    rowData[35] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[36] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[37] = rsTmp.getString("PR_BALE_NO");
                    rowData[38] = rsTmp.getString("PR_DIVERSION_FLAG");
                    rowData[39] = rsTmp.getString("PR_PRIORITY_HOLD_CAN_FLAG");
                    rowData[40] = rsTmp.getString("PR_INVOICE_NO");
                    rowData[41] = rsTmp.getString("PR_INVOICE_DATE");
                    rowData[42] = rsTmp.getString("PR_HOLD_REASON");
                    rowData[43] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[44] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[45] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[46] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[47] = rsTmp.getString("PR_BILL_GSM");
                    rowData[48] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[49] = rsTmp.getString("PR_DELINK");
                    rowData[50] = rsTmp.getString("PR_DELINK_REASON");
                    rowData[51] = rsTmp.getString("PR_UPN");

                    DataModelDelink.addRow(rowData);

                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void enableText() {
        txtpartycode.setEnabled(false);
        txtpartyname.setEnabled(false);
        txtpartyind.setEnabled(false);
        txtgroupcode.setEnabled(false);
        txtgroupname.setEnabled(false);
        txtlengthfrom.setEnabled(false);
        txtlengthto.setEnabled(false);
        txtwidthfrom.setEnabled(false);
        txtwidthto.setEnabled(false);
        txtgsmfrom.setEnabled(false);
        txtgsmto.setEnabled(false);
        txtpieceno.setEnabled(false);
        txtproductcode.setEnabled(false);
        txtdatefrom.setEnabled(false);
        txtdateto.setEnabled(false);
        txtMachineNo.setEnabled(false);
        txtPosition.setEnabled(false);
        txtupnno.setEnabled(false);
        S_ENGINEER.setEnabled(false);
        REGION.setEnabled(false);
        chkKeyClientInd.setEnabled(false);
    }

    private void GeneratePendingDoc() {
        String qryType = "";
        String cndtn = "";
        String orderBy = "";
        String userName = "";
        String moduleName = "";

        DataModelPendingList = new EITLTableModel();
        Table_PendingList.removeAll();
        Table_PendingList.setModel(DataModelPendingList);
        Table_PendingList.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        try {
            ResultSet rsTmp;

            if (!cmbUserList.getSelectedItem().toString().endsWith("Select User")) {
                userName += " AND USER_NAME LIKE ('" + cmbUserList.getSelectedItem().toString() + "') ";
            }
            if (!cmbModuleList.getSelectedItem().toString().endsWith("Select Module")) {
                moduleName += " AND MODULE_DESC LIKE ('" + cmbModuleList.getSelectedItem().toString() + "') ";
            }

            if (cmbType.getSelectedItem().toString().startsWith("U")) {
                qryType = "SELECT USER_ID,UPPER(USER_NAME) AS USER_NAME,MODULE_ID,UPPER(CONCAT(MODULE_DESC,' (',COUNT(*),')')) AS MODULE_NAME FROM (SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS AS RUN_DATE FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND DOC_DATE >= '2017-07-01' " + userName + moduleName + ") AS AA GROUP BY USER_ID,USER_NAME,MODULE_ID,MODULE_DESC";
            }
            if (cmbType.getSelectedItem().toString().startsWith("M")) {
                qryType = "SELECT MODULE_ID,UPPER(MODULE_DESC) AS MODULE_NAME,USER_ID,UPPER(CONCAT(USER_NAME,' (',COUNT(*),')')) AS USER_NAME FROM (SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS AS RUN_DATE FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND DOC_DATE >= '2017-07-01' " + userName + moduleName + ") AS AA GROUP BY MODULE_ID,MODULE_DESC,USER_ID,USER_NAME";
            }
            if (cmbType.getSelectedItem().toString().startsWith("D")) {
                qryType = "SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND DOC_DATE >= '2017-07-01' " + userName + moduleName + " ";
                orderBy = " ORDER BY MODULE_ID,RECEIVED_DATE DESC ";
            }

            int Orderby = cmbPLOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                orderBy = " ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY MODULE_ID ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY USER_NAME,MODULE_ID ";
            }

            cmbPLOrderByModel = new EITLComboModel();
            cmbPLOrderBy.removeAllItems();
            cmbPLOrderBy.setModel(cmbPLOrderByModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "Select Order";
            cmbPLOrderByModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "Module ID";
            cmbPLOrderByModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "User Name";
            cmbPLOrderByModel.addElement(aData);

            String strSQL = "";
            //strSQL = "SELECT D.MODULE_ID,MODULE_DESC,DOC_NO,DOC_DATE,D.USER_ID,USER_NAME,RECEIVED_DATE,D.REMARKS,NOW() AS RUN_DATE FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID "+cndtn+orderBy;
            strSQL = qryType + " " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);

            if (cmbType.getSelectedItem().toString().startsWith("U")) {
                ListUser(strSQL);
            }
            if (cmbType.getSelectedItem().toString().startsWith("M")) {
                ListModule(strSQL);
            }
            if (cmbType.getSelectedItem().toString().startsWith("D")) {
                ListDetail(strSQL);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }

    private boolean GenerateUserCombo() {
        int i = 1;
        try {

            cmbUserListModel = new EITLComboModel();
            cmbUserList.removeAllItems();
            cmbUserList.setModel(cmbUserListModel);
            ComboData objData = new ComboData();

            objData.Code = 0;
            objData.Text = "Select User";
            cmbUserListModel.addElement(objData);

            ResultSet rs = data.getResult("SELECT DISTINCT USER_NAME FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND DOC_DATE >= '2017-07-01'");
            rs.first();

            while (!rs.isAfterLast()) {
                objData.Code = i;
                objData.Text = rs.getString("USER_NAME");
                cmbUserListModel.addElement(objData);
                i++;
                rs.next();
            }
            if (i > 0) {
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {

        }
        return false;
    }

    private boolean GenerateModuleCombo() {
        int i = 1;
        try {

            cmbModuleListModel = new EITLComboModel();
            cmbModuleList.removeAllItems();
            cmbModuleList.setModel(cmbModuleListModel);
            ComboData objData = new ComboData();

            objData.Code = 0;
            objData.Text = "Select Module";
            cmbModuleListModel.addElement(objData);

            ResultSet rs = data.getResult("SELECT DISTINCT MODULE_DESC FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_MODULES M,DINESHMILLS.D_COM_USER_MASTER U WHERE STATUS ='W'  AND D.MODULE_ID = M.MODULE_ID AND U.USER_ID = D.USER_ID AND DOC_DATE >= '2017-07-01' ");
            rs.first();

            while (!rs.isAfterLast()) {
                objData.Code = i;
                objData.Text = rs.getString("MODULE_DESC");
                cmbModuleListModel.addElement(objData);
                i++;
                rs.next();
            }
            if (i > 0) {
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {

        }
        return false;
    }

    private void ListDetailGrid() {
        DataModelPendingList = new EITLTableModel();
        Table_PendingList.removeAll();
        Table_PendingList.setModel(DataModelPendingList);
        Table_PendingList.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelPendingList.addColumn("Sr.");
        DataModelPendingList.addColumn("Module ID");
        DataModelPendingList.addColumn("Module Name");
        DataModelPendingList.addColumn("Doc No");
        DataModelPendingList.addColumn("Doc Date");
        DataModelPendingList.addColumn("User ID");
        DataModelPendingList.addColumn("User Name");
        DataModelPendingList.addColumn("Received Date");
        DataModelPendingList.addColumn("Remark");

        DataModelPendingList.TableReadOnly(true);

        Table_PendingList.getColumnModel().getColumn(0).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(1).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(2).setMinWidth(250);
        Table_PendingList.getColumnModel().getColumn(3).setMinWidth(80);
        Table_PendingList.getColumnModel().getColumn(4).setMinWidth(80);
        Table_PendingList.getColumnModel().getColumn(5).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(6).setMinWidth(120);
        Table_PendingList.getColumnModel().getColumn(7).setMinWidth(80);
        Table_PendingList.getColumnModel().getColumn(8).setMinWidth(120);

    }

    private void ListUserGrid() {
        DataModelPendingList = new EITLTableModel();
        Table_PendingList.removeAll();
        Table_PendingList.setModel(DataModelPendingList);
        Table_PendingList.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelPendingList.addColumn("Sr.");
        DataModelPendingList.addColumn("User ID");
        DataModelPendingList.addColumn("User Name");
        DataModelPendingList.addColumn("Module ID");
        DataModelPendingList.addColumn("Module Name");

        DataModelPendingList.TableReadOnly(true);

        Table_PendingList.getColumnModel().getColumn(0).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(1).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(2).setMinWidth(200);
        Table_PendingList.getColumnModel().getColumn(3).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(4).setMinWidth(350);

    }

    private void ListModuleGrid() {
        DataModelPendingList = new EITLTableModel();
        Table_PendingList.removeAll();
        Table_PendingList.setModel(DataModelPendingList);
        Table_PendingList.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelPendingList.addColumn("Sr.");
        DataModelPendingList.addColumn("Module ID");
        DataModelPendingList.addColumn("Module Name");
        DataModelPendingList.addColumn("User ID");
        DataModelPendingList.addColumn("User Name");

        DataModelPendingList.TableReadOnly(true);

        Table_PendingList.getColumnModel().getColumn(0).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(1).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(2).setMinWidth(350);
        Table_PendingList.getColumnModel().getColumn(3).setMinWidth(40);
        Table_PendingList.getColumnModel().getColumn(4).setMinWidth(200);

    }

    private void ListDetail(String strSQL) {
        ListDetailGrid();
        try {
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[10];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MODULE_ID");
                    rowData[2] = rsTmp.getString("MODULE_DESC");
                    rowData[3] = rsTmp.getString("DOC_NO");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE"));
                    rowData[5] = rsTmp.getString("USER_ID");
                    rowData[6] = rsTmp.getString("USER_NAME");
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("RECEIVED_DATE"));
                    rowData[8] = rsTmp.getString("REMARKS");

                    DataModelPendingList.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ListUser(String strSQL) {
        ListUserGrid();
        try {
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[5];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("USER_ID");
                    rowData[2] = rsTmp.getString("USER_NAME");
                    rowData[3] = rsTmp.getString("MODULE_ID");
                    rowData[4] = rsTmp.getString("MODULE_NAME");

                    DataModelPendingList.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void ListModule(String strSQL) {
        ListModuleGrid();
        try {
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[5];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("MODULE_ID");
                    rowData[2] = rsTmp.getString("MODULE_NAME");
                    rowData[3] = rsTmp.getString("USER_ID");
                    rowData[4] = rsTmp.getString("USER_NAME");

                    DataModelPendingList.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridGR() {
        DataModelGR = new EITLTableModel();
        TableGR.removeAll();
        TableGR.setModel(DataModelGR);

        TableGR.setAutoResizeMode(TableGR.AUTO_RESIZE_OFF);

        DataModelGR.addColumn("Sr.No"); //0
        DataModelGR.addColumn("Doc No"); //1
        DataModelGR.addColumn("Doc Date"); //2
        DataModelGR.addColumn("Piece No"); //1
        DataModelGR.addColumn("Invoice No"); //2
        DataModelGR.addColumn("Invoice Date"); //3
        DataModelGR.addColumn("Group Name");
        DataModelGR.addColumn("Party Code"); //4
        DataModelGR.addColumn("Party Name"); //5
        DataModelGR.addColumn("Product Code"); //6
        DataModelGR.addColumn("Product Group");
        DataModelGR.addColumn("Length"); //7
        DataModelGR.addColumn("Width"); //8
        DataModelGR.addColumn("Weight"); //9
        DataModelGR.addColumn("GSM"); //10
        DataModelGR.addColumn("Net Amount"); //10
        DataModelGR.addColumn("Remarks"); //11
        DataModelGR.addColumn("Incharge");
        DataModelGR.addColumn("Category");

        DataModelGR.TableReadOnly(true);
        TableGR.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateGR() {
        String cndtn = "";
        String cndtn1 = "";
        try {
            FormatGridGR(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND D.PARTY_CODE= '" + PartyCode + "'";
            }

            if (!txtdatefrom.getText().equals("") && !txtdateto.getText().equals("")) {
                cndtn += " AND H.DOC_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtdatefrom.getText()) + "' AND H.DOC_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtdateto.getText()) + "' ";
            } else if (!txtdatefrom.getText().equals("") && txtdateto.getText().equals("")) {
                cndtn += " AND H.DOC_DATE >= '" + EITLERPGLOBAL.formatDateDB(txtdatefrom.getText()) + "' ";
            } else if (txtdatefrom.getText().equals("") && !txtdateto.getText().equals("")) {
                cndtn += " AND H.DOC_DATE <= '" + EITLERPGLOBAL.formatDateDB(txtdateto.getText()) + "' ";
            }

            if (!txtlengthfrom.getText().equals("") && !txtlengthto.getText().equals("")) {
                cndtn += " AND D.LENGTH >= '" + txtlengthfrom.getText() + "' AND D.LENGTH <= '" + txtlengthto.getText() + "' ";
            } else if (!txtlengthfrom.getText().equals("") && txtlengthto.getText().equals("")) {
                cndtn += " AND D.LENGTH >= '" + txtlengthfrom.getText() + "' ";
            } else if (txtlengthfrom.getText().equals("") && !txtlengthto.getText().equals("")) {
                cndtn += " AND D.LENGTH <= '" + txtlengthto.getText() + "' ";
            }

            if (!txtwidthfrom.getText().equals("") && !txtwidthto.getText().equals("")) {
                cndtn += " AND D.WIDTH >= '" + txtwidthfrom.getText() + "' AND D.WIDTH <= '" + txtwidthto.getText() + "' ";
            } else if (!txtwidthfrom.getText().equals("") && txtwidthto.getText().equals("")) {
                cndtn += " AND D.WIDTH >= '" + txtwidthfrom.getText() + "' ";
            } else if (txtwidthfrom.getText().equals("") && !txtwidthto.getText().equals("")) {
                cndtn += " AND D.WIDTH <= '" + txtwidthto.getText() + "' ";
            }

            if (!txtgsmfrom.getText().equals("") && !txtgsmto.getText().equals("")) {
                cndtn += " AND I.GSM >= '" + txtgsmfrom.getText() + "' AND I.GSM <= '" + txtgsmto.getText() + "' ";
            } else if (!txtgsmfrom.getText().equals("") && txtgsmto.getText().equals("")) {
                cndtn += " AND I.GSM >= '" + txtgsmfrom.getText() + "' ";
            } else if (txtgsmfrom.getText().equals("") && !txtgsmto.getText().equals("")) {
                cndtn += " AND I.GSM <= '" + txtgsmto.getText() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (D.PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR D.PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().equals("")) {
                String[] Products = txtproductcode.getText().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (D.QUALITY_NO = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR D.QUALITY_NO = '" + Products[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            int status = cmbGRStatus.getSelectedIndex();
            if (status == 0) {
                cndtn += " AND H.APPROVED=1 AND H.CANCELED=0 ";
            }
            if (status == 1) {
                cndtn += " AND H.APPROVED=0 AND H.CANCELED=0 ";
            }
            if (status == 2) {
                cndtn += " AND H.CANCELED=1 ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn1 = " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }
            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn1 += " AND INCHARGE_CD = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            if (chkKeyClientInd.isSelected()){
                cndtn1 += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

//            strSQL = "SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE,D.PARTY_CODE,D.PARTY_NAME,D.QUALITY_NO,D.LENGTH,D.WIDTH,D.ACTUAL_WEIGHT,I.GSM,D.REMARKS,I.INVOICE_AMT AS NET_AMOUNT FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H,PRODUCTION.FELT_SAL_INVOICE_DETAIL I WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) " + cndtn + "";
//            strSQL = "SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE,D.PARTY_CODE,D.PARTY_NAME,D.QUALITY_NO,I.GROUP_NAME,D.LENGTH,D.WIDTH,D.ACTUAL_WEIGHT,I.GSM,D.REMARKS,I.INVOICE_AMT AS NET_AMOUNT FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H,PRODUCTION.FELT_SAL_INVOICE_DETAIL I WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) " + cndtn + "";
            strSQL = "SELECT * FROM "
                    + "(SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE,D.PARTY_CODE,D.PARTY_NAME, "
                    + "D.QUALITY_NO,D.LENGTH,D.WIDTH,D.ACTUAL_WEIGHT,D.RETURN_CATEGORY,I.GSM,D.REMARKS,ROUND(I.INVOICE_AMT,0) AS NET_AMOUNT,I.GROUP_NAME  "
                    + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, "
                    + "PRODUCTION.FELT_SAL_INVOICE_DETAIL I  "
                    + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) " + cndtn + " GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR "
                    + "LEFT JOIN   "
                    + "(SELECT P.PARTY_CODE AS PM_PARTY_CODE,P.INCHARGE_CD,INCHARGE_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_INCHARGE I  "
                    + "WHERE P.INCHARGE_CD = I.INCHARGE_CD AND P.MAIN_ACCOUNT_CODE='210010' AND P.APPROVED=1 AND P.CANCELLED=0) AS PIM   "
                    + "ON GR.PARTY_CODE=PIM.PM_PARTY_CODE   "
                    + "LEFT JOIN   "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE   "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D   "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE   "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM   "
                    + "ON GR.PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "WHERE 1=1 "
                    + cndtn1 + " ";

            int Orderby = cmbGROrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                strSQL += " ORDER BY PARTY_CODE,INVOICE_NO,INVOICE_DATE ";
            }
            if (Orderby == 2) {
                strSQL += " ORDER BY INVOICE_NO,INVOICE_DATE ";
            }

            cmbGRModel = new EITLComboModel();
            cmbGROrderBy.removeAllItems();
            cmbGROrderBy.setModel(cmbGRModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbGRModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "INVOICE NO";
            cmbGRModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double totalAmt = 0.00;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);

                    Object[] rowData = new Object[20];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("DOC_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("DOC_DATE"));
                    rowData[3] = rsTmp.getString("PIECE_NO");
                    rowData[4] = rsTmp.getString("INVOICE_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[6] = rsTmp.getString("GROUP_DESC");
                    rowData[7] = rsTmp.getString("PARTY_CODE");
                    rowData[8] = rsTmp.getString("PARTY_NAME");
                    rowData[9] = rsTmp.getString("QUALITY_NO");
                    rowData[10] = rsTmp.getString("GROUP_NAME");
                    rowData[11] = rsTmp.getString("LENGTH");
                    rowData[12] = rsTmp.getString("WIDTH");
                    rowData[13] = rsTmp.getString("ACTUAL_WEIGHT");
                    rowData[14] = rsTmp.getString("GSM");
                    rowData[15] = rsTmp.getString("NET_AMOUNT");
                    totalAmt = totalAmt + Double.parseDouble(rsTmp.getString("NET_AMOUNT"));
                    rowData[16] = rsTmp.getString("REMARKS");
                    rowData[17] = rsTmp.getString("INCHARGE_NAME");
                    rowData[18] = rsTmp.getString("RETURN_CATEGORY");

                    DataModelGR.addRow(rowData);
                    rsTmp.next();
                }
//                txtGRTotalAmt.setText(String.valueOf(totalAmt));
                txtGRTotalAmt.setText(String.valueOf(Double.valueOf(totalAmt).longValue()));
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void setData_OSGSTOCK() {
        int size = DataModel[16].getRowCount();
        for (int j = size - 1; j >= 0; j--) {
            DataModel[16].removeRow(j);
        }

        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        for (int j = 1; j <= hmPieceList.size(); j++) {
            clsPieceMaster piece = (clsPieceMaster) hmPieceList.get(j);

            Object[] rowData = new Object[75];

            // JOptionPane.showMessageDialog(null  , "Piece : "+piece.getAttribute("PR_PIECE_NO").getString());
            rowData[0] = j;
            rowData[1] = (String) piece.getAttribute("PR_PIECE_NO").getObj();
            rowData[2] = (String) piece.getAttribute("PR_ORDER_DATE").getObj();
            rowData[3] = (String) piece.getAttribute("PR_DOC_NO").getObj();
            rowData[4] = (String) piece.getAttribute("PR_MACHINE_NO").getObj();
            rowData[5] = (String) piece.getAttribute("PR_POSITION_NO").getObj();

            rowData[6] = "";

            try {
                rowData[6] = data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + (String) piece.getAttribute("PR_POSITION_NO").getObj() + "'");
            } catch (Exception ew) {
                //ew.printStackTrace();
                //System.out.println("Error on getting from Machine Master");
            }

            rowData[7] = (String) piece.getAttribute("PR_PARTY_CODE").getObj();

            rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) piece.getAttribute("PR_PARTY_CODE").getObj());

            rowData[9] = (String) piece.getAttribute("PR_PRODUCT_CODE").getObj();

            // System.out.println("DATA CATCH : SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String)piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0,6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");
            rowData[10] = data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6) + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')");

            rowData[11] = (String) piece.getAttribute("PR_GROUP").getObj();
            rowData[12] = (String) piece.getAttribute("PR_STYLE").getObj();
            rowData[13] = (String) piece.getAttribute("PR_LENGTH").getObj();
            rowData[14] = (String) piece.getAttribute("PR_WIDTH").getObj();
            rowData[15] = (String) piece.getAttribute("PR_GSM").getObj();
            rowData[16] = (String) piece.getAttribute("PR_THORITICAL_WEIGHT").getObj();
            rowData[17] = (String) piece.getAttribute("PR_SQMTR").getObj();
            rowData[18] = (String) piece.getAttribute("PR_SYN_PER").getObj();
            rowData[19] = (String) piece.getAttribute("PR_REQUESTED_MONTH").getObj();;
            rowData[20] = (String) piece.getAttribute("PR_REGION").getObj();
            //rowData[21] = (String) piece.getAttribute("PR_INCHARGE").getObj();
            String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '" + (String) piece.getAttribute("PR_INCHARGE").getObj() + "'");
            rowData[21] = InchargeName;

            rowData[22] = (String) piece.getAttribute("PR_REFERENCE").getObj();
            rowData[23] = (String) piece.getAttribute("PR_REFERENCE_DATE").getObj();
            rowData[24] = (String) piece.getAttribute("PR_PO_NO").getObj();
            rowData[25] = (String) piece.getAttribute("PR_PO_DATE").getObj();
            rowData[26] = (String) piece.getAttribute("PR_ORDER_REMARK").getObj();
            rowData[27] = (String) piece.getAttribute("PR_PIECE_REMARK").getObj();

            // In stock weight calculate by using ACTUAL WEIGHT
            total_weight = total_weight + Double.parseDouble(piece.getAttribute("PR_ACTUAL_WEIGHT").getObj() + "");
            total_bill_weight = total_bill_weight + Double.parseDouble(piece.getAttribute("PR_BILL_WEIGHT").getObj() + "");

            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            FeltInvCalc inv_calc;
            try {
                inv_calc = clsOrderValueCalc.calculate(
                        (String) piece.getAttribute("PR_PIECE_NO").getObj(),
                        ((String) piece.getAttribute("PR_PRODUCT_CODE").getObj()).substring(0, 6),
                        (String) piece.getAttribute("PR_PARTY_CODE").getObj(),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj()),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj()),
                        //                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_GSM").getObj())),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj()),
                        //                        Float.parseFloat((String) piece.getAttribute("PR_SQMTR").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_LENGTH").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_WIDTH").getObj()),
                        //Math.round(Float.parseFloat((String) piece.getAttribute("PR_BILL_GSM").getObj())),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_WEIGHT").getObj()),
                        Float.parseFloat((String) piece.getAttribute("PR_BILL_SQMTR").getObj()),
                        //                        (String) piece.getAttribute("PR_ORDER_DATE").getObj());
                        EITLERPGLOBAL.getCurrentDateDB());

                rowData[28] = inv_calc.getFicRate();
                rowData[29] = inv_calc.getFicBasAmount();
                rowData[30] = inv_calc.getFicChemTrtChg();
                rowData[31] = inv_calc.getFicSpiralChg();
                rowData[32] = inv_calc.getFicPinChg();
                rowData[33] = inv_calc.getFicSeamChg();
                rowData[34] = inv_calc.getFicInsInd();
                rowData[35] = inv_calc.getFicInsAmt();
                rowData[36] = inv_calc.getFicExcise();
                rowData[37] = inv_calc.getFicDiscPer();
                rowData[38] = inv_calc.getFicDiscAmt();
                rowData[39] = inv_calc.getFicDiscBasamt();
                rowData[40] = inv_calc.getFicInvAmt();

                total_amount = Math.round(total_amount + inv_calc.getFicInvAmt());

            } catch (Exception e) {
                System.out.println("Error on PIECE REGISTER : " + e.getMessage());
            }
            rowData[41] = (String) piece.getAttribute("PR_PIECE_STAGE").getObj();

            rowData[42] = (String) piece.getAttribute("PR_WARP_DATE").getObj();
            rowData[43] = (String) piece.getAttribute("PR_WVG_DATE").getObj();
            rowData[44] = (String) piece.getAttribute("PR_MND_DATE").getObj();
            rowData[45] = (String) piece.getAttribute("PR_NDL_DATE").getObj();
            rowData[46] = (String) piece.getAttribute("PR_FNSG_DATE").getObj();
            rowData[47] = (String) piece.getAttribute("PR_RCV_DATE").getObj();
            rowData[48] = (String) piece.getAttribute("PR_ACTUAL_WEIGHT").getObj();
            rowData[49] = (String) piece.getAttribute("PR_ACTUAL_LENGTH").getObj();
            rowData[50] = (String) piece.getAttribute("PR_ACTUAL_WIDTH").getObj();
            rowData[51] = (String) piece.getAttribute("PR_BALE_NO").getObj();
            rowData[52] = (String) piece.getAttribute("PR_PACKED_DATE").getObj();
            rowData[53] = (String) piece.getAttribute("PR_REJECTED_FLAG").getObj();
            rowData[54] = (String) piece.getAttribute("PR_REJECTED_REMARK").getObj();
            rowData[55] = (String) piece.getAttribute("PR_DIVERSION_FLAG").getObj();
            rowData[56] = (String) piece.getAttribute("PR_DIVERSION_REASON").getObj();
            rowData[57] = (String) piece.getAttribute("PR_EXP_DISPATCH_DATE").getObj();
            //rowData[58] =   (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj();
            String PriorityName = data.getStringValueFromDB("SELECT PRIORITY_DESC FROM PRODUCTION.FELT_PRIORITY_MASTER where PRIORITY_ID = '" + (String) piece.getAttribute("PR_PRIORITY_HOLD_CAN_FLAG").getObj() + "'");
            rowData[58] = PriorityName;

            rowData[59] = (String) piece.getAttribute("PR_INVOICE_NO").getObj();
            rowData[60] = (String) piece.getAttribute("PR_INVOICE_DATE").getObj();
            rowData[61] = (String) piece.getAttribute("PR_LR_NO").getObj();
            rowData[62] = (String) piece.getAttribute("PR_LR_DATE").getObj();
            rowData[63] = (String) piece.getAttribute("PR_INVOICE_PARTY").getObj();
            rowData[64] = (String) piece.getAttribute("PR_PARTY_CODE_ORIGINAL").getObj();
            rowData[65] = (String) piece.getAttribute("PR_PIECE_NO_ORIGINAL").getObj();

            rowData[66] = (String) piece.getAttribute("PR_BILL_LENGTH").getObj();
            rowData[67] = (String) piece.getAttribute("PR_BILL_WIDTH").getObj();
            rowData[68] = (String) piece.getAttribute("PR_BILL_WEIGHT").getObj();
            rowData[69] = (String) piece.getAttribute("PR_BILL_SQMTR").getObj();
            rowData[70] = (String) piece.getAttribute("PR_BILL_GSM").getObj();
            rowData[71] = (String) piece.getAttribute("PR_BILL_PRODUCT_CODE").getObj();
            rowData[72] = (String) piece.getAttribute("PR_UPN").getObj();
            rowData[73] = (String) piece.getAttribute("PR_PKG_DP_NO").getObj();
            rowData[74] = (String) piece.getAttribute("PR_PKG_DP_DATE").getObj();
            //rowData[65] =   (String) piece.getAttribute("PR_WH_CODE").getObj();

//                piece.setAttribute("PR_WH_CODE", resultSet.getString("PR_WH_CODE"));
//                piece.setAttribute("PR_INWARD_NO", resultSet.getString("PR_INWARD_NO"));
//                piece.setAttribute("PR_RACK_NO", resultSet.getString("PR_RACK_NO"));
//                piece.setAttribute("PR_PIECE_ID", resultSet.getString("PR_PIECE_ID"));
//                piece.setAttribute("PR_LOCATION", resultSet.getString("PR_LOCATION"));
//                piece.setAttribute("PR_HOLD_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("PR_HOLD_DATE")));
//                piece.setAttribute("PR_HOLD_REASON", resultSet.getString("PR_HOLD_REASON"));
//                piece.setAttribute("PR_RELEASE_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("PR_RELEASE_DATE")));
//                piece.setAttribute("PR_PIECE_STAGE", resultSet.getString("PR_PIECE_STAGE"));
//                piece.setAttribute("CREATED_DATE", resultSet.getString("CREATED_DATE"));
//                piece.setAttribute("CREATED_BY", resultSet.getString("CREATED_BY"));
//                piece.setAttribute("MODIFIED_DATE", resultSet.getString("MODIFIED_DATE"));
//                piece.setAttribute("MODIFIED_BY", resultSet.getString("MODIFIED_BY"));
//                piece.setAttribute("HIERARCHY_ID", resultSet.getString("HIERARCHY_ID"));
//                piece.setAttribute("APPROVER_BY", resultSet.getString("APPROVER_BY"));
//                piece.setAttribute("APPROVER_DATE", resultSet.getString("APPROVER_DATE"));
//                piece.setAttribute("APPROVER_REMARK", resultSet.getString("APPROVER_REMARK"));
//            DataModel[i].SetVariable(41, "WARP_DATE");
//                DataModel[i].SetVariable(42, "WVG_DATE");
//                DataModel[i].SetVariable(43, "MND_DATE");
//                DataModel[i].SetVariable(44, "NDL_DATE");
//                DataModel[i].SetVariable(45, "FNSG_DATE");
//                DataModel[i].SetVariable(46, "RCV_DATE");
//                DataModel[i].SetVariable(47, "ACTUAL_WEIGHT");
//                DataModel[i].SetVariable(48, "ACTUAL_LENGTH");
//                DataModel[i].SetVariable(49, "ACTUAL_WIDTH");
//                DataModel[i].SetVariable(50, "BALE_NO");
//                DataModel[i].SetVariable(51, "PACKED_DATE");
//                DataModel[i].SetVariable(52, "REJECTED");
//                DataModel[i].SetVariable(53, "REJECTED_REMARK");
//                DataModel[i].SetVariable(54, "DIVERSION");
//                DataModel[i].SetVariable(55, "DIVERSION_REGION");
//                DataModel[i].SetVariable(56, "EXP_DISPATCH");
//                DataModel[i].SetVariable(57, "PRIORITY_HOLD_CAN");
//                DataModel[i].SetVariable(58, "INVOICE_NO");
//                DataModel[i].SetVariable(59, "INVOICE_DATE");
//                DataModel[i].SetVariable(60, "LR_NO");
//                DataModel[i].SetVariable(61, "LR_DATE");
//                DataModel[i].SetVariable(61, "INVOICE_PARTY");
//                DataModel[i].SetVariable(63, "PARTY_CODE_ORIGINAL");
//                DataModel[i].SetVariable(64, "PIECE_NO_ORIGINAL");
            DecimalFormat df = new DecimalFormat("###.##");
            txtTotalWeight_OSGstock.setText(df.format(total_weight));
            txtTotalBillWeight_OSGstock.setText(df.format(total_bill_weight));
            txtTotalAmount_OSGstock.setText(df.format(total_amount));

//            txtTotalWeight_stock.setText(EITLERPGLOBAL.round(total_weight,1)+"");
//            txtTotalAmount_stock.setText(EITLERPGLOBAL.round(total_amount,1)+"");
            DataModel[16].addRow(rowData);
        }

    }

    private double OutStandingAmt(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            InvoiceType = 2;
            BookCode = " AND BOOK_CODE IN ('09','18') ";
            ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL && clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }
                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8")) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='210010' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='210010' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='210010' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='210010' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    private double AdvanceAmt(String MainCode, String PartyCode) {
        double advAmt = 0;

        advAmt = data.getDoubleValueFromDB("SELECT SUM(B.AMOUNT) AS AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND A.VOUCHER_DATE<=CURDATE() AND A.VOUCHER_TYPE IN (6,7,8,9,12) AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE = '" + PartyCode + "' "
                + "AND A.APPROVED=1 AND A.CANCELLED=0 AND A.EXCLUDE_IN_ADJ =0 AND B.EFFECT='C' AND B.INVOICE_NO ='' AND B.MODULE_ID <>65 "
                + "AND B.GRN_NO ='' AND (B.MATCHED=0 OR B.MATCHED IS NULL) "
                + "GROUP BY B.SUB_ACCOUNT_CODE "
                + "ORDER BY B.SUB_ACCOUNT_CODE");

        return EITLERPGLOBAL.round(advAmt, 2);
    }

    private void FormatGridPR() {
        DataModelPR = new EITLTableModel();
        TablePR.removeAll();
        TablePR.setModel(DataModelPR);

        TablePR.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);

        DataModelPR.addColumn("Sr.No"); //0
        DataModelPR.addColumn("Invoice No"); //1
        DataModelPR.addColumn("Invoice Date"); //2
        DataModelPR.addColumn("Group Name"); //3
        DataModelPR.addColumn("Party Code"); //4
        DataModelPR.addColumn("Party Name"); //5
        DataModelPR.addColumn("Piece No"); //6
        DataModelPR.addColumn("Machine No"); //7
        DataModelPR.addColumn("Position No"); //8
        DataModelPR.addColumn("Position Desc"); //9
        DataModelPR.addColumn("Position Design No"); //10
        DataModelPR.addColumn("UPN No"); //11
        DataModelPR.addColumn("Product Code"); //12
        DataModelPR.addColumn("Product Group"); //13
        DataModelPR.addColumn("Charge Code"); //14
        DataModelPR.addColumn("WH Delivery Date"); //15
        DataModelPR.addColumn("Inv to WH Rec Days"); //16
        DataModelPR.addColumn("Invoice Amt"); //17
        DataModelPR.addColumn("Payment Recd Voucher Date"); //18
        DataModelPR.addColumn("Amt Recvd"); //19
        DataModelPR.addColumn("Balance Amt"); //20
        DataModelPR.addColumn("WH Rec to Voucher dt Days"); //21
        DataModelPR.addColumn("Inv to Voucher_dt days"); //22
        DataModelPR.addColumn("Voucher"); //23
        DataModelPR.addColumn("Incharge"); //24
        DataModelPR.addColumn("PI Date"); //25
        DataModelPR.addColumn("PI Date (Last)"); //26
        DataModelPR.addColumn("PI Detail"); //27

        DataModelPR.TableReadOnly(true);
        TablePR.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GeneratePR() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        try {
            FormatGridPR(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PARTY_CODE= '" + PartyCode + "'";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().equals("")) {
                String[] Products = txtproductcode.getText().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

//            strSQL = "SELECT A.INVOICE_NO,A.INVOICE_DATE,PIECE_NO,PRODUCT_CODE,A.PARTY_CODE,A.PARTY_NAME,CHARGE_CODE,PR_FNSG_DATE,FNSG_INV_DAYS,A.TOTAL_NET_AMOUNT,C.VALUE_DATE AS V_DATE ,COALESCE(C.AMOUNT,0) AS AMOUNT, (TOTAL_NET_AMOUNT - COALESCE(C.AMOUNT,0)) AS SHORT_AMT, "
//                    + "DATEDIFF(C.VALUE_DATE,PR_FNSG_DATE) AS VDATE_FNSG_DAY,DATEDIFF(C.VALUE_DATE,A.INVOICE_DATE) AS VDATE_INV_DAYS,VOUCHER  FROM "
//                    + "( SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) AS UID,INVOICE_NO,INVOICE_DATE,PIECE_NO,PRODUCT_CODE,PARTY_CODE,PARTY_NAME,INVOICE_AMT AS TOTAL_NET_AMOUNT,CHARGE_CODE,PR_FNSG_DATE,DATEDIFF(INVOICE_DATE,PR_FNSG_DATE) AS FNSG_INV_DAYS "
//                    + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
//                    + "WHERE INVOICE_DATE>= '" + FromDate + "' AND INVOICE_DATE <='" + ToDate + "' AND CANCELLED=0 AND PR_PIECE_NO =PIECE_NO "
//                    + ")  AS A "
//                    + "LEFT JOIN "
//                    + "(SELECT CONCAT(INVOICE_NO,INVOICE_DATE,SUB_ACCOUNT_CODE) AS UID,SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,INVOICE_DATE,EFFECT, "
//                    + "GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER "
//                    + "FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER B "
//                    + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND CONCAT(INVOICE_NO,INVOICE_DATE,SUB_ACCOUNT_CODE) IN (SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>= '" + FromDate + "' AND INVOICE_DATE <='" + ToDate + "'  AND CANCELLED=0 ) "
//                    + "AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY CONCAT(INVOICE_NO,INVOICE_DATE,SUB_ACCOUNT_CODE),INVOICE_NO,INVOICE_DATE "
//                    + ") AS C ON A.UID=C.UID WHERE 1=1 " + cndtn + " ";
            strSQL = "SELECT * FROM ( "
                    + "SELECT A.INVOICE_NO,A.INVOICE_DATE,PIECE_NO,PRODUCT_CODE,A.PARTY_CODE,A.PARTY_NAME,CHARGE_CODE,PR_FNSG_DATE,FNSG_INV_DAYS,PR_MACHINE_NO,PR_POSITION_NO,PR_UPN,PR_INCHARGE,PR_GROUP,A.TOTAL_NET_AMOUNT,C.VALUE_DATE AS V_DATE ,COALESCE(C.AMOUNT,0) AS AMOUNT, (TOTAL_NET_AMOUNT - COALESCE(C.AMOUNT,0)) AS SHORT_AMT, "
                    + "DATEDIFF(C.VALUE_DATE,PR_FNSG_DATE) AS VDATE_FNSG_DAY,DATEDIFF(C.VALUE_DATE,A.INVOICE_DATE) AS VDATE_INV_DAYS,VOUCHER  FROM "
                    + "( SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) AS UID,INVOICE_NO,INVOICE_DATE,PIECE_NO,PRODUCT_CODE,PARTY_CODE,PARTY_NAME,INVOICE_AMT AS TOTAL_NET_AMOUNT,CHARGE_CODE,PR_FNSG_DATE,DATEDIFF(INVOICE_DATE,PR_FNSG_DATE) AS FNSG_INV_DAYS,PR_MACHINE_NO,PR_POSITION_NO,PR_UPN,PR_INCHARGE,PR_GROUP "
                    + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE INVOICE_DATE>= '" + FromDate + "' AND INVOICE_DATE <='" + ToDate + "' AND CANCELLED=0 AND PR_PIECE_NO =PIECE_NO "
                    + ")  AS A "
                    + "LEFT JOIN "
                    + "(SELECT CONCAT(INVOICE_NO,INVOICE_DATE,SUB_ACCOUNT_CODE) AS UID,SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,INVOICE_DATE,EFFECT, "
                    + "GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER "
                    + "FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER B "
                    + "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND CONCAT(INVOICE_NO,INVOICE_DATE,SUB_ACCOUNT_CODE) IN (SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE INVOICE_DATE>= '" + FromDate + "' AND INVOICE_DATE <='" + ToDate + "'  AND CANCELLED=0 ) "
                    + "AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY CONCAT(INVOICE_NO,INVOICE_DATE,SUB_ACCOUNT_CODE),INVOICE_NO,INVOICE_DATE "
                    + ") AS C ON A.UID=C.UID WHERE 1=1 " + cndtn + " "
                    + " ) AS PAY "
                    + "LEFT JOIN   "
                    + "(SELECT P.PARTY_CODE AS PM_PARTY_CODE,P.INCHARGE_CD,INCHARGE_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_INCHARGE I  "
                    + "WHERE P.INCHARGE_CD = I.INCHARGE_CD AND P.MAIN_ACCOUNT_CODE='210010' AND P.APPROVED=1 AND P.CANCELLED=0) AS PIM   "
                    + "ON PAY.PARTY_CODE=PIM.PM_PARTY_CODE   "
                    //Added on 22-12-2018
                    + "LEFT JOIN   "
                    + "(SELECT PIECE_NO AS PRO_PIECE_NO,PARTY_CD AS PRO_PARTY_CODE,MIN(PROFORMA_DATE) AS PRO_PROFORMA_DATE,MAX(PROFORMA_DATE) AS PRO_MAX_PROFORMA_DATE,GROUP_CONCAT(D.PROFORMA_NO,' (',DATE_FORMAT(PROFORMA_DATE, '%d/%m/%Y'),') ') AS PRO_NO_DATE "
                    + "FROM PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL D, PRODUCTION.FELT_PROFORMA_INVOICE_HEADER H "
                    + "WHERE H.PROFORMA_NO = D.PROFORMA_NO AND APPROVED =1 AND CANCELED =0 GROUP BY PIECE_NO,PARTY_CD) AS PRO   "
                    + "ON PAY.PIECE_NO=PRO.PRO_PIECE_NO AND PAY.PARTY_CODE=PRO.PRO_PARTY_CODE   "
                    //
                    + "LEFT JOIN   "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE   "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D   "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE   "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM   "
                    + "ON PAY.PARTY_CODE=GM.GROUP_PARTY_CODE  "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP   "
                    + "ON PAY.PR_POSITION_NO=MP.POSITION_NO "
                    + "WHERE 1=1 "
                    + grp_cndtn + " ";

            int Orderby = cmbPROrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                strSQL += " ORDER BY PARTY_CODE,INVOICE_NO,INVOICE_DATE ";
            }
            if (Orderby == 2) {
                strSQL += " ORDER BY INVOICE_NO,INVOICE_DATE ";
            }

            cmbPRModel = new EITLComboModel();
            cmbPROrderBy.removeAllItems();
            cmbPROrderBy.setModel(cmbPRModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbPRModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "INVOICE NO";
            cmbPRModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double totalAmt = 0.00;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);

                    Object[] rowData = new Object[50];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("INVOICE_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[3] = rsTmp.getString("GROUP_DESC");
                    rowData[4] = rsTmp.getString("PARTY_CODE");
                    rowData[5] = rsTmp.getString("PARTY_NAME");
                    rowData[6] = rsTmp.getString("PIECE_NO");
                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
                    rowData[9] = rsTmp.getString("POSITION_DESC");
                    rowData[10] = rsTmp.getString("POSITION_DESIGN_NO");
                    rowData[11] = rsTmp.getString("PR_UPN");
                    rowData[12] = rsTmp.getString("PRODUCT_CODE");
                    rowData[13] = rsTmp.getString("PR_GROUP");
                    rowData[14] = rsTmp.getString("CHARGE_CODE");
                    rowData[15] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[16] = rsTmp.getString("FNSG_INV_DAYS");
                    rowData[17] = rsTmp.getString("TOTAL_NET_AMOUNT");
                    rowData[18] = EITLERPGLOBAL.formatDate(rsTmp.getString("V_DATE"));
                    rowData[19] = rsTmp.getString("AMOUNT");
                    rowData[20] = rsTmp.getString("SHORT_AMT");
                    rowData[21] = rsTmp.getString("VDATE_FNSG_DAY");
                    rowData[22] = rsTmp.getString("VDATE_INV_DAYS");
                    rowData[23] = rsTmp.getString("VOUCHER");
                    rowData[24] = rsTmp.getString("INCHARGE_NAME");
                    rowData[25] = EITLERPGLOBAL.formatDate(rsTmp.getString("PRO_PROFORMA_DATE"));
                    rowData[26] = EITLERPGLOBAL.formatDate(rsTmp.getString("PRO_MAX_PROFORMA_DATE"));
                    rowData[27] = rsTmp.getString("PRO_NO_DATE");

                    DataModelPR.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridFnsdvsInv() {
        DataModelFnsdvsInv = new EITLTableModel();
        TableFnsdvsInv.removeAll();
        TableFnsdvsInv.setModel(DataModelFnsdvsInv);

        TableFnsdvsInv.setAutoResizeMode(TableFnsdvsInv.AUTO_RESIZE_OFF);

        DataModelFnsdvsInv.addColumn("Sr.No"); //0
        DataModelFnsdvsInv.addColumn("Piece Stage"); //1
        DataModelFnsdvsInv.addColumn("Party Code"); //2
        DataModelFnsdvsInv.addColumn("Party Name"); //3
        DataModelFnsdvsInv.addColumn("City"); //4
        DataModelFnsdvsInv.addColumn("Incharge"); //5
        DataModelFnsdvsInv.addColumn("Piece No"); //6
        DataModelFnsdvsInv.addColumn("Finishing Date"); //7
        DataModelFnsdvsInv.addColumn("WH Stock Days"); //8
        DataModelFnsdvsInv.addColumn("Packing Date"); //9
        DataModelFnsdvsInv.addColumn("Fnsd vs BSR Days"); //10
        DataModelFnsdvsInv.addColumn("Invoice Date"); //11
        DataModelFnsdvsInv.addColumn("Fnsd vs Inv Days"); //12
        DataModelFnsdvsInv.addColumn("Machine No"); //13
        DataModelFnsdvsInv.addColumn("Position No"); //14
        DataModelFnsdvsInv.addColumn("Position Desc"); //15
        DataModelFnsdvsInv.addColumn("Position Design No"); //16
        DataModelFnsdvsInv.addColumn("UPN No"); //17
        DataModelFnsdvsInv.addColumn("Product Code"); //18
        DataModelFnsdvsInv.addColumn("Group Name"); //19
        DataModelFnsdvsInv.addColumn("Length"); //20
        DataModelFnsdvsInv.addColumn("Width"); //21
        DataModelFnsdvsInv.addColumn("GSM"); //22
        DataModelFnsdvsInv.addColumn("Weight"); //23
        DataModelFnsdvsInv.addColumn("SQMTR"); //24

        DataModelFnsdvsInv.TableReadOnly(true);
        TableFnsdvsInv.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateFnsdvsInv() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        try {
            FormatGridFnsdvsInv(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "'";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()) {
                cndtn += " AND COALESCE(KEY_CLIENT_IND,0)=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT PR_PIECE_STAGE,PR_PARTY_CODE,PARTY_NAME,CITY_ID,INCHARGE_NAME,PR_PIECE_NO,PR_FNSG_DATE,WH_DAYS,PR_PACKED_DATE,PACK_DAYS,PR_INVOICE_DATE,FI_DAYS,PR_MACHINE_NO,PR_POSITION_NO,POSITION_DESC,POSITION_DESIGN_NO,PR_UPN,PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,PR_BILL_WEIGHT,PR_BILL_SQMTR FROM "
                    + "(SELECT PR_PIECE_STAGE,PR_PARTY_CODE,PARTY_NAME,CITY_ID,INCHARGE_NAME,PR_PIECE_NO,PR_FNSG_DATE,WH_DAYS,PR_PACKED_DATE,PACK_DAYS,PR_INVOICE_DATE,FI_DAYS,PR_MACHINE_NO,PR_POSITION_NO,PR_UPN,PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,PR_BILL_WEIGHT,PR_BILL_SQMTR FROM "
                    + "(SELECT PR_PIECE_STAGE,PR_PARTY_CODE,PARTY_NAME,CITY_ID,PR_INCHARGE,PR_PIECE_NO,PR_FNSG_DATE, "
                    + "CASE WHEN PR_INVOICE_DATE !='0000-00-00' THEN 0 ELSE DATEDIFF(NOW(),PR_FNSG_DATE) END AS WH_DAYS, "
                    + "PR_PACKED_DATE, "
                    + "CASE WHEN PR_INVOICE_DATE ='0000-00-00'  AND  PR_PACKED_DATE ='0000-00-00' THEN 0 "
                    + "WHEN PR_INVOICE_DATE ='0000-00-00'  AND  PR_PACKED_DATE !='0000-00-00' THEN DATEDIFF(PR_PACKED_DATE,PR_FNSG_DATE) "
                    + " WHEN PR_INVOICE_DATE !='0000-00-00'  AND  PR_PACKED_DATE !='0000-00-00' THEN DATEDIFF(PR_PACKED_DATE,PR_FNSG_DATE) "
                    + "END AS PACK_DAYS, "
                    + "PR_INVOICE_DATE, "
                    + "CASE WHEN PR_INVOICE_DATE ='0000-00-00' THEN 0 ELSE DATEDIFF(PR_INVOICE_DATE,PR_FNSG_DATE)  END AS FI_DAYS, "
                    + "PR_MACHINE_NO,PR_POSITION_NO,PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,PR_UPN,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER, "
                    + "DINESHMILLS.D_SAL_PARTY_MASTER "
                    //+ " WHERE PR_FNSG_DATE >='2018-01-01' "
                    + " WHERE PR_FNSG_DATE>= '" + FromDate + "' AND PR_FNSG_DATE <='" + ToDate + "' "
                    + "AND MAIN_ACCOUNT_CODE = 210010 AND PARTY_CODE = PR_PARTY_CODE "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS I "
                    + "ON PR_INCHARGE = INCHARGE_CD) AS PRI "
                    + "LEFT JOIN "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS PM "
                    + "ON POSITION_NO = PR_POSITION_NO ";

            int Orderby = cmbFnsdvsInvOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                strSQL += " ORDER BY PR_FNSG_DATE,PR_PIECE_NO ";
            }
            if (Orderby == 2) {
                strSQL += " ORDER BY PR_PARTY_CODE,PR_FNSG_DATE ";
            }
            if (Orderby == 3) {
                strSQL += " ORDER BY PR_PIECE_NO ";
            }

            cmbFnsdvsInvModel = new EITLComboModel();
            cmbFnsdvsInvOrderBy.removeAllItems();
            cmbFnsdvsInvOrderBy.setModel(cmbFnsdvsInvModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "FINISHING DATE";
            cmbFnsdvsInvModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "PARTY CODE";
            cmbFnsdvsInvModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "PIECE NO";
            cmbFnsdvsInvModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double totalAmt = 0.00;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[40];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
                    rowData[2] = rsTmp.getString("PR_PARTY_CODE");
                    rowData[3] = rsTmp.getString("PARTY_NAME");
                    rowData[4] = rsTmp.getString("CITY_ID");
                    rowData[5] = rsTmp.getString("INCHARGE_NAME");
                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
                    rowData[7] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[8] = rsTmp.getString("WH_DAYS");
                    rowData[9] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    rowData[10] = rsTmp.getString("PACK_DAYS");
                    rowData[11] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    rowData[12] = rsTmp.getString("FI_DAYS");
                    rowData[13] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[14] = rsTmp.getString("PR_POSITION_NO");
                    rowData[15] = rsTmp.getString("POSITION_DESC");
                    rowData[16] = rsTmp.getString("POSITION_DESIGN_NO");
                    rowData[17] = rsTmp.getString("PR_UPN");
                    rowData[18] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[19] = rsTmp.getString("PR_GROUP");
                    rowData[20] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[21] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[22] = rsTmp.getString("PR_BILL_GSM");
                    rowData[23] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[24] = rsTmp.getString("PR_BILL_SQMTR");

                    DataModelFnsdvsInv.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

//    private void FormatGridProduction() {
//        DataModelProduction = new EITLTableModel();
//        TableProduction.removeAll();
//        TableProduction.setModel(DataModelProduction);
//
//        TableProduction.setAutoResizeMode(TableProduction.AUTO_RESIZE_OFF);
//
//        DataModelProduction.addColumn("Sr No");
//        DataModelProduction.addColumn("Piece Stage");
//        DataModelProduction.addColumn("WIP Status");
//        DataModelProduction.addColumn("Group Name");
//        DataModelProduction.addColumn("Party Code");
//        DataModelProduction.addColumn("Party Name");
//        DataModelProduction.addColumn("Piece No");
//        DataModelProduction.addColumn("Machine No");
//        DataModelProduction.addColumn("Position No");
//        DataModelProduction.addColumn("Position No(Design)");
//        DataModelProduction.addColumn("Position Desc");
//        DataModelProduction.addColumn("UPN");
//        DataModelProduction.addColumn("Order No");
//        DataModelProduction.addColumn("Order Date");
//        DataModelProduction.addColumn("Product Code");
//        DataModelProduction.addColumn("Bill Product Code");
//        DataModelProduction.addColumn("Product Desc");
//        DataModelProduction.addColumn("Group");
//        DataModelProduction.addColumn("Style");
//        DataModelProduction.addColumn("Bill Style");
//        DataModelProduction.addColumn("Length");
//        DataModelProduction.addColumn("Bill Length");
//        DataModelProduction.addColumn("Width");
//        DataModelProduction.addColumn("Bill Width");
//        DataModelProduction.addColumn("GSM");
//        DataModelProduction.addColumn("Bill GSM");
//        DataModelProduction.addColumn("Sq.Mtr");
//        DataModelProduction.addColumn("Bill Sq.Mtr");
//        DataModelProduction.addColumn("Thortical Weight");
//        DataModelProduction.addColumn("Bill Weight");
//        DataModelProduction.addColumn("SYN(%)");
//        DataModelProduction.addColumn("Req Month");
//        DataModelProduction.addColumn("WARP DATE");
//        DataModelProduction.addColumn("ORD VS WARP DAYS");
//        DataModelProduction.addColumn("WVG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_WVG");
//        DataModelProduction.addColumn("WVG LAYER_REMARK");
//        DataModelProduction.addColumn("WVG WEIGHT");
//        DataModelProduction.addColumn("WVG WEIGHT_A");
//        DataModelProduction.addColumn("WVG WEIGHT_B");
//        DataModelProduction.addColumn("SPLICE DATE");
//        DataModelProduction.addColumn("MND DATE");
//        DataModelProduction.addColumn("DAYS ORDER_MND");
//        DataModelProduction.addColumn("MND LAYER_REMARK");
//        DataModelProduction.addColumn("MND WEIGHT");
//        DataModelProduction.addColumn("MND WEIGHT_A");
//        DataModelProduction.addColumn("MND WEIGHT_B");
//        DataModelProduction.addColumn("NDL DATE");
//        DataModelProduction.addColumn("DAYS ORDER_NDL");
//        DataModelProduction.addColumn("NDL WEIGHT");
//        DataModelProduction.addColumn("SEAM DATE");
//        DataModelProduction.addColumn("FNSG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_FNSG");
//        DataModelProduction.addColumn("DAYS WRP_WVG");
//        DataModelProduction.addColumn("DAYS WVG_MND");
//        DataModelProduction.addColumn("DAYS MND_NDL");
//        DataModelProduction.addColumn("DAYS NDL_FNSG");
//        DataModelProduction.addColumn("Rate");
//        DataModelProduction.addColumn("Basic Amt");
//        DataModelProduction.addColumn("CHEM TRT CHG");
//        DataModelProduction.addColumn("SPIRAL CHG");
//        DataModelProduction.addColumn("Pin CHG");
//        DataModelProduction.addColumn("Seam CHG");
//        DataModelProduction.addColumn("INS Ind");
//        DataModelProduction.addColumn("INS Amt");
//        DataModelProduction.addColumn("GST");
//        DataModelProduction.addColumn("Disc Per");
//        DataModelProduction.addColumn("Disc Amt");
//        DataModelProduction.addColumn("Disc Bas Amt");
//        DataModelProduction.addColumn("Amount");
//        DataModelProduction.addColumn("Schedule Month");
//        DataModelProduction.addColumn("Referance");
//        DataModelProduction.addColumn("REF Date");
//        DataModelProduction.addColumn("PO No");
//        DataModelProduction.addColumn("PO Date");
//        DataModelProduction.addColumn("Order Remark");
//        DataModelProduction.addColumn("Piece Remark");
//        DataModelProduction.addColumn("Rejected");
//        DataModelProduction.addColumn("Rejected Remark");
//        DataModelProduction.addColumn("Diversion");
//        DataModelProduction.addColumn("Diversion Reason");
//        DataModelProduction.addColumn("PartyCode Original");
//        DataModelProduction.addColumn("PieceNo Original");
//        DataModelProduction.addColumn("Incharge");
//        DataModelProduction.addColumn("Obsolete Status");
//        DataModelProduction.addColumn("Obsolete Reason");
//        DataModelProduction.addColumn("Days Status");
//
//        DataModelProduction.TableReadOnly(true);
//        TableProduction.getColumnModel().getColumn(0).setMaxWidth(50);
//    }
//
//    private void GenerateProduction() {
//        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
//        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
//        String cndtn = "";
//        String grp_cndtn = "";
//        double total_weight = 0;
//        double total_amount = 0;
//
//        try {
//            FormatGridProduction(); //clear existing content of table
//            String PartyCode = txtpartycode.getText().toString();
//            ResultSet rsTmp;
//
//            if (!txtpartycode.getText().trim().equals("")) {
//                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
//            }
//
//            if (!txtgroupcode.getText().trim().equals("")) {
//                grp_cndtn = " WHERE GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
//            }
//
//            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
//                try {
//                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
//                try {
//                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
//                try {
//                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//
//            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
//            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
//            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
//            }
//
//            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
//            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
//            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
//            }
//
//            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
//            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
//            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
//            }
//
//            if (!txtpieceno.getText().equals("")) {
//                String[] Pieces = txtpieceno.getText().split(",");
//                for (int i = 0; i < Pieces.length; i++) {
//                    if (i == 0) {
//                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
//                    } else {
//                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
//                    }
//                }
//                cndtn += ") ";
//            }
//
//            if (!txtproductcode.getText().trim().equals("")) {
//                String[] Products = txtproductcode.getText().trim().split(",");
//                for (int i = 0; i < Products.length; i++) {
//                    if (i == 0) {
//                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
//                    } else {
//                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
//                    }
//                }
//                cndtn += ")";
//            }
//
//            if (!txtMachineNo.getText().trim().equals("")) {
//                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
//            }
//
//            if (!txtPosition.getText().trim().equals("")) {
//                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
//            }
//
//            if (!txtupnno.getText().trim().equals("")) {
//                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
//            }
//
//            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
//                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
//            }
//
//            if (rbtnPieceStage.isSelected() && !cmbProductionStage.getSelectedItem().equals("ALL")) {
//                cndtn += " AND PR_PIECE_STAGE = '" + cmbProductionStage.getSelectedItem() + "' ";
//            }
//
//            if (rbtnWIPStatus.isSelected() && !cmbProductionStatus.getSelectedItem().equals("ALL")) {
//                cndtn += " AND PR_WIP_STATUS = '" + cmbProductionStatus.getSelectedItem() + "' ";
//            }
//
//            String strSQL = "";
//
//            strSQL = "SELECT * FROM "
//                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
//                    + " AND PR_PIECE_STAGE IN ('PLANNING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC') "
//                    + cndtn + " "
//                    + ") AS PR "
//                    + "LEFT JOIN  "
//                    + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
//                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
//                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
//                    + "LEFT JOIN  "
//                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
//                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
//                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
//                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
//                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
//                    + "LEFT JOIN  "
//                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
//                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
//                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
//                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
//                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
//                    + grp_cndtn + " " + ORDER_BY;
//
//            System.out.println("Query..." + strSQL);
//            rsTmp = data.getResult(strSQL);
//            rsTmp.first();
//            if (rsTmp.getRow() > 0) {
//                int cnt = 0;
//
//                while (!rsTmp.isAfterLast()) {
//                    cnt++;
//
//                    Object[] rowData = new Object[100];
//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("GROUP_DESC");
//                    rowData[4] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[5] = rsTmp.getString("PARTY_NAME");
//                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[10] = rsTmp.getString("POSITION_DESC");
//                    rowData[11] = rsTmp.getString("PR_UPN");
//                    rowData[12] = rsTmp.getString("PR_DOC_NO");
//                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[14] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[15] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[16] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[17] = rsTmp.getString("PR_GROUP");
//                    rowData[18] = rsTmp.getString("PR_STYLE");
//                    rowData[19] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[20] = rsTmp.getString("PR_LENGTH");
//                    rowData[21] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[22] = rsTmp.getString("PR_WIDTH");
//                    rowData[23] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[24] = rsTmp.getString("PR_GSM");
//                    rowData[25] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[26] = rsTmp.getString("PR_SQMTR");
//                    rowData[27] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[28] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));
//
//                    rowData[29] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[30] = rsTmp.getString("PR_SYN_PER");
//                    rowData[31] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[33] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[34] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[35] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[36] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[37] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[38] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[39] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[40] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[41] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[42] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[43] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[44] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[45] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[46] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[47] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[48] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[49] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[50] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[51] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[52] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[53] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[54] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[55] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[56] = rsTmp.getString("PR_DAYS_NDL_FNG");
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData[57] = inv_calc.getFicRate();
//                        rowData[58] = inv_calc.getFicBasAmount();
//                        rowData[59] = inv_calc.getFicChemTrtChg();
//                        rowData[60] = inv_calc.getFicSpiralChg();
//                        rowData[61] = inv_calc.getFicPinChg();
//                        rowData[62] = inv_calc.getFicSeamChg();
//                        rowData[63] = inv_calc.getFicInsInd();
//                        rowData[64] = inv_calc.getFicInsAmt();
//                        rowData[65] = inv_calc.getFicGST();
//                        rowData[66] = inv_calc.getFicDiscPer();
//                        rowData[67] = inv_calc.getFicDiscAmt();
//                        rowData[68] = inv_calc.getFicDiscBasamt();
//                        rowData[69] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[70] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[71] = rsTmp.getString("PR_REFERENCE");
//                    rowData[72] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[73] = rsTmp.getString("PR_PO_NO");
//                    rowData[74] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[75] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[76] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[77] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[78] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[79] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[80] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[81] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[82] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[83] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[84] = rsTmp.getString("PR_DELINK");
//                    rowData[85] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[86] = rsTmp.getString("PR_DAYS_STATUS");
//
//                    DecimalFormat df = new DecimalFormat("###.##");
//                    txtTotalWeight_production2.setText(df.format(total_weight));
//                    txtTotalAmount_production2.setText(df.format(total_amount));
//
//                    DataModelProduction.addRow(rowData);
//                    rsTmp.next();
//                }
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//    }
//
//    private void FormatGridStock() {
//        DataModelStock = new EITLTableModel();
//        Table_STOCK.removeAll();
//        Table_STOCK.setModel(DataModelStock);
//
//        Table_STOCK.setAutoResizeMode(Table_STOCK.AUTO_RESIZE_OFF);
//
//        DataModelStock.addColumn("Sr No");
//        DataModelStock.addColumn("Piece Stage");
//        DataModelStock.addColumn("WIP Status");
//        DataModelStock.addColumn("Group Name");
//        DataModelStock.addColumn("Party Code");
//        DataModelStock.addColumn("Party Name");
//        DataModelStock.addColumn("Piece No");
//        DataModelStock.addColumn("Machine No");
//        DataModelStock.addColumn("Position No");
//        DataModelStock.addColumn("Position No(Design)");
//        DataModelStock.addColumn("Position Desc");
//        DataModelStock.addColumn("UPN");
//        DataModelStock.addColumn("Order No");
//        DataModelStock.addColumn("Order Date");
//        DataModelStock.addColumn("Product Code");
//        DataModelStock.addColumn("Bill Product Code");
//        DataModelStock.addColumn("Product Desc");
//        DataModelStock.addColumn("Group");
//        DataModelStock.addColumn("Style");
//        DataModelStock.addColumn("Bill Style");
//        DataModelStock.addColumn("Length");
//        DataModelStock.addColumn("Bill Length");
//        DataModelStock.addColumn("Actual Length");
//        DataModelStock.addColumn("Width");
//        DataModelStock.addColumn("Bill Width");
//        DataModelStock.addColumn("Actual Width");
//        DataModelStock.addColumn("GSM");
//        DataModelStock.addColumn("Bill GSM");
//        DataModelStock.addColumn("Sq.Mtr");
//        DataModelStock.addColumn("Bill Sq.Mtr");
//        DataModelStock.addColumn("Thortical Weight");
//        DataModelStock.addColumn("Bill Weight");
//        DataModelStock.addColumn("Actual Weight");
//        DataModelStock.addColumn("SYN(%)");
//        DataModelStock.addColumn("Req Month");
//        DataModelStock.addColumn("WARP DATE");
//        DataModelStock.addColumn("ORD VS WARP DAYS");
//        DataModelStock.addColumn("WVG DATE");
//        DataModelStock.addColumn("DAYS ORDER_WVG");
//        DataModelStock.addColumn("WVG LAYER_REMARK");
//        DataModelStock.addColumn("WVG WEIGHT");
//        DataModelStock.addColumn("WVG WEIGHT_A");
//        DataModelStock.addColumn("WVG WEIGHT_B");
//        DataModelStock.addColumn("SPLICE DATE");
//        DataModelStock.addColumn("MND DATE");
//        DataModelStock.addColumn("DAYS ORDER_MND");
//        DataModelStock.addColumn("MND LAYER_REMARK");
//        DataModelStock.addColumn("MND WEIGHT");
//        DataModelStock.addColumn("MND WEIGHT_A");
//        DataModelStock.addColumn("MND WEIGHT_B");
//        DataModelStock.addColumn("NDL DATE");
//        DataModelStock.addColumn("DAYS ORDER_NDL");
//        DataModelStock.addColumn("NDL WEIGHT");
//        DataModelStock.addColumn("SEAM DATE");
//        DataModelStock.addColumn("FNSG DATE");
//        DataModelStock.addColumn("DAYS ORDER_FNSG");
//        DataModelStock.addColumn("DAYS WRP_WVG");
//        DataModelStock.addColumn("DAYS WVG_MND");
//        DataModelStock.addColumn("DAYS MND_NDL");
//        DataModelStock.addColumn("DAYS NDL_FNSG");
//        DataModelStock.addColumn("DAYS WH_STOCK");
//        DataModelStock.addColumn("Rate");
//        DataModelStock.addColumn("Basic Amt");
//        DataModelStock.addColumn("CHEM TRT CHG");
//        DataModelStock.addColumn("SPIRAL CHG");
//        DataModelStock.addColumn("Pin CHG");
//        DataModelStock.addColumn("Seam CHG");
//        DataModelStock.addColumn("INS Ind");
//        DataModelStock.addColumn("INS Amt");
//        DataModelStock.addColumn("GST");
//        DataModelStock.addColumn("Disc Per");
//        DataModelStock.addColumn("Disc Amt");
//        DataModelStock.addColumn("Disc Bas Amt");
//        DataModelStock.addColumn("Amount");
//        DataModelStock.addColumn("Schedule Month");
//        DataModelStock.addColumn("Referance");
//        DataModelStock.addColumn("REF Date");
//        DataModelStock.addColumn("PO No");
//        DataModelStock.addColumn("PO Date");
//        DataModelStock.addColumn("Order Remark");
//        DataModelStock.addColumn("Piece Remark");
//        DataModelStock.addColumn("Rejected");
//        DataModelStock.addColumn("Rejected Remark");
//        DataModelStock.addColumn("Diversion");
//        DataModelStock.addColumn("Diversion Reason");
//        DataModelStock.addColumn("PartyCode Original");
//        DataModelStock.addColumn("PieceNo Original");
//        DataModelStock.addColumn("Incharge");
//        DataModelStock.addColumn("Obsolete Status");
//        DataModelStock.addColumn("Obsolete Reason");
//        DataModelStock.addColumn("Packing Doc No");
//        DataModelStock.addColumn("Packing Doc Date");
//        DataModelStock.addColumn("Inward No");
//        DataModelStock.addColumn("Rack No");
//        DataModelStock.addColumn("Location");
//        DataModelStock.addColumn("Days Status");
//
//        DataModelStock.TableReadOnly(true);
//        Table_STOCK.getColumnModel().getColumn(0).setMaxWidth(50);
//    }
//
//    private void GenerateStock() {
//        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
//        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
//        String cndtn = "";
//        String grp_cndtn = "";
//        double total_weight = 0;
//        double total_bill_weight = 0;
//        double total_amount = 0;
//
//        try {
//            FormatGridStock();; //clear existing content of table
//            String PartyCode = txtpartycode.getText().toString();
//            ResultSet rsTmp;
//
//            if (!txtpartycode.getText().trim().equals("")) {
//                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
//            }
//
//            if (!txtgroupcode.getText().trim().equals("")) {
//                grp_cndtn = " WHERE GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
//            }
//
//            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
//                try {
//                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' AND PR_FNSG_DATE <= '" + ToDate + "' ";
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
//                try {
//                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' ";
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
//                try {
//                    cndtn += " AND PR_FNSG_DATE <= '" + ToDate + "' ";
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//
//            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
//            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
//            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
//            }
//
//            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
//            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
//            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
//            }
//
//            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
//            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
//            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
//            }
//
//            if (!txtpieceno.getText().equals("")) {
//                String[] Pieces = txtpieceno.getText().split(",");
//                for (int i = 0; i < Pieces.length; i++) {
//                    if (i == 0) {
//                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
//                    } else {
//                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
//                    }
//                }
//                cndtn += ") ";
//            }
//
//            if (!txtproductcode.getText().trim().equals("")) {
//                String[] Products = txtproductcode.getText().trim().split(",");
//                for (int i = 0; i < Products.length; i++) {
//                    if (i == 0) {
//                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
//                    } else {
//                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
//                    }
//                }
//                cndtn += ")";
//            }
//
//            if (!txtMachineNo.getText().trim().equals("")) {
//                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
//            }
//
//            if (!txtPosition.getText().trim().equals("")) {
//                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
//            }
//
//            if (!txtupnno.getText().trim().equals("")) {
//                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
//            }
//
//            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
//                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
//            }
//
//            String strSQL = "";
//
//            strSQL = "SELECT * FROM "
//                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
//                    + " AND PR_PIECE_STAGE IN ('IN STOCK') "
//                    + cndtn + " "
//                    + ") AS PR "
//                    + "LEFT JOIN  "
//                    + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
//                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
//                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
//                    + "LEFT JOIN  "
//                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
//                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
//                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
//                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
//                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
//                    + "LEFT JOIN  "
//                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
//                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
//                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
//                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
//                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
//                    + grp_cndtn + " " + ORDER_BY;
//
//            System.out.println("Query..." + strSQL);
//            rsTmp = data.getResult(strSQL);
//            rsTmp.first();
//            if (rsTmp.getRow() > 0) {
//                int cnt = 0;
//
//                while (!rsTmp.isAfterLast()) {
//                    cnt++;
//
//                    Object[] rowData = new Object[100];
//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("GROUP_DESC");
//                    rowData[4] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[5] = rsTmp.getString("PARTY_NAME");
//                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[10] = rsTmp.getString("POSITION_DESC");
//                    rowData[11] = rsTmp.getString("PR_UPN");
//                    rowData[12] = rsTmp.getString("PR_DOC_NO");
//                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[14] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[15] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[16] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[17] = rsTmp.getString("PR_GROUP");
//                    rowData[18] = rsTmp.getString("PR_STYLE");
//                    rowData[19] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[20] = rsTmp.getString("PR_LENGTH");
//                    rowData[21] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[22] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[23] = rsTmp.getString("PR_WIDTH");
//                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[25] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[26] = rsTmp.getString("PR_GSM");
//                    rowData[27] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[28] = rsTmp.getString("PR_SQMTR");
//                    rowData[29] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[30] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//                    rowData[31] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[32] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
//                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));
//
//                    rowData[33] = rsTmp.getString("PR_SYN_PER");
//                    rowData[34] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[35] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[36] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[37] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[38] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[39] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[40] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[41] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[42] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[43] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[44] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[45] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[46] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[47] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[48] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[49] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[50] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[51] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[52] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[53] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[54] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[55] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[56] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[57] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[58] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[59] = rsTmp.getString("PR_DAYS_NDL_FNG");
//                    rowData[60] = rsTmp.getString("PR_DAYS_WH_STOCK");
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
////                                rsTmp.getString("PR_ORDER_DATE"));
//
//                        rowData[61] = inv_calc.getFicRate();
//                        rowData[62] = inv_calc.getFicBasAmount();
//                        rowData[63] = inv_calc.getFicChemTrtChg();
//                        rowData[64] = inv_calc.getFicSpiralChg();
//                        rowData[65] = inv_calc.getFicPinChg();
//                        rowData[66] = inv_calc.getFicSeamChg();
//                        rowData[67] = inv_calc.getFicInsInd();
//                        rowData[68] = inv_calc.getFicInsAmt();
//                        rowData[69] = inv_calc.getFicGST();
//                        rowData[70] = inv_calc.getFicDiscPer();
//                        rowData[71] = inv_calc.getFicDiscAmt();
//                        rowData[72] = inv_calc.getFicDiscBasamt();
//                        rowData[73] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[74] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[75] = rsTmp.getString("PR_REFERENCE");
//                    rowData[76] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[77] = rsTmp.getString("PR_PO_NO");
//                    rowData[78] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[79] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[80] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[81] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[82] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[83] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[84] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[85] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[86] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[87] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[88] = rsTmp.getString("PR_DELINK");
//                    rowData[89] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[90] = rsTmp.getString("PR_PKG_DP_NO");
//                    rowData[91] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
//                    rowData[92] = rsTmp.getString("PR_INWARD_NO");
//                    rowData[93] = rsTmp.getString("PR_RACK_NO");
//                    rowData[94] = rsTmp.getString("PR_LOCATION");
//                    rowData[95] = rsTmp.getString("PR_DAYS_STATUS");
//
//                    DecimalFormat df = new DecimalFormat("###.##");
//                    txtTotalWeight_stock.setText(df.format(total_weight));
//                    txtTotalBillWeight_stock.setText(df.format(total_bill_weight));
//                    txtTotalAmount_stock.setText(df.format(total_amount));
//
//                    DataModelStock.addRow(rowData);
//                    rsTmp.next();
//                }
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//    }
//
//    private void FormatGridPieceStage() {
//        DataModelPieceStage = new EITLTableModel();
//        TablePieceStage.removeAll();
//        TablePieceStage.setModel(DataModelPieceStage);
//
//        TablePieceStage.setAutoResizeMode(TablePieceStage.AUTO_RESIZE_OFF);
//
//        DataModelPieceStage.addColumn("Sr No");
//        DataModelPieceStage.addColumn("Piece Stage");
//        DataModelPieceStage.addColumn("WIP Status");
//        DataModelPieceStage.addColumn("Group Name");
//        DataModelPieceStage.addColumn("Party Code");
//        DataModelPieceStage.addColumn("Party Name");
//        DataModelPieceStage.addColumn("Piece No");
//        DataModelPieceStage.addColumn("Machine No");
//        DataModelPieceStage.addColumn("Position No");
//        DataModelPieceStage.addColumn("Position No(Design)");
//        DataModelPieceStage.addColumn("Position Desc");
//        DataModelPieceStage.addColumn("UPN");
//        DataModelPieceStage.addColumn("Order No");
//        DataModelPieceStage.addColumn("Order Date");
//        DataModelPieceStage.addColumn("Product Code");
//        DataModelPieceStage.addColumn("Bill Product Code");
//        DataModelPieceStage.addColumn("Product Desc");
//        DataModelPieceStage.addColumn("Group");
//        DataModelPieceStage.addColumn("Style");
//        DataModelPieceStage.addColumn("Bill Style");
//        DataModelPieceStage.addColumn("Length");
//        DataModelPieceStage.addColumn("Bill Length");
//        DataModelPieceStage.addColumn("Actual Length");
//        DataModelPieceStage.addColumn("Width");
//        DataModelPieceStage.addColumn("Bill Width");
//        DataModelPieceStage.addColumn("Actual Width");
//        DataModelPieceStage.addColumn("GSM");
//        DataModelPieceStage.addColumn("Bill GSM");
//        DataModelPieceStage.addColumn("Sq.Mtr");
//        DataModelPieceStage.addColumn("Bill Sq.Mtr");
//        DataModelPieceStage.addColumn("Thortical Weight");
//        DataModelPieceStage.addColumn("Bill Weight");
//        DataModelPieceStage.addColumn("Actual Weight");
//        DataModelPieceStage.addColumn("SYN(%)");
//        DataModelPieceStage.addColumn("Req Month");
//        DataModelPieceStage.addColumn("WARP DATE");
//        DataModelPieceStage.addColumn("ORD VS WARP DAYS");
//        DataModelPieceStage.addColumn("WVG DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_WVG");
//        DataModelPieceStage.addColumn("WVG LAYER_REMARK");
//        DataModelPieceStage.addColumn("WVG WEIGHT");
//        DataModelPieceStage.addColumn("WVG WEIGHT_A");
//        DataModelPieceStage.addColumn("WVG WEIGHT_B");
//        DataModelPieceStage.addColumn("SPLICE DATE");
//        DataModelPieceStage.addColumn("MND DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_MND");
//        DataModelPieceStage.addColumn("MND LAYER_REMARK");
//        DataModelPieceStage.addColumn("MND WEIGHT");
//        DataModelPieceStage.addColumn("MND WEIGHT_A");
//        DataModelPieceStage.addColumn("MND WEIGHT_B");
//        DataModelPieceStage.addColumn("NDL DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_NDL");
//        DataModelPieceStage.addColumn("NDL WEIGHT");
//        DataModelPieceStage.addColumn("SEAM DATE");
//        DataModelPieceStage.addColumn("FNSG DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_FNSG");
//        DataModelPieceStage.addColumn("DAYS WRP_WVG");
//        DataModelPieceStage.addColumn("DAYS WVG_MND");
//        DataModelPieceStage.addColumn("DAYS MND_NDL");
//        DataModelPieceStage.addColumn("DAYS NDL_FNSG");
//        DataModelPieceStage.addColumn("DAYS WH_STOCK");
//        DataModelPieceStage.addColumn("Packing Doc No");
//        DataModelPieceStage.addColumn("Packing Doc Date");
//        DataModelPieceStage.addColumn("Bale No");
//        DataModelPieceStage.addColumn("Bale Date");
//        DataModelPieceStage.addColumn("DAYS WH_PACKED");
//        DataModelPieceStage.addColumn("Invoice No");
//        DataModelPieceStage.addColumn("Invoice Date");
//        DataModelPieceStage.addColumn("Invoice Amount");
//        DataModelPieceStage.addColumn("DAYS WH_INVOICED");
//        DataModelPieceStage.addColumn("Schedule Month");
//        DataModelPieceStage.addColumn("Referance");
//        DataModelPieceStage.addColumn("REF Date");
//        DataModelPieceStage.addColumn("PO No");
//        DataModelPieceStage.addColumn("PO Date");
//        DataModelPieceStage.addColumn("Order Remark");
//        DataModelPieceStage.addColumn("Piece Remark");
//        DataModelPieceStage.addColumn("Rejected");
//        DataModelPieceStage.addColumn("Rejected Remark");
//        DataModelPieceStage.addColumn("Diversion");
//        DataModelPieceStage.addColumn("Diversion Reason");
//        DataModelPieceStage.addColumn("PartyCode Original");
//        DataModelPieceStage.addColumn("PieceNo Original");
//        DataModelPieceStage.addColumn("Incharge");
//        DataModelPieceStage.addColumn("Obsolete Status");
//        DataModelPieceStage.addColumn("Obsolete Reason");
//        DataModelPieceStage.addColumn("Bale ReOpen Flag");
//        DataModelPieceStage.addColumn("GR No");
//        DataModelPieceStage.addColumn("GR Date");
//        DataModelPieceStage.addColumn("GR Remark");
//        DataModelPieceStage.addColumn("GR Flag");
//        DataModelPieceStage.addColumn("Inward No");
//        DataModelPieceStage.addColumn("Rack No");
//        DataModelPieceStage.addColumn("Location");
//        DataModelPieceStage.addColumn("Hold Date");
//        DataModelPieceStage.addColumn("Hold Reason");
//        DataModelPieceStage.addColumn("Release Date");
//        DataModelPieceStage.addColumn("Diversion Flag");
//        DataModelPieceStage.addColumn("Diversion Reason");
//        DataModelPieceStage.addColumn("Days Status");
//
//        DataModelPieceStage.TableReadOnly(true);
//        TablePieceStage.getColumnModel().getColumn(0).setMaxWidth(50);
//
//        TablePieceStage.getColumnModel().getColumn(8).setMinWidth(150);
//    }
//
//    private void GeneratePieceStage() {
//        String cndtn = "";
//        String grp_cndtn = "";
//
//        try {
//            FormatGridPieceStage(); //clear existing content of table
//            String PartyCode = txtpartycode.getText().toString();
//            ResultSet rsTmp;
//
//            if (!txtpartycode.getText().trim().equals("")) {
//                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
//            }
//
//            if (!txtgroupcode.getText().trim().equals("")) {
//                grp_cndtn = " WHERE GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
//            }
//
//            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
//            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
//            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
//                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
//            }
//
//            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
//            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
//            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
//                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
//            }
//
//            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
//            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
//            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
//                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
//            }
//
//            if (!txtpieceno.getText().equals("")) {
//                String[] Pieces = txtpieceno.getText().split(",");
//                for (int i = 0; i < Pieces.length; i++) {
//                    if (i == 0) {
//                        cndtn += " AND (SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
//                    } else {
//                        cndtn += " OR SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
//                    }
//                }
//                cndtn += ") ";
//            }
//
//            if (!txtproductcode.getText().trim().equals("")) {
//                String[] Products = txtproductcode.getText().trim().split(",");
//                for (int i = 0; i < Products.length; i++) {
//                    if (i == 0) {
//                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
//                    } else {
//                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
//                    }
//                }
//                cndtn += ")";
//            }
//
//            if (!txtMachineNo.getText().trim().equals("")) {
//                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
//            }
//
//            if (!txtPosition.getText().trim().equals("")) {
//                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
//            }
//
//            if (!txtupnno.getText().trim().equals("")) {
//                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
//            }
//
//            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
//                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
//            }
//
//            String strSQL = "";
//
//            strSQL = "SELECT * FROM "
//                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + " WHERE 1=1 "
//                    + cndtn + " "
//                    + ") AS PR "
//                    + "LEFT JOIN  "
//                    + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
//                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
//                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
//                    + "LEFT JOIN  "
//                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
//                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
//                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
//                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
//                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
//                    + "LEFT JOIN  "
//                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
//                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
//                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
//                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
//                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
//                    + grp_cndtn + " " + ORDER_BY;
//
//            System.out.println("Query..." + strSQL);
//            rsTmp = data.getResult(strSQL);
//            rsTmp.first();
//            if (rsTmp.getRow() > 0) {
//                int cnt = 0;
//
//                while (!rsTmp.isAfterLast()) {
//                    cnt++;
//
//                    Object[] rowData = new Object[150];
//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("GROUP_DESC");
//                    rowData[4] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[5] = rsTmp.getString("PARTY_NAME");
//                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[10] = rsTmp.getString("POSITION_DESC");
//                    rowData[11] = rsTmp.getString("PR_UPN");
//                    rowData[12] = rsTmp.getString("PR_DOC_NO");
//                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[14] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[15] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[16] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[17] = rsTmp.getString("PR_GROUP");
//                    rowData[18] = rsTmp.getString("PR_STYLE");
//                    rowData[19] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[20] = rsTmp.getString("PR_LENGTH");
//                    rowData[21] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[22] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[23] = rsTmp.getString("PR_WIDTH");
//                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[25] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[26] = rsTmp.getString("PR_GSM");
//                    rowData[27] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[28] = rsTmp.getString("PR_SQMTR");
//                    rowData[29] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[30] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//                    rowData[31] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[32] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//                    rowData[33] = rsTmp.getString("PR_SYN_PER");
//                    rowData[34] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[35] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[36] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[37] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[38] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[39] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[40] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[41] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[42] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[43] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[44] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[45] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[46] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[47] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[48] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[49] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[50] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[51] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[52] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[53] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[54] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[55] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[56] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[57] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[58] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[59] = rsTmp.getString("PR_DAYS_NDL_FNG");
//                    rowData[60] = rsTmp.getString("PR_DAYS_WH_STOCK");
//                    rowData[61] = rsTmp.getString("PR_PKG_DP_NO");
//                    rowData[62] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
//                    rowData[63] = rsTmp.getString("PR_BALE_NO");
//                    rowData[64] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
//                    rowData[65] = rsTmp.getString("PR_DAYS_WH_PACKED");
//                    rowData[66] = rsTmp.getString("PR_INVOICE_NO");
//                    rowData[67] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
//                    rowData[68] = rsTmp.getString("PR_INVOICE_AMOUNT");
//                    rowData[69] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
//                    rowData[70] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[71] = rsTmp.getString("PR_REFERENCE");
//                    rowData[72] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[73] = rsTmp.getString("PR_PO_NO");
//                    rowData[74] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[75] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[76] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[77] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[78] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[79] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[80] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[81] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[82] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[83] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[84] = rsTmp.getString("PR_DELINK");
//                    rowData[85] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[86] = rsTmp.getString("BALE_REOPEN_FLG");
//                    rowData[87] = rsTmp.getString("PR_SALES_RETURNS_NO");
//                    rowData[88] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SALES_RETURNS_DATE"));
//                    rowData[89] = rsTmp.getString("PR_SALES_RETURNS_REMARKS");
//                    rowData[90] = rsTmp.getString("PR_SALES_RETURNS_FLG");
//                    rowData[91] = rsTmp.getString("PR_INWARD_NO");
//                    rowData[92] = rsTmp.getString("PR_RACK_NO");
//                    rowData[93] = rsTmp.getString("PR_LOCATION");
//                    rowData[94] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_HOLD_DATE"));
//                    rowData[95] = rsTmp.getString("PR_HOLD_REASON");
//                    rowData[96] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RELEASE_DATE"));
//                    rowData[97] = rsTmp.getString("PR_DIVERTED_FLAG");
//                    rowData[98] = rsTmp.getString("PR_DIVERTED_REASON");
//                    rowData[99] = rsTmp.getString("PR_DAYS_STATUS");
//
//                    DataModelPieceStage.addRow(rowData);
//                    rsTmp.next();
//                }
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//    }
    private void FormatGridProduction() {
        try {
            ResultSet rs;
            DataModelProduction = new EITLTableModel();
            TableProduction.removeAll();
            TableProduction.setModel(DataModelProduction);
            TableProduction.setAutoResizeMode(TableProduction.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\",'' AS \"Group Name\","
                    + "'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\",'' AS \"Machine No\","
                    + "'' AS \"Position No\",'' AS \"Position No(Design)\",'' AS \"Position Desc\",'' AS \"UPN\","
                    + "'' AS \"Order No\",'' AS \"Order Date\",'' AS \"Product Code\",'' AS \"Bill Product Code\","
                    + "'' AS \"Product Desc\",'' AS \"Group\",'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\","
                    + "'' AS \"Bill Length\",'' AS \"Width\",'' AS \"Bill Width\",'' AS \"GSM\",'' AS \"Tender GSM\","
                    + "'' AS \"Bill GSM\","
                    + "'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\",'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\","
                    + "'' AS \"SYN(%)\",'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\","
                    + "'' AS \"WVG DATE\",'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\","
                    + "'' AS \"WVG WEIGHT_A\",'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\","
                    + "'' AS \"DAYS ORDER_MND\",'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\",'' AS \"MND WEIGHT_A\","
                    + "'' AS \"MND WEIGHT_B\",'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\",'' AS \"NDL WEIGHT\","
                    + "'' AS \"SEAM DATE\",'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\",'' AS \"DAYS WRP_WVG\","
                    + "'' AS \"DAYS WVG_MND\",'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\",'' AS \"Rate\","
                    + "'' AS \"Surcharge Per\",'' AS \"Surcharge Rate\",'' AS \"Gross Rate\","
                    + "'' AS \"Basic Amt\",'' AS \"CHEM TRT CHG\",'' AS \"SPIRAL CHG\",'' AS \"Pin CHG\","
                    + "'' AS \"Seam CHG\",'' AS \"INS Ind\",'' AS \"INS Amt\",'' AS \"GST\","
                    + "'' AS \"TCS Per\",'' AS \"TCS Amt\","
                    + "'' AS \"Disc Per\",'' AS \"Disc Amt\",'' AS \"Disc Bas Amt\",'' AS \"Amount\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\",'' AS \"PO Date\","
                    + "'' AS \"OA NO\",'' AS \"OA DATE\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\","
                    + "'' AS \"Piece Remark\",'' AS \"Rejected\",'' AS \"Rejected Remark\",'' AS \"Diversion\","
                    + "'' AS \"Diversion Reason\",'' AS \"PartyCode Original\",'' AS \"PieceNo Original\","
                    + "'' AS \"Incharge\",'' AS \"Obsolete Status\",'' AS \"Obsolete Date\","
                    + "'' AS \"Obsolete Reason\",'' AS \"Days Status\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelProduction.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelProduction.addColumn(rsInfo.getColumnName(i));
                DataModelProduction.SetReadOnly(i);
            }
            DataModelProduction.TableReadOnly(true);
            final TableColumnModel columnModel = TableProduction.getColumnModel();
            for (int column = 0; column < TableProduction.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < TableProduction.getRowCount(); row++) {
                    TableCellRenderer renderer = TableProduction.getCellRenderer(row, column);
                    Component comp = TableProduction.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        DataModelProduction = new EITLTableModel();
//        TableProduction.removeAll();
//        TableProduction.setModel(DataModelProduction);
//
//        TableProduction.setAutoResizeMode(TableProduction.AUTO_RESIZE_OFF);
//
//        DataModelProduction.addColumn("Sr No");
//        DataModelProduction.addColumn("Piece Stage");
//        DataModelProduction.addColumn("WIP Status");
//        DataModelProduction.addColumn("Group Name");
//        DataModelProduction.addColumn("Party Code");
//        DataModelProduction.addColumn("Party Name");
//        DataModelProduction.addColumn("Piece No");
//        DataModelProduction.addColumn("Machine No");
//        DataModelProduction.addColumn("Position No");
//        DataModelProduction.addColumn("Position No(Design)");
//        DataModelProduction.addColumn("Position Desc");
//        DataModelProduction.addColumn("UPN");
//        DataModelProduction.addColumn("Order No");
//        DataModelProduction.addColumn("Order Date");
//        DataModelProduction.addColumn("Product Code");
//        DataModelProduction.addColumn("Bill Product Code");
//        DataModelProduction.addColumn("Product Desc");
//        DataModelProduction.addColumn("Group");
//        DataModelProduction.addColumn("Style");
//        DataModelProduction.addColumn("Bill Style");
//        DataModelProduction.addColumn("Length");
//        DataModelProduction.addColumn("Bill Length");
//        DataModelProduction.addColumn("Width");
//        DataModelProduction.addColumn("Bill Width");
//        DataModelProduction.addColumn("GSM");
//        DataModelProduction.addColumn("Bill GSM");
//        DataModelProduction.addColumn("Sq.Mtr");
//        DataModelProduction.addColumn("Bill Sq.Mtr");
//        DataModelProduction.addColumn("Thortical Weight");
//        DataModelProduction.addColumn("Bill Weight");
//        DataModelProduction.addColumn("SYN(%)");
//        DataModelProduction.addColumn("Req Month");
//        DataModelProduction.addColumn("WARP DATE");
//        DataModelProduction.addColumn("ORD VS WARP DAYS");
//        DataModelProduction.addColumn("WVG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_WVG");
//        DataModelProduction.addColumn("WVG LAYER_REMARK");
//        DataModelProduction.addColumn("WVG WEIGHT");
//        DataModelProduction.addColumn("WVG WEIGHT_A");
//        DataModelProduction.addColumn("WVG WEIGHT_B");
//        DataModelProduction.addColumn("SPLICE DATE");
//        DataModelProduction.addColumn("MND DATE");
//        DataModelProduction.addColumn("DAYS ORDER_MND");
//        DataModelProduction.addColumn("MND LAYER_REMARK");
//        DataModelProduction.addColumn("MND WEIGHT");
//        DataModelProduction.addColumn("MND WEIGHT_A");
//        DataModelProduction.addColumn("MND WEIGHT_B");
//        DataModelProduction.addColumn("NDL DATE");
//        DataModelProduction.addColumn("DAYS ORDER_NDL");
//        DataModelProduction.addColumn("NDL WEIGHT");
//        DataModelProduction.addColumn("SEAM DATE");
//        DataModelProduction.addColumn("FNSG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_FNSG");
//        DataModelProduction.addColumn("DAYS WRP_WVG");
//        DataModelProduction.addColumn("DAYS WVG_MND");
//        DataModelProduction.addColumn("DAYS MND_NDL");
//        DataModelProduction.addColumn("DAYS NDL_FNSG");
//        DataModelProduction.addColumn("Rate");
//        DataModelProduction.addColumn("Basic Amt");
//        DataModelProduction.addColumn("CHEM TRT CHG");
//        DataModelProduction.addColumn("SPIRAL CHG");
//        DataModelProduction.addColumn("Pin CHG");
//        DataModelProduction.addColumn("Seam CHG");
//        DataModelProduction.addColumn("INS Ind");
//        DataModelProduction.addColumn("INS Amt");
//        DataModelProduction.addColumn("GST");
//        DataModelProduction.addColumn("Disc Per");
//        DataModelProduction.addColumn("Disc Amt");
//        DataModelProduction.addColumn("Disc Bas Amt");
//        DataModelProduction.addColumn("Amount");
//        DataModelProduction.addColumn("Schedule Month");
//        DataModelProduction.addColumn("Referance");
//        DataModelProduction.addColumn("REF Date");
//        DataModelProduction.addColumn("PO No");
//        DataModelProduction.addColumn("PO Date");
//        DataModelProduction.addColumn("Order Remark");
//        DataModelProduction.addColumn("Piece Remark");
//        DataModelProduction.addColumn("Rejected");
//        DataModelProduction.addColumn("Rejected Remark");
//        DataModelProduction.addColumn("Diversion");
//        DataModelProduction.addColumn("Diversion Reason");
//        DataModelProduction.addColumn("PartyCode Original");
//        DataModelProduction.addColumn("PieceNo Original");
//        DataModelProduction.addColumn("Incharge");
//        DataModelProduction.addColumn("Obsolete Status");
//        DataModelProduction.addColumn("Obsolete Reason");
//        DataModelProduction.addColumn("Days Status");
        DataModelProduction.TableReadOnly(true);
        TableProduction.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateProduction() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridProduction(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn = " WHERE GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            if (rbtnPieceStage.isSelected() && !cmbProductionStage.getSelectedItem().equals("ALL")) {
                cndtn += " AND PR_PIECE_STAGE = '" + cmbProductionStage.getSelectedItem() + "' ";
            }

            if (rbtnWIPStatus.isSelected() && !cmbProductionStatus.getSelectedItem().equals("ALL")) {
                cndtn += " AND PR_WIP_STATUS = '" + cmbProductionStatus.getSelectedItem() + "' ";
            }
            
            String cndtn1 ="";
            if (chkKeyClientInd.isSelected()){
                cndtn1 += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 " +cndtn1 + " "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;

                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_production2.setText(df.format(total_weight));
                    txtTotalAmount_production2.setText(df.format(total_amount));

                    DataModelProduction.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridWIPProduction() {
        try {
            ResultSet rs;
            DataModelWIPProduction = new EITLTableModel();
            TableWIPProd_Production.removeAll();
            TableWIPProd_Production.setModel(DataModelWIPProduction);
            TableWIPProd_Production.setAutoResizeMode(TableWIPProd_Production.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\",'' AS \"Group Name\","
                    + "'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\",'' AS \"Ext Piece No\", '' AS \"Machine No\","
                    + "'' AS \"Position No\",'' AS \"Position No(Design)\",'' AS \"Position Desc\",'' AS \"UPN\","
                    + "'' AS \"Order No\",'' AS \"Order Date\",'' AS \"Product Code\",'' AS \"Bill Product Code\","
                    + "'' AS \"Product Desc\",'' AS \"Group\",'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\","
                    + "'' AS \"Bill Length\",'' AS \"Width\",'' AS \"Bill Width\",'' AS \"GSM\",'' AS \"Tender GSM\","
                    + "'' AS \"Bill GSM\","
                    + "'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\",'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\","
                    + "'' AS \"SYN(%)\",'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\","
                    + "'' AS \"WVG DATE\",'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\","
                    + "'' AS \"WVG WEIGHT_A\",'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\","
                    + "'' AS \"DAYS ORDER_MND\",'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\",'' AS \"MND WEIGHT_A\","
                    + "'' AS \"MND WEIGHT_B\",'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\",'' AS \"NDL WEIGHT\","
                    + "'' AS \"SEAM DATE\",'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\",'' AS \"DAYS WRP_WVG\","
                    + "'' AS \"DAYS WVG_MND\",'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\","
                    + "'' AS \"Rate Indicator\","
                    + "'' AS \"Rate\","
                    + "'' AS \"Surcharge Per\",'' AS \"Surcharge Rate\",'' AS \"Gross Rate\","
                    + "'' AS \"Basic Amt\",'' AS \"CHEM TRT CHG\",'' AS \"SPIRAL CHG\",'' AS \"Pin CHG\","
                    + "'' AS \"Seam CHG\",'' AS \"INS Ind\",'' AS \"INS Amt\",'' AS \"GST\","
                    + "'' AS \"TCS Per\",'' AS \"TCS Amt\","
                    + "'' AS \"Disc Per\",'' AS \"Disc Amt\",'' AS \"Disc Bas Amt\",'' AS \"Amount\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\",'' AS \"PO Date\",'' AS \"Material Code\","
                    + "'' AS \"OA NO\",'' AS \"OA DATE\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\","
                    + "'' AS \"Piece Remark\",'' AS \"Rejected\",'' AS \"Rejected Remark\",'' AS \"Diversion\","
                    + "'' AS \"Diversion Reason\",'' AS \"PartyCode Original\",'' AS \"PieceNo Original\","
                    + "'' AS \"Incharge\",'' AS \"Obsolete Status\",'' AS \"Obsolete Date\","
                    + "'' AS \"Obsolete Reason\",'' AS \"Days Status\",'' AS \"Picks Theoritical\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelWIPProduction.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelWIPProduction.addColumn(rsInfo.getColumnName(i));
                DataModelWIPProduction.SetReadOnly(i);
            }
            DataModelWIPProduction.TableReadOnly(true);
            final TableColumnModel columnModel = TableWIPProd_Production.getColumnModel();
            for (int column = 0; column < TableWIPProd_Production.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < TableWIPProd_Production.getRowCount(); row++) {
                    TableCellRenderer renderer = TableWIPProd_Production.getCellRenderer(row, column);
                    Component comp = TableWIPProd_Production.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        DataModelProduction = new EITLTableModel();
//        TableProduction.removeAll();
//        TableProduction.setModel(DataModelProduction);
//
//        TableProduction.setAutoResizeMode(TableProduction.AUTO_RESIZE_OFF);
//
//        DataModelProduction.addColumn("Sr No");
//        DataModelProduction.addColumn("Piece Stage");
//        DataModelProduction.addColumn("WIP Status");
//        DataModelProduction.addColumn("Group Name");
//        DataModelProduction.addColumn("Party Code");
//        DataModelProduction.addColumn("Party Name");
//        DataModelProduction.addColumn("Piece No");
//        DataModelProduction.addColumn("Machine No");
//        DataModelProduction.addColumn("Position No");
//        DataModelProduction.addColumn("Position No(Design)");
//        DataModelProduction.addColumn("Position Desc");
//        DataModelProduction.addColumn("UPN");
//        DataModelProduction.addColumn("Order No");
//        DataModelProduction.addColumn("Order Date");
//        DataModelProduction.addColumn("Product Code");
//        DataModelProduction.addColumn("Bill Product Code");
//        DataModelProduction.addColumn("Product Desc");
//        DataModelProduction.addColumn("Group");
//        DataModelProduction.addColumn("Style");
//        DataModelProduction.addColumn("Bill Style");
//        DataModelProduction.addColumn("Length");
//        DataModelProduction.addColumn("Bill Length");
//        DataModelProduction.addColumn("Width");
//        DataModelProduction.addColumn("Bill Width");
//        DataModelProduction.addColumn("GSM");
//        DataModelProduction.addColumn("Bill GSM");
//        DataModelProduction.addColumn("Sq.Mtr");
//        DataModelProduction.addColumn("Bill Sq.Mtr");
//        DataModelProduction.addColumn("Thortical Weight");
//        DataModelProduction.addColumn("Bill Weight");
//        DataModelProduction.addColumn("SYN(%)");
//        DataModelProduction.addColumn("Req Month");
//        DataModelProduction.addColumn("WARP DATE");
//        DataModelProduction.addColumn("ORD VS WARP DAYS");
//        DataModelProduction.addColumn("WVG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_WVG");
//        DataModelProduction.addColumn("WVG LAYER_REMARK");
//        DataModelProduction.addColumn("WVG WEIGHT");
//        DataModelProduction.addColumn("WVG WEIGHT_A");
//        DataModelProduction.addColumn("WVG WEIGHT_B");
//        DataModelProduction.addColumn("SPLICE DATE");
//        DataModelProduction.addColumn("MND DATE");
//        DataModelProduction.addColumn("DAYS ORDER_MND");
//        DataModelProduction.addColumn("MND LAYER_REMARK");
//        DataModelProduction.addColumn("MND WEIGHT");
//        DataModelProduction.addColumn("MND WEIGHT_A");
//        DataModelProduction.addColumn("MND WEIGHT_B");
//        DataModelProduction.addColumn("NDL DATE");
//        DataModelProduction.addColumn("DAYS ORDER_NDL");
//        DataModelProduction.addColumn("NDL WEIGHT");
//        DataModelProduction.addColumn("SEAM DATE");
//        DataModelProduction.addColumn("FNSG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_FNSG");
//        DataModelProduction.addColumn("DAYS WRP_WVG");
//        DataModelProduction.addColumn("DAYS WVG_MND");
//        DataModelProduction.addColumn("DAYS MND_NDL");
//        DataModelProduction.addColumn("DAYS NDL_FNSG");
//        DataModelProduction.addColumn("Rate");
//        DataModelProduction.addColumn("Basic Amt");
//        DataModelProduction.addColumn("CHEM TRT CHG");
//        DataModelProduction.addColumn("SPIRAL CHG");
//        DataModelProduction.addColumn("Pin CHG");
//        DataModelProduction.addColumn("Seam CHG");
//        DataModelProduction.addColumn("INS Ind");
//        DataModelProduction.addColumn("INS Amt");
//        DataModelProduction.addColumn("GST");
//        DataModelProduction.addColumn("Disc Per");
//        DataModelProduction.addColumn("Disc Amt");
//        DataModelProduction.addColumn("Disc Bas Amt");
//        DataModelProduction.addColumn("Amount");
//        DataModelProduction.addColumn("Schedule Month");
//        DataModelProduction.addColumn("Referance");
//        DataModelProduction.addColumn("REF Date");
//        DataModelProduction.addColumn("PO No");
//        DataModelProduction.addColumn("PO Date");
//        DataModelProduction.addColumn("Order Remark");
//        DataModelProduction.addColumn("Piece Remark");
//        DataModelProduction.addColumn("Rejected");
//        DataModelProduction.addColumn("Rejected Remark");
//        DataModelProduction.addColumn("Diversion");
//        DataModelProduction.addColumn("Diversion Reason");
//        DataModelProduction.addColumn("PartyCode Original");
//        DataModelProduction.addColumn("PieceNo Original");
//        DataModelProduction.addColumn("Incharge");
//        DataModelProduction.addColumn("Obsolete Status");
//        DataModelProduction.addColumn("Obsolete Reason");
//        DataModelProduction.addColumn("Days Status");
        DataModelWIPProduction.TableReadOnly(true);
        TableWIPProd_Production.getColumnModel().getColumn(0).setMaxWidth(50);

        TableWIPProd_Production.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int col) {
                Component comp = super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, col);

//                System.out.println("Clm : "+Table_STOCK.getColumn("Obsolete Status").getModelIndex());
                String status = table.getModel().getValueAt(row, TableWIPProd_Production.getColumn("Obsolete Status").getModelIndex()).toString();

                if ("OBSOLETE".equals(status)) {
                    setBackground(new Color(220, 45, 45));
                    setForeground(Color.BLACK);
                } else {
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }

                return (comp);
            }
        });
    }

    private void GenerateWIPProduction() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;
        if (ORDER_BY.equals("")) {
            ORDER_BY = " ORDER BY WIP_PIECE_NO,WIP_EXT_PIECE_NO";
        }

        try {
            FormatGridWIPProduction(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND WIP_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND WIP_ORDER_DATE >= '" + FromDate + "' AND WIP_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND WIP_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND WIP_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND WIP_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND WIP_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND WIP_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND WIP_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND WIP_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND WIP_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND WIP_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND WIP_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND WIP_GSM >= '" + txtgsmfrom.getText().trim() + "' AND WIP_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND WIP_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND WIP_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (WIP_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR WIP_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (WIP_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR WIP_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND WIP_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND WIP_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND WIP_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND WIP_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            if (rbtnWIPProd_PieceStage.isSelected() && !cmbWIPProd_ProductionStage.getSelectedItem().equals("ALL")) {
                cndtn += " AND WIP_PIECE_STAGE = '" + cmbWIPProd_ProductionStage.getSelectedItem() + "' ";
            }

            if (rbtnWIPProd_WIPStatus.isSelected() && !cmbWIPProd_WIPStatus.getSelectedItem().equals("ALL")) {
                cndtn += " AND WIP_STATUS = '" + cmbWIPProd_WIPStatus.getSelectedItem() + "' ";
            }
            
            if (chkKeyClientInd.isSelected()) {
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + " WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN ('0') "
                    + " AND WIP_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.WIP_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.WIP_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.WIP_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.WIP_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.WIP_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_EXT_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_TENDER_WEIGHT");
                    p++;

                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "WIP_THORITICAL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("WIP_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_NDL_FNG");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("WIP_PIECE_NO"),
                                rsTmp.getString("WIP_BILL_PRODUCT_CODE"),
                                rsTmp.getString("WIP_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("WIP_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("WIP_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("WIP_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("WIP_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where PR_PIECE_NO='" + rsTmp.getString("WIP_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Error on WIP PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("WIP_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_OBSOLETE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WIP_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("WIP_OBSOLETE_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DAYS_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("WIP_DESIGN_THEO_PICKS");
                    p++;
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtWIPProd_TotalWeight_production.setText(df.format(total_weight));
                    txtWIPProd_TotalAmount_production.setText(df.format(total_amount));

                    DataModelWIPProduction.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridStock() {
        try {
            ResultSet rs;
            DataModelStock = new EITLTableModel();
            Table_STOCK.removeAll();
            Table_STOCK.setModel(DataModelStock);
            Table_STOCK.setAutoResizeMode(Table_STOCK.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\","
                    + "'' AS \"Group Name\",'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\","
                    + "'' AS \"Machine No\",'' AS \"Position No\",'' AS \"Position No(Design)\","
                    + "'' AS \"Position Desc\",'' AS \"UPN\",'' AS \"Order No\",'' AS \"Order Date\","
                    + "'' AS \"Product Code\",'' AS \"Bill Product Code\",'' AS \"Product Desc\",'' AS \"Group\","
                    + "'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\",'' AS \"Bill Length\","
                    + "'' AS \"Actual Length\",'' AS \"Width\",'' AS \"Bill Width\",'' AS \"Actual Width\","
                    + "'' AS \"GSM\",'' AS \"Tender GSM\",'' AS \"Bill GSM\",'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\","
                    + "'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\",'' AS \"Actual Weight\",'' AS \"SYN(%)\","
                    + "'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\",'' AS \"WVG DATE\","
                    + "'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\","
                    + "'' AS \"WVG WEIGHT_A\",'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\","
                    + "'' AS \"DAYS ORDER_MND\",'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\","
                    + "'' AS \"MND WEIGHT_A\",'' AS \"MND WEIGHT_B\",'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\","
                    + "'' AS \"NDL WEIGHT\",'' AS \"SEAM DATE\",'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\","
                    + "'' AS \"DAYS WRP_WVG\",'' AS \"DAYS WVG_MND\",'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\","
                    + "'' AS \"DAYS WH_STOCK\","
                    + "'' AS \"Rate Indicator\","
                    + "'' AS \"Rate\","
                    + "'' AS \"Surcharge Per\",'' AS \"Surcharge Rate\",'' AS \"Gross Rate\","
                    + "'' AS \"Basic Amt\",'' AS \"CHEM TRT CHG\","
                    + "'' AS \"SPIRAL CHG\",'' AS \"Pin CHG\",'' AS \"Seam CHG\",'' AS \"INS Ind\",'' AS \"INS Amt\","
                    + "'' AS \"GST\",'' AS \"TCS Per\",'' AS \"TCS Amt\","
                    + "'' AS \"Disc Per\",'' AS \"Disc Amt\",'' AS \"Disc Bas Amt\",'' AS \"Amount\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\","
                    + "'' AS \"PO Date\",'' AS \"Material Code\",'' AS \"OA NO\",'' AS \"OA DATE\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\",'' AS \"Piece Remark\",'' AS \"Rejected\","
                    + "'' AS \"Rejected Remark\",'' AS \"Diversion\",'' AS \"Diversion Reason\","
                    + "'' AS \"PartyCode Original\",'' AS \"PieceNo Original\",'' AS \"Incharge\","
                    + "'' AS \"Obsolete Status\",'' AS \"Obsolete Date\",'' AS \"Obsolete Reason\",'' AS \"Packing Doc No\","
                    + "'' AS \"Packing Doc Date\",'' AS \"Inward No\",'' AS \"Rack No\",'' AS \"Location\","
                    + "'' AS \"Days Status\",'' AS \"GR No\",'' AS \"GR Date\",'' AS \"GR Category\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelStock.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelStock.addColumn(rsInfo.getColumnName(i));
                DataModelStock.SetReadOnly(i);
            }
            DataModelStock.TableReadOnly(true);
            final TableColumnModel columnModel = Table_STOCK.getColumnModel();
            for (int column = 0; column < Table_STOCK.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_STOCK.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_STOCK.getCellRenderer(row, column);
                    Component comp = Table_STOCK.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        DataModelStock = new EITLTableModel();
//        Table_STOCK.removeAll();
//        Table_STOCK.setModel(DataModelStock);
//
//        Table_STOCK.setAutoResizeMode(Table_STOCK.AUTO_RESIZE_OFF);
//
//        DataModelStock.addColumn("Sr No");
//        DataModelStock.addColumn("Piece Stage");
//        DataModelStock.addColumn("WIP Status");
//        DataModelStock.addColumn("Group Name");
//        DataModelStock.addColumn("Party Code");
//        DataModelStock.addColumn("Party Name");
//        DataModelStock.addColumn("Piece No");
//        DataModelStock.addColumn("Machine No");
//        DataModelStock.addColumn("Position No");
//        DataModelStock.addColumn("Position No(Design)");
//        DataModelStock.addColumn("Position Desc");
//        DataModelStock.addColumn("UPN");
//        DataModelStock.addColumn("Order No");
//        DataModelStock.addColumn("Order Date");
//        DataModelStock.addColumn("Product Code");
//        DataModelStock.addColumn("Bill Product Code");
//        DataModelStock.addColumn("Product Desc");
//        DataModelStock.addColumn("Group");
//        DataModelStock.addColumn("Style");
//        DataModelStock.addColumn("Bill Style");
//        DataModelStock.addColumn("Length");
//        DataModelStock.addColumn("Bill Length");
//        DataModelStock.addColumn("Actual Length");
//        DataModelStock.addColumn("Width");
//        DataModelStock.addColumn("Bill Width");
//        DataModelStock.addColumn("Actual Width");
//        DataModelStock.addColumn("GSM");
//        DataModelStock.addColumn("Bill GSM");
//        DataModelStock.addColumn("Sq.Mtr");
//        DataModelStock.addColumn("Bill Sq.Mtr");
//        DataModelStock.addColumn("Thortical Weight");
//        DataModelStock.addColumn("Bill Weight");
//        DataModelStock.addColumn("Actual Weight");
//        DataModelStock.addColumn("SYN(%)");
//        DataModelStock.addColumn("Req Month");
//        DataModelStock.addColumn("WARP DATE");
//        DataModelStock.addColumn("ORD VS WARP DAYS");
//        DataModelStock.addColumn("WVG DATE");
//        DataModelStock.addColumn("DAYS ORDER_WVG");
//        DataModelStock.addColumn("WVG LAYER_REMARK");
//        DataModelStock.addColumn("WVG WEIGHT");
//        DataModelStock.addColumn("WVG WEIGHT_A");
//        DataModelStock.addColumn("WVG WEIGHT_B");
//        DataModelStock.addColumn("SPLICE DATE");
//        DataModelStock.addColumn("MND DATE");
//        DataModelStock.addColumn("DAYS ORDER_MND");
//        DataModelStock.addColumn("MND LAYER_REMARK");
//        DataModelStock.addColumn("MND WEIGHT");
//        DataModelStock.addColumn("MND WEIGHT_A");
//        DataModelStock.addColumn("MND WEIGHT_B");
//        DataModelStock.addColumn("NDL DATE");
//        DataModelStock.addColumn("DAYS ORDER_NDL");
//        DataModelStock.addColumn("NDL WEIGHT");
//        DataModelStock.addColumn("SEAM DATE");
//        DataModelStock.addColumn("FNSG DATE");
//        DataModelStock.addColumn("DAYS ORDER_FNSG");
//        DataModelStock.addColumn("DAYS WRP_WVG");
//        DataModelStock.addColumn("DAYS WVG_MND");
//        DataModelStock.addColumn("DAYS MND_NDL");
//        DataModelStock.addColumn("DAYS NDL_FNSG");
//        DataModelStock.addColumn("DAYS WH_STOCK");
//        DataModelStock.addColumn("Rate");
//        DataModelStock.addColumn("Basic Amt");
//        DataModelStock.addColumn("CHEM TRT CHG");
//        DataModelStock.addColumn("SPIRAL CHG");
//        DataModelStock.addColumn("Pin CHG");
//        DataModelStock.addColumn("Seam CHG");
//        DataModelStock.addColumn("INS Ind");
//        DataModelStock.addColumn("INS Amt");
//        DataModelStock.addColumn("GST");
//        DataModelStock.addColumn("Disc Per");
//        DataModelStock.addColumn("Disc Amt");
//        DataModelStock.addColumn("Disc Bas Amt");
//        DataModelStock.addColumn("Amount");
//        DataModelStock.addColumn("Schedule Month");
//        DataModelStock.addColumn("Referance");
//        DataModelStock.addColumn("REF Date");
//        DataModelStock.addColumn("PO No");
//        DataModelStock.addColumn("PO Date");
//        DataModelStock.addColumn("Order Remark");
//        DataModelStock.addColumn("Piece Remark");
//        DataModelStock.addColumn("Rejected");
//        DataModelStock.addColumn("Rejected Remark");
//        DataModelStock.addColumn("Diversion");
//        DataModelStock.addColumn("Diversion Reason");
//        DataModelStock.addColumn("PartyCode Original");
//        DataModelStock.addColumn("PieceNo Original");
//        DataModelStock.addColumn("Incharge");
//        DataModelStock.addColumn("Obsolete Status");
//        DataModelStock.addColumn("Obsolete Reason");
//        DataModelStock.addColumn("Packing Doc No");
//        DataModelStock.addColumn("Packing Doc Date");
//        DataModelStock.addColumn("Inward No");
//        DataModelStock.addColumn("Rack No");
//        DataModelStock.addColumn("Location");
//        DataModelStock.addColumn("Days Status");
        DataModelStock.TableReadOnly(true);
        Table_STOCK.getColumnModel().getColumn(0).setMaxWidth(50);

        Table_STOCK.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int col) {
                Component comp = super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, col);

//                System.out.println("Clm : "+Table_STOCK.getColumn("Obsolete Status").getModelIndex());
                String status = table.getModel().getValueAt(row, Table_STOCK.getColumn("Obsolete Status").getModelIndex()).toString();
                String obsDt = table.getModel().getValueAt(row, Table_STOCK.getColumn("Obsolete Date").getModelIndex()).toString();
                String grCategory = table.getModel().getValueAt(row, Table_STOCK.getColumn("GR Category").getModelIndex()).toString();
                String grDt = table.getModel().getValueAt(row, Table_STOCK.getColumn("GR Date").getModelIndex()).toString();

//                if ("OBSOLETE".equals(status)) {
//                    setBackground(new Color(230, 65, 60));
//                    setForeground(Color.BLACK);
//                } else {
//                    setBackground(table.getBackground());
//                    setForeground(table.getForeground());
//                }
                if ("OBSOLETE".equals(status)) {
                    if ("F6".equals(grCategory) && data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(grDt) + "','" + EITLERPGLOBAL.formatDateDB(obsDt) + "') FROM DUAL") > 0) {
                        setBackground(new Color(120, 193, 109));
                        setForeground(Color.BLACK);
                    } else if ("Normal".equals(grCategory) && data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(grDt) + "','" + EITLERPGLOBAL.formatDateDB(obsDt) + "') FROM DUAL") > 0) {
                        setBackground(new Color(255, 152, 98));
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(new Color(220, 45, 45));
                        setForeground(Color.BLACK);
                    }
                } else if ("".equals(status) && "F6".equals(grCategory)) {
                    setBackground(new Color(120, 193, 109));
                    setForeground(Color.BLACK);
                } else if ("".equals(status) && "Normal".equals(grCategory)) {
                    setBackground(new Color(255, 152, 98));
                    setForeground(Color.BLACK);
                } else {
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }

                return (comp);
            }
        });
    }

    private void GenerateStock() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridStock();; //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('IN STOCK') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "LEFT JOIN  "
                    + "(SELECT H.DOC_NO AS GR_DOC_NO,H.DOC_DATE AS GR_DOC_DATE,D.PIECE_NO,D.NEW_PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE,D.PARTY_CODE,D.PARTY_NAME, "
                    + "D.QUALITY_NO,D.LENGTH,D.WIDTH,D.ACTUAL_WEIGHT,D.RETURN_CATEGORY,I.GSM,D.REMARKS,I.INVOICE_AMT AS NET_AMOUNT,I.GROUP_NAME "
                    + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                    + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                    + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR  "
                    + "ON PR.PR_PIECE_NO = GR.NEW_PIECE_NO "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;

                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GR_DOC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("RETURN_CATEGORY");
                    p++;

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_stock.setText(df.format(total_weight));
                    txtTotalBillWeight_stock.setText(df.format(total_bill_weight));
                    txtTotalAmount_stock.setText(df.format(total_amount));

                    DataModelStock.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridStock_DFS() {
        try {
            ResultSet rs;
            DataModelStock_DFS = new EITLTableModel();
            Table_STOCK_DFS.removeAll();
            Table_STOCK_DFS.setModel(DataModelStock_DFS);
            Table_STOCK_DFS.setAutoResizeMode(Table_STOCK_DFS.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\","
                    + "'' AS \"Group Name\",'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\","
                    + "'' AS \"Machine No\",'' AS \"Position No\",'' AS \"Position No(Design)\","
                    + "'' AS \"Position Desc\",'' AS \"UPN\",'' AS \"Order No\",'' AS \"Order Date\","
                    + "'' AS \"Product Code\",'' AS \"Bill Product Code\",'' AS \"Product Desc\",'' AS \"Group\","
                    + "'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\",'' AS \"Bill Length\","
                    + "'' AS \"Actual Length\",'' AS \"Width\",'' AS \"Bill Width\",'' AS \"Actual Width\","
                    + "'' AS \"GSM\",'' AS \"Tender GSM\",'' AS \"Bill GSM\",'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\","
                    + "'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\",'' AS \"Actual Weight\",'' AS \"SYN(%)\","
                    + "'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\",'' AS \"WVG DATE\","
                    + "'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\","
                    + "'' AS \"WVG WEIGHT_A\",'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\","
                    + "'' AS \"DAYS ORDER_MND\",'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\","
                    + "'' AS \"MND WEIGHT_A\",'' AS \"MND WEIGHT_B\",'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\","
                    + "'' AS \"NDL WEIGHT\",'' AS \"SEAM DATE\",'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\","
                    + "'' AS \"DAYS WRP_WVG\",'' AS \"DAYS WVG_MND\",'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\","
                    + "'' AS \"DAYS WH_STOCK\","
                    + "'' AS \"Rate Indicator\","
                    + "'' AS \"Rate\","
                    + "'' AS \"Surcharge Per\",'' AS \"Surcharge Rate\",'' AS \"Gross Rate\","
                    + "'' AS \"Basic Amt\",'' AS \"CHEM TRT CHG\","
                    + "'' AS \"SPIRAL CHG\",'' AS \"Pin CHG\",'' AS \"Seam CHG\",'' AS \"INS Ind\",'' AS \"INS Amt\","
                    + "'' AS \"GST\",'' AS \"TCS Per\",'' AS \"TCS Amt\","
                    + "'' AS \"Disc Per\",'' AS \"Disc Amt\",'' AS \"Disc Bas Amt\",'' AS \"Amount\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\","
                    + "'' AS \"PO Date\",'' AS \"Material Code\",'' AS \"OA NO\",'' AS \"OA DATE\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\",'' AS \"Piece Remark\",'' AS \"Rejected\","
                    + "'' AS \"Rejected Remark\",'' AS \"Diversion\",'' AS \"Diversion Reason\","
                    + "'' AS \"PartyCode Original\",'' AS \"PieceNo Original\",'' AS \"Incharge\","
                    + "'' AS \"Obsolete Status\",'' AS \"Obsolete Date\",'' AS \"Obsolete Reason\",'' AS \"Packing Doc No\","
                    + "'' AS \"Packing Doc Date\",'' AS \"Inward No\",'' AS \"Rack No\",'' AS \"Location\","
                    + "'' AS \"Days Status\",'' AS \"GR No\",'' AS \"GR Date\",'' AS \"GR Category\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelStock_DFS.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelStock_DFS.addColumn(rsInfo.getColumnName(i));
                DataModelStock_DFS.SetReadOnly(i);
            }
            DataModelStock_DFS.TableReadOnly(true);
            final TableColumnModel columnModel = Table_STOCK_DFS.getColumnModel();
            for (int column = 0; column < Table_STOCK_DFS.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < Table_STOCK_DFS.getRowCount(); row++) {
                    TableCellRenderer renderer = Table_STOCK_DFS.getCellRenderer(row, column);
                    Component comp = Table_STOCK_DFS.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        DataModelStock = new EITLTableModel();
//        Table_STOCK.removeAll();
//        Table_STOCK.setModel(DataModelStock);
//
//        Table_STOCK.setAutoResizeMode(Table_STOCK.AUTO_RESIZE_OFF);
//
//        DataModelStock.addColumn("Sr No");
//        DataModelStock.addColumn("Piece Stage");
//        DataModelStock.addColumn("WIP Status");
//        DataModelStock.addColumn("Group Name");
//        DataModelStock.addColumn("Party Code");
//        DataModelStock.addColumn("Party Name");
//        DataModelStock.addColumn("Piece No");
//        DataModelStock.addColumn("Machine No");
//        DataModelStock.addColumn("Position No");
//        DataModelStock.addColumn("Position No(Design)");
//        DataModelStock.addColumn("Position Desc");
//        DataModelStock.addColumn("UPN");
//        DataModelStock.addColumn("Order No");
//        DataModelStock.addColumn("Order Date");
//        DataModelStock.addColumn("Product Code");
//        DataModelStock.addColumn("Bill Product Code");
//        DataModelStock.addColumn("Product Desc");
//        DataModelStock.addColumn("Group");
//        DataModelStock.addColumn("Style");
//        DataModelStock.addColumn("Bill Style");
//        DataModelStock.addColumn("Length");
//        DataModelStock.addColumn("Bill Length");
//        DataModelStock.addColumn("Actual Length");
//        DataModelStock.addColumn("Width");
//        DataModelStock.addColumn("Bill Width");
//        DataModelStock.addColumn("Actual Width");
//        DataModelStock.addColumn("GSM");
//        DataModelStock.addColumn("Bill GSM");
//        DataModelStock.addColumn("Sq.Mtr");
//        DataModelStock.addColumn("Bill Sq.Mtr");
//        DataModelStock.addColumn("Thortical Weight");
//        DataModelStock.addColumn("Bill Weight");
//        DataModelStock.addColumn("Actual Weight");
//        DataModelStock.addColumn("SYN(%)");
//        DataModelStock.addColumn("Req Month");
//        DataModelStock.addColumn("WARP DATE");
//        DataModelStock.addColumn("ORD VS WARP DAYS");
//        DataModelStock.addColumn("WVG DATE");
//        DataModelStock.addColumn("DAYS ORDER_WVG");
//        DataModelStock.addColumn("WVG LAYER_REMARK");
//        DataModelStock.addColumn("WVG WEIGHT");
//        DataModelStock.addColumn("WVG WEIGHT_A");
//        DataModelStock.addColumn("WVG WEIGHT_B");
//        DataModelStock.addColumn("SPLICE DATE");
//        DataModelStock.addColumn("MND DATE");
//        DataModelStock.addColumn("DAYS ORDER_MND");
//        DataModelStock.addColumn("MND LAYER_REMARK");
//        DataModelStock.addColumn("MND WEIGHT");
//        DataModelStock.addColumn("MND WEIGHT_A");
//        DataModelStock.addColumn("MND WEIGHT_B");
//        DataModelStock.addColumn("NDL DATE");
//        DataModelStock.addColumn("DAYS ORDER_NDL");
//        DataModelStock.addColumn("NDL WEIGHT");
//        DataModelStock.addColumn("SEAM DATE");
//        DataModelStock.addColumn("FNSG DATE");
//        DataModelStock.addColumn("DAYS ORDER_FNSG");
//        DataModelStock.addColumn("DAYS WRP_WVG");
//        DataModelStock.addColumn("DAYS WVG_MND");
//        DataModelStock.addColumn("DAYS MND_NDL");
//        DataModelStock.addColumn("DAYS NDL_FNSG");
//        DataModelStock.addColumn("DAYS WH_STOCK");
//        DataModelStock.addColumn("Rate");
//        DataModelStock.addColumn("Basic Amt");
//        DataModelStock.addColumn("CHEM TRT CHG");
//        DataModelStock.addColumn("SPIRAL CHG");
//        DataModelStock.addColumn("Pin CHG");
//        DataModelStock.addColumn("Seam CHG");
//        DataModelStock.addColumn("INS Ind");
//        DataModelStock.addColumn("INS Amt");
//        DataModelStock.addColumn("GST");
//        DataModelStock.addColumn("Disc Per");
//        DataModelStock.addColumn("Disc Amt");
//        DataModelStock.addColumn("Disc Bas Amt");
//        DataModelStock.addColumn("Amount");
//        DataModelStock.addColumn("Schedule Month");
//        DataModelStock.addColumn("Referance");
//        DataModelStock.addColumn("REF Date");
//        DataModelStock.addColumn("PO No");
//        DataModelStock.addColumn("PO Date");
//        DataModelStock.addColumn("Order Remark");
//        DataModelStock.addColumn("Piece Remark");
//        DataModelStock.addColumn("Rejected");
//        DataModelStock.addColumn("Rejected Remark");
//        DataModelStock.addColumn("Diversion");
//        DataModelStock.addColumn("Diversion Reason");
//        DataModelStock.addColumn("PartyCode Original");
//        DataModelStock.addColumn("PieceNo Original");
//        DataModelStock.addColumn("Incharge");
//        DataModelStock.addColumn("Obsolete Status");
//        DataModelStock.addColumn("Obsolete Reason");
//        DataModelStock.addColumn("Packing Doc No");
//        DataModelStock.addColumn("Packing Doc Date");
//        DataModelStock.addColumn("Inward No");
//        DataModelStock.addColumn("Rack No");
//        DataModelStock.addColumn("Location");
//        DataModelStock.addColumn("Days Status");
        DataModelStock_DFS.TableReadOnly(true);
        Table_STOCK_DFS.getColumnModel().getColumn(0).setMaxWidth(50);

        Table_STOCK_DFS.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int col) {
                Component comp = super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, col);

//                System.out.println("Clm : "+Table_STOCK.getColumn("Obsolete Status").getModelIndex());
                String status = table.getModel().getValueAt(row, Table_STOCK_DFS.getColumn("Obsolete Status").getModelIndex()).toString();
                String obsDt = table.getModel().getValueAt(row, Table_STOCK_DFS.getColumn("Obsolete Date").getModelIndex()).toString();
                String grCategory = table.getModel().getValueAt(row, Table_STOCK_DFS.getColumn("GR Category").getModelIndex()).toString();
                String grDt = table.getModel().getValueAt(row, Table_STOCK_DFS.getColumn("GR Date").getModelIndex()).toString();

//                if ("OBSOLETE".equals(status)) {
//                    setBackground(new Color(230, 65, 60));
//                    setForeground(Color.BLACK);
//                } else {
//                    setBackground(table.getBackground());
//                    setForeground(table.getForeground());
//                }
                if ("OBSOLETE".equals(status)) {
                    if ("F6".equals(grCategory) && data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(grDt) + "','" + EITLERPGLOBAL.formatDateDB(obsDt) + "') FROM DUAL") > 0) {
                        setBackground(new Color(120, 193, 109));
                        setForeground(Color.BLACK);
                    } else if ("Normal".equals(grCategory) && data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(grDt) + "','" + EITLERPGLOBAL.formatDateDB(obsDt) + "') FROM DUAL") > 0) {
                        setBackground(new Color(255, 152, 98));
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(new Color(220, 45, 45));
                        setForeground(Color.BLACK);
                    }
                } else if ("".equals(status) && "F6".equals(grCategory)) {
                    setBackground(new Color(120, 193, 109));
                    setForeground(Color.BLACK);
                } else if ("".equals(status) && "Normal".equals(grCategory)) {
                    setBackground(new Color(255, 152, 98));
                    setForeground(Color.BLACK);
                } else {
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }

                return (comp);
            }
        });
    }

    private void GenerateStock_DFS() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridStock_DFS();; //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn +=" AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('DIVERTED_FNSG_STOCK') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "LEFT JOIN  "
                    + "(SELECT H.DOC_NO AS GR_DOC_NO,H.DOC_DATE AS GR_DOC_DATE,D.PIECE_NO,D.NEW_PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE,D.PARTY_CODE,D.PARTY_NAME, "
                    + "D.QUALITY_NO,D.LENGTH,D.WIDTH,D.ACTUAL_WEIGHT,D.RETURN_CATEGORY,I.GSM,D.REMARKS,I.INVOICE_AMT AS NET_AMOUNT,I.GROUP_NAME "
                    + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                    + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                    + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR  "
                    + "ON PR.PR_PIECE_NO = GR.NEW_PIECE_NO "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;

                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GR_DOC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("RETURN_CATEGORY");
                    p++;

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_stock_DFS.setText(df.format(total_weight));
                    txtTotalBillWeight_stock_DFS.setText(df.format(total_bill_weight));
                    txtTotalAmount_stock_DFS.setText(df.format(total_amount));

                    DataModelStock_DFS.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridOrderConfirmation() {
        try {
            ResultSet rs;
            DataModelOrderConfirmation = new EITLTableModel();
            TablePieceStage1.removeAll();
            TablePieceStage1.setModel(DataModelOrderConfirmation);
            TablePieceStage1.setAutoResizeMode(TablePieceStage1.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\",'' AS \"Group Name\","
                    + "'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\",'' AS \"Machine No\","
                    + "'' AS \"Position No\",'' AS \"Position No(Design)\",'' AS \"Position Desc\",'' AS \"UPN\","
                    + "'' AS \"Order No\",'' AS \"Order Date\",'' AS \"Product Code\",'' AS \"Bill Product Code\","
                    + "'' AS \"Product Desc\",'' AS \"Group\",'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\","
                    + "'' AS \"Bill Length\",'' AS \"Actual Length\",'' AS \"Width\",'' AS \"Bill Width\","
                    + "'' AS \"Actual Width\",'' AS \"GSM\",'' AS \"Tender GSM\","
                    + "'' AS \"Bill GSM\",'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\","
                    + "'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\",'' AS \"Actual Weight\",'' AS \"SYN(%)\","
                    + "'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\",'' AS \"WVG DATE\","
                    + "'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\",'' AS \"WVG WEIGHT_A\","
                    + "'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\",'' AS \"DAYS ORDER_MND\","
                    + "'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\",'' AS \"MND WEIGHT_A\",'' AS \"MND WEIGHT_B\","
                    + "'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\",'' AS \"NDL WEIGHT\",'' AS \"SEAM DATE\","
                    + "'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\",'' AS \"DAYS WRP_WVG\",'' AS \"DAYS WVG_MND\","
                    + "'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\",'' AS \"DAYS WH_STOCK\",'' AS \"Packing Doc No\","
                    + "'' AS \"Packing Doc Date\",'' AS \"Bale No\",'' AS \"Bale Date\",'' AS \"DAYS WH_PACKED\","
                    + "'' AS \"Invoice No\",'' AS \"Invoice Date\",'' AS \"Invoice Amount\",'' AS \"DAYS WH_INVOICED\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\","
                    + "'' AS \"PO Date\",'' AS \"OA NO\",'' AS \"OA DATA\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\",'' AS \"Piece Remark\",'' AS \"Rejected\","
                    + "'' AS \"Rejected Remark\",'' AS \"Diversion\",'' AS \"Diversion Reason\","
                    + "'' AS \"PartyCode Original\",'' AS \"PieceNo Original\",'' AS \"Incharge\","
                    + "'' AS \"Obsolete Status\",'' AS \"Obsolete Date\","
                    + "'' AS \"Obsolete Reason\",'' AS \"Bale ReOpen Flag\",'' AS \"GR No\","
                    + "'' AS \"GR Date\",'' AS \"GR Remark\",'' AS \"GR Flag\",'' AS \"Inward No\","
                    + "'' AS \"Rack No\",'' AS \"Location\",'' AS \"Hold Date\",'' AS \"Hold Reason\","
                    + "'' AS \"Release Date\",'' AS \"Diversion Flag\",'' AS \"Diversion Reason\","
                    + "'' AS \"Days Status\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelOrderConfirmation.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelOrderConfirmation.addColumn(rsInfo.getColumnName(i));
                DataModelOrderConfirmation.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModelOrderConfirmation.TableReadOnly(true);
        final TableColumnModel columnModel = TablePieceStage1.getColumnModel();
        for (int column = 0; column < TablePieceStage1.getColumnCount(); column++) {
            int width = 100; // Min width
            for (int row = 0; row < TablePieceStage1.getRowCount(); row++) {
                TableCellRenderer renderer = TablePieceStage1.getCellRenderer(row, column);
                Component comp = TablePieceStage1.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        TablePieceStage1.getColumnModel().getColumn(0).setMaxWidth(50);

        TablePieceStage1.getColumnModel().getColumn(8).setMinWidth(150);
    }

    public void GenerateCapacityPlanning() {
        String sql = "";
        String cndtn = "";
        String MonthSelect = cmbcapacityreqmonth.getSelectedItem().toString();
        if (MFGPlan.equals("REQ")) {
            MonthSelect = cmbcapacityreqmonth.getSelectedItem().toString();
        }
        if (MFGPlan.equals("OC")) {
            MonthSelect = cmbcapacityOCmonth.getSelectedItem().toString();
        }
        data.Execute("DELETE  FROM PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY WHERE LOGIN_ID = " + EITLERPGLOBAL.gUserID + " AND REQUESTED_MONTH ='" + MonthSelect + "'");

        String sql1 = "INSERT INTO PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY "
                + "(LOGIN_ID,CATEGORY,PRODUCT_CAPTION,MTR_CAPTION_CODE,MTR_CAPTION,ACNE_CAPACITY,EXPORT_CAPACITY,NORTH_CAPACITY,EAST_CAPACITY,SOUTH_CAPACITY,KEY_CAPACITY,TOTAL_CAPACITY,REQUESTED_MONTH)"
                + " SELECT " + EITLERPGLOBAL.gUserID + " AS LOGIN_ID,PRODUCT_CATEGORY,PRODUCT_CAPTION,MTR_CAPTION_CODE,MTR_CAPTION, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =5 THEN PRODUCT_CAPACITY END,0)) AS ACNE,"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =6 THEN PRODUCT_CAPACITY END,0)) AS EXPORT,"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =2 THEN PRODUCT_CAPACITY END,0)) AS NORTH, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =3 THEN PRODUCT_CAPACITY END,0)) AS WEST, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =1 THEN PRODUCT_CAPACITY END,0)) AS SOUTH, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =7 THEN PRODUCT_CAPACITY END,0)) AS KEYCLIENT, "
                + "SUM(COALESCE(PRODUCT_CAPACITY,0)) AS TOTAL,"
                + "'" + MonthSelect + "' AS REQUESTED_MONTH "
                + "FROM PRODUCTION.FELT_PP_PRODUCTION_CAPACITY "
                + "GROUP BY PRODUCT_CATEGORY,PRODUCT_CAPTION,MTR_CAPTION_CODE,MTR_CAPTION"
                + " UNION ALL "
                + "SELECT " + EITLERPGLOBAL.gUserID + " AS LOGIN_ID,'5'AS PRODUCT_CATEGORY,'5. GRAND TOTAL' AS  PRODUCT_CAPTION,'11' AS MTR_CAPTION_CODE,'GRAND TOTAL ' AS MTR_CAPTION, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =5 THEN PRODUCT_CAPACITY END,0)),"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =6 THEN PRODUCT_CAPACITY END,0)),"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =2 THEN PRODUCT_CAPACITY END,0)),"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =3 THEN PRODUCT_CAPACITY END,0)),"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =1 THEN PRODUCT_CAPACITY END,0)),"
                + "SUM(COALESCE(CASE WHEN INCHARGE_CODE =7 THEN PRODUCT_CAPACITY END,0)),"
                + "SUM(COALESCE(PRODUCT_CAPACITY,0)) AS TOTAL,'" + MonthSelect + "' AS REQUESTED_MONTH "
                + "FROM PRODUCTION.FELT_PP_PRODUCTION_CAPACITY "
                + "WHERE MTR_CAPTION_CODE !=10 ";

        System.out.println(
                "SQL Query:" + sql1);

        data.Execute(sql1);

        String sql2 = "UPDATE PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY AS CAP, "
                + "(SELECT LOGIN_ID, PR_REQUESTED_MONTH, CATEGORY,PRODUCT_CAPTION,MTR_CAPTION_CODE,MTR_CAPTION, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD =5 THEN CNT END,0)) AS SC5, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 6 THEN CNT END,0)) AS SC6, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 2 THEN CNT END,0)) AS SC2, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 3 THEN CNT END,0)) AS SC3, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 1 THEN CNT END,0)) AS SC1, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 7 THEN CNT END,0)) AS SC7  "
                //+ "FROM (SELECT '" + EITLERPGLOBAL.gUserID + "' collate utf8_unicode_ci AS LOGIN_ID,PR_REQUESTED_MONTH,  "
                + "FROM (SELECT " + EITLERPGLOBAL.gUserID + " AS LOGIN_ID,PR_REQUESTED_MONTH,  "
                + "QM.CATEGORY,PRODUCT_CAPTION, "
                + "MTR_CAPTION,PR_PIECE_NO,PR_LENGTH,1 AS CNT,INCHARGE_CD,MTR_FROM,MTR_TO,PRODUCT_CAPACITY,MTR_CAPTION_CODE "
                + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR ,DINESHMILLS.D_SAL_PARTY_MASTER PM,PRODUCTION.FELT_PP_PRODUCTION_CAPACITY PC, "
                + "(SELECT CATEGORY,PRODUCT_CODE FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE EFFECTIVE_TO ='0000-00-00' AND APPROVED =1) AS QM  "
                + "WHERE PM.PARTY_CODE = PR.PR_PARTY_CODE AND PR.PR_PRODUCT_CODE = PRODUCT_CODE AND PR_REQUESTED_MONTH = '" + MonthSelect + "' "
                + "AND QM.CATEGORY = PRODUCT_CATEGORY AND MTR_FROM <= PR_LENGTH AND MTR_TO >= PR_LENGTH AND MTR_CAPTION_CODE !=10 AND INCHARGE_CODE = INCHARGE_CD  "
                + ") AS NG GROUP BY LOGIN_ID,PR_REQUESTED_MONTH,CATEGORY,PRODUCT_CAPTION,MTR_CAPTION ) AS ACT "
                + "SET CAP.ACNE_ACTUAL = ACT.SC5, "
                + "CAP.EXPORT_ACTUAL = ACT.SC6, "
                + "CAP.SOUTH_ACTUAL = ACT.SC1, "
                + "CAP.NORTH_ACTUAL = ACT.SC2, "
                + "CAP.EAST_ACTUAL = ACT.SC3, "
                + "CAP.KEY_ACTUAL = ACT.SC7 "
                + "WHERE ACT.CATEGORY = CAP.CATEGORY "
                + "AND ACT.MTR_CAPTION_CODE = CAP.MTR_CAPTION_CODE "
                + "AND ACT.LOGIN_ID = CAP.LOGIN_ID "
                + "AND ACT.PR_REQUESTED_MONTH = CAP.REQUESTED_MONTH ";

        System.out.println(
                "SQL Query:" + sql2);

        data.Execute(sql2);
        String sql3 = "UPDATE PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY AS CAP, "
                + "(SELECT LOGIN_ID, PR_REQUESTED_MONTH, CATEGORY,PRODUCT_CAPTION,MTR_CAPTION_CODE,MTR_CAPTION, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 5 THEN CNT END,0)) AS SC5, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 6 THEN CNT END,0)) AS SC6, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 2 THEN CNT END,0)) AS SC2, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 3 THEN CNT END,0)) AS SC3, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 1 THEN CNT END,0)) AS SC1, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 7 THEN CNT END,0)) AS SC7  "
                //+ "FROM (SELECT '" + EITLERPGLOBAL.gUserID + "' collate utf8_unicode_ci AS LOGIN_ID,PR_REQUESTED_MONTH,  "
                + "FROM (SELECT " + EITLERPGLOBAL.gUserID + " AS LOGIN_ID,PR_REQUESTED_MONTH,  "
                + "QM.CATEGORY,PRODUCT_CAPTION,MTR_CAPTION,PR_PIECE_NO,PR_LENGTH,1 AS CNT,INCHARGE_CD,MTR_FROM,MTR_TO,PRODUCT_CAPACITY,MTR_CAPTION_CODE "
                + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR ,DINESHMILLS.D_SAL_PARTY_MASTER PM,PRODUCTION.FELT_PP_PRODUCTION_CAPACITY PC, "
                + "(SELECT CATEGORY,PRODUCT_CODE FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE EFFECTIVE_TO ='0000-00-00' AND APPROVED =1) AS QM  "
                + "WHERE PM.PARTY_CODE = PR.PR_PARTY_CODE AND PR.PR_PRODUCT_CODE = PRODUCT_CODE AND PR_REQUESTED_MONTH = '" + MonthSelect + "' "
                + "AND QM.CATEGORY = PRODUCT_CATEGORY AND MTR_FROM <= PR_LENGTH AND MTR_TO >= PR_LENGTH AND MTR_CAPTION_CODE =10 AND INCHARGE_CODE = INCHARGE_CD  "
                + ") AS NG GROUP BY LOGIN_ID,PR_REQUESTED_MONTH,CATEGORY,PRODUCT_CAPTION,MTR_CAPTION ) AS ACT "
                + "SET CAP.ACNE_ACTUAL = ACT.SC5, "
                + "CAP.EXPORT_ACTUAL = ACT.SC6, "
                + "CAP.SOUTH_ACTUAL = ACT.SC1, "
                + "CAP.NORTH_ACTUAL = ACT.SC2, "
                + "CAP.EAST_ACTUAL = ACT.SC3, "
                + "CAP.KEY_ACTUAL = ACT.SC7 "
                + "WHERE ACT.CATEGORY = CAP.CATEGORY "
                + "AND ACT.MTR_CAPTION_CODE = CAP.MTR_CAPTION_CODE "
                + "AND ACT.LOGIN_ID = CAP.LOGIN_ID "
                + "AND ACT.PR_REQUESTED_MONTH = CAP.REQUESTED_MONTH ";

        System.out.println(
                "SQL Query:" + sql3);

        data.Execute(sql3);

        String sql4 = "UPDATE PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY AS CAP, "
                //+ "(SELECT LOGIN_ID, PR_REQUESTED_MONTH, '5' collate utf8_unicode_ci AS CATEGORY,'5. GRAND TOTAL' collate utf8_unicode_ci AS PRODUCT_CAPTION,'11' collate utf8_unicode_ci AS MTR_CAPTION_CODE,'GRAND TOTAL' collate utf8_unicode_ci AS MTR_CAPTION, "
                + "(SELECT LOGIN_ID, PR_REQUESTED_MONTH, '5'  AS CATEGORY,'5. GRAND TOTAL'  AS PRODUCT_CAPTION,'11' AS MTR_CAPTION_CODE,'GRAND TOTAL' AS MTR_CAPTION, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 5 THEN CNT END,0)) AS SC5, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 6 THEN CNT END,0)) AS SC6, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 2 THEN CNT END,0)) AS SC2, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 3 THEN CNT END,0)) AS SC3, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 1 THEN CNT END,0)) AS SC1, "
                + "SUM(COALESCE(CASE WHEN INCHARGE_CD= 7 THEN CNT END,0)) AS SC7  "
                //+ "FROM (SELECT '" + EITLERPGLOBAL.gUserID + "' collate utf8_unicode_ci AS LOGIN_ID,PR_REQUESTED_MONTH,  "
                + "FROM (SELECT " + EITLERPGLOBAL.gUserID + " AS LOGIN_ID,PR_REQUESTED_MONTH,  "
                + "QM.CATEGORY,PRODUCT_CAPTION,MTR_CAPTION,PR_PIECE_NO,PR_LENGTH,1 AS CNT,INCHARGE_CD,MTR_FROM,MTR_TO,PRODUCT_CAPACITY,MTR_CAPTION_CODE "
                + " FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR ,DINESHMILLS.D_SAL_PARTY_MASTER PM,PRODUCTION.FELT_PP_PRODUCTION_CAPACITY PC, "
                + "(SELECT CATEGORY,PRODUCT_CODE FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE EFFECTIVE_TO ='0000-00-00' AND APPROVED =1) AS QM  "
                + "WHERE PM.PARTY_CODE = PR.PR_PARTY_CODE AND PR.PR_PRODUCT_CODE = PRODUCT_CODE AND PR_REQUESTED_MONTH = '" + MonthSelect + "' "
                + " AND QM.CATEGORY = PRODUCT_CATEGORY AND MTR_FROM <= PR_LENGTH AND MTR_TO >= PR_LENGTH AND MTR_CAPTION_CODE =10 AND INCHARGE_CODE = INCHARGE_CD  "
                + ") AS NG GROUP BY LOGIN_ID,PR_REQUESTED_MONTH ) AS ACT "
                + "SET CAP.ACNE_ACTUAL = ACT.SC5, "
                + "CAP.EXPORT_ACTUAL = ACT.SC6, "
                + "CAP.SOUTH_ACTUAL = ACT.SC1, "
                + "CAP.NORTH_ACTUAL = ACT.SC2, "
                + "CAP.EAST_ACTUAL = ACT.SC3, "
                + "CAP.KEY_ACTUAL = ACT.SC7  "
                + "WHERE ACT.CATEGORY = CAP.CATEGORY "
                + "AND ACT.MTR_CAPTION_CODE = CAP.MTR_CAPTION_CODE "
                + "AND ACT.LOGIN_ID = CAP.LOGIN_ID "
                + "AND ACT.PR_REQUESTED_MONTH = CAP.REQUESTED_MONTH";

        System.out.println(
                "SQL Query:" + sql4);
        data.Execute(sql4);

        String sql5 = "UPDATE PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY SET TOTAL_ACTUAL = ACNE_ACTUAL + EXPORT_ACTUAL + NORTH_ACTUAL + SOUTH_ACTUAL + EAST_ACTUAL + KEY_ACTUAL WHERE LOGIN_ID =" + EITLERPGLOBAL.gUserID + " AND REQUESTED_MONTH ='" + MonthSelect + "'";

        System.out.println(
                "SQL Query:" + sql5);

        data.Execute(sql5);

        //sql = "SELECT * FROM PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY WHERE LOGIN_ID =" + EITLERPGLOBAL.gUserID + " AND REQUESTED_MONTH ='" + cmbcapacityreqmonth.getSelectedItem() + "'ORDER BY PRODUCT_CAPTION,MTR_CAPTION_CODE +0";
        sql1 = "SELECT PRODUCT_CAPTION AS 'PRODUCT', MTR_CAPTION AS 'LENGTH CATEGORY',ACNE_CAPACITY ,ACNE_ACTUAL, EXPORT_CAPACITY ,EXPORT_ACTUAL ,NORTH_CAPACITY ,NORTH_ACTUAL ,EAST_CAPACITY AS 'EAST/WEST_CAPACITY',EAST_ACTUAL AS 'EAST/WEST_ACTUAL' ,SOUTH_CAPACITY,SOUTH_ACTUAL,KEY_CAPACITY AS 'KEYCLIENT_CAPACITY',KEY_ACTUAL AS 'KEYCLIENT_ACTUAL' ,TOTAL_CAPACITY ,TOTAL_ACTUAL ";
        if (MFGPlan.equals("REQ")) {
            sql2 = ",REQUESTED_MONTH  AS 'REQUESTED MONTH' ";
        }
        if (MFGPlan.equals("OC")) {
            sql2 = ",REQUESTED_MONTH  AS 'OC MONTH' ";
        }

        sql3 = " FROM PRODUCTION.FELT_PP_TMP_PRODUCTION_CAPACITY  WHERE TOTAL_CAPACITY + TOTAL_ACTUAL > 0 AND LOGIN_ID =" + EITLERPGLOBAL.gUserID + " AND REQUESTED_MONTH ='" + MonthSelect + "'ORDER BY PRODUCT_CAPTION,MTR_CAPTION_CODE +0";

        sql = sql1 + sql2 + sql3;

        System.out.println(
                "SQL Query:" + sql);
        ResultSet rs;

        TableCapacityPlanning.removeAll();
        DataModelCapacityPlanning = new EITLTableModel();

        TableCapacityPlanning.setModel(DataModelCapacityPlanning);

        TableCapacityPlanning.setAutoResizeMode(TableCapacityPlanning.AUTO_RESIZE_OFF);

        try {
            rs = EITLERP.data.getResult(sql);
            DataModelCapacityPlanning.addColumn("Sr.No.");
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelCapacityPlanning.addColumn(rsInfo.getColumnName(i));
            }

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                TableCapacityPlanning.getColumnModel().getColumn(i).setMinWidth(80);
            }
            rs.first();
            int k = 1;

            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = k;
                    //GreyTotal = GreyTotal + rs.getDouble("Grey Weight Needling");
                    for (int m = 1; m < i; m++) {
                        rowData[m] = rs.getString(m);
                    }
                    DataModelCapacityPlanning.addRow(rowData);
                    rs.next();
                    k++;
                }
            }
            DataModelCapacityPlanning.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateOrderConfirmation() {
        String cndtn = "";
        String grp_cndtn = "";

        try {
            FormatGridOrderConfirmation(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            try {
                if (!cmbocmonth.getSelectedItem().toString().equalsIgnoreCase("")) {
                    cndtn += " AND PR_OC_MONTHYEAR = '" + cmbocmonth.getSelectedItem().toString() + "' ";
                } else {
                    cndtn += " AND PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' ";
                }
            } catch (Exception a) {
                cndtn += " AND PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' ";
            }
            if (cmbstage.getSelectedItem().toString().equalsIgnoreCase("IN STOCK")
                    || cmbstage.getSelectedItem().toString().equalsIgnoreCase("BSR")
                    || cmbstage.getSelectedItem().toString().equalsIgnoreCase("INVOICED")
                    || cmbstage.getSelectedItem().toString().equalsIgnoreCase("PLANNING")
                    || cmbstage.getSelectedItem().toString().equalsIgnoreCase("DIVERTED")
                    || cmbstage.getSelectedItem().toString().equalsIgnoreCase("CANCELED")) {
                cndtn += " AND PR_PIECE_STAGE = '" + cmbstage.getSelectedItem().toString() + "' ";
            }
            if (cmbstage.getSelectedItem().toString().equalsIgnoreCase("WIP")) {
                cndtn += " AND PR_PIECE_STAGE IN ('WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') ";
            }
            if (cmbstage.getSelectedItem().toString().equalsIgnoreCase("ALL")) {
                cndtn += " AND PR_PIECE_STAGE IN ('WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','IN STOCK','BSR','INVOICED','EXP-INVOICE','BOOKING','PLANNING','DIVERTED','CANCELED','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') ";
            }

            if (cmbstage.getSelectedItem().toString().equalsIgnoreCase("NOT INVOICED")) {
                cndtn += " AND PR_PIECE_STAGE IN ('WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','IN STOCK','BSR','BOOKING','PLANNING','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') ";
            }
            
            if (chkKeyClientInd.isSelected()) {
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE 1=1 "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_PACKED");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("BALE_REOPEN_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SALES_RETURNS_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_REMARKS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_HOLD_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_HOLD_REASON");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RELEASE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;

                    DataModelOrderConfirmation.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridPieceStage() {
        try {
            ResultSet rs;
            DataModelPieceStage = new EITLTableModel();
            TablePieceStage.removeAll();
            TablePieceStage.setModel(DataModelPieceStage);
            TablePieceStage.setAutoResizeMode(TablePieceStage.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\",'' AS \"Group Name\","
                    + "'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\",'' AS \"Machine No\","
                    + "'' AS \"Position No\",'' AS \"Position No(Design)\",'' AS \"Position Desc\",'' AS \"UPN\","
                    + "'' AS \"Order No\",'' AS \"Order Date\",'' AS \"Product Code\",'' AS \"Bill Product Code\","
                    + "'' AS \"Product Desc\",'' AS \"Group\",'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\","
                    + "'' AS \"Bill Length\",'' AS \"Actual Length\",'' AS \"Width\",'' AS \"Bill Width\","
                    + "'' AS \"Actual Width\",'' AS \"GSM\",'' AS \"Tender GSM\","
                    + "'' AS \"Bill GSM\",'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\","
                    + "'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\",'' AS \"Actual Weight\",'' AS \"SYN(%)\","
                    + "'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\",'' AS \"WVG DATE\","
                    + "'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\",'' AS \"WVG WEIGHT_A\","
                    + "'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\",'' AS \"DAYS ORDER_MND\","
                    + "'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\",'' AS \"MND WEIGHT_A\",'' AS \"MND WEIGHT_B\","
                    + "'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\",'' AS \"NDL WEIGHT\",'' AS \"SEAM DATE\","
                    + "'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\",'' AS \"DAYS WRP_WVG\",'' AS \"DAYS WVG_MND\","
                    + "'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\",'' AS \"DAYS WH_STOCK\",'' AS \"Packing Doc No\","
                    + "'' AS \"Packing Doc Date\",'' AS \"Bale No\",'' AS \"Bale Date\",'' AS \"DAYS WH_PACKED\","
                    + "'' AS \"Invoice No\",'' AS \"Invoice Date\",'' AS \"Invoice Amount\",'' AS \"DAYS WH_INVOICED\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\","
                    + "'' AS \"PO Date\",'' AS \"OA NO\",'' AS \"OA DATA\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\",'' AS \"Piece Remark\",'' AS \"Rejected\","
                    + "'' AS \"Rejected Remark\",'' AS \"Diversion\",'' AS \"Diversion Reason\","
                    + "'' AS \"PartyCode Original\",'' AS \"PieceNo Original\",'' AS \"Incharge\","
                    + "'' AS \"Obsolete Status\",'' AS \"Obsolete Date\","
                    + "'' AS \"Obsolete Reason\",'' AS \"Bale ReOpen Flag\",'' AS \"GR No\","
                    + "'' AS \"GR Date\",'' AS \"GR Remark\",'' AS \"GR Flag\",'' AS \"Inward No\","
                    + "'' AS \"Rack No\",'' AS \"Location\",'' AS \"Hold Date\",'' AS \"Hold Reason\","
                    + "'' AS \"Release Date\",'' AS \"Diversion Flag\",'' AS \"Diversion Reason\","
                    + "'' AS \"Days Status\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelPieceStage.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelPieceStage.addColumn(rsInfo.getColumnName(i));
                DataModelPieceStage.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        DataModelPieceStage.addColumn("Sr No");
//        DataModelPieceStage.addColumn("Piece Stage");
//        DataModelPieceStage.addColumn("WIP Status");
//        DataModelPieceStage.addColumn("Group Name");
//        DataModelPieceStage.addColumn("Party Code");
//        DataModelPieceStage.addColumn("Party Name");
//        DataModelPieceStage.addColumn("Piece No");
//        DataModelPieceStage.addColumn("Machine No");
//        DataModelPieceStage.addColumn("Position No");
//        DataModelPieceStage.addColumn("Position No(Design)");
//        DataModelPieceStage.addColumn("Position Desc");
//        DataModelPieceStage.addColumn("UPN");
//        DataModelPieceStage.addColumn("Order No");
//        DataModelPieceStage.addColumn("Order Date");
//        DataModelPieceStage.addColumn("Product Code");
//        DataModelPieceStage.addColumn("Bill Product Code");
//        DataModelPieceStage.addColumn("Product Desc");
//        DataModelPieceStage.addColumn("Group");
//        DataModelPieceStage.addColumn("Style");
//        DataModelPieceStage.addColumn("Bill Style");
//        DataModelPieceStage.addColumn("Length");
//        DataModelPieceStage.addColumn("Bill Length");
//        DataModelPieceStage.addColumn("Actual Length");
//        DataModelPieceStage.addColumn("Width");
//        DataModelPieceStage.addColumn("Bill Width");
//        DataModelPieceStage.addColumn("Actual Width");
//        DataModelPieceStage.addColumn("GSM");
//        DataModelPieceStage.addColumn("Bill GSM");
//        DataModelPieceStage.addColumn("Sq.Mtr");
//        DataModelPieceStage.addColumn("Bill Sq.Mtr");
//        DataModelPieceStage.addColumn("Thortical Weight");
//        DataModelPieceStage.addColumn("Bill Weight");
//        DataModelPieceStage.addColumn("Actual Weight");
//        DataModelPieceStage.addColumn("SYN(%)");
//        DataModelPieceStage.addColumn("Req Month");
//        DataModelPieceStage.addColumn("WARP DATE");
//        DataModelPieceStage.addColumn("ORD VS WARP DAYS");
//        DataModelPieceStage.addColumn("WVG DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_WVG");
//        DataModelPieceStage.addColumn("WVG LAYER_REMARK");
//        DataModelPieceStage.addColumn("WVG WEIGHT");
//        DataModelPieceStage.addColumn("WVG WEIGHT_A");
//        DataModelPieceStage.addColumn("WVG WEIGHT_B");
//        DataModelPieceStage.addColumn("SPLICE DATE");
//        DataModelPieceStage.addColumn("MND DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_MND");
//        DataModelPieceStage.addColumn("MND LAYER_REMARK");
//        DataModelPieceStage.addColumn("MND WEIGHT");
//        DataModelPieceStage.addColumn("MND WEIGHT_A");
//        DataModelPieceStage.addColumn("MND WEIGHT_B");
//        DataModelPieceStage.addColumn("NDL DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_NDL");
//        DataModelPieceStage.addColumn("NDL WEIGHT");
//        DataModelPieceStage.addColumn("SEAM DATE");
//        DataModelPieceStage.addColumn("FNSG DATE");
//        DataModelPieceStage.addColumn("DAYS ORDER_FNSG");
//        DataModelPieceStage.addColumn("DAYS WRP_WVG");
//        DataModelPieceStage.addColumn("DAYS WVG_MND");
//        DataModelPieceStage.addColumn("DAYS MND_NDL");
//        DataModelPieceStage.addColumn("DAYS NDL_FNSG");
//        DataModelPieceStage.addColumn("DAYS WH_STOCK");
//        DataModelPieceStage.addColumn("Packing Doc No");
//        DataModelPieceStage.addColumn("Packing Doc Date");
//        DataModelPieceStage.addColumn("Bale No");
//        DataModelPieceStage.addColumn("Bale Date");
//        DataModelPieceStage.addColumn("DAYS WH_PACKED");
//        DataModelPieceStage.addColumn("Invoice No");
//        DataModelPieceStage.addColumn("Invoice Date");
//        DataModelPieceStage.addColumn("Invoice Amount");
//        DataModelPieceStage.addColumn("DAYS WH_INVOICED");
//        DataModelPieceStage.addColumn("Schedule Month");
//        DataModelPieceStage.addColumn("Referance");
//        DataModelPieceStage.addColumn("REF Date");
//        DataModelPieceStage.addColumn("PO No");
//        DataModelPieceStage.addColumn("PO Date");
//        DataModelPieceStage.addColumn("Order Remark");
//        DataModelPieceStage.addColumn("Piece Remark");
//        DataModelPieceStage.addColumn("Rejected");
//        DataModelPieceStage.addColumn("Rejected Remark");
//        DataModelPieceStage.addColumn("Diversion");
//        DataModelPieceStage.addColumn("Diversion Reason");
//        DataModelPieceStage.addColumn("PartyCode Original");
//        DataModelPieceStage.addColumn("PieceNo Original");
//        DataModelPieceStage.addColumn("Incharge");
//        DataModelPieceStage.addColumn("Obsolete Status");
//        DataModelPieceStage.addColumn("Obsolete Reason");
//        DataModelPieceStage.addColumn("Bale ReOpen Flag");
//        DataModelPieceStage.addColumn("GR No");
//        DataModelPieceStage.addColumn("GR Date");
//        DataModelPieceStage.addColumn("GR Remark");
//        DataModelPieceStage.addColumn("GR Flag");
//        DataModelPieceStage.addColumn("Inward No");
//        DataModelPieceStage.addColumn("Rack No");
//        DataModelPieceStage.addColumn("Location");
//        DataModelPieceStage.addColumn("Hold Date");
//        DataModelPieceStage.addColumn("Hold Reason");
//        DataModelPieceStage.addColumn("Release Date");
//        DataModelPieceStage.addColumn("Diversion Flag");
//        DataModelPieceStage.addColumn("Diversion Reason");
//        DataModelPieceStage.addColumn("Days Status");
        DataModelPieceStage.TableReadOnly(true);
        final TableColumnModel columnModel = TablePieceStage.getColumnModel();
        for (int column = 0; column < TablePieceStage.getColumnCount(); column++) {
            int width = 100; // Min width
            for (int row = 0; row < TablePieceStage.getRowCount(); row++) {
                TableCellRenderer renderer = TablePieceStage.getCellRenderer(row, column);
                Component comp = TablePieceStage.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        TablePieceStage.getColumnModel().getColumn(0).setMaxWidth(50);

        TablePieceStage.getColumnModel().getColumn(8).setMinWidth(150);
    }

    private void GeneratePieceStage() {
        String cndtn = "";
        String grp_cndtn = "";

        try {
            FormatGridPieceStage(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE 1=1 "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_PACKED");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("BALE_REOPEN_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SALES_RETURNS_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_REMARKS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_HOLD_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_HOLD_REASON");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RELEASE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;

                    DataModelPieceStage.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GeneratePieceStage_old() {
        String cndtn = "";
        try {
            FormatGridPieceStage(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String PieceNo = txtpieceno.getText().toString();
            boolean flag = false;
            ResultSet rsTmp;

            if (!PieceNo.equals("")) {
                //criteria.add(Restrictions.eq("prPieceNo", Integer.parseInt(Piece_No)));

                String[] Pieces = PieceNo.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        //System.out.println("Piece : "+Pieces[i]);
                        cndtn = cndtn + " AND substr(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                        //System.out.println("PR_PIECE_NO = '"  + Pieces[i] + "'");
                    } else {
                        //System.out.println("PR_PIECE_NO = '"  + Pieces[i] + "'");
                        cndtn = cndtn + " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                flag = true;
            }

//            if (!txtpieceno.getText().equals("")) {
//                cndtn += " AND substr(PR_PIECE_NO,1,5)= '" + PieceNo + "' OR PR_PIECE_NO= '" + PieceNo + "'";
//            }
            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtproductcode.getText().equals("")) {
                cndtn += " AND PR_PRODUCT_CODE LIKE '" + ItemCode + "%'";
            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
            //  strSQL = "SELECT A.PARTY_CODE,A.PARTY_NAME,A.CHARGE_CODE,A.ADDRESS1,A.ADDRESS2,A.PINCODE,A.CITY_ID,A.GSTIN_NO,A.GSTIN_DATE,A.STATE,A.STATE_GST_CODE,A.STATE_CODE,A.DISPATCH_STATION,A.DISTRICT,A.PHONE_NO,A.MOBILE_NO,A.EMAIL,A.CONTACT_PERSON,A.BANK_ID,A.BANK_NAME,A.BANK_ADDRESS,A.BANK_CITY,A.TRANSPORTER_ID,C.TRANSPORTER_NAME,A.PAN_NO,A.PAN_DATE,A.INSURANCE_CODE,A.INCHARGE_CD,A.COUNTRY_ID,B.INCHARGE_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER A,PRODUCTION.FELT_INCHARGE B,DINESHMILLS.D_SAL_TRANSPORTER_MASTER C WHERE A.INCHARGE_CD=B.INCHARGE_CD AND A.TRANSPORTER_ID=C.TRANSPORTER_ID AND MAIN_ACCOUNT_CODE=210010 " + cndtn + "";
            //strSQL = "SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,A.AMOUNT_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG,A.PARTY_CODE,A.PARTY_NAME,A.CHARGE_CODE,A.ADDRESS1,A.ADDRESS2,A.PINCODE,A.CITY_ID,A.GSTIN_NO,A.GSTIN_DATE,A.STATE,A.STATE_GST_CODE,A.STATE_CODE,A.DISPATCH_STATION,A.DISTRICT,A.PHONE_NO,A.MOBILE_NO,A.EMAIL,A.CONTACT_PERSON,A.BANK_ID,A.BANK_NAME,A.BANK_ADDRESS,A.BANK_CITY,A.TRANSPORTER_ID,C.TRANSPORTER_NAME,A.PAN_NO,A.PAN_DATE,A.INSURANCE_CODE,A.INCHARGE_CD,A.COUNTRY_ID,B.INCHARGE_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER A,PRODUCTION.FELT_INCHARGE B,DINESHMILLS.D_SAL_TRANSPORTER_MASTER C,PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE A.INCHARGE_CD=B.INCHARGE_CD AND A.TRANSPORTER_ID=C.TRANSPORTER_ID AND D.GROUP_CODE=E.GROUP_CODE AND E.PARTY_CODE=A.PARTY_CODE AND MAIN_ACCOUNT_CODE=210010 AND D.APPROVED=1 AND D.CANCELED=0 " + cndtn + "";
            strSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PARTY_CODE!=''" + cndtn + "";

//            int Orderby = EITLERPGLOBAL.getComboCode(cmbDiscount);
//            if (Orderby == 1) {
//           //strSQL+=" ORDER BY MACHINE_NO ";
//                strSQL += " ORDER BY A.PARTY_CODE ";
//            }
//            if (Orderby == 2) {
//                //strSQL+=" ORDER BY POSITION ";
//                strSQL += " ORDER BY B.PRODUCT_CODE ";
//            }
//            int Orderby = cmbPieceStage.getSelectedIndex();
//            Orderby++;
//            if (Orderby == 1) {
//
//                strSQL += " ORDER BY PR_PARTY_CODE ";
//            }
//            if (Orderby == 2) {
//
//                strSQL += " ORDER BY PR_PIECE_NO ";
//            }
//
//            cmbPieceStageModel = new EITLComboModel();
//            cmbPieceStage.removeAllItems();
//            cmbPieceStage.setModel(cmbPieceStageModel);
//            ComboData aData = new ComboData();
//
//            aData.Code = 1;
//            aData.Text = "PARTY CODE";
//            cmbPieceStageModel.addElement(aData);
//
//            aData.Code = 1;
//            aData.Text = "PIECE NO";
//            cmbPieceStageModel.addElement(aData);
            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    //txtSalesPartyTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PR_PIECE_NO");
                    rowData[2] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_DATE"));
                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[4] = rsTmp.getString("PR_DOC_NO");
                    rowData[5] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[6] = rsTmp.getString("PR_POSITION_NO");
                    rowData[7] = rsTmp.getString("PR_PARTY_CODE");
                    rowData[8] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsTmp.getString("PR_PARTY_CODE"));
                    rowData[9] = rsTmp.getString("PR_PRODUCT_CODE");

                    rowData[10] = rsTmp.getString("PR_GROUP");
                    rowData[11] = rsTmp.getString("PR_STYLE");
                    rowData[12] = rsTmp.getString("PR_LENGTH");
                    rowData[13] = rsTmp.getString("PR_WIDTH");
                    rowData[14] = rsTmp.getString("PR_GSM");
                    rowData[15] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[16] = rsTmp.getString("PR_SQMTR");
                    rowData[17] = rsTmp.getString("PR_SYN_PER");
                    rowData[18] = rsTmp.getString("PR_REQUESTED_MONTH");
                    rowData[19] = rsTmp.getString("PR_REGION");
                    rowData[20] = rsTmp.getString("PR_INCHARGE");
                    rowData[21] = rsTmp.getString("PR_REFERENCE");
                    rowData[22] = rsTmp.getString("PR_REFERENCE_DATE");
                    rowData[23] = rsTmp.getString("PR_PO_NO");
                    rowData[24] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[25] = rsTmp.getString("PR_ORDER_REMARK");
                    rowData[26] = rsTmp.getString("PR_PIECE_REMARK");
                    rowData[27] = rsTmp.getString("PR_PIECE_STAGE");
                    rowData[28] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    rowData[29] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));

                    //   String InchargeName = data.getStringValueFromDB("SELECT INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE where INCHARGE_CD = '"+(String) piece.getAttribute("PR_INCHARGE").getObj()+"'");
                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[31] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[33] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RCV_DATE"));
                    rowData[34] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    rowData[35] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[36] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[37] = rsTmp.getString("PR_BALE_NO");
                    rowData[38] = rsTmp.getString("PR_DIVERSION_FLAG");
                    rowData[39] = rsTmp.getString("PR_PRIORITY_HOLD_CAN_FLAG");
                    rowData[40] = rsTmp.getString("PR_INVOICE_NO");
                    rowData[41] = rsTmp.getString("PR_INVOICE_DATE");
                    rowData[42] = rsTmp.getString("PR_HOLD_REASON");
                    rowData[43] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[44] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[45] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[46] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[47] = rsTmp.getString("PR_BILL_GSM");
                    rowData[48] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[49] = rsTmp.getString("PR_DELINK");
                    rowData[50] = rsTmp.getString("PR_DELINK_REASON");

                    DataModelPieceStage.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridBSR() {
        DataModelBSR = new EITLTableModel();
        Table_BSR.removeAll();
        Table_BSR.setModel(DataModelBSR);

        Table_BSR.setAutoResizeMode(Table_BSR.AUTO_RESIZE_OFF);

        DataModelBSR.addColumn("Sr No");
        DataModelBSR.addColumn("Approval Status");
        DataModelBSR.addColumn("Remarks");
        DataModelBSR.addColumn("Piece Stage");
        DataModelBSR.addColumn("Bale No");
        DataModelBSR.addColumn("Bale Date");
        DataModelBSR.addColumn("DP No");
        DataModelBSR.addColumn("DP Date");
        DataModelBSR.addColumn("Piece No");
        DataModelBSR.addColumn("Group Name");
        DataModelBSR.addColumn("Party Code");
        DataModelBSR.addColumn("Party Name");
        DataModelBSR.addColumn("Station");
        DataModelBSR.addColumn("Box Size");
        DataModelBSR.addColumn("Transport Mode");
        DataModelBSR.addColumn("Invoice No");
        DataModelBSR.addColumn("Invoice Date");
        DataModelBSR.addColumn("Invoice Amount");
        DataModelBSR.addColumn("Machine No");
        DataModelBSR.addColumn("Position No");
        DataModelBSR.addColumn("Position No(Design)");
        DataModelBSR.addColumn("Position Desc");
        DataModelBSR.addColumn("UPN");
        DataModelBSR.addColumn("Order No");
        DataModelBSR.addColumn("Order Date");
        DataModelBSR.addColumn("Product Code");
        DataModelBSR.addColumn("Bill Product Code");
        DataModelBSR.addColumn("Product Desc");
        DataModelBSR.addColumn("Group");
        DataModelBSR.addColumn("Style");
        DataModelBSR.addColumn("Bill Style");
        DataModelBSR.addColumn("Length");
        DataModelBSR.addColumn("Bill Length");
        DataModelBSR.addColumn("Actual Length");
        DataModelBSR.addColumn("Width");
        DataModelBSR.addColumn("Bill Width");
        DataModelBSR.addColumn("Actual Width");
        DataModelBSR.addColumn("GSM");
        DataModelBSR.addColumn("Tender GSM");
        DataModelBSR.addColumn("Bill GSM");
        DataModelBSR.addColumn("Sq.Mtr");
        DataModelBSR.addColumn("Bill Sq.Mtr");
        DataModelBSR.addColumn("Thortical Weight");
        DataModelBSR.addColumn("Tender Weight");
        DataModelBSR.addColumn("Bill Weight");
        DataModelBSR.addColumn("Actual Weight");
        DataModelBSR.addColumn("SYN(%)");
        DataModelBSR.addColumn("Req Month");
        DataModelBSR.addColumn("OC MONTH");
        DataModelBSR.addColumn("CURR SCH MONTH");
        DataModelBSR.addColumn("Warp Date");
        DataModelBSR.addColumn("Ord vs Warp Days");
        DataModelBSR.addColumn("Wvg Date");
        DataModelBSR.addColumn("Days Order_Wvg");
        DataModelBSR.addColumn("Wvg Layer Remark");
        DataModelBSR.addColumn("Wvg Weight");
        DataModelBSR.addColumn("Wvg Weight_A");
        DataModelBSR.addColumn("Wvg Weight_B");
        DataModelBSR.addColumn("Splice Date");
        DataModelBSR.addColumn("Mnd Date");
        DataModelBSR.addColumn("Days Order_Mnd");
        DataModelBSR.addColumn("Mnd Layer Remark");
        DataModelBSR.addColumn("Mnd Weight");
        DataModelBSR.addColumn("Mnd Weight_A");
        DataModelBSR.addColumn("Mnd Weight_B");
        DataModelBSR.addColumn("Ndl Date");
        DataModelBSR.addColumn("Days Order_Ndl");
        DataModelBSR.addColumn("Ndl Weight");
        DataModelBSR.addColumn("Seam Date");
        DataModelBSR.addColumn("Fnsg Date");
        DataModelBSR.addColumn("Days Order_Fnsg");
        DataModelBSR.addColumn("Days Wrp_Wvg");
        DataModelBSR.addColumn("Days Wvg_Mnd");
        DataModelBSR.addColumn("Days Mnd_Ndl");
        DataModelBSR.addColumn("Days Ndl_Fnsg");
        DataModelBSR.addColumn("Days Wh_Stock");
        DataModelBSR.addColumn("Days Wh_Packed");
        DataModelBSR.addColumn("Rate Indicator");
        DataModelBSR.addColumn("Rate");

        DataModelBSR.addColumn("Surcharge Per");
        DataModelBSR.addColumn("Surcharge Rate");
        DataModelBSR.addColumn("Gross Rate");

        DataModelBSR.addColumn("Basic Amt");
        DataModelBSR.addColumn("Chem Trt Chg");
        DataModelBSR.addColumn("Spiral Chg");
        DataModelBSR.addColumn("Pin Chg");
        DataModelBSR.addColumn("Seam Chg");
        DataModelBSR.addColumn("Ins Ind");
        DataModelBSR.addColumn("Ins Amt");
        DataModelBSR.addColumn("GST");
        DataModelBSR.addColumn("TCS Per");
        DataModelBSR.addColumn("TCS Amt");
        DataModelBSR.addColumn("Disc Per");
        DataModelBSR.addColumn("Disc Amt");
        DataModelBSR.addColumn("Disc Bas Amt");
        DataModelBSR.addColumn("Amount");
        DataModelBSR.addColumn("Referance");
        DataModelBSR.addColumn("Ref Date");
        DataModelBSR.addColumn("PO No");
        DataModelBSR.addColumn("PO Date");
        DataModelBSR.addColumn("Material Code");
        DataModelBSR.addColumn("OA No");
        DataModelBSR.addColumn("OA Date");
        DataModelBSR.addColumn("OC No");
        DataModelBSR.addColumn("OC Date");
        DataModelBSR.addColumn("Order Remark");
        DataModelBSR.addColumn("Piece Remark");
        DataModelBSR.addColumn("Rejected");
        DataModelBSR.addColumn("Rejected Remark");
        DataModelBSR.addColumn("Incharge");
        DataModelBSR.addColumn("Days Status");

        DataModelBSR.TableReadOnly(true);
        Table_BSR.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateBSR() {
        String cndtn = "";
        String orderBy = "";

        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridBSR(); //clear existing content of table
            ResultSet rsTmp;

//-------------------------------------------------------------------------------------------------------------------
            int status = cmbBSRStatus.getSelectedIndex();
            if (status == 5) {
                cndtn += "";
            }
            if (status == 0) {

                cndtn += " AND APPROVAL_STATUS='APPROVED' ";
            }
            if (status == 1) {

                cndtn += " AND APPROVAL_STATUS='UNAPPROVED' ";
            }
            if (status == 2) {

                cndtn += " AND APPROVAL_STATUS='CANCELLED' ";
            }
            if (status == 3) {

                cndtn += " AND APPROVAL_STATUS='BALE INVOICED' ";
            }
            if (status == 4) {

                cndtn += " AND APPROVAL_STATUS='REOPEN BALE' ";
            }

            String Party_Code = txtpartycode.getText();
            String Length_from = txtlengthfrom.getText();
            String Length_to = txtlengthto.getText();
            String Width_from = txtwidthfrom.getText();
            String Width_to = txtwidthto.getText();
            String GSM_from = txtgsmfrom.getText();
            String GSM_to = txtgsmto.getText();
            String Piece_No = txtpieceno.getText();
            String Product_Code = txtproductcode.getText();
            String Incharge = EITLERPGLOBAL.getComboCode(S_ENGINEER) + "";
            String From_date = txtdatefrom.getText();
            String To_date = txtdateto.getText();
            String MachineNo = txtMachineNo.getText();
            String Position = txtPosition.getText();

            if (!Party_Code.equals("")) {
                cndtn += " AND PKG_PARTY_CODE = '" + Party_Code + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn = " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND PR_BILL_LENGTH >=  '" + Length_from + "' AND PR_BILL_LENGTH <=  '" + Length_to + "' ";
            } else if (!Length_from.equals("") && Length_to.equals("")) {
                cndtn += " AND PR_BILL_LENGTH >= '" + Length_from + "' ";
            } else if (Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND PR_BILL_LENGTH <= '" + Length_to + "' ";
            }

            if (!Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND PR_BILL_WIDTH >= '" + Width_from + "' AND PR_BILL_WIDTH <= '" + Width_to + "' ";
            } else if (!Width_from.equals("") && Width_to.equals("")) {
                cndtn += " AND PR_BILL_WIDTH >= '" + Width_from + "' ";
            } else if (Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND PR_BILL_WIDTH <= '" + Width_to + "' ";
            }

            if (!GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND PR_BILL_GSM >=  '" + GSM_from + "' AND PR_BILL_GSM <= '" + GSM_to + "' ";
            } else if (!GSM_from.equals("") && GSM_to.equals("")) {
                cndtn += " AND PR_BILL_GSM >= '" + GSM_from + "' ";
            } else if (GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND PR_BILL_GSM <= '" + GSM_to + "' ";
            }

            if (!Piece_No.equals("")) {
                String[] Pieces = Piece_No.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PKG_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PKG_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }

                cndtn += ")";
            }

            if (!Product_Code.equals("")) {

                //Addition using (,)
                String[] Products = Product_Code.split(",");
                for (int i = 0; i < Products.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PR_BILL_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_BILL_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!MachineNo.equals("")) {
                cndtn += " AND PR_MACHINE_NO = '" + MachineNo + "' ";
            }

            if (!Position.equals("")) {
                cndtn += " AND PR_POSITION_NO = '" + Position + "' ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE >= '" + df1.format(df.parse(From_date)) + "' AND PKG_DP_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE  >= '" + df1.format(df.parse(From_date)) + "' AND PKG_DP_DATE <= '" + EITLERPGLOBAL.getCurrentDateDB() + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE  >= '1990-04-01' AND PKG_DP_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND PKG_DP_DATE  >= '1990-04-01' AND PKG_DP_DATE  <= '" + EITLERPGLOBAL.getCurrentDateDB() + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            if (chkKeyClientInd.isSelected()){
                cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            int Orderby = cmbBSROrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                orderBy += " ORDER BY PKG_DP_DATE DESC,PKG_DP_NO ";
            }
            if (Orderby == 2) {

                orderBy += " ORDER BY PKG_PARTY_CODE,PKG_DP_DATE DESC,PKG_DP_NO ";
            }
            if (Orderby == 3) {

                orderBy += " ORDER BY PKG_PIECE_NO,PKG_DP_DATE DESC,PKG_DP_NO ";
            }
            if (Orderby == 4) {

                orderBy += " ORDER BY PKG_BALE_NO,PKG_DP_DATE DESC,PKG_DP_NO ";
            }

            cmbBSROrderByModel = new EITLComboModel();
            cmbBSROrderBy.removeAllItems();
            cmbBSROrderBy.setModel(cmbBSROrderByModel);
            ComboData bData = new ComboData();

            bData.Code = 1;
            bData.Text = "Select Order";
            cmbBSROrderByModel.addElement(bData);

            bData.Code = 2;
            bData.Text = "Party Code";
            cmbBSROrderByModel.addElement(bData);

            bData.Code = 3;
            bData.Text = "Piece No";
            cmbBSROrderByModel.addElement(bData);

            bData.Code = 4;
            bData.Text = "Bale No";
            cmbBSROrderByModel.addElement(bData);

//------------------------------------------------------------------------------------------------------------------------------------
            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT CASE WHEN H.APPROVED =0 AND H.CANCELED =0 AND H.BALE_REOPEN_FLG = 0 THEN 'UNAPPROVED' WHEN H.APPROVED =1 AND H.CANCELED =0 AND H.INVOICE_FLG =0 AND H.BALE_REOPEN_FLG = 0 THEN 'APPROVED' WHEN H.APPROVED =1 AND H.CANCELED =0 AND H.INVOICE_FLG =1 AND H.BALE_REOPEN_FLG = 0 THEN 'BALE INVOICED'  WHEN H.APPROVED =0 AND H.CANCELED =1 AND H.BALE_REOPEN_FLG = 0 THEN 'CANCELLED' WHEN H.APPROVED =1 AND H.CANCELED =0 AND H.BALE_REOPEN_FLG = 1 THEN 'REOPEN BALE'  END  AS APPROVAL_STATUS, "
                    + "PKG_CANCEL_REASON,H.PKG_DP_NO,H.PKG_DP_DATE,H.PKG_BALE_NO,H.PKG_BALE_DATE,PKG_PIECE_NO,H.PKG_PARTY_CODE,PKG_PARTY_NAME,PKG_STATION,PKG_BOX_SIZE,PKG_TRANSPORT_MODE "
                    + "FROM PRODUCTION.FELT_PKG_SLIP_HEADER H,PRODUCTION.FELT_PKG_SLIP_DETAIL D "
                    + "WHERE H.PKG_DP_NO = D.PKG_DP_NO "
                    + ") AS PKG "
                    + "LEFT JOIN "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + " ON PKG.PKG_PIECE_NO=PR.PR_PIECE_NO "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE PR_PIECE_STAGE NOT IN ('EXP-INVOICE') " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[150];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("APPROVAL_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_CANCEL_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_BALE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PKG_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_STATION");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_BOX_SIZE");
                    p++;
                    rowData[p] = rsTmp.getString("PKG_TRANSPORT_MODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_PACKED");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;

//                    total_weight = total_weight + Double.parseDouble(rsTmp.getString("PR_ACTUAL_WEIGHT"));
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
//                    total_bill_weight = total_bill_weight + Double.parseDouble(rsTmp.getString("PR_BILL_WEIGHT"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));

                    DecimalFormat dfbsr = new DecimalFormat("###.##");
                    txtTotalWeight_bsr.setText(dfbsr.format(total_weight));
                    txtTotalBillWeight_bsr.setText(dfbsr.format(total_bill_weight));
                    txtBsrTotalInvAmt.setText(dfbsr.format(total_amount));

                    DataModelBSR.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridWIPPieceReview() {
        DataModel_WIPReview = new EITLTableModel();
        WIP_Piece_Review.removeAll();
        WIP_Piece_Review.setModel(DataModel_WIPReview);

        WIP_Piece_Review.setAutoResizeMode(WIP_Piece_Review.AUTO_RESIZE_OFF);

        DataModel_WIPReview.addColumn("SrNo");
        DataModel_WIPReview.addColumn("Doc No");
        DataModel_WIPReview.addColumn("Doc Date");
        DataModel_WIPReview.addColumn("Piece No");
        DataModel_WIPReview.addColumn("Quality No");
        DataModel_WIPReview.addColumn("Quality Desc");
        DataModel_WIPReview.addColumn("Machine No");
        DataModel_WIPReview.addColumn("Position No");
        DataModel_WIPReview.addColumn("Position Desc");
        DataModel_WIPReview.addColumn("Position No(Design)");
        DataModel_WIPReview.addColumn("UPN");
        DataModel_WIPReview.addColumn("Group Name");
        DataModel_WIPReview.addColumn("Party Code");
        DataModel_WIPReview.addColumn("Party Name");
        DataModel_WIPReview.addColumn("Change Posibility");
        DataModel_WIPReview.addColumn("Delink");
        DataModel_WIPReview.addColumn("Apply Change");
        DataModel_WIPReview.addColumn("Remarks");
        DataModel_WIPReview.addColumn("Prod.Remarks");
        DataModel_WIPReview.addColumn("Stage at the time of sanction Dept");
        DataModel_WIPReview.addColumn("Current Date");
        DataModel_WIPReview.addColumn("Days");
        DataModel_WIPReview.addColumn("WH Recived Date");
        DataModel_WIPReview.addColumn("Days");
        DataModel_WIPReview.addColumn("Invoice Date");
        DataModel_WIPReview.addColumn("Days");
        DataModel_WIPReview.addColumn("Review Status");
        DataModel_WIPReview.addColumn("Incharge");

        DataModel_WIPReview.TableReadOnly(true);
        WIP_Piece_Review.getColumnModel().getColumn(0).setMaxWidth(50);

    }

    private void FormatGridDiscount() {
        DataModelDiscount = new EITLTableModel();
        TableDiscount.removeAll();
        TableDiscount.setModel(DataModelDiscount);

        TableDiscount.setAutoResizeMode(TableDiscount.AUTO_RESIZE_OFF);

        DataModelDiscount.addColumn("Sr No");
        DataModelDiscount.addColumn("Group Name");
        DataModelDiscount.addColumn("Party Code");
        DataModelDiscount.addColumn("Party Name");
        DataModelDiscount.addColumn("City");
        DataModelDiscount.addColumn("Product Code");
        DataModelDiscount.addColumn("Product Desc");
        DataModelDiscount.addColumn("Product Group");
        DataModelDiscount.addColumn("Piece No");
        DataModelDiscount.addColumn("Effective From");
        DataModelDiscount.addColumn("Effective To");
        DataModelDiscount.addColumn("Disc Per");
        DataModelDiscount.addColumn("Year End Disc Per");
        DataModelDiscount.addColumn("Seam Value");
        DataModelDiscount.addColumn("Machine No");
        DataModelDiscount.addColumn("Position No");
        DataModelDiscount.addColumn("Turn Over Target");
        DataModelDiscount.addColumn("Sanction Date");
        DataModelDiscount.addColumn("Incharge");

        DataModelDiscount.TableReadOnly(true);
        TableDiscount.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDiscount() {
        String cndtn = "";
        String cndtn1 = "";
        try {
            FormatGridDiscount(); //clear existing content of table
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND A.PARTY_CODE= '" + txtpartycode.getText() + "'";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn = " AND A.GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().trim().equals("")) {
                String[] Pieces = txtpieceno.getText().trim().split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn += " AND ( PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR  PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }

                cndtn += ")";
            }

            if (!txtproductcode.getText().trim().equals("")) {

                //Addition using (,)
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {

                    if (i == 0) {
                        cndtn += " AND ( B.PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR  B.PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND  B.MACHINE_NO = " + txtMachineNo.getText() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND  B.MACHINE_POSITION = " + txtPosition.getText() + " ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                //cndtn += " AND PM_INCHARGE_CD = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
                cndtn1 += " AND PM_INCHARGE_CD = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            String chkI = "";
            if (chkKeyClientInd.isSelected()){
                chkI = " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
            //strSQL = "SELECT A.PARTY_CODE,A.PARTY_NAME,B.PRODUCT_CODE,C.PRODUCT_DESC,C.GROUP_NAME,CASE WHEN B.PIECE_NO='null' THEN '' ELSE B.PIECE_NO END AS PIECE_NO,B.EFFECTIVE_FROM,B.EFFECTIVE_TO,B.DISC_PER,B.YRED_DISC_PER,B.SEAM_VALUE,B.MACHINE_NO,B.MACHINE_POSITION,B.TURN_OVER_TARGET,A.SANCTION_DATE,E.INCHARGE_NAME,D.CITY_ID  FROM PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL B,PRODUCTION.FELT_RATE_DISC_MASTER_HEADER A,PRODUCTION.FELT_QLT_RATE_MASTER C,DINESHMILLS.D_SAL_PARTY_MASTER D,PRODUCTION.FELT_INCHARGE E WHERE A.PARTY_CODE=B.PARTY_CODE AND A.PARTY_CODE=D.PARTY_CODE AND D.INCHARGE_CD=E.INCHARGE_CD AND B.PRODUCT_CODE=C.PRODUCT_CODE AND A.CANCELED=0 AND A.APPROVED=1 AND A.MASTER_NO=B.MASTER_NO AND A.EFFECTIVE_FROM=B.EFFECTIVE_FROM AND A.EFFECTIVE_TO=B.EFFECTIVE_TO AND A.EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "'  AND (A.EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "'  OR A.EFFECTIVE_TO='0000-00-00') AND C.EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "'  AND (C.EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "'  OR C.EFFECTIVE_TO='0000-00-00')" + cndtn + "";
            strSQL = "SELECT * FROM "
                    + "(SELECT A.GROUP_CODE,A.GROUP_NAME,A.PARTY_CODE,A.PARTY_NAME,B.PRODUCT_CODE, "
                    + "CASE WHEN B.PIECE_NO='null' THEN '' ELSE B.PIECE_NO END AS PIECE_NO,B.EFFECTIVE_FROM,B.EFFECTIVE_TO, "
                    + "B.DISC_PER,B.YRED_DISC_PER,B.SEAM_VALUE,B.MACHINE_NO,B.MACHINE_POSITION, "
                    + "B.TURN_OVER_TARGET,A.SANCTION_DATE "
                    + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL B,PRODUCTION.FELT_RATE_DISC_MASTER_HEADER A  "
                    + "WHERE A.MASTER_NO=B.MASTER_NO AND A.CANCELED=0 AND A.APPROVED=1  " + cndtn
                    + ") AS DISC "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE AS PM_PARTY_CODE,CITY_ID,INCHARGE_CD AS PM_INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND  "
                    + "FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON DISC.PARTY_CODE=PM.PM_PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE AS QM_PRODUCT_CODE,PRODUCT_DESC,GROUP_NAME AS PRODUCT_GROUP  "
                    + "FROM PRODUCTION.FELT_QLT_RATE_MASTER  WHERE APPROVED=1 AND CANCELED=0) AS QM  "
                    + "ON DISC.PRODUCT_CODE=QM.QM_PRODUCT_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PM.PM_INCHARGE_CD=IM.INCHARGE_CD " + cndtn1 + " "
                    + "WHERE 1=1 "
                    + chkI;

            int Orderby = cmbDiscount.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 2) {
                strSQL += " ORDER BY PRODUCT_CODE ";
            }

            cmbDiscountModel = new EITLComboModel();
            cmbDiscount.removeAllItems();
            cmbDiscount.setModel(cmbDiscountModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbDiscountModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "PRODUCT CODE";
            cmbDiscountModel.addElement(aData);

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    txtDiscountTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("GROUP_NAME");
                    rowData[2] = rsTmp.getString("PARTY_CODE");
                    rowData[3] = rsTmp.getString("PARTY_NAME");
                    rowData[4] = rsTmp.getString("CITY_ID");
                    rowData[5] = rsTmp.getString("PRODUCT_CODE");
                    rowData[6] = rsTmp.getString("PRODUCT_DESC");
                    rowData[7] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[8] = rsTmp.getString("PIECE_NO");
                    rowData[9] = EITLERPGLOBAL.formatDate(rsTmp.getString("EFFECTIVE_FROM"));
                    rowData[10] = EITLERPGLOBAL.formatDate(rsTmp.getString("EFFECTIVE_TO"));
                    rowData[11] = rsTmp.getString("DISC_PER");
                    rowData[12] = rsTmp.getString("YRED_DISC_PER");
                    rowData[13] = rsTmp.getString("SEAM_VALUE");
                    rowData[14] = rsTmp.getString("MACHINE_NO");
                    rowData[15] = rsTmp.getString("MACHINE_POSITION");
                    rowData[16] = rsTmp.getString("TURN_OVER_TARGET");
                    rowData[17] = EITLERPGLOBAL.formatDate(rsTmp.getString("SANCTION_DATE"));
                    rowData[18] = rsTmp.getString("INCHARGE_NAME");

                    DataModelDiscount.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridInvoiced() {
        DataModelInvoiced = new EITLTableModel();
        Table_INVOICED.removeAll();
        Table_INVOICED.setModel(DataModelInvoiced);

        Table_INVOICED.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelInvoiced.addColumn("Sr No");

        DataModelInvoiced.addColumn("Approval Status");
        DataModelInvoiced.addColumn("Remarks");
        DataModelInvoiced.addColumn("Invoice No");
        DataModelInvoiced.addColumn("Invoice Date");
        DataModelInvoiced.addColumn("Due Date");
        DataModelInvoiced.addColumn("Bale No");
        DataModelInvoiced.addColumn("Bale Date");
        DataModelInvoiced.addColumn("Group Name");
        DataModelInvoiced.addColumn("Party Code");
        DataModelInvoiced.addColumn("Party Name");
        DataModelInvoiced.addColumn("Dispatch Station");
        DataModelInvoiced.addColumn("No of Pieces");
        DataModelInvoiced.addColumn("Piece No");
        DataModelInvoiced.addColumn("Machine No");
        DataModelInvoiced.addColumn("Position No");
        DataModelInvoiced.addColumn("Position No(Design)");
        DataModelInvoiced.addColumn("Position Desc");
        DataModelInvoiced.addColumn("UPN");
        DataModelInvoiced.addColumn("Order No");
        DataModelInvoiced.addColumn("Order Date");
        DataModelInvoiced.addColumn("Product Code");
        DataModelInvoiced.addColumn("Product Desc");
        DataModelInvoiced.addColumn("Group");
        DataModelInvoiced.addColumn("Style");
        DataModelInvoiced.addColumn("Invoice Length");
        DataModelInvoiced.addColumn("Invoice Width");
        DataModelInvoiced.addColumn("Invoice GSM");
        DataModelInvoiced.addColumn("Invoice Weight");
        DataModelInvoiced.addColumn("Invoice Sq.Mtr");
        DataModelInvoiced.addColumn("Rate Indicator");
        DataModelInvoiced.addColumn("Rate");

        DataModelInvoiced.addColumn("Surcharge Per");
        DataModelInvoiced.addColumn("Surcharge Rate");
        DataModelInvoiced.addColumn("Gross Rate");

        DataModelInvoiced.addColumn("Rate Unit");
        DataModelInvoiced.addColumn("Disc Per");
        DataModelInvoiced.addColumn("Charge Code");
        DataModelInvoiced.addColumn("Party Charge Code");
        DataModelInvoiced.addColumn("Bas Amt");
        DataModelInvoiced.addColumn("Disc Amt");
        DataModelInvoiced.addColumn("Disc Bas Amt");
        DataModelInvoiced.addColumn("Seam Chg");
        DataModelInvoiced.addColumn("Chem Trt Chg");
        DataModelInvoiced.addColumn("Pin Chg");
        DataModelInvoiced.addColumn("Spiral Chg");
        DataModelInvoiced.addColumn("Gross Amt");
        DataModelInvoiced.addColumn("Insurance Amt");
        DataModelInvoiced.addColumn("IGST Per");
        DataModelInvoiced.addColumn("IGST Amt");
        DataModelInvoiced.addColumn("CGST Per");
        DataModelInvoiced.addColumn("CGST Amt");
        DataModelInvoiced.addColumn("SGST Per");
        DataModelInvoiced.addColumn("SGST Amt");
        DataModelInvoiced.addColumn("TCS Per");
        DataModelInvoiced.addColumn("TCS Amt");
        DataModelInvoiced.addColumn("Net Amt");
        DataModelInvoiced.addColumn("Invoice Amt");
        DataModelInvoiced.addColumn("Desp Mode");
        DataModelInvoiced.addColumn("Transporter Code");
        DataModelInvoiced.addColumn("Transporter Name");
        DataModelInvoiced.addColumn("Gatepass No");
        DataModelInvoiced.addColumn("Document Through");
        DataModelInvoiced.addColumn("Party Bank Name");
        DataModelInvoiced.addColumn("Party Bank Address1");
        DataModelInvoiced.addColumn("Party Bank Address2");
        DataModelInvoiced.addColumn("F6/F7 Party Bank Name");
        DataModelInvoiced.addColumn("HSN Code");
        DataModelInvoiced.addColumn("GSTIN No");
        DataModelInvoiced.addColumn("Address1");
        DataModelInvoiced.addColumn("Address2");
        DataModelInvoiced.addColumn("Pincode");
        DataModelInvoiced.addColumn("City");
        DataModelInvoiced.addColumn("Place of Supply");
        DataModelInvoiced.addColumn("FinYear");
        DataModelInvoiced.addColumn("Ord Length");
        DataModelInvoiced.addColumn("Bill Length");
        DataModelInvoiced.addColumn("Actual Length");
        DataModelInvoiced.addColumn("Ord Width");
        DataModelInvoiced.addColumn("Bill Width");
        DataModelInvoiced.addColumn("Actual Width");
        DataModelInvoiced.addColumn("Ord GSM");
        DataModelInvoiced.addColumn("Tender GSM");
        DataModelInvoiced.addColumn("Bill GSM");
        DataModelInvoiced.addColumn("Ord Sq.Mtr");
        DataModelInvoiced.addColumn("Bill Sq.Mtr");
        DataModelInvoiced.addColumn("Thortical Weight");
        DataModelInvoiced.addColumn("Tender Weight");
        DataModelInvoiced.addColumn("Bill Weight");
        DataModelInvoiced.addColumn("Actual Weight");
        DataModelInvoiced.addColumn("SYN(%)");
        DataModelInvoiced.addColumn("Req Month");
        DataModelInvoiced.addColumn("OC MONTH");
        DataModelInvoiced.addColumn("CURR SCH MONTH");
        DataModelInvoiced.addColumn("Warp Date");
        DataModelInvoiced.addColumn("Ord Vs Warp Days");
        DataModelInvoiced.addColumn("Wvg Date");
        DataModelInvoiced.addColumn("Days Order Wvg");
        DataModelInvoiced.addColumn("Wvg Layer Remark");
        DataModelInvoiced.addColumn("Wvg Weight");
        DataModelInvoiced.addColumn("Wvg Weight_A");
        DataModelInvoiced.addColumn("Wvg Weight_B");
        DataModelInvoiced.addColumn("Splice Date");
        DataModelInvoiced.addColumn("Mnd Date");
        DataModelInvoiced.addColumn("Days Order Mnd");
        DataModelInvoiced.addColumn("Mnd Layer Remark");
        DataModelInvoiced.addColumn("Mnd Weight");
        DataModelInvoiced.addColumn("Mnd Weight_A");
        DataModelInvoiced.addColumn("Mnd Weight_B");
        DataModelInvoiced.addColumn("Ndl Date");
        DataModelInvoiced.addColumn("Days Order Ndl");
        DataModelInvoiced.addColumn("Ndl Weight");
        DataModelInvoiced.addColumn("Seam Date");
        DataModelInvoiced.addColumn("Fnsg Date");
        DataModelInvoiced.addColumn("Days Order Fnsg");
        DataModelInvoiced.addColumn("Days Wrp Wvg");
        DataModelInvoiced.addColumn("Days Wvg Mnd");
        DataModelInvoiced.addColumn("Days Mnd Ndl");
        DataModelInvoiced.addColumn("Days Ndl Fndg");
        DataModelInvoiced.addColumn("Days WH Stock");
        DataModelInvoiced.addColumn("Days WH Packed");
        DataModelInvoiced.addColumn("Days WH Invoiced");
        DataModelInvoiced.addColumn("Days Status");
        DataModelInvoiced.addColumn("Referance");
        DataModelInvoiced.addColumn("Ref Date");
        DataModelInvoiced.addColumn("PO No");
        DataModelInvoiced.addColumn("PO Date");
        DataModelInvoiced.addColumn("Material Code");
        DataModelInvoiced.addColumn("OA No");
        DataModelInvoiced.addColumn("OA Date");
        DataModelInvoiced.addColumn("OC No");
        DataModelInvoiced.addColumn("OC Date");
        DataModelInvoiced.addColumn("Order Remark");
        DataModelInvoiced.addColumn("Piece Remark");
        DataModelInvoiced.addColumn("Rejected");
        DataModelInvoiced.addColumn("Rejected Remark");
        DataModelInvoiced.addColumn("LR No");
        DataModelInvoiced.addColumn("LR Date");
        DataModelInvoiced.addColumn("Carrier");
        DataModelInvoiced.addColumn("Freight");
        DataModelInvoiced.addColumn("LR Remark");
        DataModelInvoiced.addColumn("Incharge");
        DataModelInvoiced.addColumn("GateOutward No");
        DataModelInvoiced.addColumn("GateOutward Date");

        DataModelInvoiced.addColumn("GR No");
        DataModelInvoiced.addColumn("GR Date");
        DataModelInvoiced.addColumn("GR Category");
        DataModelInvoiced.addColumn("Dispatch Doc No");
        DataModelInvoiced.addColumn("Dispatch Doc Date");

        DataModelInvoiced.TableReadOnly(true);
        Table_INVOICED.getColumnModel().getColumn(0).setMaxWidth(50);

        Table_INVOICED.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int col) {
                Component comp = super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, col);

//                System.out.println("Clm : "+Table_INVOICED.getColumn("Obsolete Status").getModelIndex());
                String status = table.getModel().getValueAt(row, Table_INVOICED.getColumn("GR Category").getModelIndex()).toString();

                if ("F6".equals(status)) {
                    setBackground(new Color(120, 193, 109));//GREEN COLOR
                    setForeground(Color.BLACK);
                } else if ("Normal".equals(status)) {
                    setBackground(new Color(255, 152, 98));//ORANGE COLOR
                    setForeground(Color.BLACK);
                } else {
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }

                return (comp);
            }
        });
    }

    private void GenerateInvoiced() {
        String cndtn = "";
        String orderBy = " ORDER BY INVOICE_DATE,INVOICE_NO ";

        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridInvoiced(); //clear existing content of table
            ResultSet rsTmp;

//-------------------------------------------------------------------------------------------------------------------
            int status = cmbInvStatus.getSelectedIndex();
            if (status == 3) {
                cndtn += "";
            }
            if (status == 0) {
                cndtn += " AND APPROVAL_STATUS='APPROVED' ";
            }
            if (status == 1) {
                cndtn += " AND APPROVAL_STATUS='UNAPPROVED' ";
            }
            if (status == 2) {
                cndtn += " AND APPROVAL_STATUS='CANCELLED' ";
            }
            if (status == 4) {
                cndtn += " AND CHARGE_CODE = 1 AND CHARGE_CODE != PARTY_CHARGE_CODE AND COALESCE(WH_OUTWARD_NO,'') = '' AND APPROVED=1 AND CANCELLED=0 ";
            }
            if (status == 5) {
                cndtn += " AND COALESCE(WH_OUTWARD_NO,'') = '' AND APPROVED=1 AND CANCELLED=0 ";
            }

            String Party_Code = txtpartycode.getText();
            String Length_from = txtlengthfrom.getText();
            String Length_to = txtlengthto.getText();
            String Width_from = txtwidthfrom.getText();
            String Width_to = txtwidthto.getText();
            String GSM_from = txtgsmfrom.getText();
            String GSM_to = txtgsmto.getText();
            String Piece_No = txtpieceno.getText();
            String Product_Code = txtproductcode.getText();
            String Incharge = EITLERPGLOBAL.getComboCode(S_ENGINEER) + "";
            String From_date = txtdatefrom.getText();
            String To_date = txtdateto.getText();
            String MachineNo = txtMachineNo.getText();
            String Position = txtPosition.getText();

            if (!Party_Code.equals("")) {
                cndtn += " AND PARTY_CODE = '" + Party_Code + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn = " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND LENGTH >=  '" + Length_from + "' AND LENGTH <=  '" + Length_to + "' ";
            } else if (!Length_from.equals("") && Length_to.equals("")) {
                cndtn += " AND LENGTH >= '" + Length_from + "' ";
            } else if (Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND LENGTH <= '" + Length_to + "' ";
            }

            if (!Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND WIDTH >= '" + Width_from + "' AND WIDTH <= '" + Width_to + "' ";
            } else if (!Width_from.equals("") && Width_to.equals("")) {
                cndtn += " AND WIDTH >= '" + Width_from + "' ";
            } else if (Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND WIDTH <= '" + Width_to + "' ";
            }

            if (!GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND GSM >=  '" + GSM_from + "' AND GSM <= '" + GSM_to + "' ";
            } else if (!GSM_from.equals("") && GSM_to.equals("")) {
                cndtn += " AND GSM >= '" + GSM_from + "' ";
            } else if (GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND GSM <= '" + GSM_to + "' ";
            }

            if (!Piece_No.equals("")) {
                String[] Pieces = Piece_No.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }

                cndtn += ")";
            }

            if (!Product_Code.equals("")) {

                //Addition using (,)
                String[] Products = Product_Code.split(",");
                for (int i = 0; i < Products.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!Incharge.equals("0")) {
                cndtn += " AND PR_INCHARGE = '" + Incharge + "' ";
            }

            if (!MachineNo.equals("")) {
                cndtn += " AND MACHINE_NO = '" + MachineNo + "' ";
            }

            if (!Position.equals("")) {
                cndtn += " AND POSITION_NO = '" + Position + "' ";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND INVOICE_DATE >= '" + df1.format(df.parse(From_date)) + "' AND INVOICE_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND INVOICE_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND INVOICE_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            int Orderby = cmbInvOrderBy.getSelectedIndex();
            //Orderby++;
            if (Orderby == 0) {
                orderBy = " ORDER BY INVOICE_DATE,INVOICE_NO ";
            }
            if (Orderby == 1) {
                orderBy = " ORDER BY PARTY_CODE,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 2) {
                orderBy = " ORDER BY PIECE_NO,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 3) {
                orderBy = " ORDER BY BALE_NO,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 4) {
                orderBy = " ORDER BY PRODUCT_CODE,INVOICE_DATE DESC,INVOICE_NO ";
            }
            if (Orderby == 5) {
                orderBy = " ORDER BY INVOICE_DATE DESC,INVOICE_NO DESC ";
            }

            cmbInvOrderByModel = new EITLComboModel();
            cmbInvOrderBy.removeAllItems();
            cmbInvOrderBy.setModel(cmbInvOrderByModel);
            ComboData aData = new ComboData();

            aData.Code = 0;
            aData.Text = "Select Order";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 1;
            aData.Text = "Party Code";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "Piece No";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "Bale No";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 4;
            aData.Text = "Product Code";
            cmbInvOrderByModel.addElement(aData);

            aData.Code = 5;
            aData.Text = "Invoice Date (Descending)";
            cmbInvOrderByModel.addElement(aData);

//------------------------------------------------------------------------------------------------------------------------------------
            String strSQL = "";

//            strSQL = "SELECT GROUP_CODE,GROUP_DESC,PARTY_ACTIVE,GROUP_CRITICAL_LIMIT,AMOUNT_LIMIT,CASH_DISC_FLAG,YEAR_END_DISC_FLAG,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID,TRANSPORTER_NAME,PAN_NO,PAN_DATE,INSURANCE_CODE,COUNTRY_ID,INCHARGE_NAME FROM(SELECT AMOUNT_LIMIT,PARTY_CODE,PARTY_NAME,CHARGE_CODE,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,GSTIN_NO,GSTIN_DATE,STATE,STATE_GST_CODE,STATE_CODE,DISPATCH_STATION,DISTRICT,PHONE_NO,MOBILE_NO,EMAIL,CONTACT_PERSON,BANK_ID,BANK_NAME,BANK_ADDRESS,BANK_CITY,TRANSPORTER_ID AS TRANSPORTER,PAN_NO,PAN_DATE,INSURANCE_CODE,INCHARGE_CD,COUNTRY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE  MAIN_ACCOUNT_CODE=210010 ) AS JR LEFT JOIN ( SELECT INCHARGE_CD,INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE) AB ON JR.INCHARGE_CD=AB.INCHARGE_CD LEFT JOIN ( SELECT TRANSPORTER_ID,TRANSPORTER_NAME FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER ) AC ON JR.TRANSPORTER=AC.TRANSPORTER_ID LEFT JOIN(SELECT D.GROUP_CODE,D.GROUP_DESC,E.PARTY_CODE AS PARTY,E.PARTY_ACTIVE,D.GROUP_CRITICAL_LIMIT,E.CASH_DISC_FLAG,E.YEAR_END_DISC_FLAG FROM PRODUCTION.FELT_GROUP_MASTER_HEADER D,PRODUCTION.FELT_GROUP_MASTER_DETAIL E WHERE D.GROUP_CODE=E.GROUP_CODE AND D.APPROVED=1 AND D.CANCELED=0)  AS JJ ON  JJ.PARTY=JR.PARTY_CODE " + cndtn + "";
//            strSQL = "SELECT * FROM(SELECT * FROM(SELECT ";
//            strSQL += "CASE WHEN H.APPROVED = 0 AND H.CANCELLED = 0 THEN 'UNAPPROVED' WHEN H.APPROVED = 1 AND H.CANCELLED = 0 THEN 'APPROVED' WHEN H.APPROVED = 0 AND H.CANCELLED = 1 THEN 'CANCELLED' END AS APPROVAL_STATUS, ";
//            strSQL += "CANCEL_REASON,INVOICE_NO,INVOICE_DATE,DUE_DATE,BALE_NO,PACKING_DATE,PARTY_CODE,PARTY_NAME,DISPATCH_STATION,NO_OF_PIECES,PIECE_NO,MACHINE_NO,POSITION_NO,POSITION_DESC,PRODUCT_CODE,PRODUCT_DESC,STYLE,LENGTH,WIDTH,GSM,ACTUAL_WEIGHT,SQMTR,RATE,RATE_UNIT,DISC_PER, ";
//            strSQL += "CHARGE_CODE,PARTY_CHARGE_CODE,BAS_AMT,DISC_AMT,DISC_BAS_AMT,SEAM_CHG,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,GROSS_AMT,INSURANCE_AMT,IGST_PER,IGST_AMT,CGST_PER,CGST_AMT,SGST_PER,SGST_AMT,NET_AMT,INVOICE_AMT, ";
//            strSQL += "DESP_MODE,TRANSPORTER_CODE,TRANSPORTER_NAME,GATEPASS_NO,DOCUMENT_THROUGH,PARTY_BANK_NAME,PARTY_BANK_ADDRESS1,PARTY_BANK_ADDRESS2,HSN_CODE,GSTIN_NO,ADDRESS1,ADDRESS2,PINCODE,CITY_ID,PLACE_OF_SUPPLY,FINYR ";
//            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H) AS I ";
//            strSQL += "LEFT JOIN ";
//            strSQL += "(SELECT PR_INVOICE_NO, PR_INVOICE_DATE, PR_BALE_NO, PR_PACKED_DATE, PR_PIECE_NO, PR_DOC_NO, PR_ORDER_DATE, PR_REFERENCE, PR_REFERENCE_DATE, PR_PO_NO, PR_PO_DATE, PR_GROUP, PR_WVG_DATE, PR_MND_DATE, PR_NDL_DATE, PR_FNSG_DATE, PR_INCHARGE, PR_LENGTH, PR_ACTUAL_LENGTH, PR_BILL_LENGTH, PR_WIDTH, PR_ACTUAL_WIDTH, PR_BILL_WIDTH, PR_THORITICAL_WEIGHT, PR_ACTUAL_WEIGHT, PR_BILL_WEIGHT, PR_GSM, PR_BILL_GSM, PR_PRODUCT_CODE, PR_BILL_PRODUCT_CODE, PR_INVOICE_PARTY, PR_PARTY_CODE_ORIGINAL, PR_PIECE_NO_ORIGINAL ";
//            strSQL += "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER) AS P ";
//            strSQL += "ON PR_PACKED_DATE = PACKING_DATE ";
//            strSQL += "AND BALE_NO = PR_BALE_NO ) AS IP ";
//            strSQL += "LEFT JOIN ";
//            strSQL += "(SELECT INVOICE_NO AS LR_INVOICE_NO, INVOICE_DATE AS LR_INVOICE_DATE, LR_NO, LR_DATE, CARRIER, FREIGHT, REMARKS AS LR_REMARK FROM PRODUCTION.FELT_SAL_INVOICE_EXTRA_DETAIL WHERE APPROVED = 1 ) AS IE ";
//            strSQL += "ON IE.LR_INVOICE_NO = IP.INVOICE_NO AND IE.LR_INVOICE_DATE = IP.INVOICE_DATE ";
//            strSQL += "WHERE 1=1 " + cndtn + " " + orderBy;
            strSQL = "SELECT *,CASE WHEN INVOICE_NO IN ('FE/001349','FE/001350') THEN INVOICE_AMT ELSE INVOICE_AMT/NO_OF_PIECES END AS T_INV_AMT FROM "
                    + "(SELECT   "
                    + "CASE WHEN H.APPROVED = 0 AND H.CANCELLED = 0 THEN 'UNAPPROVED' WHEN H.APPROVED = 1 AND H.CANCELLED = 0 THEN 'APPROVED' WHEN H.APPROVED = 0 AND H.CANCELLED = 1 THEN 'CANCELLED' END AS APPROVAL_STATUS,  "
                    + "H.* FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H) AS INV  "
                    + "LEFT JOIN  "
                    + "(SELECT INVOICE_NO AS LR_INVOICE_NO, INVOICE_DATE AS LR_INVOICE_DATE, LR_NO, LR_DATE, CARRIER, FREIGHT, REMARKS AS LR_REMARK FROM PRODUCTION.FELT_SAL_INVOICE_EXTRA_DETAIL WHERE APPROVED = 1 ) AS IE  "
                    + "ON IE.LR_INVOICE_NO = INV.INVOICE_NO AND IE.LR_INVOICE_DATE = INV.INVOICE_DATE  "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER) AS PR  "
                    + "ON INV.PACKING_DATE = PR.PR_PACKED_DATE AND INV.BALE_NO = PR.PR_BALE_NO AND SUBSTRING_INDEX(INV.PIECE_NO, ',', 1)=PR.PR_PIECE_NO "//INV.PIECE_NO
                    + "LEFT JOIN   "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE   "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D   "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE   "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM   "
                    + "ON INV.PARTY_CODE=GM.GROUP_PARTY_CODE  "
                    + "LEFT JOIN   "
                    + "(SELECT POSITION_NO AS MP_POSITION_NO, POSITION_DESC AS MP_POSITION_DESC, POSITION_DESIGN_NO "
                    + "FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP   "
                    + "ON INV.POSITION_NO=MP.MP_POSITION_NO  "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM   "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "LEFT JOIN   "
                    + "(SELECT H.GATEPASS_NO,H.GATEPASS_DATE,H.GATEPASS_TYPE,D.WH_INVOICE_NO,D.WH_INVOICE_DATE,H.WH_OUTWARD_NO,H.WH_OUTWARD_DATE "
                    + "FROM DINESHMILLS.D_INV_NRGP_HEADER H,DINESHMILLS.D_INV_NRGP_DETAIL D "
                    + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE = 'FGP') AS OW   "
                    + "ON OW.WH_INVOICE_NO = INV.INVOICE_NO AND OW.WH_INVOICE_DATE = INV.INVOICE_DATE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.DOC_NO AS GR_DOC_NO,H.DOC_DATE AS GR_DOC_DATE,D.PIECE_NO AS GR_PIECE_NO,D.NEW_PIECE_NO,D.INVOICE_NO AS GR_INVOICE_NO, "
                    + "D.INVOICE_DATE AS GR_INVOICE_DATE,D.RETURN_CATEGORY "
                    + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                    + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                    + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR  "
                    + "ON GR.GR_INVOICE_NO = INV.INVOICE_NO AND GR.GR_INVOICE_DATE = INV.INVOICE_DATE  "
                    + "LEFT JOIN  "
                    + "(SELECT DOC_NO AS ICL_DOC_NO,DOC_DATE AS ICL_DOC_DATE,INVOICE_NO AS ICL_INVOICE_NO,INVOICE_DATE AS ICL_INVOICE_DATE "
                    + "FROM PRODUCTION.FELT_INVOICE_COVERING_LETTER_DATA WHERE APPROVED=1 AND CANCELED=0 ) AS ICL  "
                    + "ON ICL.ICL_INVOICE_NO = INV.INVOICE_NO AND ICL.ICL_INVOICE_DATE = INV.INVOICE_DATE  "
                    + "WHERE 1=1 " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[150];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("APPROVAL_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("CANCEL_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("DUE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PACKING_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("DISPATCH_STATION");
                    p++;
                    rowData[p] = rsTmp.getString("NO_OF_PIECES");
                    p++;
                    rowData[p] = rsTmp.getString("PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("GSM");
                    p++;
                    rowData[p] = rsTmp.getString("ACTUAL_WEIGHT");
                    p++;

                    total_weight = total_weight + Double.parseDouble(rsTmp.getString("ACTUAL_WEIGHT"));

                    rowData[p] = rsTmp.getString("SQMTR");
                    p++;

                    String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("PIECE_NO") + "'");

                    rowData[p] = indicator;
                    p++;

                    rowData[p] = rsTmp.getString("RATE");
                    p++;

                    rowData[p] = rsTmp.getString("SURCHARGE_PER");
                    p++;
                    rowData[p] = rsTmp.getString("SURCHARGE_RATE");
                    p++;
                    rowData[p] = rsTmp.getString("GROSS_RATE");
                    p++;

                    rowData[p] = rsTmp.getString("RATE_UNIT");
                    p++;
                    rowData[p] = rsTmp.getString("DISC_PER");
                    p++;
                    rowData[p] = rsTmp.getString("CHARGE_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_CHARGE_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("BAS_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("DISC_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("DISC_BAS_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("SEAM_CHG");
                    p++;
                    rowData[p] = rsTmp.getString("CHEM_TRT_CHG");
                    p++;
                    rowData[p] = rsTmp.getString("PIN_CHG");
                    p++;
                    rowData[p] = rsTmp.getString("SPIRAL_CHG");
                    p++;
                    rowData[p] = rsTmp.getString("GROSS_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("INSURANCE_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("IGST_PER");
                    p++;
                    rowData[p] = rsTmp.getString("IGST_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("CGST_PER");
                    p++;
                    rowData[p] = rsTmp.getString("CGST_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("SGST_PER");
                    p++;
                    rowData[p] = rsTmp.getString("SGST_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("TCS_PER");
                    p++;
                    rowData[p] = rsTmp.getString("TCS_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("NET_AMT");
                    p++;
                    rowData[p] = rsTmp.getString("INVOICE_AMT");
                    p++;

//                    total_amount = total_amount + Double.parseDouble(rsTmp.getString("INVOICE_AMT"));
                    total_amount = total_amount + Double.parseDouble(rsTmp.getString("T_INV_AMT"));

                    rowData[p] = rsTmp.getString("DESP_MODE");
                    p++;
                    rowData[p] = rsTmp.getString("TRANSPORTER_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("TRANSPORTER_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("GATEPASS_NO");
                    p++;
                    rowData[p] = rsTmp.getString("DOCUMENT_THROUGH");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_BANK_NAME");
                    p++;
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_BANK_ADDRESS1");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_BANK_ADDRESS2");
                    p++;
                    rowData[p] = rsTmp.getString("HSN_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("GSTIN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("ADDRESS1");
                    p++;
                    rowData[p] = rsTmp.getString("ADDRESS2");
                    p++;
                    rowData[p] = rsTmp.getString("PINCODE");
                    p++;
                    rowData[p] = rsTmp.getString("CITY_ID");
                    p++;
                    rowData[p] = rsTmp.getString("PLACE_OF_SUPPLY");
                    p++;
                    rowData[p] = rsTmp.getString("FINYR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_PACKED");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("LR_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("LR_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("CARRIER");
                    p++;
                    rowData[p] = rsTmp.getString("FREIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("LR_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("WH_OUTWARD_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("WH_OUTWARD_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("GR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GR_DOC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("RETURN_CATEGORY");
                    p++;
                    rowData[p] = rsTmp.getString("ICL_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("ICL_DOC_DATE"));
                    p++;

                    DecimalFormat dfinv = new DecimalFormat("###.##");
                    txtTotalWeight_INV.setText(dfinv.format(total_weight));
                    txtTotalAmount_INV.setText(dfinv.format(total_amount));

                    DataModelInvoiced.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDivList() {
        DataModelDivList = new EITLTableModel();
        Table_DIV_LIST.removeAll();
        Table_DIV_LIST.setModel(DataModelDivList);

        Table_DIV_LIST.setAutoResizeMode(Table_DIV_LIST.AUTO_RESIZE_OFF);

        DataModelDivList.addColumn("Sr No");
        DataModelDivList.addColumn("Piece Stage");
        DataModelDivList.addColumn("WIP Status");
        DataModelDivList.addColumn("Diversion Stage");
        DataModelDivList.addColumn("Group Name");
        DataModelDivList.addColumn("Party Code");
        DataModelDivList.addColumn("Party Name");
        DataModelDivList.addColumn("Piece No");
        DataModelDivList.addColumn("Machine No");
        DataModelDivList.addColumn("Position No");
        DataModelDivList.addColumn("Position No(Design)");
        DataModelDivList.addColumn("Position Desc");
        DataModelDivList.addColumn("UPN");
        DataModelDivList.addColumn("Order No");
        DataModelDivList.addColumn("Order Date");
        DataModelDivList.addColumn("Product Code");
        DataModelDivList.addColumn("Bill Product Code");
        DataModelDivList.addColumn("Product Desc");
        DataModelDivList.addColumn("Group");
        DataModelDivList.addColumn("Style");
        DataModelDivList.addColumn("Bill Style");
        DataModelDivList.addColumn("Length");
        DataModelDivList.addColumn("Bill Length");
        DataModelDivList.addColumn("Width");
        DataModelDivList.addColumn("Bill Width");
        DataModelDivList.addColumn("GSM");
        DataModelDivList.addColumn("Tender GSM");
        DataModelDivList.addColumn("Bill GSM");
        DataModelDivList.addColumn("Sq.Mtr");
        DataModelDivList.addColumn("Bill Sq.Mtr");
        DataModelDivList.addColumn("Thortical Weight");
        DataModelDivList.addColumn("Tender Weight");
        DataModelDivList.addColumn("Bill Weight");
        DataModelDivList.addColumn("SYN(%)");
        DataModelDivList.addColumn("Req Month");
        DataModelDivList.addColumn("OC MONTH");
        DataModelDivList.addColumn("CURR SCH MONTH");
        DataModelDivList.addColumn("Warp Date");
        DataModelDivList.addColumn("Ord vs Warp Days");
        DataModelDivList.addColumn("Wvg Date");
        DataModelDivList.addColumn("Days Order_Wvg");
        DataModelDivList.addColumn("Wvg Layer Remark");
        DataModelDivList.addColumn("Wvg Weight");
        DataModelDivList.addColumn("Wvg Weight_A");
        DataModelDivList.addColumn("Wvg Weight_B");
        DataModelDivList.addColumn("Splice Date");
        DataModelDivList.addColumn("Mnd Date");
        DataModelDivList.addColumn("Days Order_Mnd");
        DataModelDivList.addColumn("Mnd Layer Remark");
        DataModelDivList.addColumn("Mnd Weight");
        DataModelDivList.addColumn("Mnd Weight_A");
        DataModelDivList.addColumn("Mnd Weight_B");
        DataModelDivList.addColumn("Ndl Date");
        DataModelDivList.addColumn("Days Order_Ndl");
        DataModelDivList.addColumn("Ndl Weight");
        DataModelDivList.addColumn("Seam Date");
        DataModelDivList.addColumn("Fnsg Date");
        DataModelDivList.addColumn("Days Order_Fnsg");
        DataModelDivList.addColumn("Days Wrp_Wvg");
        DataModelDivList.addColumn("Days Wvg_Mnd");
        DataModelDivList.addColumn("Days Mnd_Ndl");
        DataModelDivList.addColumn("Days Ndl_Fnsg");
        DataModelDivList.addColumn("Rate");
        DataModelDivList.addColumn("Basic Amt");
        DataModelDivList.addColumn("Chem Trt Chg");
        DataModelDivList.addColumn("Spiral Chg");
        DataModelDivList.addColumn("Pin CHG");
        DataModelDivList.addColumn("Seam CHG");
        DataModelDivList.addColumn("Ins Ind");
        DataModelDivList.addColumn("Ins Amt");
        DataModelDivList.addColumn("GST");
        DataModelDivList.addColumn("TCS Per");
        DataModelDivList.addColumn("TCS Amt");
        DataModelDivList.addColumn("Disc Per");
        DataModelDivList.addColumn("Disc Amt");
        DataModelDivList.addColumn("Disc Bas Amt");
        DataModelDivList.addColumn("Amount");
        DataModelDivList.addColumn("Referance");
        DataModelDivList.addColumn("Ref Date");
        DataModelDivList.addColumn("PO No");
        DataModelDivList.addColumn("PO Date");
        DataModelDivList.addColumn("Material Code");
        DataModelDivList.addColumn("OA No");
        DataModelDivList.addColumn("OA Date");
        DataModelDivList.addColumn("OC No");
        DataModelDivList.addColumn("OC Date");
        DataModelDivList.addColumn("Order Remark");
        DataModelDivList.addColumn("Diversion Reason");
        DataModelDivList.addColumn("Incharge");
        DataModelDivList.addColumn("Obsolete Status");
        DataModelDivList.addColumn("Obsolete Date");
        DataModelDivList.addColumn("Obsolete Reason");

        DataModelDivList.TableReadOnly(true);
        Table_DIV_LIST.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDivList() {
        String cndtn = "";
        String grp_cndtn = "";
        String From_date = txtdatefrom.getText();
        String To_date = txtdateto.getText();
        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridDivList(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + df1.format(df.parse(From_date)) + "' AND PR_ORDER_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            if (cmbProductionStageDivList.getSelectedItem().equals("WIP")) {
                cndtn += " AND PR_PIECE_STAGE NOT IN ('IN STOCK','BSR') ";
            }

            if (cmbProductionStageDivList.getSelectedItem().equals("IN STOCK")) {
                cndtn += " AND PR_PIECE_STAGE = 'IN STOCK' ";
            }

            if (cmbProductionStageDivList.getSelectedItem().equals("BSR")) {
                cndtn += " AND PR_PIECE_STAGE = 'BSR' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_DIVERSION_FLAG = 'READY' AND PR_PIECE_STAGE NOT IN  ('INVOICED','WEAVING','EXP-INVOICE','DIVERTED','DIVIDED') "
                    + " AND PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[150];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    FeltInvCalc inv_calc;

                    try {

                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        rowData[p] = inv_calc.getFicRate();
                        p++;
                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;
                        total_amount = total_amount + inv_calc.getFicInvAmt();
                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());

                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[4] = rsTmp.getString("GROUP_DESC");
//                    rowData[5] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[6] = rsTmp.getString("PARTY_NAME");
//                    rowData[7] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[8] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[9] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[10] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[11] = rsTmp.getString("POSITION_DESC");
//                    rowData[12] = rsTmp.getString("PR_UPN");
//                    rowData[13] = rsTmp.getString("PR_DOC_NO");
//                    rowData[14] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[15] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[16] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[17] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[18] = rsTmp.getString("PR_GROUP");
//                    rowData[19] = rsTmp.getString("PR_STYLE");
//                    rowData[20] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[21] = rsTmp.getString("PR_LENGTH");
//                    rowData[22] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[23] = rsTmp.getString("PR_WIDTH");
//                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[25] = rsTmp.getString("PR_GSM");
//                    rowData[26] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[27] = rsTmp.getString("PR_SQMTR");
//                    rowData[28] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[29] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));
//
//                    rowData[30] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[31] = rsTmp.getString("PR_SYN_PER");
//                    rowData[32] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[33] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[34] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[35] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[36] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[37] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[38] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[39] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[40] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[41] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[42] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[43] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[44] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[45] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[46] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[47] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[48] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[49] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[50] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[51] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[52] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[53] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[54] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[55] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[56] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[57] = rsTmp.getString("PR_DAYS_NDL_FNG");
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData[58] = inv_calc.getFicRate();
//                        rowData[59] = inv_calc.getFicBasAmount();
//                        rowData[60] = inv_calc.getFicChemTrtChg();
//                        rowData[61] = inv_calc.getFicSpiralChg();
//                        rowData[62] = inv_calc.getFicPinChg();
//                        rowData[63] = inv_calc.getFicSeamChg();
//                        rowData[64] = inv_calc.getFicInsInd();
//                        rowData[65] = inv_calc.getFicInsAmt();
//                        rowData[66] = inv_calc.getFicGST();
//                        rowData[67] = inv_calc.getFicDiscPer();
//                        rowData[68] = inv_calc.getFicDiscAmt();
//                        rowData[69] = inv_calc.getFicDiscBasamt();
//                        rowData[70] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[71] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[72] = rsTmp.getString("PR_REFERENCE");
//                    rowData[73] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[74] = rsTmp.getString("PR_PO_NO");
//                    rowData[75] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[76] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[77] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[78] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[79] = rsTmp.getString("PR_DELINK");
//                    rowData[80] = rsTmp.getString("PR_DELINK_REASON");
                    DecimalFormat dfDList = new DecimalFormat("###.##");
                    txtTotalWeight_DLIST.setText(dfDList.format(total_weight));
                    txtTotalAmount_DLIST.setText(dfDList.format(total_amount));

                    DataModelDivList.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDiverted() {
        DataModelDiverted = new EITLTableModel();
        Table_DIVERTED.removeAll();
        Table_DIVERTED.setModel(DataModelDiverted);

        Table_DIVERTED.setAutoResizeMode(Table_DIVERTED.AUTO_RESIZE_OFF);

        DataModelDiverted.addColumn("Sr No");
        DataModelDiverted.addColumn("Piece Stage");
        DataModelDiverted.addColumn("WIP Status");
        DataModelDiverted.addColumn("Diversion Flag");
        DataModelDiverted.addColumn("Diversion Reason");
        DataModelDiverted.addColumn("Group Name");
        DataModelDiverted.addColumn("Party Code");
        DataModelDiverted.addColumn("Party Name");
        DataModelDiverted.addColumn("Piece No");
        DataModelDiverted.addColumn("PartyCode Original");
        DataModelDiverted.addColumn("PieceNo Original");
        DataModelDiverted.addColumn("Machine No");
        DataModelDiverted.addColumn("Position No");
        DataModelDiverted.addColumn("Position No(Design)");
        DataModelDiverted.addColumn("Position Desc");
        DataModelDiverted.addColumn("UPN");
        DataModelDiverted.addColumn("Order No");
        DataModelDiverted.addColumn("Order Date");
        DataModelDiverted.addColumn("Product Code");
        DataModelDiverted.addColumn("Bill Product Code");
        DataModelDiverted.addColumn("Product Desc");
        DataModelDiverted.addColumn("Group");
        DataModelDiverted.addColumn("Style");
        DataModelDiverted.addColumn("Bill Style");
        DataModelDiverted.addColumn("Length");
        DataModelDiverted.addColumn("Bill Length");
        DataModelDiverted.addColumn("Actual Length");
        DataModelDiverted.addColumn("Width");
        DataModelDiverted.addColumn("Bill Width");
        DataModelDiverted.addColumn("Actual Width");
        DataModelDiverted.addColumn("GSM");
        DataModelDiverted.addColumn("Tender GSM");
        DataModelDiverted.addColumn("Bill GSM");
        DataModelDiverted.addColumn("Sq.Mtr");
        DataModelDiverted.addColumn("Bill Sq.Mtr");
        DataModelDiverted.addColumn("Thortical Weight");
        DataModelDiverted.addColumn("Tender Weight");
        DataModelDiverted.addColumn("Bill Weight");
        DataModelDiverted.addColumn("Actual Weight");
        DataModelDiverted.addColumn("SYN(%)");
        DataModelDiverted.addColumn("Req Month");
        DataModelDiverted.addColumn("OC MONTH");
        DataModelDiverted.addColumn("CURR SCH MONTH");
        DataModelDiverted.addColumn("Warp Date");
        DataModelDiverted.addColumn("Ord vs Warp Days");
        DataModelDiverted.addColumn("Wvg Date");
        DataModelDiverted.addColumn("Days Order_Wvg");
        DataModelDiverted.addColumn("Wvg Layer Remark");
        DataModelDiverted.addColumn("Wvg Weight");
        DataModelDiverted.addColumn("Wvg Weight_A");
        DataModelDiverted.addColumn("Wvg Weight_B");
        DataModelDiverted.addColumn("Splice Date");
        DataModelDiverted.addColumn("Mnd Date");
        DataModelDiverted.addColumn("Days Order_Mnd");
        DataModelDiverted.addColumn("Mnd Layer Remark");
        DataModelDiverted.addColumn("Mnd Weight");
        DataModelDiverted.addColumn("Mnd Weight_A");
        DataModelDiverted.addColumn("Mnd Weight_B");
        DataModelDiverted.addColumn("Ndl Date");
        DataModelDiverted.addColumn("Days Order_Ndl");
        DataModelDiverted.addColumn("Ndl Weight");
        DataModelDiverted.addColumn("Seam Date");
        DataModelDiverted.addColumn("Fnsg Date");
        DataModelDiverted.addColumn("Days Order_Fnsg");
        DataModelDiverted.addColumn("Days Wrp_Wvg");
        DataModelDiverted.addColumn("Days Wvg_Mnd");
        DataModelDiverted.addColumn("Days Mnd_Ndl");
        DataModelDiverted.addColumn("Days Ndl_Fnsg");
        DataModelDiverted.addColumn("Days Wh_Stock");
        DataModelDiverted.addColumn("Packing Doc No");
        DataModelDiverted.addColumn("Packing Doc Date");
        DataModelDiverted.addColumn("Bale No");
        DataModelDiverted.addColumn("Bale Date");
        DataModelDiverted.addColumn("Days Wh_Paked");
        DataModelDiverted.addColumn("Invoice No");
        DataModelDiverted.addColumn("Invoice Date");
        DataModelDiverted.addColumn("Invoice Amount");
        DataModelDiverted.addColumn("Days Wh_Invoiced");
        DataModelDiverted.addColumn("Rate");
        DataModelDiverted.addColumn("Basic Amt");
        DataModelDiverted.addColumn("Chem Trt Chg");
        DataModelDiverted.addColumn("Spiral Chg");
        DataModelDiverted.addColumn("Pin CHG");
        DataModelDiverted.addColumn("Seam CHG");
        DataModelDiverted.addColumn("Ins Ind");
        DataModelDiverted.addColumn("Ins Amt");
        DataModelDiverted.addColumn("GST");
        DataModelDiverted.addColumn("TCS Per");
        DataModelDiverted.addColumn("TCS Amt");
        DataModelDiverted.addColumn("Disc Per");
        DataModelDiverted.addColumn("Disc Amt");
        DataModelDiverted.addColumn("Disc Bas Amt");
        DataModelDiverted.addColumn("Amount");
        DataModelDiverted.addColumn("Referance");
        DataModelDiverted.addColumn("Ref Date");
        DataModelDiverted.addColumn("PO No");
        DataModelDiverted.addColumn("PO Date");
        DataModelDiverted.addColumn("Material Code");
        DataModelDiverted.addColumn("OA No");
        DataModelDiverted.addColumn("OA Date");
        DataModelDiverted.addColumn("OC No");
        DataModelDiverted.addColumn("OC Date");
        DataModelDiverted.addColumn("Order Remark");
        DataModelDiverted.addColumn("Piece Remark");
        DataModelDiverted.addColumn("Rejected");
        DataModelDiverted.addColumn("Rejected Remark");
        DataModelDiverted.addColumn("Diversion");
        DataModelDiverted.addColumn("Diversion Reason");
        DataModelDiverted.addColumn("Incharge");
        DataModelDiverted.addColumn("Obsolete Status");
        DataModelDiverted.addColumn("Obsolete Date");
        DataModelDiverted.addColumn("Obsolete Reason");
        DataModelDiverted.addColumn("Bale ReOpen Flag");
        DataModelDiverted.addColumn("GR No");
        DataModelDiverted.addColumn("GR Date");
        DataModelDiverted.addColumn("GR Remark");
        DataModelDiverted.addColumn("GR Flag");
        DataModelDiverted.addColumn("Inward No");
        DataModelDiverted.addColumn("Rack No");
        DataModelDiverted.addColumn("Location");
        DataModelDiverted.addColumn("Hold Date");
        DataModelDiverted.addColumn("Hold Reason");
        DataModelDiverted.addColumn("Release Date");
        DataModelDiverted.addColumn("Days Status");

        DataModelDiverted.TableReadOnly(true);
        Table_DIVERTED.getColumnModel().getColumn(0).setMaxWidth(50);

        Table_DIVERTED.getColumnModel().getColumn(8).setMinWidth(150);
    }

    private void GenerateDiverted() {
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;
        String From_date = txtdatefrom.getText();
        String To_date = txtdateto.getText();

        try {
            FormatGridDiverted(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + df1.format(df.parse(From_date)) + "' AND PR_ORDER_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PIECE_STAGE='DIVERTED' "
                    + "AND PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[150];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_PACKED");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
                    p++;
                    FeltInvCalc inv_calc;

                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_THORITICAL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_SQMTR")),
                                rsTmp.getString("PR_ORDER_DATE"));
                        rowData[p] = inv_calc.getFicRate();
                        p++;
                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;
                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());

                    }
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("BALE_REOPEN_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SALES_RETURNS_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_REMARKS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_HOLD_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_HOLD_REASON");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RELEASE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("PR_DIVERTED_FLAG");
//                    rowData[4] = rsTmp.getString("PR_DIVERTED_REASON");
//                    rowData[5] = rsTmp.getString("GROUP_DESC");
//                    rowData[6] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[7] = rsTmp.getString("PARTY_NAME");
//                    rowData[8] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[9] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[10] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[11] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[12] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[13] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[14] = rsTmp.getString("POSITION_DESC");
//                    rowData[15] = rsTmp.getString("PR_UPN");
//                    rowData[16] = rsTmp.getString("PR_DOC_NO");
//                    rowData[17] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[18] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[19] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[20] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[21] = rsTmp.getString("PR_GROUP");
//                    rowData[22] = rsTmp.getString("PR_STYLE");
//                    rowData[23] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[24] = rsTmp.getString("PR_LENGTH");
//                    rowData[25] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[26] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[27] = rsTmp.getString("PR_WIDTH");
//                    rowData[28] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[29] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[30] = rsTmp.getString("PR_GSM");
//                    rowData[31] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[32] = rsTmp.getString("PR_SQMTR");
//                    rowData[33] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[34] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));
//
//                    rowData[35] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[36] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//                    rowData[37] = rsTmp.getString("PR_SYN_PER");
//                    rowData[38] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[39] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[40] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[41] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[42] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[43] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[44] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[45] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[46] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[47] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[48] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[49] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[50] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[51] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[52] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[53] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[54] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[55] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[56] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[57] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[58] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[59] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[60] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[61] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[62] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[63] = rsTmp.getString("PR_DAYS_NDL_FNG");
//                    rowData[64] = rsTmp.getString("PR_DAYS_WH_STOCK");
//                    rowData[65] = rsTmp.getString("PR_PKG_DP_NO");
//                    rowData[66] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
//                    rowData[67] = rsTmp.getString("PR_BALE_NO");
//                    rowData[68] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
//                    rowData[69] = rsTmp.getString("PR_DAYS_WH_PACKED");
//                    rowData[70] = rsTmp.getString("PR_INVOICE_NO");
//                    rowData[71] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
//                    rowData[72] = rsTmp.getString("PR_INVOICE_AMOUNT");
//                    rowData[73] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_THORITICAL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_SQMTR")),
//                                rsTmp.getString("PR_ORDER_DATE"));
//
//                        rowData[74] = inv_calc.getFicRate();
//                        rowData[75] = inv_calc.getFicBasAmount();
//                        rowData[76] = inv_calc.getFicChemTrtChg();
//                        rowData[77] = inv_calc.getFicSpiralChg();
//                        rowData[78] = inv_calc.getFicPinChg();
//                        rowData[79] = inv_calc.getFicSeamChg();
//                        rowData[80] = inv_calc.getFicInsInd();
//                        rowData[81] = inv_calc.getFicInsAmt();
//                        rowData[82] = inv_calc.getFicGST();
//                        rowData[83] = inv_calc.getFicDiscPer();
//                        rowData[84] = inv_calc.getFicDiscAmt();
//                        rowData[85] = inv_calc.getFicDiscBasamt();
//                        rowData[86] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[87] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[88] = rsTmp.getString("PR_REFERENCE");
//                    rowData[89] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[90] = rsTmp.getString("PR_PO_NO");
//                    rowData[91] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[92] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[93] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[94] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[95] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[96] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[97] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[98] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[99] = rsTmp.getString("PR_DELINK");
//                    rowData[100] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[101] = rsTmp.getString("BALE_REOPEN_FLG");
//                    rowData[102] = rsTmp.getString("PR_SALES_RETURNS_NO");
//                    rowData[103] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SALES_RETURNS_DATE"));
//                    rowData[104] = rsTmp.getString("PR_SALES_RETURNS_REMARKS");
//                    rowData[105] = rsTmp.getString("PR_SALES_RETURNS_FLG");
//                    rowData[106] = rsTmp.getString("PR_INWARD_NO");
//                    rowData[107] = rsTmp.getString("PR_RACK_NO");
//                    rowData[108] = rsTmp.getString("PR_LOCATION");
//                    rowData[109] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_HOLD_DATE"));
//                    rowData[110] = rsTmp.getString("PR_HOLD_REASON");
//                    rowData[111] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RELEASE_DATE"));
//                    rowData[112] = rsTmp.getString("PR_DAYS_STATUS");
                    DecimalFormat dfDiv = new DecimalFormat("###.##");
                    txtTotalWeight_DIV.setText(dfDiv.format(total_weight));
                    txtTotalAmount_DIV.setText(dfDiv.format(total_amount));

                    DataModelDiverted.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMachine() {
        DataModelMachine = new EITLTableModel();
        TableMachine.removeAll();
        TableMachine.setModel(DataModelMachine);

        TableMachine.setAutoResizeMode(TableMachine.AUTO_RESIZE_OFF);

        DataModelMachine.addColumn("Sr No");
        DataModelMachine.addColumn("Group Name");
        DataModelMachine.addColumn("Party Code");
        DataModelMachine.addColumn("Party Name");
        DataModelMachine.addColumn("Incharge");
        DataModelMachine.addColumn("City");
        DataModelMachine.addColumn("Machine No");
        DataModelMachine.addColumn("Position No");
        DataModelMachine.addColumn("Position Desc");
        DataModelMachine.addColumn("Position No Design");
        DataModelMachine.addColumn("UPN");
        DataModelMachine.addColumn("Product Code");
        DataModelMachine.addColumn("Product Group");
        DataModelMachine.addColumn("Felt Length");
        DataModelMachine.addColumn("Fabric Length");
        DataModelMachine.addColumn("Felt Width");
        DataModelMachine.addColumn("Fabric Width");
        DataModelMachine.addColumn("Felt GSM");
        DataModelMachine.addColumn("Felt Weight");
        DataModelMachine.addColumn("Felt Style");
        DataModelMachine.addColumn("Felt Type");
        DataModelMachine.addColumn("Base GSM");
        DataModelMachine.addColumn("Web GSM");
        DataModelMachine.addColumn("Total GSM");
        DataModelMachine.addColumn("Dinesh Share");
        DataModelMachine.addColumn("Avg Life");
        DataModelMachine.addColumn("Avg Production");
        DataModelMachine.addColumn("Felt Consuption");
        DataModelMachine.addColumn("Average Potential");
        DataModelMachine.addColumn("Category");
        DataModelMachine.addColumn("UC Code");
        DataModelMachine.addColumn("Position Close Ind");
        DataModelMachine.addColumn("Machine Type Forming");
        DataModelMachine.addColumn("Paper Grade");
        DataModelMachine.addColumn("Machine Speed Range");
        DataModelMachine.addColumn("Paper GSM Range");
        DataModelMachine.addColumn("Machine Type Pressing");
        DataModelMachine.addColumn("Furnish");
        DataModelMachine.addColumn("Type of Filler");
        DataModelMachine.addColumn("Paper Deckle  after Wire");
        DataModelMachine.addColumn("Paper Deckle after Press");
        DataModelMachine.addColumn("Paper Deckle at Pope Reel");
        DataModelMachine.addColumn("Dryer Section");
        DataModelMachine.addColumn("Wire Detail 1");
        DataModelMachine.addColumn("Wire Detail 2");
        DataModelMachine.addColumn("Wire Detail 3");
        DataModelMachine.addColumn("Wire Detail 4");
        DataModelMachine.addColumn("Installed Capacity (TPD)");
        DataModelMachine.addColumn("Machine Status");
        DataModelMachine.addColumn("Zone Representative");
        DataModelMachine.addColumn("Update Date");
        DataModelMachine.addColumn("Total Dryer Group");
        DataModelMachine.addColumn("Unirum Group");
        DataModelMachine.addColumn("Conventional Group");
        DataModelMachine.addColumn("Hood Type");
        DataModelMachine.addColumn("Size Press");
        DataModelMachine.addColumn("Size Press Position");
        DataModelMachine.addColumn("Sheet Dryness Size Press");
        DataModelMachine.addColumn("Driver Type");
        DataModelMachine.addColumn("Machine Make");
        DataModelMachine.addColumn("Machine Close");
        DataModelMachine.addColumn("Press Type");
        DataModelMachine.addColumn("Press Roll  dai MM");
        DataModelMachine.addColumn("Press Roll Face total MM");
        DataModelMachine.addColumn("Press Roll Face net MM");
        DataModelMachine.addColumn("Press Roll for 1st nip face length");
        DataModelMachine.addColumn("Press Roll for 2nd nip face length");
        DataModelMachine.addColumn("Press Roll for 3rd nip face length");
        DataModelMachine.addColumn("Press Roll for 4th nip face length");
        DataModelMachine.addColumn("Press Load");
        DataModelMachine.addColumn("Felt Roll Width MM");
        DataModelMachine.addColumn("Vaccum Capacity");
        DataModelMachine.addColumn("UHLE Box");
        DataModelMachine.addColumn("HP Shower");
        DataModelMachine.addColumn("LP Shower");
        DataModelMachine.addColumn("Design Remark");
        DataModelMachine.addColumn("General Remark");
        DataModelMachine.addColumn("No Dryer Cylinder");
        DataModelMachine.addColumn("Cylinder Dia MM");
        DataModelMachine.addColumn("Cylinder Face net MM");
        DataModelMachine.addColumn("Drive Type");
        DataModelMachine.addColumn("Guide Type");
        DataModelMachine.addColumn("Guide PAM Type");
        DataModelMachine.addColumn("Ventilation Type");
        DataModelMachine.addColumn("Size M2");
        DataModelMachine.addColumn("Screen Type");
        DataModelMachine.addColumn("Dry Style");
        DataModelMachine.addColumn("Dry CFM");
        DataModelMachine.addColumn("Dry Avg Life");
        DataModelMachine.addColumn("Dry Consumption");
        DataModelMachine.addColumn("Dry Dinesh share");
        DataModelMachine.addColumn("Dry Remark");
        DataModelMachine.addColumn("Felt life");
        DataModelMachine.addColumn("Capacity Utilization (TPD)");
        DataModelMachine.addColumn("Total Production");
        DataModelMachine.addColumn("Paper felt");
        DataModelMachine.addColumn("Position wise");
        DataModelMachine.addColumn("P no temp");
        DataModelMachine.addColumn("M no temp");
        DataModelMachine.addColumn("Vaccum in UHLE box");
        DataModelMachine.addColumn("Washing chemicals");
        DataModelMachine.addColumn("Hardness");
        DataModelMachine.addColumn("Machine floor");
        DataModelMachine.addColumn("Type of forming fabric");
        DataModelMachine.addColumn("Wash roll shower");
        DataModelMachine.addColumn("HP shower nozzles");
        DataModelMachine.addColumn("UHLE box vaccum");
        DataModelMachine.addColumn("Chemical shower");
        DataModelMachine.addColumn("1st linear nip pressure");
        DataModelMachine.addColumn("2nd linear nip pressure");
        DataModelMachine.addColumn("3rd linear nip pressure");
        DataModelMachine.addColumn("4th linear nip pressure");
        DataModelMachine.addColumn("Loading System");
        DataModelMachine.addColumn("LP Shower nozzles");
        DataModelMachine.addColumn("1st Roll Material");
        DataModelMachine.addColumn("2nd Roll Material");
        DataModelMachine.addColumn("3rd Roll Material");
        DataModelMachine.addColumn("4th Roll Material");
        DataModelMachine.addColumn("5th Roll Material");
        DataModelMachine.addColumn("6th Roll Material");
        DataModelMachine.addColumn("7th Roll Material");
        DataModelMachine.addColumn("8th Roll Material");
        DataModelMachine.addColumn("Batt GSM");
        DataModelMachine.addColumn("Fibers used");
        DataModelMachine.addColumn("Stretch");
        DataModelMachine.addColumn("MG");
        DataModelMachine.addColumn("Yankee");
        DataModelMachine.addColumn("MG Yankee nip load");
        DataModelMachine.addColumn("No of Forming Fabric");
        DataModelMachine.addColumn("Value with GST");
        DataModelMachine.addColumn("Value w/o GST");
        DataModelMachine.addColumn("Base Value");

        DataModelMachine.TableReadOnly(true);
        TableMachine.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    //Machine 
    private void GenerateMachine() {
        String cndtn = "";
        String cndtn1 = "";
        try {
            FormatGridMachine(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String Machineno = txtMachineNo.getText().toString();
            String Position = txtPosition.getText().toString();
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND D.MM_PARTY_CODE= '" + PartyCode + "'";
            }
            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (D.MM_ITEM_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR D.MM_ITEM_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND D.MM_MACHINE_NO= '" + Machineno + "' ";
            }
            if (!txtPosition.getText().equals("")) {
                cndtn += " AND D.MM_MACHINE_POSITION= '" + Position + "' ";
            }
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND D.MM_FELT_LENGTH+D.MM_FABRIC_LENGTH >= '" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND D.MM_FELT_LENGTH+D.MM_FABRIC_LENGTH <= '" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND D.MM_FELT_WIDTH+D.MM_FABRIC_WIDTH >= '" + Widthfrom + "' ";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND D.MM_FELT_WIDTH+D.MM_FABRIC_WIDTH <= '" + Widthto + "' ";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND D.MM_FELT_GSM >= '" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += " AND D.MM_FELT_GSM <= '" + GSMto + "' ";
            }
            if (!txtupnno.getText().equals("")) {
                cndtn += " AND D.MM_UPN_NO = '" + txtupnno.getText().trim() + "' ";
            }
            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn1 += " AND PM_INCHARGE_CD = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn1 += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            int machineType = cmbMachineType.getSelectedIndex();
            if (machineType == 0) {
                cndtn += " AND COALESCE(D.POSITION_CLOSE_IND,'0')!=1 ";
            }
            if (machineType == 1) {
                cndtn += " AND COALESCE(D.POSITION_CLOSE_IND,'0')=1 ";
            }
            
            if (chkKeyClientInd.isSelected()){
                cndtn1 += " KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
            //strSQL = "SELECT MM_DOC_NO,MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 " + cndtn + ")  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ";
//            strSQL = "SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,INCHARGE_NAME,CITY_ID,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,MM_UPN_NO,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,D.MM_DRIVE_TYPE MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,D.MM_UPN_NO FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 " + cndtn + ")  AS MM LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,CITY_ID,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE LEFT JOIN (SELECT INCHARGE_NAME,INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE) AS RJ ON RJ.INCHARGE_CD = PM.INCHARGE_CD ";
//            SELECT H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_POSITION_DESIGN_NO,MM_UPN_NO,MM_ITEM_CODE,MM_GRUP,MM_FELT_LENGTH,MM_FABRIC_LENGTH,MM_FELT_WIDTH,MM_FABRIC_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_STYLE,MM_FELT_TYPE,MM_BASE_GSM,MM_WEB_GSM,MM_TOTAL_GSM,MM_DINESH_SHARE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_AVERAGE_POTENTIAL,MM_CATEGORY,UC_CODE,POSITION_CLOSE_IND,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS
//            ,H.MM_DRIVE_TYPE AS MM_DRIVE_TYPE_H,MM_MACHINE_MAKE,MACHINE_CLOSE_IND,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH,MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH,MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH,MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH,MM_PRESS_LOAD,MM_FELT_ROLL_WIDTH_MM,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM
//            ,D.MM_DRIVE_TYPE AS MM_DRIVE_TYPE_D,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_FELT_LIFE,MM_TPD,MM_TOTAL_PRODUCTION,MM_PAPER_FELT,MM_POSITION_WISE,MM_P_NO_TEMP,MM_M_NO_TEMP,MM_VACCUM_IN_UHLE_BOX,MM_FELT_WASHING_CHEMICALS,MM_HARDNESS,MM_MACHINE_FLOOR,MM_TYPE_OF_FORMING_FABRIC,MM_WASH_ROLL_SHOWER,MM_HP_SHOWER_NOZZLES,MM_UHLE_BOX_VACUUM,MM_CHEMICAL_SHOWER,MM_1ST_LINEAR_NIP_PRESSURE,MM_2ND_LINEAR_NIP_PRESSURE,MM_3RD_LINEAR_NIP_PRESSURE,MM_4TH_LINEAR_NIP_PRESSURE,MM_LOADING_SYSTEM,MM_LP_SHOWER_NOZZLES,MM_1ST_ROLL_MATERIAL,MM_2ND_ROLL_MATERIAL,MM_3RD_ROLL_MATERIAL,MM_4TH_ROLL_MATERIAL,MM_5TH_ROLL_MATERIAL,MM_6TH_ROLL_MATERIAL,MM_7TH_ROLL_MATERIAL,MM_8TH_ROLL_MATERIAL,MM_BATT_GSM,MM_FIBERS_USED,MM_STRETCH,MM_MG,MM_YANKEE,MM_MG_YANKEE_NIP_LOAD,MM_NUMBER_OF_FORMING_FABRIC,MM_FELT_VALUE_WITH_GST,MM_FELT_VALUE_WITHOUT_GST
//            ,MM_FELT_BASE_VALUE FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H, PRODUCTION
//            .FELT_MACHINE_MASTER_DETAIL D
//            WHERE D
//            .MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED = 0
            strSQL = "SELECT * FROM "
                    + "(SELECT H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_POSITION_DESIGN_NO,MM_UPN_NO,MM_ITEM_CODE,MM_GRUP,MM_FELT_LENGTH,MM_FABRIC_LENGTH,MM_FELT_WIDTH,MM_FABRIC_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_STYLE,MM_FELT_TYPE,MM_BASE_GSM,MM_WEB_GSM,MM_TOTAL_GSM,MM_DINESH_SHARE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_AVERAGE_POTENTIAL,MM_CATEGORY,UC_CODE,POSITION_CLOSE_IND,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,H.MM_DRIVE_TYPE  AS MM_DRIVE_TYPE_H,MM_MACHINE_MAKE,MACHINE_CLOSE_IND,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH,MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH,MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH,MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH,MM_PRESS_LOAD,MM_FELT_ROLL_WIDTH_MM,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,D.MM_DRIVE_TYPE AS MM_DRIVE_TYPE_D,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_FELT_LIFE,MM_TPD,MM_TOTAL_PRODUCTION,MM_PAPER_FELT,MM_POSITION_WISE,MM_P_NO_TEMP,MM_M_NO_TEMP,MM_VACCUM_IN_UHLE_BOX,MM_FELT_WASHING_CHEMICALS,MM_HARDNESS,MM_MACHINE_FLOOR,MM_TYPE_OF_FORMING_FABRIC,MM_WASH_ROLL_SHOWER,MM_HP_SHOWER_NOZZLES,MM_UHLE_BOX_VACUUM,MM_CHEMICAL_SHOWER,MM_1ST_LINEAR_NIP_PRESSURE,MM_2ND_LINEAR_NIP_PRESSURE,MM_3RD_LINEAR_NIP_PRESSURE,MM_4TH_LINEAR_NIP_PRESSURE,MM_LOADING_SYSTEM,MM_LP_SHOWER_NOZZLES,MM_1ST_ROLL_MATERIAL,MM_2ND_ROLL_MATERIAL,MM_3RD_ROLL_MATERIAL,MM_4TH_ROLL_MATERIAL,MM_5TH_ROLL_MATERIAL,MM_6TH_ROLL_MATERIAL,MM_7TH_ROLL_MATERIAL,MM_8TH_ROLL_MATERIAL,MM_BATT_GSM,MM_FIBERS_USED,MM_STRETCH,MM_MG,MM_YANKEE,MM_MG_YANKEE_NIP_LOAD,MM_NUMBER_OF_FORMING_FABRIC,MM_FELT_VALUE_WITH_GST,MM_FELT_VALUE_WITHOUT_GST,MM_FELT_BASE_VALUE "
                    + "FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER H,PRODUCTION.FELT_MACHINE_MASTER_DETAIL D "
                    + "WHERE D.MM_DOC_NO = H.MM_DOC_NO AND APPROVED = 1 AND CANCELED =0 "
                    + cndtn + " "
                    + ") AS MM "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,INCHARGE_CD AS PM_INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON MM.MM_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON MM.MM_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON IM.INCHARGE_CD = PM.PM_INCHARGE_CD "
                    + " WHERE 1=1 " + cndtn1 + " ";

            int Orderby = cmbMachine.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                strSQL += " ORDER BY MM_PARTY_CODE,MM_MACHINE_NO ";
            }
            if (Orderby == 2) {
                strSQL += " ORDER BY MM_PARTY_CODE,MM_MACHINE_POSITION ";
            }

            cmbMachineModel = new EITLComboModel();
            cmbMachine.removeAllItems();
            cmbMachine.setModel(cmbMachineModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "MACHINE NO";
            cmbMachineModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "MACHINE POSITION NO";
            cmbMachineModel.addElement(aData);

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtMachineTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[150];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("GROUP_DESC");
                    rowData[2] = rsTmp.getString("MM_PARTY_CODE");
                    rowData[3] = rsTmp.getString("PARTY_NAME");
                    rowData[4] = rsTmp.getString("INCHARGE_NAME");
                    rowData[5] = rsTmp.getString("MM_STATION");
                    rowData[6] = rsTmp.getString("MM_MACHINE_NO");
                    rowData[7] = rsTmp.getString("MM_MACHINE_POSITION");
                    rowData[8] = rsTmp.getString("MM_MACHINE_POSITION_DESC");
                    rowData[9] = rsTmp.getString("MM_POSITION_DESIGN_NO");
                    rowData[10] = rsTmp.getString("MM_UPN_NO");
                    rowData[11] = rsTmp.getString("MM_ITEM_CODE");
                    rowData[12] = rsTmp.getString("MM_GRUP");
                    rowData[13] = rsTmp.getString("MM_FELT_LENGTH");
                    rowData[14] = rsTmp.getString("MM_FABRIC_LENGTH");
                    rowData[15] = rsTmp.getString("MM_FELT_WIDTH");
                    rowData[16] = rsTmp.getString("MM_FABRIC_WIDTH");
                    rowData[17] = rsTmp.getString("MM_FELT_GSM");
                    rowData[18] = rsTmp.getString("MM_FELT_WEIGHT");
                    rowData[19] = rsTmp.getString("MM_FELT_STYLE");
                    rowData[20] = rsTmp.getString("MM_FELT_TYPE");
                    rowData[21] = rsTmp.getString("MM_BASE_GSM");
                    rowData[22] = rsTmp.getString("MM_WEB_GSM");
                    rowData[23] = rsTmp.getString("MM_TOTAL_GSM");
                    rowData[24] = rsTmp.getString("MM_DINESH_SHARE");
                    rowData[25] = rsTmp.getString("MM_AVG_LIFE");
                    rowData[26] = rsTmp.getString("MM_AVG_PRODUCTION");
                    rowData[27] = rsTmp.getString("MM_FELT_CONSUMPTION");
                    rowData[28] = rsTmp.getString("MM_AVERAGE_POTENTIAL");
                    rowData[29] = rsTmp.getString("MM_CATEGORY");
                    rowData[30] = rsTmp.getString("UC_CODE");
                    rowData[31] = rsTmp.getString("POSITION_CLOSE_IND");
                    rowData[32] = rsTmp.getString("MM_MACHINE_TYPE_FORMING");
                    rowData[33] = rsTmp.getString("MM_PAPER_GRADE");
                    rowData[34] = rsTmp.getString("MM_MACHINE_SPEED_RANGE");
                    rowData[35] = rsTmp.getString("MM_PAPER_GSM_RANGE");
                    rowData[36] = rsTmp.getString("MM_MACHINE_TYPE_PRESSING");
                    rowData[37] = rsTmp.getString("MM_FURNISH");
                    rowData[38] = rsTmp.getString("MM_TYPE_OF_FILLER");
                    rowData[39] = rsTmp.getString("MM_PAPER_DECKLE_AFTER_WIRE");
                    rowData[40] = rsTmp.getString("MM_PAPER_DECKLE_AFTER_PRESS");
                    rowData[41] = rsTmp.getString("MM_PAPER_DECKLE_AT_POPE_REEL");
                    rowData[42] = rsTmp.getString("MM_DRYER_SECTION");
                    rowData[43] = rsTmp.getString("MM_WIRE_DETAIL_1");
                    rowData[44] = rsTmp.getString("MM_WIRE_DETAIL_2");
                    rowData[45] = rsTmp.getString("MM_WIRE_DETAIL_3");
                    rowData[46] = rsTmp.getString("MM_WIRE_DETAIL_4");
                    rowData[47] = rsTmp.getString("MM_CAPACITY");
                    rowData[48] = rsTmp.getString("MM_MACHINE_STATUS");
                    rowData[49] = rsTmp.getString("MM_ZONE_REPRESENTATIVE");
                    rowData[50] = rsTmp.getString("MM_DATE_OF_UPDATE");
                    rowData[51] = rsTmp.getString("MM_TOTAL_DRYER_GROUP");
                    rowData[52] = rsTmp.getString("MM_UNIRUM_GROUP");
                    rowData[53] = rsTmp.getString("MM_CONVENTIONAL_GROUP");
                    rowData[54] = rsTmp.getString("MM_HOOD_TYPE");
                    rowData[55] = rsTmp.getString("MM_SIZE_PRESS");
                    rowData[56] = rsTmp.getString("MM_SIZE_PRESS_POSITION");
                    rowData[57] = rsTmp.getString("MM_SHEET_DRYNESS_SIZE_PRESS");
                    rowData[58] = rsTmp.getString("MM_DRIVE_TYPE_H");
                    rowData[59] = rsTmp.getString("MM_MACHINE_MAKE");
                    rowData[60] = rsTmp.getString("MACHINE_CLOSE_IND");
                    rowData[61] = rsTmp.getString("MM_PRESS_TYPE");
                    rowData[62] = rsTmp.getString("MM_PRESS_ROLL_DAI_MM");
                    rowData[63] = rsTmp.getString("MM_PRESS_ROLL_FACE_TOTAL_MM");
                    rowData[64] = rsTmp.getString("MM_PRESS_ROLL_FACE_NET_MM");
                    rowData[65] = rsTmp.getString("MM_PRESS_ROLL_FOR_1ST_NIP_FACE_LENGTH");
                    rowData[66] = rsTmp.getString("MM_PRESS_ROLL_FOR_2ND_NIP_FACE_LENGTH");
                    rowData[67] = rsTmp.getString("MM_PRESS_ROLL_FOR_3RD_NIP_FACE_LENGTH");
                    rowData[68] = rsTmp.getString("MM_PRESS_ROLL_FOR_4TH_NIP_FACE_LENGTH");
                    rowData[69] = rsTmp.getString("MM_PRESS_LOAD");
                    rowData[70] = rsTmp.getString("MM_FELT_ROLL_WIDTH_MM");
                    rowData[71] = rsTmp.getString("MM_VACCUM_CAPACITY");
                    rowData[72] = rsTmp.getString("MM_UHLE_BOX");
                    rowData[73] = rsTmp.getString("MM_HP_SHOWER");
                    rowData[74] = rsTmp.getString("MM_LP_SHOWER");
                    rowData[75] = rsTmp.getString("MM_REMARK_DESIGN");
                    rowData[76] = rsTmp.getString("MM_REMARK_GENERAL");
                    rowData[77] = rsTmp.getString("MM_NO_DRYER_CYLINDER");
                    rowData[78] = rsTmp.getString("MM_CYLINDER_DIA_MM");
                    rowData[79] = rsTmp.getString("MM_CYLINDER_FACE_NET_MM");
                    rowData[80] = rsTmp.getString("MM_DRIVE_TYPE_D");
                    rowData[81] = rsTmp.getString("MM_GUIDE_TYPE");
                    rowData[82] = rsTmp.getString("MM_GUIDE_PAM_TYPE");
                    rowData[83] = rsTmp.getString("MM_VENTILATION_TYPE");
                    rowData[84] = rsTmp.getString("MM_SIZE_M2");
                    rowData[85] = rsTmp.getString("MM_SCREEN_TYPE");
                    rowData[86] = rsTmp.getString("MM_STYLE_DRY");
                    rowData[87] = rsTmp.getString("MM_CFM_DRY");
                    rowData[88] = rsTmp.getString("MM_AVG_LIFE_DRY");
                    rowData[89] = rsTmp.getString("MM_CONSUMPTION_DRY");
                    rowData[90] = rsTmp.getString("MM_DINESH_SHARE_DRY");
                    rowData[91] = rsTmp.getString("MM_REMARK_DRY");
                    rowData[92] = rsTmp.getString("MM_FELT_LIFE");
                    rowData[93] = rsTmp.getString("MM_TPD");
                    rowData[94] = rsTmp.getString("MM_TOTAL_PRODUCTION");
                    rowData[95] = rsTmp.getString("MM_PAPER_FELT");
                    rowData[96] = rsTmp.getString("MM_POSITION_WISE");
                    rowData[97] = rsTmp.getString("MM_P_NO_TEMP");
                    rowData[98] = rsTmp.getString("MM_M_NO_TEMP");
                    rowData[99] = rsTmp.getString("MM_VACCUM_IN_UHLE_BOX");
                    rowData[100] = rsTmp.getString("MM_FELT_WASHING_CHEMICALS");
                    rowData[101] = rsTmp.getString("MM_HARDNESS");
                    rowData[102] = rsTmp.getString("MM_MACHINE_FLOOR");
                    rowData[103] = rsTmp.getString("MM_TYPE_OF_FORMING_FABRIC");
                    rowData[104] = rsTmp.getString("MM_WASH_ROLL_SHOWER");
                    rowData[105] = rsTmp.getString("MM_HP_SHOWER_NOZZLES");
                    rowData[106] = rsTmp.getString("MM_UHLE_BOX_VACUUM");
                    rowData[107] = rsTmp.getString("MM_CHEMICAL_SHOWER");
                    rowData[108] = rsTmp.getString("MM_1ST_LINEAR_NIP_PRESSURE");
                    rowData[109] = rsTmp.getString("MM_2ND_LINEAR_NIP_PRESSURE");
                    rowData[110] = rsTmp.getString("MM_3RD_LINEAR_NIP_PRESSURE");
                    rowData[111] = rsTmp.getString("MM_4TH_LINEAR_NIP_PRESSURE");
                    rowData[112] = rsTmp.getString("MM_LOADING_SYSTEM");
                    rowData[113] = rsTmp.getString("MM_LP_SHOWER_NOZZLES");
                    rowData[114] = rsTmp.getString("MM_1ST_ROLL_MATERIAL");
                    rowData[115] = rsTmp.getString("MM_2ND_ROLL_MATERIAL");
                    rowData[116] = rsTmp.getString("MM_3RD_ROLL_MATERIAL");
                    rowData[117] = rsTmp.getString("MM_4TH_ROLL_MATERIAL");
                    rowData[118] = rsTmp.getString("MM_5TH_ROLL_MATERIAL");
                    rowData[119] = rsTmp.getString("MM_6TH_ROLL_MATERIAL");
                    rowData[120] = rsTmp.getString("MM_7TH_ROLL_MATERIAL");
                    rowData[121] = rsTmp.getString("MM_8TH_ROLL_MATERIAL");
                    rowData[122] = rsTmp.getString("MM_BATT_GSM");
                    rowData[123] = rsTmp.getString("MM_FIBERS_USED");
                    rowData[124] = rsTmp.getString("MM_STRETCH");
                    rowData[125] = rsTmp.getString("MM_MG");
                    rowData[126] = rsTmp.getString("MM_YANKEE");
                    rowData[127] = rsTmp.getString("MM_MG_YANKEE_NIP_LOAD");
                    rowData[128] = rsTmp.getString("MM_NUMBER_OF_FORMING_FABRIC");
                    rowData[129] = rsTmp.getString("MM_FELT_VALUE_WITH_GST");
                    rowData[130] = rsTmp.getString("MM_FELT_VALUE_WITHOUT_GST");
                    rowData[131] = rsTmp.getString("MM_FELT_BASE_VALUE");

                    DataModelMachine.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridOrderRegister() {
        DataModelOrderRegister = new EITLTableModel();
        Table_Order_Register.removeAll();
        Table_Order_Register.setModel(DataModelOrderRegister);

        Table_Order_Register.setAutoResizeMode(Table_INVOICED.AUTO_RESIZE_OFF);

        DataModelOrderRegister.addColumn("Sr No");
        DataModelOrderRegister.addColumn("Piece No");
        DataModelOrderRegister.addColumn("Order No");
        DataModelOrderRegister.addColumn("Order Date");
        DataModelOrderRegister.addColumn("Group Name");
        DataModelOrderRegister.addColumn("Party Code");
        DataModelOrderRegister.addColumn("Party Name");
        DataModelOrderRegister.addColumn("Machine No");
        DataModelOrderRegister.addColumn("Position No");
        DataModelOrderRegister.addColumn("Position Desc");
        DataModelOrderRegister.addColumn("Position No(Design)");
        DataModelOrderRegister.addColumn("UPN");
        DataModelOrderRegister.addColumn("DM Revision No");
        DataModelOrderRegister.addColumn("Product Code");
        DataModelOrderRegister.addColumn("Product Group");
        DataModelOrderRegister.addColumn("Length");
        DataModelOrderRegister.addColumn("Width");
        DataModelOrderRegister.addColumn("GSM");
        DataModelOrderRegister.addColumn("Sq.Mtr");
        DataModelOrderRegister.addColumn("Thortical Weight");
        DataModelOrderRegister.addColumn("Style");
        DataModelOrderRegister.addColumn("Syn(%)");
        DataModelOrderRegister.addColumn("Req.Month");
        DataModelOrderRegister.addColumn("Req.Month");
//        DataModelOrderRegister.addColumn("OC MONTH");
//        DataModelOrderRegister.addColumn("CURR SCH MONTH");
        DataModelOrderRegister.addColumn("Incharge");

        DataModelOrderRegister.TableReadOnly(true);
        Table_Order_Register.getColumnModel().getColumn(0).setMaxWidth(50);

        for (int i = 1; i <= 24; i++) {
            Table_Order_Register.getColumnModel().getColumn(i).setMinWidth(80);
        }

    }

    private void FormatGridOrder() {
        DataModelOrder = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModelOrder);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModelOrder.addColumn("Sr No");
        DataModelOrder.addColumn("Status");
        DataModelOrder.addColumn("User Name");
        DataModelOrder.addColumn("Order No");
        DataModelOrder.addColumn("Order Date");
        DataModelOrder.addColumn("Piece No");
        DataModelOrder.addColumn("Group Name");
        DataModelOrder.addColumn("Party Code");
        DataModelOrder.addColumn("Party Name");
        DataModelOrder.addColumn("Machine No");
        DataModelOrder.addColumn("Position No");
        DataModelOrder.addColumn("Position No(Design)");
        DataModelOrder.addColumn("Position Desc");
        DataModelOrder.addColumn("UPN");
        DataModelOrder.addColumn("Product Code");
        DataModelOrder.addColumn("Product Group");
        DataModelOrder.addColumn("Length");
        DataModelOrder.addColumn("Bill Length");
        DataModelOrder.addColumn("Width");
        DataModelOrder.addColumn("Bill Width");
        DataModelOrder.addColumn("GSM");
        DataModelOrder.addColumn("Bill GSM");
        DataModelOrder.addColumn("Sq.Mtr");
        DataModelOrder.addColumn("Bill Sq.Mtr");
        DataModelOrder.addColumn("Thortical Weight");
        DataModelOrder.addColumn("Bill Weight");
        DataModelOrder.addColumn("Style");
        DataModelOrder.addColumn("Bill Style");
        DataModelOrder.addColumn("Reference");
        DataModelOrder.addColumn("Reference Date");
        DataModelOrder.addColumn("PO No");
        DataModelOrder.addColumn("PO Date");
        DataModelOrder.addColumn("Req.Month");
        DataModelOrder.addColumn("Syn(%)");
        DataModelOrder.addColumn("Rate");
        //+ "'' AS \"Surcharge Per\",'' AS \"Surcharge Rate\",'' AS \"Gross Rate\","
        DataModelOrder.addColumn("Surcharge Per");
        DataModelOrder.addColumn("Surcharge Rate");
        DataModelOrder.addColumn("Gross Rate");

        DataModelOrder.addColumn("Base Amount");
        DataModelOrder.addColumn("Chem Trt Chg");
        DataModelOrder.addColumn("Spiral Chg");
        DataModelOrder.addColumn("Pin Chg");
        DataModelOrder.addColumn("Seam Chg");
        DataModelOrder.addColumn("Ins Ind");
        DataModelOrder.addColumn("Ins Amount");
        DataModelOrder.addColumn("Disc Per");
        DataModelOrder.addColumn("Disc Amount");
        DataModelOrder.addColumn("Disc Bas Amount");
        DataModelOrder.addColumn("Amount");
        DataModelOrder.addColumn("CGST Per");
        DataModelOrder.addColumn("CGST Amount");
        DataModelOrder.addColumn("SGST Per");
        DataModelOrder.addColumn("SGSR Amount");
        DataModelOrder.addColumn("IGST Per");
        DataModelOrder.addColumn("IGST Amount");
        DataModelOrder.addColumn("Incharge");

        DataModelOrder.TableReadOnly(true);
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateOrder() {
        String cndtn = " ";
        String cndtn1 = " ";
        try {
            FormatGridOrder(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            String ItemCode = txtproductcode.getText().toString();
            String Pieceno = txtpieceno.getText().toString();
            String Machineno = txtMachineNo.getText().toString();
            String Position = txtPosition.getText().toString();
            String Orderdtfrom = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText().trim());
            String Orderdtto = EITLERPGLOBAL.formatDateDB(txtdateto.getText().trim());
            String Lengthfrom = txtlengthfrom.getText().toString();
            String Lengthto = txtlengthto.getText().toString();
            String Widthfrom = txtwidthfrom.getText().toString();
            String Widthto = txtwidthto.getText().toString();
            String GSMfrom = txtgsmfrom.getText().toString();
            String GSMto = txtgsmto.getText().toString();

            ResultSet rsTmp;

            if (!txtpartycode.getText().equals("")) {
                cndtn += " AND A.PARTY_CODE= '" + PartyCode + "'";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (B.PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR B.PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (B.PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR B.PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }
            if (!txtMachineNo.getText().equals("")) {
                cndtn += " AND B.MACHINE_NO='" + Machineno + "' ";
            }
            if (!txtPosition.getText().equals("")) {
                cndtn += " AND B.POSITION IN  (" + Position + ") ";
            }
            if (!txtdatefrom.getText().equals("")) {
                cndtn += " AND A.S_ORDER_DATE>='" + Orderdtfrom + "' ";
            }
            if (!txtdateto.getText().equals("")) {
                cndtn += " AND A.S_ORDER_DATE<='" + Orderdtto + "' ";
            }
            if (!txtlengthfrom.getText().equals("")) {
                cndtn += " AND B.LENGTH >= '" + Lengthfrom + "' ";
            }
            if (!txtlengthto.getText().equals("")) {
                cndtn += " AND B.LENGTH <= '" + Lengthto + "' ";
            }
            if (!txtwidthfrom.getText().equals("")) {
                cndtn += " AND B.WIDTH >= '" + Widthfrom + "' ";
            }
            if (!txtwidthto.getText().equals("")) {
                cndtn += " AND B.WIDTH <= '" + Widthto + "' ";
            }
            if (!txtgsmfrom.getText().equals("")) {
                cndtn += " AND B.GSM >= '" + GSMfrom + "' ";
            }
            if (!txtgsmto.getText().equals("")) {
                cndtn += " AND B.GSM <= '" + GSMto + "' ";
            }

            if (!txtupnno.getText().equals("")) {
                cndtn += " AND B.UPN = '" + txtupnno.getText().trim() + "' ";
            }

//            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
//
//                cndtn += " AND SALES_ENGINEER = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
//
//            }
            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn1 += " AND PM_INCHARGE_CD = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn1 += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }
            if (chkKeyClientInd.isSelected()){
                cndtn1 += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            //strSQL="SELECT MM_DOC_NO,MM_PARTY_CODE,PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP,NOW() FROM (SELECT H.MM_DOC_NO,H.MM_PARTY_CODE,MM_PARTY_NAME,MM_INCHARGE_NAME,MM_STATION,H.MM_MACHINE_NO,MM_MACHINE_TYPE_FORMING,MM_PAPER_GRADE,MM_MACHINE_SPEED_RANGE,MM_PAPER_GSM_RANGE,MM_MACHINE_TYPE_PRESSING,MM_FURNISH,MM_TYPE_OF_FILLER,MM_WIRE_DETAIL_1,MM_WIRE_DETAIL_2,MM_WIRE_DETAIL_3,MM_WIRE_DETAIL_4,MM_PAPER_DECKLE_AFTER_WIRE,MM_PAPER_DECKLE_AFTER_PRESS,MM_PAPER_DECKLE_AT_POPE_REEL,MM_DRYER_SECTION,MM_ZONE,MM_CAPACITY,MM_MACHINE_STATUS,MM_ZONE_REPRESENTATIVE,MM_DATE_OF_UPDATE,MM_TOTAL_DRYER_GROUP,MM_UNIRUM_GROUP,MM_CONVENTIONAL_GROUP,MM_HOOD_TYPE,MM_SIZE_PRESS,MM_SIZE_PRESS_POSITION,MM_SHEET_DRYNESS_SIZE_PRESS,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_COMBINATION_CODE,MM_PRESS_TYPE,MM_PRESS_ROLL_DAI_MM,MM_PRESS_ROLL_FACE_TOTAL_MM,MM_PRESS_ROLL_FACE_NET_MM,MM_FELT_ROLL_WIDTH_MM,MM_PRESS_LOAD,MM_VACCUM_CAPACITY,MM_UHLE_BOX,MM_HP_SHOWER,MM_LP_SHOWER,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM,MM_FELT_WEIGHT,MM_FELT_TYPE,MM_FELT_STYLE,MM_AVG_LIFE,MM_AVG_PRODUCTION,MM_FELT_CONSUMPTION,MM_DINESH_SHARE,MM_REMARK_DESIGN,MM_REMARK_GENERAL,MM_NO_DRYER_CYLINDER,MM_CYLINDER_DIA_MM,MM_CYLINDER_FACE_NET_MM,MM_DRIVE_TYPE,MM_GUIDE_TYPE,MM_GUIDE_PAM_TYPE,MM_VENTILATION_TYPE,MM_FABRIC_LENGTH,MM_FABRIC_WIDTH,MM_SIZE_M2,MM_SCREEN_TYPE,MM_STYLE_DRY,MM_CFM_DRY,MM_AVG_LIFE_DRY,MM_CONSUMPTION_DRY,MM_DINESH_SHARE_DRY,MM_REMARK_DRY,MM_ITEM_CODE,MM_GRUP FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL D  ,PRODUCTION.FELT_MACHINE_MASTER_HEADER H WHERE D.MM_DOC_NO = H.MM_DOC_NO  AND APPROVED = 1 AND CANCELED =0 AND D.MM_PARTY_CODE=811026 AND D.MM_ITEM_CODE LIKE '%')  AS MM LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM ON PM.PARTY_CODE = MM.MM_PARTY_CODE ORDER BY MM.MM_PARTY_CODE,MM.MM_DOC_NO,MM_MACHINE_POSITION LIMIT 1000000000";
//            strSQL = "SELECT C.STATUS,D.USER_NAME,A.S_ORDER_NO,A.S_ORDER_DATE,B.PIECE_NO,A.SALES_ENGINEER,A.PARTY_CODE,A.PARTY_NAME,A.REFERENCE,A.REFERENCE_DATE,A.P_O_NO,A.P_O_DATE,B.MACHINE_NO,B.POSITION,B.POSITION_DESC,B.PIECE_NO,B.PRODUCT_CODE,B.PRODUCT_DESC,B.S_GROUP,B.LENGTH,B.WIDTH,B.GSM,B.THORITICAL_WIDTH,B.SQ_MTR,B.STYLE,B.REQ_MONTH,B.SYN_PER,B.STYLE,B.REMARK,B.OV_RATE,B.OV_BAS_AMOUNT,B.OV_CHEM_TRT_CHG,B.OV_SPIRAL_CHG,B.OV_PIN_CHG,B.OV_SEAM_CHG,B.OV_INS_IND,B.OV_INS_AMT,B.OV_EXCISE,B.OV_DISC_PER,B.OV_DISC_AMT,B.OV_DISC_BASAMT,B.OV_AMT,B.S_ORDER_DETAIL_CODE,B.CGST_PER,B.CGST_AMT,B.SGST_PER,B.SGST_AMT,B.IGST_PER,B.IGST_AMT,B.COMPOSITION_PER,B.COMPOSITION_AMT,B.RCM_PER,B.RCM_AMT,B.GST_COMPENSATION_CESS_PER,B.GST_COMPENSATION_CESS_AMT,B.PR_BILL_LENGTH,B.PR_BILL_WIDTH,B.PR_BILL_WEIGHT,B.PR_BILL_SQMTR,B.PR_BILL_GSM,PR_BILL_PRODUCT_CODE,B.UPN FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B,PRODUCTION.FELT_PROD_DOC_DATA C,DINESHMILLS.D_COM_USER_MASTER D WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.APPROVED=0 AND CANCELED=0 AND A.S_ORDER_NO=C.DOC_NO AND C.STATUS='W' AND C.USER_ID=D.USER_ID" + cndtn + "";
            strSQL = "SELECT * FROM  "
                    + "(SELECT C.STATUS,D.USER_NAME,A.S_ORDER_NO,A.S_ORDER_DATE,B.PIECE_NO,A.PARTY_CODE,B.MACHINE_NO,B.POSITION, "
                    + "B.UPN,B.PRODUCT_CODE,B.PRODUCT_DESC,B.S_GROUP,B.LENGTH,B.WIDTH,B.GSM,B.THORITICAL_WIDTH,B.SQ_MTR,B.PR_BILL_LENGTH,B.PR_BILL_WIDTH, "
                    + "B.PR_BILL_WEIGHT,B.PR_BILL_SQMTR,B.PR_BILL_GSM,B.STYLE,B.PR_BILL_STYLE, "
                    + "A.REFERENCE,A.REFERENCE_DATE,A.P_O_NO,A.P_O_DATE,B.REQ_MONTH,B.SYN_PER, "
                    + "B.OV_RATE,B.SURCHARGE_PER,B.SURCHARGE_RATE,B.GROSS_RATE,B.OV_BAS_AMOUNT,B.OV_CHEM_TRT_CHG, "
                    + "B.OV_SPIRAL_CHG,B.OV_PIN_CHG,B.OV_SEAM_CHG,B.OV_INS_IND,B.OV_INS_AMT,B.OV_DISC_PER, "
                    + "B.OV_DISC_AMT,B.OV_DISC_BASAMT,B.OV_AMT,B.CGST_PER,B.CGST_AMT,B.SGST_PER, "
                    + "B.SGST_AMT,B.IGST_PER,B.IGST_AMT "
                    + "FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B, "
                    + "PRODUCTION.FELT_PROD_DOC_DATA C,DINESHMILLS.D_COM_USER_MASTER D  "
                    + "WHERE A.S_ORDER_NO=B.S_ORDER_NO AND A.APPROVED=0 AND CANCELED=0  "
                    + "AND A.S_ORDER_NO=C.DOC_NO AND C.STATUS='W' AND C.USER_ID=D.USER_ID "
                    + cndtn + " ) AS ORD "
                    + "LEFT JOIN   "
                    + "(SELECT PARTY_CODE AS PM_PARTY_CODE,PARTY_NAME,INCHARGE_CD AS PM_INCHARGE_CD,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER   "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM   "
                    + "ON ORD.PARTY_CODE=PM.PM_PARTY_CODE   "
                    + "LEFT JOIN   "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE   "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D   "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE   "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM   "
                    + "ON ORD.PARTY_CODE=GM.GROUP_PARTY_CODE  "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM   "
                    + "ON IM.INCHARGE_CD = PM.PM_INCHARGE_CD "
                    + "LEFT JOIN   "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP   "
                    + "ON ORD.POSITION=MP.POSITION_NO "
                    + " WHERE 1=1 " + cndtn1 + " ";

            int Orderby = cmbOrder.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 2) {

                strSQL += " ORDER BY PIECE_NO ";
            }
            if (Orderby == 3) {

                strSQL += " ORDER BY PRODUCT_CODE ";
            }
            if (Orderby == 4) {

                strSQL += " ORDER BY POSITION ";
            }
            if (Orderby == 5) {

                strSQL += " ORDER BY MACHINE_NO ";
            }
            if (Orderby == 6) {

                strSQL += " ORDER BY S_ORDER_DATE ";
            }

            cmbOrderModel = new EITLComboModel();
            cmbOrder.removeAllItems();
            cmbOrder.setModel(cmbOrderModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbOrderModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "PIECE NO";
            cmbOrderModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "PRODUCT CODE ";
            cmbOrderModel.addElement(aData);

            aData.Code = 4;
            aData.Text = "POSITION NO ";
            cmbOrderModel.addElement(aData);

            aData.Code = 5;
            aData.Text = "MACHINE NO";
            cmbOrderModel.addElement(aData);

            aData.Code = 6;
            aData.Text = "ORDER DATE";
            cmbOrderModel.addElement(aData);

//            int Orderby = EITLERPGLOBAL.getComboCode(cmbDiscount);
//            if (Orderby == 1) {
//           //strSQL+=" ORDER BY MACHINE_NO ";
//                strSQL += " ORDER BY A.PARTY_CODE ";
//            }
//            if (Orderby == 2) {
//                //strSQL+=" ORDER BY POSITION ";
//                strSQL += " ORDER BY B.PRODUCT_CODE ";
//            }
//            int Orderby = cmbSalesParty.getSelectedIndex();
//            Orderby++;
//            if (Orderby == 1) {
//           
//                strSQL += " ORDER BY PARTY_CODE ";
//            }
//             
//                
////        cmbO = new EITLComboModel();
//        cmbSalesParty.removeAllItems();
//        cmbSalesParty.setModel(cmbSalesPartyModel);
//        ComboData aData = new ComboData();
//
//        aData.Code = 1;
//        aData.Text = "PARTY CODE";
//        cmbSalesPartyModel.addElement(aData);
            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                //      double kgsum = 0.00;
                //      double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
//                    System.out.println(cnt);
                    //txtSalesPartyTotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[100];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("STATUS");
                    rowData[2] = rsTmp.getString("USER_NAME");
                    rowData[3] = rsTmp.getString("S_ORDER_NO");
                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("S_ORDER_DATE"));
                    rowData[5] = rsTmp.getString("PIECE_NO");
                    rowData[6] = rsTmp.getString("GROUP_DESC");
                    rowData[7] = rsTmp.getString("PARTY_CODE");
                    rowData[8] = rsTmp.getString("PARTY_NAME");
                    rowData[9] = rsTmp.getString("MACHINE_NO");
                    rowData[10] = rsTmp.getString("POSITION");
                    rowData[11] = rsTmp.getString("POSITION_DESIGN_NO");
                    rowData[12] = rsTmp.getString("POSITION_DESC");
                    rowData[13] = rsTmp.getString("UPN");
                    rowData[14] = rsTmp.getString("PRODUCT_CODE");
                    rowData[15] = rsTmp.getString("S_GROUP");
                    rowData[16] = rsTmp.getString("LENGTH");
                    rowData[17] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[18] = rsTmp.getString("WIDTH");
                    rowData[19] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[20] = rsTmp.getString("GSM");
                    rowData[21] = rsTmp.getString("PR_BILL_GSM");
                    rowData[22] = EITLERPGLOBAL.round(rsTmp.getDouble("SQ_MTR"), 2);
                    rowData[23] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[24] = EITLERPGLOBAL.round(rsTmp.getDouble("THORITICAL_WIDTH"), 2);
                    rowData[25] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[26] = rsTmp.getString("STYLE");
                    rowData[27] = rsTmp.getString("PR_BILL_STYLE");
                    rowData[28] = rsTmp.getString("REFERENCE");
                    rowData[29] = EITLERPGLOBAL.formatDate(rsTmp.getString("REFERENCE_DATE"));
                    rowData[30] = rsTmp.getString("P_O_NO");
                    rowData[31] = EITLERPGLOBAL.formatDate(rsTmp.getString("P_O_DATE"));
                    rowData[32] = rsTmp.getString("REQ_MONTH");
                    rowData[33] = rsTmp.getString("SYN_PER");
                    rowData[34] = rsTmp.getString("OV_RATE");

                    rowData[35] = rsTmp.getString("SURCHARGE_PER");
                    rowData[36] = rsTmp.getString("SURCHARGE_RATE");
                    rowData[37] = rsTmp.getString("GROSS_RATE");

                    rowData[38] = rsTmp.getString("OV_BAS_AMOUNT");
                    rowData[39] = rsTmp.getString("OV_CHEM_TRT_CHG");
                    rowData[40] = rsTmp.getString("OV_SPIRAL_CHG");
                    rowData[41] = rsTmp.getString("OV_PIN_CHG");
                    rowData[42] = rsTmp.getString("OV_SEAM_CHG");
                    rowData[43] = rsTmp.getString("OV_INS_IND");
                    rowData[44] = rsTmp.getString("OV_INS_AMT");
                    rowData[45] = rsTmp.getString("OV_DISC_PER");
                    rowData[46] = rsTmp.getString("OV_DISC_AMT");
                    rowData[47] = rsTmp.getString("OV_DISC_BASAMT");
                    rowData[48] = rsTmp.getString("OV_AMT");
                    rowData[49] = rsTmp.getString("CGST_PER");
                    rowData[50] = rsTmp.getString("CGST_AMT");
                    rowData[51] = rsTmp.getString("SGST_PER");
                    rowData[52] = rsTmp.getString("SGST_AMT");
                    rowData[53] = rsTmp.getString("IGST_PER");
                    rowData[54] = rsTmp.getString("IGST_AMT");
                    rowData[55] = rsTmp.getString("INCHARGE_NAME");

                    DataModelOrder.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridEXP_Invoice() {
        DataModelEXP_Invoice = new EITLTableModel();
        Table_EXP_INVOICE.removeAll();
        Table_EXP_INVOICE.setModel(DataModelEXP_Invoice);

        Table_EXP_INVOICE.setAutoResizeMode(Table_EXP_INVOICE.AUTO_RESIZE_OFF);

        DataModelEXP_Invoice.addColumn("Sr No");
        DataModelEXP_Invoice.addColumn("Piece Stage");
        DataModelEXP_Invoice.addColumn("WIP Status");
        DataModelEXP_Invoice.addColumn("Invoice No");
        DataModelEXP_Invoice.addColumn("Invoice Date");
        DataModelEXP_Invoice.addColumn("Invoice Amt");
        DataModelEXP_Invoice.addColumn("Group Name");
        DataModelEXP_Invoice.addColumn("Party Code");
        DataModelEXP_Invoice.addColumn("Party Name");
        DataModelEXP_Invoice.addColumn("Piece No");
        DataModelEXP_Invoice.addColumn("Machine No");
        DataModelEXP_Invoice.addColumn("Position No");
        DataModelEXP_Invoice.addColumn("Position No(Design)");
        DataModelEXP_Invoice.addColumn("Position Desc");
        DataModelEXP_Invoice.addColumn("UPN");
        DataModelEXP_Invoice.addColumn("Bale No");
        DataModelEXP_Invoice.addColumn("Bale Date");
        DataModelEXP_Invoice.addColumn("Order No");
        DataModelEXP_Invoice.addColumn("Order Date");
        DataModelEXP_Invoice.addColumn("Product Code");
        DataModelEXP_Invoice.addColumn("Bill Product Code");
        DataModelEXP_Invoice.addColumn("Product Desc");
        DataModelEXP_Invoice.addColumn("Group");
        DataModelEXP_Invoice.addColumn("Style");
        DataModelEXP_Invoice.addColumn("Bill Style");
        DataModelEXP_Invoice.addColumn("Length");
        DataModelEXP_Invoice.addColumn("Bill Length");
        DataModelEXP_Invoice.addColumn("Actual Length");
        DataModelEXP_Invoice.addColumn("Width");
        DataModelEXP_Invoice.addColumn("Bill Width");
        DataModelEXP_Invoice.addColumn("Actual Width");
        DataModelEXP_Invoice.addColumn("GSM");
        DataModelEXP_Invoice.addColumn("Tender GSM");
        DataModelEXP_Invoice.addColumn("Bill GSM");
        DataModelEXP_Invoice.addColumn("Sq.Mtr");
        DataModelEXP_Invoice.addColumn("Bill Sq.Mtr");
        DataModelEXP_Invoice.addColumn("Thortical Weight");
        DataModelEXP_Invoice.addColumn("Tender Weight");
        DataModelEXP_Invoice.addColumn("Bill Weight");
        DataModelEXP_Invoice.addColumn("Actual Weight");
        DataModelEXP_Invoice.addColumn("SYN(%)");
        DataModelEXP_Invoice.addColumn("Req Month");
        DataModelEXP_Invoice.addColumn("OC MONTH");
        DataModelEXP_Invoice.addColumn("CURR SCH MONTH");
        DataModelEXP_Invoice.addColumn("WARP DATE");
        DataModelEXP_Invoice.addColumn("ORD VS WARP DAYS");
        DataModelEXP_Invoice.addColumn("WVG DATE");
        DataModelEXP_Invoice.addColumn("DAYS ORDER_WVG");
        DataModelEXP_Invoice.addColumn("WVG LAYER_REMARK");
        DataModelEXP_Invoice.addColumn("WVG WEIGHT");
        DataModelEXP_Invoice.addColumn("WVG WEIGHT_A");
        DataModelEXP_Invoice.addColumn("WVG WEIGHT_B");
        DataModelEXP_Invoice.addColumn("SPLICE DATE");
        DataModelEXP_Invoice.addColumn("MND DATE");
        DataModelEXP_Invoice.addColumn("DAYS ORDER_MND");
        DataModelEXP_Invoice.addColumn("MND LAYER_REMARK");
        DataModelEXP_Invoice.addColumn("MND WEIGHT");
        DataModelEXP_Invoice.addColumn("MND WEIGHT_A");
        DataModelEXP_Invoice.addColumn("MND WEIGHT_B");
        DataModelEXP_Invoice.addColumn("NDL DATE");
        DataModelEXP_Invoice.addColumn("DAYS ORDER_NDL");
        DataModelEXP_Invoice.addColumn("NDL WEIGHT");
        DataModelEXP_Invoice.addColumn("SEAM DATE");
        DataModelEXP_Invoice.addColumn("FNSG DATE");
        DataModelEXP_Invoice.addColumn("DAYS ORDER_FNSG");
        DataModelEXP_Invoice.addColumn("DAYS WRP_WVG");
        DataModelEXP_Invoice.addColumn("DAYS WVG_MND");
        DataModelEXP_Invoice.addColumn("DAYS MND_NDL");
        DataModelEXP_Invoice.addColumn("DAYS NDL_FNSG");
        DataModelEXP_Invoice.addColumn("DAYS WH_STOCK");
//        DataModelEXP_Invoice.addColumn("Rate");
//        DataModelEXP_Invoice.addColumn("Basic Amt");
//        DataModelEXP_Invoice.addColumn("CHEM TRT CHG");
//        DataModelEXP_Invoice.addColumn("SPIRAL CHG");
//        DataModelEXP_Invoice.addColumn("Pin CHG");
//        DataModelEXP_Invoice.addColumn("Seam CHG");
//        DataModelEXP_Invoice.addColumn("INS Ind");
//        DataModelEXP_Invoice.addColumn("INS Amt");
//        DataModelEXP_Invoice.addColumn("GST");
//        DataModelEXP_Invoice.addColumn("Disc Per");
//        DataModelEXP_Invoice.addColumn("Disc Amt");
//        DataModelEXP_Invoice.addColumn("Disc Bas Amt");
//        DataModelEXP_Invoice.addColumn("Amount");        
        DataModelEXP_Invoice.addColumn("Referance");
        DataModelEXP_Invoice.addColumn("REF Date");
        DataModelEXP_Invoice.addColumn("PO No");
        DataModelEXP_Invoice.addColumn("PO Date");
        DataModelEXP_Invoice.addColumn("OA No");
        DataModelEXP_Invoice.addColumn("OA Date");
        DataModelEXP_Invoice.addColumn("OC No");
        DataModelEXP_Invoice.addColumn("OC Date");
        DataModelEXP_Invoice.addColumn("Order Remark");
        DataModelEXP_Invoice.addColumn("Piece Remark");
        DataModelEXP_Invoice.addColumn("Rejected");
        DataModelEXP_Invoice.addColumn("Rejected Remark");
        DataModelEXP_Invoice.addColumn("Diversion");
        DataModelEXP_Invoice.addColumn("Diversion Reason");
        DataModelEXP_Invoice.addColumn("PartyCode Original");
        DataModelEXP_Invoice.addColumn("PieceNo Original");
        DataModelEXP_Invoice.addColumn("Incharge");
        DataModelEXP_Invoice.addColumn("Obsolete Status");
        DataModelEXP_Invoice.addColumn("Obsolete Date");
        DataModelEXP_Invoice.addColumn("Obsolete Reason");
        DataModelEXP_Invoice.addColumn("Packing Doc No");
        DataModelEXP_Invoice.addColumn("Packing Doc Date");

        DataModelEXP_Invoice.TableReadOnly(true);
        Table_EXP_INVOICE.getColumnModel().getColumn(0).setMaxWidth(50);

//        Table_EXP_INVOICE.getColumnModel().getColumn(3).setMinWidth(0);
//        Table_EXP_INVOICE.getColumnModel().getColumn(4).setMinWidth(0);
//        Table_EXP_INVOICE.getColumnModel().getColumn(5).setMinWidth(0);
//        
//        Table_EXP_INVOICE.getColumnModel().getColumn(3).setMaxWidth(0);
//        Table_EXP_INVOICE.getColumnModel().getColumn(4).setMaxWidth(0);
//        Table_EXP_INVOICE.getColumnModel().getColumn(5).setMaxWidth(0);
    }

    private void GenerateEXP_Invoice() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridEXP_Invoice(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    //cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' AND PR_FNSG_DATE <= '" + ToDate + "' ";
                    cndtn += " AND PR_INVOICE_DATE >= '" + FromDate + "' AND PR_INVOICE_DATE <= '" + ToDate + "' "; //CHANGED ON 13/03/2019 BY ASHUTOSH
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    //cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' ";
                    cndtn += " AND PR_INVOICE_DATE >= '" + FromDate + "' ";  //CHANGED ON 13/03/2019 BY ASHUTOSH
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    //cndtn += " AND PR_FNSG_DATE <= '" + ToDate + "' ";
                    cndtn += " AND PR_INVOICE_DATE <= '" + ToDate + "' ";    //CHANGED ON 13/03/2019 BY ASHUTOSH
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if(chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('EXP-INVOICE') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_AMOUNT");
                    p++;
                    total_amount = total_amount + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_INVOICE_AMOUNT", "0"));
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("PR_INVOICE_NO");
//                    rowData[4] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
//                    rowData[5] = rsTmp.getString("PR_INVOICE_AMOUNT");
//
//                    total_amount = total_amount + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_INVOICE_AMOUNT", "0"));
//
//                    rowData[6] = rsTmp.getString("GROUP_DESC");
//                    rowData[7] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[8] = rsTmp.getString("PARTY_NAME");
//                    rowData[9] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[10] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[11] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[12] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[13] = rsTmp.getString("POSITION_DESC");
//                    rowData[14] = rsTmp.getString("PR_UPN");
//                    rowData[15] = rsTmp.getString("PR_BALE_NO");
//                    rowData[16] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
//                    rowData[17] = rsTmp.getString("PR_DOC_NO");
//                    rowData[18] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[19] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[20] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[21] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[22] = rsTmp.getString("PR_GROUP");
//                    rowData[23] = rsTmp.getString("PR_STYLE");
//                    rowData[24] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[25] = rsTmp.getString("PR_LENGTH");
//                    rowData[26] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[27] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[28] = rsTmp.getString("PR_WIDTH");
//                    rowData[29] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[30] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[31] = rsTmp.getString("PR_GSM");
//                    rowData[32] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[33] = rsTmp.getString("PR_SQMTR");
//                    rowData[34] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[35] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//                    rowData[36] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[37] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
//
//                    rowData[38] = rsTmp.getString("PR_SYN_PER");
//                    rowData[39] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[40] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[41] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[42] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[43] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[44] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[45] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[46] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[47] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[48] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[49] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[50] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[51] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[52] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[53] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[54] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[55] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[56] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[57] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[58] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[59] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[60] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[61] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[62] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[63] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[64] = rsTmp.getString("PR_DAYS_NDL_FNG");
//                    rowData[65] = rsTmp.getString("PR_DAYS_WH_STOCK");
//
//                    rowData[66] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[67] = rsTmp.getString("PR_REFERENCE");
//                    rowData[68] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[69] = rsTmp.getString("PR_PO_NO");
//                    rowData[70] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[71] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[72] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[73] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[74] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[75] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[76] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[77] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[78] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[79] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[80] = rsTmp.getString("PR_DELINK");
//                    rowData[81] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[82] = rsTmp.getString("PR_PKG_DP_NO");
//                    rowData[83] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_THORITICAL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_SQMTR")),
//                                rsTmp.getString("PR_ORDER_DATE"));
//
//                        rowData[65] = inv_calc.getFicRate();
//                        rowData[66] = inv_calc.getFicBasAmount();
//                        rowData[67] = inv_calc.getFicChemTrtChg();
//                        rowData[68] = inv_calc.getFicSpiralChg();
//                        rowData[69] = inv_calc.getFicPinChg();
//                        rowData[70] = inv_calc.getFicSeamChg();
//                        rowData[71] = inv_calc.getFicInsInd();
//                        rowData[72] = inv_calc.getFicInsAmt();
//                        rowData[73] = inv_calc.getFicGST();
//                        rowData[74] = inv_calc.getFicDiscPer();
//                        rowData[75] = inv_calc.getFicDiscAmt();
//                        rowData[76] = inv_calc.getFicDiscBasamt();
//                        rowData[77] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//                    rowData[78] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[79] = rsTmp.getString("PR_REFERENCE");
//                    rowData[80] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[81] = rsTmp.getString("PR_PO_NO");
//                    rowData[82] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[83] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[84] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[85] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[86] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[87] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[88] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[89] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[90] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[91] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[92] = rsTmp.getString("PR_DELINK");
//                    rowData[93] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[94] = rsTmp.getString("PR_PKG_DP_NO");
//                    rowData[95] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_Exp_Inv.setText(df.format(total_weight));
                    txtTotalAmount_Exp_Inv.setText(df.format(total_amount));

                    DataModelEXP_Invoice.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridCancelledPiece() {
        DataModelCancelledPiece = new EITLTableModel();
        Table_CANCELLED.removeAll();
        Table_CANCELLED.setModel(DataModelCancelledPiece);

        Table_CANCELLED.setAutoResizeMode(Table_CANCELLED.AUTO_RESIZE_OFF);

        DataModelCancelledPiece.addColumn("Sr No");
        DataModelCancelledPiece.addColumn("Piece Stage");
        DataModelCancelledPiece.addColumn("WIP Status");
        DataModelCancelledPiece.addColumn("Group Name");
        DataModelCancelledPiece.addColumn("Party Code");
        DataModelCancelledPiece.addColumn("Party Name");
        DataModelCancelledPiece.addColumn("Piece No");
        DataModelCancelledPiece.addColumn("Machine No");
        DataModelCancelledPiece.addColumn("Position No");
        DataModelCancelledPiece.addColumn("Position No(Design)");
        DataModelCancelledPiece.addColumn("Position Desc");
        DataModelCancelledPiece.addColumn("UPN");
        DataModelCancelledPiece.addColumn("Order No");
        DataModelCancelledPiece.addColumn("Order Date");
        DataModelCancelledPiece.addColumn("Product Code");
        DataModelCancelledPiece.addColumn("Bill Product Code");
        DataModelCancelledPiece.addColumn("Product Desc");
        DataModelCancelledPiece.addColumn("Group");
        DataModelCancelledPiece.addColumn("Style");
        DataModelCancelledPiece.addColumn("Bill Style");
        DataModelCancelledPiece.addColumn("Length");
        DataModelCancelledPiece.addColumn("Bill Length");
        DataModelCancelledPiece.addColumn("Actual Length");
        DataModelCancelledPiece.addColumn("Width");
        DataModelCancelledPiece.addColumn("Bill Width");
        DataModelCancelledPiece.addColumn("Actual Width");
        DataModelCancelledPiece.addColumn("GSM");
        DataModelCancelledPiece.addColumn("Tender GSM");
        DataModelCancelledPiece.addColumn("Bill GSM");
        DataModelCancelledPiece.addColumn("Sq.Mtr");
        DataModelCancelledPiece.addColumn("Bill Sq.Mtr");
        DataModelCancelledPiece.addColumn("Thortical Weight");
        DataModelCancelledPiece.addColumn("Tender Weight");
        DataModelCancelledPiece.addColumn("Bill Weight");
        DataModelCancelledPiece.addColumn("Actual Weight");
        DataModelCancelledPiece.addColumn("SYN(%)");
        DataModelCancelledPiece.addColumn("Req Month");
        DataModelCancelledPiece.addColumn("OC MONTH");
        DataModelCancelledPiece.addColumn("CURR SCH MONTH");
        DataModelCancelledPiece.addColumn("Referance");
        DataModelCancelledPiece.addColumn("REF Date");
        DataModelCancelledPiece.addColumn("PO No");
        DataModelCancelledPiece.addColumn("PO Date");
        DataModelCancelledPiece.addColumn("Material Code");
        DataModelCancelledPiece.addColumn("OA No");
        DataModelCancelledPiece.addColumn("OA Date");
        DataModelCancelledPiece.addColumn("OC No");
        DataModelCancelledPiece.addColumn("OC Date");
        DataModelCancelledPiece.addColumn("Order Remark");
        DataModelCancelledPiece.addColumn("Piece Remark");
        DataModelCancelledPiece.addColumn("Incharge");

        DataModelCancelledPiece.TableReadOnly(true);
        Table_CANCELLED.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateCancelledPiece() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridCancelledPiece(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('9') "
                    + " AND PR_PIECE_STAGE IN ('CANCELED') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("GROUP_DESC");
//                    rowData[4] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[5] = rsTmp.getString("PARTY_NAME");
//                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[10] = rsTmp.getString("POSITION_DESC");
//                    rowData[11] = rsTmp.getString("PR_UPN");
//                    rowData[12] = rsTmp.getString("PR_DOC_NO");
//                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[14] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[15] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[16] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[17] = rsTmp.getString("PR_GROUP");
//                    rowData[18] = rsTmp.getString("PR_STYLE");
//                    rowData[19] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[20] = rsTmp.getString("PR_LENGTH");
//                    rowData[21] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[22] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[23] = rsTmp.getString("PR_WIDTH");
//                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[25] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[26] = rsTmp.getString("PR_GSM");
//                    rowData[27] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[28] = rsTmp.getString("PR_SQMTR");
//                    rowData[29] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[30] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//                    rowData[31] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[32] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
//
//                    rowData[33] = rsTmp.getString("PR_SYN_PER");
//                    rowData[34] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[35] = rsTmp.getString("PR_REFERENCE");
//                    rowData[36] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[37] = rsTmp.getString("PR_PO_NO");
//                    rowData[38] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[39] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[40] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[41] = rsTmp.getString("INCHARGE_NAME");
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_CAN.setText(df.format(total_weight));

                    DataModelCancelledPiece.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridHold() {
        DataModelHold = new EITLTableModel();
        Table_HOLD.removeAll();
        Table_HOLD.setModel(DataModelHold);

        Table_HOLD.setAutoResizeMode(Table_HOLD.AUTO_RESIZE_OFF);

        DataModelHold.addColumn("Sr No");
        DataModelHold.addColumn("Piece Stage");
        DataModelHold.addColumn("WIP Status");
        DataModelHold.addColumn("Group Name");
        DataModelHold.addColumn("Party Code");
        DataModelHold.addColumn("Party Name");
        DataModelHold.addColumn("Piece No");
        DataModelHold.addColumn("Machine No");
        DataModelHold.addColumn("Position No");
        DataModelHold.addColumn("Position No(Design)");
        DataModelHold.addColumn("Position Desc");
        DataModelHold.addColumn("UPN");
        DataModelHold.addColumn("Order No");
        DataModelHold.addColumn("Order Date");
        DataModelHold.addColumn("Product Code");
        DataModelHold.addColumn("Bill Product Code");
        DataModelHold.addColumn("Product Desc");
        DataModelHold.addColumn("Group");
        DataModelHold.addColumn("Style");
        DataModelHold.addColumn("Bill Style");
        DataModelHold.addColumn("Length");
        DataModelHold.addColumn("Bill Length");
        DataModelHold.addColumn("Actual Length");
        DataModelHold.addColumn("Width");
        DataModelHold.addColumn("Bill Width");
        DataModelHold.addColumn("Actual Width");
        DataModelHold.addColumn("GSM");
        DataModelHold.addColumn("Bill GSM");
        DataModelHold.addColumn("Sq.Mtr");
        DataModelHold.addColumn("Bill Sq.Mtr");
        DataModelHold.addColumn("Thortical Weight");
        DataModelHold.addColumn("Bill Weight");
        DataModelHold.addColumn("Actual Weight");
        DataModelHold.addColumn("SYN(%)");
        DataModelHold.addColumn("Req Month");
        DataModelHold.addColumn("WARP DATE");
        DataModelHold.addColumn("ORD VS WARP DAYS");
        DataModelHold.addColumn("WVG DATE");
        DataModelHold.addColumn("DAYS ORDER_WVG");
        DataModelHold.addColumn("WVG LAYER_REMARK");
        DataModelHold.addColumn("WVG WEIGHT");
        DataModelHold.addColumn("WVG WEIGHT_A");
        DataModelHold.addColumn("WVG WEIGHT_B");
        DataModelHold.addColumn("SPLICE DATE");
        DataModelHold.addColumn("MND DATE");
        DataModelHold.addColumn("DAYS ORDER_MND");
        DataModelHold.addColumn("MND LAYER_REMARK");
        DataModelHold.addColumn("MND WEIGHT");
        DataModelHold.addColumn("MND WEIGHT_A");
        DataModelHold.addColumn("MND WEIGHT_B");
        DataModelHold.addColumn("NDL DATE");
        DataModelHold.addColumn("DAYS ORDER_NDL");
        DataModelHold.addColumn("NDL WEIGHT");
        DataModelHold.addColumn("SEAM DATE");
        DataModelHold.addColumn("FNSG DATE");
        DataModelHold.addColumn("DAYS ORDER_FNSG");
        DataModelHold.addColumn("DAYS WRP_WVG");
        DataModelHold.addColumn("DAYS WVG_MND");
        DataModelHold.addColumn("DAYS MND_NDL");
        DataModelHold.addColumn("DAYS NDL_FNSG");
        DataModelHold.addColumn("DAYS WH_STOCK");
        DataModelHold.addColumn("Rate");
        DataModelHold.addColumn("Basic Amt");
        DataModelHold.addColumn("CHEM TRT CHG");
        DataModelHold.addColumn("SPIRAL CHG");
        DataModelHold.addColumn("Pin CHG");
        DataModelHold.addColumn("Seam CHG");
        DataModelHold.addColumn("INS Ind");
        DataModelHold.addColumn("INS Amt");
        DataModelHold.addColumn("GST");
        DataModelHold.addColumn("TCS Per");
        DataModelHold.addColumn("TCS Amt");
        DataModelHold.addColumn("Disc Per");
        DataModelHold.addColumn("Disc Amt");
        DataModelHold.addColumn("Disc Bas Amt");
        DataModelHold.addColumn("Amount");
        DataModelHold.addColumn("Schedule Month");
        DataModelHold.addColumn("Referance");
        DataModelHold.addColumn("REF Date");
        DataModelHold.addColumn("PO No");
        DataModelHold.addColumn("PO Date");
        DataModelHold.addColumn("Material Code");
        DataModelHold.addColumn("Order Remark");
        DataModelHold.addColumn("Piece Remark");
        DataModelHold.addColumn("Rejected");
        DataModelHold.addColumn("Rejected Remark");
        DataModelHold.addColumn("Diversion");
        DataModelHold.addColumn("Diversion Reason");
        DataModelHold.addColumn("PartyCode Original");
        DataModelHold.addColumn("PieceNo Original");
        DataModelHold.addColumn("Incharge");
        DataModelHold.addColumn("Obsolete Status");
        DataModelHold.addColumn("Obsolete Reason");

        DataModelHold.TableReadOnly(true);
        Table_HOLD.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateHold() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridHold(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('6','7','8','10','11','12') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
                    rowData[3] = rsTmp.getString("GROUP_DESC");
                    rowData[4] = rsTmp.getString("PR_PARTY_CODE");
                    rowData[5] = rsTmp.getString("PARTY_NAME");
                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
                    rowData[10] = rsTmp.getString("POSITION_DESC");
                    rowData[11] = rsTmp.getString("PR_UPN");
                    rowData[12] = rsTmp.getString("PR_DOC_NO");
                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[14] = rsTmp.getString("PR_PRODUCT_CODE");
                    rowData[15] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[16] = rsTmp.getString("PRODUCT_DESC");
                    rowData[17] = rsTmp.getString("PR_GROUP");
                    rowData[18] = rsTmp.getString("PR_STYLE");
                    rowData[19] = rsTmp.getString("PR_BILL_STYLE");
                    rowData[20] = rsTmp.getString("PR_LENGTH");
                    rowData[21] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[22] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[23] = rsTmp.getString("PR_WIDTH");
                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[25] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[26] = rsTmp.getString("PR_GSM");
                    rowData[27] = rsTmp.getString("PR_BILL_GSM");
                    rowData[28] = rsTmp.getString("PR_SQMTR");
                    rowData[29] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[30] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[31] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[32] = rsTmp.getString("PR_ACTUAL_WEIGHT");

                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));

                    rowData[33] = rsTmp.getString("PR_SYN_PER");
                    rowData[34] = rsTmp.getString("PR_REQUESTED_MONTH");
                    rowData[35] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    rowData[36] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    rowData[37] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    rowData[38] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    rowData[39] = rsTmp.getString("WVG_LAYER_REMARK");
                    rowData[40] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    rowData[41] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    rowData[42] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    rowData[43] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    rowData[44] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[45] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    rowData[46] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    rowData[47] = rsTmp.getString("PR_MENDING_WEIGHT");
                    rowData[48] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    rowData[49] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    rowData[50] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[51] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    rowData[52] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    rowData[53] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    rowData[54] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[55] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    rowData[56] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    rowData[57] = rsTmp.getString("PR_DAYS_WVG_MND");
                    rowData[58] = rsTmp.getString("PR_DAYS_MND_NDL");
                    rowData[59] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    rowData[60] = rsTmp.getString("PR_DAYS_WH_STOCK");

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        rowData[61] = inv_calc.getFicRate();
                        rowData[62] = inv_calc.getFicBasAmount();
                        rowData[63] = inv_calc.getFicChemTrtChg();
                        rowData[64] = inv_calc.getFicSpiralChg();
                        rowData[65] = inv_calc.getFicPinChg();
                        rowData[66] = inv_calc.getFicSeamChg();
                        rowData[67] = inv_calc.getFicInsInd();
                        rowData[68] = inv_calc.getFicInsAmt();
                        rowData[69] = inv_calc.getFicGST();
                        rowData[70] = inv_calc.getTCS_per();
                        rowData[71] = inv_calc.getTCS_amt();
                        rowData[72] = inv_calc.getFicDiscPer();
                        rowData[73] = inv_calc.getFicDiscAmt();
                        rowData[74] = inv_calc.getFicDiscBasamt();
                        rowData[75] = inv_calc.getFicInvAmt();

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[76] = rsTmp.getString("PR_SCHEDULE_MONTH");
                    rowData[77] = rsTmp.getString("PR_REFERENCE");
                    rowData[78] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    rowData[79] = rsTmp.getString("PR_PO_NO");
                    rowData[80] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[81] = rsTmp.getString("PR_MATERIAL_CODE");
                    rowData[82] = rsTmp.getString("PR_ORDER_REMARK");
                    rowData[83] = rsTmp.getString("PR_PIECE_REMARK");
                    rowData[84] = rsTmp.getString("PR_REJECTED_FLAG");
                    rowData[85] = rsTmp.getString("PR_REJECTED_REMARK");
                    rowData[86] = rsTmp.getString("PR_DIVERSION_FLAG");
                    rowData[87] = rsTmp.getString("PR_DIVERSION_REASON");
                    rowData[88] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    rowData[89] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    rowData[90] = rsTmp.getString("INCHARGE_NAME");
                    rowData[91] = rsTmp.getString("PR_DELINK");
                    rowData[92] = rsTmp.getString("PR_DELINK_REASON");

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_HOLD.setText(df.format(total_weight));
                    txtTotalAmount_HOLD.setText(df.format(total_amount));

                    DataModelHold.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridObsolete() {
        DataModelObsolete = new EITLTableModel();
        Table_Delink.removeAll();
        Table_Delink.setModel(DataModelObsolete);

        Table_Delink.setAutoResizeMode(Table_Delink.AUTO_RESIZE_OFF);

        DataModelObsolete.addColumn("Sr No");
        DataModelObsolete.addColumn("Obsolete Status");
        DataModelObsolete.addColumn("Obsolete Date");
        DataModelObsolete.addColumn("Obsolete Reason");
        DataModelObsolete.addColumn("Obsolete Source");
        DataModelObsolete.addColumn("Obsolete UPN Assign Status");
        DataModelObsolete.addColumn("UPN");
        DataModelObsolete.addColumn("Piece Stage");
        DataModelObsolete.addColumn("WIP Status");
        DataModelObsolete.addColumn("Group Name");
        DataModelObsolete.addColumn("Party Code");
        DataModelObsolete.addColumn("Party Name");
        DataModelObsolete.addColumn("Piece No");
        DataModelObsolete.addColumn("Machine No");
        DataModelObsolete.addColumn("Position No");
        DataModelObsolete.addColumn("Position No(Design)");
        DataModelObsolete.addColumn("Position Desc");
        DataModelObsolete.addColumn("Order No");
        DataModelObsolete.addColumn("Order Date");
        DataModelObsolete.addColumn("Product Code");
        DataModelObsolete.addColumn("Bill Product Code");
        DataModelObsolete.addColumn("Product Desc");
        DataModelObsolete.addColumn("Group");
        DataModelObsolete.addColumn("Style");
        DataModelObsolete.addColumn("Bill Style");
        DataModelObsolete.addColumn("Length");
        DataModelObsolete.addColumn("Bill Length");
        DataModelObsolete.addColumn("Actual Length");
        DataModelObsolete.addColumn("Width");
        DataModelObsolete.addColumn("Bill Width");
        DataModelObsolete.addColumn("Actual Width");
        DataModelObsolete.addColumn("GSM");
        DataModelObsolete.addColumn("Bill GSM");
        DataModelObsolete.addColumn("Sq.Mtr");
        DataModelObsolete.addColumn("Bill Sq.Mtr");
        DataModelObsolete.addColumn("Thortical Weight");
        DataModelObsolete.addColumn("Bill Weight");
        DataModelObsolete.addColumn("Actual Weight");
        DataModelObsolete.addColumn("SYN(%)");
        DataModelObsolete.addColumn("Req Month");
        DataModelObsolete.addColumn("WARP DATE");
        DataModelObsolete.addColumn("ORD VS WARP DAYS");
        DataModelObsolete.addColumn("WVG DATE");
        DataModelObsolete.addColumn("DAYS ORDER_WVG");
        DataModelObsolete.addColumn("WVG LAYER_REMARK");
        DataModelObsolete.addColumn("WVG WEIGHT");
        DataModelObsolete.addColumn("WVG WEIGHT_A");
        DataModelObsolete.addColumn("WVG WEIGHT_B");
        DataModelObsolete.addColumn("SPLICE DATE");
        DataModelObsolete.addColumn("MND DATE");
        DataModelObsolete.addColumn("DAYS ORDER_MND");
        DataModelObsolete.addColumn("MND LAYER_REMARK");
        DataModelObsolete.addColumn("MND WEIGHT");
        DataModelObsolete.addColumn("MND WEIGHT_A");
        DataModelObsolete.addColumn("MND WEIGHT_B");
        DataModelObsolete.addColumn("NDL DATE");
        DataModelObsolete.addColumn("DAYS ORDER_NDL");
        DataModelObsolete.addColumn("NDL WEIGHT");
        DataModelObsolete.addColumn("SEAM DATE");
        DataModelObsolete.addColumn("FNSG DATE");
        DataModelObsolete.addColumn("DAYS ORDER_FNSG");
        DataModelObsolete.addColumn("DAYS WRP_WVG");
        DataModelObsolete.addColumn("DAYS WVG_MND");
        DataModelObsolete.addColumn("DAYS MND_NDL");
        DataModelObsolete.addColumn("DAYS NDL_FNSG");
        DataModelObsolete.addColumn("DAYS WH_STOCK");
        DataModelObsolete.addColumn("Rate Indicator");
        DataModelObsolete.addColumn("Rate");

        DataModelObsolete.addColumn("Surcharge Per");
        DataModelObsolete.addColumn("Surcharge Rate");
        DataModelObsolete.addColumn("Gross Rate");

        DataModelObsolete.addColumn("Basic Amt");
        DataModelObsolete.addColumn("CHEM TRT CHG");
        DataModelObsolete.addColumn("SPIRAL CHG");
        DataModelObsolete.addColumn("Pin CHG");
        DataModelObsolete.addColumn("Seam CHG");
        DataModelObsolete.addColumn("INS Ind");
        DataModelObsolete.addColumn("INS Amt");
        DataModelObsolete.addColumn("GST");
        DataModelObsolete.addColumn("TCS Per");
        DataModelObsolete.addColumn("TCS Amt");
        DataModelObsolete.addColumn("Disc Per");
        DataModelObsolete.addColumn("Disc Amt");
        DataModelObsolete.addColumn("Disc Bas Amt");
        DataModelObsolete.addColumn("Amount");
        DataModelObsolete.addColumn("Schedule Month");
        DataModelObsolete.addColumn("Referance");
        DataModelObsolete.addColumn("REF Date");
        DataModelObsolete.addColumn("PO No");
        DataModelObsolete.addColumn("PO Date");
        DataModelObsolete.addColumn("Material Code");
        DataModelObsolete.addColumn("Order Remark");
        DataModelObsolete.addColumn("Piece Remark");
        DataModelObsolete.addColumn("Rejected");
        DataModelObsolete.addColumn("Rejected Remark");
        DataModelObsolete.addColumn("Diversion");
        DataModelObsolete.addColumn("Diversion Reason");
        DataModelObsolete.addColumn("PartyCode Original");
        DataModelObsolete.addColumn("PieceNo Original");
        DataModelObsolete.addColumn("Incharge");
        DataModelObsolete.addColumn("Adj.Length");
        DataModelObsolete.addColumn("Adj.Width");
        DataModelObsolete.addColumn("Adj.GSM");
        DataModelObsolete.addColumn("Adj.Weight");

        DataModelObsolete.TableReadOnly(true);
        Table_Delink.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateObsolete() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridObsolete(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            if (cmbProductionStageObsolete.getSelectedItem().equals("WIP")) {
                cndtn += " AND PR_PIECE_STAGE NOT IN ('IN STOCK','BSR') ";
            }

            if (cmbProductionStageObsolete.getSelectedItem().equals("IN STOCK")) {
                cndtn += " AND PR_PIECE_STAGE = 'IN STOCK' ";
            }

            if (cmbProductionStageObsolete.getSelectedItem().equals("BSR")) {
                cndtn += " AND PR_PIECE_STAGE = 'BSR' ";
            }
            
            if(chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    //                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "(SELECT *,CASE WHEN PR_PIECE_STAGE='IN STOCK' THEN CONCAT('Z',PR_PIECE_STAGE) ELSE CONCAT('A',PR_PIECE_STAGE) END AS STAGES FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    //                    + " AND PR_DELINK IN ('DELINK','OBSOLETE') "
                    + " AND PR_DELINK IN ('DELINK','OBSOLETE') AND PR_PIECE_STAGE NOT IN ('INVOICED','EXP-INVOICE','DIVERTED','DIVIDED','RETURN') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    //                    + grp_cndtn + " " + ORDER_BY;
                    + grp_cndtn + " ORDER BY STAGES,PR_PIECE_NO ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[200];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OBSOLETE_SOURCE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OBSOLETE_UPN_ASSIGN_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;

                    FeltInvCalc inv_calc;

                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }
                    rowData[p] = rsTmp.getString("PR_SCHEDULE_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getDouble("PR_ADJUSTABLE_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getDouble("PR_ADJUSTABLE_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getDouble("PR_ADJUSTABLE_GSM");
                    p++;
                    rowData[p] = rsTmp.getDouble("PR_ADJUSTABLE_WEIGHT");
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_DELINK");
//                    rowData[2] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[3] = rsTmp.getString("PR_UPN");
//                    rowData[4] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[5] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[6] = rsTmp.getString("GROUP_DESC");
//                    rowData[7] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[8] = rsTmp.getString("PARTY_NAME");
//                    rowData[9] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[10] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[11] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[12] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[13] = rsTmp.getString("POSITION_DESC");
//                    rowData[14] = rsTmp.getString("PR_DOC_NO");
//                    rowData[15] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[16] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[17] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[18] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[19] = rsTmp.getString("PR_GROUP");
//                    rowData[20] = rsTmp.getString("PR_STYLE");
//                    rowData[21] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[22] = rsTmp.getString("PR_LENGTH");
//                    rowData[23] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[24] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[25] = rsTmp.getString("PR_WIDTH");
//                    rowData[26] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[27] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[28] = rsTmp.getString("PR_GSM");
//                    rowData[29] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[30] = rsTmp.getString("PR_SQMTR");
//                    rowData[31] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[32] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//                    rowData[33] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[34] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//                    rowData[35] = rsTmp.getString("PR_SYN_PER");
//                    rowData[36] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[37] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[38] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[39] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[40] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[41] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[42] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[43] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[44] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[45] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[46] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[47] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[48] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[49] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[50] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[51] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[52] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[53] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[54] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[55] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[56] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[57] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[58] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[59] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[60] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[61] = rsTmp.getString("PR_DAYS_NDL_FNG");
//                    rowData[62] = rsTmp.getString("PR_DAYS_WH_STOCK");
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData[63] = inv_calc.getFicRate();
//                        rowData[64] = inv_calc.getFicBasAmount();
//                        rowData[65] = inv_calc.getFicChemTrtChg();
//                        rowData[66] = inv_calc.getFicSpiralChg();
//                        rowData[67] = inv_calc.getFicPinChg();
//                        rowData[68] = inv_calc.getFicSeamChg();
//                        rowData[69] = inv_calc.getFicInsInd();
//                        rowData[70] = inv_calc.getFicInsAmt();
//                        rowData[71] = inv_calc.getFicGST();
//                        rowData[72] = inv_calc.getFicDiscPer();
//                        rowData[73] = inv_calc.getFicDiscAmt();
//                        rowData[74] = inv_calc.getFicDiscBasamt();
//                        rowData[75] = inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[76] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[77] = rsTmp.getString("PR_REFERENCE");
//                    rowData[78] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[79] = rsTmp.getString("PR_PO_NO");
//                    rowData[80] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[81] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[82] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[83] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[84] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[85] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[86] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[87] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[88] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[89] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[90] = rsTmp.getDouble("PR_ADJUSTABLE_LENGTH");
//                    rowData[91] = rsTmp.getDouble("PR_ADJUSTABLE_WIDTH");
//                    rowData[92] = rsTmp.getDouble("PR_ADJUSTABLE_GSM");
//                    rowData[93] = rsTmp.getDouble("PR_ADJUSTABLE_WEIGHT");
                    DataModelObsolete.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridOSG_Stock() {
        DataModelOSGStock = new EITLTableModel();
        Table_OSGSTOCK.removeAll();
        Table_OSGSTOCK.setModel(DataModelOSGStock);

        Table_OSGSTOCK.setAutoResizeMode(Table_OSGSTOCK.AUTO_RESIZE_OFF);

        DataModelOSGStock.addColumn("Sr No");
        DataModelOSGStock.addColumn("Piece Stage");
        DataModelOSGStock.addColumn("WIP Status");
        DataModelOSGStock.addColumn("Group Name");
        DataModelOSGStock.addColumn("Party Code");
        DataModelOSGStock.addColumn("Party Name");
        DataModelOSGStock.addColumn("Piece No");
        DataModelOSGStock.addColumn("Machine No");
        DataModelOSGStock.addColumn("Position No");
        DataModelOSGStock.addColumn("Position No(Design)");
        DataModelOSGStock.addColumn("Position Desc");
        DataModelOSGStock.addColumn("UPN");
        DataModelOSGStock.addColumn("Order No");
        DataModelOSGStock.addColumn("Order Date");
        DataModelOSGStock.addColumn("Product Code");
        DataModelOSGStock.addColumn("Bill Product Code");
        DataModelOSGStock.addColumn("Product Desc");
        DataModelOSGStock.addColumn("Group");
        DataModelOSGStock.addColumn("Style");
        DataModelOSGStock.addColumn("Bill Style");
        DataModelOSGStock.addColumn("Length");
        DataModelOSGStock.addColumn("Bill Length");
        DataModelOSGStock.addColumn("Actual Length");
        DataModelOSGStock.addColumn("Width");
        DataModelOSGStock.addColumn("Bill Width");
        DataModelOSGStock.addColumn("Actual Width");
        DataModelOSGStock.addColumn("GSM");
        DataModelOSGStock.addColumn("Tender GSM");
        DataModelOSGStock.addColumn("Bill GSM");
        DataModelOSGStock.addColumn("Sq.Mtr");
        DataModelOSGStock.addColumn("Bill Sq.Mtr");
        DataModelOSGStock.addColumn("Thortical Weight");
        DataModelOSGStock.addColumn("Tender Weight");
        DataModelOSGStock.addColumn("Bill Weight");
        DataModelOSGStock.addColumn("Actual Weight");
        DataModelOSGStock.addColumn("SYN(%)");
        DataModelOSGStock.addColumn("Req Month");
        DataModelOSGStock.addColumn("OC MONTH");
        DataModelOSGStock.addColumn("CURR SCH MONTH");
        DataModelOSGStock.addColumn("WARP DATE");
        DataModelOSGStock.addColumn("ORD VS WARP DAYS");
        DataModelOSGStock.addColumn("WVG DATE");
        DataModelOSGStock.addColumn("DAYS ORDER_WVG");
        DataModelOSGStock.addColumn("WVG LAYER_REMARK");
        DataModelOSGStock.addColumn("WVG WEIGHT");
        DataModelOSGStock.addColumn("WVG WEIGHT_A");
        DataModelOSGStock.addColumn("WVG WEIGHT_B");
        DataModelOSGStock.addColumn("SPLICE DATE");
        DataModelOSGStock.addColumn("MND DATE");
        DataModelOSGStock.addColumn("DAYS ORDER_MND");
        DataModelOSGStock.addColumn("MND LAYER_REMARK");
        DataModelOSGStock.addColumn("MND WEIGHT");
        DataModelOSGStock.addColumn("MND WEIGHT_A");
        DataModelOSGStock.addColumn("MND WEIGHT_B");
        DataModelOSGStock.addColumn("NDL DATE");
        DataModelOSGStock.addColumn("DAYS ORDER_NDL");
        DataModelOSGStock.addColumn("NDL WEIGHT");
        DataModelOSGStock.addColumn("SEAM DATE");
        DataModelOSGStock.addColumn("FNSG DATE");
        DataModelOSGStock.addColumn("DAYS ORDER_FNSG");
        DataModelOSGStock.addColumn("DAYS WRP_WVG");
        DataModelOSGStock.addColumn("DAYS WVG_MND");
        DataModelOSGStock.addColumn("DAYS MND_NDL");
        DataModelOSGStock.addColumn("DAYS NDL_FNSG");
        DataModelOSGStock.addColumn("DAYS WH_STOCK");
        DataModelOSGStock.addColumn("Rate Indicator");
        DataModelOSGStock.addColumn("Rate");

        DataModelOSGStock.addColumn("Surcharge Per");
        DataModelOSGStock.addColumn("Surcharge Rate");
        DataModelOSGStock.addColumn("Gross Rate");

        DataModelOSGStock.addColumn("Basic Amt");
        DataModelOSGStock.addColumn("CHEM TRT CHG");
        DataModelOSGStock.addColumn("SPIRAL CHG");
        DataModelOSGStock.addColumn("Pin CHG");
        DataModelOSGStock.addColumn("Seam CHG");
        DataModelOSGStock.addColumn("INS Ind");
        DataModelOSGStock.addColumn("INS Amt");
        DataModelOSGStock.addColumn("GST");
        DataModelOSGStock.addColumn("TCS Per");
        DataModelOSGStock.addColumn("TCS Amt");
        DataModelOSGStock.addColumn("Disc Per");
        DataModelOSGStock.addColumn("Disc Amt");
        DataModelOSGStock.addColumn("Disc Bas Amt");
        DataModelOSGStock.addColumn("Amount");
        DataModelOSGStock.addColumn("Referance");
        DataModelOSGStock.addColumn("REF Date");
        DataModelOSGStock.addColumn("PO No");
        DataModelOSGStock.addColumn("PO Date");
        DataModelOSGStock.addColumn("Material Code");
        DataModelOSGStock.addColumn("OA No");
        DataModelOSGStock.addColumn("OA Date");
        DataModelOSGStock.addColumn("OC No");
        DataModelOSGStock.addColumn("OC Date");
        DataModelOSGStock.addColumn("Order Remark");
        DataModelOSGStock.addColumn("Piece Remark");
        DataModelOSGStock.addColumn("Rejected");
        DataModelOSGStock.addColumn("Rejected Remark");
        DataModelOSGStock.addColumn("Diversion");
        DataModelOSGStock.addColumn("Diversion Reason");
        DataModelOSGStock.addColumn("PartyCode Original");
        DataModelOSGStock.addColumn("PieceNo Original");
        DataModelOSGStock.addColumn("Incharge");
        DataModelOSGStock.addColumn("Obsolete Status");
        DataModelOSGStock.addColumn("Obsolete Date");
        DataModelOSGStock.addColumn("Obsolete Reason");
        DataModelOSGStock.addColumn("Packing Doc No");
        DataModelOSGStock.addColumn("Packing Doc Date");

        DataModelOSGStock.TableReadOnly(true);
        Table_OSGSTOCK.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateOSG_Stock() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridOSG_Stock(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_FNSG_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('OSG STOCK') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[200];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;
                        total_amount = total_amount + inv_calc.getFicInvAmt();
                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());

                    }
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("PR_PIECE_STAGE");
//                    rowData[2] = rsTmp.getString("PR_WIP_STATUS");
//                    rowData[3] = rsTmp.getString("GROUP_DESC");
//                    rowData[4] = rsTmp.getString("PR_PARTY_CODE");
//                    rowData[5] = rsTmp.getString("PARTY_NAME");
//                    rowData[6] = rsTmp.getString("PR_PIECE_NO");
//                    rowData[7] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[8] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[9] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[10] = rsTmp.getString("POSITION_DESC");
//                    rowData[11] = rsTmp.getString("PR_UPN");
//                    rowData[12] = rsTmp.getString("PR_DOC_NO");
//                    rowData[13] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[14] = rsTmp.getString("PR_PRODUCT_CODE");
//                    rowData[15] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[16] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[17] = rsTmp.getString("PR_GROUP");
//                    rowData[18] = rsTmp.getString("PR_STYLE");
//                    rowData[19] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[20] = rsTmp.getString("PR_LENGTH");
//                    rowData[21] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[22] = rsTmp.getString("PR_ACTUAL_LENGTH");
//                    rowData[23] = rsTmp.getString("PR_WIDTH");
//                    rowData[24] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[25] = rsTmp.getString("PR_ACTUAL_WIDTH");
//                    rowData[26] = rsTmp.getString("PR_GSM");
//                    rowData[27] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[28] = rsTmp.getString("PR_SQMTR");
//                    rowData[29] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[30] = rsTmp.getString("PR_THORITICAL_WEIGHT");
//                    rowData[31] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[32] = rsTmp.getString("PR_ACTUAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_ACTUAL_WEIGHT", "0"));
//                    total_bill_weight = total_bill_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_BILL_WEIGHT", "0"));
//
//                    rowData[33] = rsTmp.getString("PR_SYN_PER");
//                    rowData[34] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[35] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
//                    rowData[36] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
//                    rowData[37] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
//                    rowData[38] = rsTmp.getString("PR_DAYS_ORDER_WVG");
//                    rowData[39] = rsTmp.getString("WVG_LAYER_REMARK");
//                    rowData[40] = rsTmp.getString("PR_WEAVING_WEIGHT");
//                    rowData[41] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
//                    rowData[42] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
//                    rowData[43] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
//                    rowData[44] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
//                    rowData[45] = rsTmp.getString("PR_DAYS_ORDER_MND");
//                    rowData[46] = rsTmp.getString("PR_MND_LAYER_REMARK");
//                    rowData[47] = rsTmp.getString("PR_MENDING_WEIGHT");
//                    rowData[48] = rsTmp.getString("PR_MENDING_WEIGHT_A");
//                    rowData[49] = rsTmp.getString("PR_MENDING_WEIGHT_B");
//                    rowData[50] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
//                    rowData[51] = rsTmp.getString("PR_DAYS_ORDER_NDL");
//                    rowData[52] = rsTmp.getString("PR_NEEDLING_WEIGHT");
//                    rowData[53] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
//                    rowData[54] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
//                    rowData[55] = rsTmp.getString("PR_DAYS_ORDER_FNG");
//                    rowData[56] = rsTmp.getString("PR_DAYS_WRP_WVG");
//                    rowData[57] = rsTmp.getString("PR_DAYS_WVG_MND");
//                    rowData[58] = rsTmp.getString("PR_DAYS_MND_NDL");
//                    rowData[59] = rsTmp.getString("PR_DAYS_NDL_FNG");
//                    rowData[60] = rsTmp.getString("PR_DAYS_WH_STOCK");
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData[61] = inv_calc.getFicRate();
//                        rowData[62] = inv_calc.getFicBasAmount();
//                        rowData[63] = inv_calc.getFicChemTrtChg();
//                        rowData[64] = inv_calc.getFicSpiralChg();
//                        rowData[65] = inv_calc.getFicPinChg();
//                        rowData[66] = inv_calc.getFicSeamChg();
//                        rowData[67] = inv_calc.getFicInsInd();
//                        rowData[68] = inv_calc.getFicInsAmt();
//                        rowData[69] = inv_calc.getFicGST();
//                        rowData[70] = inv_calc.getFicDiscPer();
//                        rowData[71] = inv_calc.getFicDiscAmt();
//                        rowData[72] = inv_calc.getFicDiscBasamt();
//                        rowData[73] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[74] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[75] = rsTmp.getString("PR_REFERENCE");
//                    rowData[76] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[77] = rsTmp.getString("PR_PO_NO");
//                    rowData[78] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[79] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[80] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[81] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[82] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[83] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[84] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[85] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[86] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[87] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[88] = rsTmp.getString("PR_DELINK");
//                    rowData[89] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[90] = rsTmp.getString("PR_PKG_DP_NO");
//                    rowData[91] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_OSGstock.setText(df.format(total_weight));
                    txtTotalBillWeight_OSGstock.setText(df.format(total_bill_weight));
                    txtTotalAmount_OSGstock.setText(df.format(total_amount));

                    DataModelOSGStock.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridSalesExpY() {
        DataModelSalesExpY = new EITLTableModel();
        TableSalesExpY.removeAll();
        TableSalesExpY.setModel(DataModelSalesExpY);

        TableSalesExpY.setAutoResizeMode(TableSalesExpY.AUTO_RESIZE_OFF);
        DataModelSalesExpY.addColumn("Sr.");
        //DataModelSalesY.addColumn("Party Code");
        DataModelSalesExpY.addColumn("Fin Year");
        DataModelSalesExpY.addColumn("Total(lacs)");
        DataModelSalesExpY.addColumn("Total(KG)");
        DataModelSalesExpY.addColumn("Total(SQMTR)");
        DataModelSalesExpY.addColumn("Dry (lacs)");
        DataModelSalesExpY.addColumn("Dry (KG)");
        DataModelSalesExpY.addColumn("Dry (SQMTR)");
        DataModelSalesExpY.addColumn("Wet (lacs)");
        DataModelSalesExpY.addColumn("Wet (KG)");
        DataModelSalesExpY.addColumn("Wet (SQMTR)");
        DataModelSalesExpY.addColumn("ACNE(lacs)");
        DataModelSalesExpY.addColumn("ACNE(KG)");
        DataModelSalesExpY.addColumn("ACNE(SQMTR)");
        DataModelSalesExpY.TableReadOnly(true);
        TableSalesExpY.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void FormatGridSalesExpM() {
        DataModelSalesExpM = new EITLTableModel();
        TableSalesExpM.removeAll();
        TableSalesExpM.setModel(DataModelSalesExpM);

        TableSalesExpM.setAutoResizeMode(TableSalesExpM.AUTO_RESIZE_OFF);
        DataModelSalesExpM.addColumn("Sr.");
        //DataModelSalesM.addColumn("Party Code");
        DataModelSalesExpM.addColumn("Fin Year");
        DataModelSalesExpM.addColumn("Apr");
        DataModelSalesExpM.addColumn("May");
        DataModelSalesExpM.addColumn("Jun");
        DataModelSalesExpM.addColumn("Jul");
        DataModelSalesExpM.addColumn("Aug");
        DataModelSalesExpM.addColumn("Sep");
        DataModelSalesExpM.addColumn("Oct");
        DataModelSalesExpM.addColumn("Nov");
        DataModelSalesExpM.addColumn("Dec");
        DataModelSalesExpM.addColumn("Jan");
        DataModelSalesExpM.addColumn("Feb");
        DataModelSalesExpM.addColumn("Mar");
        DataModelSalesExpM.addColumn("Total");
        DataModelSalesExpM.TableReadOnly(true);
        TableSalesExpM.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateSalesExpDetailYNew() {
        String SelUserID = "";
        String strSQL = "";
        try {
            FormatGridSalesExpY();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            String strZone = REGION.getSelectedItem().toString();
            if (strZone.equals("All")) {
                strZone = "";
            }
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";
            strSQL += "SELECT FINYR,";
            strSQL += "ROUND(SUM(INVOICE_AMT)/100000,2) AS TOTAL, SUM(ACTUAL_WEIGHT) AS KG, SUM(SQMTR) AS SQMTR,";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN INVOICE_AMT END,0))/100000,2)  AS DRYNET,";
            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN ACTUAL_WEIGHT END ,0))  AS DRYKG,";
            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='2' THEN SQMTR END,0))  AS DRYSQMTR,";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN INVOICE_AMT END,0))/100000,2)  AS WETNET,";
            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN ACTUAL_WEIGHT END ,0))  AS WETKG,";
            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='3' THEN SQMTR END,0))  AS WETSQMTR,";
            strSQL += "ROUND(SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN INVOICE_AMT END,0))/100000,2)  AS ACNET,";
            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN ACTUAL_WEIGHT END ,0))  AS ACKG,";
            strSQL += "SUM(COALESCE(CASE WHEN CATEGORY ='1' THEN SQMTR END,0))  AS ACSQMTR ";
            strSQL += "FROM (";
            strSQL += "SELECT  BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR,CATEGORY,";
            strSQL += "CASE WHEN SUBSTRING(PRODUCT_CODE,1,1) IN (6)  THEN 5  ELSE INCHARGE_CD END AS INCHARGE_CD   FROM (";
//            strSQL += "SELECT BALE_NO,PARTY_CODE,FINYR,A.PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, CATEGORY ";
//            strSQL += "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A, PRODUCTION.FELT_QLT_RATE_MASTER C ";
//            strSQL += "WHERE A.PRODUCT_CODE = C.PRODUCT_CODE AND A.APPROVED=1 AND A.CANCELLED=0 AND C.EFFECTIVE_TO='0000-00-00') AS A ";
            strSQL += "SELECT PR_BALE_NO AS BALE_NO,PR_PARTY_CODE AS PARTY_CODE,CASE WHEN PR_INVOICE_DATE NOT IN ('0000-00-00','') AND PR_INVOICE_DATE IS NOT NULL THEN CASE WHEN EXTRACT(MONTH FROM PR_INVOICE_DATE) IN (1,2,3) THEN CONCAT((EXTRACT(YEAR FROM PR_INVOICE_DATE)-1),'-',EXTRACT(YEAR FROM PR_INVOICE_DATE)) ELSE CONCAT(EXTRACT(YEAR FROM PR_INVOICE_DATE),'-',(EXTRACT(YEAR FROM PR_INVOICE_DATE)+1)) END END AS FINYR,PR_BILL_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PR_INVOICE_AMOUNT,0) AS INVOICE_AMT,PR_INVOICE_NO,PR_INVOICE_DATE AS INVOICE_DATE,PR_BILL_WEIGHT AS ACTUAL_WEIGHT,PR_BILL_SQMTR AS SQMTR,CATEGORY ";
            strSQL += "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A, PRODUCTION.FELT_QLT_RATE_MASTER C ";
            strSQL += "WHERE A.PR_BILL_PRODUCT_CODE = C.PRODUCT_CODE AND PR_PIECE_STAGE IN ('EXP-INVOICE','EXP-INVOICED') AND C.EFFECTIVE_TO='0000-00-00' ) AS A ";
            strSQL += "LEFT JOIN (";
            strSQL += "SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON PARTY_CODE = PARTY";
            strSQL += ") AS C WHERE PARTY_CODE != '' ";
            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND PARTY_CODE= '" + SelUserID + "' ";
            }

            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            System.out.println(inchargeby);
            if (inchargeby != 0) {
                strSQL += "AND INCHARGE_CD = " + inchargeby + "";
            } else {
                strSQL += "";
            }

//            if (inchargeby == 0) {
//                strSQL += "";
//            }
//            if (inchargeby == 1) {
//                strSQL += "AND INCHARGE_CD = 1";
//            }
//            if (inchargeby == 2) {
//                strSQL += "AND INCHARGE_CD = 2";
//            }
//            if (inchargeby == 3) {
//                strSQL += "AND INCHARGE_CD = 3";
//            }
//            if (inchargeby == 4) {
//                strSQL += "AND INCHARGE_CD = 4";
//            }
//            if (inchargeby == 5) {
//                strSQL += "AND INCHARGE_CD = 5";
//            }
//            if (inchargeby == 6) {
//                strSQL += "AND INCHARGE_CD = 6";
//            }
//            if (inchargeby == 7) {
//                strSQL += "AND INCHARGE_CD IS NULL";
//            }
            if (!txtproductcode.getText().equals("")) {
                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

//"--GROUP BY FINYR,PRODUCT_CODE" +
            strSQL += " GROUP BY FINYR ORDER BY FINYR DESC ";
            System.out.println("QUERY L: " + strSQL);
//          
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtsalesexptotal.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[15];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("TOTAL");
                    rowData[3] = rsTmp.getString("KG");
                    rowData[4] = rsTmp.getString("SQMTR");
                    rowData[5] = rsTmp.getString("DRYNET");
                    rowData[6] = rsTmp.getString("DRYKG");
                    rowData[7] = rsTmp.getString("DRYSQMTR");
                    rowData[8] = rsTmp.getString("WETNET");
                    rowData[9] = rsTmp.getString("WETKG");
                    rowData[10] = rsTmp.getString("WETSQMTR");
                    rowData[11] = rsTmp.getString("ACNET");
                    rowData[12] = rsTmp.getString("ACKG");
                    rowData[13] = rsTmp.getString("ACSQMTR");
                    DataModelSalesExpY.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateSalesExpDetailMNew() {
        String SelUserID = "";
        String strSQL = "";
        try {
            FormatGridSalesExpM();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            String strZone = REGION.getSelectedItem().toString();
            if (strZone.equals("All")) {
                strZone = "";
            }
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;
            strSQL = "";

            strSQL += "SELECT FINYR, ";
//--SELECT FINYR,PRODUCT_CODE, 
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN INVOICE_AMT END)/100000,2) AS APR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN INVOICE_AMT END)/100000,2) AS MAY, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN INVOICE_AMT END)/100000,2) AS JUN, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN INVOICE_AMT END)/100000,2) AS JUL, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN INVOICE_AMT END)/100000,2) AS AUG, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN INVOICE_AMT END)/100000,2) AS SEP, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN INVOICE_AMT END)/100000,2) AS OCT,";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN INVOICE_AMT END)/100000,2) AS NOV, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN INVOICE_AMT END)/100000,2) AS DEC1, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN INVOICE_AMT END)/100000,2) AS JAN, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN INVOICE_AMT END)/100000,2) AS FEB, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN INVOICE_AMT END)/100000,2) AS MAR, ";
            strSQL += "ROUND(SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN INVOICE_AMT END)/100000,2) AS TOTAL ";
            strSQL += "FROM (SELECT  BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR, ";
            strSQL += "CASE WHEN SUBSTRING(PRODUCT_CODE,1,1) IN (6)  THEN 5  ELSE INCHARGE_CD END AS INCHARGE_CD   FROM ( ";
//            strSQL += "SELECT BALE_NO,PARTY_CODE,FINYR,PRODUCT_CODE,INVOICE_AMT,INVOICE_DATE,ACTUAL_WEIGHT,SQMTR   FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A WHERE APPROVED=1 AND CANCELLED=0) AS A ";
            strSQL += "SELECT PR_BALE_NO AS BALE_NO,PR_PARTY_CODE AS PARTY_CODE,CASE WHEN PR_INVOICE_DATE NOT IN ('0000-00-00','') AND PR_INVOICE_DATE IS NOT NULL THEN CASE WHEN EXTRACT(MONTH FROM PR_INVOICE_DATE) IN (1,2,3) THEN CONCAT((EXTRACT(YEAR FROM PR_INVOICE_DATE)-1),'-',EXTRACT(YEAR FROM PR_INVOICE_DATE)) ELSE CONCAT(EXTRACT(YEAR FROM PR_INVOICE_DATE),'-',(EXTRACT(YEAR FROM PR_INVOICE_DATE)+1)) END END AS FINYR,PR_BILL_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PR_INVOICE_AMOUNT,0) AS INVOICE_AMT,PR_INVOICE_DATE AS INVOICE_DATE,PR_BILL_WEIGHT AS ACTUAL_WEIGHT,PR_BILL_SQMTR AS SQMTR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE IN ('EXP-INVOICE','EXP-INVOICED') ) AS A ";
            strSQL += "LEFT JOIN (SELECT PARTY_CODE AS PARTY,INCHARGE_CD FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS B ON PARTY_CODE = PARTY) AS C ";
            strSQL += "WHERE PARTY_CODE != '' ";
            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND PARTY_CODE = '" + SelUserID + "' ";
            }
            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
            System.out.println(inchargeby);
            if (inchargeby != 0) {
                strSQL += "AND INCHARGE_CD = " + inchargeby + "";
            } else {
                strSQL += "";
            }

//            int inchargeby = EITLERPGLOBAL.getComboCode(S_ENGINEER);
//            if (inchargeby == 0) {
//                strSQL += "";
//            }
//            if (inchargeby == 1) {
//                strSQL += "AND INCHARGE_CD = 1";
//            }
//            if (inchargeby == 2) {
//                strSQL += "AND INCHARGE_CD = 2";
//            }
//            if (inchargeby == 3) {
//                strSQL += "AND INCHARGE_CD = 3";
//            }
//            if (inchargeby == 4) {
//                strSQL += "AND INCHARGE_CD = 4";
//            }
//            if (inchargeby == 5) {
//                strSQL += "AND INCHARGE_CD = 5";
//            }
//            if (inchargeby == 6) {
//                strSQL += "AND INCHARGE_CD = 6";
//            }
//            if (inchargeby == 7) {
//                strSQL += "AND INCHARGE_CD IS NULL";
//            }
            if (!txtproductcode.getText().equals("")) {
                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

//--GROUP BY FINYR,PRODUCT_CODE
            strSQL += " GROUP BY FINYR ";
            strSQL += " ORDER BY FINYR DESC ";

            System.out.println(strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtsalesexptotal1.setText(Integer.toString(cnt));

                    Object[] rowData = new Object[15];
                    rowData[0] = Integer.toString(cnt);
                    //rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[1] = rsTmp.getString("FINYR");
                    rowData[2] = rsTmp.getString("APR");
                    rowData[3] = rsTmp.getString("MAY");
                    rowData[4] = rsTmp.getString("JUN");
                    rowData[5] = rsTmp.getString("JUL");
                    rowData[6] = rsTmp.getString("AUG");
                    rowData[7] = rsTmp.getString("SEP");
                    rowData[8] = rsTmp.getString("OCT");
                    rowData[9] = rsTmp.getString("NOV");
                    rowData[10] = rsTmp.getString("DEC1");
                    rowData[11] = rsTmp.getString("JAN");
                    rowData[12] = rsTmp.getString("FEB");
                    rowData[13] = rsTmp.getString("MAR");
                    rowData[14] = rsTmp.getString("TOTAL");
                    DataModelSalesExpM.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridDiversion() {
        DataModelDiversion = new EITLTableModel();
        Table_Diversion.removeAll();
        Table_Diversion.setModel(DataModelDiversion);

        Table_Diversion.setAutoResizeMode(Table_Diversion.AUTO_RESIZE_OFF);

        DataModelDiversion.addColumn("Sr No");
        DataModelDiversion.addColumn("Approval Status");
        DataModelDiversion.addColumn("Doc No");
        DataModelDiversion.addColumn("Doc Date");
        DataModelDiversion.addColumn("Div Remark");
        DataModelDiversion.addColumn("Group Name");
        DataModelDiversion.addColumn("New Party Code");
        DataModelDiversion.addColumn("New Party Name");
        DataModelDiversion.addColumn("New Piece No");
        DataModelDiversion.addColumn("Old Party Code");
        DataModelDiversion.addColumn("Old Party Name");
        DataModelDiversion.addColumn("Old Piece No");
        DataModelDiversion.addColumn("New Machine No");
        DataModelDiversion.addColumn("Old Machine No");
        DataModelDiversion.addColumn("New Position No");
        DataModelDiversion.addColumn("Old Position No");
        DataModelDiversion.addColumn("New Position No(Design)");
        DataModelDiversion.addColumn("Old Position No(Design)");
        DataModelDiversion.addColumn("New Position Desc");
        DataModelDiversion.addColumn("Old Position Desc");
        DataModelDiversion.addColumn("New UPN");
        DataModelDiversion.addColumn("Old UPN");
        DataModelDiversion.addColumn("New Product Code");
        DataModelDiversion.addColumn("New Product Desc");
        DataModelDiversion.addColumn("New Product Group");
        DataModelDiversion.addColumn("Old Product Code");
        DataModelDiversion.addColumn("Old Product Desc");
        DataModelDiversion.addColumn("Old Product Group");
        DataModelDiversion.addColumn("New Length");
        DataModelDiversion.addColumn("Old Length");
        DataModelDiversion.addColumn("Bill Length");
        DataModelDiversion.addColumn("New Width");
        DataModelDiversion.addColumn("Old Width");
        DataModelDiversion.addColumn("Bill Width");
        DataModelDiversion.addColumn("New GSM");
        DataModelDiversion.addColumn("Old GSM");
        DataModelDiversion.addColumn("Bill GSM");
        DataModelDiversion.addColumn("New Theoretical Weight");
        DataModelDiversion.addColumn("Old Theoretical Weight");
        DataModelDiversion.addColumn("Bill Weight");
        DataModelDiversion.addColumn("New Sqmtr");
        DataModelDiversion.addColumn("Old Sqmtr");
        DataModelDiversion.addColumn("Bill Sqmtr");
        DataModelDiversion.addColumn("New Style");
        DataModelDiversion.addColumn("Old Style");
        DataModelDiversion.addColumn("Bill Style");
        DataModelDiversion.addColumn("New Syn%");
        DataModelDiversion.addColumn("Old Syn%");

        DataModelDiversion.addColumn("Rate Indicator");

        DataModelDiversion.addColumn("Old Rate");
        DataModelDiversion.addColumn("Old Surcharge Per");
        DataModelDiversion.addColumn("Old Surcharge Rate");
        DataModelDiversion.addColumn("Old Gross Rate");

        DataModelDiversion.addColumn("New Rate");
        DataModelDiversion.addColumn("New Surcharge Per");
        DataModelDiversion.addColumn("New Surcharge Rate");
        DataModelDiversion.addColumn("New Gross Rate");

        DataModelDiversion.addColumn("New Order Value");
        DataModelDiversion.addColumn("Old Order Value");
        DataModelDiversion.addColumn("New Gross Amt");
        DataModelDiversion.addColumn("Old Gross Amt");
        DataModelDiversion.addColumn("Profit(-) / Loss(+)");
        DataModelDiversion.addColumn("Bearer By");
        DataModelDiversion.addColumn("Bearer Party Code");
        DataModelDiversion.addColumn("Bearer Party Name");
        DataModelDiversion.addColumn("Debit Memo");
        DataModelDiversion.addColumn("Debit Memo Amt");
        DataModelDiversion.addColumn("Debit Memo 2");
        DataModelDiversion.addColumn("Debit Memo 2 Amt");
        DataModelDiversion.addColumn("Debit Memo 3");
        DataModelDiversion.addColumn("Debit Memo 3 Amt");
        DataModelDiversion.addColumn("Debit Memo 4");
        DataModelDiversion.addColumn("Debit Memo 4 Amt");
        DataModelDiversion.addColumn("Debit Memo 5");
        DataModelDiversion.addColumn("Debit Memo 5 Amt");
        DataModelDiversion.addColumn("Debit Memo 6");
        DataModelDiversion.addColumn("Debit Memo 6 Amt");
        DataModelDiversion.addColumn("Debit Memo 7");
        DataModelDiversion.addColumn("Debit Memo 7 Amt");
        DataModelDiversion.addColumn("Debit Memo 8");
        DataModelDiversion.addColumn("Debit Memo 8 Amt");
        DataModelDiversion.addColumn("Debit Memo 9");
        DataModelDiversion.addColumn("Debit Memo 9 Amt");
        DataModelDiversion.addColumn("Debit Memo 10");
        DataModelDiversion.addColumn("Debit Memo 10 Amt");
        DataModelDiversion.addColumn("Incharge");

        DataModelDiversion.TableReadOnly(true);
        Table_Diversion.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateDiversionCombo() {

        HashMap hmAmendList = new HashMap();

        cmbDiversionStatusModel = new EITLComboModel();
        cmbDiversionStatus.removeAllItems();
        cmbDiversionStatus.setModel(cmbDiversionStatusModel);

        hmAmendList = getInvStatusList();
        for (int i = 1; i <= hmAmendList.size(); i++) {
            cmbDiversionStatusModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
        }
    }

    private void GenerateDiversion() {
        String cndtn = "";
        String orderBy = "";

        try {
            FormatGridDiversion(); //clear existing content of table
            ResultSet rsTmp;

//-------------------------------------------------------------------------------------------------------------------
            int status = cmbDiversionStatus.getSelectedIndex();
            if (status == 3) {

                cndtn += "";
            }
            if (status == 0) {

                cndtn += " AND APPROVAL_STATUS='APPROVED' ";
            }
            if (status == 1) {

                cndtn += " AND APPROVAL_STATUS='UNAPPROVED' ";
            }
            if (status == 2) {

                cndtn += " AND APPROVAL_STATUS='CANCELLED' ";
            }

            String Party_Code = txtpartycode.getText();
            String Length_from = txtlengthfrom.getText();
            String Length_to = txtlengthto.getText();
            String Width_from = txtwidthfrom.getText();
            String Width_to = txtwidthto.getText();
            String GSM_from = txtgsmfrom.getText();
            String GSM_to = txtgsmto.getText();
            String Piece_No = txtpieceno.getText();
            String Product_Code = txtproductcode.getText();
            String Incharge = EITLERPGLOBAL.getComboCode(S_ENGINEER) + "";
            String From_date = txtdatefrom.getText();
            String To_date = txtdateto.getText();
            String MachineNo = txtMachineNo.getText();
            String Position = txtPosition.getText();

            if (!Party_Code.equals("")) {
                cndtn += " AND D_PARTY_CODE = '" + Party_Code + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn = " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND D_LENGTH >=  '" + Length_from + "' AND D_LENGTH <=  '" + Length_to + "' ";
            } else if (!Length_from.equals("") && Length_to.equals("")) {
                cndtn += " AND D_LENGTH >= '" + Length_from + "' ";
            } else if (Length_from.equals("") && !Length_to.equals("")) {
                cndtn += " AND D_LENGTH <= '" + Length_to + "' ";
            }

            if (!Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND D_WIDTH >= '" + Width_from + "' D_WIDTH WIDTH <= '" + Width_to + "' ";
            } else if (!Width_from.equals("") && Width_to.equals("")) {
                cndtn += " AND D_WIDTH >= '" + Width_from + "' ";
            } else if (Width_from.equals("") && !Width_to.equals("")) {
                cndtn += " AND D_WIDTH <= '" + Width_to + "' ";
            }

            if (!GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND D_GSM >=  '" + GSM_from + "' AND D_GSM <= '" + GSM_to + "' ";
            } else if (!GSM_from.equals("") && GSM_to.equals("")) {
                cndtn += " AND D_GSM >= '" + GSM_from + "' ";
            } else if (GSM_from.equals("") && !GSM_to.equals("")) {
                cndtn += " AND D_GSM <= '" + GSM_to + "' ";
            }

            if (!Piece_No.equals("")) {
                String[] Pieces = Piece_No.split(",");
                for (int i = 0; i < Pieces.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (D_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR D_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }

                cndtn += ")";
            }

            if (!Product_Code.equals("")) {

                //Addition using (,)
                String[] Products = Product_Code.split(",");
                for (int i = 0; i < Products.length; i++) {

                    if (i == 0) {
                        cndtn += " AND (D_PRODUCT_NO = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR D_PRODUCT_NO = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!Incharge.equals("0")) {
                cndtn += " AND INCHARGE_CD = '" + Incharge + "' ";
            }

            if (!MachineNo.equals("")) {
                cndtn += " AND D_MACHINE_NO = '" + MachineNo + "' ";
            }

            if (!Position.equals("")) {
                cndtn += " AND D_POSITION_NO = '" + Position + "' ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND NEW_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
            if (!From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND SD_ORDER_DATE >= '" + df1.format(df.parse(From_date)) + "' AND SD_ORDER_DATE <= '" + df1.format(df.parse(To_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (!From_date.equals("") && To_date.equals("")) {
                try {
                    cndtn += " AND SD_ORDER_DATE  >= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (From_date.equals("") && !To_date.equals("")) {
                try {
                    cndtn += " AND SD_ORDER_DATE  <= '" + df1.format(df.parse(From_date)) + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            if (chkKeyClientInd.isSelected()){
                cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            int Orderby = cmbDiversionOrderBy.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {

                orderBy += " ORDER BY SD_ORDER_NO DESC,SD_ORDER_DATE ";
            }
            if (Orderby == 2) {

                orderBy += " ORDER BY D_PARTY_CODE ";
            }
            if (Orderby == 3) {

                orderBy += " ORDER BY D_PIECE_NO ";
            }
            if (Orderby == 4) {

                orderBy += " ORDER BY D_PRODUCT_NO ";
            }

            cmbDiversionOrderByModel = new EITLComboModel();
            cmbDiversionOrderBy.removeAllItems();
            cmbDiversionOrderBy.setModel(cmbDiversionOrderByModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "Select Order";
            cmbDiversionOrderByModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "Party Code";
            cmbDiversionOrderByModel.addElement(aData);

            aData.Code = 3;
            aData.Text = "Piece No";
            cmbDiversionOrderByModel.addElement(aData);

            aData.Code = 4;
            aData.Text = "Product Code";
            cmbDiversionOrderByModel.addElement(aData);

//------------------------------------------------------------------------------------------------------------------------------------
            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT "
                    + "CASE WHEN H.APPROVED = 0 AND H.CANCELED = 0 THEN 'UNAPPROVED' WHEN H.APPROVED = 1 AND H.CANCELED = 0 THEN 'APPROVED' WHEN H.APPROVED = 0 AND H.CANCELED = 1 THEN 'CANCELLED' END AS APPROVAL_STATUS, "
                    + "H.* FROM PRODUCTION.FELT_SALES_ORDER_DIVERSION H) AS DIVE "
                    + "LEFT JOIN "
                    + "(SELECT PR_PIECE_NO,PR_UPN AS OLD_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER) AS PR "
                    + "ON DIVE.ORIGINAL_PIECE_NO=PR.PR_PIECE_NO "
                    + "LEFT JOIN "
                    + "(SELECT MM_PARTY_CODE,MM_MACHINE_NO,MM_MACHINE_POSITION,MM_UPN_NO AS NEW_UPN FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL) AS MD "
                    + "ON DIVE.D_PARTY_CODE=MD.MM_PARTY_CODE AND DIVE.D_MACHINE_NO=MD.MM_MACHINE_NO AND DIVE.D_POSITION_NO=MD.MM_MACHINE_POSITION "
                    + "LEFT JOIN "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM "
                    + "ON DIVE.D_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC,SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM "
                    + "ON DIVE.ORIGINAL_PRODUCT_NO=QM.PRODUCT_CODE "
                    + "LEFT JOIN "
                    + "(SELECT POSITION_NO AS OLD_POSITION_NO, POSITION_DESC AS OLD_POSITION_DESC, POSITION_DESIGN_NO AS OLD_POSITION_DESIGN_NO "
                    + "FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS OMP "
                    + "ON DIVE.ORIGINAL_POSITION_NO=OMP.OLD_POSITION_NO "
                    + "LEFT JOIN "
                    + "(SELECT POSITION_NO AS NEW_POSITION_NO, POSITION_DESC AS NEW_POSITION_DESC, POSITION_DESIGN_NO AS NEW_POSITION_DESIGN_NO "
                    + "FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS DMP "
                    + "ON DIVE.D_POSITION_NO=DMP.NEW_POSITION_NO "
                    + "LEFT JOIN "
                    + "(SELECT P.PARTY_CODE AS PM_PARTY_CODE,P.INCHARGE_CD,INCHARGE_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER P, PRODUCTION.FELT_INCHARGE I "
                    + "WHERE P.INCHARGE_CD = I.INCHARGE_CD AND P.MAIN_ACCOUNT_CODE='210010' AND P.APPROVED=1 AND P.CANCELLED=0) AS PIM "
                    + "ON DIVE.D_PARTY_CODE=PIM.PM_PARTY_CODE "
                    + "LEFT JOIN "
                    + "(SELECT PARTY_CODE AS OLD_PARTY_CODE,PARTY_NAME AS OLD_PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS OPM "
                    + "ON DIVE.ORIGINAL_PARTY_CODE=OPM.OLD_PARTY_CODE "
                    + "WHERE 1=1 " + cndtn + " " + orderBy;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[150];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("APPROVAL_STATUS");
                    rowData[2] = rsTmp.getString("SD_ORDER_NO");
                    rowData[3] = EITLERPGLOBAL.formatDate(rsTmp.getString("SD_ORDER_DATE"));
                    rowData[4] = rsTmp.getString("D_REMARK");
                    rowData[5] = rsTmp.getString("GROUP_DESC");
                    rowData[6] = rsTmp.getString("D_PARTY_CODE");
                    rowData[7] = rsTmp.getString("D_PARTY_NAME");
                    rowData[8] = rsTmp.getString("D_PIECE_NO");
                    rowData[9] = rsTmp.getString("ORIGINAL_PARTY_CODE");
                    rowData[10] = rsTmp.getString("OLD_PARTY_NAME");
                    rowData[11] = rsTmp.getString("ORIGINAL_PIECE_NO");
                    rowData[12] = rsTmp.getString("D_MACHINE_NO");
                    rowData[13] = rsTmp.getString("ORIGINAL_MACHINE_NO");
                    rowData[14] = rsTmp.getString("D_POSITION_NO");
                    rowData[15] = rsTmp.getString("ORIGINAL_POSITION_NO");
                    rowData[16] = rsTmp.getString("NEW_POSITION_DESIGN_NO");
                    rowData[17] = rsTmp.getString("OLD_POSITION_DESIGN_NO");
                    rowData[18] = rsTmp.getString("NEW_POSITION_DESC");
                    rowData[19] = rsTmp.getString("OLD_POSITION_DESC");
                    rowData[20] = rsTmp.getString("NEW_UPN");
                    rowData[21] = rsTmp.getString("OLD_UPN");
                    rowData[22] = rsTmp.getString("D_PRODUCT_NO");
                    rowData[23] = rsTmp.getString("D_PRODUCT_DESC");
                    rowData[24] = rsTmp.getString("D_GROUP");
                    rowData[25] = rsTmp.getString("ORIGINAL_PRODUCT_NO");
                    rowData[26] = rsTmp.getString("PRODUCT_DESC");
                    rowData[27] = rsTmp.getString("ORIGINAL_GROUP");
                    rowData[28] = rsTmp.getString("D_LENGTH");
                    rowData[29] = rsTmp.getString("ORIGINAL_LENGTH");
                    rowData[30] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[31] = rsTmp.getString("D_WIDTH");
                    rowData[32] = rsTmp.getString("ORIGINAL_WIDTH");
                    rowData[33] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[34] = rsTmp.getString("D_GSM");
                    rowData[35] = rsTmp.getString("ORIGINAL_GSM");
                    rowData[36] = rsTmp.getString("PR_BILL_GSM");
                    rowData[37] = rsTmp.getString("D_THORITICAL_WEIGHT");
                    rowData[38] = rsTmp.getString("ORIGINAL_THORITICAL_WEIGHT");
                    rowData[39] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[40] = rsTmp.getString("D_SQ_MTR");
                    rowData[41] = rsTmp.getString("ORIGINAL_SQ_MTR");
                    rowData[42] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[43] = rsTmp.getString("D_STYLE_NO");
                    rowData[44] = rsTmp.getString("ORIGINAL_STYLE_NO");
                    rowData[45] = rsTmp.getString("PR_BILL_STYLE");
                    rowData[46] = rsTmp.getString("D_SYN_PER");
                    rowData[47] = rsTmp.getString("SYN_PER");

                    String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where PR_PIECE_NO='" + rsTmp.getString("ORIGINAL_PIECE_NO") + "'");
                    rowData[48] = indicator;

                    rowData[49] = rsTmp.getString("D_OV_RATE");
                    rowData[50] = rsTmp.getString("SURCHARGE_PER");
                    rowData[51] = rsTmp.getString("SURCHARGE_RATE");
                    rowData[52] = rsTmp.getString("GROSS_RATE");
                    rowData[53] = rsTmp.getString("ORIGINAL_OV_RATE");
                    rowData[54] = rsTmp.getString("EXIST_SURCHARGE_PER");
                    rowData[55] = rsTmp.getString("EXIST_SURCHARGE_RATE");
                    rowData[56] = rsTmp.getString("EXIST_GROSS_RATE");

                    rowData[57] = rsTmp.getString("D_OV_AMT");
                    rowData[58] = rsTmp.getString("ORIGINAL_OV_AMOUNT");
                    rowData[59] = rsTmp.getString("BASE_ORDER_AMT");
                    rowData[60] = rsTmp.getString("BASE_EXISTING_PIECE_AMT");
                    rowData[61] = rsTmp.getString("DIFFERENCE_AMT");
                    rowData[62] = rsTmp.getString("COST_BEARER");
                    rowData[63] = rsTmp.getString("BEARER_PARTY_CODE");
                    rowData[64] = rsTmp.getString("BEARER_PARTY_NAME");
                    rowData[65] = rsTmp.getString("DEBIT_NOTE_NO");
                    rowData[66] = rsTmp.getString("DEBIT_AMT");
                    rowData[67] = rsTmp.getString("DEBITMEMO_NO2");
                    rowData[68] = rsTmp.getString("DEBITMEMO_AMT2");
                    rowData[69] = rsTmp.getString("DEBITMEMO_NO3");
                    rowData[70] = rsTmp.getString("DEBITMEMO_AMT3");
                    rowData[71] = rsTmp.getString("DEBITMEMO_NO4");
                    rowData[72] = rsTmp.getString("DEBITMEMO_AMT4");
                    rowData[73] = rsTmp.getString("DEBITMEMO_NO5");
                    rowData[74] = rsTmp.getString("DEBITMEMO_AMT5");
                    rowData[75] = rsTmp.getString("DEBITMEMO_NO6");
                    rowData[76] = rsTmp.getString("DEBITMEMO_AMT6");
                    rowData[77] = rsTmp.getString("DEBITMEMO_NO7");
                    rowData[78] = rsTmp.getString("DEBITMEMO_AMT7");
                    rowData[79] = rsTmp.getString("DEBITMEMO_NO8");
                    rowData[80] = rsTmp.getString("DEBITMEMO_AMT8");
                    rowData[81] = rsTmp.getString("DEBITMEMO_NO9");
                    rowData[82] = rsTmp.getString("DEBITMEMO_AMT9");
                    rowData[83] = rsTmp.getString("DEBITMEMO_NO10");
                    rowData[84] = rsTmp.getString("DEBITMEMO_AMT10");
                    rowData[85] = rsTmp.getString("INCHARGE_NAME");

                    DataModelDiversion.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridPieceMFGRejection() {
        DataModelPieceMFGRejection = new EITLTableModel();
        TablePieceMFGRejection.removeAll();
        TablePieceMFGRejection.setModel(DataModelPieceMFGRejection);

        TablePieceMFGRejection.setAutoResizeMode(TablePieceMFGRejection.AUTO_RESIZE_OFF);

        DataModelPieceMFGRejection.addColumn("Sr No");
        DataModelPieceMFGRejection.addColumn("Obsolete Status");
        DataModelPieceMFGRejection.addColumn("Obsolete Reason");
        DataModelPieceMFGRejection.addColumn("Rejection Reason");
        DataModelPieceMFGRejection.addColumn("UPN");
        DataModelPieceMFGRejection.addColumn("Piece Stage");
        DataModelPieceMFGRejection.addColumn("WIP Status");
        DataModelPieceMFGRejection.addColumn("Group Name");
        DataModelPieceMFGRejection.addColumn("Party Code");
        DataModelPieceMFGRejection.addColumn("Party Name");
        DataModelPieceMFGRejection.addColumn("Piece No");
        DataModelPieceMFGRejection.addColumn("Machine No");
        DataModelPieceMFGRejection.addColumn("Position No");
        DataModelPieceMFGRejection.addColumn("Position No(Design)");
        DataModelPieceMFGRejection.addColumn("Position Desc");
        DataModelPieceMFGRejection.addColumn("Order No");
        DataModelPieceMFGRejection.addColumn("Order Date");
        DataModelPieceMFGRejection.addColumn("Product Code");
        DataModelPieceMFGRejection.addColumn("Bill Product Code");
        DataModelPieceMFGRejection.addColumn("Product Desc");
        DataModelPieceMFGRejection.addColumn("Group");
        DataModelPieceMFGRejection.addColumn("Style");
        DataModelPieceMFGRejection.addColumn("Bill Style");
        DataModelPieceMFGRejection.addColumn("Length");
        DataModelPieceMFGRejection.addColumn("Bill Length");
        DataModelPieceMFGRejection.addColumn("Actual Length");
        DataModelPieceMFGRejection.addColumn("Width");
        DataModelPieceMFGRejection.addColumn("Bill Width");
        DataModelPieceMFGRejection.addColumn("Actual Width");
        DataModelPieceMFGRejection.addColumn("GSM");
        DataModelPieceMFGRejection.addColumn("Bill GSM");
        DataModelPieceMFGRejection.addColumn("Sq.Mtr");
        DataModelPieceMFGRejection.addColumn("Bill Sq.Mtr");
        DataModelPieceMFGRejection.addColumn("Thortical Weight");
        DataModelPieceMFGRejection.addColumn("Bill Weight");
        DataModelPieceMFGRejection.addColumn("Actual Weight");
        DataModelPieceMFGRejection.addColumn("SYN(%)");
        DataModelPieceMFGRejection.addColumn("Req Month");
        DataModelPieceMFGRejection.addColumn("WARP DATE");
        DataModelPieceMFGRejection.addColumn("ORD VS WARP DAYS");
        DataModelPieceMFGRejection.addColumn("WVG DATE");
        DataModelPieceMFGRejection.addColumn("DAYS ORDER_WVG");
        DataModelPieceMFGRejection.addColumn("WVG LAYER_REMARK");
        DataModelPieceMFGRejection.addColumn("WVG WEIGHT");
        DataModelPieceMFGRejection.addColumn("WVG WEIGHT_A");
        DataModelPieceMFGRejection.addColumn("WVG WEIGHT_B");
        DataModelPieceMFGRejection.addColumn("SPLICE DATE");
        DataModelPieceMFGRejection.addColumn("MND DATE");
        DataModelPieceMFGRejection.addColumn("DAYS ORDER_MND");
        DataModelPieceMFGRejection.addColumn("MND LAYER_REMARK");
        DataModelPieceMFGRejection.addColumn("MND WEIGHT");
        DataModelPieceMFGRejection.addColumn("MND WEIGHT_A");
        DataModelPieceMFGRejection.addColumn("MND WEIGHT_B");
        DataModelPieceMFGRejection.addColumn("NDL DATE");
        DataModelPieceMFGRejection.addColumn("DAYS ORDER_NDL");
        DataModelPieceMFGRejection.addColumn("NDL WEIGHT");
        DataModelPieceMFGRejection.addColumn("SEAM DATE");
        DataModelPieceMFGRejection.addColumn("FNSG DATE");
        DataModelPieceMFGRejection.addColumn("DAYS ORDER_FNSG");
        DataModelPieceMFGRejection.addColumn("DAYS WRP_WVG");
        DataModelPieceMFGRejection.addColumn("DAYS WVG_MND");
        DataModelPieceMFGRejection.addColumn("DAYS MND_NDL");
        DataModelPieceMFGRejection.addColumn("DAYS NDL_FNSG");
        DataModelPieceMFGRejection.addColumn("DAYS WH_STOCK");
        DataModelPieceMFGRejection.addColumn("Rate");
        DataModelPieceMFGRejection.addColumn("Basic Amt");
        DataModelPieceMFGRejection.addColumn("CHEM TRT CHG");
        DataModelPieceMFGRejection.addColumn("SPIRAL CHG");
        DataModelPieceMFGRejection.addColumn("Pin CHG");
        DataModelPieceMFGRejection.addColumn("Seam CHG");
        DataModelPieceMFGRejection.addColumn("INS Ind");
        DataModelPieceMFGRejection.addColumn("INS Amt");
        DataModelPieceMFGRejection.addColumn("GST");
        DataModelPieceMFGRejection.addColumn("Disc Per");
        DataModelPieceMFGRejection.addColumn("Disc Amt");
        DataModelPieceMFGRejection.addColumn("Disc Bas Amt");
        DataModelPieceMFGRejection.addColumn("Amount");
        DataModelPieceMFGRejection.addColumn("Schedule Month");
        DataModelPieceMFGRejection.addColumn("Referance");
        DataModelPieceMFGRejection.addColumn("REF Date");
        DataModelPieceMFGRejection.addColumn("PO No");
        DataModelPieceMFGRejection.addColumn("PO Date");
        DataModelPieceMFGRejection.addColumn("Order Remark");
        DataModelPieceMFGRejection.addColumn("Piece Remark");
        DataModelPieceMFGRejection.addColumn("Rejected");
        DataModelPieceMFGRejection.addColumn("Rejected Remark");
        DataModelPieceMFGRejection.addColumn("Diversion");
        DataModelPieceMFGRejection.addColumn("Diversion Reason");
        DataModelPieceMFGRejection.addColumn("PartyCode Original");
        DataModelPieceMFGRejection.addColumn("PieceNo Original");
        DataModelPieceMFGRejection.addColumn("Incharge");
        DataModelPieceMFGRejection.addColumn("Adj.Length");
        DataModelPieceMFGRejection.addColumn("Adj.Width");
        DataModelPieceMFGRejection.addColumn("Adj.GSM");
        DataModelPieceMFGRejection.addColumn("Adj.Weight");

        DataModelPieceMFGRejection.TableReadOnly(true);
        TablePieceMFGRejection.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GeneratePieceMFGRejection() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        String order_cndtn = "";
        double total_weight = 0;
        double total_bill_weight = 0;
        double total_amount = 0;

        try {
            FormatGridPieceMFGRejection(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            int Orderby = cmbPieceMFGRejection.getSelectedIndex();
            Orderby++;
            if (Orderby == 1) {
                order_cndtn += " ORDER BY STAGES,PR_PARTY_CODE ";
            } else {
                order_cndtn += " ORDER BY STAGES,PR_PIECE_NO ";
            }

            cmbPieceMFGRejectionModel = new EITLComboModel();
            cmbPieceMFGRejection.removeAllItems();
            cmbPieceMFGRejection.setModel(cmbPieceMFGRejectionModel);
            ComboData aData = new ComboData();

            aData.Code = 1;
            aData.Text = "PARTY CODE";
            cmbPieceMFGRejectionModel.addElement(aData);

            aData.Code = 2;
            aData.Text = "PIECE NO";
            cmbPieceMFGRejectionModel.addElement(aData);

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    //                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "(SELECT *,CASE WHEN PR_PIECE_STAGE='IN STOCK' THEN CONCAT('Z',PR_PIECE_STAGE) ELSE CONCAT('A',PR_PIECE_STAGE) END AS STAGES FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    //                    + " AND PR_DELINK IN ('DELINK','OBSOLETE') "
                    + " AND PR_DELINK IN ('DELINK','OBSOLETE') AND PR_PIECE_STAGE NOT IN ('INVOICED','EXP-INVOICE','DIVERTED') "
                    + " AND PR_REJECTED_FLAG=1 "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    //                    + grp_cndtn + " " + ORDER_BY;
                    + grp_cndtn + " " + order_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PR_DELINK");
                    rowData[2] = rsTmp.getString("PR_DELINK_REASON");
                    rowData[3] = rsTmp.getString("PR_REJECTED_REMARK");
                    rowData[4] = rsTmp.getString("PR_UPN");
                    rowData[5] = rsTmp.getString("PR_PIECE_STAGE");
                    rowData[6] = rsTmp.getString("PR_WIP_STATUS");
                    rowData[7] = rsTmp.getString("GROUP_DESC");
                    rowData[8] = rsTmp.getString("PR_PARTY_CODE");
                    rowData[9] = rsTmp.getString("PARTY_NAME");
                    rowData[10] = rsTmp.getString("PR_PIECE_NO");
                    rowData[11] = rsTmp.getString("PR_MACHINE_NO");
                    rowData[12] = rsTmp.getString("PR_POSITION_NO");
                    rowData[13] = rsTmp.getString("POSITION_DESIGN_NO");
                    rowData[14] = rsTmp.getString("POSITION_DESC");
                    rowData[15] = rsTmp.getString("PR_DOC_NO");
                    rowData[16] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    rowData[17] = rsTmp.getString("PR_PRODUCT_CODE");
                    rowData[18] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    rowData[19] = rsTmp.getString("PRODUCT_DESC");
                    rowData[20] = rsTmp.getString("PR_GROUP");
                    rowData[21] = rsTmp.getString("PR_STYLE");
                    rowData[22] = rsTmp.getString("PR_BILL_STYLE");
                    rowData[23] = rsTmp.getString("PR_LENGTH");
                    rowData[24] = rsTmp.getString("PR_BILL_LENGTH");
                    rowData[25] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    rowData[26] = rsTmp.getString("PR_WIDTH");
                    rowData[27] = rsTmp.getString("PR_BILL_WIDTH");
                    rowData[28] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    rowData[29] = rsTmp.getString("PR_GSM");
                    rowData[30] = rsTmp.getString("PR_BILL_GSM");
                    rowData[31] = rsTmp.getString("PR_SQMTR");
                    rowData[32] = rsTmp.getString("PR_BILL_SQMTR");
                    rowData[33] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    rowData[34] = rsTmp.getString("PR_BILL_WEIGHT");
                    rowData[35] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    rowData[36] = rsTmp.getString("PR_SYN_PER");
                    rowData[37] = rsTmp.getString("PR_REQUESTED_MONTH");
                    rowData[38] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    rowData[39] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    rowData[40] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    rowData[41] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    rowData[42] = rsTmp.getString("WVG_LAYER_REMARK");
                    rowData[43] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    rowData[44] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    rowData[45] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    rowData[46] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    rowData[47] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    rowData[48] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    rowData[49] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    rowData[50] = rsTmp.getString("PR_MENDING_WEIGHT");
                    rowData[51] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    rowData[52] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    rowData[53] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    rowData[54] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    rowData[55] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    rowData[56] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    rowData[57] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    rowData[58] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    rowData[59] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    rowData[60] = rsTmp.getString("PR_DAYS_WVG_MND");
                    rowData[61] = rsTmp.getString("PR_DAYS_MND_NDL");
                    rowData[62] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    rowData[63] = rsTmp.getString("PR_DAYS_WH_STOCK");

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        rowData[64] = inv_calc.getFicRate();
                        rowData[65] = inv_calc.getFicBasAmount();
                        rowData[66] = inv_calc.getFicChemTrtChg();
                        rowData[67] = inv_calc.getFicSpiralChg();
                        rowData[68] = inv_calc.getFicPinChg();
                        rowData[69] = inv_calc.getFicSeamChg();
                        rowData[70] = inv_calc.getFicInsInd();
                        rowData[71] = inv_calc.getFicInsAmt();
                        rowData[72] = inv_calc.getFicGST();
                        rowData[73] = inv_calc.getFicDiscPer();
                        rowData[74] = inv_calc.getFicDiscAmt();
                        rowData[75] = inv_calc.getFicDiscBasamt();
                        rowData[76] = inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[77] = rsTmp.getString("PR_SCHEDULE_MONTH");
                    rowData[78] = rsTmp.getString("PR_REFERENCE");
                    rowData[79] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    rowData[80] = rsTmp.getString("PR_PO_NO");
                    rowData[81] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    rowData[82] = rsTmp.getString("PR_ORDER_REMARK");
                    rowData[83] = rsTmp.getString("PR_PIECE_REMARK");
                    rowData[84] = rsTmp.getString("PR_REJECTED_FLAG");
                    rowData[85] = rsTmp.getString("PR_REJECTED_REMARK");
                    rowData[86] = rsTmp.getString("PR_DIVERSION_FLAG");
                    rowData[87] = rsTmp.getString("PR_DIVERSION_REASON");
                    rowData[88] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    rowData[89] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    rowData[90] = rsTmp.getString("INCHARGE_NAME");
                    rowData[91] = rsTmp.getDouble("PR_ADJUSTABLE_LENGTH");
                    rowData[92] = rsTmp.getDouble("PR_ADJUSTABLE_WIDTH");
                    rowData[93] = rsTmp.getDouble("PR_ADJUSTABLE_GSM");
                    rowData[94] = rsTmp.getDouble("PR_ADJUSTABLE_WEIGHT");

                    DataModelPieceMFGRejection.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridGIDC_SDF_Status() {
        DataModelGIDC_SDF = new EITLTableModel();
        TableGIDC_SDF.removeAll();
        TableGIDC_SDF.setModel(DataModelGIDC_SDF);

        TableGIDC_SDF.setAutoResizeMode(TableGIDC_SDF.AUTO_RESIZE_OFF);

        DataModelGIDC_SDF.addColumn("Sr No");
        DataModelGIDC_SDF.addColumn("GIDC Stage");
        DataModelGIDC_SDF.addColumn("Party Code");
        DataModelGIDC_SDF.addColumn("Party Name");
        DataModelGIDC_SDF.addColumn("Piece No");
        DataModelGIDC_SDF.addColumn("Machine No");
        DataModelGIDC_SDF.addColumn("Position No");
        DataModelGIDC_SDF.addColumn("Position No(Design)");
        DataModelGIDC_SDF.addColumn("Position Desc");
        DataModelGIDC_SDF.addColumn("UPN");
        DataModelGIDC_SDF.addColumn("Order No");
        DataModelGIDC_SDF.addColumn("Order Date");
        DataModelGIDC_SDF.addColumn("Product Code");
        DataModelGIDC_SDF.addColumn("Bill Product Code");
        DataModelGIDC_SDF.addColumn("Product Desc");
        DataModelGIDC_SDF.addColumn("Group");
        DataModelGIDC_SDF.addColumn("Style");
        DataModelGIDC_SDF.addColumn("Bill Style");
        DataModelGIDC_SDF.addColumn("Length");
        DataModelGIDC_SDF.addColumn("Bill Length");
        DataModelGIDC_SDF.addColumn("Width");
        DataModelGIDC_SDF.addColumn("Bill Width");
        DataModelGIDC_SDF.addColumn("GSM");
        DataModelGIDC_SDF.addColumn("Tender GSM");
        DataModelGIDC_SDF.addColumn("Bill GSM");
        DataModelGIDC_SDF.addColumn("Sq.Mtr");
        DataModelGIDC_SDF.addColumn("Bill Sq.Mtr");
        DataModelGIDC_SDF.addColumn("Thortical Weight");
        DataModelGIDC_SDF.addColumn("Tender Weight");
        DataModelGIDC_SDF.addColumn("Bill Weight");
        DataModelGIDC_SDF.addColumn("SYN(%)");
        DataModelGIDC_SDF.addColumn("Req Month");
        DataModelGIDC_SDF.addColumn("OC MONTH");
        DataModelGIDC_SDF.addColumn("CURR SCH MONTH");
        DataModelGIDC_SDF.addColumn("Instruction Date");
        DataModelGIDC_SDF.addColumn("Spiral Date");
        DataModelGIDC_SDF.addColumn("Assembly Date");
        DataModelGIDC_SDF.addColumn("Ready to Despatch Date");
        DataModelGIDC_SDF.addColumn("Despatched Date");
        DataModelGIDC_SDF.addColumn("Rate Indicator");
        DataModelGIDC_SDF.addColumn("Rate");

        DataModelGIDC_SDF.addColumn("Surcharge Per");
        DataModelGIDC_SDF.addColumn("Surcharge Rate");
        DataModelGIDC_SDF.addColumn("Gross Rate");

        DataModelGIDC_SDF.addColumn("Basic Amt");
        DataModelGIDC_SDF.addColumn("CHEM TRT CHG");
        DataModelGIDC_SDF.addColumn("SPIRAL CHG");
        DataModelGIDC_SDF.addColumn("Pin CHG");
        DataModelGIDC_SDF.addColumn("Seam CHG");
        DataModelGIDC_SDF.addColumn("INS Ind");
        DataModelGIDC_SDF.addColumn("INS Amt");
        DataModelGIDC_SDF.addColumn("GST");
        DataModelGIDC_SDF.addColumn("Disc Per");
        DataModelGIDC_SDF.addColumn("Disc Amt");
        DataModelGIDC_SDF.addColumn("Disc Bas Amt");
        DataModelGIDC_SDF.addColumn("Amount");
        DataModelGIDC_SDF.addColumn("Referance");
        DataModelGIDC_SDF.addColumn("REF Date");
        DataModelGIDC_SDF.addColumn("PO No");
        DataModelGIDC_SDF.addColumn("PO Date");
        DataModelGIDC_SDF.addColumn("OA No");
        DataModelGIDC_SDF.addColumn("OA Date");
        DataModelGIDC_SDF.addColumn("OC No");
        DataModelGIDC_SDF.addColumn("OC Date");
        DataModelGIDC_SDF.addColumn("Order Remark");
        DataModelGIDC_SDF.addColumn("Piece Remark");
        DataModelGIDC_SDF.addColumn("Rejected");
        DataModelGIDC_SDF.addColumn("Rejected Remark");
        DataModelGIDC_SDF.addColumn("Diversion");
        DataModelGIDC_SDF.addColumn("Diversion Reason");
        DataModelGIDC_SDF.addColumn("PartyCode Original");
        DataModelGIDC_SDF.addColumn("PieceNo Original");
        DataModelGIDC_SDF.addColumn("Incharge");
        DataModelGIDC_SDF.addColumn("Obsolete Status");
        DataModelGIDC_SDF.addColumn("Obsolete Date");
        DataModelGIDC_SDF.addColumn("Obsolete Reason");
        DataModelGIDC_SDF.addColumn("RM Code Length");
        DataModelGIDC_SDF.addColumn("RM Code Length Weight");
        DataModelGIDC_SDF.addColumn("RM Code Waste Length Weight");
        DataModelGIDC_SDF.addColumn("RM Code WEFT");
        DataModelGIDC_SDF.addColumn("RM Code WEFT Weight");
        DataModelGIDC_SDF.addColumn("RM Code Waste WEFT Weight");

        DataModelGIDC_SDF.TableReadOnly(true);
        TableGIDC_SDF.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateGIDC_SDF_Status() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridGIDC_SDF_Status(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND GIDC_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND GIDC_SDF_INST_DATE >= '" + FromDate + "' AND GIDC_SDF_INST_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND GIDC_SDF_INST_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND GIDC_SDF_INST_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND GIDC_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND GIDC_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND GIDC_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND GIDC_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND GIDC_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND GIDC_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND GIDC_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND GIDC_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND GIDC_GSM >= '" + txtgsmfrom.getText().trim() + "' AND GIDC_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND GIDC_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND GIDC_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (GIDC_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR GIDC_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (GIDC_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR GIDC_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            if (!cmbGIDCStatus.getSelectedItem().equals("ALL")) {
                cndtn += " AND GIDC_STAGE = '" + cmbGIDCStatus.getSelectedItem() + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

//            strSQL = "SELECT * FROM "
//                    + "(SELECT * FROM PRODUCTION.GIDC_FELT_PIECE_REGISTER "
//                    + " WHERE GIDC_STAGE NOT IN ('CANCELED') "
//                    + gidc_cndtn + " "
//                    + ") AS GIDC "
//                    + "LEFT JOIN  "
//                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
//                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
//                    + " AND PR_PIECE_STAGE IN ('GIDC') "
//                    + cndtn + " "
//                    + ") AS PR "
//                    + "ON GIDC.GIDC_PARTY_CODE=PR.PR_PARTY_CODE AND GIDC.GIDC_PIECE_NO=PR.PR_PIECE_NO "
            strSQL = "SELECT * FROM "
                    + "(SELECT G.*,P.* FROM PRODUCTION.GIDC_FELT_PIECE_REGISTER G,PRODUCTION.FELT_SALES_PIECE_REGISTER P "
                    + " WHERE GIDC_PIECE_NO=PR_PIECE_NO "
                    + " AND GIDC_STAGE NOT IN ('CANCELED') AND PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('GIDC') "
                    + cndtn + " "
                    + ") AS GIDC "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON GIDC.GIDC_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON GIDC.GIDC_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON GIDC.GIDC_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON GIDC.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON GIDC.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " ";

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0, p = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    p = 0;
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "GIDC_THORITICAL_WEIGHT", "0"));
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_SDF_INST_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_SPIRALING_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_ASSEMBLY_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_READY_TO_DESPATCH_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_DESPATCH_DATE"));
                    p++;
                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("GIDC_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("GIDC_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where 	PR_PIECE_NO='" + rsTmp.getString("GIDC_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;
                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_RMCODE_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_RMCODE_LENGTH_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_WASTE_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_RMCODE_WEFT");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_RMCODE_WEFT_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("GIDC_WASTE_WEFT");
                    p++;

//                    rowData[0] = Integer.toString(cnt);
//                    rowData[1] = rsTmp.getString("GIDC_STAGE");
//                    rowData[2] = rsTmp.getString("GIDC_PARTY_CODE");
//                    rowData[3] = rsTmp.getString("PARTY_NAME");
//                    rowData[4] = rsTmp.getString("GIDC_PIECE_NO");
//                    rowData[5] = rsTmp.getString("PR_MACHINE_NO");
//                    rowData[6] = rsTmp.getString("PR_POSITION_NO");
//                    rowData[7] = rsTmp.getString("POSITION_DESIGN_NO");
//                    rowData[8] = rsTmp.getString("POSITION_DESC");
//                    rowData[9] = rsTmp.getString("PR_UPN");
//                    rowData[10] = rsTmp.getString("PR_DOC_NO");
//                    rowData[11] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
//                    rowData[12] = rsTmp.getString("GIDC_PRODUCT_CODE");
//                    rowData[13] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    rowData[14] = rsTmp.getString("PRODUCT_DESC");
//                    rowData[15] = rsTmp.getString("GIDC_GROUP");
//                    rowData[16] = rsTmp.getString("GIDC_STYLE");
//                    rowData[17] = rsTmp.getString("PR_BILL_STYLE");
//                    rowData[18] = rsTmp.getString("GIDC_LENGTH");
//                    rowData[19] = rsTmp.getString("PR_BILL_LENGTH");
//                    rowData[20] = rsTmp.getString("GIDC_WIDTH");
//                    rowData[21] = rsTmp.getString("PR_BILL_WIDTH");
//                    rowData[22] = rsTmp.getString("GIDC_GSM");
//                    rowData[23] = rsTmp.getString("PR_BILL_GSM");
//                    rowData[24] = rsTmp.getString("GIDC_SQMTR");
//                    rowData[25] = rsTmp.getString("PR_BILL_SQMTR");
//                    rowData[26] = rsTmp.getString("GIDC_THORITICAL_WEIGHT");
//
//                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "GIDC_THORITICAL_WEIGHT", "0"));
//
//                    rowData[27] = rsTmp.getString("PR_BILL_WEIGHT");
//                    rowData[28] = rsTmp.getString("GIDC_SYN_PER");
//                    rowData[29] = rsTmp.getString("PR_REQUESTED_MONTH");
//                    rowData[30] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_SDF_INST_DATE"));
//                    rowData[31] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_SPIRALING_DATE"));
//                    rowData[32] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_ASSEMBLY_DATE"));
//                    rowData[33] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_READY_TO_DESPATCH_DATE"));
//                    rowData[34] = EITLERPGLOBAL.formatDate(rsTmp.getString("GIDC_DESPATCH_DATE"));
//
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("GIDC_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("GIDC_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData[35] = inv_calc.getFicRate();
//                        rowData[36] = inv_calc.getFicBasAmount();
//                        rowData[37] = inv_calc.getFicChemTrtChg();
//                        rowData[38] = inv_calc.getFicSpiralChg();
//                        rowData[39] = inv_calc.getFicPinChg();
//                        rowData[40] = inv_calc.getFicSeamChg();
//                        rowData[41] = inv_calc.getFicInsInd();
//                        rowData[42] = inv_calc.getFicInsAmt();
//                        rowData[43] = inv_calc.getFicGST();
//                        rowData[44] = inv_calc.getFicDiscPer();
//                        rowData[45] = inv_calc.getFicDiscAmt();
//                        rowData[46] = inv_calc.getFicDiscBasamt();
//                        rowData[47] = inv_calc.getFicInvAmt();
//
//                        total_amount = total_amount + inv_calc.getFicInvAmt();
//
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }
//
//                    rowData[48] = rsTmp.getString("PR_SCHEDULE_MONTH");
//                    rowData[49] = rsTmp.getString("PR_REFERENCE");
//                    rowData[50] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
//                    rowData[51] = rsTmp.getString("PR_PO_NO");
//                    rowData[52] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
//                    rowData[53] = rsTmp.getString("PR_ORDER_REMARK");
//                    rowData[54] = rsTmp.getString("PR_PIECE_REMARK");
//                    rowData[55] = rsTmp.getString("PR_REJECTED_FLAG");
//                    rowData[56] = rsTmp.getString("PR_REJECTED_REMARK");
//                    rowData[57] = rsTmp.getString("PR_DIVERSION_FLAG");
//                    rowData[58] = rsTmp.getString("PR_DIVERSION_REASON");
//                    rowData[59] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
//                    rowData[60] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
//                    rowData[61] = rsTmp.getString("INCHARGE_NAME");
//                    rowData[62] = rsTmp.getString("PR_DELINK");
//                    rowData[63] = rsTmp.getString("PR_DELINK_REASON");
//                    rowData[64] = rsTmp.getString("GIDC_RMCODE_LENGTH");
//                    rowData[65] = rsTmp.getString("GIDC_RMCODE_LENGTH_WEIGHT");
//                    rowData[66] = rsTmp.getString("GIDC_WASTE_LENGTH");
//                    rowData[67] = rsTmp.getString("GIDC_RMCODE_WEFT");
//                    rowData[68] = rsTmp.getString("GIDC_RMCODE_WEFT_WEIGHT");
//                    rowData[69] = rsTmp.getString("GIDC_WASTE_WEFT");
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtTotalWeight_GIDC_SDF.setText(df.format(total_weight));
                    txtTotalAmount_GIDC_SDF.setText(df.format(total_amount));

                    DataModelGIDC_SDF.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateOCMonth() {
        try {
            String sql = "";
            sql = "SELECT DISTINCT PR_OC_MONTHYEAR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' "
                    + " ORDER BY PR_OC_LAST_DDMMYY DESC";
            ResultSet t = data.getResult(sql);
            t.first();
            cmbOC = new EITLComboModel();
            cmbocmonth.removeAllItems();
            cmbocmonth.setModel(cmbOC);
            ComboData aData = new ComboData();
            aData.strCode = "";
            aData.Text = "";
            cmbOC.addElement(aData);
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {

                    aData.strCode = t.getString("PR_OC_MONTHYEAR");
                    aData.Text = t.getString("PR_OC_MONTHYEAR");
                    cmbOC.addElement(aData);
                    t.next();
                }
            }
            cmbStage = new EITLComboModel();
            cmbstage.removeAllItems();
            cmbstage.setModel(cmbStage);

            aData.strCode = "ALL";
            aData.Text = "ALL";
            cmbStage.addElement(aData);
            aData.strCode = "WIP";
            aData.Text = "WIP";
            cmbStage.addElement(aData);
            aData.strCode = "BSR";
            aData.Text = "BSR";
            cmbStage.addElement(aData);
            aData.strCode = "IN STOCK";
            aData.Text = "IN STOCK";
            cmbStage.addElement(aData);
            aData.strCode = "INVOICED";
            aData.Text = "INVOICED";
            cmbStage.addElement(aData);

            aData.strCode = "PLANNING";
            aData.Text = "PLANNING";
            cmbStage.addElement(aData);

            aData.strCode = "DIVERTED";
            aData.Text = "DIVERTED";
            cmbStage.addElement(aData);

            aData.strCode = "NOT INVOICED";
            aData.Text = "NOT INVOICED";
            cmbStage.addElement(aData);

            aData.strCode = "CANCELED";
            aData.Text = "CANCELED";
            cmbStage.addElement(aData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateCapacityRequestedMonth() {
        try {
            String sql = "";
            sql = "SELECT DISTINCT PR_REQUESTED_MONTH FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_REQUESTED_MONTH IS NOT NULL AND PR_REQUESTED_MONTH!='' AND PR_REQUESTED_MONTH!='0' AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','SEAMING','FINISHING','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') AND PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)"
                    + " ORDER BY PR_REQ_MTH_LAST_DDMMYY DESC";
            ResultSet t = data.getResult(sql);
            t.first();
            cmbReqCP = new EITLComboModel();

            cmbcapacityreqmonth.removeAllItems();
            cmbcapacityreqmonth.setModel(cmbReqCP);
            ComboData aData = new ComboData();
            aData.strCode = "";
            aData.Text = "";
            cmbReqCP.addElement(aData);
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {

                    aData.strCode = t.getString("PR_REQUESTED_MONTH");
                    aData.Text = t.getString("PR_REQUESTED_MONTH");
                    cmbReqCP.addElement(aData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateCapacityOCMonth() {
        try {
            String sql = "";
            sql = "SELECT DISTINCT PR_OC_MONTHYEAR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR !='' AND PR_OC_MONTHYEAR!='0' AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','MENDING','NEEDLING','SEAMING','FINISHING','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') AND PR_PRIORITY_HOLD_CAN_FLAG IN (0,1,2,3,4,5)"
                    + " ORDER BY PR_OC_LAST_DDMMYY DESC";
            ResultSet t = data.getResult(sql);
            t.first();
            cmbOCCP = new EITLComboModel();

            cmbcapacityOCmonth.removeAllItems();
            cmbcapacityOCmonth.setModel(cmbOCCP);
            ComboData aData = new ComboData();
            aData.strCode = "";
            aData.Text = "";
            cmbOCCP.addElement(aData);
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {

                    aData.strCode = t.getString("PR_OC_MONTHYEAR");
                    aData.Text = t.getString("PR_OC_MONTHYEAR");
                    cmbOCCP.addElement(aData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridCurrentScheduleMonth() {
        try {
            ResultSet rs;
            DataModelCurrentScheduleMonth = new EITLTableModel();
            TableCS.removeAll();
            TableCS.setModel(DataModelCurrentScheduleMonth);
            TableCS.setAutoResizeMode(TableCS.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\",'' AS \"Group Name\","
                    + "'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\",'' AS \"Machine No\","
                    + "'' AS \"Position No\",'' AS \"Position No(Design)\",'' AS \"Position Desc\",'' AS \"UPN\","
                    + "'' AS \"Order No\",'' AS \"Order Date\",'' AS \"Product Code\",'' AS \"Bill Product Code\","
                    + "'' AS \"Product Desc\",'' AS \"Group\",'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\","
                    + "'' AS \"Bill Length\",'' AS \"Actual Length\",'' AS \"Width\",'' AS \"Bill Width\","
                    + "'' AS \"Actual Width\",'' AS \"GSM\",'' AS \"Tender GSM\","
                    + "'' AS \"Bill GSM\",'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\","
                    + "'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\",'' AS \"Actual Weight\",'' AS \"SYN(%)\","
                    + "'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\",'' AS \"WVG DATE\","
                    + "'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\",'' AS \"WVG WEIGHT_A\","
                    + "'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\",'' AS \"DAYS ORDER_MND\","
                    + "'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\",'' AS \"MND WEIGHT_A\",'' AS \"MND WEIGHT_B\","
                    + "'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\",'' AS \"NDL WEIGHT\",'' AS \"SEAM DATE\","
                    + "'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\",'' AS \"DAYS WRP_WVG\",'' AS \"DAYS WVG_MND\","
                    + "'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\",'' AS \"DAYS WH_STOCK\",'' AS \"Packing Doc No\","
                    + "'' AS \"Packing Doc Date\",'' AS \"Bale No\",'' AS \"Bale Date\",'' AS \"DAYS WH_PACKED\","
                    + "'' AS \"Invoice No\",'' AS \"Invoice Date\",'' AS \"Invoice Amount\",'' AS \"DAYS WH_INVOICED\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\","
                    + "'' AS \"PO Date\",'' AS \"OA NO\",'' AS \"OA DATA\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\",'' AS \"Piece Remark\",'' AS \"Rejected\","
                    + "'' AS \"Rejected Remark\",'' AS \"Diversion\",'' AS \"Diversion Reason\","
                    + "'' AS \"PartyCode Original\",'' AS \"PieceNo Original\",'' AS \"Incharge\","
                    + "'' AS \"Obsolete Status\",'' AS \"Obsolete Date\","
                    + "'' AS \"Obsolete Reason\",'' AS \"Bale ReOpen Flag\",'' AS \"GR No\","
                    + "'' AS \"GR Date\",'' AS \"GR Remark\",'' AS \"GR Flag\",'' AS \"Inward No\","
                    + "'' AS \"Rack No\",'' AS \"Location\",'' AS \"Hold Date\",'' AS \"Hold Reason\","
                    + "'' AS \"Release Date\",'' AS \"Diversion Flag\",'' AS \"Diversion Reason\","
                    + "'' AS \"Days Status\",'' AS \"Current Schedule Remark\","
                    //Added by GAURANG on 15/05/2019 based on Change Request dated 09/05/2019
                    + "'' AS \"Amount/Invoice Value\",'' AS \"Expected PI Date\",'' AS \"Actual PI Date\","
                    + "'' AS \"Expected Payment/Chq Receive Date\",'' AS \"Actual Payment/Chq Receive Date\","
                    + "'' AS \"Expected Despatch Date\",'' AS \"Actual Despatch Date\","
                    + "'' AS \"Special Request Month\",'' AS \"Special Request Date\","
                    + "'' AS \"Original Requested Month\" "
                    //Till This
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelCurrentScheduleMonth.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelCurrentScheduleMonth.addColumn(rsInfo.getColumnName(i));
                DataModelCurrentScheduleMonth.SetReadOnly(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DataModelCurrentScheduleMonth.TableReadOnly(true);
        final TableColumnModel columnModel = TableCS.getColumnModel();
        for (int column = 0; column < TableCS.getColumnCount(); column++) {
            int width = 100; // Min width
            for (int row = 0; row < TableCS.getRowCount(); row++) {
                TableCellRenderer renderer = TableCS.getCellRenderer(row, column);
                Component comp = TableCS.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
        TableCS.getColumnModel().getColumn(0).setMaxWidth(50);

        TableCS.getColumnModel().getColumn(8).setMinWidth(150);
    }

    private void GenerateCurrentScheduleMonth() {
        String cndtn = "";
        String grp_cndtn = "";

        try {
            FormatGridCurrentScheduleMonth(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR SUBSTRING(PR_PIECE_NO,1,5) = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            try {
                if (!cmbCSMonth.getSelectedItem().toString().equalsIgnoreCase("")) {
                    cndtn += " AND PR_CURRENT_SCH_MONTH = '" + cmbCSMonth.getSelectedItem().toString() + "' ";
                } else {
                    cndtn += " AND PR_CURRENT_SCH_MONTH IS NOT NULL AND PR_CURRENT_SCH_MONTH!='' ";
                }
            } catch (Exception a) {
                cndtn += " AND PR_CURRENT_SCH_MONTH IS NOT NULL AND PR_CURRENT_SCH_MONTH!='' ";
            }

            try {
                if (!cmbCSOCmonth.getSelectedItem().toString().equalsIgnoreCase("")) {
                    cndtn += " AND PR_OC_MONTHYEAR = '" + cmbCSOCmonth.getSelectedItem().toString() + "' ";
                } else {
                    cndtn += " AND PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' ";
                }
            } catch (Exception a) {
                cndtn += " AND PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' ";
            }

            if (cmbCSSpillMonth.getSelectedItem().toString().equals("Yes")) {
                cndtn += " AND DATEDIFF(PR_CURRENT_SCH_LAST_DDMMYY,PR_OC_LAST_DDMMYY)>0 ";
            }
            if (cmbCSSpillMonth.getSelectedItem().toString().equals("No")) {
                cndtn += " AND DATEDIFF(PR_CURRENT_SCH_LAST_DDMMYY,PR_OC_LAST_DDMMYY)<=0 ";
            }

            try {
                if (!cmbCSSPOmonth.getSelectedItem().toString().equalsIgnoreCase("")) {
                    cndtn += " AND PR_SP_MONTHYEAR = '" + cmbCSSPOmonth.getSelectedItem().toString() + "' ";
                } else {
                    //cndtn += " AND PR_SP_MONTHYEAR IS NOT NULL AND PR_SP_MONTHYEAR!='' ";
                    cndtn += " ";
                }
            } catch (Exception a) {
                cndtn += " AND PR_SP_MONTHYEAR IS NOT NULL AND PR_SP_MONTHYEAR!='' ";
            }

            if (cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("IN STOCK")
                    || cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("BSR")
                    || cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("INVOICED")
                    || cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("PLANNING")
                    || cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("DIVERTED")
                    || cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("CANCELED")) {
                cndtn += " AND PR_PIECE_STAGE = '" + cmbCSStage.getSelectedItem().toString() + "' ";
            }
            if (cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("WIP")) {
                cndtn += " AND PR_PIECE_STAGE IN ('WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') ";
            }
            if (cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("ALL")) {
                cndtn += " AND PR_PIECE_STAGE IN ('WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','IN STOCK','BSR','INVOICED','EXP-INVOICE','BOOKING','PLANNING','DIVERTED','CANCELED','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') ";
            }

            if (cmbCSStage.getSelectedItem().toString().equalsIgnoreCase("NOT INVOICED")) {
                cndtn += " AND PR_PIECE_STAGE IN ('WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','IN STOCK','BSR','BOOKING','PLANNING','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') ";
            }
            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE 1=1 "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    //Added by GAURANG on 15/05/2019 based on Change Request dated 09/05/2019
                    + "LEFT JOIN   "
                    + "(SELECT PIECE_NO AS PRO_PIECE_NO,PARTY_CD AS PRO_PARTY_CODE,MIN(PROFORMA_DATE) AS PRO_PROFORMA_DATE,MAX(PROFORMA_DATE) AS PRO_MAX_PROFORMA_DATE,GROUP_CONCAT(D.PROFORMA_NO,' (',DATE_FORMAT(PROFORMA_DATE, '%d/%m/%Y'),') ') AS PRO_NO_DATE "
                    + "FROM PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL D, PRODUCTION.FELT_PROFORMA_INVOICE_HEADER H "
                    + "WHERE H.PROFORMA_NO = D.PROFORMA_NO AND APPROVED =1 AND CANCELED =0 GROUP BY PIECE_NO,PARTY_CD) AS PRO   "
                    + "ON PR.PR_PIECE_NO=PRO.PRO_PIECE_NO AND PR.PR_PARTY_CODE=PRO.PRO_PARTY_CODE   "
                    + "WHERE 1=1 "
                    //Till This
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_ACTUAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_STOCK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PKG_DP_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PKG_DP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_BALE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PACKED_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WH_PACKED");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_INVOICE_AMOUNT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STOCK_INVOICE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("BALE_REOPEN_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SALES_RETURNS_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_REMARKS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SALES_RETURNS_FLG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_INWARD_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_RACK_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LOCATION");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_HOLD_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_HOLD_REASON");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_RELEASE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERTED_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_CURRENT_MONTH_IT_REMARK");
                    p++;

                    //Added by GAURANG on 15/05/2019 based on Change Request dated 09/05/2019
                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;
                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_EXP_PI_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PRO_PROFORMA_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_EXP_PAY_CHQRC_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ACT_PAY_CHQRC_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_EXP_DESPATCH_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_INVOICE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_SPL_REQUEST_MONTHYEAR");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPL_REQUEST_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQ_MONTH_ORIGINAL");
                    p++;
                    //Till This

                    DataModelCurrentScheduleMonth.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GenerateCSMonth() {
        try {
            String sql = "";
            sql = "SELECT DISTINCT PR_CURRENT_SCH_MONTH FROM (SELECT PR_CURRENT_SCH_MONTH FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_CURRENT_SCH_MONTH IS NOT NULL AND PR_CURRENT_SCH_MONTH!='' "
                    + " ORDER BY PR_CURRENT_SCH_LAST_DDMMYY DESC) AS A";
            ResultSet t = data.getResult(sql);
            t.first();
            cmbCS = new EITLComboModel();
            cmbCSMonth.removeAllItems();
            cmbCSMonth.setModel(cmbCS);
            ComboData aData = new ComboData();
            aData.strCode = "";
            aData.Text = "";
            cmbCS.addElement(aData);
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {

                    aData.strCode = t.getString("PR_CURRENT_SCH_MONTH");
                    aData.Text = t.getString("PR_CURRENT_SCH_MONTH");
                    cmbCS.addElement(aData);
                    t.next();
                }
            }
            cmbCSStageModel = new EITLComboModel();
            cmbCSStage.removeAllItems();
            cmbCSStage.setModel(cmbCSStageModel);

            aData.strCode = "ALL";
            aData.Text = "ALL";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "WIP";
            aData.Text = "WIP";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "BSR";
            aData.Text = "BSR";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "IN STOCK";
            aData.Text = "IN STOCK";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "INVOICED";
            aData.Text = "INVOICED";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "PLANNING";
            aData.Text = "PLANNING";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "DIVERTED";
            aData.Text = "DIVERTED";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "NOT INVOICED";
            aData.Text = "NOT INVOICED";
            cmbCSStageModel.addElement(aData);

            aData.strCode = "CANCELED";
            aData.Text = "CANCELED";
            cmbCSStageModel.addElement(aData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateCSOCMonth() {
        try {
            String sql = "";
            sql = "SELECT DISTINCT PR_OC_MONTHYEAR FROM (SELECT PR_OC_MONTHYEAR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_OC_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' "
                    + " ORDER BY PR_OC_LAST_DDMMYY DESC) AS A";
            ResultSet t = data.getResult(sql);
            t.first();
            cmbCSOC = new EITLComboModel();
            cmbCSOCmonth.removeAllItems();
            cmbCSOCmonth.setModel(cmbCSOC);
            ComboData aData = new ComboData();
            aData.strCode = "";
            aData.Text = "";
            cmbCSOC.addElement(aData);
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {

                    aData.strCode = t.getString("PR_OC_MONTHYEAR");
                    aData.Text = t.getString("PR_OC_MONTHYEAR");
                    cmbCSOC.addElement(aData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateCSSPOMonth() {
        try {
            String sql = "";
            sql = "SELECT DISTINCT PR_SP_MONTHYEAR FROM (SELECT PR_SP_MONTHYEAR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_SP_MONTHYEAR IS NOT NULL AND PR_OC_MONTHYEAR!='' "
                    + " ORDER BY PR_SP_LAST_DDMMYY DESC) AS A";
            ResultSet t = data.getResult(sql);
            t.first();
            cmbCSSPO = new EITLComboModel();
            cmbCSSPOmonth.removeAllItems();
            cmbCSSPOmonth.setModel(cmbCSSPO);
            ComboData aData = new ComboData();
            aData.strCode = "";
            aData.Text = "";
            cmbCSSPO.addElement(aData);
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {

                    aData.strCode = t.getString("PR_SP_MONTHYEAR");
                    aData.Text = t.getString("PR_SP_MONTHYEAR");
                    cmbCSSPO.addElement(aData);
                    t.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridWIPSalesView() {
        try {
            ResultSet rs;
            DataModelWIPProduction = new EITLTableModel();
            TableWIPProd_Production.removeAll();
            TableWIPProd_Production.setModel(DataModelWIPProduction);
            TableWIPProd_Production.setAutoResizeMode(TableWIPProd_Production.AUTO_RESIZE_OFF);

            String sql = "SELECT '' AS \"Sr No\",'' AS \"Piece Stage\",'' AS \"WIP Status\",'' AS \"Group Name\","
                    + "'' AS \"Party Code\",'' AS \"Party Name\",'' AS \"Piece No\",'' AS \"Machine No\","
                    + "'' AS \"Position No\",'' AS \"Position No(Design)\",'' AS \"Position Desc\",'' AS \"UPN\","
                    + "'' AS \"Order No\",'' AS \"Order Date\",'' AS \"Product Code\",'' AS \"Bill Product Code\","
                    + "'' AS \"Product Desc\",'' AS \"Group\",'' AS \"Style\",'' AS \"Bill Style\",'' AS \"Length\","
                    + "'' AS \"Bill Length\",'' AS \"Width\",'' AS \"Bill Width\",'' AS \"GSM\",'' AS \"Tender GSM\","
                    + "'' AS \"Bill GSM\","
                    + "'' AS \"Sq.Mtr\",'' AS \"Bill Sq.Mtr\",'' AS \"Thortical Weight\",'' AS \"Tender Weight\","
                    + "'' AS \"Bill Weight\","
                    + "'' AS \"SYN(%)\",'' AS \"Req Month\",'' AS \"OC MONTH\",'' AS \"CURR SCH MONTH\","
                    + "'' AS \"WARP DATE\",'' AS \"ORD VS WARP DAYS\","
                    + "'' AS \"WVG DATE\",'' AS \"DAYS ORDER_WVG\",'' AS \"WVG LAYER_REMARK\",'' AS \"WVG WEIGHT\","
                    + "'' AS \"WVG WEIGHT_A\",'' AS \"WVG WEIGHT_B\",'' AS \"SPLICE DATE\",'' AS \"MND DATE\","
                    + "'' AS \"DAYS ORDER_MND\",'' AS \"MND LAYER_REMARK\",'' AS \"MND WEIGHT\",'' AS \"MND WEIGHT_A\","
                    + "'' AS \"MND WEIGHT_B\",'' AS \"NDL DATE\",'' AS \"DAYS ORDER_NDL\",'' AS \"NDL WEIGHT\","
                    + "'' AS \"SEAM DATE\",'' AS \"FNSG DATE\",'' AS \"DAYS ORDER_FNSG\",'' AS \"DAYS WRP_WVG\","
                    + "'' AS \"DAYS WVG_MND\",'' AS \"DAYS MND_NDL\",'' AS \"DAYS NDL_FNSG\","
                    + "'' AS \"Rate Indicator\","
                    + "'' AS \"Rate\","
                    + "'' AS \"Surcharge Per\",'' AS \"Surcharge Rate\",'' AS \"Gross Rate\","
                    + "'' AS \"Basic Amt\",'' AS \"CHEM TRT CHG\",'' AS \"SPIRAL CHG\",'' AS \"Pin CHG\","
                    + "'' AS \"Seam CHG\",'' AS \"INS Ind\",'' AS \"INS Amt\",'' AS \"GST\","
                    + "'' AS \"TCS Per\",'' AS \"TCS Amt\","
                    + "'' AS \"Disc Per\",'' AS \"Disc Amt\",'' AS \"Disc Bas Amt\",'' AS \"Amount\","
                    + "'' AS \"Referance\",'' AS \"REF Date\",'' AS \"PO No\",'' AS \"PO Date\",'' AS \"Material Code\","
                    + "'' AS \"OA NO\",'' AS \"OA DATE\",'' AS \"OC NO\",'' AS \"OC DATE\","
                    + "'' AS \"Order Remark\","
                    + "'' AS \"Piece Remark\",'' AS \"Rejected\",'' AS \"Rejected Remark\",'' AS \"Diversion\","
                    + "'' AS \"Diversion Reason\",'' AS \"PartyCode Original\",'' AS \"PieceNo Original\","
                    + "'' AS \"Incharge\",'' AS \"Obsolete Status\",'' AS \"Obsolete Date\","
                    + "'' AS \"Obsolete Reason\",'' AS \"Days Status\",'' AS \"Picks Theoritical\" "
                    + " FROM DUAL";
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModelWIPProduction.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelWIPProduction.addColumn(rsInfo.getColumnName(i));
                DataModelWIPProduction.SetReadOnly(i);
            }
            DataModelWIPProduction.TableReadOnly(true);
            final TableColumnModel columnModel = TableWIPProd_Production.getColumnModel();
            for (int column = 0; column < TableWIPProd_Production.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < TableWIPProd_Production.getRowCount(); row++) {
                    TableCellRenderer renderer = TableWIPProd_Production.getCellRenderer(row, column);
                    Component comp = TableWIPProd_Production.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 1, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        DataModelProduction = new EITLTableModel();
//        TableProduction.removeAll();
//        TableProduction.setModel(DataModelProduction);
//
//        TableProduction.setAutoResizeMode(TableProduction.AUTO_RESIZE_OFF);
//
//        DataModelProduction.addColumn("Sr No");
//        DataModelProduction.addColumn("Piece Stage");
//        DataModelProduction.addColumn("WIP Status");
//        DataModelProduction.addColumn("Group Name");
//        DataModelProduction.addColumn("Party Code");
//        DataModelProduction.addColumn("Party Name");
//        DataModelProduction.addColumn("Piece No");
//        DataModelProduction.addColumn("Machine No");
//        DataModelProduction.addColumn("Position No");
//        DataModelProduction.addColumn("Position No(Design)");
//        DataModelProduction.addColumn("Position Desc");
//        DataModelProduction.addColumn("UPN");
//        DataModelProduction.addColumn("Order No");
//        DataModelProduction.addColumn("Order Date");
//        DataModelProduction.addColumn("Product Code");
//        DataModelProduction.addColumn("Bill Product Code");
//        DataModelProduction.addColumn("Product Desc");
//        DataModelProduction.addColumn("Group");
//        DataModelProduction.addColumn("Style");
//        DataModelProduction.addColumn("Bill Style");
//        DataModelProduction.addColumn("Length");
//        DataModelProduction.addColumn("Bill Length");
//        DataModelProduction.addColumn("Width");
//        DataModelProduction.addColumn("Bill Width");
//        DataModelProduction.addColumn("GSM");
//        DataModelProduction.addColumn("Bill GSM");
//        DataModelProduction.addColumn("Sq.Mtr");
//        DataModelProduction.addColumn("Bill Sq.Mtr");
//        DataModelProduction.addColumn("Thortical Weight");
//        DataModelProduction.addColumn("Bill Weight");
//        DataModelProduction.addColumn("SYN(%)");
//        DataModelProduction.addColumn("Req Month");
//        DataModelProduction.addColumn("WARP DATE");
//        DataModelProduction.addColumn("ORD VS WARP DAYS");
//        DataModelProduction.addColumn("WVG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_WVG");
//        DataModelProduction.addColumn("WVG LAYER_REMARK");
//        DataModelProduction.addColumn("WVG WEIGHT");
//        DataModelProduction.addColumn("WVG WEIGHT_A");
//        DataModelProduction.addColumn("WVG WEIGHT_B");
//        DataModelProduction.addColumn("SPLICE DATE");
//        DataModelProduction.addColumn("MND DATE");
//        DataModelProduction.addColumn("DAYS ORDER_MND");
//        DataModelProduction.addColumn("MND LAYER_REMARK");
//        DataModelProduction.addColumn("MND WEIGHT");
//        DataModelProduction.addColumn("MND WEIGHT_A");
//        DataModelProduction.addColumn("MND WEIGHT_B");
//        DataModelProduction.addColumn("NDL DATE");
//        DataModelProduction.addColumn("DAYS ORDER_NDL");
//        DataModelProduction.addColumn("NDL WEIGHT");
//        DataModelProduction.addColumn("SEAM DATE");
//        DataModelProduction.addColumn("FNSG DATE");
//        DataModelProduction.addColumn("DAYS ORDER_FNSG");
//        DataModelProduction.addColumn("DAYS WRP_WVG");
//        DataModelProduction.addColumn("DAYS WVG_MND");
//        DataModelProduction.addColumn("DAYS MND_NDL");
//        DataModelProduction.addColumn("DAYS NDL_FNSG");
//        DataModelProduction.addColumn("Rate");
//        DataModelProduction.addColumn("Basic Amt");
//        DataModelProduction.addColumn("CHEM TRT CHG");
//        DataModelProduction.addColumn("SPIRAL CHG");
//        DataModelProduction.addColumn("Pin CHG");
//        DataModelProduction.addColumn("Seam CHG");
//        DataModelProduction.addColumn("INS Ind");
//        DataModelProduction.addColumn("INS Amt");
//        DataModelProduction.addColumn("GST");
//        DataModelProduction.addColumn("Disc Per");
//        DataModelProduction.addColumn("Disc Amt");
//        DataModelProduction.addColumn("Disc Bas Amt");
//        DataModelProduction.addColumn("Amount");
//        DataModelProduction.addColumn("Schedule Month");
//        DataModelProduction.addColumn("Referance");
//        DataModelProduction.addColumn("REF Date");
//        DataModelProduction.addColumn("PO No");
//        DataModelProduction.addColumn("PO Date");
//        DataModelProduction.addColumn("Order Remark");
//        DataModelProduction.addColumn("Piece Remark");
//        DataModelProduction.addColumn("Rejected");
//        DataModelProduction.addColumn("Rejected Remark");
//        DataModelProduction.addColumn("Diversion");
//        DataModelProduction.addColumn("Diversion Reason");
//        DataModelProduction.addColumn("PartyCode Original");
//        DataModelProduction.addColumn("PieceNo Original");
//        DataModelProduction.addColumn("Incharge");
//        DataModelProduction.addColumn("Obsolete Status");
//        DataModelProduction.addColumn("Obsolete Reason");
//        DataModelProduction.addColumn("Days Status");
        DataModelWIPProduction.TableReadOnly(true);
        TableWIPProd_Production.getColumnModel().getColumn(0).setMaxWidth(50);

        TableWIPProd_Production.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                    JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int col) {
                Component comp = super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, col);

//                System.out.println("Clm : "+Table_STOCK.getColumn("Obsolete Status").getModelIndex());
                String status = table.getModel().getValueAt(row, TableWIPProd_Production.getColumn("Obsolete Status").getModelIndex()).toString();

                if ("OBSOLETE".equals(status)) {
                    setBackground(new Color(220, 45, 45));
                    setForeground(Color.BLACK);
                } else {
                    setBackground(table.getBackground());
                    setForeground(table.getForeground());
                }

                return (comp);
            }
        });
    }

    private void GenerateWIPSalesView() {
        String FromDate = EITLERPGLOBAL.formatDateDB(txtdatefrom.getText());
        String ToDate = EITLERPGLOBAL.formatDateDB(txtdateto.getText());
        String cndtn = "";
        String grp_cndtn = "";
        double total_weight = 0;
        double total_amount = 0;

        try {
            FormatGridWIPSalesView(); //clear existing content of table
            String PartyCode = txtpartycode.getText().toString();
            ResultSet rsTmp;

            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PR_PARTY_CODE= '" + PartyCode + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                grp_cndtn += " AND GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (!txtdatefrom.getText().trim().equals("") && txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE >= '" + FromDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (txtdatefrom.getText().trim().equals("") && !txtdateto.getText().trim().equals("")) {
                try {
                    cndtn += " AND PR_ORDER_DATE <= '" + ToDate + "' ";
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (!txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            } else if (!txtlengthfrom.getText().trim().equals("") && txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH >= '" + txtlengthfrom.getText().trim() + "' ";
            } else if (txtlengthfrom.getText().trim().equals("") && !txtlengthto.getText().trim().equals("")) {
                cndtn += " AND PR_LENGTH <= '" + txtlengthto.getText().trim() + "' ";
            }

            if (!txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            } else if (!txtwidthfrom.getText().trim().equals("") && txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH >= '" + txtwidthfrom.getText().trim() + "' ";
            } else if (txtwidthfrom.getText().trim().equals("") && !txtwidthto.getText().trim().equals("")) {
                cndtn += " AND PR_WIDTH <= '" + txtwidthto.getText().trim() + "' ";
            }

            if (!txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' AND PR_GSM <='" + txtgsmto.getText().trim() + "' ";
            } else if (!txtgsmfrom.getText().trim().equals("") && txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM >= '" + txtgsmfrom.getText().trim() + "' ";
            } else if (txtgsmfrom.getText().trim().equals("") && !txtgsmto.getText().trim().equals("")) {
                cndtn += " AND PR_GSM <= '" + txtgsmto.getText().trim() + "' ";
            }

            if (!txtpieceno.getText().equals("")) {
                String[] Pieces = txtpieceno.getText().split(",");
                for (int i = 0; i < Pieces.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PIECE_NO = '" + Pieces[i] + "' ";
                    } else {
                        cndtn += " OR PR_PIECE_NO = '" + Pieces[i] + "' ";
                    }
                }
                cndtn += ") ";
            }

            if (!txtproductcode.getText().trim().equals("")) {
                String[] Products = txtproductcode.getText().trim().split(",");
                for (int i = 0; i < Products.length; i++) {
                    if (i == 0) {
                        cndtn += " AND (PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    } else {
                        cndtn += " OR PR_PRODUCT_CODE = '" + Products[i] + "' ";
                    }
                }
                cndtn += ")";
            }

            if (!txtMachineNo.getText().trim().equals("")) {
                cndtn += " AND PR_MACHINE_NO = " + txtMachineNo.getText().trim() + " ";
            }

            if (!txtPosition.getText().trim().equals("")) {
                cndtn += " AND PR_POSITION_NO = " + txtPosition.getText().trim() + " ";
            }

            if (!txtupnno.getText().trim().equals("")) {
                cndtn += " AND PR_UPN = '" + txtupnno.getText().trim() + "' ";
            }

            if (EITLERPGLOBAL.getComboCode(S_ENGINEER) != 0) {
                cndtn += " AND PR_INCHARGE = '" + EITLERPGLOBAL.getComboCode(S_ENGINEER) + "' ";
            }

            if (rbtnWIPProd_PieceStage.isSelected() && !cmbWIPProd_ProductionStage.getSelectedItem().equals("ALL")) {
                cndtn += " AND PR_PIECE_STAGE = '" + cmbWIPProd_ProductionStage.getSelectedItem() + "' ";
            }

            if (rbtnWIPProd_WIPStatus.isSelected() && !cmbWIPProd_WIPStatus.getSelectedItem().equals("ALL")) {
                cndtn += " AND PR_WIP_STATUS = '" + cmbWIPProd_WIPStatus.getSelectedItem() + "' ";
            }
            
            if (chkKeyClientInd.isSelected()){
                grp_cndtn += " AND KEY_CLIENT_IND=1 ";
            }

            String strSQL = "";

            strSQL = "SELECT * FROM "
                    + "(SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + " WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + " AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','GIDC','SPIRALLING','ASSEMBLY','HEAT_SETTING','MARKING','SPLICING') "
                    + cndtn + " "
                    + ") AS PR "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME,COALESCE(KEY_CLIENT_IND,0) AS KEY_CLIENT_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  "
                    + "WHERE APPROVED=1 AND CANCELED=0 ORDER BY DOC_NO DESC) AS QM  "
                    + "ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  "
                    + "ON PR.PR_INCHARGE=IM.INCHARGE_CD "
                    + "WHERE 1=1 "
                    + grp_cndtn + " " + ORDER_BY;

            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[200];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("GROUP_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_POSITION_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESIGN_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_UPN");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DOC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_ORDER_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PRODUCT_DESC");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GROUP");
                    p++;
                    rowData[p] = rsTmp.getString("PR_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_STYLE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_LENGTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_WIDTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_GSM");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_BILL_SQMTR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_THORITICAL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_TENDER_WEIGHT");
                    p++;

                    total_weight = total_weight + Double.parseDouble(UtilFunctions.getString(rsTmp, "PR_THORITICAL_WEIGHT", "0"));

                    rowData[p] = rsTmp.getString("PR_BILL_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_SYN_PER");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REQUESTED_MONTH");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_MONTHYEAR");
                    p++;
                    rowData[p] = rsTmp.getString("PR_CURRENT_SCH_MONTH");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WARP_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WARPED");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_WVG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("WVG_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_WEAVING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SPLICE_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_MND_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MND_LAYER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_A");
                    p++;
                    rowData[p] = rsTmp.getString("PR_MENDING_WEIGHT_B");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_NDL_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_NEEDLING_WEIGHT");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_SEAM_DATE"));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_FNSG_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_ORDER_FNG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WRP_WVG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_WVG_MND");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_MND_NDL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_NDL_FNG");
                    p++;

                    FeltInvCalc inv_calc;
                    try {
                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
                                rsTmp.getString("PR_PIECE_NO"),
                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
                                rsTmp.getString("PR_PARTY_CODE"),
                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
                                EITLERPGLOBAL.getCurrentDateDB());

                        String indicator = data.getStringValueFromDB("SELECT PR_RATE_INDICATOR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where PR_PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'");

                        rowData[p] = indicator;
                        p++;

                        rowData[p] = inv_calc.getFicRate();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_per();
                        p++;

                        rowData[p] = inv_calc.getFicSurcharge_rate();
                        p++;

                        rowData[p] = inv_calc.getFicGrossRate();
                        p++;

                        rowData[p] = inv_calc.getFicBasAmount();
                        p++;
                        rowData[p] = inv_calc.getFicChemTrtChg();
                        p++;
                        rowData[p] = inv_calc.getFicSpiralChg();
                        p++;
                        rowData[p] = inv_calc.getFicPinChg();
                        p++;
                        rowData[p] = inv_calc.getFicSeamChg();
                        p++;
                        rowData[p] = inv_calc.getFicInsInd();
                        p++;
                        rowData[p] = inv_calc.getFicInsAmt();
                        p++;
                        rowData[p] = inv_calc.getFicGST();
                        p++;
                        rowData[p] = inv_calc.getTCS_per();
                        p++;
                        rowData[p] = inv_calc.getTCS_amt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscPer();
                        p++;
                        rowData[p] = inv_calc.getFicDiscAmt();
                        p++;
                        rowData[p] = inv_calc.getFicDiscBasamt();
                        p++;
                        rowData[p] = inv_calc.getFicInvAmt();
                        p++;

                        total_amount = total_amount + inv_calc.getFicInvAmt();

                    } catch (Exception e) {
                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
                    }

                    rowData[p] = rsTmp.getString("PR_REFERENCE");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_REFERENCE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_PO_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_PO_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_MATERIAL_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PR_OA_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OA_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_OC_NO");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OC_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_ORDER_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_REJECTED_REMARK");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_FLAG");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DIVERSION_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO_ORIGINAL");
                    p++;
                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK");
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(rsTmp.getString("PR_OBSOLETE_DATE"));
                    p++;
                    rowData[p] = rsTmp.getString("PR_DELINK_REASON");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DAYS_STATUS");
                    p++;
                    rowData[p] = rsTmp.getString("PR_DESIGN_THEO_PICKS");
                    p++;
                    DecimalFormat df = new DecimalFormat("###.##");
                    txtWIPProd_TotalWeight_production.setText(df.format(total_weight));
                    txtWIPProd_TotalAmount_production.setText(df.format(total_amount));

                    DataModelWIPProduction.addRow(rowData);
                    rsTmp.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GeneratePANReport() {
        String sql = "";
        ResultSet rs;
        DataModelPAN = new EITLTableModel();
        TablePAN.removeAll();
        TablePAN.setModel(DataModelPAN);
        TablePAN.setAutoResizeMode(TablePAN.AUTO_RESIZE_OFF);
        try {
            sql = "SELECT @a:=@a+1 AS 'Sr No', GSTIN_PAN AS 'PAN No',PARTY_CODE AS 'Party Code',PARTY_NAME AS 'Name',COALESCE(GROUP_DESC,'') AS 'Group Desc',CITY_ID AS 'City',COALESCE(AMOUNT_PRE,0) AS 'Previous Year Amt',COALESCE(AMOUNT_CUR,0) AS 'Current Year Amt',DATE_FORMAT(NOW() ,'%d/%m/%Y %H:%I:%S') AS 'Run DateTime' FROM  "
                    + "(SELECT @a:= 0) AS a,(SELECT PM.PARTY_CODE,PM.PARTY_NAME,CITY_ID,GROUP_DESC,PAN_NO,GSTIN_PAN,PARTY_CLOSE_IND,INCHARGE_NAME,COALESCE(AMOUNT_PRE,0) AS AMOUNT_PRE,COALESCE(AMOUNT_CUR,0) AS AMOUNT_CUR FROM "
                    + "(SELECT PARTY_CODE,PARTY_NAME,PAN_NO,SUBSTRING(GSTIN_NO,3,10) AS GSTIN_PAN,INCHARGE_CD,PARTY_CLOSE_IND,CITY_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010 ) AS PM  "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,GROUP_DESC,H.GROUP_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL D, PRODUCTION.FELT_GROUP_MASTER_HEADER H  "
                    + "WHERE D.GROUP_CODE = H.GROUP_CODE  "
                    + "AND H.APPROVED =1 AND H.CANCELED =0) AS GM  "
                    + "ON PM.PARTY_CODE = GM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_NAME,SUBSTRING(GSTIN_NO,3,10) AS PAN,SUM(INVOICE_AMT) AS AMOUNT_PRE FROM PRODUCTION.FELT_SAL_INVOICE_HEADER  "
                    + "WHERE INVOICE_DATE >= '2019-04-01' AND INVOICE_DATE <='2020-03-31' AND APPROVED =1 AND CANCELLED =0  "
                    + "GROUP BY SUBSTRING(GSTIN_NO,3,10)  "
                    //+ "HAVING SUM(INVOICE_AMT) >5000000  "
                    + ") AS PANPRE  "
                    + "ON PANPRE.PAN = PM.GSTIN_PAN  "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_NAME,SUBSTRING(GSTIN_NO,3,10) AS PAN,SUM(INVOICE_AMT) AS AMOUNT_CUR FROM PRODUCTION.FELT_SAL_INVOICE_HEADER  "
                    + "WHERE INVOICE_DATE >= '2020-04-01' AND INVOICE_DATE <='2021-03-31' AND APPROVED =1 AND CANCELLED =0  "
                    + "GROUP BY SUBSTRING(GSTIN_NO,3,10)  "
                    //+ "HAVING SUM(INVOICE_AMT) >5000000  "
                    + ") AS PANCUR  "
                    + "ON PANCUR.PAN = PM.GSTIN_PAN  "
                    + "LEFT JOIN  "
                    + "(SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IC  "
                    + "ON IC.INCHARGE_CD = PM.INCHARGE_CD  "
                    + "WHERE COALESCE(AMOUNT_CUR,0) > 0  "
                    + "ORDER BY GSTIN_PAN,PM.PARTY_CODE "
                    + ") AS SUB ";
            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelPAN.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelPAN.addRow(rowData);
                    rs.next();
                }
                final TableColumnModel columnModel = TablePAN.getColumnModel();
                for (int column = 0; column < TablePAN.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < TablePAN.getRowCount(); row++) {
                        TableCellRenderer renderer = TablePAN.getCellRenderer(row, column);
                        Component comp = TablePAN.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }
            DataModelPAN.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
