/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.TrailPiece;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.FeltSales.common.SelectSortFields;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.Production.FeltCreditNote.clsExcelExporter;
import EITLERP.clsFinYear;
import EITLERP.clsSales_Party;
import EITLERP.data;
//import com.sun.faces.renderkit.html_basic.ButtonRenderer;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.BevelBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.text.JTextComponent;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.NumberFormat;
import jxl.write.WritableCellFormat;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmTrailPieceDisplay extends javax.swing.JApplet {

    private EITLTableModel DataModel_Planning;
    private EITLTableModel DataModel_WIP;
    private EITLTableModel DataModel_STOCK;
    private EITLTableModel DataModel_Dispatch;
    private EITLTableModel DataModel_CapacityPlanning;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer_invoiced = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer_planning = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer_wip = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer_stock = new EITLTableCellRenderer();
    private EITLComboModel cmbIncharge;
    private EITLComboModel modelMonthYear;
    private EITLComboModel cmbFromModel;
    String ORDER_BY = "ORDER BY WIP_PIECE_NO";
    private EITLComboModel cmodelProductGroup;
    private String LOGIN_USER_TYPE = "";
    private EITLERP.FeltSales.Reports.clsExcelExporter exp = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private DecimalFormat df;

    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        cmbIncharge = new EITLComboModel();
        cmodelProductGroup = new EITLComboModel();
        cmbFromModel = new EITLComboModel();
        initComponents();
        GenerateCombo();
        GenerateGroupCombo();
        GenerateYearCombo();
        int CurFinYear = EITLERPGLOBAL.getCurrentFinYear();
        EITLERPGLOBAL.setComboIndex(cmbFromYear, CurFinYear);
        df = new DecimalFormat("0.00");
        df.setMinimumFractionDigits(2);
        df.setMaximumFractionDigits(2);
        lblTitle.setForeground(Color.BLUE);
        btnShowDataActionPerformed(null);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlanning = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblWIP = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblStockBsr = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblDispatch = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnExpToExcelDispatched = new javax.swing.JButton();
        btnExpToExcelPlanning = new javax.swing.JButton();
        btnExpToExcelWIP = new javax.swing.JButton();
        vbtnExpToExcelStock = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnSorting = new javax.swing.JButton();
        btnShowData = new javax.swing.JButton();
        lblPartyName = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbZone = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbProdGroup = new javax.swing.JComboBox();
        btnExpToExcelAll = new javax.swing.JButton();
        lblFromYear = new javax.swing.JLabel();
        cmbFromYear = new javax.swing.JComboBox();
        lblToYear = new javax.swing.JLabel();
        txtToYear = new javax.swing.JTextField();
        lblFromYear1 = new javax.swing.JLabel();
        txtPieceNo = new javax.swing.JTextField();
        txtPieceNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPartyCode = new javax.swing.JTextField();
        txtPartyCode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtUPN = new javax.swing.JTextField();
        txtUPN = new JTextFieldHint(new JTextField(),"Search by F1");
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel2.setLayout(null);

        tblPlanning.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPlanning);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 1320, 110);

        tblWIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tblWIP);

        jPanel2.add(jScrollPane5);
        jScrollPane5.setBounds(10, 210, 1320, 120);

        tblStockBsr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tblStockBsr);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(10, 350, 1320, 90);

        tblDispatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tblDispatch);

        jPanel2.add(jScrollPane7);
        jScrollPane7.setBounds(10, 470, 1320, 90);

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel1.setText("Dispatched Pieces");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 450, 220, 20);

        jLabel2.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel2.setText("Booking / Planning Pieces");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(10, 56, 240, 20);

        jLabel3.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel3.setText("WIP Pieces ");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 190, 280, 20);

        jLabel4.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel4.setText("STOCK/BSR Pieces ");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(10, 330, 700, 20);

        btnExpToExcelDispatched.setText("Export to Excel");
        btnExpToExcelDispatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpToExcelDispatchedActionPerformed(evt);
            }
        });
        jPanel2.add(btnExpToExcelDispatched);
        btnExpToExcelDispatched.setBounds(910, 560, 160, 20);

        btnExpToExcelPlanning.setText("Export to Excel");
        btnExpToExcelPlanning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpToExcelPlanningActionPerformed(evt);
            }
        });
        jPanel2.add(btnExpToExcelPlanning);
        btnExpToExcelPlanning.setBounds(910, 190, 160, 20);

        btnExpToExcelWIP.setText("Export to Excel");
        btnExpToExcelWIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpToExcelWIPActionPerformed(evt);
            }
        });
        jPanel2.add(btnExpToExcelWIP);
        btnExpToExcelWIP.setBounds(910, 330, 160, 20);

        vbtnExpToExcelStock.setText("Export to Excel");
        vbtnExpToExcelStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vbtnExpToExcelStockActionPerformed(evt);
            }
        });
        jPanel2.add(vbtnExpToExcelStock);
        vbtnExpToExcelStock.setBounds(910, 450, 160, 20);

        jLabel8.setText("PARTY CODE");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(10, 10, 100, 20);

        jLabel5.setText("UPN");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(240, 0, 40, 30);

        jLabel9.setText("Piece No.");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(430, 10, 90, 14);

        btnSorting.setText("SORTING");
        btnSorting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortingActionPerformed(evt);
            }
        });
        jPanel2.add(btnSorting);
        btnSorting.setBounds(1100, 0, 130, 30);

        btnShowData.setText("SHOW DATA");
        btnShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDataActionPerformed(evt);
            }
        });
        jPanel2.add(btnShowData);
        btnShowData.setBounds(1100, 30, 130, 30);

        lblPartyName.setText("Party Name");
        jPanel2.add(lblPartyName);
        lblPartyName.setBounds(100, 30, 410, 20);

        jLabel7.setText("Zone");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(650, 0, 50, 30);

        cmbZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(cmbZone);
        cmbZone.setBounds(700, 0, 110, 30);

        jLabel6.setText("Product Group");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(820, 0, 120, 30);

        jPanel2.add(cmbProdGroup);
        cmbProdGroup.setBounds(920, 0, 110, 30);

        btnExpToExcelAll.setText("ALL Export to Excel");
        btnExpToExcelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpToExcelAllActionPerformed(evt);
            }
        });
        jPanel2.add(btnExpToExcelAll);
        btnExpToExcelAll.setBounds(10, 570, 170, 30);

        lblFromYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromYear.setText("Financial Year");
        jPanel2.add(lblFromYear);
        lblFromYear.setBounds(570, 40, 130, 14);

        cmbFromYear.setToolTipText("");
        cmbFromYear.setOpaque(false);
        cmbFromYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromYearItemStateChanged(evt);
            }
        });
        jPanel2.add(cmbFromYear);
        cmbFromYear.setBounds(760, 31, 102, 30);

        lblToYear.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        lblToYear.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblToYear.setText("To :");
        jPanel2.add(lblToYear);
        lblToYear.setBounds(864, 40, 40, 15);

        txtToYear.setEditable(false);
        txtToYear.setOpaque(false);
        jPanel2.add(txtToYear);
        txtToYear.setBounds(920, 40, 102, 20);

        lblFromYear1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFromYear1.setText("From :");
        jPanel2.add(lblFromYear1);
        lblFromYear1.setBounds(678, 40, 70, 14);

        txtPieceNo.setToolTipText("Press F1 ");
        txtPieceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPieceNoFocusLost(evt);
            }
        });
        txtPieceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPieceNoKeyPressed(evt);
            }
        });
        jPanel2.add(txtPieceNo);
        txtPieceNo.setBounds(520, 0, 120, 30);

        txtPartyCode.setToolTipText("Press F1 ");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        jPanel2.add(txtPartyCode);
        txtPartyCode.setBounds(100, 0, 130, 20);

        txtUPN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUPNFocusLost(evt);
            }
        });
        txtUPN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUPNKeyPressed(evt);
            }
        });
        jPanel2.add(txtUPN);
        txtUPN.setBounds(300, 0, 120, 30);

        Tab.addTab("Trail/Sample Piece Tracker", jPanel2);

        getContentPane().add(Tab);
        Tab.setBounds(0, 30, 1350, 630);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Trail/Sample Piece Tracker");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 0, 1350, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 1060, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(0, 630, 1350, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExpToExcelDispatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpToExcelDispatchedActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(tblDispatch, new File("D://TrailPieceTrakerDispatch.xls"), "DISPATCH");
            exp.fillData(tblDispatch, new File(System.getProperty("user.home") + "/Desktop/TrailPieceTrakerDispatch.xls"), "DISPATCH");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/TrailPieceTrakerDispatch.xls' or 'D://TrailPieceTrakerDispatch.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExpToExcelDispatchedActionPerformed

    private void btnExpToExcelPlanningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpToExcelPlanningActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(tblPlanning, new File("D://TrailPieceTrakerPlanning.xls"), "Planning");
            exp.fillData(tblPlanning, new File(System.getProperty("user.home") + "/Desktop/TrailPieceTrakerPlanning.xls"), "Planning");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/TrailPieceTrakerPlanning.xls' or 'D://TrailPieceTrakerPlanning.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExpToExcelPlanningActionPerformed

    private void btnExpToExcelWIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpToExcelWIPActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(tblWIP, new File("D://TrailPieceTrakerWIP.xls"), "WIP");
            exp.fillData(tblWIP, new File(System.getProperty("user.home") + "/Desktop/TrailPieceTrakerWIP.xls"), "WIP");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/TrailPieceTrakerWIP.xls' or 'D://TrailPieceTrakerWIP.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExpToExcelWIPActionPerformed

    private void vbtnExpToExcelStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vbtnExpToExcelStockActionPerformed
        // TODO add your handling code here:
        try {
            exp.fillData(tblStockBsr, new File("D://TrailPieceTrakerBSR.xls"), "BSR_STOCK");
            exp.fillData(tblStockBsr, new File(System.getProperty("user.home") + "/Desktop/TrailPieceTrakerBSR.xls"), "BSR_STOCK");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/TrailPieceTrakerBSR.xls' or 'D://TrailPieceTrakerBSR.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_vbtnExpToExcelStockActionPerformed
    public void sort_query_creator() {
        SelectSortFields sort = new SelectSortFields();

        sort.setField("WIP_PIECE_NO", "PIECE NO");
        sort.setField("WIP_MACHINE_NO", "MACHINE NO");
        sort.setField("WIP_POSITION_NO", "POSITION");
        sort.setField("WIP_PARTY_CODE", "PARTY CODE");
        sort.setField("WIP_PRODUCT_CODE", "PRODUCT CODE");
        sort.setField("WIP_GROUP", "GROUP");
        sort.setField("WIP_STYLE", "STYLE");
        sort.setField("WIP_LENGTH", "LENGTH");
        sort.setField("WIP_WIDTH", "WIDTH");
        sort.setField("WIP_GSM", "GSM");
        sort.setField("WIP_THORITICAL_WEIGHT", "WEIGHT");
        sort.setField("WIP_PIECE_STAGE", "PIECE STAGE");
//        sort.setField("WIP_STATUS", "PIECE STATUS");
        ORDER_BY = sort.getQuery(SelectSortFields.DEFAULT_ORDER.ASCENDING);
    }

    private void btnSortingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortingActionPerformed
        // TODO add your handling code here:
        sort_query_creator();
        btnShowDataActionPerformed(null);
    }//GEN-LAST:event_btnSortingActionPerformed

    private void btnShowDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDataActionPerformed
        // TODO add your handling code here:
        FormatGridPlanning();
        GeneratePlanningData();
        FormatGridWIP();
        GenerateWIPData();
        FormatGridBSR();
        GenerateBSRData();
        FormatGridDispatch();
        GenerateDispatchData();
    }//GEN-LAST:event_btnShowDataActionPerformed

    private void btnExpToExcelAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpToExcelAllActionPerformed
        // TODO add your handling code here:
        try {
            fillDataAll(new File("D://TrailPieceTraker.xls"));
            fillDataAll(new File(System.getProperty("user.home") + "/Desktop/TrailPieceTraker.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'" + System.getProperty("user.home") + "/Desktop/TrailPieceTraker.xls' or 'D://TrailPieceTraker.xls' successfully in PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExpToExcelAllActionPerformed

    private void cmbFromYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromYearItemStateChanged
        // TODO add your handling code here:
        try {
            int ToYear = Integer.parseInt((String) cmbFromYear.getSelectedItem()) + 1;
            txtToYear.setText(Integer.toString(ToYear));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cmbFromYearItemStateChanged

    private void txtPieceNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPieceNoFocusLost
        // TODO add your handling code here:
        String SQL = "";
        SQL = "SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE COALESCE(PR_PIECETRIAL_FLAG,0)=1 AND PR_PIECE_NO='" + txtPieceNo.getText() + "'";
        if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
            SQL = SQL + " AND PR_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
        }
        if (!cmbZone.getSelectedItem().equals("ALL")) {

            SQL = SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
        }
        SQL = SQL + " AND PR_ORDER_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND PR_ORDER_DATE<='" + txtToYear.getText() + "-03-31' ";

        if (txtPieceNo.getText().equalsIgnoreCase("")) {

        } else if (data.getStringValueFromDB(SQL).equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Invalid Piece No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtPieceNo.setText("");
            txtPieceNo.requestFocus();
        }
    }//GEN-LAST:event_txtPieceNoFocusLost

    private void txtPieceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPieceNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT DISTINCT PR_PIECE_NO,PR_PIECE_STAGE,PR_WIP_STATUS,PR_UPN,PR_PARTY_CODE,PR_MACHINE_NO,POSITION_DESC FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST "
                    + "ON PR_POSITION_NO=POSITION_NO "
                    + "WHERE COALESCE(PR_PIECETRIAL_FLAG,0)=1 AND PR_PIECE_STAGE IN ('IN STOCK','INVOICED','EXP-INVOICE','NEEDLING','MENDING','SEAMING','FINISHING','PLANNING','WEAVING','BSR','BOOKING') ";
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                aList.SQL = aList.SQL + " AND PR_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                aList.SQL = aList.SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            aList.SQL = aList.SQL + " AND PR_ORDER_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND PR_ORDER_DATE<='" + txtToYear.getText() + "-03-31' ";

            if (txtPartyCode.getText().trim().length() >= 6) {
                aList.SQL = aList.SQL + "AND PR_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                aList.SQL = aList.SQL + "AND PR_UPN='" + txtUPN.getText() + "'";
            }

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtPieceNo.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtPieceNoKeyPressed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (txtPartyCode.getText().equals("")) {
            lblPartyName.setText("");
        } else if (data.getStringValueFromDB("SELECT PR_PARTY_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE  COALESCE(PR_PIECETRIAL_FLAG,0)=1 AND PR_PARTY_CODE='" + txtPartyCode.getText() + "'").equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Invalid Party Code", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtPartyCode.setText("");
            lblPartyName.setText("");
            txtPartyCode.requestFocus();
        } else {
            lblPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText()));
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT DISTINCT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' "
                    + "AND PARTY_CODE IN (SELECT PR_PARTY_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE COALESCE(PR_PIECETRIAL_FLAG,0)=1)";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtUPNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUPNFocusLost
        // TODO add your handling code here:
        String SQL = "";
        SQL = "SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE COALESCE(PR_PIECETRIAL_FLAG,0)=1 AND PR_UPN='" + txtUPN.getText() + "'";
        if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
            SQL = SQL + " AND PR_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
        }
        if (!cmbZone.getSelectedItem().equals("ALL")) {

            SQL = SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
        }
        SQL = SQL + " AND PR_ORDER_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND PR_ORDER_DATE<='" + txtToYear.getText() + "-03-31' ";

        if (txtUPN.getText().equalsIgnoreCase("")) {

        } else if (data.getStringValueFromDB(SQL).equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "Invalid UPN", "ERROR", JOptionPane.ERROR_MESSAGE);
            txtUPN.setText("");
            txtUPN.requestFocus();
        }
    }//GEN-LAST:event_txtUPNFocusLost

    private void txtUPNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUPNKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT DISTINCT PR_UPN,PR_PARTY_CODE,PR_MACHINE_NO,POSITION_DESC FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST "
                    + "ON PR_POSITION_NO=POSITION_NO "
                    + "WHERE PR_PIECETRIAL_FLAG=1 AND PR_PIECE_STAGE IN ('IN STOCK','INVOICED','EXP-INVOICE','NEEDLING','MENDING','SEAMING','FINISHING','PLANNING','WEAVING','BSR','BOOKING') ";
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                aList.SQL = aList.SQL + " AND PR_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                aList.SQL = aList.SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            aList.SQL = aList.SQL + " AND PR_ORDER_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND PR_ORDER_DATE<='" + txtToYear.getText() + "-03-31' ";

            if (txtPartyCode.getText().trim().length() >= 6) {
                aList.SQL = aList.SQL + "AND PR_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtUPN.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtUPNKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JButton btnExpToExcelAll;
    private javax.swing.JButton btnExpToExcelDispatched;
    private javax.swing.JButton btnExpToExcelPlanning;
    private javax.swing.JButton btnExpToExcelWIP;
    private javax.swing.JButton btnShowData;
    private javax.swing.JButton btnSorting;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cmbFromYear;
    private javax.swing.JComboBox cmbProdGroup;
    private javax.swing.JComboBox cmbZone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblFromYear;
    private javax.swing.JLabel lblFromYear1;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToYear;
    private javax.swing.JTable tblDispatch;
    private javax.swing.JTable tblPlanning;
    private javax.swing.JTable tblStockBsr;
    private javax.swing.JTable tblWIP;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPieceNo;
    private javax.swing.JTextField txtToYear;
    private javax.swing.JTextField txtUPN;
    private javax.swing.JButton vbtnExpToExcelStock;
    // End of variables declaration//GEN-END:variables
 private void FormatGridPlanning() {

        try {
            DataModel_Planning = new EITLTableModel();
            tblPlanning.removeAll();
            tblPlanning.setModel(DataModel_Planning);
            tblPlanning.setAutoResizeMode(tblPlanning.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel_Planning.addColumn("Sr.No.");  //0 - Read Only            
            DataModel_Planning.addColumn("Piece No"); //1     
            DataModel_Planning.addColumn("Party Code");//2
            DataModel_Planning.addColumn("Name");//3
            DataModel_Planning.addColumn("UPN");//4
            DataModel_Planning.addColumn("Machine"); //5
            DataModel_Planning.addColumn("Position"); //6  
            DataModel_Planning.addColumn("Product");//7
            DataModel_Planning.addColumn("Group"); //8           
            DataModel_Planning.addColumn("Zone"); //9           
            DataModel_Planning.addColumn("Style"); //10
            DataModel_Planning.addColumn("Piece Stage"); //11
            DataModel_Planning.addColumn("WIP Status"); //12     
//            DataModel_Planning.addColumn("Invoice No.");//11
//            DataModel_Planning.addColumn("Invoice Date");//12
            DataModel_Planning.addColumn("Mounting Plan Date"); //13
            DataModel_Planning.addColumn("Mounting Actual Date"); //14 
            DataModel_Planning.addColumn("Expected Life Days"); //15      
            DataModel_Planning.addColumn("Actual Life Days"); //16      
            DataModel_Planning.addColumn("Performance Feedback"); //17
            DataModel_Planning.addColumn("Remarks");//18
            DataModel_Planning.addColumn("Length"); //19
            DataModel_Planning.addColumn("Width"); //20
            DataModel_Planning.addColumn("GSM"); //21
            DataModel_Planning.addColumn("Weight");   //22
            DataModel_Planning.addColumn("OrderDate");   //22

            for (int i = 0; i < 24; i++) {
                DataModel_Planning.SetReadOnly(i);
            }

            tblPlanning.getColumnModel().getColumn(0).setMaxWidth(50);
            tblPlanning.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            //tblPlanning.getColumnModel().getColumn(16).setPreferredWidth(100);

        } catch (Exception e) {

        }

    }

    private void GeneratePlanningData() {
        try {
            String SQL;
            SQL = "SELECT WIP_EXT_PIECE_NO,WIP_ORDER_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,INCHARGE_NAME AS ZONE,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_INCHARGE "
                    + "ON WIP_INCHARGE=INCHARGE_CD "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_ORDER_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_ORDER_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('PLANNING','BOOKING')";
            SQL = SQL + " " + ORDER_BY;
            System.out.println("SQL:" + SQL);
            ResultSet tdata = data.getResult(SQL);
            tdata.first();
            int p = 0;
            if (tdata.getRow() > 0) {
                int cnt = 0;
                while (!tdata.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = tdata.getString("WIP_EXT_PIECE_NO");
                    p++;
                    rowData[p] = tdata.getString("WIP_PARTY_CODE");
                    p++;
                    rowData[p] = tdata.getString("PARTY_NAME");
                    p++;
                    rowData[p] = tdata.getString("WIP_UPN");
                    p++;
                    rowData[p] = tdata.getString("WIP_MACHINE_NO");
                    p++;
                    rowData[p] = tdata.getString("POSITION_DESC");
                    p++;
                    rowData[p] = tdata.getString("WIP_PRODUCT_CODE");
                    p++;
                    rowData[p] = tdata.getString("WIP_GROUP");
                    p++;
                    rowData[p] = tdata.getString("ZONE");
                    p++;
                    rowData[p] = tdata.getString("WIP_STYLE");
                    p++;
                    rowData[p] = tdata.getString("WIP_PIECE_STAGE");
                    p++;
                    rowData[p] = tdata.getString("WIP_STATUS");
                    p++;
//                    rowData[p] = tdata.getString("INVOICE_NO");
//                    p++;
//                    rowData[p] = tdata.getString("INVOICE_DATE");
//                    p++;
                    rowData[p] = tdata.getString("MOUNTING_PLAN_DATE");
                    p++;
                    rowData[p] = tdata.getString("MOUNTING_ACTUAL_DATE");
                    p++;
                    rowData[p] = tdata.getString("EXPECTED_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("ACTUAL_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("PERFORMANCE_FEEDBACK");
                    p++;
                    rowData[p] = tdata.getString("REMARKS");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("WIP_LENGTH")));
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("WIP_WIDTH")));
                    p++;
                    rowData[p] = tdata.getString("WIP_GSM");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("WIP_THORITICAL_WEIGHT")));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(tdata.getString("WIP_ORDER_DATE"));
                    p++;
                    DataModel_Planning.addRow(rowData);
                    tdata.next();
                }
                final TableColumnModel columnModel = tblPlanning.getColumnModel();
                for (int column = 0; column < tblPlanning.getColumnCount(); column++) {
                    int width = 70; // Min width
                    for (int row = 0; row < tblPlanning.getRowCount(); row++) {
                        TableCellRenderer renderer = tblPlanning.getCellRenderer(row, column);
                        Component comp = tblPlanning.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    if (column > 11 && column < 17) {
                        columnModel.getColumn(column).setPreferredWidth(130);
                    } else {
                        columnModel.getColumn(column).setPreferredWidth(width);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridWIP() {

        try {
            DataModel_WIP = new EITLTableModel();
            tblWIP.removeAll();
            tblWIP.setModel(DataModel_WIP);
            tblWIP.setAutoResizeMode(tblWIP.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel_WIP.addColumn("Sr.No.");  //0 - Read Only            
            DataModel_WIP.addColumn("Piece No"); //1     
            DataModel_WIP.addColumn("Party Code");//2
            DataModel_WIP.addColumn("Name");//3
            DataModel_WIP.addColumn("UPN");//3
            DataModel_WIP.addColumn("Machine"); //4
            DataModel_WIP.addColumn("Position"); //5  
            DataModel_WIP.addColumn("Product");//6
            DataModel_WIP.addColumn("Group"); //7            
            DataModel_WIP.addColumn("Style"); //8
            DataModel_WIP.addColumn("Piece Stage"); //9
            DataModel_WIP.addColumn("WIP Status"); //10      
//            DataModel_Planning.addColumn("Invoice No.");//11
//            DataModel_Planning.addColumn("Invoice Date");//12
            DataModel_WIP.addColumn("Mounting Plan Date"); //13
            DataModel_WIP.addColumn("Mounting Actual Date"); //14 
            DataModel_WIP.addColumn("Expected Life Days"); //15      
            DataModel_WIP.addColumn("Actual Life Days"); //16      
            DataModel_WIP.addColumn("Performance Feedback"); //17
            DataModel_WIP.addColumn("Remarks");//18
            DataModel_WIP.addColumn("Length"); //19
            DataModel_WIP.addColumn("Width"); //20
            DataModel_WIP.addColumn("GSM"); //21
            DataModel_WIP.addColumn("Weight");   //22
            DataModel_WIP.addColumn("Prev_Stage_Date");   //24

            DataModel_WIP.SetReadOnly(0);
            DataModel_WIP.SetReadOnly(1);
            DataModel_WIP.ResetReadOnly(2);
            DataModel_WIP.ResetReadOnly(3);
            DataModel_WIP.ResetReadOnly(4);
            DataModel_WIP.ResetReadOnly(5);
            DataModel_WIP.ResetReadOnly(6);
            DataModel_WIP.ResetReadOnly(7);
            DataModel_WIP.SetReadOnly(8);
            DataModel_WIP.SetReadOnly(9);
            DataModel_WIP.SetReadOnly(10);
            DataModel_WIP.SetReadOnly(11);
            DataModel_WIP.SetReadOnly(12);
            DataModel_WIP.SetReadOnly(13);
            DataModel_WIP.SetReadOnly(14);
            DataModel_WIP.SetReadOnly(15);
            DataModel_WIP.SetReadOnly(16);
            DataModel_WIP.SetReadOnly(17);
            DataModel_WIP.SetReadOnly(18);
            DataModel_WIP.SetReadOnly(19);
            DataModel_WIP.SetReadOnly(20);
            DataModel_WIP.SetReadOnly(21);
            DataModel_WIP.SetReadOnly(22);
            DataModel_WIP.SetReadOnly(23);
            DataModel_WIP.SetReadOnly(24);

            tblWIP.getColumnModel().getColumn(0).setMaxWidth(50);
            tblWIP.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            //tblPlanning.getColumnModel().getColumn(16).setPreferredWidth(100);

        } catch (Exception e) {

        }

    }

    private void GenerateWIPData() {
        try {
            String SQL;
            SQL = "SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_WARP_DATE AS PC_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_WARP_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_WARP_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('WEAVING')";
            SQL = SQL + " UNION ALL ";
            SQL = SQL + " SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_WVG_DATE AS PC_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_WVG_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_WVG_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('MENDING')";
            SQL = SQL + " UNION ALL ";
            SQL = SQL + " SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_MND_DATE AS PC_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_MND_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_MND_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('NEEDLING')";
            SQL = SQL + " UNION ALL ";
            SQL = SQL + " SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_MND_DATE AS PC_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_MND_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_MND_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('SEAMING')";
            SQL = SQL + " UNION ALL ";
            SQL = SQL + " SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_NDL_DATE AS PC_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_NDL_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_NDL_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('FINISHING') AND WIP_NDL_DATE!='0000-00-00'";
            SQL = SQL + " UNION ALL ";
            SQL = SQL + " SELECT WIP_PIECE_NO,WIP_EXT_PIECE_NO,WIP_SEAM_DATE AS PC_DATE,WIP_PIECE_STAGE,WIP_STATUS,WIP_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",WIP_UPN) AS WIP_UPN,WIP_PRODUCT_CODE,WIP_GROUP,WIP_MACHINE_NO,POSITION_DESC,WIP_STYLE,"
                    + "WIP_LENGTH,WIP_WIDTH,WIP_GSM,WIP_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON WIP_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON WIP_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON WIP_PIECE_NO=FT_PIECE_NO "
                    + "LEFT JOIN (SELECT PR_PIECE_NO,PR_INVOICE_NO,PR_INVOICE_DATE,PR_PIECETRIAL_FLAG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + ") AS PR "
                    + "ON WIP_PIECE_NO=PR_PIECE_NO "
                    + "WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN (0,3) AND COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND WIP_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND WIP_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND WIP_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND WIP_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND WIP_SEAM_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND WIP_SEAM_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND WIP_PIECE_STAGE IN ('FINISHING') AND WIP_SEAM_DATE!='0000-00-00'";
            SQL = SQL + " " + ORDER_BY;
            System.out.println("SQL:" + SQL);
            ResultSet tdata = data.getResult(SQL);
            tdata.first();
            int p = 0;
            if (tdata.getRow() > 0) {
                int cnt = 0;
                while (!tdata.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = tdata.getString("WIP_EXT_PIECE_NO");
                    p++;
                    rowData[p] = tdata.getString("WIP_PARTY_CODE");
                    p++;
                    rowData[p] = tdata.getString("PARTY_NAME");
                    p++;
                    rowData[p] = tdata.getString("WIP_UPN");
                    p++;
                    rowData[p] = tdata.getString("WIP_MACHINE_NO");
                    p++;
                    rowData[p] = tdata.getString("POSITION_DESC");
                    p++;
                    rowData[p] = tdata.getString("WIP_PRODUCT_CODE");
                    p++;
                    rowData[p] = tdata.getString("WIP_GROUP");
                    p++;
                    rowData[p] = tdata.getString("WIP_STYLE");
                    p++;
                    rowData[p] = tdata.getString("WIP_PIECE_STAGE");
                    p++;
                    rowData[p] = tdata.getString("WIP_STATUS");
                    p++;
//                    rowData[p] = tdata.getString("INVOICE_NO");
//                    p++;
//                    rowData[p] = tdata.getString("INVOICE_DATE");
//                    p++;
                    rowData[p] = tdata.getString("MOUNTING_PLAN_DATE");
                    p++;
                    rowData[p] = tdata.getString("MOUNTING_ACTUAL_DATE");
                    p++;
                    rowData[p] = tdata.getString("EXPECTED_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("ACTUAL_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("PERFORMANCE_FEEDBACK");
                    p++;
                    rowData[p] = tdata.getString("REMARKS");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("WIP_LENGTH")));
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("WIP_WIDTH")));
                    p++;
                    rowData[p] = tdata.getString("WIP_GSM");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("WIP_THORITICAL_WEIGHT")));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(tdata.getString("PC_DATE"));
                    p++;
                    DataModel_WIP.addRow(rowData);
                    tdata.next();
                }
                final TableColumnModel columnModel = tblWIP.getColumnModel();
                for (int column = 0; column < tblWIP.getColumnCount(); column++) {
                    int width = 70; // Min width
                    for (int row = 0; row < tblWIP.getRowCount(); row++) {
                        TableCellRenderer renderer = tblWIP.getCellRenderer(row, column);
                        Component comp = tblWIP.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    if (column > 11 && column < 17) {
                        columnModel.getColumn(column).setPreferredWidth(130);
                    } else {
                        columnModel.getColumn(column).setPreferredWidth(width);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridBSR() {

        try {
            DataModel_STOCK = new EITLTableModel();
            tblStockBsr.removeAll();
            tblStockBsr.setModel(DataModel_STOCK);
            tblStockBsr.setAutoResizeMode(tblStockBsr.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel_STOCK.addColumn("Sr.No.");  //0 - Read Only            
            DataModel_STOCK.addColumn("Piece No"); //1     
            DataModel_STOCK.addColumn("Party Code");//2
            DataModel_STOCK.addColumn("Name");//3
            DataModel_STOCK.addColumn("UPN");//3
            DataModel_STOCK.addColumn("Machine"); //4
            DataModel_STOCK.addColumn("Position"); //5  
            DataModel_STOCK.addColumn("Product");//6
            DataModel_STOCK.addColumn("Group"); //7            
            DataModel_STOCK.addColumn("Style"); //8
            DataModel_STOCK.addColumn("Piece Stage"); //9
            DataModel_STOCK.addColumn("WIP Status"); //10      
//            DataModel_STOCK.addColumn("Invoice No.");//11
//            DataModel_STOCK.addColumn("Invoice Date");//12
            DataModel_STOCK.addColumn("Mounting Plan Date"); //13
            DataModel_STOCK.addColumn("Mounting Actual Date"); //14 
            DataModel_STOCK.addColumn("Expected Life Days"); //15      
            DataModel_STOCK.addColumn("Actual Life Days"); //16      
            DataModel_STOCK.addColumn("Performance Feedback"); //17
            DataModel_STOCK.addColumn("Remarks");//18
            DataModel_STOCK.addColumn("Length"); //19
            DataModel_STOCK.addColumn("Width"); //20
            DataModel_STOCK.addColumn("GSM"); //21
            DataModel_STOCK.addColumn("Weight");   //22
            DataModel_STOCK.addColumn("ReceivedDate");   //22

            DataModel_STOCK.SetReadOnly(0);
            DataModel_STOCK.SetReadOnly(1);
            DataModel_STOCK.ResetReadOnly(2);
            DataModel_STOCK.ResetReadOnly(3);
            DataModel_STOCK.ResetReadOnly(4);
            DataModel_STOCK.ResetReadOnly(5);
            DataModel_STOCK.ResetReadOnly(6);
            DataModel_STOCK.ResetReadOnly(7);
            DataModel_STOCK.SetReadOnly(8);
            DataModel_STOCK.SetReadOnly(9);
            DataModel_STOCK.SetReadOnly(10);
            DataModel_STOCK.SetReadOnly(11);
            DataModel_STOCK.SetReadOnly(12);
            DataModel_STOCK.SetReadOnly(13);
            DataModel_STOCK.SetReadOnly(14);
            DataModel_STOCK.SetReadOnly(15);
            DataModel_STOCK.SetReadOnly(16);
            DataModel_STOCK.SetReadOnly(17);
            DataModel_STOCK.SetReadOnly(18);
            DataModel_STOCK.SetReadOnly(19);
            DataModel_STOCK.SetReadOnly(20);
            DataModel_STOCK.SetReadOnly(21);
            DataModel_STOCK.SetReadOnly(22);
            DataModel_STOCK.SetReadOnly(23);
            DataModel_STOCK.SetReadOnly(24);

            tblStockBsr.getColumnModel().getColumn(0).setMaxWidth(50);
            tblStockBsr.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            //tblPlanning.getColumnModel().getColumn(16).setPreferredWidth(100);

        } catch (Exception e) {

        }

    }

    private void GenerateBSRData() {
        try {
            String SQL;
            SQL = "SELECT PR_PIECE_NO,PR_FNSG_DATE,"
                    + "PR_PIECE_STAGE,PR_WIP_STATUS,PR_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",PR_UPN) AS PR_UPN,PR_PRODUCT_CODE,PR_GROUP,PR_MACHINE_NO,POSITION_DESC,PR_STYLE,"
                    + "PR_LENGTH,PR_WIDTH,PR_GSM,PR_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON PR_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON PR_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON PR_PIECE_NO=FT_PIECE_NO "
                    + "WHERE COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND PR_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND PR_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND PR_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND PR_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND PR_FNSG_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND PR_FNSG_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND PR_PIECE_STAGE IN ('BSR','OSG STOCK','IN STOCK')";
            SQL = SQL + " " + ORDER_BY.replaceAll("WIP", "PR");
            System.out.println("SQL:" + SQL);
            ResultSet tdata = data.getResult(SQL);
            tdata.first();
            int p = 0;
            if (tdata.getRow() > 0) {
                int cnt = 0;
                while (!tdata.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = tdata.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = tdata.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = tdata.getString("PARTY_NAME");
                    p++;
                    rowData[p] = tdata.getString("PR_UPN");
                    p++;
                    rowData[p] = tdata.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = tdata.getString("POSITION_DESC");
                    p++;
                    rowData[p] = tdata.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = tdata.getString("PR_GROUP");
                    p++;
                    rowData[p] = tdata.getString("PR_STYLE");
                    p++;
                    rowData[p] = tdata.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = tdata.getString("PR_WIP_STATUS");
                    p++;
//                    rowData[p] = tdata.getString("INVOICE_NO");
//                    p++;
//                    rowData[p] = tdata.getString("INVOICE_DATE");
//                    p++;
                    rowData[p] = tdata.getString("MOUNTING_PLAN_DATE");
                    p++;
                    rowData[p] = tdata.getString("MOUNTING_ACTUAL_DATE");
                    p++;
                    rowData[p] = tdata.getString("EXPECTED_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("ACTUAL_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("PERFORMANCE_FEEDBACK");
                    p++;
                    rowData[p] = tdata.getString("REMARKS");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("PR_LENGTH")));
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("PR_WIDTH")));
                    p++;
                    rowData[p] = tdata.getString("PR_GSM");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("PR_THORITICAL_WEIGHT")));
                    p++;
                    rowData[p] = EITLERPGLOBAL.formatDate(tdata.getString("PR_FNSG_DATE"));
                    p++;
                    DataModel_STOCK.addRow(rowData);
                    tdata.next();
                }
                final TableColumnModel columnModel = tblStockBsr.getColumnModel();
                for (int column = 0; column < tblStockBsr.getColumnCount(); column++) {
                    int width = 70; // Min width
                    for (int row = 0; row < tblStockBsr.getRowCount(); row++) {
                        TableCellRenderer renderer = tblStockBsr.getCellRenderer(row, column);
                        Component comp = tblStockBsr.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    if (column > 11 && column < 17) {
                        columnModel.getColumn(column).setPreferredWidth(130);
                    } else {
                        columnModel.getColumn(column).setPreferredWidth(width);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridDispatch() {

        try {
            DataModel_Dispatch = new EITLTableModel();
            tblDispatch.removeAll();
            tblDispatch.setModel(DataModel_Dispatch);
            tblDispatch.setAutoResizeMode(tblDispatch.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel_Dispatch.addColumn("Sr.No.");  //0 - Read Only            
            DataModel_Dispatch.addColumn("Piece No"); //1     
            DataModel_Dispatch.addColumn("Party Code");//2
            DataModel_Dispatch.addColumn("Name");//3
            DataModel_Dispatch.addColumn("UPN");//3
            DataModel_Dispatch.addColumn("Machine"); //4
            DataModel_Dispatch.addColumn("Position"); //5  
            DataModel_Dispatch.addColumn("Product");//6
            DataModel_Dispatch.addColumn("Group"); //7            
            DataModel_Dispatch.addColumn("Style"); //8
            DataModel_Dispatch.addColumn("Piece Stage"); //9
            DataModel_Dispatch.addColumn("WIP Status"); //10      
            DataModel_Dispatch.addColumn("Invoice No.");//11
            DataModel_Dispatch.addColumn("Invoice Date");//12
            DataModel_Dispatch.addColumn("Mounting Plan Date"); //13
            DataModel_Dispatch.addColumn("Mounting Actual Date"); //14 
            DataModel_Dispatch.addColumn("Expected Life Days"); //15      
            DataModel_Dispatch.addColumn("Actual Life Days"); //16      
            DataModel_Dispatch.addColumn("Performance Feedback"); //17
            DataModel_Dispatch.addColumn("Remarks");//18
            DataModel_Dispatch.addColumn("Length"); //19
            DataModel_Dispatch.addColumn("Width"); //20
            DataModel_Dispatch.addColumn("GSM"); //21
            DataModel_Dispatch.addColumn("Weight");   //22

            DataModel_Dispatch.SetReadOnly(0);
            DataModel_Dispatch.SetReadOnly(1);
            DataModel_Dispatch.ResetReadOnly(2);
            DataModel_Dispatch.ResetReadOnly(3);
            DataModel_Dispatch.ResetReadOnly(4);
            DataModel_Dispatch.ResetReadOnly(5);
            DataModel_Dispatch.ResetReadOnly(6);
            DataModel_Dispatch.ResetReadOnly(7);
            DataModel_Dispatch.SetReadOnly(8);
            DataModel_Dispatch.SetReadOnly(9);
            DataModel_Dispatch.SetReadOnly(10);
            DataModel_Dispatch.SetReadOnly(11);
            DataModel_Dispatch.SetReadOnly(12);
            DataModel_Dispatch.SetReadOnly(13);
            DataModel_Dispatch.SetReadOnly(14);
            DataModel_Dispatch.SetReadOnly(15);
            DataModel_Dispatch.SetReadOnly(16);
            DataModel_Dispatch.SetReadOnly(17);
            DataModel_Dispatch.SetReadOnly(18);
            DataModel_Dispatch.SetReadOnly(19);
            DataModel_Dispatch.SetReadOnly(20);
            DataModel_Dispatch.SetReadOnly(21);
            DataModel_Dispatch.SetReadOnly(22);
            DataModel_Dispatch.SetReadOnly(23);

            tblDispatch.getColumnModel().getColumn(0).setMaxWidth(50);
            tblDispatch.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            //tblPlanning.getColumnModel().getColumn(16).setPreferredWidth(100);

        } catch (Exception e) {

        }

    }

    private void GenerateDispatchData() {
        try {
            String SQL;
            SQL = "SELECT PR_PIECE_NO,"
                    + "PR_PIECE_STAGE,PR_WIP_STATUS,PR_PARTY_CODE,PARTY_NAME,"
                    + "CONCAT(\"'\",PR_UPN) AS PR_UPN,PR_PRODUCT_CODE,PR_GROUP,PR_MACHINE_NO,POSITION_DESC,PR_STYLE,"
                    + "PR_LENGTH,PR_WIDTH,PR_GSM,PR_THORITICAL_WEIGHT,"
                    + "COALESCE(PR_INVOICE_NO,'') AS INVOICE_NO,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE PR_INVOICE_DATE END,'%d/%m/%Y'),'') AS INVOICE_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_PLAN_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_PLAN_DATE END,'%d/%m/%Y'),'') AS MOUNTING_PLAN_DATE,"
                    + "COALESCE(DATE_FORMAT(CASE WHEN COALESCE(MOUNTING_ACTUAL_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE MOUNTING_ACTUAL_DATE END,'%d/%m/%Y'),'') AS MOUNTING_ACTUAL_DATE,"
                    + "COALESCE(EXPECTED_LIFE_DAYS,'') AS EXPECTED_LIFE_DAYS,"
                    + "COALESCE(ACTUAL_LIFE_DAYS,'') AS ACTUAL_LIFE_DAYS,"
                    + "COALESCE(PERFORMANCE_FEEDBACK,'') AS PERFORMANCE_FEEDBACK,"
                    + "COALESCE(REMARKS,'') AS REMARKS  "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    + "LEFT JOIN PRODUCTION.FELT_MACHINE_POSITION_MST ON PR_POSITION_NO=POSITION_NO "
                    + "LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,PARTY_LOCK,PARTY_MILL_CLOSED_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM "
                    + "ON PR_PARTY_CODE=PARTY_CODE "
                    + "LEFT JOIN PRODUCTION.FELT_TRAIL_PIECE_SELECTION "
                    + "ON PR_PIECE_NO=FT_PIECE_NO "
                    + "WHERE COALESCE(PR_PIECETRIAL_FLAG,0)=1  ";
            if (txtPartyCode.getText().trim().length() >= 6) {
                SQL = SQL + " AND PR_PARTY_CODE='" + txtPartyCode.getText() + "'";
            }
            if (txtUPN.getText().trim().length() >= 6) {
                SQL = SQL + " AND PR_UPN='" + txtUPN.getText() + "'";
            }
            if (txtPieceNo.getText().trim().length() >= 5) {
                SQL = SQL + " AND PR_PIECE_NO='" + txtPieceNo.getText() + "'";
            }
            if (!cmbProdGroup.getSelectedItem().equals("ALL")) {
                SQL = SQL + " AND PR_GROUP='" + cmbProdGroup.getSelectedItem() + "'";
            }
            if (!cmbZone.getSelectedItem().equals("ALL")) {

                SQL = SQL + " AND PR_INCHARGE = " + data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='" + cmbZone.getSelectedItem() + "'");
            }
            SQL = SQL + " AND PR_INVOICE_DATE>='" + cmbFromYear.getSelectedItem().toString() + "-04-01' AND PR_INVOICE_DATE<='" + txtToYear.getText() + "-03-31' ";
            SQL = SQL + " AND PR_PIECE_STAGE IN ('INVOICED','EXP-INVOICE')";
            SQL = SQL + " " + ORDER_BY.replaceAll("WIP", "PR");
            System.out.println("SQL:" + SQL);
            ResultSet tdata = data.getResult(SQL);
            tdata.first();
            int p = 0;
            if (tdata.getRow() > 0) {
                int cnt = 0;
                while (!tdata.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[150];
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = tdata.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = tdata.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = tdata.getString("PARTY_NAME");
                    p++;
                    rowData[p] = tdata.getString("PR_UPN");
                    p++;
                    rowData[p] = tdata.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = tdata.getString("POSITION_DESC");
                    p++;
                    rowData[p] = tdata.getString("PR_PRODUCT_CODE");
                    p++;
                    rowData[p] = tdata.getString("PR_GROUP");
                    p++;
                    rowData[p] = tdata.getString("PR_STYLE");
                    p++;
                    rowData[p] = tdata.getString("PR_PIECE_STAGE");
                    p++;
                    rowData[p] = tdata.getString("PR_WIP_STATUS");
                    p++;
                    rowData[p] = tdata.getString("INVOICE_NO");
                    p++;
                    rowData[p] = tdata.getString("INVOICE_DATE");
                    p++;
                    rowData[p] = tdata.getString("MOUNTING_PLAN_DATE");
                    p++;
                    rowData[p] = tdata.getString("MOUNTING_ACTUAL_DATE");
                    p++;
                    rowData[p] = tdata.getString("EXPECTED_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("ACTUAL_LIFE_DAYS");
                    p++;
                    rowData[p] = tdata.getString("PERFORMANCE_FEEDBACK");
                    p++;
                    rowData[p] = tdata.getString("REMARKS");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("PR_LENGTH")));
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("PR_WIDTH")));
                    p++;
                    rowData[p] = tdata.getString("PR_GSM");
                    p++;
                    rowData[p] = df.format(Double.parseDouble(tdata.getString("PR_THORITICAL_WEIGHT")));
                    p++;

                    DataModel_Dispatch.addRow(rowData);
                    tdata.next();
                }
                final TableColumnModel columnModel = tblDispatch.getColumnModel();
                for (int column = 0; column < tblDispatch.getColumnCount(); column++) {
                    int width = 70; // Min width
                    for (int row = 0; row < tblDispatch.getRowCount(); row++) {
                        TableCellRenderer renderer = tblDispatch.getCellRenderer(row, column);
                        Component comp = tblDispatch.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    if (column > 13 && column < 19) {
                        columnModel.getColumn(column).setPreferredWidth(130);
                    } else {
                        columnModel.getColumn(column).setPreferredWidth(width);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        cmbZone.setModel(cmbIncharge);
        cmbIncharge.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbIncharge.addElement(aData);
        }
    }

    private void GenerateGroupCombo() {
        ResultSet rsTmp;
        Connection tmpConn;
        Statement tmpStmt;

        tmpConn = data.getCreatedConn();

        cmbProdGroup.setModel(cmodelProductGroup);
        cmodelProductGroup.removeAllElements();  //Clearing previous contents

        ComboData aData1 = new ComboData();
        aData1.Text = "ALL";
        aData1.strCode = "ALL";
        cmodelProductGroup.addElement(aData1);

        try {
            tmpStmt = tmpConn.createStatement();
            //System.out.println("select distinct(GROUP_NAME) FROM PRODUCTION.FELT_QLT_RATE_MASTER");
            rsTmp = tmpStmt.executeQuery("select distinct(GROUP_NAME) FROM PRODUCTION.FELT_QLT_RATE_MASTER");

            while (rsTmp.next()) {
                ComboData aData = new ComboData();
                aData.Text = rsTmp.getString("GROUP_NAME");
                aData.strCode = rsTmp.getString("GROUP_NAME");
                cmodelProductGroup.addElement(aData);
            }

            rsTmp.close();
            tmpStmt.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateYearCombo() {
        HashMap List = new HashMap();

        cmbFromYear.setModel(cmbFromModel);
        cmbFromYear.removeAllItems();

        List = clsFinYear.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);

        for (int i = 1; i <= List.size(); i++) {
            clsFinYear ObjYear = (clsFinYear) List.get(Integer.toString(i));

            ComboData cmbData = new ComboData();
            cmbData.Text = Integer.toString((int) ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbData.Code = (int) ObjYear.getAttribute("YEAR_FROM").getVal();
            cmbData.strCode = Integer.toString((int) ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbFromModel.addElement(cmbData);
        }
    }

    public void fillDataAll(File file) {

        try {
            WritableWorkbook workbook1 = Workbook.createWorkbook(file);
            WritableSheet sheet1 = workbook1.createSheet("DISPATCH", 0);
            //sheet1.setProtected(true);
            TableModel model = tblDispatch.getModel();
            NumberFormat decimalNo = new NumberFormat("#0.00");
            WritableCellFormat numberFormat = new WritableCellFormat(decimalNo);
            NumberFormat decimalNo1 = new NumberFormat("#0");
            WritableCellFormat numberFormat1 = new WritableCellFormat(decimalNo1);
            for (int i = 0; i < model.getColumnCount(); i++) {
                Label column = new Label(i, 0, model.getColumnName(i));
                sheet1.addCell(column);
            }
            int j = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                for (j = 0; j < model.getColumnCount(); j++) {
                    try {
                        sheet1.addCell(new jxl.write.Number(j, i + 1, Integer.valueOf(model.getValueAt(i, j).toString()), numberFormat1));
                    } catch (Exception a) {
                        try {
                            sheet1.addCell(new jxl.write.Number(j, i + 1, Double.valueOf(model.getValueAt(i, j).toString()), numberFormat));
                        } catch (Exception ex) {
                            Label row = new Label(j, i + 1,
                                    model.getValueAt(i, j).toString());
                            sheet1.addCell(row);
                        }
                    }
                }
            }
            WritableSheet sheet2 = workbook1.createSheet("BSR_STOCK", 0);
            //sheet2.setProtected(true);
            model = tblStockBsr.getModel();
            for (int i = 0; i < model.getColumnCount(); i++) {
                Label column = new Label(i, 0, model.getColumnName(i));
                sheet2.addCell(column);
            }
            j = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                for (j = 0; j < model.getColumnCount(); j++) {
                    try {
                        sheet2.addCell(new jxl.write.Number(j, i + 1, Integer.valueOf(model.getValueAt(i, j).toString()), numberFormat1));
                    } catch (Exception a) {
                        try {
                            sheet2.addCell(new jxl.write.Number(j, i + 1, Double.valueOf(model.getValueAt(i, j).toString()), numberFormat));
                        } catch (Exception ex) {
                            Label row = new Label(j, i + 1,
                                    model.getValueAt(i, j).toString());
                            sheet2.addCell(row);
                        }
                    }
                }
            }
            WritableSheet sheet3 = workbook1.createSheet("WIP", 0);
            //sheet3.setProtected(true);
            model = tblWIP.getModel();
            for (int i = 0; i < model.getColumnCount(); i++) {
                Label column = new Label(i, 0, model.getColumnName(i));
                sheet3.addCell(column);
            }
            j = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                for (j = 0; j < model.getColumnCount(); j++) {
                    try {
                        sheet3.addCell(new jxl.write.Number(j, i + 1, Integer.valueOf(model.getValueAt(i, j).toString()), numberFormat1));
                    } catch (Exception a) {
                        try {
                            sheet3.addCell(new jxl.write.Number(j, i + 1, Double.valueOf(model.getValueAt(i, j).toString()), numberFormat));
                        } catch (Exception ex) {
                            Label row = new Label(j, i + 1,
                                    model.getValueAt(i, j).toString());
                            sheet3.addCell(row);
                        }
                    }
                }
            }
            WritableSheet sheet4 = workbook1.createSheet("PLANNING", 0);
            //sheet4.setProtected(true);
            model = tblPlanning.getModel();
            for (int i = 0; i < model.getColumnCount(); i++) {
                Label column = new Label(i, 0, model.getColumnName(i));
                sheet4.addCell(column);
            }
            j = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                for (j = 0; j < model.getColumnCount(); j++) {
                    try {
                        sheet4.addCell(new jxl.write.Number(j, i + 1, Integer.valueOf(model.getValueAt(i, j).toString()), numberFormat1));
                    } catch (Exception a) {
                        try {
                            sheet4.addCell(new jxl.write.Number(j, i + 1, Double.valueOf(model.getValueAt(i, j).toString()), numberFormat));
                        } catch (Exception ex) {
                            Label row = new Label(j, i + 1,
                                    model.getValueAt(i, j).toString());
                            sheet4.addCell(row);
                        }
                    }
                }
            }
            workbook1.write();
            workbook1.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
