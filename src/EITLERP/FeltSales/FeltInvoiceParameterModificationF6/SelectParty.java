package EITLERP.FeltSales.FeltInvoiceParameterModificationF6;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=SelectMIR.Class HEIGHT=400 WIDTH=700></APPLET>*/

import EITLERP.Stores.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
 
 
public class SelectParty extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    
    private EITLERP.FeltSales.common.FeltInvCalc inv_calculation;
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();

    public boolean Cancelled=true;
    public HashMap colSelItems=new HashMap();
    private JDialog aDialog;
    public int ModuleID=0;
    private String SelMRNo="";
    
    public String SQL;
    public int ReturnCol;
    public boolean ShowReturnCol;
    public int DefaultSearchOn;
    String ReturnVal="";

    public boolean CopyHeader=true;
    public clsMaterialRequisition ObjMR;
    
    private EITLComboModel cmbDeptModel;
    private int SelDeptID=0;
    
    /** Creates new form LOV */
    public SelectParty() {
       System.gc(); 
       initComponents();
       FormatGrid();
       GenerateGrid1();
       GenerateCombo();
       

       
    }

    public void init() {
        System.gc();
        initComponents();
        FormatGrid();
        GenerateCombo();
        GenerateGrid1();
        
       int DeptID=clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);

        
    }
    
    public SelectParty(String pSQL, int pReturnCol, boolean pShowReturnCol, int pDefaultSearchOn)
 {
     initComponents();
     DataModel=new EITLTableModel();
     SQL=pSQL;
     ReturnCol=pReturnCol;
     ShowReturnCol=pShowReturnCol;
     DefaultSearchOn=pDefaultSearchOn;
//  lblSearch.setDisplayedMnemonic('S');
//  lblSearch.setLabelFor((Component) txtSearch);
     
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(12, 19, 660, 330);

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        getContentPane().add(cmdOK);
        cmdOK.setBounds(502, 356, 78, 30);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(586, 356, 79, 30);

        cmdSelectAll.setText("Select All");
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });
        getContentPane().add(cmdSelectAll);
        cmdSelectAll.setBounds(16, 358, 106, 30);

        cmdClearAll.setText("Clear All");
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });
        cmdClearAll.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdClearAllKeyPressed(evt);
            }
        });
        getContentPane().add(cmdClearAll);
        cmdClearAll.setBounds(134, 358, 102, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()<=0) {
            Cancelled=true;
        }
        else {
            SetList();
            Cancelled=false;
        }
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++)
        {
           DataModel.setValueAt(Boolean.valueOf(true), i, 0); 
        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed

    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++)
        {
           DataModel.setValueAt(Boolean.valueOf(false), i, 0); 
        }
    }//GEN-LAST:event_cmdClearAllActionPerformed

    private void cmdClearAllKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdClearAllKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdClearAllKeyPressed
        
    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // Add your handling code here:
 try
 {
     if(evt.getKeyCode()==10) //Enter key pressed
     {
         if(Table.getRowCount()<=0)
 {
     Cancelled=true;
         }
         else
 {
     Cancelled=false;
     ReturnVal=(String) DataModel.getValueAt(Table.getSelectedRow(),ReturnCol-1);
         }
         aDialog.dispose();
         return;
     }
     
     if(evt.getKeyCode()==27) //Escape key pressed
     {
         Cancelled=true;
         ReturnVal="";
         aDialog.dispose();
         return;
     }
     
     if(evt.getKeyCode()==40) //Down Arrow key pressed
     {
         if(Table.getSelectedRow()<Table.getRowCount())
 {
     Table.changeSelection(Table.getSelectedRow()+1,DefaultSearchOn-1,false,false);
         }
         return;
     }
     
     
     if(evt.getKeyCode()==38) //Up Arrow key pressed
     {
         if(Table.getSelectedRow()>=0)
 {
     Table.changeSelection(Table.getSelectedRow()-1,DefaultSearchOn-1,false,false);
         }
         
         return;
     }
     
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_txtSearchKeyPressed
                    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    
private void FormatGrid()    
{
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=7;i++)
        {
            DataModel.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModel.addColumn(""); //0 Selection
        //DataModel.addColumn("Sr.No"); //0
        DataModel.addColumn("Party Code"); //1
        DataModel.addColumn("Party Name"); //2
        DataModel.addColumn("Bale No"); //3
        DataModel.addColumn("Bale Date"); //4
        DataModel.addColumn("Bill Value"); //5
        DataModel.addColumn("Piece No"); //6
        
        Rend.setCustomComponent(0,"CheckBox");
        Table.getColumnModel().getColumn(0).setCellRenderer(Rend);
        Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }

private void GenerateGrid1(){
    try {       
            
            String strSQL2 = "SELECT GROUP_CONCAT(B.PKG_PIECE_NO) AS PKG_PIECE_NO,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_BALE_NO NOT IN (SELECT BALE_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE CANCELED=0 AND PROCESSING_DATE>=CURDATE() ) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.CANCELED=0 AND A.INVOICE_FLG=0  GROUP BY B.PKG_BALE_NO \n"
                        + " UNION ALL \n"
                        + " SELECT GROUP_CONCAT(B.PKG_PIECE_NO) AS PKG_PIECE_NO,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_DATE=B.PKG_BALE_DATE AND A.PKG_BALE_NO IN (SELECT BALE_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE CANCELED=1 AND PROCESSING_DATE>=CURDATE()) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.CANCELED=0 AND A.INVOICE_FLG=0  GROUP BY B.PKG_BALE_NO ORDER BY PKG_PARTY_CODE,PKG_BALE_NO ";
            
            System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);            int cnt = 1;
            
            while (!rs.isAfterLast()) {
                Object[] rowData = new Object[10];
                // rowData[0]=rs.getString("");
                rowData[0] = Boolean.valueOf(true); //By default not selected//cnt++;
                rowData[1] = rs.getString("PKG_PARTY_CODE");
                rowData[2] = rs.getString("PKG_PARTY_NAME");
                rowData[3] = rs.getString("PKG_BALE_NO");
                String BaleDate = EITLERPGLOBAL.formatDate(clsFeltInvoiceParameterModificationf6Form.getBaleDate(rs.getString("PKG_BALE_NO")));
                rowData[4] = BaleDate;
                
                String PieceNO = data.getStringValueFromDB("SELECT PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + rs.getString("PKG_BALE_NO") + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(BaleDate) + "'");
                String ProductCode = data.getStringValueFromDB("SELECT PKG_PRODUCT_CODE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + rs.getString("PKG_BALE_NO") + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(BaleDate) + "'");
                //String Partycode = txtPartyCode.getText();//txtPartyCode.setText(Partycode);
                String Length = data.getStringValueFromDB("SELECT PKG_LENGTH FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + rs.getString("PKG_BALE_NO") + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(BaleDate) + "'");
                String Width = data.getStringValueFromDB("SELECT PKG_WIDTH FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + rs.getString("PKG_BALE_NO") + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(BaleDate) + "'");
                String Weight = data.getStringValueFromDB("SELECT PKG_WEIGHT FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + rs.getString("PKG_BALE_NO") + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(BaleDate) + "'");
                String Sqmtr = data.getStringValueFromDB("SELECT PKG_SQM FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + rs.getString("PKG_BALE_NO") + "' AND PKG_BALE_DATE='" + EITLERPGLOBAL.formatDateDB(BaleDate) + "'");
//                String Orderdate = data.getStringValueFromDB("SELECT PKG_ORDER_DATE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
                String Orderdate = EITLERPGLOBAL.getCurrentDateDB();
                    //lblPartyName.setText(clsFeltInvoiceParameterModificationf6Form.getParyName(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText().trim()));
//                    txtchargecodeold1.setText(clsFeltInvoiceParameterModificationf6Form.getChargeCode(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText().trim()));

                
                
                inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(PieceNO, ProductCode, rs.getString("PKG_PARTY_CODE"), Float.parseFloat(Length), Float.parseFloat(Width), Float.parseFloat(Weight), Float.parseFloat(Sqmtr), Orderdate);
                    Float billvalue = inv_calculation.getFicInvAmt();
                rowData[5] = billvalue;
                rowData[6] = PieceNO;                
                
                DataModel.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
}
private void GenerateGrid()
{
    HashMap List=new HashMap();
    String MRNo="";
    
    if(!MRNo.equals(""))
    {
       List=clsMaterialRequisition.getMRItemList(EITLERPGLOBAL.gCompanyID, MRNo,false);
       
       for(int i=1;i<=List.size();i++)
       {
           clsMRItem ObjItem=(clsMRItem)List.get(Integer.toString(i));
           Object[] rowData=new Object[11];
           
           rowData[0]=Boolean.valueOf(true); //By default not selected
           rowData[1]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
           rowData[2]=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
           rowData[3]=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,(String)ObjItem.getAttribute("ITEM_CODE").getObj());
           rowData[4]=Double.toString(ObjItem.getAttribute("REQ_QTY").getVal());
           rowData[5]=Double.toString(ObjItem.getAttribute("UNIT").getVal());
           int lItemUnit= (int) ObjItem.getAttribute("UNIT").getVal();
           rowData[6]=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
           rowData[7]=Double.toString(ObjItem.getAttribute("BAL_QTY").getVal());
           rowData[8]=(String) ObjItem.getAttribute("REQ_NO").getObj();
           rowData[9]=Double.toString(ObjItem.getAttribute("INDENT_QTY").getVal());
           //rowData[10]=Double.toString(ObjItem.getAttribute("ISSUED_QTY").getVal());
           
           DataModel.addRow(rowData);
           
           //Set the Collection
           DataModel.SetUserObject(Table.getRowCount()-1, ObjItem);
       }
    }
    
}

private void SetList()
{/*
    int SrNo=0;
    HashMap List=new HashMap();
    
    colSelItems.clear();
    

    //========= Get the MR Object =============//
    clsMaterialRequisition tmpObj=new clsMaterialRequisition();
    ObjMR=(clsMaterialRequisition)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, MRNo);

    
    //===========================================//
    
    
    List=clsMaterialRequisition.getMRItemList(EITLERPGLOBAL.gCompanyID, MRNo, false);
    //Scan the Table to get selected items
    for(int i=1;i<=List.size();i++)
    {
       clsMRItem ObjItem=(clsMRItem)List.get(Integer.toString(i));
       SrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
       
        //Search in the table for SrNo.
       for(int j=0;j<Table.getRowCount();j++)
       {
           if(Integer.parseInt(Table.getValueAt(j, 1).toString())==SrNo) 
           {
             if(Table.getValueAt(j,0).toString().equals("true"))  
             {
               //Selected Item  
               colSelItems.put(Integer.toString(colSelItems.size()+1),ObjItem);
             }
           }
       }
    }
        */
}


   private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }

public boolean ShowList() {
        try {
            FormatGrid();

            setSize(700,430);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Select MIR Items",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }    

private void GenerateCombo()
{
    HashMap List=new HashMap();
    String strCondition="";
    
        //----- Generate cmbType ------- //
        cmbDeptModel=new EITLComboModel();
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        
        List=clsDepartment.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            aData.strCode="";
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
}

}

