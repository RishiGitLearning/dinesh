/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.WVG_Prod_Loom_WVR_NEW;

import EITLERP.AppletFrame;
import EITLERP.BigEdit;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.common.LOV;
import EITLERP.FeltSales.common.SelectFirstFree;
import EITLERP.Loader;
import EITLERP.Production.FeltCreditNote.clsExcelExporter;
import EITLERP.Production.WarpingStatusOfWeavingLoom.MultiLineTableHeaderRenderer1;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import SDMLATTPAY.AdvanceSearch.ATTPAYLOV;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Dharmendra PRAJAPATI
 *
 */
public class FrmWVG_Prod_Loom_WVR_New extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    //private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    //private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 835;
    private String DOC_NO = "";
    private clsWVG_Prod_Loom_WVR WVG_Upload;
    private EITLComboModel cmbSendToModel;
    private clsExcelExporter exp = new clsExcelExporter();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();

        GenerateCombos();
        FormatGrid();
        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        WVG_Upload = new clsWVG_Prod_Loom_WVR();
        boolean load = WVG_Upload.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + WVG_Upload.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        SetupApproval();
        SetFields(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle1.setBackground(new Color(0, 102, 153));
        lblTitle1.setForeground(Color.WHITE);
    }

    private void clearFields() {

        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();
        // FormatGridA();
        FormatGridHS();

        txtStaffNo.setText("");
        txtStaffName.setText("");

        txtStaffNo1.setText("");
        txtStaffName1.setText("");

        txtStaffNo2.setText("");
        txtStaffName2.setText("");

        txtStaffNo3.setText("");
        txtStaffName3.setText("");

        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }

        txtNoOfWorker.setText("");
        TotalEmpC.setText("");
        TotalEmpP.setText("");
        TotalReg.setText("");
        TotalTimeSum.setText("");
        TotalWeaveTime.setText("");
        TotalRok.setText("");
        TotalPick.setText("");
        TotalEmpC_Regular.setText("");
        TotalEmpC_Rokdi.setText("");
        TotalEmpP_Regular.setText("");
        TotalEmpP_Rokdi.setText("");
//        Object[] rowData = new Object[15];
//        rowData[0] = 1;
//        DataModel.addRow(rowData);
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (WVG_Upload.getAttribute("APPROVED").getInt() == 1) {
                lblTitle1.setBackground(Color.BLUE);
                lblTitle1.setForeground(Color.WHITE);
            }
            if (WVG_Upload.getAttribute("APPROVED").getInt() == 0) {
                //if ("0".equals(WVG_Upload.getAttribute("APPROVED").getString())) {
                lblTitle1.setBackground(Color.GRAY);
                lblTitle1.setForeground(Color.BLACK);
            }

            if (WVG_Upload.getAttribute("CANCELED").getInt() == 1) {
                //if ("1".equals(WVG_Upload.getAttribute("CANCELED").getString())) {
                lblTitle1.setBackground(Color.RED);
                lblTitle1.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = WVG_Upload.getAttribute("DOC_NO").getString();
            lblTitle1.setText("Wvg Production Entry  - " + DOC_NO);
            txtDocNo.setText(DOC_NO);
            txtProductionDate.setText("");
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) WVG_Upload.getAttribute("HIERARCHY_ID").getVal());
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            FormatGrid();
            //Now Generate Table
            int NoOfEmp = 0, Total_C = 0, Total_P = 0, Total_Reg = 0, Total_Rok = 0, Total_Pick = 0;
            int Total_C_Reg = 0, Total_C_Rok = 0, Total_P_Reg = 0, Total_P_Rok = 0;
            double Total_Time_Sum = 0, Total_Weave_Time = 0;
            for (int i = 1; i <= WVG_Upload.colMRItems.size(); i++) {

                clsWVG_Prod_Loom_WVRItem ObjItem = (clsWVG_Prod_Loom_WVRItem) WVG_Upload.colMRItems.get(Integer.toString(i));
                Object[] rowData = new Object[100];
                rowData[0] = "";
                DataModel.addRow(rowData);
                txtProductionDate.setText(EITLERPGLOBAL.formatDate(ObjItem.getAttribute("DOC_DATE").getString()));
                txtShift.setText(ObjItem.getAttribute("SHIFT_ID").getString());
                txtStaffNo.setText(ObjItem.getAttribute("STAFF_NO").getString());
                txtStaffName.setText(ObjItem.getAttribute("STAFF_NAME").getString());
                txtStaffNo1.setText(ObjItem.getAttribute("STAFF_NO1").getString());
                txtStaffName1.setText(ObjItem.getAttribute("STAFF_NAME1").getString());
                txtStaffNo2.setText(ObjItem.getAttribute("STAFF_NO2").getString());
                txtStaffName2.setText(ObjItem.getAttribute("STAFF_NAME2").getString());
                txtStaffNo3.setText(ObjItem.getAttribute("STAFF_NO3").getString());
                txtStaffName3.setText(ObjItem.getAttribute("STAFF_NAME3").getString());

                DataModel.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), i - 1);
                DataModel.setValueByVariable("DOC_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("DOC_DATE").getString()), i - 1);
                DataModel.setValueByVariable("SHIFT_ID", ObjItem.getAttribute("SHIFT_ID").getString(), i - 1);
                DataModel.setValueByVariable("EMP_NAME", ObjItem.getAttribute("EMP_NAME").getString(), i - 1);
                DataModel.setValueByVariable("EMP_TYPE", ObjItem.getAttribute("EMP_TYPE").getString(), i - 1);
                DataModel.setValueByVariable("EMP_NO", ObjItem.getAttribute("EMP_NO").getString(), i - 1);
                DataModel.setValueByVariable("REG_ROKDI", ObjItem.getAttribute("REG_ROKDI").getString(), i - 1);
                DataModel.setValueByVariable("CATEGORY", ObjItem.getAttribute("CATEGORY").getString(), i - 1);
                DataModel.setValueByVariable("LOOM_ENG", ObjItem.getAttribute("LOOM_ENG").getString(), i - 1);
                DataModel.setValueByVariable("BEAM_WARP_SR_NO", ObjItem.getAttribute("BEAM_WARP_SR_NO").getString(), i - 1);
                DataModel.setValueByVariable("PRODUCT_GROUP", ObjItem.getAttribute("PRODUCT_GROUP").getString(), i - 1);
                DataModel.setValueByVariable("REED_SPACE_METER", ObjItem.getAttribute("REED_SPACE_METER").getString(), i - 1);
                DataModel.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), i - 1);
                DataModel.setValueByVariable("WEFT_DETAILS", ObjItem.getAttribute("WEFT_DETAILS").getString(), i - 1);

                DataModel.setValueByVariable("DESIGNATION_GRADE", ObjItem.getAttribute("DESIGNATION_GRADE").getString(), i - 1);
                DataModel.setValueByVariable("CATEGORY_GRADE", ObjItem.getAttribute("CATEGORY_GRADE").getString(), i - 1);
                DataModel.setValueByVariable("PRESENT_STATUS", ObjItem.getAttribute("PRESENT_STATUS").getString(), i - 1);
                DataModel.setValueByVariable("ROKDI", ObjItem.getAttribute("ROKDI").getString(), i - 1);
                DataModel.setValueByVariable("PRESENT", ObjItem.getAttribute("PRESENT").getString(), i - 1);
                
                if (EditMode == EITLERPGLOBAL.EDIT) {
                    try {
                        String Punch = data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='" + ObjItem.getAttribute("EMP_NO").getString() + "' AND PUNCHDATE='" + EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()) + "'");
                        DataModel.setValueByVariable("ALL_PUNCHES", Punch, i - 1);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    try {
                        String OT = data.getStringValueFromDB("SELECT ALL_OT_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='" + ObjItem.getAttribute("EMP_NO").getString() + "' AND PUNCHDATE='" + EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()) + "'");
                        DataModel.setValueByVariable("OT_PUNCHES", OT, i - 1);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    
                    try{
                        String Inc_Grade = data.getStringValueFromDB("SELECT DES.INCENTIVE_GRADE FROM SDMLATTPAY.ATTPAY_EMPMST EMP,SDMLATTPAY.ATT_DESIGNATION_MASTER DES WHERE EMP.EMP_DESIGNATION=DES.DSGID AND EMP.PAY_EMP_NO='"+ObjItem.getAttribute("EMP_NO").getString()+"'");
                        System.out.println("des grade : SELECT DES.INCENTIVE_GRADE FROM SDMLATTPAY.ATTPAY_EMPMST EMP,SDMLATTPAY.ATT_DESIGNATION_MASTER DES WHERE EMP.EMP_DESIGNATION=DES.DSGID AND EMP.PAY_EMP_NO='"+ObjItem.getAttribute("EMP_NO").getString()+"'");
                        DataModel.setValueByVariable("DESIGNATION_GRADE", Inc_Grade, i - 1);
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                    /*
                     String Punch = data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+aList.ReturnVal+"' AND PUNCHDATE='"+EITLERPGLOBAL.formatDateDB(txtProductionDate.getText())+"'");
                
                     String SHIFT = data.getStringValueFromDB("SELECT SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+aList.ReturnVal+"' AND PUNCHDATE='"+EITLERPGLOBAL.formatDateDB(txtProductionDate.getText())+"'"); 
                     System.out.println("SELECT SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='"+aList.ReturnVal+"' AND PUNCHDATE='"+EITLERPGLOBAL.formatDateDB(txtProductionDate.getText())+"'");
                     //
                     DataModel.setValueByVariable("ALL_PUNCHES", Punch, Table.getSelectedRow());
                
                     DataModel.setValueByVariable("SHIFT_DATA", SHIFT, Table.getSelectedRow());
                
                     */

                } else {
                    DataModel.setValueByVariable("ALL_PUNCHES", ObjItem.getAttribute("ALL_PUNCHES").getString(), i - 1);
                    DataModel.setValueByVariable("OT_PUNCHES", ObjItem.getAttribute("OT_PUNCHES").getString(), i - 1);
                }

                DataModel.setValueByVariable("SHIFT_STARTING", ObjItem.getAttribute("SHIFT_STARTING").getString(), i - 1);
                DataModel.setValueByVariable("IST_RECESS_OUT", ObjItem.getAttribute("IST_RECESS_OUT").getString(), i - 1);
                DataModel.setValueByVariable("IST_RECESS_IN", ObjItem.getAttribute("IST_RECESS_IN").getString(), i - 1);
                DataModel.setValueByVariable("IIND_RECESS_OUT", ObjItem.getAttribute("IIND_RECESS_OUT").getString(), i - 1);
                DataModel.setValueByVariable("IIND_RECESS_IN", ObjItem.getAttribute("IIND_RECESS_IN").getString(), i - 1);
                DataModel.setValueByVariable("IIIRD_RECESS_OUT", ObjItem.getAttribute("IIIRD_RECESS_OUT").getString(), i - 1);
                DataModel.setValueByVariable("IIIRD_RECESS_IN", ObjItem.getAttribute("IIIRD_RECESS_IN").getString(), i - 1);
                DataModel.setValueByVariable("SHIFT_END_OUT", ObjItem.getAttribute("SHIFT_END_OUT").getString(), i - 1);
                DataModel.setValueByVariable("GATE_PASS_OUT", ObjItem.getAttribute("GATE_PASS_OUT").getString(), i - 1);
                DataModel.setValueByVariable("GATE_PASS_IN", ObjItem.getAttribute("GATE_PASS_IN").getString(), i - 1);
                DataModel.setValueByVariable("MC_RPM", ObjItem.getAttribute("MC_RPM").getString(), i - 1);
                DataModel.setValueByVariable("PICKS_10CM", ObjItem.getAttribute("PICKS_10CM").getString(), i - 1);
                DataModel.setValueByVariable("START_READING", ObjItem.getAttribute("START_READING").getString(), i - 1);
                DataModel.setValueByVariable("END_READING", ObjItem.getAttribute("END_READING").getString(), i - 1);
                DataModel.setValueByVariable("PICK", ObjItem.getAttribute("PICK").getString(), i - 1);
                DataModel.setValueByVariable("TOTAL_WEAVE_TIME", ObjItem.getAttribute("TOTAL_WEAVE_TIME").getString(), i - 1);
                DataModel.setValueByVariable("NO_WARP_NO_WEFT", ObjItem.getAttribute("NO_WARP_NO_WEFT").getString(), i - 1);
                DataModel.setValueByVariable("NO_POWER_NO_AIR", ObjItem.getAttribute("NO_POWER_NO_AIR").getString(), i - 1);
                DataModel.setValueByVariable("BEAN_GAITING", ObjItem.getAttribute("BEAN_GAITING").getString(), i - 1);
                DataModel.setValueByVariable("RE_BEAM_GAITING", ObjItem.getAttribute("RE_BEAM_GAITING").getString(), i - 1);
                DataModel.setValueByVariable("NO_WEAVER", ObjItem.getAttribute("NO_WEAVER").getString(), i - 1);
                DataModel.setValueByVariable("CLOTH_REPAIR_TOTAL", ObjItem.getAttribute("CLOTH_REPAIR_TOTAL").getString(), i - 1);
                DataModel.setValueByVariable("NO_BEAM_READY", ObjItem.getAttribute("NO_BEAM_READY").getString(), i - 1);
                DataModel.setValueByVariable("Q_CHANGES", ObjItem.getAttribute("Q_CHANGES").getString(), i - 1);
                DataModel.setValueByVariable("MECH_REPAIR", ObjItem.getAttribute("MECH_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("ELE_RO_REPAIR", ObjItem.getAttribute("ELE_RO_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("SHUTTLE_REPAIR_TOTAL", ObjItem.getAttribute("SHUTTLE_REPAIR_TOTAL").getString(), i - 1);
                DataModel.setValueByVariable("OVER_HAULING", ObjItem.getAttribute("OVER_HAULING").getString(), i - 1);
                DataModel.setValueByVariable("NO_PIRN", ObjItem.getAttribute("NO_PIRN").getString(), i - 1);
                DataModel.setValueByVariable("OTHER", ObjItem.getAttribute("OTHER").getString(), i - 1);
                DataModel.setValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR", ObjItem.getAttribute("SELEVEDGE_EDGE_CORD_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("TOTAL_TIME", ObjItem.getAttribute("TOTAL_TIME").getString(), i - 1);
                DataModel.setValueByVariable("REMARK", ObjItem.getAttribute("REMARK").getString(), i - 1);
                DataModel.setValueByVariable("CARRY_OVER", ObjItem.getAttribute("CARRY_OVER").getString(), i - 1);
                DataModel.setValueByVariable("CLOTH_REPAIR", ObjItem.getAttribute("CLOTH_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("SHUTTLE_REPAIR", ObjItem.getAttribute("SHUTTLE_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("PICK_REPAIR", ObjItem.getAttribute("PICK_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("WARP_END_REPAIR", ObjItem.getAttribute("WARP_END_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("TEMPLE_REPAIR", ObjItem.getAttribute("TEMPLE_REPAIR").getString(), i - 1);
                DataModel.setValueByVariable("MC_STOPPAGES", ObjItem.getAttribute("MC_STOPPAGES").getString(), i - 1);
                DataModel.setValueByVariable("CR1", ObjItem.getAttribute("CR1").getString(), i - 1);
                DataModel.setValueByVariable("CR2", ObjItem.getAttribute("CR2").getString(), i - 1);
                DataModel.setValueByVariable("CR3", ObjItem.getAttribute("CR3").getString(), i - 1);
                DataModel.setValueByVariable("CR4", ObjItem.getAttribute("CR4").getString(), i - 1);
                DataModel.setValueByVariable("CR5", ObjItem.getAttribute("CR5").getString(), i - 1);
                DataModel.setValueByVariable("CR6", ObjItem.getAttribute("CR6").getString(), i - 1);
                DataModel.setValueByVariable("SR1", ObjItem.getAttribute("SR1").getString(), i - 1);
                DataModel.setValueByVariable("SR2", ObjItem.getAttribute("SR2").getString(), i - 1);
                DataModel.setValueByVariable("SR3", ObjItem.getAttribute("SR3").getString(), i - 1);
                DataModel.setValueByVariable("SR4", ObjItem.getAttribute("SR4").getString(), i - 1);
                DataModel.setValueByVariable("PR1", ObjItem.getAttribute("PR1").getString(), i - 1);
                DataModel.setValueByVariable("PR2", ObjItem.getAttribute("PR2").getString(), i - 1);
                DataModel.setValueByVariable("PR3", ObjItem.getAttribute("PR3").getString(), i - 1);
                DataModel.setValueByVariable("PR4", ObjItem.getAttribute("PR4").getString(), i - 1);
                DataModel.setValueByVariable("PR5", ObjItem.getAttribute("PR5").getString(), i - 1);
                DataModel.setValueByVariable("PR6", ObjItem.getAttribute("PR6").getString(), i - 1);
                DataModel.setValueByVariable("PR7", ObjItem.getAttribute("PR7").getString(), i - 1);
                DataModel.setValueByVariable("PR8", ObjItem.getAttribute("PR8").getString(), i - 1);
                DataModel.setValueByVariable("WR1", ObjItem.getAttribute("WR1").getString(), i - 1);
                DataModel.setValueByVariable("WR2", ObjItem.getAttribute("WR2").getString(), i - 1);
                DataModel.setValueByVariable("WR3", ObjItem.getAttribute("WR3").getString(), i - 1);
                DataModel.setValueByVariable("WR4", ObjItem.getAttribute("WR4").getString(), i - 1);
                DataModel.setValueByVariable("WR5", ObjItem.getAttribute("WR5").getString(), i - 1);
                DataModel.setValueByVariable("TR1", ObjItem.getAttribute("TR1").getString(), i - 1);
                DataModel.setValueByVariable("TR2", ObjItem.getAttribute("TR2").getString(), i - 1);
                DataModel.setValueByVariable("TR3", ObjItem.getAttribute("TR3").getString(), i - 1);
                DataModel.setValueByVariable("TR4", ObjItem.getAttribute("TR4").getString(), i - 1);
                DataModel.setValueByVariable("TR5", ObjItem.getAttribute("TR5").getString(), i - 1);
                DataModel.setValueByVariable("DESIGNATION", ObjItem.getAttribute("DESIGNATION").getString(), i - 1);
                DataModel.setValueByVariable("TRAINEE_POSITION", ObjItem.getAttribute("TRAINEE_POSITION").getString(), i - 1);
                DataModel.setValueByVariable("SHIFT_DATA", ObjItem.getAttribute("SHIFT_DATA").getString(), i - 1);
                DataModel.setValueByVariable("NO_PPC", ObjItem.getAttribute("NO_PPC").getString(), i - 1);
                DataModel.setValueByVariable("GRADE", ObjItem.getAttribute("GRADE").getString(), i - 1);
                
                

                if (ObjItem.getAttribute("TRAINEE").getInt() == 1) {
                    DataModel.setValueByVariable("TRAINEE", true, i - 1);
                } else {
                    DataModel.setValueByVariable("TRAINEE", false, i - 1);
                }

//                String NEW_EMP_NO =  "BRD"+ObjItem.getAttribute("EMP_NO").getObj().toString();
//                String EMP_MASTER_NAME = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where PAY_EMP_NO='"+NEW_EMP_NO+"'");
//                //String SHIFT_SCHEDULE_ID = data.getStringValueFromDB("");
//                if(ObjItem.getAttribute("EMP_NO").getObj().toString().equals(""))
//                {
//                    NEW_EMP_NO = "";
//                }
//                rowData[82] = EMP_MASTER_NAME;//EMPNAME
//                rowData[83] = NEW_EMP_NO;//NEWEMPNO
                String day = "";
                if (!ObjItem.getAttribute("EMP_NO").getString().equals("")) {
                    NoOfEmp = NoOfEmp + 1;
                }
                if (ObjItem.getAttribute("EMP_TYPE").getString().equals("C")) {
                    Total_C = Total_C + 1;
                }
                if (ObjItem.getAttribute("EMP_TYPE").getString().equals("P")) {
                    Total_P = Total_P + 1;
                }
                if (ObjItem.getAttribute("REG_ROKDI").getString().equals("REGULAR")) {
                    Total_Reg = Total_Reg + 1;
                }
                if (ObjItem.getAttribute("REG_ROKDI").getString().equals("ROKDI")) {
                    Total_Rok = Total_Rok + 1;
                }
                if (ObjItem.getAttribute("EMP_TYPE").getString().equals("C") && ObjItem.getAttribute("REG_ROKDI").getString().equals("REGULAR")) {
                    Total_C_Reg = Total_C_Reg + 1;
                }
                if (ObjItem.getAttribute("EMP_TYPE").getString().equals("P") && ObjItem.getAttribute("REG_ROKDI").getString().equals("REGULAR")) {
                    Total_P_Reg = Total_P_Reg + 1;
                }
                if (ObjItem.getAttribute("EMP_TYPE").getString().equals("C") && ObjItem.getAttribute("REG_ROKDI").getString().equals("ROKDI")) {
                    Total_C_Rok = Total_C_Rok + 1;
                }
                if (ObjItem.getAttribute("EMP_TYPE").getString().equals("P") && ObjItem.getAttribute("REG_ROKDI").getString().equals("ROKDI")) {
                    Total_P_Rok = Total_P_Rok + 1;
                }
                if (!ObjItem.getAttribute("PICK").getString().equals("")) {
                    try {
                        Total_Pick = Total_Pick + Integer.parseInt(ObjItem.getAttribute("PICK").getString());
                    } catch (Exception e) {
                    }

                }
                if (!ObjItem.getAttribute("TOTAL_WEAVE_TIME").getString().equals("") && !ObjItem.getAttribute("LOOM_ENG").getString().equals("")) {
                    try {
                        if(ObjItem.getAttribute("LOOM_ENG").getString().equals("7") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("8") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("81") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("82") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("83") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("84") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("85") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("86") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("87") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("88") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("89") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("90") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("91") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("92") ||
                                ObjItem.getAttribute("LOOM_ENG").getString().equals("93"))
                        Total_Weave_Time = Total_Weave_Time + Double.parseDouble(ObjItem.getAttribute("TOTAL_WEAVE_TIME").getString());
                    } catch (Exception e) {
                    }
                }
                if (!ObjItem.getAttribute("TOTAL_TIME").getString().equals("")) {
                    try {
                        Total_Time_Sum = Total_Time_Sum + Double.parseDouble(ObjItem.getAttribute("TOTAL_TIME").getString());
                    } catch (Exception e) {
                    }
                }

                //ObjItem.getAttribute("TOTAL_WEAVE_TIME").getString()
                //ObjItem.getAttribute("TOTAL_TIME").getString()
                txtNoOfWorker.setText(NoOfEmp + "");
                TotalEmpC.setText(Total_C + "");
                TotalEmpP.setText(Total_P + "");
                TotalReg.setText(Total_Reg + "");
                TotalRok.setText(Total_Rok + "");
                TotalPick.setText(Total_Pick + "");
                TotalTimeSum.setText(Total_Time_Sum + "");
                TotalWeaveTime.setText(Total_Weave_Time + "");
                TotalEmpC_Regular.setText(Total_C_Reg + "");
                TotalEmpC_Rokdi.setText(Total_C_Rok + "");
                TotalEmpP_Regular.setText(Total_P_Reg + "");
                TotalEmpP_Rokdi.setText(Total_P_Rok + "");
            }
        } catch (Exception s) {
            s.printStackTrace();
        }
        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = WVG_Upload.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = WVG_Upload.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsWVG_Prod_Loom_WVR.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsWVG_Prod_Loom_WVR ObjHistory = (clsWVG_Prod_Loom_WVR) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6260, 62601)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6260, 62602)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6260, 62603)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6260, 62604)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = clsFeltProductionApprovalFlow.getFromID(ModuleId, WVG_Upload.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(ModuleId, FromUserID, WVG_Upload.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, WVG_Upload.getAttribute("DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGrid() {
        try {

            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            String sql = "SELECT '' AS  SR_NO,"
                    + "'' AS  DOC_DATE,"
                    + " '' AS  SHIFT_ID,"
                    + " '' AS  CATEGORY,"
                    + " '' AS  LOOM_ENG,"
                    + " '' AS  EMP_NO,"
                    + " '' AS  EMP_NAME,"
                    + " '' AS  EMP_TYPE,"
                    + " '' AS  REG_ROKDI,"
                    + " '' AS  DESIGNATION,"
                    + " '' AS  TRAINEE,"
                    + " '' AS  TRAINEE_POSITION,"
                    + " '' AS  BEAM_WARP_SR_NO,"
                    + " '' AS  REED_SPACE_METER,"//NO CHANGE  (1 UP)
                    + " '' AS  PRODUCT_GROUP,"
                    + " '' AS  MC_RPM,"
                    + " '' AS  PICK,"
                    + " '' AS  PICKS_10CM, "
                    + " '' AS  PIECE_NO,"
                    + " '' AS  WEFT_DETAILS,"
                    + " '' AS  OT_PUNCHES,"
                    + " '' AS  ALL_PUNCHES,"
                    + " '' AS  SHIFT_STARTING,"
                    + " '' AS  IST_RECESS_OUT,"
                    + " '' AS  IST_RECESS_IN,"
                    + " '' AS  IIND_RECESS_OUT,"
                    + " '' AS  IIND_RECESS_IN,"
                    + " '' AS  IIIRD_RECESS_OUT,"
                    + " '' AS  IIIRD_RECESS_IN,"
                    + " '' AS  SHIFT_END_OUT,"
                    + " '' AS  GATE_PASS_OUT,"
                    + " '' AS  GATE_PASS_IN,"
                    + " '' AS  START_READING,"
                    + " '' AS  END_READING,"
                    + " '' AS  NO_WARP_NO_WEFT,"
                    + " '' AS  NO_POWER_NO_AIR,"
                    + " '' AS  NO_PIRN,"
                    + " '' AS  BEAN_GAITING,"
                    + " '' AS  NO_WEAVER,"
                    + " '' AS  OTHER,"
                    + " '' AS  CR1,"
                    + " '' AS  CR2,"
                    + " '' AS  CR3, "
                    + " '' AS  CLOTH_REPAIR_TOTAL,"
                    + " '' AS  NO_BEAM_READY,"
                    + " '' AS  Q_CHANGES,"
                    + " '' AS  SR1, '' AS  SR2, '' AS  SR3, '' AS  SR4,"
                    + " '' AS  SHUTTLE_REPAIR,"
                    + " '' AS  PR1, '' AS  PR2, '' AS  PR3, '' AS  PR4,"
                    + " '' AS  PR5, '' AS  PR6, '' AS  PR7, '' AS  PR8,"
                    + " '' AS  PICK_REPAIR,"
                    + " '' AS  WR1, '' AS  WR2, '' AS  WR3, '' AS  WR4,"
                    + " '' AS  WR5,"
                    + " '' AS  WARP_END_REPAIR,"
                    + " '' AS  TR1, '' AS  TR2, '' AS  TR3,"
                    + " '' AS  TR4, '' AS  TR5,"
                    + " '' AS  TEMPLE_REPAIR,"
                    + " '' AS  RE_BEAM_GAITING,"
                    + " '' AS  MECH_REPAIR,"
                    + " '' AS  ELE_RO_REPAIR,"
                    + " '' AS  SHUTTLE_REPAIR_TOTAL,"
                    + " '' AS  OVER_HAULING,"
                    + " '' AS  SELEVEDGE_EDGE_CORD_REPAIR,"
                    + " '' AS  CARRY_OVER,"
                    + " '' AS  NO_PPC, "
                    + " '' AS  MC_STOPPAGES,"
                    + " '' AS  TOTAL_TIME,"
                    + " '' AS  TOTAL_WEAVE_TIME,"
                    + " '' AS  REMARK,"
                    + " '' AS  CR4, '' AS  CR5, '' AS  CR6,"
                    + " '' AS  CLOTH_REPAIR,"
                    + "'' AS EMP_NAME_MASTER,"
                    + "'' AS NEW_EMP_NO,"
                    + "'' AS SHIFT_DATA, "
                    + "'' AS GRADE, "
                    + "'' AS DESIGNATION_GRADE, "
                    + "'' AS CATEGORY_GRADE, "
                    + "'' AS PRESENT_STATUS, "
                    + "'' AS ROKDI, "
                    + "'' AS PRESENT "
                    + "FROM DUAL";

            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {

                if (i == 5) {
                    DataModel.addColumn("LOOM");
                } else {
                    DataModel.addColumn(rsInfo.getColumnName(i));
                }

                DataModel.SetVariable(i - 1, rsInfo.getColumnName(i)); //1

            }
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(11);

            DataModel.SetReadOnly(DataModel.getColFromVariable("CLOTH_REPAIR"));
            DataModel.SetReadOnly(DataModel.getColFromVariable("SHUTTLE_REPAIR"));
            DataModel.SetReadOnly(DataModel.getColFromVariable("PICK_REPAIR"));
            DataModel.SetReadOnly(DataModel.getColFromVariable("TEMPLE_REPAIR"));
            DataModel.SetReadOnly(DataModel.getColFromVariable("WARP_END_REPAIR"));

            Table.getTableHeader().setReorderingAllowed(false);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);
            Table.getColumnModel().getColumn(1).setMinWidth(0);
            Table.getColumnModel().getColumn(2).setMinWidth(0);
            Table.getColumnModel().getColumn(1).setMaxWidth(0);
            Table.getColumnModel().getColumn(2).setMaxWidth(0);
            Table.getColumnModel().getColumn(3).setMinWidth(165);
            Table.getColumnModel().getColumn(4).setMaxWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(90);
            Table.getColumnModel().getColumn(6).setMinWidth(180);
            for (i = 6; i < rsInfo.getColumnCount(); i++) {
                Table.getColumnModel().getColumn(i).setMinWidth(120);
            }
            //Table.getColumnModel().getColumn(7).setMinWidth(80);
            //Table.getColumnModel().getColumn(7).setMaxWidth(80);

            Table.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer1());
            Table.getTableHeader().setPreferredSize(new Dimension(Table.getColumnModel().getTotalColumnWidth(), 35));

            TableColumn layerColumn = Table.getColumnModel().getColumn(DataModel.getColFromVariable("REG_ROKDI"));
            JComboBox layerbox = new JComboBox();
            layerbox.addItem("");
            layerbox.addItem("REGULAR");
            layerbox.addItem("ROKDI");
            layerColumn.setCellEditor(new DefaultCellEditor(layerbox));

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setCustomComponent(10, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(true);
            aCheckBox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                }
            });
            Table.getColumnModel().getColumn(10).setCellEditor(new DefaultCellEditor(aCheckBox));
            Table.getColumnModel().getColumn(10).setCellRenderer(Renderer);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("EMP_NAME_MASTER")).setMinWidth(0);//85
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("EMP_NAME_MASTER")).setMaxWidth(0);//85
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("NEW_EMP_NO")).setMinWidth(0);//NEW_EMP_NO
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("NEW_EMP_NO")).setMaxWidth(0);//NEW_EMP_NO

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CLOTH_REPAIR")).setMinWidth(0);//NEW_EMP_NO
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CLOTH_REPAIR")).setMaxWidth(0);//NEW_EMP_NO
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SHUTTLE_REPAIR_TOTAL")).setMinWidth(0);//NEW_EMP_NO
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SHUTTLE_REPAIR_TOTAL")).setMaxWidth(0);//NEW_EMP_NO

            //Table.getColumnModel().getColumn(89).setMinWidth(0);//SHIFT_ID
            //Table.getColumnModel().getColumn(89).setMaxWidth(0);//SHIFT_ID
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR4")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR4")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR5")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR5")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR6")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR6")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR1")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR1")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR2")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR2")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR3")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("CR3")).setMaxWidth(50);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR1")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR1")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR2")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR2")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR3")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR3")).setMaxWidth(50);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR4")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR4")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR5")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("SR5")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR1")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR1")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR2")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR2")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR3")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR3")).setMaxWidth(50);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR4")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR4")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR5")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR5")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR6")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR6")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR7")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR7")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR8")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("PR8")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR1")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR1")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR2")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR2")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR3")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR3")).setMaxWidth(50);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR4")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR4")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR5")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("WR5")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR1")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR1")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR2")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR2")).setMaxWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR3")).setMinWidth(50);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR3")).setMaxWidth(50);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR4")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR4")).setMaxWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR5")).setMinWidth(0);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("TR5")).setMaxWidth(0);

            Table.getColumnModel().getColumn(DataModel.getColFromVariable("OT_PUNCHES")).setMinWidth(150);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("ALL_PUNCHES")).setMinWidth(150);
            Table.getColumnModel().getColumn(DataModel.getColFromVariable("REMARK")).setMinWidth(450);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        ItemShift1 = new javax.swing.JMenuItem();
        ItemShift2 = new javax.swing.JMenuItem();
        ItemShift3 = new javax.swing.JMenuItem();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtShift = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtProductionDate = new javax.swing.JTextField();
        btnEmpMstETE = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        jLabel2 = new javax.swing.JLabel();
        txtNoOfWorker = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TotalReg = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        TotalRok = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        TotalPick = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        TotalTimeSum = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        lblStatus1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtDocNo1 = new javax.swing.JTextField();
        cmdNextToTab4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtShift1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtProductionDate1 = new javax.swing.JTextField();
        btnEmpMstETE1 = new javax.swing.JButton();
        file2 = new javax.swing.JFileChooser();
        jLabel16 = new javax.swing.JLabel();
        txtNoOfWorker1 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        TotalWeaveTime = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtStaffNo = new javax.swing.JTextField();
        txtStaffName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtStaffNo1 = new javax.swing.JTextField();
        txtStaffName1 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtStaffNo2 = new javax.swing.JTextField();
        txtStaffName2 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtStaffNo3 = new javax.swing.JTextField();
        txtStaffName3 = new javax.swing.JTextField();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        TotalEmpC = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        TotalEmpC_Rokdi = new javax.swing.JTextField();
        TotalEmpC_Regular = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        TotalEmpP_Regular = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        TotalEmpP_Rokdi = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TotalEmpP = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();

        jMenuItem1.setText("jMenuItem1");

        ItemShift1.setText("Shift 1");
        ItemShift1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShift1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ItemShift1);

        ItemShift2.setText("Shift 2");
        ItemShift2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShift2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ItemShift2);

        ItemShift3.setText("Shift 3");
        ItemShift3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShift3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(ItemShift3);

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(51, 51, 255));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 1070, 330);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus);
        lblStatus.setBounds(10, 50, 1070, 30);

        jLabel1.setText("Document No");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 10, 100, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setText("BU000001");
        jPanel1.add(txtDocNo);
        txtDocNo.setBounds(110, 10, 130, 20);

        jLabel3.setText("Shift");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(250, 10, 60, 15);

        txtShift.setEnabled(false);
        jPanel1.add(txtShift);
        txtShift.setBounds(290, 10, 50, 20);

        jLabel4.setText("Weaving Production Date ");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(350, 10, 190, 15);

        txtProductionDate.setEnabled(false);
        jPanel1.add(txtProductionDate);
        txtProductionDate.setBounds(530, 10, 90, 20);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        jPanel1.add(btnEmpMstETE);
        btnEmpMstETE.setBounds(930, 410, 150, 30);
        jPanel1.add(file1);
        file1.setBounds(650, 600, 517, 326);

        jLabel2.setText("No of Wroker");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 410, 110, 20);

        txtNoOfWorker.setEditable(false);
        jPanel1.add(txtNoOfWorker);
        txtNoOfWorker.setBounds(120, 412, 50, 20);

        jLabel7.setText("Total Regular");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(660, 420, 110, 20);

        TotalReg.setEditable(false);
        jPanel1.add(TotalReg);
        TotalReg.setBounds(770, 420, 50, 20);

        jLabel8.setText("Total Rokdi");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(660, 450, 100, 20);

        TotalRok.setEditable(false);
        jPanel1.add(TotalRok);
        TotalRok.setBounds(770, 450, 50, 20);

        jLabel9.setText("Total Pick");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(660, 480, 90, 20);

        TotalPick.setEditable(false);
        jPanel1.add(TotalPick);
        TotalPick.setBounds(750, 480, 70, 20);

        jLabel12.setText("Total Down Time Summary");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(380, 410, 200, 20);

        TotalTimeSum.setEditable(false);
        jPanel1.add(TotalTimeSum);
        TotalTimeSum.setBounds(580, 412, 50, 20);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table1.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table1.setSelectionForeground(new java.awt.Color(51, 51, 255));
        Table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table1MouseClicked(evt);
            }
        });
        Table1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Table1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Table1FocusLost(evt);
            }
        });
        Table1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table1KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(Table1);

        jPanel4.add(jScrollPane3);
        jScrollPane3.setBounds(10, 80, 1070, 360);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(lblStatus1);
        lblStatus1.setBounds(10, 50, 1070, 30);

        jLabel13.setText("Document No");
        jPanel4.add(jLabel13);
        jLabel13.setBounds(10, 10, 100, 30);

        txtDocNo1.setEditable(false);
        txtDocNo1.setText("BU000001");
        jPanel4.add(txtDocNo1);
        txtDocNo1.setBounds(110, 10, 130, 30);

        cmdNextToTab4.setMnemonic('N');
        cmdNextToTab4.setText("Next >>");
        cmdNextToTab4.setToolTipText("Next Tab");
        cmdNextToTab4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab4ActionPerformed(evt);
            }
        });
        jPanel4.add(cmdNextToTab4);
        cmdNextToTab4.setBounds(930, 490, 120, 30);

        jLabel14.setText("Shift");
        jPanel4.add(jLabel14);
        jLabel14.setBounds(250, 10, 60, 30);

        txtShift1.setEnabled(false);
        jPanel4.add(txtShift1);
        txtShift1.setBounds(300, 10, 50, 30);

        jLabel15.setText("Weaving Production Date ");
        jPanel4.add(jLabel15);
        jLabel15.setBounds(370, 10, 190, 30);

        txtProductionDate1.setEnabled(false);
        jPanel4.add(txtProductionDate1);
        txtProductionDate1.setBounds(550, 10, 120, 30);

        btnEmpMstETE1.setLabel("Export to Excel");
        btnEmpMstETE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETE1ActionPerformed(evt);
            }
        });
        jPanel4.add(btnEmpMstETE1);
        btnEmpMstETE1.setBounds(930, 10, 150, 30);
        jPanel4.add(file2);
        file2.setBounds(650, 600, 517, 326);

        jLabel16.setText("No of Wroker");
        jPanel4.add(jLabel16);
        jLabel16.setBounds(10, 440, 110, 20);
        jPanel4.add(txtNoOfWorker1);
        txtNoOfWorker1.setBounds(110, 440, 40, 20);
        jPanel4.add(jTextField10);
        jTextField10.setBounds(260, 440, 40, 20);

        jLabel17.setText("Emp Type C");
        jPanel4.add(jLabel17);
        jLabel17.setBounds(160, 440, 110, 20);

        jLabel18.setText("Emp Type P");
        jPanel4.add(jLabel18);
        jLabel18.setBounds(310, 440, 110, 20);
        jPanel4.add(jTextField11);
        jTextField11.setBounds(410, 440, 40, 20);

        jLabel20.setText("Total Regular");
        jPanel4.add(jLabel20);
        jLabel20.setBounds(460, 440, 110, 20);
        jPanel4.add(jTextField12);
        jTextField12.setBounds(560, 440, 40, 20);

        jLabel21.setText("Total Rokdi");
        jPanel4.add(jLabel21);
        jLabel21.setBounds(610, 440, 110, 20);
        jPanel4.add(jTextField13);
        jTextField13.setBounds(710, 440, 40, 20);

        jLabel22.setText("Total Pick");
        jPanel4.add(jLabel22);
        jLabel22.setBounds(760, 440, 110, 20);
        jPanel4.add(jTextField14);
        jTextField14.setBounds(860, 440, 40, 20);

        jLabel23.setText("Total Time");
        jPanel4.add(jLabel23);
        jLabel23.setBounds(910, 440, 110, 20);
        jPanel4.add(jTextField15);
        jTextField15.setBounds(1010, 440, 40, 20);

        jLabel24.setText("No PPC Program");
        jPanel4.add(jLabel24);
        jLabel24.setBounds(10, 460, 130, 20);
        jPanel4.add(jTextField16);
        jTextField16.setBounds(140, 460, 40, 20);

        jLabel25.setText("Total Time Summary");
        jPanel4.add(jLabel25);
        jLabel25.setBounds(430, 460, 150, 20);
        jPanel4.add(jTextField17);
        jTextField17.setBounds(590, 460, 40, 20);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(0, 0, 0, 0);

        jLabel26.setText("Total Weave Time");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(180, 410, 150, 20);

        TotalWeaveTime.setEditable(false);
        jPanel1.add(TotalWeaveTime);
        TotalWeaveTime.setBounds(320, 412, 50, 20);

        jLabel10.setText("Staff 1");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(630, 10, 50, 15);

        txtStaffNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffNoKeyPressed(evt);
            }
        });
        jPanel1.add(txtStaffNo);
        txtStaffNo.setBounds(680, 10, 80, 20);

        txtStaffName.setEnabled(false);
        jPanel1.add(txtStaffName);
        txtStaffName.setBounds(770, 10, 310, 20);

        jLabel11.setText("Staff 2");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(10, 30, 50, 15);

        txtStaffNo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffNo1KeyPressed(evt);
            }
        });
        jPanel1.add(txtStaffNo1);
        txtStaffNo1.setBounds(60, 30, 80, 20);

        txtStaffName1.setEnabled(false);
        jPanel1.add(txtStaffName1);
        txtStaffName1.setBounds(140, 30, 230, 20);

        jLabel27.setText("Staff 3");
        jPanel1.add(jLabel27);
        jLabel27.setBounds(370, 30, 50, 15);

        txtStaffNo2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffNo2KeyPressed(evt);
            }
        });
        jPanel1.add(txtStaffNo2);
        txtStaffNo2.setBounds(420, 30, 80, 20);

        txtStaffName2.setEnabled(false);
        jPanel1.add(txtStaffName2);
        txtStaffName2.setBounds(500, 30, 220, 20);

        jLabel28.setText("Staff 4");
        jPanel1.add(jLabel28);
        jLabel28.setBounds(720, 30, 50, 15);

        txtStaffNo3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStaffNo3KeyPressed(evt);
            }
        });
        jPanel1.add(txtStaffNo3);
        txtStaffNo3.setBounds(770, 30, 80, 20);

        txtStaffName3.setEnabled(false);
        jPanel1.add(txtStaffName3);
        txtStaffName3.setBounds(850, 30, 230, 20);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(1120, 410, 120, 30);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(null);

        jLabel30.setText("Total");
        jPanel5.add(jLabel30);
        jLabel30.setBounds(10, 40, 36, 20);

        TotalEmpC.setEditable(false);
        jPanel5.add(TotalEmpC);
        TotalEmpC.setBounds(80, 40, 70, 20);

        jLabel37.setText("Regular");
        jPanel5.add(jLabel37);
        jLabel37.setBounds(170, 10, 70, 20);

        jLabel38.setText("Rokdi");
        jPanel5.add(jLabel38);
        jLabel38.setBounds(170, 40, 39, 15);

        TotalEmpC_Rokdi.setEditable(false);
        jPanel5.add(TotalEmpC_Rokdi);
        TotalEmpC_Rokdi.setBounds(240, 40, 60, 20);

        TotalEmpC_Regular.setEditable(false);
        jPanel5.add(TotalEmpC_Regular);
        TotalEmpC_Regular.setBounds(240, 10, 60, 20);

        jLabel39.setText("Contract Employee");
        jPanel5.add(jLabel39);
        jLabel39.setBounds(10, 10, 170, 15);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(10, 440, 310, 70);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        jLabel29.setText("Permanant Employee");
        jPanel7.add(jLabel29);
        jLabel29.setBounds(10, 10, 170, 15);

        jLabel40.setText("Regular");
        jPanel7.add(jLabel40);
        jLabel40.setBounds(170, 10, 70, 20);

        TotalEmpP_Regular.setEditable(false);
        jPanel7.add(TotalEmpP_Regular);
        TotalEmpP_Regular.setBounds(240, 10, 60, 20);

        jLabel41.setText("Rokdi");
        jPanel7.add(jLabel41);
        jLabel41.setBounds(170, 40, 60, 20);

        TotalEmpP_Rokdi.setEditable(false);
        jPanel7.add(TotalEmpP_Rokdi);
        TotalEmpP_Rokdi.setBounds(240, 40, 60, 20);

        jLabel6.setText("Emp Type P");
        jPanel7.add(jLabel6);
        jLabel6.setBounds(10, 40, 110, 20);

        TotalEmpP.setEditable(false);
        jPanel7.add(TotalEmpP);
        TotalEmpP.setBounds(110, 40, 50, 20);

        jPanel1.add(jPanel7);
        jPanel7.setBounds(330, 440, 320, 70);

        Tab.addTab("Production Uploaded Entry", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1090, 540);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1100, 40);

        lblTitle1.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle1.setText("Production Uploaded Entry");
        lblTitle1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle1.setOpaque(true);
        getContentPane().add(lblTitle1);
        lblTitle1.setBounds(0, 40, 1100, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed

        if (evt.getKeyCode() == 112 && Table.getSelectedColumn() == 5) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            System.out.println("SELECT emp.PAY_EMP_NO,emp.EMP_NAME,dept.Name FROM SDMLATTPAY.ATTPAY_EMPMST emp "
                    + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER dept ON emp.EMP_DEPARTMENT=dept.DPTID "
                    + "WHERE emp.APPROVED=1 AND emp.CANCELED=0  AND emp.EMP_DEPARTMENT IN (28,58,53) AND emp.EMP_LEFT_DATE='0000-00-00'"
                    + "AND emp.EMP_LEFT_DATE = '0000-00-00' "
                    + "UNION ALL SELECT EMP_ID, EMP_NAME,EMP_DEPT FROM SDMLATTPAY.DAILY_ATT_FORM_DATA\n" +
                    "\n" +
                    "WHERE ATT_DATE ='"+EITLERPGLOBAL.formatDateDB(txtProductionDate.getText())+"'  AND ATT_SHIFT='"+txtShift.getText()+"'  AND ATT_DEPT = 'WEAVING' AND EMP_DEPT != 'DF33  FELT WEAVING'\n" +
                    "\n" +
                    "AND EMP_ID NOT IN ('BRD008018')");
            aList.SQL = "SELECT emp.PAY_EMP_NO,emp.EMP_NAME,dept.Name FROM SDMLATTPAY.ATTPAY_EMPMST emp "
                    + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER dept ON emp.EMP_DEPARTMENT=dept.DPTID "
                    + "WHERE emp.APPROVED=1 AND emp.CANCELED=0  AND emp.EMP_DEPARTMENT IN (28,58,53) AND emp.EMP_LEFT_DATE='0000-00-00'"
                    + "AND emp.EMP_LEFT_DATE = '0000-00-00' "
                    + "UNION ALL SELECT EMP_ID, EMP_NAME,EMP_DEPT FROM SDMLATTPAY.DAILY_ATT_FORM_DATA\n" +
                    "\n" +
                    "WHERE ATT_DATE ='"+EITLERPGLOBAL.formatDateDB(txtProductionDate.getText())+"'  AND ATT_SHIFT='"+txtShift.getText()+"'  AND ATT_DEPT = 'WEAVING' AND EMP_DEPT != 'DF33  FELT WEAVING'\n" +
                    "\n" +
                    "AND EMP_ID NOT IN ('BRD008018')";

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                String Name_emp = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST WHERE PAY_EMP_NO='" + aList.ReturnVal + "'");
                String Des_Name = data.getStringValueFromDB("SELECT DES.Name FROM SDMLATTPAY.ATTPAY_EMPMST EMP,SDMLATTPAY.ATT_DESIGNATION_MASTER DES WHERE EMP.EMP_DESIGNATION=DES.DSGID AND EMP.PAY_EMP_NO='" + aList.ReturnVal + "'");
                String Inc_Grade = data.getStringValueFromDB("SELECT DES.INCENTIVE_GRADE FROM SDMLATTPAY.ATTPAY_EMPMST EMP,SDMLATTPAY.ATT_DESIGNATION_MASTER DES WHERE EMP.EMP_DESIGNATION=DES.DSGID AND EMP.PAY_EMP_NO='"+aList.ReturnVal+"'");
                DataModel.setValueByVariable("EMP_NO", aList.ReturnVal, Table.getSelectedRow());
                DataModel.setValueByVariable("EMP_NAME", Name_emp, Table.getSelectedRow());
                DataModel.setValueByVariable("DESIGNATION", Des_Name, Table.getSelectedRow());
                DataModel.setValueByVariable("DESIGNATION_GRADE", Inc_Grade, Table.getSelectedRow());
                if (aList.ReturnVal.startsWith("BRD00")) {
                    DataModel.setValueByVariable("EMP_TYPE", "C", Table.getSelectedRow());
                }
                if (aList.ReturnVal.startsWith("BRD30")) {
                    DataModel.setValueByVariable("EMP_TYPE", "P", Table.getSelectedRow());
                }

                if (txtShift.getText().equals("1")) {
                    DataModel.setValueByVariable("REG_ROKDI", "REGULAR", Table.getSelectedRow());
                } else if (txtShift.getText().equals("2")) {

                    String doc_date = txtProductionDate.getText();
                    //FWP1
                    String strDay = doc_date.substring(0, 2);
                    String strMonth = doc_date.substring(3, 5);
                    String strYear = doc_date.substring(6, 10);
                    String doc_no_forcheck = "FWP1" + strDay + "" + strMonth + "" + strYear;
                    //aList.ReturnVal
                    String Doc_Available = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL where DOC_NO='" + doc_no_forcheck + "' AND EMP_NO='" + aList.ReturnVal + "'");
                    if (!Doc_Available.equals("")) {
                        DataModel.setValueByVariable("REG_ROKDI", "ROKDI", Table.getSelectedRow());
                    } else {
                        DataModel.setValueByVariable("REG_ROKDI", "REGULAR", Table.getSelectedRow());
                    }
                } else if (txtShift.getText().equals("3")) {

                    String doc_date = txtProductionDate.getText();
                    //FWP1
                    String strDay = doc_date.substring(0, 2);
                    String strMonth = doc_date.substring(3, 5);
                    String strYear = doc_date.substring(6, 10);
                    String doc_no_forcheck1 = "FWP1" + strDay + "" + strMonth + "" + strYear;
                    String doc_no_forcheck2 = "FWP2" + strDay + "" + strMonth + "" + strYear;
                    //aList.ReturnVal
                    String Doc_Available = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL where DOC_NO IN ('" + doc_no_forcheck1 + "','" + doc_no_forcheck2 + "') AND EMP_NO='" + aList.ReturnVal + "'");
                    if (!Doc_Available.equals("")) {
                        DataModel.setValueByVariable("REG_ROKDI", "ROKDI", Table.getSelectedRow());
                    } else {
                        DataModel.setValueByVariable("REG_ROKDI", "REGULAR", Table.getSelectedRow());
                    }
                }

                String Punch = data.getStringValueFromDB("SELECT ALL_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='" + aList.ReturnVal + "' AND PUNCHDATE='" + EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()) + "'");
                String OT = data.getStringValueFromDB("SELECT ALL_OT_PUNCHES FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='" + aList.ReturnVal + "' AND PUNCHDATE='" + EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()) + "'");
                String SHIFT = data.getStringValueFromDB("SELECT SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='" + aList.ReturnVal + "' AND PUNCHDATE='" + EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()) + "'");
                System.out.println("SELECT SHIFT FROM SDMLATTPAY.ATT_DATA_DAILY_SUMMARY WHERE EMPID='" + aList.ReturnVal + "' AND PUNCHDATE='" + EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()) + "'");
                //
                DataModel.setValueByVariable("ALL_PUNCHES", Punch, Table.getSelectedRow());
                DataModel.setValueByVariable("OT_PUNCHES", OT, Table.getSelectedRow());
                DataModel.setValueByVariable("SHIFT_DATA", SHIFT, Table.getSelectedRow());

            }
        } else if (evt.getKeyCode() == 112 && Table.getSelectedColumn() == 3 && Table.getValueAt(Table.getSelectedRow(), 3).equals("Additional")) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT PARA_DESC,PARA_EXT2 FROM PRODUCTION.FELT_PARAMETER_MASTER where PARA_ID='WVG_CATEGORY'";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            aList.SecondCol = 2;
            if (aList.ShowLOV()) {
                DataModel.setValueByVariable("CATEGORY", aList.ReturnVal, Table.getSelectedRow());
                System.out.println("Second Val " + aList.SecondVal);
                DataModel.setValueByVariable("LOOM_ENG", aList.SecondVal, Table.getSelectedRow());
            }
        } else if (evt.getKeyCode() == 112 && Table.getSelectedColumn() == 11) //F1 Key pressed
        {
            ATTPAYLOV aList = new ATTPAYLOV();
            aList.SQL = "SELECT PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER where PARA_ID='WVG_CATEGORY'";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                DataModel.setValueByVariable("TRAINEE_POSITION", aList.ReturnVal, Table.getSelectedRow());
            }
        }
    }//GEN-LAST:event_TableKeyPressed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = txtDocNo.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
//        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtDocNo.getText();
        //WVG_Upload.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //WVG_Upload.HistoryView = false;
        //WVG_Upload.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
        SetFields(false);
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
        SetFields(false);
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
        SetFields(false);
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
        SetFields(false);
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_TableFocusGained

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:
        lblStatus.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void ItemShift1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShift1ActionPerformed
        // TODO add your handling code here:
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        //SelectFirstFree aList = new SelectFirstFree();
        //aList.ModuleID = ModuleId;
        //aList.FirstFreeNo = 337;
        //FFNo = aList.FirstFreeNo;
        //txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        String strDate = data.getStringValueFromDB("SELECT DATE_FORMAT(CURDATE(),'%d/%m/%Y') AS DATE FROM DUAL");

        strDate = JOptionPane.showInputDialog("Enter Document Date ", strDate);

        String strDay = strDate.substring(0, 2);
        String strMonth = strDate.substring(3, 5);
        String strYear = strDate.substring(6, 10);
        txtDocNo.setText("FWP1" + strDay + "" + strMonth + "" + strYear);
        txtProductionDate.setText(strDate);
        txtShift.setText("1");
        lblTitle1.setText("WNG PRODUCTION LOOM REPORT - " + txtDocNo.getText());

        String DocNo = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL where DOC_NO='" + txtDocNo.getText() + "' limit 1");
        if (DocNo.equals("")) {
            AddFormat();
        } else {
            JOptionPane.showMessageDialog(this, "For Date : " + strDate + " and Shift : 1, is already created");
            Cancel();
        }
    }//GEN-LAST:event_ItemShift1ActionPerformed

    private void ItemShift2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShift2ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        //SelectFirstFree aList = new SelectFirstFree();
        //aList.ModuleID = ModuleId;
        //aList.FirstFreeNo = 337;
        //FFNo = aList.FirstFreeNo;
        //txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        String strDate = data.getStringValueFromDB("SELECT DATE_FORMAT(CURDATE(),'%d/%m/%Y') AS DATE FROM DUAL");

        strDate = JOptionPane.showInputDialog("Enter Document Date ", strDate);

        String strDay = strDate.substring(0, 2);
        String strMonth = strDate.substring(3, 5);
        String strYear = strDate.substring(6, 10);
        txtDocNo.setText("FWP2" + strDay + "" + strMonth + "" + strYear);
        txtProductionDate.setText(strDate);
        txtShift.setText("2");
        lblTitle1.setText("WNG PRODUCTION LOOM REPORT - " + txtDocNo.getText());

        String DocNo = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL where DOC_NO='" + txtDocNo.getText() + "' limit 1");
        if (DocNo.equals("")) {
            AddFormat();
        } else {
            JOptionPane.showMessageDialog(this, "For Date : " + strDate + " and Shift : 2, is already created");
            Cancel();
        }

    }//GEN-LAST:event_ItemShift2ActionPerformed

    private void ItemShift3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShift3ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        //SelectFirstFree aList = new SelectFirstFree();
        //aList.ModuleID = ModuleId;
        //aList.FirstFreeNo = 337;
        //FFNo = aList.FirstFreeNo;
        //txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        String strDate = data.getStringValueFromDB("SELECT DATE_FORMAT(CURDATE(),'%d/%m/%Y') AS DATE FROM DUAL");

        strDate = JOptionPane.showInputDialog("Enter Document Date ", strDate);

        String strDay = strDate.substring(0, 2);
        String strMonth = strDate.substring(3, 5);
        String strYear = strDate.substring(6, 10);
        txtDocNo.setText("FWP3" + strDay + "" + strMonth + "" + strYear);
        txtProductionDate.setText(strDate);
        txtShift.setText("3");
        lblTitle1.setText("WNG PRODUCTION LOOM REPORT - " + txtDocNo.getText());

        String DocNo = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL where DOC_NO='" + txtDocNo.getText() + "' limit 1");
        if (DocNo.equals("")) {
            AddFormat();
        } else {
            JOptionPane.showMessageDialog(this, "For Date : " + strDate + " and Shift : 3, is already created");
            Cancel();
        }

    }//GEN-LAST:event_ItemShift3ActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        lblStatus.setText("Category : " + DataModel.getValueByVariable("CATEGORY", Table.getSelectedRow()) + " , Loom No : " + DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()) + " , EMP Name : " + DataModel.getValueByVariable("EMP_NAME", Table.getSelectedRow()));
        int CR1_col = DataModel.getColFromVariable("CR1");
        if (Table.getSelectedColumn() == CR1_col || Table.getSelectedColumn() == CR1_col + 1 || Table.getSelectedColumn() == CR1_col + 2 || Table.getSelectedColumn() == CR1_col + 3 || Table.getSelectedColumn() == CR1_col + 4 || Table.getSelectedColumn() == CR1_col + 5 || Table.getSelectedColumn() == CR1_col + 6) {
            double cr1 = 0, cr2 = 0, cr3 = 0, cr4 = 0, cr5 = 0, cr6 = 0;
            try {
                cr1 = Double.parseDouble(DataModel.getValueByVariable("CR1", Table.getSelectedRow()));
                System.out.println("CR1 : "+DataModel.getValueByVariable("CR1", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                cr2 = Double.parseDouble(DataModel.getValueByVariable("CR2", Table.getSelectedRow()));
                System.out.println("CR2 : "+DataModel.getValueByVariable("CR2", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                cr3 = Double.parseDouble(DataModel.getValueByVariable("CR3", Table.getSelectedRow()));
                System.out.println("CR3 : "+DataModel.getValueByVariable("CR3", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                cr4 = Double.parseDouble(DataModel.getValueByVariable("CR4", Table.getSelectedRow()));
                System.out.println("CR4 : "+DataModel.getValueByVariable("CR4", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                cr5 = Double.parseDouble(DataModel.getValueByVariable("CR5", Table.getSelectedRow()));
                System.out.println("CR5 : "+DataModel.getValueByVariable("CR5", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                cr6 = Double.parseDouble(DataModel.getValueByVariable("CR6", Table.getSelectedRow()));
                System.out.println("CR6 : "+DataModel.getValueByVariable("CR6", Table.getSelectedRow()));
            } catch (Exception e) {
            }

            DataModel.setValueByVariable("CLOTH_REPAIR_TOTAL", (cr1 + cr2 + cr3 + cr4 + cr5 + cr6) + "", Table.getSelectedRow());
        }

        int SR1_col = DataModel.getColFromVariable("SR1");
        if (Table.getSelectedColumn() == SR1_col || Table.getSelectedColumn() == SR1_col + 1 || Table.getSelectedColumn() == SR1_col + 2 || Table.getSelectedColumn() == SR1_col + 3 || Table.getSelectedColumn() == SR1_col + 4) {
            double sr1 = 0, sr2 = 0, sr3 = 0, sr4 = 0;
            try {
                sr1 = Double.parseDouble(DataModel.getValueByVariable("SR1", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                sr2 = Double.parseDouble(DataModel.getValueByVariable("SR2", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                sr3 = Double.parseDouble(DataModel.getValueByVariable("SR3", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                sr4 = Double.parseDouble(DataModel.getValueByVariable("SR4", Table.getSelectedRow()));
            } catch (Exception e) {
            }

            DataModel.setValueByVariable("SHUTTLE_REPAIR", (sr1 + sr2 + sr3 + sr4) + "", Table.getSelectedRow());
        }

        int PR1_col = DataModel.getColFromVariable("PR1");
        if (Table.getSelectedColumn() == PR1_col || Table.getSelectedColumn() == PR1_col + 1 || Table.getSelectedColumn() == PR1_col + 2 || Table.getSelectedColumn() == PR1_col + 3 || Table.getSelectedColumn() == PR1_col + 4 || Table.getSelectedColumn() == PR1_col + 5 || Table.getSelectedColumn() == PR1_col + 6 || Table.getSelectedColumn() == PR1_col + 7 || Table.getSelectedColumn() == PR1_col + 8) {
            double pr1 = 0, pr2 = 0, pr3 = 0, pr4 = 0, pr5 = 0, pr6 = 0, pr7 = 0, pr8 = 0;
            try {
                pr1 = Double.parseDouble(DataModel.getValueByVariable("PR1", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr2 = Double.parseDouble(DataModel.getValueByVariable("PR2", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr3 = Double.parseDouble(DataModel.getValueByVariable("PR3", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr4 = Double.parseDouble(DataModel.getValueByVariable("PR4", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr5 = Double.parseDouble(DataModel.getValueByVariable("PR5", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr6 = Double.parseDouble(DataModel.getValueByVariable("PR6", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr7 = Double.parseDouble(DataModel.getValueByVariable("PR7", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                pr8 = Double.parseDouble(DataModel.getValueByVariable("PR8", Table.getSelectedRow()));
            } catch (Exception e) {
            }

            DataModel.setValueByVariable("PICK_REPAIR", (pr1 + pr2 + pr3 + pr4 + pr5 + pr6 + pr7 + pr8) + "", Table.getSelectedRow());
        }

        int WR1_col = DataModel.getColFromVariable("WR1");
        if (Table.getSelectedColumn() == WR1_col || Table.getSelectedColumn() == WR1_col + 1 || Table.getSelectedColumn() == WR1_col + 2 || Table.getSelectedColumn() == WR1_col + 3 || Table.getSelectedColumn() == WR1_col + 4 || Table.getSelectedColumn() == WR1_col + 5 || Table.getSelectedColumn() == WR1_col + 6) {
            double wr1 = 0, wr2 = 0, wr3 = 0, wr4 = 0, wr5 = 0;
            try {
                wr1 = Double.parseDouble(DataModel.getValueByVariable("WR1", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                wr2 = Double.parseDouble(DataModel.getValueByVariable("WR2", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                wr3 = Double.parseDouble(DataModel.getValueByVariable("WR3", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                wr4 = Double.parseDouble(DataModel.getValueByVariable("WR4", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                wr5 = Double.parseDouble(DataModel.getValueByVariable("WR5", Table.getSelectedRow()));
            } catch (Exception e) {
            }

            DataModel.setValueByVariable("WARP_END_REPAIR", (wr1 + wr2 + wr3 + wr4 + wr5) + "", Table.getSelectedRow());
        }

        int TR1_col = DataModel.getColFromVariable("TR1");
        if (Table.getSelectedColumn() == TR1_col || Table.getSelectedColumn() == TR1_col + 1 || Table.getSelectedColumn() == TR1_col + 2 || Table.getSelectedColumn() == TR1_col + 3 || Table.getSelectedColumn() == TR1_col + 4 || Table.getSelectedColumn() == TR1_col + 5 || Table.getSelectedColumn() == TR1_col + 6) {
            double tr1 = 0, tr2 = 0, tr3 = 0, tr4 = 0, tr5 = 0;
            try {
                tr1 = Double.parseDouble(DataModel.getValueByVariable("TR1", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                tr2 = Double.parseDouble(DataModel.getValueByVariable("TR2", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                tr3 = Double.parseDouble(DataModel.getValueByVariable("TR3", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                tr4 = Double.parseDouble(DataModel.getValueByVariable("TR4", Table.getSelectedRow()));
            } catch (Exception e) {
            }
            try {
                tr5 = Double.parseDouble(DataModel.getValueByVariable("TR5", Table.getSelectedRow()));
            } catch (Exception e) {
            }

            DataModel.setValueByVariable("TEMPLE_REPAIR", (tr1 + tr2 + tr3 + tr4 + tr5) + "", Table.getSelectedRow());
        }
        try {

            int cl1 = DataModel.getColFromVariable("NO_WARP_NO_WEFT");
            if ((Table.getSelectedColumn() >= cl1) && (Table.getValueAt(Table.getSelectedRow(), DataModel.getColFromVariable("LOOM_ENG")) != "")) {
                double clt1 = 0, clt2 = 0, clt3 = 0, clt4 = 0, clt5 = 0, clt6 = 0, clt7 = 0, clt8 = 0, clt9 = 0, clt10 = 0, clt11 = 0, clt12 = 0, clt13 = 0, clt14 = 0, clt15 = 0;
                try {
                    clt1 = Double.parseDouble(DataModel.getValueByVariable("NO_WARP_NO_WEFT", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt2 = Double.parseDouble(DataModel.getValueByVariable("NO_POWER_NO_AIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt3 = Double.parseDouble(DataModel.getValueByVariable("NO_PIRN", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt4 = Double.parseDouble(DataModel.getValueByVariable("BEAN_GAITING", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt5 = Double.parseDouble(DataModel.getValueByVariable("NO_WEAVER", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt6 = Double.parseDouble(DataModel.getValueByVariable("OTHER", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt7 = Double.parseDouble(DataModel.getValueByVariable("CLOTH_REPAIR_TOTAL", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt8 = Double.parseDouble(DataModel.getValueByVariable("NO_BEAM_READY", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    clt9 = Double.parseDouble(DataModel.getValueByVariable("Q_CHANGES", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                try {
                    clt10 = Double.parseDouble(DataModel.getValueByVariable("SHUTTLE_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                try {
                    clt11 = Double.parseDouble(DataModel.getValueByVariable("PICK_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                try {
                    clt13 = Double.parseDouble(DataModel.getValueByVariable("WARP_END_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                try {
                    clt14 = Double.parseDouble(DataModel.getValueByVariable("TEMPLE_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                try {
                    clt15 = Double.parseDouble(DataModel.getValueByVariable("NO_PPC", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                /*
                       
                 + " '' AS  ,"
                 + " '' AS  ,"
                 + " '' AS  ,"
                 + " '' AS  ,"
                 + " '' AS  ,"
                 + " '' AS  ,"
                 + " '' AS  MC_STOPPAGES,"

                 */
                double re_beam_gaiting = 0, mech_repair = 0, ele_ro_repair = 0, over_haul = 0, selevedge_edge = 0, carry_over = 0, mc_stopperges = 0;
                try {
                    re_beam_gaiting = Double.parseDouble(DataModel.getValueByVariable("RE_BEAM_GAITING", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    mech_repair = Double.parseDouble(DataModel.getValueByVariable("MECH_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    ele_ro_repair = Double.parseDouble(DataModel.getValueByVariable("ELE_RO_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    over_haul = Double.parseDouble(DataModel.getValueByVariable("OVER_HAULING", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    selevedge_edge = Double.parseDouble(DataModel.getValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    carry_over = Double.parseDouble(DataModel.getValueByVariable("CARRY_OVER", Table.getSelectedRow()));
                } catch (Exception e) {
                }
                try {
                    mc_stopperges = Double.parseDouble(DataModel.getValueByVariable("MC_STOPPAGES", Table.getSelectedRow()));
                } catch (Exception e) {
                }

                double other_col_total = re_beam_gaiting + mech_repair + ele_ro_repair + over_haul + selevedge_edge + carry_over + mc_stopperges;
                //if(!DataModel.getValueByVariable("EMP_NO", Table.getSelectedRow()).equals(""))
                //{
                DataModel.setValueByVariable("TOTAL_TIME", (clt1 + clt2 + clt3 + clt4 + clt5 + clt6 + clt7 + clt8 + clt9 + clt10 + clt11 + clt12 + clt13 + clt14 + clt15 + other_col_total) + "", Table.getSelectedRow());
                //}
                double shift_time = 8;
                if (txtDocNo.getText().startsWith("FWP3")) {
                    shift_time = 6.5;
                }
                //EMP_NO
                if (!DataModel.getValueByVariable("EMP_NO", Table.getSelectedRow()).equals("")) {
                    //LOOM_ENG
                    //CATEGORY
                    if(DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("7") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("8") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("81") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("82") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("83") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("84") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("85") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("86") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("87") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("88") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("89") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("90") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("91") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("92") ||
                       DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()).equals("93") )
                    {
                        //WEAVER
                        if(DataModel.getValueByVariable("CATEGORY", Table.getSelectedRow()).equals("WEAVER"))
                        {
                            DataModel.setValueByVariable("TOTAL_WEAVE_TIME", (shift_time - (clt1 + clt2 + clt3 + clt4 + clt5 + clt6 + clt7 + clt8 + clt9 + clt10 + clt11 + clt12 + clt13 + clt14 + clt15 + other_col_total)) + "", Table.getSelectedRow());
                        }
                        else
                        {
                            DataModel.setValueByVariable("TOTAL_WEAVE_TIME", "0", Table.getSelectedRow());
                        }
                    }
                    else
                    {
                        DataModel.setValueByVariable("TOTAL_WEAVE_TIME", "0", Table.getSelectedRow());
                    }
                } else {
                    DataModel.setValueByVariable("TOTAL_WEAVE_TIME", "0", Table.getSelectedRow());
                }
            }

            try {
                int EPM_col = DataModel.getColFromVariable("MC_RPM");
                int PICK_col = DataModel.getColFromVariable("PICK");

                if (Table.getSelectedColumn() == EPM_col || Table.getSelectedColumn() == PICK_col) {
                    double RPM = Double.parseDouble(DataModel.getValueByVariable("MC_RPM", Table.getSelectedRow()));
                    double shift_time = 8;
                    if (txtDocNo.getText().startsWith("FWP3")) {
                        shift_time = 6.5;
                    }
                    double MaxPicks = RPM * 60 * shift_time;

                    double Pick = Double.parseDouble(DataModel.getValueByVariable("PICK", Table.getSelectedRow()));
                    if (MaxPicks < Pick) {
                        JOptionPane.showMessageDialog(this, "Pick not valid more than " + MaxPicks);
                        DataModel.setValueByVariable("PICK", "", Table.getSelectedRow());
                    }
                }

            } catch (Exception e) {
                //e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
    }//GEN-LAST:event_TableKeyReleased

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        lblStatus.setText("Category : " + DataModel.getValueByVariable("CATEGORY", Table.getSelectedRow()) + " , Loom No : " + DataModel.getValueByVariable("LOOM_ENG", Table.getSelectedRow()) + " , EMP Name : " + DataModel.getValueByVariable("EMP_NAME", Table.getSelectedRow()));
        
        if (evt.getClickCount() == 2) {
            String pEmpno = DataModel.getValueByVariable("EMP_NO", Table.getSelectedRow());
            
            String pMonth = EITLERPGLOBAL.getMonth(EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()))+"";
            String pYear = EITLERPGLOBAL.getYear(EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()))+"";
            
            if (!pEmpno.contains("TOTAL") && !pEmpno.equals("")) {
                AppletFrame aFrame = new AppletFrame("Attendance - Advance Search");
                aFrame.startAppletEx("SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1", "Attendance - Advance Search");
                SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1 ObjItem = (SDMLATTPAY.AdvanceSearch.FrmAdvanceSearch_1) aFrame.ObjApplet;

                ObjItem.FindEmpDailyAtt(pEmpno, pMonth, pYear);
            }
        }
    }//GEN-LAST:event_TableMouseClicked

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void Table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Table1MouseClicked

    private void Table1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Table1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_Table1FocusGained

    private void Table1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Table1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_Table1FocusLost

    private void Table1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table1KeyPressed

    private void Table1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_Table1KeyReleased

    private void cmdNextToTab4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdNextToTab4ActionPerformed

    private void btnEmpMstETE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETE1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEmpMstETE1ActionPerformed

    private void txtStaffNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT emp.PAY_EMP_NO,emp.EMP_NAME,dept.Name FROM SDMLATTPAY.ATTPAY_EMPMST emp "
                        + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER dept ON emp.EMP_DEPARTMENT=dept.DPTID "
                        + "WHERE emp.APPROVED=1 AND emp.CANCELED=0  "
                        + "AND emp.EMP_LEFT_DATE = '0000-00-00'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtStaffNo.setText(aList.ReturnVal);
                    ResultSet rs = data.getResult("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where APPROVED=1 AND PAY_EMP_NO='" + aList.ReturnVal + "'");
                    rs.first();
                    txtStaffName.setText(rs.getString("EMP_NAME"));
                }
            } catch (Exception w) {
                w.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtStaffNoKeyPressed

    private void txtStaffNo1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNo1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT emp.PAY_EMP_NO,emp.EMP_NAME,dept.Name FROM SDMLATTPAY.ATTPAY_EMPMST emp "
                        + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER dept ON emp.EMP_DEPARTMENT=dept.DPTID "
                        + "WHERE emp.APPROVED=1 AND emp.CANCELED=0  "
                        + "AND emp.EMP_LEFT_DATE = '0000-00-00'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtStaffNo1.setText(aList.ReturnVal);
                    ResultSet rs = data.getResult("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where APPROVED=1 AND PAY_EMP_NO='" + aList.ReturnVal + "'");
                    rs.first();
                    txtStaffName1.setText(rs.getString("EMP_NAME"));
                }
            } catch (Exception w) {
                w.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtStaffNo1KeyPressed

    private void txtStaffNo2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNo2KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT emp.PAY_EMP_NO,emp.EMP_NAME,dept.Name FROM SDMLATTPAY.ATTPAY_EMPMST emp "
                        + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER dept ON emp.EMP_DEPARTMENT=dept.DPTID "
                        + "WHERE emp.APPROVED=1 AND emp.CANCELED=0  "
                        + "AND emp.EMP_LEFT_DATE = '0000-00-00'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtStaffNo2.setText(aList.ReturnVal);
                    ResultSet rs = data.getResult("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where APPROVED=1 AND PAY_EMP_NO='" + aList.ReturnVal + "'");
                    rs.first();
                    txtStaffName2.setText(rs.getString("EMP_NAME"));
                }
            } catch (Exception w) {
                w.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtStaffNo2KeyPressed

    private void txtStaffNo3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStaffNo3KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT emp.PAY_EMP_NO,emp.EMP_NAME,dept.Name FROM SDMLATTPAY.ATTPAY_EMPMST emp "
                        + "LEFT JOIN SDMLATTPAY.ATT_DEPARTMENT_MASTER dept ON emp.EMP_DEPARTMENT=dept.DPTID "
                        + "WHERE emp.APPROVED=1 AND emp.CANCELED=0  "
                        + "AND emp.EMP_LEFT_DATE = '0000-00-00'";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtStaffNo3.setText(aList.ReturnVal);
                    ResultSet rs = data.getResult("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where APPROVED=1 AND PAY_EMP_NO='" + aList.ReturnVal + "'");
                    rs.first();
                    txtStaffName3.setText(rs.getString("EMP_NAME"));
                }
            } catch (Exception w) {
                w.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtStaffNo3KeyPressed
    private void MoveFirst() {
        WVG_Upload.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        WVG_Upload.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        WVG_Upload.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        WVG_Upload.MoveLast();
        DisplayData();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.WVG_Prod_Loom_WVR_NEW.frmFindFeltWVGNew", true);
        frmFindFeltWVGNew ObjFindFeltorder = (frmFindFeltWVGNew) ObjLoader.getObj();

        if (ObjFindFeltorder.Cancelled == false) {
            //WVG_Upload.Filter(" DOC_NO='" + docNo + "'")
            if (!WVG_Upload.Filter(ObjFindFeltorder.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt Production Weaving Report", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

//    public void FindWaiting() {
//        WVG_Upload.Filter(" DOC_NO IN (SELECT DISTINCT PRODUCTION.FELT_BUDGET_DETAIL.DOC_NO FROM PRODUCTION.FELT_BUDGET_DETAIL, PRODUCTION.FELT_PROD_DOC_DATA WHERE PRODUCTION.FELT_BUDGET_DETAIL.DOC_NO=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
//        SetMenuForRights();
//        DisplayData();
//    }
    private void Add() {
        jPopupMenu1.show(cmdNew, 0, 35);

    }

    private void AddFormat() {
        FormatGrid();

        Object[] rowData = new Object[100];

        rowData[0] = Integer.toString(1);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "7";
        rowData[14] = "ACNE1";
        rowData[15] = "33";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

//        rowData[0] = Integer.toString(1);
//        rowData[1] = txtProductionDate.getText();
//        rowData[2] = txtShift.getText();
//        rowData[3] = "WEAVER";
//        rowData[4] = "7";
//        rowData[14] = "ACNE1";
//        rowData[15] = "33";
//        rowData[DataModel.getColFromVariable("GRADE")] = "1";
//        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(2);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "8";
        rowData[14] = "ACNE1";
        rowData[15] = "23";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(3);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "81";
        rowData[14] = "MNE";
        rowData[15] = "47";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(4);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "82";
        rowData[14] = "MNE";
        rowData[15] = "44";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(5);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "83";
        rowData[14] = "MNE";
        rowData[15] = "36";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(6);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "84";
        rowData[14] = "MNE";
        rowData[15] = "34";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(7);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "85";
        rowData[14] = "MNE";
        rowData[15] = "30";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(8);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "86";
        rowData[14] = "ACNE1";
        rowData[15] = "32";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(9);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "87";
        rowData[14] = "MNE";
        rowData[15] = "45";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(10);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "88";
        rowData[14] = "ACNE1";
        rowData[15] = "23";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(11);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "89";
        rowData[14] = "MNE";
        rowData[15] = "38";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(12);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "90";
        rowData[14] = "HDS";
        rowData[15] = "55";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(13);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "91";
        rowData[14] = "MNE";
        rowData[15] = "32";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(14);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "92";
        rowData[14] = "MNE";
        rowData[15] = "32";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(15);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER_HELPER";
        rowData[4] = "92";
        rowData[14] = "MNE";
        rowData[15] = "32";
        rowData[DataModel.getColFromVariable("GRADE")] = "10";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "10";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(16);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WEAVER";
        rowData[4] = "93";
        rowData[14] = "MNE";
        rowData[15] = "39";
        rowData[DataModel.getColFromVariable("GRADE")] = "1";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "1";
        DataModel.addRow(rowData);

        rowData[14] = "";
        rowData[15] = "";

        int n = 17;
        for (int i = 1; i <= 8; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "DRAWER/DENTER/KNOTTER/REACHER";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "5";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "5";
            DataModel.addRow(rowData);
        }

        for (int i = 1; i <= 2; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "WARPER";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "5";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "5";
            DataModel.addRow(rowData);
        }

        for (int i = 1; i <= 2; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "CREELBOY";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "9";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "9";
            DataModel.addRow(rowData);
        }

        //for (int i = 1; i <= 3; i++) {
        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "JMW";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "JMW";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "JMW";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);
        //}

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "SR ALLMA";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "WELLER";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "COMBINED TWISTER";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TWISTER/TAPER/WINDER";
        rowData[4] = "COMBINED TWISTER";
        rowData[DataModel.getColFromVariable("GRADE")] = "7";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "7";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "PIRN WINDER";
        rowData[4] = "ISO";
        rowData[DataModel.getColFromVariable("GRADE")] = "5";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "5";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "PIRN WINDER";
        rowData[4] = "OMR/HACOBA";
        rowData[DataModel.getColFromVariable("GRADE")] = "5";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "5";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "PIRN WINDER";
        rowData[4] = "OMR/HACOBA";
        rowData[DataModel.getColFromVariable("GRADE")] = "5";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "5";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "PIRN WINDER";
        rowData[4] = "OMR/HACOBA";
        rowData[DataModel.getColFromVariable("GRADE")] = "5";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "5";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "PIRN WINDER HELPER";
        rowData[4] = "ISO";
        rowData[DataModel.getColFromVariable("GRADE")] = "10";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "10";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "PIRN WINDER HELPER";
        rowData[4] = "OMR/HACOBA";
        rowData[DataModel.getColFromVariable("GRADE")] = "10";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "10";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "TAILOR";
        rowData[4] = "";
        rowData[DataModel.getColFromVariable("GRADE")] = "8";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "8";
        DataModel.addRow(rowData);

        for (int i = 1; i <= 5; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "TAILOR HELPER";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "9";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "9";
            DataModel.addRow(rowData);
        }

        for (int i = 1; i <= 12; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "FITTER /MAINTAINANCE FITTER";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "2";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "2";
            DataModel.addRow(rowData);
        }

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WASTE SORTER";
        rowData[4] = "";
        rowData[DataModel.getColFromVariable("GRADE")] = "9";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "9";
        DataModel.addRow(rowData);

        rowData[0] = Integer.toString(n++);
        rowData[1] = txtProductionDate.getText();
        rowData[2] = txtShift.getText();
        rowData[3] = "WASTE SORTER";
        rowData[4] = "";
        rowData[DataModel.getColFromVariable("GRADE")] = "9";
        rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "9";
        DataModel.addRow(rowData);

        for (int i = 1; i <= 4; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "YARNSTORE BOY";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "9";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "9";
            DataModel.addRow(rowData);
        }
        
        for (int i = 1; i <= 10; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "COOLIE/HELPER";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "10";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "10";
            DataModel.addRow(rowData);
        }

        for (int i = 1; i <= 3; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "ADDITIONAL WORKMAN";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "10";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "10";
            DataModel.addRow(rowData);
        }

        for (int i = 1; i <= 4; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "TRAINEE";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "20";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "20";
            DataModel.addRow(rowData);
        }

        for (int i = 1; i <= 2; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "APPRENTICE";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "20";
            rowData[DataModel.getColFromVariable("CATEGORY_GRADE")] = "20";
            DataModel.addRow(rowData);
        }

/*
        for (int i = 1; i <= 5; i++) {
            rowData[0] = Integer.toString(n++);
            rowData[1] = txtProductionDate.getText();
            rowData[2] = txtShift.getText();
            rowData[3] = "Additional";
            rowData[4] = "";
            rowData[DataModel.getColFromVariable("GRADE")] = "";
            DataModel.addRow(rowData);
        }
*/
    }

    private void Save() {

        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Enter Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Additional
        if (OpgHold.isSelected() || OpgApprove.isSelected() || OpgFinal.isSelected()) {
            for (int m = 0; m < Table.getRowCount(); m++) {

                if (!DataModel.getValueByVariable("EMP_NO", m).equals("") && DataModel.getValueByVariable("CATEGORY", m).equals("Additional")) {
                    JOptionPane.showMessageDialog(this, "Select Category, You cannot save document without selecting Category if Employee is selected.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //WVG_Upload.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (WVG_Upload.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = ModuleId;
                if (txtShift.getText().equals("1")) {
                    aList.FirstFreeNo = 337;
                } else if (txtShift.getText().equals("2")) {
                    aList.FirstFreeNo = 338;
                } else if (txtShift.getText().equals("3")) {
                    aList.FirstFreeNo = 339;
                }

                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);

                if (OpgFinal.isSelected()) {
                    try {

                        String DOC_NO = txtDocNo.getText();
                        String DOC_DATE = EITLERPGLOBAL.getCurrentDate();
                        String Party_Code = "";

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + WVG_Upload.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (WVG_Upload.Update()) {
                if (OpgFinal.isSelected()) {
                    try {

                        String DOC_NO = txtDocNo.getText();
                        String DOC_DATE = EITLERPGLOBAL.getCurrentDate();
                        String Party_Code = "";

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + WVG_Upload.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();

        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) WVG_Upload.getAttribute("DOC_NO").getString();

        if (WVG_Upload.IsEditable(EITLERPGLOBAL.gCompanyID, productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
                SetFields(true);
            } else {

                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        WVG_Upload.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        WVG_Upload.Filter(" DOC_NO='" + docno + "'");
        WVG_Upload.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, txtDocNo.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        Table.setEnabled(true);
    }

    private void SetFields(boolean pStat) {
        //Table.setEnabled(pStat);
        if (!pStat) {
            for (int i = 0; i < DataModel.getColumnCount(); i++) {
                DataModel.SetReadOnly(i);
            }
        }

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        txtStaffNo.setEnabled(pStat);
        txtStaffName.setEnabled(pStat);

        txtStaffNo1.setEnabled(pStat);
        txtStaffName1.setEnabled(pStat);

        txtStaffNo2.setEnabled(pStat);
        txtStaffName2.setEnabled(pStat);

        txtStaffNo3.setEnabled(pStat);
        txtStaffName3.setEnabled(pStat);
//        btnGetFormat.setEnabled(false);
        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

        WVG_Upload.setAttribute("DOC_NO", txtDocNo.getText());

        DOC_NO = txtDocNo.getText();

        WVG_Upload.setAttribute("DOC_NO", DOC_NO);
        WVG_Upload.setAttribute("MODULE_ID", ModuleId);
        WVG_Upload.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);
        WVG_Upload.setAttribute("STAFF_NO", txtStaffNo.getText());
        WVG_Upload.setAttribute("STAFF_NAME", txtStaffName.getText());

        WVG_Upload.setAttribute("STAFF_NO1", txtStaffNo1.getText());
        WVG_Upload.setAttribute("STAFF_NAME1", txtStaffName1.getText());

        WVG_Upload.setAttribute("STAFF_NO2", txtStaffNo2.getText());
        WVG_Upload.setAttribute("STAFF_NAME2", txtStaffName2.getText());

        WVG_Upload.setAttribute("STAFF_NO3", txtStaffNo3.getText());
        WVG_Upload.setAttribute("STAFF_NAME3", txtStaffName3.getText());

        WVG_Upload.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        WVG_Upload.setAttribute("REMARKS", "");
        WVG_Upload.setAttribute("APPROVAL_STATUS", "");
        WVG_Upload.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        WVG_Upload.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        WVG_Upload.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        WVG_Upload.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        WVG_Upload.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        WVG_Upload.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "R");
            WVG_Upload.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            WVG_Upload.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            WVG_Upload.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            WVG_Upload.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            WVG_Upload.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            WVG_Upload.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            WVG_Upload.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        WVG_Upload.colMRItems.clear();

        for (int m = 0; m < Table.getRowCount(); m++) {

            clsWVG_Prod_Loom_WVRItem ObjMRItems = new clsWVG_Prod_Loom_WVRItem();

            ObjMRItems.setAttribute("DOC_NO", txtDocNo.getText());
            //System.out.println("Data 1 : "+DataModel.getValueAt(1, 1));
            ObjMRItems.setAttribute("SR_NO", DataModel.getValueByVariable("SR_NO", m));
            ObjMRItems.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtProductionDate.getText()));
            ObjMRItems.setAttribute("SHIFT_ID", DataModel.getValueByVariable("SHIFT_ID", m));
            ObjMRItems.setAttribute("EMP_NAME", DataModel.getValueByVariable("EMP_NAME", m));
            ObjMRItems.setAttribute("EMP_TYPE", DataModel.getValueByVariable("EMP_TYPE", m));
            ObjMRItems.setAttribute("EMP_NO", DataModel.getValueByVariable("EMP_NO", m));
            ObjMRItems.setAttribute("REG_ROKDI", DataModel.getValueByVariable("REG_ROKDI", m));
            ObjMRItems.setAttribute("CATEGORY", DataModel.getValueByVariable("CATEGORY", m));
            ObjMRItems.setAttribute("LOOM_ENG", DataModel.getValueByVariable("LOOM_ENG", m));
            ObjMRItems.setAttribute("BEAM_WARP_SR_NO", DataModel.getValueByVariable("BEAM_WARP_SR_NO", m));
            ObjMRItems.setAttribute("PRODUCT_GROUP", DataModel.getValueByVariable("PRODUCT_GROUP", m));
            ObjMRItems.setAttribute("REED_SPACE_METER", DataModel.getValueByVariable("REED_SPACE_METER", m));
            ObjMRItems.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", m));
            ObjMRItems.setAttribute("WEFT_DETAILS", DataModel.getValueByVariable("WEFT_DETAILS", m));

            ObjMRItems.setAttribute("OT_PUNCHES", DataModel.getValueByVariable("OT_PUNCHES", m));
            ObjMRItems.setAttribute("ALL_PUNCHES", DataModel.getValueByVariable("ALL_PUNCHES", m));

            ObjMRItems.setAttribute("SHIFT_STARTING", DataModel.getValueByVariable("SHIFT_STARTING", m));
            ObjMRItems.setAttribute("IST_RECESS_OUT", DataModel.getValueByVariable("IST_RECESS_OUT", m));
            ObjMRItems.setAttribute("IST_RECESS_IN", DataModel.getValueByVariable("IST_RECESS_IN", m));
            ObjMRItems.setAttribute("IIND_RECESS_OUT", DataModel.getValueByVariable("IIND_RECESS_OUT", m));
            ObjMRItems.setAttribute("IIND_RECESS_IN", DataModel.getValueByVariable("IIND_RECESS_IN", m));
            ObjMRItems.setAttribute("IIIRD_RECESS_OUT", DataModel.getValueByVariable("IIIRD_RECESS_OUT", m));
            ObjMRItems.setAttribute("IIIRD_RECESS_IN", DataModel.getValueByVariable("IIIRD_RECESS_IN", m));
            ObjMRItems.setAttribute("SHIFT_END_OUT", DataModel.getValueByVariable("SHIFT_END_OUT", m));
            ObjMRItems.setAttribute("GATE_PASS_OUT", DataModel.getValueByVariable("GATE_PASS_OUT", m));
            ObjMRItems.setAttribute("GATE_PASS_IN", DataModel.getValueByVariable("GATE_PASS_IN", m));
            ObjMRItems.setAttribute("MC_RPM", DataModel.getValueByVariable("MC_RPM", m));
            ObjMRItems.setAttribute("PICKS_10CM", DataModel.getValueByVariable("PICKS_10CM", m));
            ObjMRItems.setAttribute("START_READING", DataModel.getValueByVariable("START_READING", m));
            ObjMRItems.setAttribute("END_READING", DataModel.getValueByVariable("END_READING", m));
            ObjMRItems.setAttribute("PICK", DataModel.getValueByVariable("PICK", m));

            ObjMRItems.setAttribute("NO_WARP_NO_WEFT", DataModel.getValueByVariable("NO_WARP_NO_WEFT", m));
            ObjMRItems.setAttribute("NO_POWER_NO_AIR", DataModel.getValueByVariable("NO_POWER_NO_AIR", m));
            ObjMRItems.setAttribute("BEAN_GAITING", DataModel.getValueByVariable("BEAN_GAITING", m));
            ObjMRItems.setAttribute("RE_BEAM_GAITING", DataModel.getValueByVariable("RE_BEAM_GAITING", m));
            ObjMRItems.setAttribute("NO_WEAVER", DataModel.getValueByVariable("NO_WEAVER", m));
            ObjMRItems.setAttribute("CLOTH_REPAIR_TOTAL", DataModel.getValueByVariable("CLOTH_REPAIR_TOTAL", m));
            ObjMRItems.setAttribute("NO_BEAM_READY", DataModel.getValueByVariable("NO_BEAM_READY", m));
            ObjMRItems.setAttribute("Q_CHANGES", DataModel.getValueByVariable("Q_CHANGES", m));
            ObjMRItems.setAttribute("MECH_REPAIR", DataModel.getValueByVariable("MECH_REPAIR", m));
            ObjMRItems.setAttribute("ELE_RO_REPAIR", DataModel.getValueByVariable("ELE_RO_REPAIR", m));
            ObjMRItems.setAttribute("SHUTTLE_REPAIR_TOTAL", DataModel.getValueByVariable("SHUTTLE_REPAIR_TOTAL", m));
            ObjMRItems.setAttribute("OVER_HAULING", DataModel.getValueByVariable("OVER_HAULING", m));

            ObjMRItems.setAttribute("NO_PIRN", DataModel.getValueByVariable("NO_PIRN", m));
            ObjMRItems.setAttribute("OTHER", DataModel.getValueByVariable("OTHER", m));

            ObjMRItems.setAttribute("GRADE", DataModel.getValueByVariable("GRADE", m));
            
            ObjMRItems.setAttribute("DESIGNATION_GRADE", DataModel.getValueByVariable("DESIGNATION_GRADE", m)+"");
            ObjMRItems.setAttribute("CATEGORY_GRADE", DataModel.getValueByVariable("CATEGORY_GRADE", m)+"");
            ObjMRItems.setAttribute("PRESENT_STATUS", DataModel.getValueByVariable("PRESENT_STATUS", m)+"");
            ObjMRItems.setAttribute("ROKDI", DataModel.getValueByVariable("ROKDI", m)+"");
            ObjMRItems.setAttribute("PRESENT", DataModel.getValueByVariable("PRESENT", m)+"");

            ObjMRItems.setAttribute("SELEVEDGE_EDGE_CORD_REPAIR", DataModel.getValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR", m));

            double total_time = 0;
            double total_weave_time = 0;
            try {

                double clt1 = 0, clt2 = 0, clt3 = 0, clt4 = 0, clt5 = 0, clt6 = 0, clt7 = 0, clt8 = 0, clt9 = 0, clt10 = 0, clt11 = 0, clt12 = 0, clt13 = 0, clt14 = 0, clt15 = 0;
                try {
                    clt1 = Double.parseDouble(DataModel.getValueByVariable("NO_WARP_NO_WEFT", m));
                } catch (Exception e) {
                }
                try {
                    clt2 = Double.parseDouble(DataModel.getValueByVariable("NO_POWER_NO_AIR", m));
                } catch (Exception e) {
                }
                try {
                    clt3 = Double.parseDouble(DataModel.getValueByVariable("NO_PIRN", m));
                } catch (Exception e) {
                }
                try {
                    clt4 = Double.parseDouble(DataModel.getValueByVariable("BEAN_GAITING", m));
                } catch (Exception e) {
                }
                try {
                    clt5 = Double.parseDouble(DataModel.getValueByVariable("NO_WEAVER", m));
                } catch (Exception e) {
                }
                try {
                    clt6 = Double.parseDouble(DataModel.getValueByVariable("OTHER", m));
                } catch (Exception e) {
                }
                try {
                    clt7 = Double.parseDouble(DataModel.getValueByVariable("CLOTH_REPAIR_TOTAL", m));
                } catch (Exception e) {
                }
                try {
                    clt8 = Double.parseDouble(DataModel.getValueByVariable("NO_BEAM_READY", m));
                } catch (Exception e) {
                }
                try {
                    clt9 = Double.parseDouble(DataModel.getValueByVariable("Q_CHANGES", m));
                } catch (Exception e) {
                }

                try {
                    clt10 = Double.parseDouble(DataModel.getValueByVariable("SHUTTLE_REPAIR", m));
                } catch (Exception e) {
                }

                try {
                    clt11 = Double.parseDouble(DataModel.getValueByVariable("PICK_REPAIR", m));
                } catch (Exception e) {
                }

                try {
                    clt13 = Double.parseDouble(DataModel.getValueByVariable("WARP_END_REPAIR", m));
                } catch (Exception e) {
                }

                try {
                    clt14 = Double.parseDouble(DataModel.getValueByVariable("TEMPLE_REPAIR", m));
                } catch (Exception e) {
                }

                try {
                    clt15 = Double.parseDouble(DataModel.getValueByVariable("NO_PPC", m));
                } catch (Exception e) {
                }

                double re_beam_gaiting = 0, mech_repair = 0, ele_ro_repair = 0, over_haul = 0, selevedge_edge = 0, carry_over = 0, mc_stopperges = 0;
                try {
                    re_beam_gaiting = Double.parseDouble(DataModel.getValueByVariable("RE_BEAM_GAITING", m));
                } catch (Exception e) {
                }
                try {
                    mech_repair = Double.parseDouble(DataModel.getValueByVariable("MECH_REPAIR", m));
                } catch (Exception e) {
                }
                try {
                    ele_ro_repair = Double.parseDouble(DataModel.getValueByVariable("ELE_RO_REPAIR", m));
                } catch (Exception e) {
                }
                try {
                    over_haul = Double.parseDouble(DataModel.getValueByVariable("OVER_HAULING", m));
                } catch (Exception e) {
                }
                try {
                    selevedge_edge = Double.parseDouble(DataModel.getValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR", m));
                } catch (Exception e) {
                }
                try {
                    carry_over = Double.parseDouble(DataModel.getValueByVariable("CARRY_OVER", m));
                } catch (Exception e) {
                }
                try {
                    mc_stopperges = Double.parseDouble(DataModel.getValueByVariable("MC_STOPPAGES", m));
                } catch (Exception e) {
                }

                double other_col_total = re_beam_gaiting + mech_repair + ele_ro_repair + over_haul + selevedge_edge + carry_over + mc_stopperges;

                //if(!DataModel.getValueByVariable("EMP_NO", m).equals(""))
                //{
                if(DataModel.getValueByVariable("CATEGORY", m).equals("WEAVER"))
                {
                    total_time = (clt1 + clt2 + clt3 + clt4 + clt5 + clt6 + clt7 + clt8 + clt9 + clt10 + clt11 + clt12 + clt13 + clt14 + clt15 + other_col_total);
                }
                //}
                double shift_time = 8;

                if (txtDocNo.getText().startsWith("FWP3")) {
                    shift_time = 6.5;
                }
                //EMP_NO
                if (!DataModel.getValueByVariable("EMP_NO", m).equals("")) {
                    
                //23/09 
                    
                 //CATEGORY
                    if(DataModel.getValueByVariable("LOOM_ENG", m).equals("7") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("8") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("81") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("82") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("83") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("84") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("85") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("86") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("87") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("88") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("89") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("90") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("91") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("92") ||
                       DataModel.getValueByVariable("LOOM_ENG", m).equals("93") )
                    {
                        //WEAVER
                        if(DataModel.getValueByVariable("CATEGORY", m).equals("WEAVER"))
                        {
                            total_weave_time = (shift_time - (clt1 + clt2 + clt3 + clt4 + clt5 + clt6 + clt7 + clt8 + clt9 + clt10 + clt11 + clt12 + clt13 + clt14 + clt15 + other_col_total));
                        }
                    }
                    
                //23/09    
                } else {
                      
                    
                    //total_weave_time = 0;
                    
                }
            } catch (Exception e) {
                System.out.println("Error in calculation on setData : " + e.getLocalizedMessage());
                e.printStackTrace();

            }

//                double NO_WARP_NO_WEFT=0,NO_POWER_NO_AIR=0,BEAN_GAITING=0,NO_WEAVER=0,CLOTH_REPAIR_TOTAL=0
//                        ,NO_BEAM_READY=0,Q_CHANGES=0
//                        ,MECH_REPAIR=0,ELE_RO_REPAIR=0,SHUTTLE_REPAIR_TOTAL=0,OVER_HAULING=0,SELEVEDGE_EDGE_CORD_REPAIR=0;
//                double total=0;
//                try{
//                    NO_WARP_NO_WEFT = Double.parseDouble(DataModel.getValueByVariable("NO_WARP_NO_WEFT",m));
//                }catch(Exception e)
//                {
//                    //e.printStackTrace();
//                }
//                try{  NO_POWER_NO_AIR = Double.parseDouble(DataModel.getValueByVariable("NO_POWER_NO_AIR",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  BEAN_GAITING = Double.parseDouble(DataModel.getValueByVariable("BEAN_GAITING",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  NO_WEAVER = Double.parseDouble(DataModel.getValueByVariable("NO_WEAVER",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  CLOTH_REPAIR_TOTAL = Double.parseDouble(DataModel.getValueByVariable("CLOTH_REPAIR_TOTAL",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  NO_BEAM_READY = Double.parseDouble(DataModel.getValueByVariable("NO_BEAM_READY",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  Q_CHANGES = Double.parseDouble(DataModel.getValueByVariable("Q_CHANGES",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  MECH_REPAIR = Double.parseDouble(DataModel.getValueByVariable("MECH_REPAIR",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  ELE_RO_REPAIR = Double.parseDouble(DataModel.getValueByVariable("ELE_RO_REPAIR",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  SHUTTLE_REPAIR_TOTAL = Double.parseDouble(DataModel.getValueByVariable("SHUTTLE_REPAIR_TOTAL",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  OVER_HAULING = Double.parseDouble(DataModel.getValueByVariable("OVER_HAULING",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                try{  SELEVEDGE_EDGE_CORD_REPAIR = Double.parseDouble(DataModel.getValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR",m));
//                }catch(Exception e) { //e.printStackTrace(); 
//                }
//                
//                
//                total = NO_WARP_NO_WEFT + NO_POWER_NO_AIR + BEAN_GAITING+NO_WEAVER + CLOTH_REPAIR_TOTAL + NO_BEAM_READY + Q_CHANGES
//                        + MECH_REPAIR + ELE_RO_REPAIR + SHUTTLE_REPAIR_TOTAL + OVER_HAULING + SELEVEDGE_EDGE_CORD_REPAIR;
//                
            ObjMRItems.setAttribute("TOTAL_TIME", total_time + "");
            ObjMRItems.setAttribute("TOTAL_WEAVE_TIME", total_weave_time + "");

            ObjMRItems.setAttribute("REMARK", DataModel.getValueByVariable("REMARK", m));
            ObjMRItems.setAttribute("CARRY_OVER", DataModel.getValueByVariable("CARRY_OVER", m));
            ObjMRItems.setAttribute("CLOTH_REPAIR", DataModel.getValueByVariable("CLOTH_REPAIR", m));
            ObjMRItems.setAttribute("SHUTTLE_REPAIR", DataModel.getValueByVariable("SHUTTLE_REPAIR", m));

            ObjMRItems.setAttribute("PICK_REPAIR", DataModel.getValueByVariable("PICK_REPAIR", m));
            ObjMRItems.setAttribute("WARP_END_REPAIR", DataModel.getValueByVariable("WARP_END_REPAIR", m));
            ObjMRItems.setAttribute("TEMPLE_REPAIR", DataModel.getValueByVariable("TEMPLE_REPAIR", m));
            ObjMRItems.setAttribute("MC_STOPPAGES", DataModel.getValueByVariable("MC_STOPPAGES", m));
            ObjMRItems.setAttribute("CR1", DataModel.getValueByVariable("CR1", m));
            ObjMRItems.setAttribute("CR2", DataModel.getValueByVariable("CR2", m));
            ObjMRItems.setAttribute("CR3", DataModel.getValueByVariable("CR3", m));
            ObjMRItems.setAttribute("CR4", DataModel.getValueByVariable("CR4", m));
            ObjMRItems.setAttribute("CR5", DataModel.getValueByVariable("CR5", m));
            ObjMRItems.setAttribute("CR6", DataModel.getValueByVariable("CR6", m));
            ObjMRItems.setAttribute("SR1", DataModel.getValueByVariable("SR1", m));
            ObjMRItems.setAttribute("SR2", DataModel.getValueByVariable("SR2", m));
            ObjMRItems.setAttribute("SR3", DataModel.getValueByVariable("SR3", m));
            ObjMRItems.setAttribute("SR4", DataModel.getValueByVariable("SR4", m));
            ObjMRItems.setAttribute("PR1", DataModel.getValueByVariable("PR1", m));
            ObjMRItems.setAttribute("PR2", DataModel.getValueByVariable("PR2", m));
            ObjMRItems.setAttribute("PR3", DataModel.getValueByVariable("PR3", m));
            ObjMRItems.setAttribute("PR4", DataModel.getValueByVariable("PR4", m));
            ObjMRItems.setAttribute("PR5", DataModel.getValueByVariable("PR5", m));
            ObjMRItems.setAttribute("PR6", DataModel.getValueByVariable("PR6", m));
            ObjMRItems.setAttribute("PR7", DataModel.getValueByVariable("PR7", m));
            ObjMRItems.setAttribute("PR8", DataModel.getValueByVariable("PR8", m));
            ObjMRItems.setAttribute("WR1", DataModel.getValueByVariable("WR1", m));
            ObjMRItems.setAttribute("WR2", DataModel.getValueByVariable("WR2", m));
            ObjMRItems.setAttribute("WR3", DataModel.getValueByVariable("WR3", m));
            ObjMRItems.setAttribute("WR4", DataModel.getValueByVariable("WR4", m));
            ObjMRItems.setAttribute("WR5", DataModel.getValueByVariable("WR5", m));
            ObjMRItems.setAttribute("TR1", DataModel.getValueByVariable("TR1", m));
            ObjMRItems.setAttribute("TR2", DataModel.getValueByVariable("TR2", m));
            ObjMRItems.setAttribute("TR3", DataModel.getValueByVariable("TR3", m));
            ObjMRItems.setAttribute("TR4", DataModel.getValueByVariable("TR4", m));
            ObjMRItems.setAttribute("TR5", DataModel.getValueByVariable("TR5", m));

            if (Table.getValueAt(m, DataModel.getColFromVariable("TRAINEE")).equals(true)) {
                ObjMRItems.setAttribute("TRAINEE", 1);
            } else {
                ObjMRItems.setAttribute("TRAINEE", 0);
            }

            ObjMRItems.setAttribute("DESIGNATION", DataModel.getValueByVariable("DESIGNATION", m));
            ObjMRItems.setAttribute("TRAINEE_POSITION", DataModel.getValueByVariable("TRAINEE_POSITION", m));
            ObjMRItems.setAttribute("SHIFT_DATA", DataModel.getValueByVariable("SHIFT_DATA", m));
            ObjMRItems.setAttribute("NO_PPC", DataModel.getValueByVariable("NO_PPC", m));

            WVG_Upload.colMRItems.put(Integer.toString(WVG_Upload.colMRItems.size() + 1), ObjMRItems);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ItemShift1;
    private javax.swing.JMenuItem ItemShift2;
    private javax.swing.JMenuItem ItemShift3;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable Table1;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JTextField TotalEmpC;
    private javax.swing.JTextField TotalEmpC_Regular;
    private javax.swing.JTextField TotalEmpC_Rokdi;
    private javax.swing.JTextField TotalEmpP;
    private javax.swing.JTextField TotalEmpP_Regular;
    private javax.swing.JTextField TotalEmpP_Rokdi;
    private javax.swing.JTextField TotalPick;
    private javax.swing.JTextField TotalReg;
    private javax.swing.JTextField TotalRok;
    private javax.swing.JTextField TotalTimeSum;
    private javax.swing.JTextField TotalWeaveTime;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JButton btnEmpMstETE1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNextToTab4;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JFileChooser file1;
    private javax.swing.JFileChooser file2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtDocNo1;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtNoOfWorker;
    private javax.swing.JTextField txtNoOfWorker1;
    private javax.swing.JTextField txtProductionDate;
    private javax.swing.JTextField txtProductionDate1;
    private javax.swing.JTextField txtShift;
    private javax.swing.JTextField txtShift1;
    private javax.swing.JTextField txtStaffName;
    private javax.swing.JTextField txtStaffName1;
    private javax.swing.JTextField txtStaffName2;
    private javax.swing.JTextField txtStaffName3;
    private javax.swing.JTextField txtStaffNo;
    private javax.swing.JTextField txtStaffNo1;
    private javax.swing.JTextField txtStaffNo2;
    private javax.swing.JTextField txtStaffNo3;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

}
