/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 
 */
package EITLERP.FeltSales.PreformaceTracking;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.data;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.sql.*;
import java.net.*;
import java.awt.Frame;

public class searchkey extends javax.swing.JApplet {

    /**
     * Initializes the applet searchkey
     */
    public String SQL, MSQL, tempSQL;
    public int ReturnCol;
    public int SecondCol = -1;
    public boolean ShowReturnCol;
    public int DefaultSearchOn;
    public String Party_Code;
    public String QueryCode;
    public boolean Cancelled = true;
    public boolean UseSpecifiedConn = false;
    public String dbURL = "";

    public String ReturnVal = "";
    public String SecondVal = "";

    private JDialog aDialog;

    private EITLTableModel DataModel;

    public boolean UseCreatedConn = false;

    private int mfnd = 0;
    private int mtotcol = 0;
    Connection Conn = null;
    Statement stmt = null;

    public searchkey() {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = "";
        MSQL = "";
        ReturnCol = 0;
        ShowReturnCol = false;
        DefaultSearchOn = 0;
        lblSearch.setDisplayedMnemonic('S');
        lblSearch.setLabelFor((Component) txtSearch);
        try {
            if (UseSpecifiedConn) {
                Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
            } else {
                if (UseCreatedConn) {
                    //Conn=data.getCreatedConn();
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                } else {
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                }
            }
            stmt = Conn.createStatement();
        } catch (Exception e) {
              System.out.println("Error on connectrion = "+e.getMessage());  
        }

    }

    public searchkey(String pSQL, int pReturnCol, boolean pShowReturnCol, int pDefaultSearchOn) {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = pSQL;
        MSQL = pSQL;
        ReturnCol = pReturnCol;
        ShowReturnCol = pShowReturnCol;
        DefaultSearchOn = pDefaultSearchOn;
        
    }

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        getContentPane().setLayout(null);

        lblSearch.setText("Search");
        getContentPane().add(lblSearch);
        lblSearch.setBounds(10, 0, 70, 30);

        txtSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(10, 30, 530, 30);

        Table.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 900, 240);

        cmdOK.setText("OK");
        cmdOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        getContentPane().add(cmdOK);
        cmdOK.setBounds(740, 320, 70, 30);

        cmdCancel.setText("Cancel");
        cmdCancel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(820, 320, 70, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // Add your handling code here:
        if (Table.getRowCount() <= 0) {
            Cancelled = true;
        } else {
            Cancelled = false;
            ReturnVal = (String) DataModel.getValueAt(Table.getSelectedRow(), ReturnCol - 1);
            
            try {
                if (SecondCol >= 0) {
                    SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1);
                }
            } catch (Exception e) {

            }

        }
        System.gc();
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // Add your handling code here:
        Cancelled = true;
        ReturnVal = "";
        System.gc();
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        // TODO add your handling code here:
        String mscrhtxt = "", mnwtxt = "";
        char mchr = ' ';
        mchr = evt.getKeyChar();
        if (mchr == '\b') {
            mscrhtxt = txtSearch.getText();
        } else {
            
                mscrhtxt = txtSearch.getText() + evt.getKeyChar();
                
        }
        mnwtxt = mscrhtxt.replace("*", "%");
        //SQL = "SELECT MM_MACHINE_NO,MM_MACHINE_POSITION,MM_MACHINE_POSITION_DESC,MM_ITEM_CODE,MM_GRUP,(MM_FELT_LENGTH+MM_FABRIC_LENGTH),(MM_FELT_WIDTH+MM_FABRIC_WIDTH),MM_FELT_GSM,concat(MM_FELT_STYLE,MM_STYLE_DRY) as MM_FELT_STYLE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL where CONCAT(MM_COMBINATION_CODE,MM_FELT_LENGTH,MM_FELT_WIDTH,MM_FELT_GSM) like '"+mscrhtxt+"%' AND MM_PARTY_CODE='"+Party_Code+"'  AND (MM_MACHINE_NO!='' AND MM_MACHINE_POSITION!='' AND (MM_FELT_LENGTH != '' OR MM_FABRIC_LENGTH != '') AND (MM_FELT_WIDTH != '' OR MM_FABRIC_WIDTH != '') AND MM_FELT_GSM!='')  ORDER BY  MM_MACHINE_NO,MM_MACHINE_POSITION";
        SQL = "SELECT PR.PR_PIECE_NO,PR.PR_PARTY_CODE,P.PARTY_NAME,PR_PIECE_STAGE from PRODUCTION.FELT_SALES_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER P WHERE PR.PR_PARTY_CODE=P.PARTY_CODE  AND PR.PR_PIECE_STAGE IN ('INVOICED') AND PR_PIECE_NO like '"+mscrhtxt+"%'";
        tempSQL = SQL;
        QueryCode = mnwtxt;
         //JOptionPane.showMessageDialog(null, "SQL Query :" + SQL);
        if (mscrhtxt.trim().length() > 2) {
            FilterLOV();
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyReleased

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_TableKeyPressed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        try {
            if (evt.getKeyCode() == 10) //Enter key pressed
            {
                if (Table.getRowCount() <= 0) {
                    Cancelled = true;
                } else {
                    Cancelled = false;
                    ReturnVal = (String) DataModel.getValueAt(Table.getSelectedRow(), ReturnCol - 1);
                    SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), 1); 
                    System.out.println("second col = "+SecondCol+", Data = "+DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1));
                            
                    try {
                        if (SecondCol >= 0) {
                            System.out.println("Data = "+DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1));
                            SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1);
                        }
                    } catch (Exception e) {
                           System.out.println("Error on second value = "+e.getMessage()); 
                    }

                }
                aDialog.dispose();
                return;
            }

            if (evt.getKeyCode() == 27) //Escape key pressed
            {
                Cancelled = true;
                ReturnVal = "";
                aDialog.dispose();
                return;
            }

            if (evt.getKeyCode() == 40) //Down Arrow key pressed
            {
                if (Table.getSelectedRow() < Table.getRowCount()) {
                    Table.changeSelection(Table.getSelectedRow() + 1, DefaultSearchOn - 1, false, false);
                    mfnd = 1;
                }
                return;
            }

            if (evt.getKeyCode() == 38) //Up Arrow key pressed
            {
                if (Table.getSelectedRow() >= 0) {
                    Table.changeSelection(Table.getSelectedRow() - 1, DefaultSearchOn - 1, false, false);
                    mfnd = 1;
                }

                return;
            }
            if(txtSearch.getText().length() == 1)
            {
                SQL = tempSQL;
                FilterLOV();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2)
        {
                if (Table.getRowCount() <= 0) {
                    Cancelled = true;
                } else {
                    //JOptionPane.showMessageDialog(null, "Selected Row = "+Table.getSelectedRow()+" , Selected Col = "+(ReturnCol - 1));
                    Cancelled = false;
                    ReturnVal = (String) DataModel.getValueAt(Table.getSelectedRow(), 0);
                    SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), 1); 
                           
                    try {
                        if (SecondCol >= 0) {
                            //System.out.println("Data = "+DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1));
                            SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1);
                        }
                    } catch (Exception e) {
                           System.out.println("Error on second value = "+e.getMessage()); 
                    }

                }
                aDialog.dispose();
                return;
        }
    }//GEN-LAST:event_TableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    public void setsearchText(String pstxt) {
        System.out.println("Data in Search Box = "+pstxt);
        txtSearch.setText(pstxt);
    }

    public boolean ShowRSLOV() {
        try {
            GenerateLOV();

            setSize(920, 400);

            Frame f = findParentFrame(this);

            aDialog = new JDialog(f, "Machine Master : Select Machine No & Position", true);

            aDialog.getContentPane().add("Center", this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(true);

            //Place it to center of the screen
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int) (screenSize.width - appletSize.getWidth()) / 2, (int) (screenSize.height - appletSize.getHeight()) / 2);

            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
        //if (mfnd==1)
        return !Cancelled;
        //else
        //    return false;
    }

    private void GenerateLOV() {
        try {
            System.out.println("ShowLOV1 SQL = "+SQL); 
            ResultSet rsData = stmt.executeQuery(SQL);
            //System.out.println("Data on rsData = "+rsData.getString(1));
            ResultSetMetaData rsInfo = rsData.getMetaData();

            //Format the table from the resultset meta data
            for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
            }

            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            Table.setRowSelectionAllowed(true);
            DataModel.TableReadOnly(true);

            //Now Populate the table
            rsData.first();
            mtotcol = rsInfo.getColumnCount();
            while (!rsData.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];

                //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                    switch (rsInfo.getColumnType(i)) {
                        case -5: //Long
                            rowData[i - 1] = Long.toString(rsData.getLong(i));
                            break;
                          
                        case 4: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 5: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case -6: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 16: //Boolean
                            if (rsData.getBoolean(i) == true) {
                                rowData[i - 1] = "Yes";
                            } else {
                                rowData[i - 1] = "No";
                            }
                            break;
                        case 91: //Date
                            rowData[i - 1] = EITLERPGLOBAL.formatDate(rsData.getDate(i));
                            break;
                        case 8: //Double
                            rowData[i - 1] = Double.toString(rsData.getDouble(i));
                            break;
                        case 6: //Float
                            rowData[i - 1] = Float.toString(rsData.getFloat(i));
                            break;
                        case 12://Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                        default: //Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                    } //Switch
                }// for

                if(rowData[1].toString().length()==1)
                {
                    rowData[1] = "0"+rowData[1];
                }
                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                rsData.next();
            }

            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table.changeSelection(0, 0, false, false);
            txtSearch.requestFocus();

            if (ShowReturnCol == false) {
                System.out.println("Return Col = "+ReturnCol);
                ColModel.getColumn(ReturnCol - 1).setMinWidth(0);
                ColModel.getColumn(ReturnCol - 1).setPreferredWidth(0);
            }

        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null,e.getMessage());
            e.printStackTrace();
        }
    }

    private void FilterLOV() {
        try {

            ResultSet rsData = stmt.executeQuery(SQL);
            
            ResultSetMetaData rsInfo = rsData.getMetaData();
            //JOptionPane.showMessageDialog(null, "Data Loaded");
            //Format the table from the resultset meta data
            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            Table.setRowSelectionAllowed(true);
            DataModel.TableReadOnly(true);

            int rowCount = DataModel.getRowCount();
//Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                DataModel.removeRow(i);
            }

            //Now Populate the table
            rsData.first();
            
            while (!rsData.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];
                System.out.println("Total Collumn Count = "+rsInfo.getColumnCount());
                //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                    switch (rsInfo.getColumnType(i)) {
                        case -5: //Long
                            rowData[i - 1] = Long.toString(rsData.getLong(i));
                            break;
                        case 4: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 5: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case -6: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 16: //Boolean
                            if (rsData.getBoolean(i) == true) {
                                rowData[i - 1] = "Yes";
                            } else {
                                rowData[i - 1] = "No";
                            }
                            break;
                        case 91: //Date
                            rowData[i - 1] = EITLERPGLOBAL.formatDate(rsData.getDate(i));
                            break;
                        case 8: //Double
                            rowData[i - 1] = Double.toString(rsData.getDouble(i));
                            break;
                        case 6: //Float
                            rowData[i - 1] = Float.toString(rsData.getFloat(i));
                            break;
  //                      case 12://Varchar
//                            rowData[i - 1] = rsData.getString(i);
 //                           break;
                        default: //Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                    } //Switch
                }// for
                if(rowData[1].toString().length()==1)
                {
                    
                    rowData[1] = "0"+rowData[1];
                }
                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                rsData.next();
            }

            TableColumnModel ColModel = Table.getColumnModel();
            //Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table.changeSelection(0, 0, false, false);
            txtSearch.requestFocus();

            if (ShowReturnCol == false) {
                ColModel.getColumn(ReturnCol - 1).setMinWidth(0);
                ColModel.getColumn(ReturnCol - 1).setPreferredWidth(0);
            }

        } catch (Exception e) {
           
            JOptionPane.showMessageDialog(null,"MACHINE & POSITION NOT FOUND! "+e.getLocalizedMessage());
            
            //FilterLOV();
            e.printStackTrace();
        }
    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    public void destroy() {
        try {
            stmt.close();
            Conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
