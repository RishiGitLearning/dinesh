/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.PreformaceTracking;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel; 
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.FeltSales.common.LOV;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmPerformaceTrackingSheet extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;  
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel_SDML;
    //private EITLTableModel DataModel_OTHER;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 0;
    private final int ModuleId = 833;
    private String DOC_NO = "";
    private clsPerformaceTrackingSheet objPTS;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();
    private String AB_FLAG = "";
    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;
    private EITLTableModel DataModel_previousData;
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

//    DecimalFormat f_single = new DecimalFormat("##.0");
//    DecimalFormat f_double = new DecimalFormat("##.00");
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    private EITLComboModel cmbIncharge;
    /**
     * Initializes the applet FrmobjPTS
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();
        GenerateCombo();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
        FormatGrid_SDML();
//        FormatGrid_OTHER();
        
        DefaultSettings();
        //Cancel();
        try {
            MaskFormatter dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('_');
            dateMask.install(DocDate);

        } catch (ParseException ex) {
            System.out.println("Error on Mask : " + ex.getLocalizedMessage());
        }
        DocDate.setText(df.format(new Date()));

        objPTS = new clsPerformaceTrackingSheet();
        boolean load = objPTS.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objPTS.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetFields(false);
        file1.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
      
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        DocNo.setText("0");
        txtPartyCode.setText("");
        txtMachineNo.setText("");
        txtPosition.setText("");
        txtPartyName.setText("");
        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
        FormatGrid_SDML();
//        FormatGrid_OTHER();
        
        // FormatGridA();
        FormatGridHS();

        
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (objPTS.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (objPTS.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (objPTS.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            //c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //clsobjPTS.ChangeVoucherNo=false;
        clearFields();
        try {
            DocNo.setText(objPTS.getAttribute("DOC_NO").getString());
            lblTitle.setText("Felt Performace Tracking Sheet - " + objPTS.getAttribute("DOC_NO").getString());
            DocDate.setText(EITLERPGLOBAL.formatDate(objPTS.getAttribute("DOC_DATE").getString()));
            lblRevNo.setText(Integer.toString((int) objPTS.getAttribute("REVISION_NO").getVal()));
            txtPartyCode.setText(objPTS.getAttribute("PARTY_CODE").getString());
            txtPartyName.setText(objPTS.getAttribute("PARTY_NAME").getString());
            txtMachineNo.setText(objPTS.getAttribute("MACHINE_NO").getString());
            txtPosition.setText(objPTS.getAttribute("POSITION").getString());
            
            lblPosDesc.setText(data.getStringValueFromDB("SELECT MM_MACHINE_POSITION_DESC AS POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+txtMachineNo.getText()+" AND MM_MACHINE_POSITION="+txtPosition.getText()+" "));
          
            txtLength.setText(data.getStringValueFromDB("SELECT MM_FELT_LENGTH+MM_FABRIC_LENGTH FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+txtMachineNo.getText()+" AND MM_MACHINE_POSITION="+txtPosition.getText()+" "));
            txtWidth.setText(data.getStringValueFromDB("SELECT (MM_FELT_WIDTH+MM_FABRIC_WIDTH) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+txtMachineNo.getText()+" AND MM_MACHINE_POSITION="+txtPosition.getText()+" "));
            txtSqmtr.setText(data.getStringValueFromDB("SELECT ROUND(((MM_FELT_LENGTH+MM_FABRIC_LENGTH)*(MM_FELT_WIDTH+MM_FABRIC_WIDTH)),2) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+txtMachineNo.getText()+" AND MM_MACHINE_POSITION="+txtPosition.getText()+" "));
            txtGSM.setText(data.getStringValueFromDB("SELECT MM_FELT_GSM FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+txtMachineNo.getText()+" AND MM_MACHINE_POSITION="+txtPosition.getText()+" "));             
            txtWeight.setText(data.getStringValueFromDB("SELECT MM_FELT_WEIGHT FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+txtMachineNo.getText()+" AND MM_MACHINE_POSITION="+txtPosition.getText()+" "));
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objPTS.getAttribute("HIERARCHY_ID").getInt());

            FormatGrid_SDML();
//            FormatGrid_OTHER();

            //Now Generate Table
            int NewRow = 0;
            int NewRow2 = 0;
            for (int i = 1; i <= objPTS.hmFeltPerformanceTrackingDetails.size(); i++) {
                clsPerformaceTrackingSheetDetails ObjItem = (clsPerformaceTrackingSheetDetails) objPTS.hmFeltPerformanceTrackingDetails.get(Integer.toString(i));
                
               // int NewRow = i - 1;
               // int NewRow2 = i - 1;
                Object[] rowData = new Object[100];
//                if(ObjItem.getAttribute("SUPPLIER").getString().equals("SDML"))
//                {
                    rowData[0] = (NewRow+1)+"";
                    DataModel_SDML.addRow(rowData);

                    DataModel_SDML.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("SUPPLIER", ObjItem.getAttribute("SUPPLIER").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("SUPPLIER_NAME", ObjItem.getAttribute("SUPPLIER_NAME").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("PRODUCT_GROUP", ObjItem.getAttribute("PRODUCT_GROUP").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("MOUNT_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("MOUNT_DATE").getString()), NewRow);
                    DataModel_SDML.setValueByVariable("DEMOUNT_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("DEMOUNT_DATE").getString()), NewRow);
                    DataModel_SDML.setValueByVariable("SHUT_DAYS", ObjItem.getAttribute("SHUT_DAYS").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("ACTUAL_LIFE_DAYS", ObjItem.getAttribute("ACTUAL_LIFE_DAYS").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("LIFE_TONNAGE", ObjItem.getAttribute("LIFE_TONNAGE").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("TYPE_OF_DAMAGE", ObjItem.getAttribute("TYPE_OF_DAMAGE").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("REMARKS", ObjItem.getAttribute("REMARKS").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("WEIGHT", ObjItem.getAttribute("WEIGHT").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("SQMTR", ObjItem.getAttribute("SQMTR").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                    DataModel_SDML.setValueByVariable("AVERAGE_LIFE", ObjItem.getAttribute("AVERAGE_LIFE").getString(), NewRow);
                    if (ObjItem.getAttribute("TRAIL_PIECE").getInt() == 1) {
                        DataModel_SDML.setValueByVariable("TRAIL_PIECE", true, NewRow);
                    } else {
                        DataModel_SDML.setValueByVariable("TRAIL_PIECE", false, NewRow);
                    }
                    DataModel_SDML.setValueByVariable("TRAIL_REMARK", ObjItem.getAttribute("TRAIL_REMARK").getString(), NewRow);
                    NewRow++;
 //               }
 //               else if(ObjItem.getAttribute("SUPPLIER").getString().equals("OTHER"))
//                {
//                    rowData[0] = (NewRow2+1)+"";
//                    DataModel_OTHER.addRow(rowData);
//
//                    DataModel_OTHER.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("SUPPLIER", ObjItem.getAttribute("SUPPLIER").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("SUPPLIER_NAME", ObjItem.getAttribute("SUPPLIER_NAME").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("PRODUCT_GROUP", ObjItem.getAttribute("PRODUCT_GROUP").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("MOUNT_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("MOUNT_DATE").getString()), NewRow2);
//                    DataModel_OTHER.setValueByVariable("DEMOUNT_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("DEMOUNT_DATE").getString()), NewRow2);
//                    DataModel_OTHER.setValueByVariable("SHUT_DAYS", ObjItem.getAttribute("SHUT_DAYS").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("ACTUAL_LIFE_DAYS", ObjItem.getAttribute("ACTUAL_LIFE_DAYS").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("LIFE_TONNAGE", ObjItem.getAttribute("LIFE_TONNAGE").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("TYPE_OF_DAMAGE", ObjItem.getAttribute("TYPE_OF_DAMAGE").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("REMARKS", ObjItem.getAttribute("REMARKS").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("WEIGHT", ObjItem.getAttribute("WEIGHT").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("SQMTR", ObjItem.getAttribute("SQMTR").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow2);
//                    DataModel_OTHER.setValueByVariable("AVERAGE_LIFE", ObjItem.getAttribute("AVERAGE_LIFE").getString(), NewRow2);
//                   
//                    if (ObjItem.getAttribute("TRAIL_PIECE").getInt() == 1) {
//                        DataModel_OTHER.setValueByVariable("TRAIL_PIECE", true, NewRow2);
//                    } else {
//                        DataModel_OTHER.setValueByVariable("TRAIL_PIECE", false, NewRow2);
//                    }
//                    DataModel_OTHER.setValueByVariable("TRAIL_REMARK", ObjItem.getAttribute("TRAIL_REMARK").getString(), NewRow2);
//                    NewRow2++;
//                }
            }
            
            
            
            

            //DoNotEvaluate=false;
            //UpdateTotals();
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = objPTS.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = objPTS.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsPerformaceTrackingSheet ObjHistory = (clsPerformaceTrackingSheet) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("MODIFIED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("MODIFIED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //txtPieceNoFocusLost(null);
            //============================================================//
            //setSTATUS();
            //setPrevoiousData();
        } catch (Exception e) {
          //  e.printStackTrace();
        }
    }
    private void FormatGrid_prevoiusData()
    {
        try{
            DataModel_previousData = new EITLTableModel();
            Table_prevoiusData.removeAll();
            Table_prevoiusData.setAutoResizeMode(0);

            Table_prevoiusData.setModel(DataModel_previousData);
            
            DataModel_previousData.addColumn("SrNo"); //0 - Read Only
            DataModel_previousData.addColumn("PARTY_CODE"); //1
            DataModel_previousData.addColumn("PARTY_NAME"); //2
            DataModel_previousData.addColumn("MACHINE_NO"); //3
            DataModel_previousData.addColumn("POSITION"); //4
            DataModel_previousData.addColumn("PIECE_NO"); //11
            DataModel_previousData.addColumn("PRODUCT_GROUP"); //12
            DataModel_previousData.addColumn("MOUNT_DATE"); //5
            DataModel_previousData.addColumn("DEMOUNT_DATE"); //6
            DataModel_previousData.addColumn("SHUT_DAYS"); //7
            DataModel_previousData.addColumn("ACTUAL_LIFE_DAYS"); //8
            DataModel_previousData.addColumn("LIFE_TONNAGE"); //9
            DataModel_previousData.addColumn("TYPE_OF_DAMAGE"); //10
            DataModel_previousData.addColumn("REMARKS"); //8
            DataModel_previousData.addColumn("LENGTH"); //9
            DataModel_previousData.addColumn("WIDTH"); //10
            DataModel_previousData.addColumn("GSM"); //8
            DataModel_previousData.addColumn("WEIGHT"); //9
            DataModel_previousData.addColumn("SQMTR"); //10
            DataModel_previousData.addColumn("STYLE"); //8
            DataModel_previousData.addColumn("AVERAGE_LIFE"); //9
            
            DataModel_previousData.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_previousData.SetVariable(1, "PARTY_CODE"); //1
            DataModel_previousData.SetVariable(2, "PARTY_NAME"); //1
            DataModel_previousData.SetVariable(3, "MACHINE_NO"); //1
            DataModel_previousData.SetVariable(4, "POSITION"); //1
            DataModel_previousData.SetVariable(5, "PIECE_NO"); //1
            DataModel_previousData.SetVariable(6, "PRODUCT_GROUP"); //2
            DataModel_previousData.SetVariable(7, "MOUNT_DATE"); //1
            DataModel_previousData.SetVariable(8, "DEMOUNT_DATE"); //1
            DataModel_previousData.SetVariable(9, "SHUT_DAYS"); //2
            DataModel_previousData.SetVariable(10, "ACTUAL_LIFE_DAYS"); //1
            DataModel_previousData.SetVariable(11, "LIFE_TONNAGE"); //1
            DataModel_previousData.SetVariable(12, "TYPE_OF_DAMAGE"); //2
            DataModel_previousData.SetVariable(13, "REMARKS"); //1
            DataModel_previousData.SetVariable(14, "LENGTH"); //1
            DataModel_previousData.SetVariable(15, "WIDTH"); //1
            DataModel_previousData.SetVariable(16, "GSM"); //1
            DataModel_previousData.SetVariable(17, "WEIGHT"); //1
            DataModel_previousData.SetVariable(18, "SQMTR"); //1
            DataModel_previousData.SetVariable(19, "STYLE"); //1
            DataModel_previousData.SetVariable(20, "AVERAGE_LIFE"); //1
    
            for(int i=0;i<=20;i++)
            {
                Table_prevoiusData.getColumnModel().getColumn(i).setMinWidth(120);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void setPrevoiousData()
    {
        try{
            FormatGrid_prevoiusData();
            
            String str_query="SELECT * FROM PRODUCTION.FELT_SALES_PERFORMANCE_TRACKING_SHEET_REGISTER  where PARTY_CODE!=''";
            
            if(chkPartywise.isSelected())
            {
                str_query = str_query + " AND PARTY_CODE='"+txtPartyCodeReport.getText()+"' ";
            
                if(!txtMachineNoReport.getText().equals("") && !txtPositionReport.getText().equals(""))
                {
                    //AND MACHINE_NO= "+txtMachineNoReport.getText()+" AND POSITION="+txtPositionReport.getText()+"  ";
                    str_query = str_query + "AND MACHINE_NO= "+txtMachineNoReport.getText()+" AND POSITION="+txtPositionReport.getText()+"  ";
                }
                else if(!txtMachineNoReport.getText().equals("") && txtPositionReport.getText().equals(""))
                {
                    str_query = str_query + "AND MACHINE_NO= "+txtMachineNoReport.getText()+"  ";
                }
            }
            
            if(chkZonewise.isSelected())
            {
                String InchargeCode = data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='"+cmbZone.getSelectedItem()+"'");
                System.out.println("Incharge Code : "+InchargeCode);
                str_query = str_query + " AND PARTY_CODE IN (SELECT distinct(PR_PARTY_CODE) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  WHERE PR_INCHARGE='"+InchargeCode+"') ";
            }
            
            if(chkExport.isSelected())
            {
                String InchargeCode = data.getStringValueFromDB("SELECT INCHARGE_CD FROM PRODUCTION.FELT_INCHARGE where INCHARGE_NAME='"+cmbZone.getSelectedItem()+"'");
                System.out.println("Incharge Code : "+InchargeCode);
                str_query = str_query + " AND PARTY_CODE IN (SELECT distinct(PR_PARTY_CODE) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  WHERE PR_INCHARGE='"+InchargeCode+"') ";
            }
            
            str_query = str_query + " AND MOUNT_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"'";
            str_query = str_query + " AND MOUNT_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'";
            
            if(chkZonewise.isSelected())
            {
                str_query = str_query + " ORDER BY PARTY_CODE,MOUNT_DATE";    
            }
            else
            {
                str_query = str_query + " ORDER BY MOUNT_DATE"; 
            }
            
            Connection connection = data.getConn();
            Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            System.out.println("Query : " + str_query);
            ResultSet resultSet = statement.executeQuery(str_query);
                int srNo = 0;
                        while (resultSet.next()) {

                            srNo++;
                            int NewRow = srNo - 1;

                            Object[] rowData = new Object[1];
                            DataModel_previousData.addRow(rowData);

                            DataModel_previousData.setValueByVariable("SrNo", srNo + "", NewRow);
                            DataModel_previousData.setValueByVariable("PARTY_CODE", resultSet.getString("PARTY_CODE"), NewRow);
                            DataModel_previousData.setValueByVariable("PARTY_NAME",resultSet.getString("PARTY_NAME"), NewRow);
                            DataModel_previousData.setValueByVariable("MACHINE_NO", resultSet.getString("MACHINE_NO"), NewRow);
                            DataModel_previousData.setValueByVariable("POSITION", resultSet.getString("POSITION"), NewRow);
                            DataModel_previousData.setValueByVariable("PIECE_NO", resultSet.getString("PIECE_NO"), NewRow);
                            DataModel_previousData.setValueByVariable("PRODUCT_GROUP",resultSet.getString("PRODUCT_GROUP"), NewRow);
                            DataModel_previousData.setValueByVariable("MOUNT_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("MOUNT_DATE")), NewRow);
                            DataModel_previousData.setValueByVariable("DEMOUNT_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("DEMOUNT_DATE")), NewRow);
                            DataModel_previousData.setValueByVariable("SHUT_DAYS", resultSet.getString("SHUT_DAYS"), NewRow);
                            DataModel_previousData.setValueByVariable("ACTUAL_LIFE_DAYS",resultSet.getString("ACTUAL_LIFE_DAYS"), NewRow);
                            DataModel_previousData.setValueByVariable("LIFE_TONNAGE", resultSet.getString("LIFE_TONNAGE"), NewRow);
                            DataModel_previousData.setValueByVariable("TYPE_OF_DAMAGE", resultSet.getString("TYPE_OF_DAMAGE"), NewRow);
                            DataModel_previousData.setValueByVariable("REMARKS",resultSet.getString("REMARKS"), NewRow);
                            DataModel_previousData.setValueByVariable("LENGTH", resultSet.getString("LENGTH"), NewRow);
                            DataModel_previousData.setValueByVariable("WIDTH", resultSet.getString("WIDTH"), NewRow);
                            DataModel_previousData.setValueByVariable("GSM",resultSet.getString("GSM"), NewRow);
                            DataModel_previousData.setValueByVariable("WEIGHT", resultSet.getString("WEIGHT"), NewRow);
                            DataModel_previousData.setValueByVariable("SQMTR", resultSet.getString("SQMTR"), NewRow);
                            DataModel_previousData.setValueByVariable("STYLE",resultSet.getString("STYLE"), NewRow);
                            DataModel_previousData.setValueByVariable("AVERAGE_LIFE", resultSet.getString("AVERAGE_LIFE"), NewRow);
                            
                    }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7055, 70551)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7055, 70552)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7055, 70553)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7055, 70555)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void FormatGrid_SDML()
    {
        try {
            DataModel_SDML = new EITLTableModel();
            tblSDML.removeAll();

            tblSDML.setModel(DataModel_SDML);
            tblSDML.setAutoResizeMode(0);

            DataModel_SDML.addColumn("SrNo"); //0 - Read Only
            DataModel_SDML.addColumn("SUPPLIER"); //1
            DataModel_SDML.addColumn("SUPPLIER NAME"); //1
            DataModel_SDML.addColumn("PIECE NO");//22
            DataModel_SDML.addColumn("PRODUCT GROUP"); //2
            DataModel_SDML.addColumn("MOUNT DATE(DD/MM/YYYY)"); //3
            DataModel_SDML.addColumn("DEMOUNT DATE(DD/MM/YYYY)"); //4
            DataModel_SDML.addColumn("SHUT DAYS"); //5
            DataModel_SDML.addColumn("ACTUAL LIFE DAYS"); //6
            DataModel_SDML.addColumn("LIFE TONNAGE(MT)"); //7
            DataModel_SDML.addColumn("TYPE OF DAMAGE"); //7
            DataModel_SDML.addColumn("REMARKS"); //8
            DataModel_SDML.addColumn("LENGTH(MTR)"); //10
            DataModel_SDML.addColumn("WIDTH(MTR)"); //11
            DataModel_SDML.addColumn("GSM"); //12
            DataModel_SDML.addColumn("WEIGHT(KG)"); //13
            DataModel_SDML.addColumn("SQMTR(MTR)"); //14
            DataModel_SDML.addColumn("STYLE"); //15
            DataModel_SDML.addColumn("AVERAGE LIFE(DAYS)");//16
            DataModel_SDML.addColumn("TRIAL PIECE");//16
            DataModel_SDML.addColumn("TRIAL REMARK");//16

            DataModel_SDML.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_SDML.SetVariable(1, "SUPPLIER"); //4
            DataModel_SDML.SetVariable(2, "SUPPLIER_NAME");//22
            DataModel_SDML.SetVariable(3, "PIECE_NO"); //1
            DataModel_SDML.SetVariable(4, "PRODUCT_GROUP"); //1
            DataModel_SDML.SetVariable(5, "MOUNT_DATE"); //1
            DataModel_SDML.SetVariable(6, "DEMOUNT_DATE"); //2
            DataModel_SDML.SetVariable(7, "SHUT_DAYS"); //3
            DataModel_SDML.SetVariable(8, "ACTUAL_LIFE_DAYS"); //5
            DataModel_SDML.SetVariable(9, "LIFE_TONNAGE"); //6
            DataModel_SDML.SetVariable(10, "TYPE_OF_DAMAGE"); //7
            DataModel_SDML.SetVariable(11, "REMARKS"); //8
            DataModel_SDML.SetVariable(12, "LENGTH"); //9
            DataModel_SDML.SetVariable(13, "WIDTH"); //10
            DataModel_SDML.SetVariable(14, "GSM"); //11
            DataModel_SDML.SetVariable(15, "WEIGHT"); //12
            DataModel_SDML.SetVariable(16, "SQMTR"); //13
            DataModel_SDML.SetVariable(17, "STYLE");
            DataModel_SDML.SetVariable(18, "AVERAGE_LIFE");
            DataModel_SDML.SetVariable(19, "TRAIL_PIECE");
            DataModel_SDML.SetVariable(20, "TRAIL_REMARK");

            tblSDML.getColumnModel().getColumn(0).setMinWidth(20);

            for (int i = 1; i <= 19; i++) {
                tblSDML.getColumnModel().getColumn(i).setMinWidth(130);
            }
            tblSDML.getColumnModel().getColumn(5).setMinWidth(180);
            tblSDML.getColumnModel().getColumn(6).setMinWidth(185);
            tblSDML.getColumnModel().getColumn(10).setMinWidth(150);
            tblSDML.getColumnModel().getColumn(20).setMinWidth(150);
            DataModel_SDML.SetReadOnly(0);
            //DataModel_SDML.SetReadOnly(1);
            //DataModel_SDML.SetReadOnly(2);
            
            TableColumn companyColumn = tblSDML.getColumnModel().getColumn(1);
            JComboBox companybox = new JComboBox();
            companybox.addItem("SDML");
            companybox.addItem("OTHER");
            companybox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if(tblSDML.getValueAt(tblSDML.getSelectedRow(), tblSDML.getSelectedColumn()).equals("SDML"))
                    {
                        tblSDML.setValueAt("OTHER", tblSDML.getSelectedRow(), tblSDML.getSelectedColumn()+1);
                    }
                    else
                    {
                        tblSDML.setValueAt("SDML", tblSDML.getSelectedRow(), tblSDML.getSelectedColumn()+1);
                    }
                }
            });
            companyColumn.setCellEditor(new DefaultCellEditor(companybox));
            
            
            TableColumn layerColumn = tblSDML.getColumnModel().getColumn(10);
            JComboBox layerbox = new JComboBox();
            layerbox.addItem("NO DAMAGE");
            layerbox.addItem("ACCIDENTAL DAMAGE");
            layerColumn.setCellEditor(new DefaultCellEditor(layerbox));
            
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            int ImportCol = 19;
            Renderer.setCustomComponent(ImportCol, "CheckBox");
           
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(true);
            aCheckBox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if(tblSDML.getValueAt(tblSDML.getSelectedRow(), tblSDML.getSelectedColumn()).equals("SDML"))
                    {
                        tblSDML.setValueAt("SDML", tblSDML.getSelectedRow(), tblSDML.getSelectedColumn()+1);
                    }
                    else
                    {
                        tblSDML.setValueAt("OTHER", tblSDML.getSelectedRow(), tblSDML.getSelectedColumn()+1);
                    }
                }
            });
            tblSDML.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            tblSDML.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
  /*  
    private void FormatGrid_OTHER()
    {
        try {
            DataModel_OTHER = new EITLTableModel();
            tblOther.removeAll();

            tblOther.setModel(DataModel_OTHER);
            tblOther.setAutoResizeMode(0);

            DataModel_OTHER.addColumn("SrNo"); //0 - Read Only
            DataModel_OTHER.addColumn("SUPPLIER"); //1
            DataModel_OTHER.addColumn("SUPPLIER NAME"); //1
            DataModel_OTHER.addColumn("PIECE NO");//22
            DataModel_OTHER.addColumn("PRODUCT GROUP"); //2
            DataModel_OTHER.addColumn("MOUNT DATE"); //3
            DataModel_OTHER.addColumn("DEMOUNT DATE"); //4
            DataModel_OTHER.addColumn("SHUT DAYS"); //5
            DataModel_OTHER.addColumn("ACTUAL LIFE DAYS"); //6
            DataModel_OTHER.addColumn("LIFE TONNAGE"); //7
            DataModel_OTHER.addColumn("TYPE OF DAMAGE"); //7
            DataModel_OTHER.addColumn("REMARKS"); //8
            DataModel_OTHER.addColumn("LENGTH"); //10
            DataModel_OTHER.addColumn("WIDTH"); //11
            DataModel_OTHER.addColumn("GSM"); //12
            DataModel_OTHER.addColumn("WEIGHT"); //13
            DataModel_OTHER.addColumn("SQMTR"); //14
            DataModel_OTHER.addColumn("STYLE"); //15
            DataModel_OTHER.addColumn("AVERAGE LIFE");//16
            DataModel_OTHER.addColumn("TRIAL PIECE");//16
            DataModel_OTHER.addColumn("TRIAL REMARK");//16
            
            DataModel_OTHER.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_OTHER.SetVariable(1, "SUPPLIER"); //4
            DataModel_OTHER.SetVariable(2, "SUPPLIER_NAME");//22
            DataModel_OTHER.SetVariable(3, "PIECE_NO"); //1
            DataModel_OTHER.SetVariable(4, "PRODUCT_GROUP"); //1
            DataModel_OTHER.SetVariable(5, "MOUNT_DATE"); //1
            DataModel_OTHER.SetVariable(6, "DEMOUNT_DATE"); //2
            DataModel_OTHER.SetVariable(7, "SHUT_DAYS"); //3
            DataModel_OTHER.SetVariable(8, "ACTUAL_LIFE_DAYS"); //5
            DataModel_OTHER.SetVariable(9, "LIFE_TONNAGE"); //6
            DataModel_OTHER.SetVariable(10, "TYPE_OF_DAMAGE"); //7
            DataModel_OTHER.SetVariable(11, "REMARKS"); //8
            DataModel_OTHER.SetVariable(12, "LENGTH"); //9
            DataModel_OTHER.SetVariable(13, "WIDTH"); //10
            DataModel_OTHER.SetVariable(14, "GSM"); //11
            DataModel_OTHER.SetVariable(15, "WEIGHT"); //12
            DataModel_OTHER.SetVariable(16, "SQMTR"); //13
            DataModel_OTHER.SetVariable(17, "STYLE");
            DataModel_OTHER.SetVariable(18, "AVERAGE_LIFE");
            DataModel_OTHER.SetVariable(19, "TRAIL_PIECE");
            DataModel_OTHER.SetVariable(19, "TRAIL_REMARK");
             
            tblOther.getColumnModel().getColumn(0).setMinWidth(20);

            for (int i = 1; i <= 19; i++) {
                tblOther.getColumnModel().getColumn(i).setMinWidth(130);
            }
            tblOther.getColumnModel().getColumn(20).setMinWidth(150);
            tblOther.getColumnModel().getColumn(10).setMinWidth(150);
            
            DataModel_OTHER.SetReadOnly(0);
            DataModel_OTHER.SetReadOnly(1);
            DataModel_OTHER.SetReadOnly(2);
            
            TableColumn layerColumn = tblOther.getColumnModel().getColumn(10);
            JComboBox layerbox = new JComboBox();
            layerbox.addItem("NO DAMAGE");
            layerbox.addItem("ACCIDENTAL DAMAGE");
            layerColumn.setCellEditor(new DefaultCellEditor(layerbox));
            
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            int ImportCol = 19;
            Renderer.setCustomComponent(ImportCol, "CheckBox");
           
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(true);
            aCheckBox.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
//                    System.out.println(e.getStateChange() == ItemEvent.SELECTED
//                        ? "SELECTED" : "DESELECTED");
                }
            });
            tblOther.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            tblOther.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
  */  
    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        DocNo = new javax.swing.JTextField();
        DocDate = new javax.swing.JFormattedTextField();
        lblRevNo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSDML = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        txtMachineNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPosition = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnAdd1 = new javax.swing.JButton();
        btnRemove1 = new javax.swing.JButton();
        txtPartyName = new javax.swing.JTextField();
        file1 = new javax.swing.JFileChooser();
        lblPosDesc = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtLength = new javax.swing.JTextField();
        txtWidth = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSqmtr = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtGSM = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table_prevoiusData = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        txtFromDate = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        chkExport = new javax.swing.JRadioButton();
        chkPartywise = new javax.swing.JRadioButton();
        chkZonewise = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        txtPartyCodeReport = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtPartyNameReport = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        txtMachineNoReport = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtPositionReport = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cmbZone = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("PTS Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(320, 10, 80, 30);

        jLabel3.setText("PTS No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 10, 80, 30);

        DocNo.setEditable(false);
        DocNo.setBackground(new java.awt.Color(254, 242, 230));
        DocNo.setText("PD000001");
        DocNo.setEnabled(false);
        jPanel1.add(DocNo);
        DocNo.setBounds(80, 10, 200, 30);

        DocDate.setEditable(false);
        jPanel1.add(DocDate);
        DocDate.setBounds(390, 10, 200, 30);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(280, 10, 34, 40);

        tblSDML.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSDML.setRowSelectionAllowed(false);
        tblSDML.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSDMLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblSDMLKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tblSDML);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 130, 1000, 360);

        jLabel5.setText("Party Code");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(20, 60, 80, 15);

        txtPartyCode.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                txtPartyCodeComponentMoved(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        jPanel1.add(txtPartyCode);
        txtPartyCode.setBounds(100, 47, 100, 30);

        txtMachineNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMachineNoKeyPressed(evt);
            }
        });
        jPanel1.add(txtMachineNo);
        txtMachineNo.setBounds(550, 50, 70, 30);

        jLabel6.setText("Machine No");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(460, 60, 90, 15);
        jPanel1.add(txtPosition);
        txtPosition.setBounds(710, 50, 60, 30);

        jLabel7.setText("Position");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(640, 60, 80, 15);

        btnAdd1.setText("Add");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnAdd1);
        btnAdd1.setBounds(850, 100, 70, 25);

        btnRemove1.setText("Remove");
        btnRemove1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemove1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove1);
        btnRemove1.setBounds(920, 100, 90, 25);

        txtPartyName.setEnabled(false);
        jPanel1.add(txtPartyName);
        txtPartyName.setBounds(210, 47, 240, 30);
        jPanel1.add(file1);
        file1.setBounds(400, 150, 517, 326);
        jPanel1.add(lblPosDesc);
        lblPosDesc.setBounds(710, 80, 300, 20);

        jLabel1.setText("Length (Mtr)");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 110, 110, 15);

        txtLength.setEditable(false);
        jPanel1.add(txtLength);
        txtLength.setBounds(110, 100, 50, 30);

        txtWidth.setEditable(false);
        jPanel1.add(txtWidth);
        txtWidth.setBounds(260, 100, 60, 30);

        jLabel8.setText("Width (Mtr)");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(170, 110, 100, 15);

        txtSqmtr.setEditable(false);
        jPanel1.add(txtSqmtr);
        txtSqmtr.setBounds(430, 100, 60, 30);

        jLabel9.setText("SQMTR (Mtr)");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(330, 110, 110, 15);

        jLabel17.setText("GSM");
        jPanel1.add(jLabel17);
        jLabel17.setBounds(510, 110, 60, 15);

        txtGSM.setEditable(false);
        jPanel1.add(txtGSM);
        txtGSM.setBounds(550, 100, 50, 30);

        jLabel18.setText("Weight (KG)");
        jPanel1.add(jLabel18);
        jLabel18.setBounds(630, 110, 100, 15);

        txtWeight.setEditable(false);
        jPanel1.add(txtWeight);
        txtWeight.setBounds(730, 100, 50, 30);

        Tab.addTab("Felt Performace Tracking Sheet", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(0, 0, 770, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        jPanel8.setLayout(null);

        Table_prevoiusData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_prevoiusData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table_prevoiusDataKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(Table_prevoiusData);

        jPanel8.add(jScrollPane4);
        jScrollPane4.setBounds(0, 110, 1010, 360);

        jLabel4.setText("To Date");
        jPanel8.add(jLabel4);
        jLabel4.setBounds(200, 10, 90, 30);

        jLabel10.setText("From Date ");
        jPanel8.add(jLabel10);
        jLabel10.setBounds(10, 10, 90, 30);

        txtToDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel8.add(txtToDate);
        txtToDate.setBounds(290, 10, 100, 30);

        txtFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel8.add(txtFromDate);
        txtFromDate.setBounds(90, 10, 100, 30);

        jButton1.setText("GENERATE REPORT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton1);
        jButton1.setBounds(810, 80, 180, 25);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        buttonGroup2.add(chkExport);
        chkExport.setText("Export");
        jPanel4.add(chkExport);
        chkExport.setBounds(290, 2, 80, 23);

        buttonGroup2.add(chkPartywise);
        chkPartywise.setSelected(true);
        chkPartywise.setText("Partywise");
        jPanel4.add(chkPartywise);
        chkPartywise.setBounds(150, 2, 130, 23);

        buttonGroup2.add(chkZonewise);
        chkZonewise.setText("Zonewise");
        chkZonewise.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkZonewiseItemStateChanged(evt);
            }
        });
        jPanel4.add(chkZonewise);
        chkZonewise.setBounds(20, 2, 120, 23);

        jPanel8.add(jPanel4);
        jPanel4.setBounds(400, 10, 390, 30);

        jLabel11.setText("Party Code");
        jPanel8.add(jLabel11);
        jLabel11.setBounds(10, 50, 110, 15);

        txtPartyCodeReport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeReportKeyPressed(evt);
            }
        });
        jPanel8.add(txtPartyCodeReport);
        txtPartyCodeReport.setBounds(90, 40, 100, 30);

        jLabel12.setText("Party Name");
        jPanel8.add(jLabel12);
        jLabel12.setBounds(200, 50, 80, 15);
        jPanel8.add(txtPartyNameReport);
        txtPartyNameReport.setBounds(290, 40, 310, 30);

        jLabel13.setText("Prod Type");
        jPanel8.add(jLabel13);
        jLabel13.setBounds(610, 50, 90, 15);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "PRESS", "DRYER", "SHEET MACHINE" }));
        jPanel8.add(jComboBox1);
        jComboBox1.setBounds(680, 47, 140, 20);

        jLabel14.setText("Machine No");
        jPanel8.add(jLabel14);
        jLabel14.setBounds(10, 80, 90, 30);

        txtMachineNoReport.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMachineNoReportKeyPressed(evt);
            }
        });
        jPanel8.add(txtMachineNoReport);
        txtMachineNoReport.setBounds(100, 77, 70, 30);

        jLabel15.setText("Position");
        jPanel8.add(jLabel15);
        jLabel15.setBounds(180, 80, 70, 15);

        txtPositionReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPositionReportActionPerformed(evt);
            }
        });
        jPanel8.add(txtPositionReport);
        txtPositionReport.setBounds(240, 77, 70, 30);

        jLabel16.setText("Zone");
        jPanel8.add(jLabel16);
        jLabel16.setBounds(330, 80, 50, 15);

        cmbZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbZone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbZoneItemStateChanged(evt);
            }
        });
        jPanel8.add(cmbZone);
        cmbZone.setBounds(380, 75, 130, 30);

        jButton2.setText("Export to Excel");
        jPanel8.add(jButton2);
        jButton2.setBounds(844, 480, 170, 25);

        jCheckBox1.setText("Display Last Mount Piece");
        jPanel8.add(jCheckBox1);
        jCheckBox1.setBounds(530, 75, 210, 30);

        Tab.addTab("Performance Report", jPanel8);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1030, 550);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1030, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Performace Tracking Sheet");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1030, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 630, 1030, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        DOC_NO = DocNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
            MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
        try {
                boolean flag = false;
                LOV aList = new LOV();

//                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010'";
                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CLOSE_IND!=1 ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
              
                    String check_lock = data.getStringValueFromDB("SELECT COALESCE(PARTY_LOCK, 0) AS PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE='"+aList.ReturnVal+"'");
                
                    if("1".equals(check_lock))
                    {
                        JOptionPane.showMessageDialog(null, "Party Code : "+txtPartyCode.getText()+" is locked.");
                        txtPartyCode.requestFocus();
                        return;
                    }
                    txtPartyCode.setText(aList.ReturnVal);
                    clsSales_Party objParty = (clsSales_Party) clsSales_Party.getObjectExN(EITLERPGLOBAL.gCompanyID, aList.ReturnVal, "210010");
                    txtPartyName.setText(objParty.getAttribute("PARTY_NAME").getString());
                    flag = true;
                }
                
                if(flag)
                {
                         EITLERP.FeltSales.Order.searchkey search = new EITLERP.FeltSales.Order.searchkey();
                        search.SQL = "SELECT MM_MACHINE_NO AS MACHINE_NO,MM_MACHINE_POSITION AS POSITION,MM_MACHINE_POSITION_DESC AS POSITION_DESC,MM_ITEM_CODE AS ITEM_CODE,MM_GRUP AS GRUP,(MM_FELT_LENGTH+MM_FABRIC_LENGTH) AS LENGTH,(MM_FELT_WIDTH+MM_FABRIC_WIDTH) AS WIDTH,MM_FELT_GSM AS GSM,concat(MM_FELT_STYLE,MM_STYLE_DRY) AS STYLE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND (MM_MACHINE_NO!='' AND MM_MACHINE_POSITION!='' AND (MM_FELT_LENGTH != '' OR MM_FABRIC_LENGTH != '') AND (MM_FELT_WIDTH != '' OR MM_FABRIC_WIDTH != '') AND MM_FELT_GSM!='') ORDER BY  ITEM_CODE";
                        search.ReturnCol = 1;
                        search.Party_Code = txtPartyCode.getText();
                        search.ShowReturnCol = true;
                        search.DefaultSearchOn = 1;
                        if (search.ShowRSLOV()) {
                            txtMachineNo.setText(search.ReturnVal);
                            txtPosition.setText(search.SecondVal);
                            String PositionDesc  = data.getStringValueFromDB("SELECT MM_MACHINE_POSITION_DESC AS POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" ");
                            lblPosDesc.setText(PositionDesc);
                            txtLength.setText(data.getStringValueFromDB("SELECT MM_FELT_LENGTH+MM_FABRIC_LENGTH FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtWidth.setText(data.getStringValueFromDB("SELECT (MM_FELT_WIDTH+MM_FABRIC_WIDTH) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtSqmtr.setText(data.getStringValueFromDB("SELECT ROUND(((MM_FELT_LENGTH+MM_FABRIC_LENGTH)*(MM_FELT_WIDTH+MM_FABRIC_WIDTH)),2)  FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtGSM.setText(data.getStringValueFromDB("SELECT MM_FELT_GSM  FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtWeight.setText(data.getStringValueFromDB("SELECT MM_FELT_WEIGHT  FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            LoadPreviousPieces();
                        }
                }
                txtMachineNo.setEnabled(false);
                txtPosition.setEnabled(false);
                txtPartyCode.setEnabled(false);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
       
                
        
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        ReportShow();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        objPTS.HistoryView = false;
        objPTS.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo1 = DocNo.getText();
        objPTS.ShowHistory(DocNo1);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed
        // TODO add your handling code here:
        try {
            Object[] rowData = new Object[15];
            rowData[0] = (DataModel_SDML.getRowCount() + 1) +"";
            rowData[1] = "SDML";
            rowData[2] = "SDML";
            rowData[7] = "0";
            rowData[10] = "NO DAMAGE";
            
            DataModel_SDML.addRow(rowData);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
            txtMachineNo.requestFocus();
        } else if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

//                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010'";
                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CLOSE_IND!=1 ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);

                    String check_lock = data.getStringValueFromDB("SELECT COALESCE(PARTY_LOCK, 0) AS PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE='"+txtPartyCode.getText()+"'");
                
                    if("1".equals(check_lock))
                    {
                        JOptionPane.showMessageDialog(null, "Party Code : "+txtPartyCode.getText()+" is locked.");
                        txtPartyCode.requestFocus();
                        return;
                    }
                    
                    clsSales_Party objParty = (clsSales_Party) clsSales_Party.getObjectExN(EITLERPGLOBAL.gCompanyID, aList.ReturnVal, "210010");
                    txtPartyName.setText(objParty.getAttribute("PARTY_NAME").getString());
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void tblSDMLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSDMLKeyPressed
        System.out.println("Key Presed = "+evt.getKeyCode());
        if(tblSDML.getValueAt(tblSDML.getSelectedRow(), 1).equals("SDML"))
        {
            if (tblSDML.getSelectedColumn() == 3 && evt.getKeyCode() == 112) {
                searchkey search = new searchkey();
                search.SQL = "SELECT PR.PR_PIECE_NO,PR.PR_PARTY_CODE,P.PARTY_NAME,PR_PIECE_STAGE from PRODUCTION.FELT_SALES_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER P WHERE PR.PR_PARTY_CODE=P.PARTY_CODE  AND PR.PR_PIECE_STAGE IN ('INVOICED')  AND PR.PR_PARTY_CODE='"+txtPartyCode.getText()+"' AND PR.PR_MACHINE_NO='"+txtMachineNo.getText()+"' AND PR.PR_POSITION_NO='"+txtPosition.getText()+"'  ORDER BY PR_INVOICE_DATE DESC";
                search.ReturnCol = 1;
                search.Party_Code = txtPartyCode.getText();
                search.ShowReturnCol = true;
                search.DefaultSearchOn = 1;
                if (search.ShowRSLOV()) {
                    tblSDML.setValueAt(search.ReturnVal, tblSDML.getSelectedRow(), 3);
                    try{

                        ResultSet rs = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+search.ReturnVal+"'");
                        rs.first();
                        DataModel_SDML.setValueByVariable("PRODUCT_GROUP", rs.getString("PR_GROUP"), tblSDML.getSelectedRow());
                        DataModel_SDML.setValueByVariable("LENGTH", rs.getString("PR_BILL_LENGTH"), tblSDML.getSelectedRow());
                        DataModel_SDML.setValueByVariable("WIDTH", rs.getString("PR_BILL_WIDTH"), tblSDML.getSelectedRow());
                        DataModel_SDML.setValueByVariable("GSM", rs.getString("PR_BILL_GSM"), tblSDML.getSelectedRow());
                        DataModel_SDML.setValueByVariable("WEIGHT", rs.getString("PR_BILL_WEIGHT"), tblSDML.getSelectedRow());
                        DataModel_SDML.setValueByVariable("SQMTR", rs.getString("PR_BILL_SQMTR"), tblSDML.getSelectedRow());
                        DataModel_SDML.setValueByVariable("STYLE", rs.getString("PR_BILL_STYLE"), tblSDML.getSelectedRow());

                    }catch(Exception e)
                    {
                       //e.printStackTrace();
                    }
                }
            }
            if (tblSDML.getSelectedColumn() == 5 || tblSDML.getSelectedColumn() == 6 ) {
                calculate_Actual_life_days_SDML();
            }
        }else
        {
            if (evt.getKeyCode() == 112 && tblSDML.getSelectedColumn()==4) {
                
                try {
                    LOV aList = new LOV();

    //                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010'";
                    aList.SQL = "SELECT distinct(PR_GROUP) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER ";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;
                    aList.UseSpecifiedConn = true;
                    aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                    if (aList.ShowLOV()) {
                        tblSDML.setValueAt(aList.ReturnVal, tblSDML.getSelectedRow(), 4);
                    }
                }catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
            else if (evt.getKeyCode() == 112 && tblSDML.getSelectedColumn()==2) {
                try {
                    LOV aList = new LOV();

    //                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010'";
                    aList.SQL = "SELECT PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER where PARA_ID='OTHER_FELT_SUPPLIER'";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;
                    aList.UseSpecifiedConn = true;
                    aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                    if (aList.ShowLOV()) {
                        tblSDML.setValueAt(aList.ReturnVal, tblSDML.getSelectedRow(), 2);
                    }
                }catch(Exception e)
                {
                    e.printStackTrace();
                }
            }  
            if (tblSDML.getSelectedColumn() == 5 || tblSDML.getSelectedColumn() == 6 ) {
                calculate_Actual_life_days_OTHER();
            }
        }
    }//GEN-LAST:event_tblSDMLKeyPressed

    
    private void btnRemove1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemove1ActionPerformed
        // TODO add your handling code here:
        if (tblSDML.getRowCount() > 0) {
            DataModel_SDML.removeRow(tblSDML.getSelectedRow());
        }
    }//GEN-LAST:event_btnRemove1ActionPerformed

    private void txtMachineNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMachineNoKeyPressed
        // TODO add your handling code here:
             if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
                txtPosition.requestFocus();
             } else if (evt.getKeyCode() == 112) {
                    try {
                        EITLERP.FeltSales.Order.searchkey search = new EITLERP.FeltSales.Order.searchkey();
                        search.SQL = "SELECT MM_MACHINE_NO AS MACHINE_NO,MM_MACHINE_POSITION AS POSITION,MM_MACHINE_POSITION_DESC AS POSITION_DESC,MM_ITEM_CODE AS ITEM_CODE,MM_GRUP AS GRUP,(MM_FELT_LENGTH+MM_FABRIC_LENGTH) AS LENGTH,(MM_FELT_WIDTH+MM_FABRIC_WIDTH) AS WIDTH,MM_FELT_GSM AS GSM,concat(MM_FELT_STYLE,MM_STYLE_DRY) AS STYLE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND (MM_MACHINE_NO!='' AND MM_MACHINE_POSITION!='' AND (MM_FELT_LENGTH != '' OR MM_FABRIC_LENGTH != '') AND (MM_FELT_WIDTH != '' OR MM_FABRIC_WIDTH != '') AND MM_FELT_GSM!='') ORDER BY  MM_MACHINE_NO,MM_MACHINE_POSITION";
                        search.ReturnCol = 1;
                        search.Party_Code = txtPartyCode.getText();
                        search.ShowReturnCol = true;
                        search.DefaultSearchOn = 1;
                        if (search.ShowRSLOV()) {
                            txtMachineNo.setText(search.ReturnVal);
                            txtPosition.setText(search.SecondVal);
                            String PositionDesc  = data.getStringValueFromDB("SELECT MM_MACHINE_POSITION_DESC AS POSITION_DESC FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" ");
                            lblPosDesc.setText(PositionDesc);
                            txtLength.setText(data.getStringValueFromDB("SELECT MM_FELT_LENGTH+MM_FABRIC_LENGTH FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtWidth.setText(data.getStringValueFromDB("SELECT (MM_FELT_WIDTH+MM_FABRIC_WIDTH) FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtSqmtr.setText(data.getStringValueFromDB("SELECT ROUND(((MM_FELT_LENGTH+MM_FABRIC_LENGTH)*(MM_FELT_WIDTH+MM_FABRIC_WIDTH)),2)  FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCode.getText() + "' AND MM_MACHINE_NO="+search.ReturnVal+" AND MM_MACHINE_POSITION="+search.SecondVal+" "));
                            txtMachineNo.setEnabled(false);
                            txtPosition.setEnabled(false);
                            txtPartyCode.setEnabled(false);
                            LoadPreviousPieces();
                        }
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
             }
    }//GEN-LAST:event_txtMachineNoKeyPressed
    private void LoadPreviousPieces()
    {
        String str_query = "SELECT * FROM PRODUCTION.FELT_SALES_PERFORMANCE_TRACKING_SHEET_REGISTER " +
                            " WHERE PARTY_CODE='"+txtPartyCode.getText()+"' AND MACHINE_NO="+txtMachineNo.getText()+" AND POSITION="+txtPosition.getText()+"  ORDER BY MOUNT_DATE DESC limit 3 ";
        System.out.println("qry : "+str_query);
        ResultSet resultSet = data.getResult(str_query);
        if(data.IsRecordExist(str_query))
        {
            int srNo = 0;
            try{
                resultSet.first();
                    while (!resultSet.isAfterLast()) {

                        srNo++;
                        int NewRow = srNo - 1;

                        Object[] rowData = new Object[1];
                        DataModel_SDML.addRow(rowData);

                        DataModel_SDML.setValueByVariable("SR_NO", "-", NewRow);
                        DataModel_SDML.setValueByVariable("PIECE_NO", resultSet.getString("PIECE_NO"), NewRow);
                        DataModel_SDML.setValueByVariable("SUPPLIER", resultSet.getString("SUPPLIER"), NewRow);
                        DataModel_SDML.setValueByVariable("SUPPLIER_NAME", resultSet.getString("SUPPLIER_NAME"), NewRow);
                        DataModel_SDML.setValueByVariable("PRODUCT_GROUP", resultSet.getString("PRODUCT_GROUP"), NewRow);
                        DataModel_SDML.setValueByVariable("MOUNT_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("MOUNT_DATE")), NewRow);
                        DataModel_SDML.setValueByVariable("DEMOUNT_DATE", EITLERPGLOBAL.formatDate(resultSet.getString("DEMOUNT_DATE")), NewRow);
                        DataModel_SDML.setValueByVariable("SHUT_DAYS", resultSet.getString("SHUT_DAYS"), NewRow);
                        DataModel_SDML.setValueByVariable("ACTUAL_LIFE_DAYS", resultSet.getString("ACTUAL_LIFE_DAYS"), NewRow);
                        DataModel_SDML.setValueByVariable("LIFE_TONNAGE", resultSet.getString("LIFE_TONNAGE"), NewRow);
                        DataModel_SDML.setValueByVariable("TYPE_OF_DAMAGE", resultSet.getString("TYPE_OF_DAMAGE"), NewRow);
                        DataModel_SDML.setValueByVariable("REMARKS", resultSet.getString("REMARKS"), NewRow);
                        DataModel_SDML.setValueByVariable("LENGTH", resultSet.getString("LENGTH"), NewRow);
                        DataModel_SDML.setValueByVariable("WIDTH", resultSet.getString("WIDTH"), NewRow);
                        DataModel_SDML.setValueByVariable("GSM", resultSet.getString("GSM"), NewRow);
                        DataModel_SDML.setValueByVariable("WEIGHT", resultSet.getString("WEIGHT"), NewRow);
                        DataModel_SDML.setValueByVariable("SQMTR", resultSet.getString("SQMTR"), NewRow);
                        DataModel_SDML.setValueByVariable("STYLE", resultSet.getString("STYLE"), NewRow);
                        DataModel_SDML.setValueByVariable("AVERAGE_LIFE", resultSet.getString("AVERAGE_LIFE"), NewRow);
                        DataModel_SDML.setValueByVariable("TRAIL_PIECE", resultSet.getString("TRAIL_PIECE"), NewRow);
                        DataModel_SDML.setValueByVariable("TRAIL_REMARK", resultSet.getString("TRAIL_REMARK"), NewRow);
                        
                        resultSet.next();
                    }
            }catch(Exception e)
            {
                e.printStackTrace();
            }
        }       
    }
    private void Table_prevoiusDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table_prevoiusDataKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Table_prevoiusDataKeyPressed

    private void txtPartyCodeComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_txtPartyCodeComponentMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeComponentMoved

    private void cmbZoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbZoneItemStateChanged
        // TODO add your handling code here:
        DisplayData();
    }//GEN-LAST:event_cmbZoneItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            FormatGrid_prevoiusData();
            if(chkPartywise.isSelected())
            {
                if(txtPartyCodeReport.getText().equals(""))
                {
                    JOptionPane.showMessageDialog(this, "Please select Party");
                    txtPartyCodeReport.requestFocus();
                    return;
                }
            }
            
            
            setPrevoiousData();
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtPartyCodeReportKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeReportKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
            txtMachineNoReport.requestFocus();
        } else if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

//                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010'";
                aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CLOSE_IND!=1 ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtPartyCodeReport.setText(aList.ReturnVal);

                    String check_lock = data.getStringValueFromDB("SELECT COALESCE(PARTY_LOCK, 0) AS PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE='"+txtPartyCodeReport.getText()+"'");
                
                    if("1".equals(check_lock))
                    {
                        JOptionPane.showMessageDialog(null, "Party Code : "+txtPartyCodeReport.getText()+" is locked.");
                        txtPartyCodeReport.requestFocus();
                        return;
                    }
                    
                    clsSales_Party objParty = (clsSales_Party) clsSales_Party.getObjectExN(EITLERPGLOBAL.gCompanyID, aList.ReturnVal, "210010");
                    txtPartyNameReport.setText(objParty.getAttribute("PARTY_NAME").getString());
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtPartyCodeReportKeyPressed

    private void txtMachineNoReportKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMachineNoReportKeyPressed
        // TODO add your handling code here:
             if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
                txtPositionReport.requestFocus();
             } else if (evt.getKeyCode() == 112) {
                    try {
                        EITLERP.FeltSales.Order.searchkey search = new EITLERP.FeltSales.Order.searchkey();
                        search.SQL = "SELECT MM_MACHINE_NO AS MACHINE_NO,MM_MACHINE_POSITION AS POSITION,MM_MACHINE_POSITION_DESC AS POSITION_DESC,MM_ITEM_CODE AS ITEM_CODE,MM_GRUP AS GRUP,(MM_FELT_LENGTH+MM_FABRIC_LENGTH) AS LENGTH,(MM_FELT_WIDTH+MM_FABRIC_WIDTH) AS WIDTH,MM_FELT_GSM AS GSM,concat(MM_FELT_STYLE,MM_STYLE_DRY) AS STYLE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='" + txtPartyCodeReport.getText() + "' AND (MM_MACHINE_NO!='' AND MM_MACHINE_POSITION!='' AND (MM_FELT_LENGTH != '' OR MM_FABRIC_LENGTH != '') AND (MM_FELT_WIDTH != '' OR MM_FABRIC_WIDTH != '') AND MM_FELT_GSM!='') ORDER BY  MM_MACHINE_NO,MM_MACHINE_POSITION";
                        search.ReturnCol = 1;
                        search.Party_Code = txtPartyCodeReport.getText();
                        search.ShowReturnCol = true;
                        search.DefaultSearchOn = 1;
                        if (search.ShowRSLOV()) {
                            txtMachineNoReport.setText(search.ReturnVal);
                            txtPositionReport.setText(search.SecondVal);
                        }
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
             }
    }//GEN-LAST:event_txtMachineNoReportKeyPressed

    private void chkZonewiseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkZonewiseItemStateChanged
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_chkZonewiseItemStateChanged

    private void txtPositionReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPositionReportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPositionReportActionPerformed

    private void tblSDMLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSDMLKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblSDMLKeyReleased
    /*    */
    private void ReportShow() {
        
    }
    private void calculate_Actual_life_days_SDML()
    {
        
            
            for(int i=0;i<DataModel_SDML.getRowCount();i++)
            {
                try{
                    String Mount_Date = DataModel_SDML.getValueByVariable("MOUNT_DATE", i);
                    String Demount_Date = DataModel_SDML.getValueByVariable("DEMOUNT_DATE", i);

                    System.out.println("------------------I = "+i);
                    System.out.println("MOUNT DATE : "+Mount_Date);
                    System.out.println("DEMOUNT DATE : "+Demount_Date);
                    System.out.println("SELECT DATEDIFF('"+EITLERPGLOBAL.formatDateDB(Demount_Date)+"', '"+EITLERPGLOBAL.formatDateDB(Mount_Date)+"') ");    
                    int date_diff =  Integer.parseInt(data.getStringValueFromDB("SELECT DATEDIFF('"+EITLERPGLOBAL.formatDateDB(Demount_Date)+"', '"+EITLERPGLOBAL.formatDateDB(Mount_Date)+"') "));

                    int shut_day = Integer.parseInt(DataModel_SDML.getValueByVariable("SHUT_DAYS", i));

                    DataModel_SDML.setValueByVariable("ACTUAL_LIFE_DAYS", ""+(date_diff-shut_day), i);
                }catch(Exception e)
                {
                    DataModel_SDML.setValueByVariable("ACTUAL_LIFE_DAYS", "0", i);
                }
            }
            
        try{
            for(int i=0;i<DataModel_SDML.getRowCount();i++)
            {
                if(DataModel_SDML.getValueByVariable("TYPE_OF_DAMAGE", i).equals("NO DAMAGE"))
                {
                    String Query = "SELECT ACTUAL_LIFE_DAYS FROM PRODUCTION.FELT_SALES_PERFORMANCE_TRACKING_SHEET_DETAIL D, " +
                                    "PRODUCTION.FELT_SALES_PERFORMANCE_TRACKING_SHEET_HEADER H WHERE H.DOC_NO=D.DOC_NO " +
                                    "AND H.PARTY_CODE='"+txtPartyCode.getText()+"' AND H.MACHINE_NO='"+txtMachineNo.getText()+"' AND H.POSITION='"+txtPosition.getText()+"' AND D.TYPE_OF_DAMAGE='NO DAMAGE' AND H.APPROVED=1 ORDER BY H.DOC_NO DESC LIMIT ";
                    String Limit = "";
                    double ACTUAL_LIFE_DAYS_TOTAL = 0;
                    
                    int divide = 0;
                    if(i==0)
                    {
                        Limit = "3";
                    }
                    else if(i==1)
                    {
                        double ACTUAL_LIFE_DAYS_ROW1 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", 0));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW1;
                        divide = 1;
                        Limit = "2";
                    }
                    else if(i==2)
                    {
                        double ACTUAL_LIFE_DAYS_ROW1 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", 0));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW1;
                        
                        double ACTUAL_LIFE_DAYS_ROW2 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", 1));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW2;
                        divide = 2;
                        Limit = "1";
                    }
                    else if(i>=3)
                    {
                        double ACTUAL_LIFE_DAYS_ROW1 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i-2));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW1;
                        
                        double ACTUAL_LIFE_DAYS_ROW2 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i-1));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW2;
                        
                        double ACTUAL_LIFE_DAYS_ROW3 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i-0));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW3;
                        divide = 3;
                        Limit = "0";
                    }
                    Query = Query + Limit;
                    ResultSet rsData = data.getResult(Query);
                    try{
                        rsData.first();
                        
                        int row = 0;
                        while(rsData.isAfterLast())
                        {
                            double ACTUAL_LIFE_DAYS = 0; 
                            try{
                                ACTUAL_LIFE_DAYS = Double.parseDouble(rsData.getString("ACTUAL_LIFE_DAYS"));
                            }catch(Exception e1)
                            {
                                e1.printStackTrace();
                            }
                            ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS;
                            row++;
                            divide++;
                            rsData.next();
                        }
                        
                        double ACTUAL_LIFE_DAYS_AVERAGE = ACTUAL_LIFE_DAYS_TOTAL / divide;
                        DataModel_SDML.setValueByVariable("AVERAGE_LIFE", ""+ACTUAL_LIFE_DAYS_AVERAGE, i);
                        
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                    
                }
                else if(DataModel_SDML.getValueByVariable("TYPE_OF_DAMAGE", i).equals("ACCIDENTAL DAMAGE"))
                {
                    DataModel_SDML.setValueByVariable("AVERAGE_LIFE", "0", i);
                }
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    private void calculate_Actual_life_days_OTHER()
    {
        try{
            
            for(int i=0;i<DataModel_SDML.getRowCount();i++)
            {
                String Mount_Date = DataModel_SDML.getValueByVariable("MOUNT_DATE", i);
                String Demount_Date = DataModel_SDML.getValueByVariable("DEMOUNT_DATE", i);
                int date_diff =  Integer.parseInt(data.getStringValueFromDB("SELECT DATEDIFF('"+EITLERPGLOBAL.formatDateDB(Demount_Date)+"', '"+EITLERPGLOBAL.formatDateDB(Mount_Date)+"') "));
                
                int shut_day = Integer.parseInt(DataModel_SDML.getValueByVariable("SHUT_DAYS", i));
                
                DataModel_SDML.setValueByVariable("ACTUAL_LIFE_DAYS", ""+(date_diff-shut_day), i);
            }
            
        }catch(Exception e)
        {
            //e.printStackTrace();
        }
        try{
            for(int i=0;i<DataModel_SDML.getRowCount();i++)
            {
                if(DataModel_SDML.getValueByVariable("TYPE_OF_DAMAGE", i).equals("NO DAMAGE"))
                {
                    String SupplierName = DataModel_SDML.getValueByVariable("SUPPLIER_NAME", i);
                    String Query = "SELECT ACTUAL_LIFE_DAYS FROM PRODUCTION.FELT_SALES_PERFORMANCE_TRACKING_SHEET_DETAIL D, " +
                                    "PRODUCTION.FELT_SALES_PERFORMANCE_TRACKING_SHEET_HEADER H WHERE H.DOC_NO=D.DOC_NO " +
                                    "AND D.SUPPLIER_NAME='"+SupplierName+"' AND H.MACHINE_NO='"+txtMachineNo.getText()+"' AND H.POSITION='"+txtPosition.getText()+"' AND D.TYPE_OF_DAMAGE='NO DAMAGE' AND H.APPROVED=1 ORDER BY H.DOC_NO DESC LIMIT ";
                    String Limit = "";
                    double ACTUAL_LIFE_DAYS_TOTAL = 0;
                    
                    int divide = 0;
                    if(i==0)
                    {
                        Limit = "3";
                    }
                    else if(i==1)
                    {
                        double ACTUAL_LIFE_DAYS_ROW1 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", 0));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW1;
                        divide = 1;
                        Limit = "2";
                    }
                    else if(i==2)
                    {
                        double ACTUAL_LIFE_DAYS_ROW1 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", 0));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW1;
                        
                        double ACTUAL_LIFE_DAYS_ROW2 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", 1));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW2;
                        divide = 2;
                        Limit = "1";
                    }
                    else if(i>=3)
                    {
                        double ACTUAL_LIFE_DAYS_ROW1 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i-2));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW1;
                        
                        double ACTUAL_LIFE_DAYS_ROW2 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i-1));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW2;
                        
                        double ACTUAL_LIFE_DAYS_ROW3 = Double.parseDouble(DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i-0));
                        ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS_ROW3;
                        divide = 3;
                        Limit = "0";
                    }
                    Query = Query + Limit;
                    ResultSet rsData = data.getResult(Query);
                    try{
                        rsData.first();
                        
                        int row = 0;
                        while(rsData.isAfterLast())
                        {
                            double ACTUAL_LIFE_DAYS = 0; 
                            try{
                                ACTUAL_LIFE_DAYS = Double.parseDouble(rsData.getString("ACTUAL_LIFE_DAYS"));
                            }catch(Exception e1)
                            {
                                e1.printStackTrace();
                            }
                            ACTUAL_LIFE_DAYS_TOTAL = ACTUAL_LIFE_DAYS_TOTAL + ACTUAL_LIFE_DAYS;
                            row++;
                            divide++;
                            rsData.next();
                        }
                        
                        double ACTUAL_LIFE_DAYS_AVERAGE = ACTUAL_LIFE_DAYS_TOTAL / divide;
                        DataModel_SDML.setValueByVariable("AVERAGE_LIFE", ""+ACTUAL_LIFE_DAYS_AVERAGE, i);
                        
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                    
                }
                else if(DataModel_SDML.getValueByVariable("TYPE_OF_DAMAGE", i).equals("ACCIDENTAL DAMAGE"))
                {
                    DataModel_SDML.setValueByVariable("AVERAGE_LIFE", "0", i);
                }
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }     
    }
    
    private void MoveFirst() {
        objPTS.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objPTS.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objPTS.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objPTS.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        clearFields();

        EditMode = EITLERPGLOBAL.ADD;
        DisableToolbar();
        SetFields(true);
        SetupApproval();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);
        clearFields();
        GenerateHierarchyCombo();
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 335;

        DocDate.setText(df.format(new Date()));
        FFNo = aList.FirstFreeNo;
        DocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("Felt Performace Tracking Sheet - " + DocNo.getText());
        btnAdd1.setEnabled(true);
        txtMachineNo.setEnabled(true);
        txtPosition.setEnabled(true);
        txtPartyCode.setEnabled(true);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.PreformaceTracking.frmFindPerformaceTrackingSheet", true);
        frmFindPerformaceTrackingSheet ObjFindobjPTS = (frmFindPerformaceTrackingSheet) ObjLoader.getObj();

        if (ObjFindobjPTS.Cancelled == false) {
            if (!objPTS.Filter(ObjFindobjPTS.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt Performace Tracking Sheet", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindEx(int pCompanyID, String AmendID) {
        objPTS.Filter(" DOC_NO='" + AmendID + "'");
        objPTS.MoveFirst();
        DisplayData();
    }

    // find rate update by doc no
    public void Find(String docNo) {
        objPTS.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        objPTS.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        calculate_Actual_life_days_SDML();
        calculate_Actual_life_days_OTHER();
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //objPTS.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objPTS.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = ModuleId;
                aList.FirstFreeNo = 335;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
                EditMode = 0;

                if (OpgFinal.isSelected()) {

                    try{
                            
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                    
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + objPTS.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objPTS.Update()) {
                if (OpgFinal.isSelected())  {
                        try{
                            
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                }
                EditMode = 0;
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + objPTS.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Cancel() {
        EditMode = 0;
        DisplayData();
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);
    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) objPTS.getAttribute("DOC_NO").getObj();
        if (objPTS.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            
            DisableToolbar();
            
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            
            
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (objPTS.CanDelete(DocNo.getText() + "", DocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, objPTS.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void GenerateCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;
        cmbIncharge = new EITLComboModel();

        cmbZone.setModel(cmbIncharge);
        cmbIncharge.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            if(!ObjIncharge.getAttribute("INCHARGE_NAME").getObj().equals("ALL"))
            {
                cmbIncharge.addElement(aData);
            }
        }
    }
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DocNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        SetFields(true);
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        DocDate.setEnabled(pStat);
        DocNo.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtMachineNo.setEnabled(pStat);
        txtPosition.setEnabled(pStat);
        btnAdd1.setEnabled(pStat);
        btnRemove1.setEnabled(pStat);
        
        tblSDML.setEnabled(pStat);

                
        
        SetupApproval();
        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    

    private void SetData() {

        objPTS.setAttribute("DOC_NO", DocNo.getText());
        objPTS.setAttribute("DOC_DATE", DocDate.getText());
        
        objPTS.setAttribute("PARTY_CODE", txtPartyCode.getText());
        objPTS.setAttribute("PARTY_NAME", txtPartyName.getText());
        objPTS.setAttribute("MACHINE_NO", txtMachineNo.getText());
        objPTS.setAttribute("POSITION", txtPosition.getText());
        
        DOC_NO = DocNo.getText();
        objPTS.setAttribute("DOC_NO", DocNo.getText());
        objPTS.setAttribute("DOC_DATE", DocDate.getText());
        objPTS.setAttribute("MODULE_ID", ModuleId);
        objPTS.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        objPTS.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objPTS.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objPTS.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objPTS.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objPTS.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objPTS.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objPTS.setAttribute("APPROVAL_STATUS", "R");
            objPTS.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objPTS.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objPTS.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            objPTS.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            objPTS.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            objPTS.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            objPTS.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            objPTS.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        try {
            objPTS.hmFeltPerformanceTrackingDetails.clear();


            for (int i = 0; i <= tblSDML.getRowCount() - 1; i++) {

                clsPerformaceTrackingSheetDetails objPTSDetails = new clsPerformaceTrackingSheetDetails();

                //objobjPTSDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                objPTSDetails.setAttribute("DOC_NO", DocNo.getText());
                objPTSDetails.setAttribute("SR_NO", DataModel_SDML.getValueByVariable("SR_NO", i)+"");//SR_NO
                objPTSDetails.setAttribute("SUPPLIER", DataModel_SDML.getValueByVariable("SUPPLIER", i));
                objPTSDetails.setAttribute("SUPPLIER_NAME", DataModel_SDML.getValueByVariable("SUPPLIER_NAME", i));
                objPTSDetails.setAttribute("PIECE_NO", DataModel_SDML.getValueByVariable("PIECE_NO", i));
                objPTSDetails.setAttribute("PRODUCT_GROUP", DataModel_SDML.getValueByVariable("PRODUCT_GROUP", i));
                objPTSDetails.setAttribute("MOUNT_DATE", EITLERPGLOBAL.formatDateDB(DataModel_SDML.getValueByVariable("MOUNT_DATE", i)));
                objPTSDetails.setAttribute("DEMOUNT_DATE", EITLERPGLOBAL.formatDateDB(DataModel_SDML.getValueByVariable("DEMOUNT_DATE", i)));
                objPTSDetails.setAttribute("SHUT_DAYS", DataModel_SDML.getValueByVariable("SHUT_DAYS", i));
                objPTSDetails.setAttribute("ACTUAL_LIFE_DAYS", DataModel_SDML.getValueByVariable("ACTUAL_LIFE_DAYS", i));
                objPTSDetails.setAttribute("LIFE_TONNAGE", DataModel_SDML.getValueByVariable("LIFE_TONNAGE", i));
                objPTSDetails.setAttribute("TYPE_OF_DAMAGE", DataModel_SDML.getValueByVariable("TYPE_OF_DAMAGE", i));
                objPTSDetails.setAttribute("REMARKS", DataModel_SDML.getValueByVariable("REMARKS", i));
                objPTSDetails.setAttribute("LENGTH", DataModel_SDML.getValueByVariable("LENGTH", i));
                objPTSDetails.setAttribute("WIDTH", DataModel_SDML.getValueByVariable("WIDTH", i));
                objPTSDetails.setAttribute("GSM", DataModel_SDML.getValueByVariable("GSM", i));
                objPTSDetails.setAttribute("WEIGHT", DataModel_SDML.getValueByVariable("WEIGHT", i));
                objPTSDetails.setAttribute("SQMTR", DataModel_SDML.getValueByVariable("SQMTR", i));
                objPTSDetails.setAttribute("STYLE", DataModel_SDML.getValueByVariable("STYLE", i));
                objPTSDetails.setAttribute("AVERAGE_LIFE", DataModel_SDML.getValueByVariable("AVERAGE_LIFE", i));
                
                if (tblSDML.getValueAt(i, 19).equals(true)) {
                    objPTSDetails.setAttribute("TRAIL_PIECE", 1);
                } else {
                    objPTSDetails.setAttribute("TRAIL_PIECE", 0);
                }
                objPTSDetails.setAttribute("TRAIL_REMARK", DataModel_SDML.getValueByVariable("TRAIL_REMARK", i));
                
                objPTS.hmFeltPerformanceTrackingDetails.put(Integer.toString(objPTS.hmFeltPerformanceTrackingDetails.size() + 1), objPTSDetails);
            }
//            for (int i = 0; i <= tblOther.getRowCount() - 1; i++) {
//
//                clsPerformaceTrackingSheetDetails objPTSDetails = new clsPerformaceTrackingSheetDetails();
//
//                objPTSDetails.setAttribute("DOC_NO", DocNo.getText());
//                objPTSDetails.setAttribute("SR_NO", (i + 1));
//                objPTSDetails.setAttribute("SUPPLIER", DataModel_OTHER.getValueByVariable("SUPPLIER", i));
//                objPTSDetails.setAttribute("SUPPLIER_NAME", DataModel_OTHER.getValueByVariable("SUPPLIER_NAME", i));
//                objPTSDetails.setAttribute("PIECE_NO", DataModel_OTHER.getValueByVariable("PIECE_NO", i));
//                objPTSDetails.setAttribute("PRODUCT_GROUP", DataModel_OTHER.getValueByVariable("PRODUCT_GROUP", i));
//                objPTSDetails.setAttribute("MOUNT_DATE", EITLERPGLOBAL.formatDateDB(DataModel_OTHER.getValueByVariable("MOUNT_DATE", i)));
//                objPTSDetails.setAttribute("DEMOUNT_DATE", EITLERPGLOBAL.formatDateDB(DataModel_OTHER.getValueByVariable("DEMOUNT_DATE", i)));
//                objPTSDetails.setAttribute("SHUT_DAYS", DataModel_OTHER.getValueByVariable("SHUT_DAYS", i));
//                objPTSDetails.setAttribute("ACTUAL_LIFE_DAYS", DataModel_OTHER.getValueByVariable("ACTUAL_LIFE_DAYS", i));
//                objPTSDetails.setAttribute("LIFE_TONNAGE", DataModel_OTHER.getValueByVariable("LIFE_TONNAGE", i));
//                objPTSDetails.setAttribute("TYPE_OF_DAMAGE", DataModel_OTHER.getValueByVariable("TYPE_OF_DAMAGE", i));
//                objPTSDetails.setAttribute("REMARKS", DataModel_OTHER.getValueByVariable("REMARKS", i));
//                objPTSDetails.setAttribute("LENGTH", DataModel_OTHER.getValueByVariable("LENGTH", i));
//                objPTSDetails.setAttribute("WIDTH", DataModel_OTHER.getValueByVariable("WIDTH", i));
//                objPTSDetails.setAttribute("GSM", DataModel_OTHER.getValueByVariable("GSM", i));
//                objPTSDetails.setAttribute("WEIGHT", DataModel_OTHER.getValueByVariable("WEIGHT", i));
//                objPTSDetails.setAttribute("SQMTR", DataModel_OTHER.getValueByVariable("SQMTR", i));
//                objPTSDetails.setAttribute("STYLE", DataModel_OTHER.getValueByVariable("STYLE", i));
//                objPTSDetails.setAttribute("AVERAGE_LIFE", DataModel_OTHER.getValueByVariable("AVERAGE_LIFE", i));
//                if (tblOther.getValueAt(i, 19).equals(true)) {
//                    objPTSDetails.setAttribute("TRAIL_PIECE", 1);
//                } else {
//                    objPTSDetails.setAttribute("TRAIL_PIECE", 0);
//                }
//                objPTSDetails.setAttribute("TRAIL_REMARK", DataModel_SDML.getValueByVariable("TRAIL_REMARK", i));
//                objPTS.hmFeltPerformanceTrackingDetails.put(Integer.toString(objPTS.hmFeltPerformanceTrackingDetails.size() + 1), objPTSDetails);
//            }
        } catch (Exception e) {
            System.out.println("Error on setData : " + e.getMessage());
            e.printStackTrace();
        };
    }

    
    
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField DocDate;
    private javax.swing.JTextField DocNo;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JTable Table_prevoiusData;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnRemove1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton chkExport;
    private javax.swing.JRadioButton chkPartywise;
    private javax.swing.JRadioButton chkZonewise;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbZone;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblPosDesc;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblSDML;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGSM;
    private javax.swing.JTextField txtLength;
    private javax.swing.JTextField txtMachineNo;
    private javax.swing.JTextField txtMachineNoReport;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyCodeReport;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPartyNameReport;
    private javax.swing.JTextField txtPosition;
    private javax.swing.JTextField txtPositionReport;
    private javax.swing.JTextField txtSqmtr;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtWeight;
    private javax.swing.JTextField txtWidth;
    // End of variables declaration//GEN-END:variables
}
