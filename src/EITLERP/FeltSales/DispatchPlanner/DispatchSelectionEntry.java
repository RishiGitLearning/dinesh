/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.DispatchPlanner;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.LOV;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.util.HashMap;
import EITLERP.JTextFieldHint;
import EITLERP.data;
import java.awt.Component;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.*;

/**
 *
 * @author root
 */
public class DispatchSelectionEntry extends javax.swing.JApplet {

    private EITLTableModel DataModel_Selection = new EITLTableModel();
    private EITLTableModel DataModel_Pieces = new EITLTableModel();
    private EITLTableModel DataModel_History = new EITLTableModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter ExpToExcel = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private EITLComboModel cmbInchargeModel = new EITLComboModel();

    /**
     * Initializes the applet DispatchSelectionEntry
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DispatchSelectionEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DispatchSelectionEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DispatchSelectionEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DispatchSelectionEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>

        /* Create and display the applet */
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);

        initComponents();
        file_ETE.setVisible(false);
        file_ETE_P.setVisible(false);
        file_ETE_H.setVisible(false);
        lblTitle.setForeground(Color.WHITE);
        lblDate.setText("Date : " + EITLERPGLOBAL.getCurrentDate());
        InchargeCombo();
        FormatGrid();
        GenerateList();
        Table_Selection.requestFocus();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        TabbedPane = new javax.swing.JTabbedPane();
        Selection = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        lblIncharge = new javax.swing.JLabel();
        cmbIncharge = new javax.swing.JComboBox();
        lblParty = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Selection = new javax.swing.JTable();
        file_ETE = new javax.swing.JFileChooser();
        btnExportToExcel = new javax.swing.JButton();
        lblTotal_S = new javax.swing.JLabel();
        SelectedPieces = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_Pieces = new javax.swing.JTable();
        file_ETE_P = new javax.swing.JFileChooser();
        btnExportToExcel_P = new javax.swing.JButton();
        lblTotal_P = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_History = new javax.swing.JTable();
        file_ETE_H = new javax.swing.JFileChooser();
        btnExportToExcel_H = new javax.swing.JButton();

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Piece Selection for Dispatch Planner");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);

        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        lblDate.setText("Date : ");

        lblIncharge.setText("Incharge : ");

        cmbIncharge.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbIncharge.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInchargeItemStateChanged(evt);
            }
        });

        lblParty.setText("Party : ");

        txtPartyCode = new JTextFieldHint(new JTextField(),"Press F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        Table_Selection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table_Selection.getTableHeader().setReorderingAllowed(false);
        Table_Selection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_SelectionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_Selection);

        btnExportToExcel.setText("Export To Excel");
        btnExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcelActionPerformed(evt);
            }
        });

        lblTotal_S.setText("Total : ");

        javax.swing.GroupLayout SelectionLayout = new javax.swing.GroupLayout(Selection);
        Selection.setLayout(SelectionLayout);
        SelectionLayout.setHorizontalGroup(
            SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(SelectionLayout.createSequentialGroup()
                        .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SelectionLayout.createSequentialGroup()
                                .addComponent(lblDate)
                                .addGap(18, 18, 18)
                                .addComponent(lblIncharge)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(lblParty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPartyCode, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SelectionLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(btnExportToExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(lblTotal_S)))
                        .addGap(0, 358, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelectionLayout.createSequentialGroup()
                    .addGap(488, 488, 488)
                    .addComponent(file_ETE, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        SelectionLayout.setVerticalGroup(
            SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblParty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPartyCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExportToExcel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTotal_S, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
            .addGroup(SelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(SelectionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(file_ETE, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(495, Short.MAX_VALUE)))
        );

        TabbedPane.addTab("Selection", Selection);

        Table_Pieces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table_Pieces.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Table_Pieces);

        btnExportToExcel_P.setText("Export To Excel");
        btnExportToExcel_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcel_PActionPerformed(evt);
            }
        });

        lblTotal_P.setText("Total : ");

        javax.swing.GroupLayout SelectedPiecesLayout = new javax.swing.GroupLayout(SelectedPieces);
        SelectedPieces.setLayout(SelectedPiecesLayout);
        SelectedPiecesLayout.setHorizontalGroup(
            SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectedPiecesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SelectedPiecesLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnExportToExcel_P, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(lblTotal_P)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(file_ETE_P, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE))
                .addContainerGap())
        );
        SelectedPiecesLayout.setVerticalGroup(
            SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectedPiecesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(SelectedPiecesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnExportToExcel_P)
                        .addComponent(lblTotal_P, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(file_ETE_P, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );

        TabbedPane.addTab("Selected Pieces", SelectedPieces);

        Table_History.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table_History.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(Table_History);

        btnExportToExcel_H.setText("Export To Excel");
        btnExportToExcel_H.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcel_HActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnExportToExcel_H, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(file_ETE_H, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExportToExcel_H, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(file_ETE_H, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );

        TabbedPane.addTab("Selection History", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbInchargeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInchargeItemStateChanged
        // TODO add your handling code here:
        FormatGrid();
        GenerateList();
    }//GEN-LAST:event_cmbInchargeItemStateChanged

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (!txtPartyCode.getText().trim().equals("")) {
            FormatGrid();
            GenerateList();
//            btnSave.setEnabled(true);
        } else {
//            btnSave.setEnabled(false);
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            String cndtn = "";
            if (!cmbIncharge.getSelectedItem().equals("ALL")) {
                cndtn = " AND I.INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
            }
            LOV aList = new LOV();
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,DISPATCH_STATION,CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS, INCHARGE_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER PM, PRODUCTION.FELT_INCHARGE I WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0 AND PM.INCHARGE_CD=I.INCHARGE_CD " + cndtn;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void btnExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_ETE.setVisible(true);
            int returnVal = file_ETE.showSaveDialog(this);
            if (returnVal == file_ETE.APPROVE_OPTION) {
                file = file_ETE.getSelectedFile();
            }
            file_ETE.setVisible(false);

            ExpToExcel.fillData(Table_Selection, new File(file_ETE.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExportToExcelActionPerformed

    private void Table_SelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_SelectionMouseClicked
        // TODO add your handling code here:     

        //            System.out.println("Clicked : "+(Table.getSelectedRow()+1)+" colum : "+Table.getSelectedColumn());
        String tick = Table_Selection.getValueAt(Table_Selection.getSelectedRow(), 0).toString();
        String pieceNo = Table_Selection.getValueAt(Table_Selection.getSelectedRow(), 2).toString();
        String partyCode = Table_Selection.getValueAt(Table_Selection.getSelectedRow(), 3).toString();
//            String incharge = Table_Selection.getValueAt(Table_Selection.getSelectedRow(), 7).toString();
        String pieceStage = Table_Selection.getValueAt(Table_Selection.getSelectedRow(), 6).toString();
//            String upn = Table_Selection.getValueAt(Table_Selection.getSelectedRow(), 9).toString();
//            String ipAdd = data.getStringValueFromDB("SELECT SUBSTRING_INDEX(USER(),'@',-1)");

        if (Table_Selection.getSelectedColumn() == 0) {

//            System.out.println("tick : "+tick);
            if (tick.equalsIgnoreCase("true")) {
                data.Execute("INSERT INTO PRODUCTION.FELT_DISPATCH_SELECTION_DATA_HISTORY (SELECTION_DATE, PIECE_NO, PARTY_CODE, INCHARGE_NAME, PIECE_STAGE, UPN, ENTRY_STATUS, ENTRY_TIME, USER_ID, IP_ADDRESS) "
                        + "VALUES (CURDATE(),'" + pieceNo + "','" + partyCode + "','','" + pieceStage + "','','ADD',NOW(),'" + EITLERPGLOBAL.gNewUserID + "',SUBSTRING_INDEX(USER(),'@',-1) ) ");
                if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA WHERE SELECTION_DATE=CURDATE() AND PIECE_NO='" + pieceNo + "'")) {
                    data.Execute("INSERT INTO PRODUCTION.FELT_DISPATCH_SELECTION_DATA (SELECTION_DATE, PIECE_NO, PARTY_CODE, INCHARGE_NAME, UPN, PIECE_STAGE) "
                            + "VALUES (CURDATE(),'" + pieceNo + "','" + partyCode + "','','','" + pieceStage + "') ");
                }

                AppletFrame aFrame = new AppletFrame("SDMLERP");
                aFrame.startAppletEx("EITLERP.FeltSales.DispatchPlanner.TickDiscChargeCode", "SDMLERP");
                EITLERP.FeltSales.DispatchPlanner.TickDiscChargeCode ObjItem = (EITLERP.FeltSales.DispatchPlanner.TickDiscChargeCode) aFrame.ObjApplet;
                ObjItem.showDiscChargeCode(pieceNo, partyCode);

            }
            if (tick.equalsIgnoreCase("false")) {
                data.Execute("INSERT INTO PRODUCTION.FELT_DISPATCH_SELECTION_DATA_HISTORY (SELECTION_DATE, PIECE_NO, PARTY_CODE, INCHARGE_NAME, PIECE_STAGE, UPN, ENTRY_STATUS, ENTRY_TIME, USER_ID, IP_ADDRESS) "
                        + "VALUES (CURDATE(),'" + pieceNo + "','" + partyCode + "','','" + pieceStage + "','','DELETE',NOW(),'" + EITLERPGLOBAL.gNewUserID + "',SUBSTRING_INDEX(USER(),'@',-1) ) ");
                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA WHERE SELECTION_DATE=CURDATE() AND PIECE_NO='" + pieceNo + "'")) {
                    data.Execute("DELETE FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA WHERE SELECTION_DATE=CURDATE() AND PIECE_NO='" + pieceNo + "' ");
                }
            }

            NoAmountTotal();
        }
    }//GEN-LAST:event_Table_SelectionMouseClicked

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged
        // TODO add your handling code here:
        if (TabbedPane.getTitleAt(TabbedPane.getSelectedIndex()).equals("Selection")) {
            FormatGrid();
            GenerateList();
        } else if (TabbedPane.getTitleAt(TabbedPane.getSelectedIndex()).equals("Selected Pieces")) {
            GeneratePiecesList();
        } else if (TabbedPane.getTitleAt(TabbedPane.getSelectedIndex()).equals("Selection History")) {
            GenerateHistoryList();
        } else {

        }
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void btnExportToExcel_PActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToExcel_PActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_ETE_P.setVisible(true);
            int returnVal = file_ETE_P.showSaveDialog(this);
            if (returnVal == file_ETE_P.APPROVE_OPTION) {
                file = file_ETE_P.getSelectedFile();
            }
            file_ETE_P.setVisible(false);

            ExpToExcel.fillData(Table_Pieces, new File(file_ETE_P.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExportToExcel_PActionPerformed

    private void btnExportToExcel_HActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToExcel_HActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_ETE_H.setVisible(true);
            int returnVal = file_ETE_H.showSaveDialog(this);
            if (returnVal == file_ETE_H.APPROVE_OPTION) {
                file = file_ETE_H.getSelectedFile();
            }
            file_ETE_H.setVisible(false);

            ExpToExcel.fillData(Table_History, new File(file_ETE_H.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExportToExcel_HActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SelectedPieces;
    private javax.swing.JPanel Selection;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTable Table_History;
    private javax.swing.JTable Table_Pieces;
    private javax.swing.JTable Table_Selection;
    private javax.swing.JButton btnExportToExcel;
    private javax.swing.JButton btnExportToExcel_H;
    private javax.swing.JButton btnExportToExcel_P;
    private javax.swing.JComboBox cmbIncharge;
    private javax.swing.JFileChooser file_ETE;
    private javax.swing.JFileChooser file_ETE_H;
    private javax.swing.JFileChooser file_ETE_P;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblIncharge;
    private javax.swing.JLabel lblParty;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotal_P;
    private javax.swing.JLabel lblTotal_S;
    private javax.swing.JTextField txtPartyCode;
    // End of variables declaration//GEN-END:variables

    private void InchargeCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        cmbIncharge.setModel(cmbInchargeModel);
        cmbInchargeModel.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbInchargeModel.addElement(aData);
        }

    }

    private void FormatGrid() {
        try {
            DataModel_Selection = new EITLTableModel();
            Table_Selection.removeAll();

            Table_Selection.setModel(DataModel_Selection);
            Table_Selection.setAutoResizeMode(0);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

            DataModel_Selection.addColumn("Select"); //0
            DataModel_Selection.addColumn("SrNo"); //1
            DataModel_Selection.addColumn("Piece No"); //2
            DataModel_Selection.addColumn("Party Code"); //3
            DataModel_Selection.addColumn("Party Name"); //4
//            DataModel_Selection.addColumn("Group"); //5
            DataModel_Selection.addColumn("Charge Code"); //6
//            DataModel_Selection.addColumn("Incharge"); //7
            DataModel_Selection.addColumn("Piece Stage"); //8
//            DataModel_Selection.addColumn("UPN"); //9
//            DataModel_Selection.addColumn("Product Code"); //10
//            DataModel_Selection.addColumn("Product Group"); //11
            DataModel_Selection.addColumn("MC No"); //12
            DataModel_Selection.addColumn("Position Desc"); //13
//            DataModel_Selection.addColumn("Amount"); //14

            Renderer.setCustomComponent(0, "CheckBox");
            Table_Selection.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Table_Selection.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            DataModel_Selection.SetVariable(0, "SELECTED_FLAG"); //0
            DataModel_Selection.SetVariable(1, "SR_NO"); //1
            DataModel_Selection.SetVariable(2, "PIECE_NO"); //2
            DataModel_Selection.SetVariable(3, "PARTY_CODE"); //3
            DataModel_Selection.SetVariable(4, "PARTY_NAME"); //4
//            DataModel_Selection.SetVariable(5, "GROUP_NAME"); //5
            DataModel_Selection.SetVariable(5, "CHARGE_CODE"); //6
//            DataModel_Selection.SetVariable(7, "INCHARGE_NAME"); //7
            DataModel_Selection.SetVariable(6, "PIECE_STAGE"); //8
//            DataModel_Selection.SetVariable(9, "UPN"); //9
//            DataModel_Selection.SetVariable(10, "PRODUCT_CODE"); //10
//            DataModel_Selection.SetVariable(11, "PRODUCT_GROUP"); //11
            DataModel_Selection.SetVariable(7, "MACHINE_NO"); //12
            DataModel_Selection.SetVariable(8, "POSITION_DESC"); //13
//            DataModel_Selection.SetVariable(14, "AMOUNT"); //14

            for (int a = 1; a <= 14; a++) {
                DataModel_Selection.SetReadOnly(a);
            }

            Table_Selection.getColumnModel().getColumn(0).setMinWidth(50);
            Table_Selection.getColumnModel().getColumn(0).setMaxWidth(50);
            Table_Selection.getColumnModel().getColumn(1).setMinWidth(50);
            Table_Selection.getColumnModel().getColumn(1).setMaxWidth(50);
            Table_Selection.getColumnModel().getColumn(2).setMinWidth(80);
            Table_Selection.getColumnModel().getColumn(2).setMaxWidth(80);
            Table_Selection.getColumnModel().getColumn(3).setMinWidth(80);
            Table_Selection.getColumnModel().getColumn(3).setMaxWidth(80);
            Table_Selection.getColumnModel().getColumn(4).setMinWidth(150);
//            Table_Selection.getColumnModel().getColumn(5).setMinWidth(100);
//            Table_Selection.getColumnModel().getColumn(5).setMaxWidth(100);
            Table_Selection.getColumnModel().getColumn(5).setMinWidth(50);//6
            Table_Selection.getColumnModel().getColumn(5).setMaxWidth(50);//6
//            Table_Selection.getColumnModel().getColumn(7).setMinWidth(80);
////            Table.getColumnModel().getColumn(7).setMaxWidth(80);
            Table_Selection.getColumnModel().getColumn(6).setMinWidth(80);//8
//            Table.getColumnModel().getColumn(6).setMaxWidth(80);//8
//            Table_Selection.getColumnModel().getColumn(9).setMinWidth(120);
//            Table_Selection.getColumnModel().getColumn(9).setMaxWidth(120);
//            Table_Selection.getColumnModel().getColumn(10).setMinWidth(65);
//            Table_Selection.getColumnModel().getColumn(10).setMaxWidth(65);
//            Table_Selection.getColumnModel().getColumn(11).setMinWidth(80);
//            Table_Selection.getColumnModel().getColumn(11).setMaxWidth(80);
            Table_Selection.getColumnModel().getColumn(7).setMinWidth(50);//12
            Table_Selection.getColumnModel().getColumn(7).setMaxWidth(50);//12
            Table_Selection.getColumnModel().getColumn(8).setMinWidth(120);//13
//            Table_Selection.getColumnModel().getColumn(14).setMinWidth(120);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateList() {
        String sql = "";
        String cndtn = "";
        if (!cmbIncharge.getSelectedItem().equals("ALL")) {
            cndtn += " AND INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
        }
        if (!txtPartyCode.getText().trim().equals("")) {
            cndtn += " AND PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
        }

        try {

            sql = "SELECT PR_PIECE_NO,PR_PARTY_CODE,PARTY_NAME,GROUP_DESC,CHARGE_CODE,INCHARGE_NAME,PR_PIECE_STAGE,PR_UPN,PR_MACHINE_NO,POSITION_DESC, "
                    + "PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_FELT_VALUE_WITH_GST "
                    + "FROM (SELECT PR_PIECE_NO,PR_PARTY_CODE,PARTY_NAME,CHARGE_CODE,INCHARGE_NAME,PR_PIECE_STAGE,PR_UPN,PR_MACHINE_NO,POSITION_DESC, "
                    + "PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_FELT_VALUE_WITH_GST "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR, DINESHMILLS.D_SAL_PARTY_MASTER PM, PRODUCTION.FELT_INCHARGE I, PRODUCTION.FELT_MACHINE_POSITION_MST PO "
                    + "WHERE PR.PR_PARTY_CODE=PM.PARTY_CODE AND PR.PR_PIECE_STAGE IN ('FINISHING','IN STOCK','BSR') AND PM.INCHARGE_CD=I.INCHARGE_CD "
                    + "AND PR.PR_POSITION_NO=PO.POSITION_NO AND COALESCE(PR.PR_DELINK,'') NOT IN ('OBSOLETE') " + cndtn + ") AS DE "
                    + "LEFT JOIN (SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE AND H.APPROVED=1 AND H.CANCELED=0) AS GM "
                    + "ON DE.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                    + "ORDER BY INCHARGE_NAME,PR_PARTY_CODE,PR_PIECE_NO";
//            System.out.println("sql : " + sql);

            ResultSet rsTmp = data.getResult(sql);
            rsTmp.first();
            int p = 0;
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    p = 0;
                    Object[] rowData = new Object[50];
//                    rowData[p] = false;
//                    p++;
                    if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA WHERE SELECTION_DATE=CURDATE() AND PIECE_NO='" + rsTmp.getString("PR_PIECE_NO") + "'")) {
                        rowData[p] = true;
                        p++;
                    } else {
                        rowData[p] = false;
                        p++;
                    }
                    rowData[p] = Integer.toString(cnt);
                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("PR_PARTY_CODE");
                    p++;
                    rowData[p] = rsTmp.getString("PARTY_NAME");
                    p++;
//                    rowData[p] = rsTmp.getString("GROUP_DESC");
//                    p++;
                    rowData[p] = rsTmp.getString("CHARGE_CODE");
                    p++;
//                    rowData[p] = rsTmp.getString("INCHARGE_NAME");
//                    p++;
                    rowData[p] = rsTmp.getString("PR_PIECE_STAGE");
                    p++;
//                    rowData[p] = rsTmp.getString("PR_UPN");
//                    p++;
//                    rowData[p] = rsTmp.getString("PR_BILL_PRODUCT_CODE");
//                    p++;
//                    rowData[p] = rsTmp.getString("PR_GROUP");
//                    p++;
                    rowData[p] = rsTmp.getString("PR_MACHINE_NO");
                    p++;
                    rowData[p] = rsTmp.getString("POSITION_DESC");
                    p++;
//                    rowData[p] = EITLERPGLOBAL.round(rsTmp.getDouble("PR_FELT_VALUE_WITH_GST"), 0);
//                    p++;
//                    FeltInvCalc inv_calc;
//                    try {
//                        inv_calc = clsOrderValueCalc.calculateWithoutGSTINNO(
//                                rsTmp.getString("PR_PIECE_NO"),
//                                rsTmp.getString("PR_BILL_PRODUCT_CODE"),
//                                rsTmp.getString("PR_PARTY_CODE"),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_LENGTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WIDTH")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_WEIGHT")),
//                                Float.parseFloat(rsTmp.getString("PR_BILL_SQMTR")),
//                                EITLERPGLOBAL.getCurrentDateDB());
//
//                        rowData[p] = EITLERPGLOBAL.round(inv_calc.getFicInvAmt(),0);
//                        p++;
//                    } catch (Exception e) {
//                        System.out.println("Erro on PIECE REGISTER : " + e.getMessage());
//                    }

                    DataModel_Selection.addRow(rowData);
                    rsTmp.next();
                }
            }
            NoAmountTotal();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GeneratePiecesList() {
        String cndtn = "";
        if (!cmbIncharge.getSelectedItem().equals("ALL")) {
            cndtn += " AND I.INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
        }
        if (!txtPartyCode.getText().trim().equals("")) {
            cndtn += " AND DS.PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
        }
        String sql;
        sql = "SELECT '' AS 'SrNo',PR_PIECE_NO AS 'Piece No',"
                + "CASE WHEN DISCOUNT_CHECK=1 THEN 'Tick' ELSE '' END AS 'Disc Check',"
                + "CASE WHEN CHARGE_CODE_CHECK=1 THEN 'Tick' ELSE '' END AS 'ChargeCode Check',"
                + "PR_PARTY_CODE AS 'Party Code',PARTY_NAME AS 'Party Name',GROUP_DESC AS 'Group',CHARGE_CODE AS 'Charge Code',"
                + "INCHARGE_NAME AS 'Incharge',PR_PIECE_STAGE AS 'Piece Stage',PR_UPN AS 'UPN',PR_BILL_PRODUCT_CODE AS 'Product Code',PR_GROUP AS 'Product Group',PR_MACHINE_NO AS 'MC No',POSITION_DESC AS 'Position Desc',PR_FELT_VALUE_WITH_GST AS 'Amount' FROM "
                + "(SELECT PR_PIECE_NO,PR_PARTY_CODE,PARTY_NAME,GROUP_DESC,CHARGE_CODE,INCHARGE_NAME,PR_PIECE_STAGE,PR_UPN,PR_BILL_PRODUCT_CODE,PR_GROUP,PR_MACHINE_NO,POSITION_DESC,PR_FELT_VALUE_WITH_GST,DISCOUNT_CHECK,CHARGE_CODE_CHECK "
                + "FROM (SELECT PR_PIECE_NO,PR_PARTY_CODE,PARTY_NAME,CHARGE_CODE,I.INCHARGE_NAME,PR_PIECE_STAGE,PR_UPN,PR_MACHINE_NO,POSITION_DESC, "
                + "PR_BILL_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_FELT_VALUE_WITH_GST,DISCOUNT_CHECK,CHARGE_CODE_CHECK "
                + "FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA DS, PRODUCTION.FELT_SALES_PIECE_REGISTER PR, DINESHMILLS.D_SAL_PARTY_MASTER PM, PRODUCTION.FELT_INCHARGE I, PRODUCTION.FELT_MACHINE_POSITION_MST PO "
                + "WHERE DS.PIECE_NO=PR.PR_PIECE_NO AND DS.SELECTION_DATE=CURDATE() AND PR.PR_PARTY_CODE=PM.PARTY_CODE AND PM.INCHARGE_CD=I.INCHARGE_CD "
                + "AND PR.PR_POSITION_NO=PO.POSITION_NO " + cndtn + ") AS DE "
                + "LEFT JOIN (SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D "
                + "WHERE H.GROUP_CODE=D.GROUP_CODE AND H.APPROVED=1 AND H.CANCELED=0) AS GM "
                + "ON DE.PR_PARTY_CODE=GM.GROUP_PARTY_CODE "
                + "ORDER BY INCHARGE_NAME,PR_PARTY_CODE,PR_PIECE_NO"
                + ") AS FINAL";
//        System.out.println("sql : " + sql);

        Table_Pieces.setEnabled(true);
        ResultSet rs = data.getResult(sql);
        try {
            rs.first();
            if (rs.getRow() > 0) {
                DataModel_Pieces = new EITLTableModel();
                Table_Pieces.removeAll();

                Table_Pieces.setModel(DataModel_Pieces);
                Table_Pieces.setAutoResizeMode(0);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                DataModel_Pieces.ClearAllReadOnly();
                DataModel_Pieces.SetReadOnly(0);

                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel_Pieces.addColumn(rsInfo.getColumnName(i));
                    DataModel_Pieces.SetReadOnly(i);
                }
                int m = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(m);
                    rowData[1] = rs.getString(2);
                    rowData[2] = rs.getBoolean(3);
                    rowData[3] = rs.getBoolean(4);
                    for (int k = 4; k < (i - 1); k++) {
                        rowData[k] = rs.getString(k + 1);
                    }
                    DataModel_Pieces.addRow(rowData);
                    rs.next();
                    m++;
                }
                final TableColumnModel columnModel = Table_Pieces.getColumnModel();
                for (int column = 0; column < Table_Pieces.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_Pieces.getRowCount(); row++) {
                        TableCellRenderer renderer_pieces = Table_Pieces.getCellRenderer(row, column);
                        Component comp = Table_Pieces.prepareRenderer(renderer_pieces, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 150) {
                        width = 150;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                EITLTableCellRenderer RendererDisc = new EITLTableCellRenderer();
                RendererDisc.setCustomComponent(2, "CheckBox");
                Table_Pieces.getColumnModel().getColumn(2).setCellRenderer(RendererDisc);
                Table_Pieces.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(new JCheckBox()));
                
                EITLTableCellRenderer RendererCharge = new EITLTableCellRenderer();
                RendererCharge.setCustomComponent(3, "CheckBox");
                Table_Pieces.getColumnModel().getColumn(3).setCellRenderer(RendererCharge);
                Table_Pieces.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JCheckBox()));
//                Table_Pieces.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer());
//                Table_Pieces.getTableHeader().setPreferredSize(new Dimension(Table_Pieces.getColumnModel().getTotalColumnWidth(), 100));
                DataModel_Pieces.TableReadOnly(true);
            } else {
                for (int i = DataModel_Pieces.getRowCount() - 1; i >= 0; i--) {
                    DataModel_Pieces.removeRow(i);
                }
            }
            NoAmountTotal();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateHistoryList() {
        String cndtn = "";
        if (!cmbIncharge.getSelectedItem().equals("ALL")) {
            cndtn += " AND I.INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
        }
        if (!txtPartyCode.getText().trim().equals("")) {
            cndtn += " AND DH.PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
        }
        String sql;
        sql = "SELECT '' AS 'SrNo',PIECE_NO AS 'Piece No',PARTY_CODE AS 'Party Code',PARTY_NAME AS 'Party Name',GROUP_DESC AS 'Group',CHARGE_CODE AS 'Charge Code',"
                + "INCHARGE_NAME AS 'Incharge',PIECE_STAGE AS 'Piece Stage',UPN AS 'UPN',ENTRY_STATUS AS 'Type',ENTRY_TIME AS 'DateTime' FROM "
                + "(SELECT PIECE_NO,PARTY_CODE,PARTY_NAME,GROUP_DESC,CHARGE_CODE,INCHARGE_NAME,PIECE_STAGE,UPN,ENTRY_STATUS,ENTRY_TIME "
                + "FROM (SELECT PIECE_NO,DH.PARTY_CODE,PARTY_NAME,CHARGE_CODE,I.INCHARGE_NAME,PIECE_STAGE,UPN,ENTRY_STATUS,ENTRY_TIME "
                + "FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA_HISTORY DH, DINESHMILLS.D_SAL_PARTY_MASTER PM, PRODUCTION.FELT_INCHARGE I "
                + "WHERE DH.SELECTION_DATE=CURDATE() AND DH.PARTY_CODE=PM.PARTY_CODE AND PM.INCHARGE_CD=I.INCHARGE_CD " + cndtn + ") AS DE "
                + "LEFT JOIN (SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D "
                + "WHERE H.GROUP_CODE=D.GROUP_CODE AND H.APPROVED=1 AND H.CANCELED=0) AS GM "
                + "ON DE.PARTY_CODE=GM.GROUP_PARTY_CODE "
                + "ORDER BY INCHARGE_NAME,PARTY_CODE,PIECE_NO,ENTRY_TIME"
                + ") AS FINAL";
//        System.out.println("sql : " + sql);

        Table_History.setEnabled(true);
        ResultSet rs = data.getResult(sql);
        try {
            rs.first();
            if (rs.getRow() > 0) {
                DataModel_History = new EITLTableModel();
                Table_History.removeAll();

                Table_History.setModel(DataModel_History);
                Table_History.setAutoResizeMode(0);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                DataModel_History.ClearAllReadOnly();
                DataModel_History.SetReadOnly(0);

                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel_History.addColumn(rsInfo.getColumnName(i));
                    DataModel_History.SetReadOnly(i);
                }
                int m = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(m);
                    for (int k = 1; k < (i - 1); k++) {
                        rowData[k] = rs.getString(k + 1);
                    }
                    DataModel_History.addRow(rowData);
                    rs.next();
                    m++;
                }
                final TableColumnModel columnModel = Table_History.getColumnModel();
                for (int column = 0; column < Table_History.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table_History.getRowCount(); row++) {
                        TableCellRenderer renderer_history = Table_History.getCellRenderer(row, column);
                        Component comp = Table_History.prepareRenderer(renderer_history, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 150) {
                        width = 150;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
//                Table_History.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer());
//                Table_History.getTableHeader().setPreferredSize(new Dimension(Table_History.getColumnModel().getTotalColumnWidth(), 100));
                DataModel_History.TableReadOnly(true);
            } else {
                for (int i = DataModel_History.getRowCount() - 1; i >= 0; i--) {
                    DataModel_History.removeRow(i);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void NoAmountTotal() {
        try {
            String cndtn = "";
            if (!cmbIncharge.getSelectedItem().equals("ALL")) {
                cndtn += " AND INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
            }
            if (!txtPartyCode.getText().trim().equals("")) {
                cndtn += " AND PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
            }
            ResultSet rsTotal = data.getResult("SELECT COUNT(PIECE_NO) AS T_PIECES,COALESCE(SUM(ROUND(PR_FELT_VALUE_WITH_GST)),0) AS T_AMOUNT FROM PRODUCTION.FELT_DISPATCH_SELECTION_DATA, PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PIECE_NO=PR_PIECE_NO AND SELECTION_DATE=CURDATE() " + cndtn);
            rsTotal.first();
            lblTotal_S.setText("Total no of Pieces : " + rsTotal.getString("T_PIECES") + "   and   Amount : " + rsTotal.getString("T_AMOUNT"));
            lblTotal_P.setText("Total no of Pieces : " + rsTotal.getString("T_PIECES") + "   and   Amount : " + rsTotal.getString("T_AMOUNT"));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
