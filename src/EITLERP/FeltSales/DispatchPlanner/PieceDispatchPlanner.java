/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.DispatchPlanner;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.GroupMasterAmend.clsFeltGroupMasterAmend;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.LOV;
import EITLERP.clsSales_Party;
import EITLERP.data;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author root
 */
public class PieceDispatchPlanner extends javax.swing.JApplet {

    public EITLERP.FeltSales.Reports.clsExcelExporter export = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private EITLTableModel DataModelUnclear = new EITLTableModel();
    private EITLTableModel DataModelClear = new EITLTableModel();
    private EITLTableModel DataModelInvoiced = new EITLTableModel();
    private EITLComboModel cmbInchargeModel = new EITLComboModel();

    /**
     * Initializes the applet PieceDispatchPlanner
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
         try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         if ("Nimbus".equals(info.getName())) {
         javax.swing.UIManager.setLookAndFeel(info.getClassName());
         break;
         }
         }
         } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(PieceDispatchPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(PieceDispatchPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(PieceDispatchPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(PieceDispatchPlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }
         */
        //</editor-fold>

        /* Create and display the applet */
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(1000, 740);
        initComponents();
        jLabel1.setForeground(Color.WHITE);
        jLabel12.setVisible(false);
        jLabel13.setVisible(false);
        jLabel14.setVisible(false);
        txtTotalUnclear.setVisible(false);
        txtTotalClear.setVisible(false);
        txtTotalInvoiced.setVisible(false);
        GenerateInchargeCombo();
        GenerateUnclear();
        GenerateClear();
        GenerateInvoiced();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbtnGrpCH = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        txtpartyind = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtgroupcode = new javax.swing.JTextField();
        txtgroupname = new javax.swing.JTextField();
        jLabel76 = new javax.swing.JLabel();
        INCHARGE = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CH01 = new javax.swing.JRadioButton();
        CH02 = new javax.swing.JRadioButton();
        CH04 = new javax.swing.JRadioButton();
        CH07 = new javax.swing.JRadioButton();
        CH08 = new javax.swing.JRadioButton();
        CH09 = new javax.swing.JRadioButton();
        CHF6 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableUnclear = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableClear = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableInvoiced = new javax.swing.JTable();
        btnETEUnclear = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtTotalUnclear = new javax.swing.JTextField();
        btnETEClear = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtTotalClear = new javax.swing.JTextField();
        btnETEInvoiced = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtTotalInvoiced = new javax.swing.JTextField();
        CHALL = new javax.swing.JRadioButton();

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Piece Dispatch Planner (Daywise)");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Party Code");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new EITLERP.JTextFieldHint(new JTextField(),"Press F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        txtpartyname.setDisabledTextColor(java.awt.Color.black);
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });

        txtpartyind.setDisabledTextColor(java.awt.Color.black);
        txtpartyind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartyindActionPerformed(evt);
            }
        });

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Group Code");

        txtgroupcode.setToolTipText("Press F1 key for search Party Code");
        txtgroupcode = new EITLERP.JTextFieldHint(new JTextField(),"Press F1");
        txtgroupcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtgroupcodeFocusLost(evt);
            }
        });
        txtgroupcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtgroupcodeKeyPressed(evt);
            }
        });

        txtgroupname.setDisabledTextColor(java.awt.Color.black);
        txtgroupname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtgroupnameActionPerformed(evt);
            }
        });

        jLabel76.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel76.setText("  Incharge");

        INCHARGE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Sales Eng 1", "Sales Eng 2", "Sales Eng 3" }));

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Charge Code");

        rbtnGrpCH.add(CH01);
        CH01.setText("01");

        rbtnGrpCH.add(CH02);
        CH02.setText("02");

        rbtnGrpCH.add(CH04);
        CH04.setText("04");

        rbtnGrpCH.add(CH07);
        CH07.setText("07");

        rbtnGrpCH.add(CH08);
        CH08.setText("08");

        rbtnGrpCH.add(CH09);
        CH09.setText("09");

        rbtnGrpCH.add(CHF6);
        CHF6.setText("F6");

        jLabel4.setText("    Unclear ");

        TableUnclear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableUnclear);

        jLabel5.setText("    Clear");

        TableClear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableClear);

        jLabel6.setText("    Invoiced");

        TableInvoiced.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableInvoiced);

        btnETEUnclear.setText("Export to Excel");
        btnETEUnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETEUnclearActionPerformed(evt);
            }
        });

        jLabel12.setText(" TOTAL VALUE ");

        btnETEClear.setText("Export to Excel");
        btnETEClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETEClearActionPerformed(evt);
            }
        });

        jLabel13.setText(" TOTAL VALUE ");

        btnETEInvoiced.setText("Export to Excel");
        btnETEInvoiced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnETEInvoicedActionPerformed(evt);
            }
        });

        jLabel14.setText(" TOTAL VALUE ");

        rbtnGrpCH.add(CHALL);
        CHALL.setSelected(true);
        CHALL.setText("All");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(txtpartyname, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtpartyind, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtgroupcode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(txtgroupname, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel76)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(INCHARGE, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1243, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(CH01)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CH02)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CH04)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CH07)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CH08)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CH09)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CHF6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CHALL)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnETEUnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(txtTotalUnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(105, 105, 105))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnETEClear, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(txtTotalClear, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(105, 105, 105))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnETEInvoiced, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(txtTotalInvoiced, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(105, 105, 105))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtpartycode, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtpartyname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtpartyind, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtgroupcode, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtgroupname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(INCHARGE, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CH01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(CH02)
                    .addComponent(CH04)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CH07)
                        .addComponent(CH08))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CH09)
                        .addComponent(CHF6)
                        .addComponent(CHALL)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnETEUnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalUnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnETEClear, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalClear, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnETEInvoiced, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalInvoiced, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
        //        if (!txtpartycode.getText().trim().equals("")) {
        if (!txtpartycode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText().trim() + "' AND MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0")) {
            txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));
            //            int Ind = data.getIntValueFromDB("SELECT PARTY_CLOSE_IND FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText() + "' ");
            ////                    clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, txtpartycode.getText());
            //
            //            if (Ind == 1) {
            //                txtpartyind.setText("Closed");
            //            } else {
            //                txtpartyind.setText("Active");
            //            }
            //            txtpartyind.setText(clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));
            //        }
            String pStatus = data.getStringValueFromDB("SELECT CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText() + "' ");
            txtpartyind.setText(pStatus);
        } else {
            if (!txtpartycode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Party Code doesn't exist/under approval.");
            }
            txtpartycode.setText("");
            txtpartyname.setText("");
            txtpartyind.setText("");
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 ";
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,DISPATCH_STATION,CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                //                int Ind = data.getIntValueFromDB("SELECT PARTY_CLOSE_IND FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' ");
                ////                clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, aList.ReturnVal);
                //                if (Ind == 1) {
                //                    txtpartyind.setText("Closed");
                //                } else {
                //                    txtpartyind.setText("Active");
                //                }
                //                txtpartyind.setText(clsSales_Party.getPartyCloseInd(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                String pStatus = data.getStringValueFromDB("SELECT CASE WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =0  AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'IN-ACTIVE' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 2 THEN 'TEMPORARY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =0 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 0 THEN 'PERMANENTLY CLOSED' WHEN COALESCE(PARTY_CLOSE_IND,0) =1 AND COALESCE(PARTY_CLOSE_INACTIVE_IND,0) =1 AND COALESCE(PARTY_MILL_CLOSED_IND,0) = 1 THEN 'PERMANENTLY CLOSED' END AS PARTY_STATUS FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' ");
                txtpartyind.setText(pStatus);
            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartynameActionPerformed

    private void txtpartyindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartyindActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartyindActionPerformed

    private void txtgroupcodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtgroupcodeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgroupcodeFocusLost

    private void txtgroupcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtgroupcodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT GROUP_CODE,GROUP_DESC FROM PRODUCTION.FELT_GROUP_MASTER_HEADER WHERE APPROVED=1 AND CANCELED=0 ORDER BY GROUP_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                txtgroupcode.setText(aList.ReturnVal);
                txtgroupname.setText(clsFeltGroupMasterAmend.getgroupdesc(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtgroupcodeKeyPressed

    private void txtgroupnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtgroupnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtgroupnameActionPerformed

    private void btnETEUnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETEUnclearActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            export.fillData(TableUnclear, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETEUnclearActionPerformed

    private void btnETEClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETEClearActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            export.fillData(TableClear, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETEClearActionPerformed

    private void btnETEInvoicedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnETEInvoicedActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            export.fillData(TableInvoiced, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnETEInvoicedActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        txtTotalUnclear.setText("");
        txtTotalClear.setText("");
        txtTotalInvoiced.setText("");
        GenerateUnclear();
        GenerateClear();
        GenerateInvoiced();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton CH01;
    private javax.swing.JRadioButton CH02;
    private javax.swing.JRadioButton CH04;
    private javax.swing.JRadioButton CH07;
    private javax.swing.JRadioButton CH08;
    private javax.swing.JRadioButton CH09;
    private javax.swing.JRadioButton CHALL;
    private javax.swing.JRadioButton CHF6;
    private javax.swing.JComboBox INCHARGE;
    private javax.swing.JTable TableClear;
    private javax.swing.JTable TableInvoiced;
    private javax.swing.JTable TableUnclear;
    private javax.swing.JButton btnETEClear;
    private javax.swing.JButton btnETEInvoiced;
    private javax.swing.JButton btnETEUnclear;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.ButtonGroup rbtnGrpCH;
    private javax.swing.JTextField txtTotalClear;
    private javax.swing.JTextField txtTotalInvoiced;
    private javax.swing.JTextField txtTotalUnclear;
    private javax.swing.JTextField txtgroupcode;
    private javax.swing.JTextField txtgroupname;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyind;
    private javax.swing.JTextField txtpartyname;
    // End of variables declaration//GEN-END:variables

    private void GenerateInchargeCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        INCHARGE.setModel(cmbInchargeModel);
        cmbInchargeModel.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbInchargeModel.addElement(aData);
        }

    }

    private void GenerateUnclear() {
        String sql = "";
        String cndtn = "";
        ResultSet rs;
        DataModelUnclear = new EITLTableModel();
        TableUnclear.removeAll();
        TableUnclear.setModel(DataModelUnclear);
        TableUnclear.setAutoResizeMode(TableUnclear.AUTO_RESIZE_OFF);

        try {
            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PARTY_CODE = '" + txtpartycode.getText().trim() + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn = " AND PARTY_GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!INCHARGE.getSelectedItem().toString().trim().equals("ALL")) {
                cndtn = " AND INCHARGE_AREA= '" + INCHARGE.getSelectedItem().toString().trim() + "' ";
            }

            if (CH01.isSelected()) {
                cndtn += " AND CHARGE_CODE = '01' ";
            }
            if (CH02.isSelected()) {
                cndtn += " AND CHARGE_CODE = '02' ";
            }
            if (CH04.isSelected()) {
                cndtn += " AND CHARGE_CODE = '04' ";
            }
            if (CH07.isSelected()) {
                cndtn += " AND CHARGE_CODE = '07' ";
            }
            if (CH08.isSelected()) {
                cndtn += " AND CHARGE_CODE = '08' ";
            }
            if (CH09.isSelected()) {
                cndtn += " AND CHARGE_CODE = '09' ";
            }
            if (CHF6.isSelected()) {
                cndtn += " AND CHARGE_CODE != PARTY_CHARGE_CODE ";
            }

            sql = "";
//            sql += "SELECT * ";
            sql += "SELECT @a:=@a+1 AS 'SrNo', PIECE_STATUS AS 'Status', PIECE_NO AS 'Piece No', PARTY_CODE AS 'Party Code', PARTY_NAME AS 'Name', "
                    + "CASE WHEN COALESCE(FINISHING_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(FINISHING_DATE, \"%d/%m/%Y\") END AS 'Finishing Date', "
                    + "PACKING_NO AS 'Packing No', "
                    + "CASE WHEN COALESCE(PACKING_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PACKING_DATE, \"%d/%m/%Y\") END AS 'Packing Date', "
                    + "PACKING_PENDING_USER AS 'Packing Pending Under', BALE_NO AS 'Bale No', "
                    + "CASE WHEN COALESCE(BALE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(BALE_DATE, \"%d/%m/%Y\") END AS 'Bale Date', "
                    + "ROUND(INVOICE_AMT,0) AS 'Felt Amt', CHECK_POINT_REMARK AS 'Reason',CLEAR_TO_UNCLEAR_REMARK, "
                    + "PARTY_UPDATION_PENDING_USER AS 'Party Updation Pending Under', DISCOUNT_UPDATION_PENDING_USER AS 'Disc Pending Under', ";
            if (CH01.isSelected() || CHALL.isSelected()) {

            }
            if (CH02.isSelected() || CH04.isSelected() || CH08.isSelected() || CHALL.isSelected()) {
                sql += "PDC_NO AS 'PDC No', "
                        + "CASE WHEN COALESCE(PDC_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PDC_DATE, \"%d/%m/%Y\") END AS 'PDC Date', "
                        + "PDC_PENDING_USER AS 'PDC Pending Under', "
                        + "GROUP_CRITICAL_LIMIT_ENHANCHMENT_NO AS 'Grp Enhancement No', "
                        + "CASE WHEN COALESCE(GROUP_CRITICAL_LIMIT_ENHANCHMENT_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(GROUP_CRITICAL_LIMIT_ENHANCHMENT_DATE, \"%d/%m/%Y\") END AS 'Grp Enhancement Date', "
                        + "GROUP_CRITICAL_LIMIT_ENHANCHMENT_PENDING_USER AS 'Grp Enhancement Pending Under', "
                        + "INVOICE_PARAMETER_MODIFICATION_NO AS 'Parameter Modification No', "
                        + "CASE WHEN COALESCE(INVOICE_PARAMETER_MODIFICATION_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(INVOICE_PARAMETER_MODIFICATION_DATE, \"%d/%m/%Y\") END AS 'Parameter Modification Date', "
                        + "INVOICE_PARAMETER_MODIFICATION_PENDING_USER AS 'Parameter Modification Pending Under', "
                        + "OUT_STANDING_AMT AS 'Outstanding', ";
            }
            if (CH09.isSelected() || CHALL.isSelected()) {
                sql += "ADV_AMT AS '09 Balance', ";
            }
            if (CH07.isSelected() || CHALL.isSelected()) {
                sql += "LC_NO AS 'LC No', "
                        + "CASE WHEN COALESCE(LC_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(LC_DATE, \"%d/%m/%Y\") END AS 'LC Date', "
                        + "LC_PENDING_USER AS 'LC Pending Under', ";
            }
            if (CHF6.isSelected()) {
                sql += "INVOICE_PARAMETER_MODIFICATION_NO AS 'Parameter Modification No', "
                        + "CASE WHEN COALESCE(INVOICE_PARAMETER_MODIFICATION_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(INVOICE_PARAMETER_MODIFICATION_DATE, \"%d/%m/%Y\") END AS 'Parameter Modification Date', "
                        + "INVOICE_PARAMETER_MODIFICATION_PENDING_USER AS 'Parameter Modification Pending Under', ";
            }
            sql += "CHARGE_CODE AS 'Charge Code', PIECE_UPN AS 'UPN', PIECE_STAGE AS 'Piece Stage', PARTY_GROUP_CODE AS 'Group Code', PARTY_GROUP_NAME AS 'Group Name', PRODUCT_CODE AS 'Product Code', GROUP_NAME AS 'Group_', "
                    + "POSITION_DESC AS 'Position Desc', ACTUAL_LENGTH AS 'Length', ACTUAL_WIDTH AS 'Width', GSM AS 'GSM', SQMTR AS 'SqMtr', ACTUAL_WEIGHT AS 'Weight', DISC_PER AS 'Disc Per' ";
            sql += "FROM (SELECT * FROM PRODUCTION.FELT_DISPATCH_PIECE_DETAIL_DATA WHERE PIECE_STATUS='UNCLEAR' " + cndtn + " ) AS Z ,(select @a:=0) as a ";

//            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelUnclear.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
//            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[500];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelUnclear.addRow(rowData);
                    rs.next();
                }
            }
            DataModelUnclear.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateClear() {
        String sql = "";
        String cndtn = "";
        ResultSet rs;
        DataModelClear = new EITLTableModel();
        TableClear.removeAll();
        TableClear.setModel(DataModelClear);
        TableClear.setAutoResizeMode(TableClear.AUTO_RESIZE_OFF);

        try {
            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PARTY_CODE = '" + txtpartycode.getText().trim() + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn = " AND PARTY_GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!INCHARGE.getSelectedItem().toString().trim().equals("ALL")) {
                cndtn = " AND INCHARGE_AREA= '" + INCHARGE.getSelectedItem().toString().trim() + "' ";
            }

            if (CH01.isSelected()) {
                cndtn += " AND CHARGE_CODE = '01' ";
            }
            if (CH02.isSelected()) {
                cndtn += " AND CHARGE_CODE = '02' ";
            }
            if (CH04.isSelected()) {
                cndtn += " AND CHARGE_CODE = '04' ";
            }
            if (CH07.isSelected()) {
                cndtn += " AND CHARGE_CODE = '07' ";
            }
            if (CH08.isSelected()) {
                cndtn += " AND CHARGE_CODE = '08' ";
            }
            if (CH09.isSelected()) {
                cndtn += " AND CHARGE_CODE = '09' ";
            }
            if (CHF6.isSelected()) {
                cndtn += " AND CHARGE_CODE != PARTY_CHARGE_CODE ";
            }

            sql = "";
//            sql += "SELECT * ";
            sql += "SELECT @a:=@a+1 AS 'SrNo', PIECE_STATUS AS 'Status', PIECE_NO AS 'Piece No', PARTY_CODE AS 'Party Code', PARTY_NAME AS 'Name', "
                    + "CASE WHEN COALESCE(FINISHING_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(FINISHING_DATE, \"%d/%m/%Y\") END AS 'Finishing Date', "
                    + "PACKING_NO AS 'Packing No', "
                    + "CASE WHEN COALESCE(PACKING_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PACKING_DATE, \"%d/%m/%Y\") END AS 'Packing Date', "
                    + "PACKING_PENDING_USER AS 'Packing Pending Under', BALE_NO AS 'Bale No', "
                    + "CASE WHEN COALESCE(BALE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(BALE_DATE, \"%d/%m/%Y\") END AS 'Bale Date', "
                    + "ROUND(INVOICE_AMT,0) AS 'Felt Amt', CHECK_POINT_REMARK AS 'Reason', "
                    + "PARTY_UPDATION_PENDING_USER AS 'Party Updation Pending Under', DISCOUNT_UPDATION_PENDING_USER AS 'Disc Pending Under', ";
            if (CH01.isSelected() || CHALL.isSelected()) {

            }
            if (CH02.isSelected() || CH04.isSelected() || CH08.isSelected() || CHALL.isSelected()) {
                sql += "PDC_NO AS 'PDC No', "
                        + "CASE WHEN COALESCE(PDC_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PDC_DATE, \"%d/%m/%Y\") END AS 'PDC Date', "
                        + "PDC_PENDING_USER AS 'PDC Pending Under', "
                        + "GROUP_CRITICAL_LIMIT_ENHANCHMENT_NO AS 'Grp Enhancement No', "
                        + "CASE WHEN COALESCE(GROUP_CRITICAL_LIMIT_ENHANCHMENT_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(GROUP_CRITICAL_LIMIT_ENHANCHMENT_DATE, \"%d/%m/%Y\") END AS 'Grp Enhancement Date', "
                        + "GROUP_CRITICAL_LIMIT_ENHANCHMENT_PENDING_USER AS 'Grp Enhancement Pending Under', "
                        + "INVOICE_PARAMETER_MODIFICATION_NO AS 'Parameter Modification No', "
                        + "CASE WHEN COALESCE(INVOICE_PARAMETER_MODIFICATION_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(INVOICE_PARAMETER_MODIFICATION_DATE, \"%d/%m/%Y\") END AS 'Parameter Modification Date', "
                        + "INVOICE_PARAMETER_MODIFICATION_PENDING_USER AS 'Parameter Modification Pending Under', "
                        + "OUT_STANDING_AMT AS 'Outstanding', ";
            }
            if (CH09.isSelected() || CHALL.isSelected()) {
                sql += "ADV_AMT AS '09 Balance', ";
            }
            if (CH07.isSelected() || CHALL.isSelected()) {
                sql += "LC_NO AS 'LC No', "
                        + "CASE WHEN COALESCE(LC_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(LC_DATE, \"%d/%m/%Y\") END AS 'LC Date', "
                        + "LC_PENDING_USER AS 'LC Pending Under', ";
            }
            if (CHF6.isSelected()) {
                sql += "INVOICE_PARAMETER_MODIFICATION_NO AS 'Parameter Modification No', "
                        + "CASE WHEN COALESCE(INVOICE_PARAMETER_MODIFICATION_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(INVOICE_PARAMETER_MODIFICATION_DATE, \"%d/%m/%Y\") END AS 'Parameter Modification Date', "
                        + "INVOICE_PARAMETER_MODIFICATION_PENDING_USER AS 'Parameter Modification Pending Under', ";
            }
            sql += "CHARGE_CODE AS 'Charge Code', PIECE_UPN AS 'UPN', PIECE_STAGE AS 'Piece Stage', PARTY_GROUP_CODE AS 'Group Code', PARTY_GROUP_NAME AS 'Group Name', PRODUCT_CODE AS 'Product Code', GROUP_NAME AS 'Group_', "
                    + "POSITION_DESC AS 'Position Desc', ACTUAL_LENGTH AS 'Length', ACTUAL_WIDTH AS 'Width', GSM AS 'GSM', SQMTR AS 'SqMtr', ACTUAL_WEIGHT AS 'Weight', DISC_PER AS 'Disc Per' ";
            sql += "FROM (SELECT * FROM PRODUCTION.FELT_DISPATCH_PIECE_DETAIL_DATA WHERE PIECE_STATUS='CLEAR' " + cndtn + " ) AS Z ,(select @a:=0) as a ";

//            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelClear.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
//            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[500];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelClear.addRow(rowData);
                    rs.next();
                }
            }
            DataModelClear.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateInvoiced() {
        String sql = "";
        String cndtn = "";
        ResultSet rs;
        DataModelInvoiced = new EITLTableModel();
        TableInvoiced.removeAll();
        TableInvoiced.setModel(DataModelInvoiced);
        TableInvoiced.setAutoResizeMode(TableInvoiced.AUTO_RESIZE_OFF);

        try {
            if (!txtpartycode.getText().trim().equals("")) {
                cndtn += " AND PARTY_CODE = '" + txtpartycode.getText().trim() + "' ";
            }

            if (!txtgroupcode.getText().trim().equals("")) {
                cndtn += " AND PARTY_GROUP_CODE= '" + txtgroupcode.getText().trim() + "' ";
            }

            if (!INCHARGE.getSelectedItem().toString().trim().equals("ALL")) {
                cndtn += " AND INCHARGE_AREA= '" + INCHARGE.getSelectedItem().toString().trim() + "' ";
            }

            if (CH01.isSelected()) {
                cndtn += " AND CHARGE_CODE = '01' ";
            }
            if (CH02.isSelected()) {
                cndtn += " AND CHARGE_CODE = '02' ";
            }
            if (CH04.isSelected()) {
                cndtn += " AND CHARGE_CODE = '04' ";
            }
            if (CH07.isSelected()) {
                cndtn += " AND CHARGE_CODE = '07' ";
            }
            if (CH08.isSelected()) {
                cndtn += " AND CHARGE_CODE = '08' ";
            }
            if (CH09.isSelected()) {
                cndtn += " AND CHARGE_CODE = '09' ";
            }
            if (CHF6.isSelected()) {
                cndtn += " AND CHARGE_CODE != PARTY_CHARGE_CODE ";
            }

            sql = "";
//            sql += "SELECT * ";
            sql += "SELECT @a:=@a+1 AS 'SrNo', PIECE_STATUS AS 'Status', PIECE_NO AS 'Piece No', PARTY_CODE AS 'Party Code', PARTY_NAME AS 'Name', "
                    + "CASE WHEN COALESCE(FINISHING_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(FINISHING_DATE, \"%d/%m/%Y\") END AS 'Finishing Date', "
                    + "PACKING_NO AS 'Packing No', "
                    + "CASE WHEN COALESCE(PACKING_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(PACKING_DATE, \"%d/%m/%Y\") END AS 'Packing Date', "
                    + "PACKING_PENDING_USER AS 'Packing Pending Under', BALE_NO AS 'Bale No', "
                    + "CASE WHEN COALESCE(BALE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(BALE_DATE, \"%d/%m/%Y\") END AS 'Bale Date', "
                    + "INVOICE_NO AS 'Invoice No', "
                    + "CASE WHEN COALESCE(INVOICE_DATE,'0000-00-00')='0000-00-00' THEN '' ELSE DATE_FORMAT(INVOICE_DATE, \"%d/%m/%Y\") END AS 'Invoice Date', "
                    + "INVOICE_AMT AS 'Invoice Amt', "
//                    + "CHECK_POINT_REMARK AS 'Reason', "
                    + "";
            sql += "CHARGE_CODE AS 'Charge Code', PIECE_UPN AS 'UPN', PIECE_STAGE AS 'Piece Stage', PARTY_GROUP_CODE AS 'Group Code', PARTY_GROUP_NAME AS 'Group Name', PRODUCT_CODE AS 'Product Code', GROUP_NAME AS 'Group_', "
                    + "POSITION_DESC AS 'Position Desc', ACTUAL_LENGTH AS 'Length', ACTUAL_WIDTH AS 'Width', GSM AS 'GSM', SQMTR AS 'SqMtr', ACTUAL_WEIGHT AS 'Weight', DISC_PER AS 'Disc Per' ";
            sql += "FROM (SELECT * FROM PRODUCTION.FELT_DISPATCH_PIECE_DETAIL_DATA WHERE PIECE_STATUS='INVOICED' " + cndtn + " ) AS Z ,(select @a:=0) as a ";

//            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelInvoiced.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
//            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[500];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelInvoiced.addRow(rowData);
                    rs.next();
                }
            }
            DataModelInvoiced.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
