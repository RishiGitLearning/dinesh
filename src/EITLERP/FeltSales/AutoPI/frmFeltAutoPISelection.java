/*
 * frmFeltAutoPISelection.java
 *
 * Created on August 22, 2013, 11:20 AM
 */
package EITLERP.FeltSales.AutoPI;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import TReportWriter.NumWord;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.EITLTableCellRenderer;
import EITLERP.FeltSales.FeltQualityRateMaster.frmFeltQltRateMaster;
import EITLERP.FeltSales.Perfomainvoice.clsProforma;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.JavaMailNew;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.Production.FeltNeedling.frmFeltNeedling;
import EITLERP.Production.FeltMending.frmFeltMending_New;
import EITLERP.Production.FeltWeaving.frmFeltWeaving;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import EITLERP.clsDocMailer;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;

public class frmFeltAutoPISelection extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private clsFeltAutoPISelection ObjFeltFinishing;
    private EITLERP.FeltSales.common.FeltInvCalc inv_calculation;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelF;
    private int FinalApprovedBy = 0;
    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltFinishing
     */
    public void init() {
        System.gc();
        setSize(830, 590);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjFeltFinishing = new clsFeltAutoPISelection();
        lblTitle.setForeground(Color.WHITE);

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        if (ObjFeltFinishing.LoadData()) {
            ObjFeltFinishing.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Error occured while Loading Data. Error is " + ObjFeltFinishing.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }

        Table.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT AUTO PI SELECTION - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel16.setText("Doc No ");
        Tab1.add(jLabel16);
        jLabel16.setBounds(20, 10, 70, 20);

        txtDocNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(90, 10, 150, 21);

        jLabel6.setText("Doc Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(280, 10, 80, 20);

        txtDocDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(370, 10, 102, 21);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(480, 10, 20, 18);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel4);
        jPanel4.setBounds(10, 40, 760, 5);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 390, 90, 25);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane4.setViewportView(Table);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(11, 60, 750, 320);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("Remarks");
        jLabel29.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel29);
        jLabel29.setBounds(10, 390, 70, 20);

        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(90, 390, 550, 19);

        Tab.addTab("Piece Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 80, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 80, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 80, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 80, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 460);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 820, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjFeltFinishing.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//        
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/FELTFINISHING.rpt",Parameters,ObjFeltFinishing.getReportData(txtProductionDocumentNo.getText().trim(),EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
//            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

//        PreviewReport();
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//
//        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/FELTFINISHING.rpt", Parameters, ObjFeltFinishing.getReportData(txtProductionDocumentNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltFinishing.HistoryView = false;
        ObjFeltFinishing.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltFinishing.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()), txtDocNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(630, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltFinishing.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
        if (ObjFeltFinishing.LoadData()) {
            ObjFeltFinishing.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltAutoPISelection.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        lblStatus.setText("Enter Remarks");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocNo.setEnabled(false);
        txtDocDate.setEnabled(false);
        txtRemarks.setEnabled(pStat);

        Table.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtDocNo.setText("");
        txtRemarks.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 630)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltFinishing.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltFinishing.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String docDate = EITLERPGLOBAL.formatDate(ObjFeltFinishing.getAttribute("DOC_DATE").getString());
            String docNo = ObjFeltFinishing.getAttribute("DOC_NO").getString();

            lblTitle.setText(" FELT AUTO PI SELECTION - " + docNo);
            lblRevNo.setText(Integer.toString((int) ObjFeltFinishing.getAttribute("REVISION_NO").getVal()));

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltFinishing.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate = true;

            //GenerateHierarchyCombo();
            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjFeltFinishing.hmFeltFinishingDetails.size(); i++) {
                clsFeltAutoPISelectionDetails ObjFeltFinishingDetails = (clsFeltAutoPISelectionDetails) ObjFeltFinishing.hmFeltFinishingDetails.get(Integer.toString(i));

                Object[] rowData = new Object[25];

                txtDocDate.setText(docDate);
                txtDocNo.setText(docNo);
                txtRemarks.setText(ObjFeltFinishingDetails.getAttribute("REMARKS").getString());

                if (ObjFeltFinishingDetails.getAttribute("PI_SELECTED_FLAG").getString().equalsIgnoreCase("1")) {
                    rowData[0] = true;
                } else {
                    rowData[0] = false;
                }
                rowData[1] = Integer.toString(i);
                rowData[2] = ObjFeltFinishingDetails.getAttribute("PIECE_NO").getString();
                rowData[3] = ObjFeltFinishingDetails.getAttribute("PARTY_CODE").getString();
                rowData[4] = ObjFeltFinishingDetails.getAttribute("PARTY_NAME").getString();
                rowData[5] = ObjFeltFinishingDetails.getAttribute("PRODUCT_CODE").getString();
                rowData[6] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("LENGTH").getVal(), 2));
                rowData[7] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("WIDTH").getVal(), 2));
                rowData[8] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("WEIGHT").getVal(), 2));
                rowData[9] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("PI_VALUE").getVal(), 2));

                DataModelF.addRow(rowData);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(630, docNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltAutoPISelection.getHistoryList(txtDocNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltAutoPISelection ObjFeltFinishing = (clsFeltAutoPISelection) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltFinishing.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltFinishing.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltFinishing.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = (int) ObjFeltFinishing.getAttribute("UPDATED_BY").getVal();
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltFinishing.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltFinishing.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
            DataModelF = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModelF);
            Table.setAutoResizeMode(0);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

            DataModelF.addColumn("Select"); //0
            DataModelF.addColumn("SrNo"); //1
            DataModelF.addColumn("Piece No"); //2
            DataModelF.addColumn("Party Code"); //3
            DataModelF.addColumn("Party Name"); //4
            DataModelF.addColumn("Product Code"); //5
            DataModelF.addColumn("Length(mtr)"); //6
            DataModelF.addColumn("Width(mtr)"); //7
            DataModelF.addColumn("Weight(kg)"); //8
            DataModelF.addColumn("PI Value"); //9

            Renderer.setCustomComponent(0, "CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            DataModelF.SetVariable(0, "PI_SELECTED_FLAG"); //0
            DataModelF.SetVariable(1, "SR_NO"); //1
            DataModelF.SetVariable(2, "PIECE_NO"); //2
            DataModelF.SetVariable(3, "PARTY_CODE"); //3
            DataModelF.SetVariable(4, "PARTY_NAME"); //4
            DataModelF.SetVariable(5, "PRODUCT_CODE"); //5
            DataModelF.SetVariable(6, "LENGTH"); //6
            DataModelF.SetVariable(7, "WIDTH"); //7
            DataModelF.SetVariable(8, "WEIGHT"); //8
            DataModelF.SetVariable(9, "PI_VALUE"); //9

            DataModelF.SetReadOnly(1);
            DataModelF.SetReadOnly(2);
            DataModelF.SetReadOnly(3);
            DataModelF.SetReadOnly(4);
            DataModelF.SetReadOnly(5);
            DataModelF.SetReadOnly(6);
            DataModelF.SetReadOnly(7);
            DataModelF.SetReadOnly(8);
            DataModelF.SetReadOnly(9);

            Table.getColumnModel().getColumn(0).setMinWidth(50);
            Table.getColumnModel().getColumn(0).setMaxWidth(50);
            Table.getColumnModel().getColumn(1).setMinWidth(50);
            Table.getColumnModel().getColumn(1).setMaxWidth(50);
            Table.getColumnModel().getColumn(2).setMinWidth(80);
            Table.getColumnModel().getColumn(2).setMaxWidth(80);
            Table.getColumnModel().getColumn(3).setMinWidth(80);
            Table.getColumnModel().getColumn(3).setMaxWidth(80);
            Table.getColumnModel().getColumn(4).setMinWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(80);
            Table.getColumnModel().getColumn(5).setMaxWidth(80);
            Table.getColumnModel().getColumn(6).setMinWidth(80);
            Table.getColumnModel().getColumn(6).setMaxWidth(80);
            Table.getColumnModel().getColumn(7).setMinWidth(80);
            Table.getColumnModel().getColumn(7).setMaxWidth(80);
            Table.getColumnModel().getColumn(8).setMinWidth(80);
            Table.getColumnModel().getColumn(8).setMaxWidth(80);
            Table.getColumnModel().getColumn(9).setMinWidth(120);
            Table.getColumnModel().getColumn(9).setMaxWidth(120);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=630 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=630 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(630, ObjFeltFinishing.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(630, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(630, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(630, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(630, ObjFeltFinishing.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(630, FromUserID, ObjFeltFinishing.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(630, txtDocNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6239, 62391)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6239, 62392)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6239, 62393)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6239, 62395)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 630;
        aList.FirstFreeNo = 305;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsFeltAutoPISelection.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 630, FFNo, false));
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText(" FELT AUTO PI SELECTION - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);

    }

    private void Edit() {
        String productionDocumentNo = (String) ObjFeltFinishing.getAttribute("DOC_NO").getObj();
        if (ObjFeltFinishing.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (clsFeltProductionApprovalFlow.IsCreator(630, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltFinishing.CanDelete(txtDocNo.getText(), txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, ObjFeltFinishing.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String docNo, docDate, Remark;
        float Tagweight = 0, weight = 0, width = 0, length = 0;
        int i = 0, j = 0;
        docDate = txtDocDate.getText().trim();
        docNo = txtDocNo.getText().trim();
        Remark = txtRemarks.getText().trim();

        try {

            ObjFeltFinishing.hmFeltFinishingDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                clsFeltAutoPISelectionDetails ObjFeltFinishingDetails = new clsFeltAutoPISelectionDetails();

                String flg = String.valueOf(Table.getValueAt(i, 0));
                flg = flg.toLowerCase();
                if (flg.equals("true")) {
                    ObjFeltFinishingDetails.setAttribute("PI_SELECTED_FLAG", "1");
                } else {
                    ObjFeltFinishingDetails.setAttribute("PI_SELECTED_FLAG", "0");
                }
                ObjFeltFinishingDetails.setAttribute("PIECE_NO", DataModelF.getValueByVariable("PIECE_NO", i));
                ObjFeltFinishingDetails.setAttribute("PARTY_CODE", DataModelF.getValueByVariable("PARTY_CODE", i));
                ObjFeltFinishingDetails.setAttribute("PARTY_NAME", DataModelF.getValueByVariable("PARTY_NAME", i));
                ObjFeltFinishingDetails.setAttribute("PRODUCT_CODE", DataModelF.getValueByVariable("PRODUCT_CODE", i));
                ObjFeltFinishingDetails.setAttribute("LENGTH", EITLERPGLOBAL.round(Double.parseDouble(DataModelF.getValueByVariable("LENGTH", i)), 2));
                ObjFeltFinishingDetails.setAttribute("WIDTH", EITLERPGLOBAL.round(Double.parseDouble(DataModelF.getValueByVariable("WIDTH", i)), 2));
                ObjFeltFinishingDetails.setAttribute("WEIGHT", EITLERPGLOBAL.round(Double.parseDouble(DataModelF.getValueByVariable("WEIGHT", i)), 2));
                ObjFeltFinishingDetails.setAttribute("PI_VALUE", EITLERPGLOBAL.round(Double.parseDouble(DataModelF.getValueByVariable("PI_VALUE", i)), 2));
                ObjFeltFinishingDetails.setAttribute("REMARKS", Remark);

                ObjFeltFinishing.hmFeltFinishingDetails.put(Integer.toString(ObjFeltFinishing.hmFeltFinishingDetails.size() + 1), ObjFeltFinishingDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltFinishing.setAttribute("DOC_DATE", docDate);
        ObjFeltFinishing.setAttribute("DOC_NO", docNo);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltFinishing.Insert()) {
                if (OpgFinal.isSelected()) {
                    Auto_PI();
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Error occured while saving. Error is " + ObjFeltFinishing.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltFinishing.Update()) {
                if (OpgFinal.isSelected()) {
                    Auto_PI();
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, "Error occured while saving editing. Error is " + ObjFeltFinishing.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjFeltFinishing.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltFinishing.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltFinishing.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltFinishing.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltFinishing.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        //ObjFeltFinishing.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltFinishing.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

//        if(EditMode==EITLERPGLOBAL.ADD) {
//            ObjFeltFinishing.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
//            ObjFeltFinishing.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
//        }else {
//            ObjFeltFinishing.setAttribute("CREATED_BY", (int)ObjFeltFinishing.getAttribute("CREATED_BY").getVal());
//            ObjFeltFinishing.setAttribute("CREATED_DATE", ObjFeltFinishing.getAttribute("CREATED_DATE").getString());
//            ObjFeltFinishing.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
//        }
        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltFinishing.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltFinishing.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            //ObjFeltFinishing.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            //ObjFeltFinishing.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            ObjFeltFinishing.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltFinishing.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.AutoPI.frmFindFeltAutoPISelection", true);
        frmFindFeltAutoPISelection ObjFindFeltFinishing = (frmFindFeltAutoPISelection) ObjLoader.getObj();

        if (ObjFindFeltFinishing.Cancelled == false) {
            if (!ObjFeltFinishing.Filter(ObjFindFeltFinishing.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltAutoPISelection.this, " No records found.", "Find Felt Auto PI Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String docNo) {
        ObjFeltFinishing.Filter(" AND DOC_NO='" + docNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    // find details by piece no.
    public void Find(String pieceNo, String prodDate) {
        ObjFeltFinishing.Filter(" AND PIECE_NO='" + pieceNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    public void FindByPiece(String pieceNo) {
        ObjFeltFinishing.Filter(" AND PIECE_NO='" + pieceNo + "' ");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltFinishing.Filter(" AND DOC_NO IN (SELECT DISTINCT PI.DOC_NO FROM PRODUCTION.FELT_AUTO_PI_DATA PI, PRODUCTION.FELT_PROD_DOC_DATA D WHERE PI.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=630 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltFinishing.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltFinishing.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltFinishing.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltFinishing.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
//        DataModel.ClearAllReadOnly();
//        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

    private void Auto_PI() {
        String sql, mproforma, PieceNo, UOM, req_mnth, mduedt1, mduedt2;
        ResultSet tmpr, tmpp;
        String word = "";
        int addpi, mnth, mdiff;
        NumWord nw = new NumWord();
        String month[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        try {
            for (int i = 0; i < Table.getRowCount(); i++) {

                PieceNo = ((String) Table.getValueAt(i, 2)).trim().toUpperCase();

                if (Table.getValueAt(i, 0).equals(true)) {

                    mproforma = clsFirstFree.getNextFreeNo((int) EITLERPGLOBAL.gCompanyID, 708, 167, true);
                    sql = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + PieceNo + "'";

                    tmpr = data.getResult(sql);
                    tmpr.first();
                    tmpp = data.getResult("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + tmpr.getString("PR_PARTY_CODE") + "'");
                    String pposition = clsProforma.getposition(PieceNo);
                    String ppiecedec = clsProforma.getpiecedec(PieceNo);
                    String plength = tmpr.getString("PR_BILL_LENGTH");
                    String pwidth = tmpr.getString("PR_BILL_WIDTH");
                    String pgsm = tmpr.getString("PR_BILL_GSM");
                    String pweight = tmpr.getString("PR_BILL_WEIGHT");
                    String psqmtr = tmpr.getString("PR_BILL_SQMTR");
                    String pproductcode = tmpr.getString("PR_BILL_PRODUCT_CODE");

                    float actual_weight = 0;
                    if (pproductcode.startsWith("71") || pproductcode.startsWith("72")) {
                        actual_weight = Float.parseFloat(plength) * Float.parseFloat(pwidth);
                        UOM = "SQM";
                    } else {
                        UOM = "Kg";
                    }

                    if (pgsm == null) {
                        pgsm = "0";
                    }
                    if (pweight == null) {
                        pweight = "0";
                    }
                    if (psqmtr == null) {
                        psqmtr = "0";
                    }

                    inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(PieceNo, pproductcode, tmpr.getString("PR_PARTY_CODE"), Float.parseFloat(plength), Float.parseFloat(pwidth), Float.parseFloat(pweight), Float.parseFloat(psqmtr), EITLERPGLOBAL.getCurrentDateDB(), "");

                    word = nw.convertNumToWord(Math.round(Double.parseDouble(String.valueOf(inv_calculation.getFicInvAmt() + inv_calculation.getSD()))));

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_HEADER "
                            + "(PROFORMA_NO,PROFORMA_DATE,PARTY_CD,NAME,STATION,CONTACT,PHONE,REMARK1,REMARK2,REMARK3,REMARK4,REMARK5,FROM_IP,HIERARCHY_ID,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,APPROVED,APPROVED_DATE,REJECTED,REJECTED_DATE,CANCELED,CHANGED,CHANGED_DATE,REJECTED_REMARKS) "
                            + "VALUES('" + mproforma + "','" + EITLERPGLOBAL.getCurrentDateDB() + "','" + tmpr.getString("PR_PARTY_CODE") + "',"
                            + "'" + tmpp.getString("PARTY_NAME") + "','" + tmpp.getString("CITY_ID") + "','" + tmpp.getString("MOBILE_NO") + "',"
                            + "'" + tmpp.getString("PHONE_NO") + "','','','','','',NULL,2035,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',"
                            + "NULL,NULL,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "',0,'0000-00-00',0,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "',NULL)";
                    System.out.println("Insert Into Proforma Header :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_HEADER_H "
                            + "(REVISION_NO,UPDATED_BY,APPROVAL_STATUS,ENTRY_DATE,APPROVER_REMARKS,PROFORMA_NO,PROFORMA_DATE,PARTY_CD,NAME,STATION,CONTACT,PHONE,REMARK1,REMARK2,REMARK3,REMARK4,REMARK5,FROM_IP,HIERARCHY_ID,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,APPROVED,APPROVED_DATE,REJECTED_DATE,CANCELED,CHANGED,CHANGED_DATE,REJECTED,REJECTED_REMARKS) "
                            + "VALUES(1,336,'F','" + EITLERPGLOBAL.getCurrentDateDB() + "','','" + mproforma + "','" + EITLERPGLOBAL.getCurrentDateDB() + "','" + tmpr.getString("PR_PARTY_CODE") + "',"
                            + "'" + tmpp.getString("PARTY_NAME") + "','" + tmpp.getString("CITY_ID") + "','" + tmpp.getString("MOBILE_NO") + "',"
                            + "'" + tmpp.getString("PHONE_NO") + "','','','','','',NULL,2035,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',"
                            + "NULL,NULL,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "','0000-00-00',0,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "',0,NULL)";
                    System.out.println("Insert Into Proforma Header History :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL "
                            + "(PROFORMA_NO,SR_NO,PRIORITY_DATE,INCHARGE_NAME,PRIORITY,PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE,COMM_DATE,PRODUCT_CD,ITEM,STYLE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,GSQ,WEIGHT,RECD_KG,RATE,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,EXCISE,SEAM_CHG,SEAM_CHG_PER,INSACC_AMT,INV_AMT,DAYS,REF_NO,CONF_NO,MACHINE_NO,POSITION,STATION,ZONE,INSURANCE_CODE,ITEM_DESC,SYN_PER,PO_NO,PO_DATE,FROM_IP,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,CHANGED_DATE,CHANGED,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,INS_IND,VAT,CST,SD_AMT,FIVE_PER_WEIGHT,PRO_INV_AMT,INV_VAL,INV_VAL_WORD,CGST_AMT,SGST_AMT,IGST_AMT,TCS_PER,TCS_AMT,SQMTR,UOM,AOSD_PER,AOSD_AMT,SURCHARGE_PER,SURCHARGE_RATE,GROSS_RATE) "
                            + "VALUES('" + mproforma + "',1,NULL,'" + tmpr.getString("PR_INCHARGE") + "',NULL,'" + PieceNo + "',";
                    try {
                        if (tmpr.getString("PR_ORDER_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_ORDER_DATE") + "',";
                        }
                    } catch (Exception b) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,NULL,NULL,'" + tmpr.getString("PR_BILL_PRODUCT_CODE") + "',NULL,'" + tmpr.getString("PR_STYLE") + "',"
                            + tmpr.getString("PR_BILL_LENGTH") + ",NULL," + tmpr.getString("PR_BILL_WIDTH") + ",NULL,"
                            + tmpr.getString("PR_BILL_GSM") + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + "0";
                    } else {
                        sql = sql + tmpr.getString("PR_BILL_WEIGHT");
                    }
                    sql = sql + ",NULL," + inv_calculation.getFicRate() + ","
                            + inv_calculation.getFicBasAmount() + ",NULL," + inv_calculation.getFicDiscPer() + "," + inv_calculation.getFicDiscAmt() + ","
                            + inv_calculation.getFicDiscBasamt() + "," + inv_calculation.getFicExcise() + "," + inv_calculation.getFicSeamChg() + ",0,"
                            + inv_calculation.getFicInsAmt() + "," + inv_calculation.getFicInvAmt() + ",NULL,NULL,NULL,'" + tmpr.getString("PR_MACHINE_NO") + "',"
                            + "'" + pposition + "',NULL,NULL,NULL,'" + ppiecedec + "',NULL,'" + tmpr.getString("PR_PO_NO") + "',";
                    try {
                        if (tmpr.getString("PR_PO_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_PO_DATE") + "',";
                        }
                    } catch (Exception a) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',NULL,NULL,'" + EITLERPGLOBAL.getCurrentDateDB() + "',1,"
                            + "'" + inv_calculation.getFicChemTrtChg() + "','" + inv_calculation.getFicPinChg() + "','" + inv_calculation.getFicSpiralChg() + "',"
                            + "'" + inv_calculation.getFicInsInd() + "','" + inv_calculation.getVat() + "','" + inv_calculation.getCst() + "',"
                            + "'" + inv_calculation.getSD() + "',0,0,'" + Math.round((inv_calculation.getFicInvAmt() + inv_calculation.getSD())) + "',"
                            + "'" + word + "'," + inv_calculation.getFicCGST() + "," + inv_calculation.getFicSGST() + "," + inv_calculation.getFicIGST() + "," + inv_calculation.getTCS_per() + "," + inv_calculation.getTCS_amt() + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + tmpr.getFloat("PR_BILL_SQMTR");
                    } else {
                        sql = sql + "0";
                    }
                    sql = sql + ",'" + UOM + "'," + inv_calculation.getAosd_per() + "," + inv_calculation.getAosd_amt() + "," + inv_calculation.getFicSurcharge_per() + "," + inv_calculation.getFicSurcharge_rate() + "," + inv_calculation.getFicGrossRate()+ ")";
                    System.out.println("Insert Into Felt Proforma Invoice Detail :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL_H "
                            + "(REVISION_NO,PROFORMA_NO,SR_NO,PRIORITY_DATE,INCHARGE_NAME,PRIORITY,PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE,COMM_DATE,PRODUCT_CD,ITEM,STYLE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,GSQ,WEIGHT,RECD_KG,RATE,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,EXCISE,SEAM_CHG,SEAM_CHG_PER,INSACC_AMT,INV_AMT,DAYS,REF_NO,CONF_NO,MACHINE_NO,POSITION,STATION,ZONE,INSURANCE_CODE,ITEM_DESC,SYN_PER,PO_NO,PO_DATE,FROM_IP,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,CHANGED_DATE,CHANGED,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,INS_IND,VAT,CST,SD_AMT,FIVE_PER_WEIGHT,PRO_INV_AMT,INV_VAL,INV_VAL_WORD,CGST_AMT,SGST_AMT,IGST_AMT,TCS_PER,TCS_AMT,SQMTR,UOM,AOSD_PER,AOSD_AMT,SURCHARGE_PER,SURCHARGE_RATE,GROSS_RATE) "
                            + "VALUES(1,'" + mproforma + "',1,NULL,'" + tmpr.getString("PR_INCHARGE") + "',NULL,'" + PieceNo + "',";
                    try {
                        if (tmpr.getString("PR_ORDER_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_ORDER_DATE") + "',";
                        }
                    } catch (Exception b) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,NULL,NULL,'" + tmpr.getString("PR_BILL_PRODUCT_CODE") + "',NULL,'" + tmpr.getString("PR_STYLE") + "',"
                            + tmpr.getString("PR_BILL_LENGTH") + ",NULL," + tmpr.getString("PR_BILL_WIDTH") + ",NULL,"
                            + tmpr.getString("PR_BILL_GSM") + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + "0";
                    } else {
                        sql = sql + tmpr.getString("PR_BILL_WEIGHT");
                    }
                    sql = sql + ",NULL," + inv_calculation.getFicRate() + ","
                            + inv_calculation.getFicBasAmount() + ",NULL," + inv_calculation.getFicDiscPer() + "," + inv_calculation.getFicDiscAmt() + ","
                            + inv_calculation.getFicDiscBasamt() + "," + inv_calculation.getFicExcise() + "," + inv_calculation.getFicSeamChg() + ",0,"
                            + inv_calculation.getFicInsAmt() + "," + inv_calculation.getFicInvAmt() + ",NULL,NULL,NULL,'" + tmpr.getString("PR_MACHINE_NO") + "',"
                            + "'" + pposition + "',NULL,NULL,NULL,'" + ppiecedec + "',NULL,'" + tmpr.getString("PR_PO_NO") + "',";
                    try {
                        if (tmpr.getString("PR_PO_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_PO_DATE") + "',";
                        }
                    } catch (Exception a) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',NULL,NULL,'" + EITLERPGLOBAL.getCurrentDateDB() + "',1,"
                            + "'" + inv_calculation.getFicChemTrtChg() + "','" + inv_calculation.getFicPinChg() + "','" + inv_calculation.getFicSpiralChg() + "',"
                            + "'" + inv_calculation.getFicInsInd() + "','" + inv_calculation.getVat() + "','" + inv_calculation.getCst() + "',"
                            + "'" + inv_calculation.getSD() + "',0,0,'" + Math.round((inv_calculation.getFicInvAmt() + inv_calculation.getSD())) + "',"
                            + "'" + word + "'," + inv_calculation.getFicCGST() + "," + inv_calculation.getFicSGST() + "," + inv_calculation.getFicIGST() + "," + inv_calculation.getTCS_per() + "," + inv_calculation.getTCS_amt() + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + tmpr.getFloat("PR_BILL_SQMTR");
                    } else {
                        sql = sql + "0";
                    }
                    sql = sql + ",'" + UOM + "'," + inv_calculation.getAosd_per() + "," + inv_calculation.getAosd_amt() + "," + inv_calculation.getFicSurcharge_per() + "," + inv_calculation.getFicSurcharge_rate() + "," + inv_calculation.getFicGrossRate()+ ")";
                    System.out.println("Insert Into Felt Proforma Invoice Detail History :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                            + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,ACTION_DATE,CHANGED,CHANGED_DATE) "
                            + "VALUES(708,'" + mproforma + "','" + EITLERPGLOBAL.getCurrentDateDB() + "',336,'F','C','ERP SYSTEM AUTO GENERATED',1,0,NULL,'0000-00-00','" + EITLERPGLOBAL.getCurrentDateTimeDB() + "',1,'" + EITLERPGLOBAL.getCurrentDateTimeDB() + "')";
                    System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                    data.Execute(sql);

                    sql = "UPDATE PRODUCTION.FELT_AUTO_PI_DATA SET PI_GENERATED_FLAG='1' WHERE PIECE_NO='" + PieceNo + "'";
                    data.Execute(sql);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
