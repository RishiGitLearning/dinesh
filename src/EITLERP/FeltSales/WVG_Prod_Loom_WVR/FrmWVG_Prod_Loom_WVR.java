/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.WVG_Prod_Loom_WVR;

import EITLERP.BigEdit;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.LOV;
import EITLERP.FeltSales.common.SelectFirstFree;
import EITLERP.Loader;
import EITLERP.Production.FeltCreditNote.clsExcelExporter;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author Dharmendra PRAJAPATI
 *
 */
public class FrmWVG_Prod_Loom_WVR extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableCellRenderer CellAlign = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellAlign1 = new EITLTableCellRenderer();
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int ModuleId = 820;
    private String DOC_NO = "";
    private clsWVG_Prod_Loom_WVR WVG_Upload;
    private EITLComboModel cmbSendToModel;
    private clsExcelExporter exp = new clsExcelExporter();
    
    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    @Override
    public void init() {

        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        file1.setVisible(false);
        cmdimport.setVisible(false);
        GenerateCombos();
        FormatGrid();
        GenerateFromCombo();
        //GenerateHierarchyCombo();

        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

        WVG_Upload = new clsWVG_Prod_Loom_WVR();
        boolean load = WVG_Upload.LoadData(EITLERPGLOBAL.gCompanyID);
        if (load) {
            DisplayData();
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + WVG_Upload.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        SetupApproval();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
        lblTitle1.setBackground(new Color(0, 102, 153));
        lblTitle1.setForeground(Color.WHITE);
    }

    private void clearFields() {

        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();
        // FormatGridA();
        FormatGridHS();
        

        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }
        Object[] rowData = new Object[15];
        rowData[0] = 1;
        DataModel.addRow(rowData);
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if ("1".equals(WVG_Upload.getAttribute("APPROVED").getString())) {
                lblTitle1.setBackground(Color.BLUE);
                lblTitle1.setForeground(Color.WHITE);
            }

            if ("0".equals(WVG_Upload.getAttribute("APPROVED").getString())) {
                lblTitle1.setBackground(Color.GRAY);
                lblTitle1.setForeground(Color.BLACK);
            }

            if ("1".equals(WVG_Upload.getAttribute("CANCELED").getString())) {
                lblTitle1.setBackground(Color.RED);
                lblTitle1.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }

        //============================================//
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        clearFields();
        try {
            DOC_NO = WVG_Upload.getAttribute("DOC_NO").getString();
            lblTitle1.setText("Wvg Production Entry  - " + DOC_NO);
            DOC_NO1.setText(DOC_NO);

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) WVG_Upload.getAttribute("HIERARCHY_ID").getVal());
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= WVG_Upload.colMRItems.size(); i++) {

                clsWVG_Prod_Loom_WVRItem ObjItem = (clsWVG_Prod_Loom_WVRItem) WVG_Upload.colMRItems.get(Integer.toString(i));
                Object[] rowData = new Object[100];
                
                rowData[0] = Integer.toString(i);
                rowData[1] = EITLERPGLOBAL.formatDate(ObjItem.getAttribute("DOC_DATE").getObj().toString());
                rowData[2] = ObjItem.getAttribute("SHIFT_ID").getObj().toString();
                rowData[3] = ObjItem.getAttribute("EMP_NAME").getObj().toString();
                rowData[4] = ObjItem.getAttribute("EMP_TYPE").getObj().toString();
                rowData[5] = ObjItem.getAttribute("EMP_NO").getObj().toString();
                rowData[6] = ObjItem.getAttribute("REG_ROKDI").getObj().toString();
                rowData[7] = ObjItem.getAttribute("CATOGORY_WISE_ENG").getObj().toString();
                rowData[8] = ObjItem.getAttribute("LOOM_ENG").getObj().toString();
                rowData[9] = ObjItem.getAttribute("BEAM_WARP_SR_NO").getObj().toString();
                rowData[10] = ObjItem.getAttribute("PRODUCT_GROUP").getObj().toString();
                rowData[11] = ObjItem.getAttribute("REED_SPACE_METER").getObj().toString();
                rowData[12] = ObjItem.getAttribute("PIECE_NO").getObj().toString();
                rowData[13] = ObjItem.getAttribute("WEFT_DETAILS").getObj().toString();
                rowData[14] = ObjItem.getAttribute("SHIFT_STARTING").getObj().toString();
                rowData[15] = ObjItem.getAttribute("IST_RECESS_OUT").getObj().toString();
                rowData[16] = ObjItem.getAttribute("IST_RECESS_IN").getObj().toString();
                rowData[17] = ObjItem.getAttribute("IIND_RECESS_OUT").getObj().toString();
                rowData[18] = ObjItem.getAttribute("IIND_RECESS_IN").getObj().toString();
                rowData[19] = ObjItem.getAttribute("IIIRD_RECESS_OUT").getObj().toString();
                rowData[20] = ObjItem.getAttribute("IIIRD_RECESS_IN").getObj().toString();
                rowData[21] = ObjItem.getAttribute("SHIFT_END_OUT").getObj().toString();
                rowData[22] = ObjItem.getAttribute("GATE_PASS_OUT").getObj().toString();
                rowData[23] = ObjItem.getAttribute("GATE_PASS_IN").getObj().toString();
                rowData[24] = ObjItem.getAttribute("MC_RPM").getObj().toString();
                rowData[25] = ObjItem.getAttribute("PICKS_10CM").getObj().toString();
                rowData[26] = ObjItem.getAttribute("START_READING").getObj().toString();
                rowData[27] = ObjItem.getAttribute("END_READING").getObj().toString();
                rowData[28] = ObjItem.getAttribute("PICK").getObj().toString();
                rowData[29] = ObjItem.getAttribute("TOTAL_WEAVE_TIME").getObj().toString();
                rowData[30] = ObjItem.getAttribute("NO_WARP_NO_WEFT").getObj().toString();
                rowData[31] = ObjItem.getAttribute("NO_POWER_NO_AIR").getObj().toString();
                rowData[32] = ObjItem.getAttribute("BEAN_GAITING").getObj().toString();
                rowData[33] = ObjItem.getAttribute("RE_BEAM_GAITING").getObj().toString();
                rowData[34] = ObjItem.getAttribute("NO_WEAVER").getObj().toString();
                rowData[35] = ObjItem.getAttribute("CLOTH_REPAIR_TOTAL").getObj().toString();
                rowData[36] = ObjItem.getAttribute("NO_BEAM_READY").getObj().toString();
                rowData[37] = ObjItem.getAttribute("Q_CHANGES").getObj().toString();
                rowData[38] = ObjItem.getAttribute("MECH_REPAIR").getObj().toString();
                rowData[39] = ObjItem.getAttribute("ELE_RO_REPAIR").getObj().toString();
                rowData[40] = ObjItem.getAttribute("SHUTTLE_REPAIR_TOTAL").getObj().toString();
                rowData[41] = ObjItem.getAttribute("OVER_HAULING").getObj().toString();
                
                rowData[42] = ObjItem.getAttribute("NO_PIRN").getObj().toString();
                rowData[43] = ObjItem.getAttribute("OTHER").getObj().toString();
                
                rowData[44] = ObjItem.getAttribute("SELEVEDGE_EDGE_CORD_REPAIR").getObj().toString();
                rowData[45] = ObjItem.getAttribute("TOTAL_TIME").getObj().toString();
                rowData[46] = ObjItem.getAttribute("REMARK").getObj().toString();
                rowData[47] = ObjItem.getAttribute("CARRY_OVER").getObj().toString();
                rowData[48] = ObjItem.getAttribute("CLOTH_REPAIR").getObj().toString();
                rowData[49] = ObjItem.getAttribute("SHUTTLE_REPAIR").getObj().toString();
                rowData[50] = ObjItem.getAttribute("PICK_REPAIR").getObj().toString();
                rowData[51] = ObjItem.getAttribute("WARP_END_REPAIR").getObj().toString();
                rowData[52] = ObjItem.getAttribute("TEMPLE_REPAIR").getObj().toString();
                rowData[53] = ObjItem.getAttribute("MC_STOPPAGES").getObj().toString();
                rowData[54] = ObjItem.getAttribute("CR1").getObj().toString();
                rowData[55] = ObjItem.getAttribute("CR2").getObj().toString();
                rowData[56] = ObjItem.getAttribute("CR3").getObj().toString();
                rowData[57] = ObjItem.getAttribute("CR4").getObj().toString();
                rowData[58] = ObjItem.getAttribute("CR5").getObj().toString();
                rowData[59] = ObjItem.getAttribute("CR6").getObj().toString();
                rowData[60] = ObjItem.getAttribute("SR1").getObj().toString();
                rowData[61] = ObjItem.getAttribute("SR2").getObj().toString();
                rowData[62] = ObjItem.getAttribute("SR3").getObj().toString();
                rowData[63] = ObjItem.getAttribute("SR4").getObj().toString();
                rowData[64] = ObjItem.getAttribute("PR1").getObj().toString();
                rowData[65] = ObjItem.getAttribute("PR2").getObj().toString();
                rowData[66] = ObjItem.getAttribute("PR3").getObj().toString();
                rowData[67] = ObjItem.getAttribute("PR4").getObj().toString();
                rowData[68] = ObjItem.getAttribute("PR5").getObj().toString();
                rowData[69] = ObjItem.getAttribute("PR6").getObj().toString();
                rowData[70] = ObjItem.getAttribute("PR7").getObj().toString();
                rowData[71] = ObjItem.getAttribute("PR8").getObj().toString();
                rowData[72] = ObjItem.getAttribute("WR1").getObj().toString();
                rowData[73] = ObjItem.getAttribute("WR2").getObj().toString();
                rowData[74] = ObjItem.getAttribute("WR3").getObj().toString();
                rowData[75] = ObjItem.getAttribute("WR4").getObj().toString();
                rowData[76] = ObjItem.getAttribute("WR5").getObj().toString();
                rowData[77] = ObjItem.getAttribute("TR1").getObj().toString();
                rowData[78] = ObjItem.getAttribute("TR2").getObj().toString();
                rowData[79] = ObjItem.getAttribute("TR3").getObj().toString();
                rowData[80] = ObjItem.getAttribute("TR4").getObj().toString();
                rowData[81] = ObjItem.getAttribute("TR5").getObj().toString();
                
                String NEW_EMP_NO =  "BRD"+ObjItem.getAttribute("EMP_NO").getObj().toString();
                String EMP_MASTER_NAME = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where PAY_EMP_NO='"+NEW_EMP_NO+"'");
                
                String Month="",Year="";
                String SHIFT_SCHEDULE_ID = "";
                //2020-01-08
                //0123456789
                try{
                    int Day = Integer.parseInt(ObjItem.getAttribute("DOC_DATE").getObj().toString().substring(8, 10));
                    Month = ObjItem.getAttribute("DOC_DATE").getObj().toString().substring(5, 7);
                    Year = ObjItem.getAttribute("DOC_DATE").getObj().toString().substring(0, 4);
                    System.out.println("Day = "+Day+",Month "+Month+",Year = "+Year);
                    System.out.println("SELECT SSC_"+Day+" FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE SSC_EMPID='"+NEW_EMP_NO+"' AND SSC_YEAR='"+Year+"' AND SSC_MONTH='"+Month+"'");
                    SHIFT_SCHEDULE_ID = data.getStringValueFromDB("SELECT SSC_"+Day+" FROM SDMLATTPAY.ATT_SHIFT_SCHEDULE SSC_EMPID='"+NEW_EMP_NO+"' AND SSC_YEAR='"+Year+"' AND SSC_MONTH='"+Month+"'");
                }catch(Exception e)
                {
                    e.printStackTrace();
                }
                
                if(ObjItem.getAttribute("EMP_NO").getObj().toString().equals(""))
                {
                    NEW_EMP_NO = "";
                }
                rowData[82] = EMP_MASTER_NAME;//EMPNAME
                rowData[83] = NEW_EMP_NO;//NEWEMPNO
                rowData[84] = SHIFT_SCHEDULE_ID;//SHIFT_ID from SHIFT_SCHEDULE
                
                DataModel.addRow(rowData);
            }
        } catch (Exception s) {
            s.printStackTrace();
        }
        try {
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = WVG_Upload.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            //HashMap History = WVG_Upload.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            HashMap History = clsWVG_Prod_Loom_WVR.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsWVG_Prod_Loom_WVR ObjHistory = (clsWVG_Prod_Loom_WVR) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjHistory.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }
                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }
                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6253, 62531)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6253, 62532)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6253, 62533)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6253, 62534)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = clsFeltProductionApprovalFlow.getFromID(ModuleId, WVG_Upload.getAttribute("DOC_NO").getString());
            //lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(ModuleId, FromUserID, WVG_Upload.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, WVG_Upload.getAttribute("DOC_NO").getString() + "")) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void FormatGrid() {
        try {

            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);
            String sql = "SELECT '' AS  SR_NO,'' AS  DOC_DATE, '' AS  SHIFT_ID, '' AS  EMP_NAME, '' AS  EMP_TYPE, '' AS  EMP_NO, '' AS  REG_ROKDI, '' AS  CATOGORY_WISE_ENG, '' AS  LOOM_ENG, '' AS  BEAM_WARP_SR_NO, '' AS  PRODUCT_GROUP, '' AS  REED_SPACE_METER, '' AS  PIECE_NO, '' AS  WEFT_DETAILS, '' AS  SHIFT_STARTING, '' AS  IST_RECESS_OUT, '' AS  IST_RECESS_IN, '' AS  IIND_RECESS_OUT, '' AS  IIND_RECESS_IN, '' AS  IIIRD_RECESS_OUT, '' AS  IIIRD_RECESS_IN, '' AS  SHIFT_END_OUT, '' AS  GATE_PASS_OUT, '' AS  GATE_PASS_IN, '' AS  MC_RPM, '' AS  PICKS_10CM, '' AS  START_READING, '' AS  END_READING, '' AS  PICK, '' AS  TOTAL_WEAVE_TIME, '' AS  NO_WARP_NO_WEFT, '' AS  NO_POWER_NO_AIR, '' AS  BEAN_GAITING, '' AS  RE_BEAM_GAITING, '' AS  NO_WEAVER, '' AS  CLOTH_REPAIR_TOTAL, '' AS  NO_BEAM_READY, '' AS  Q_CHANGES, '' AS  MECH_REPAIR, '' AS  ELE_RO_REPAIR, '' AS  SHUTTLE_REPAIR_TOTAL, '' AS  OVER_HAULING, '' AS NO_PIRN, '' AS OTHER, '' AS  SELEVEDGE_EDGE_CORD_REPAIR, '' AS  TOTAL_TIME, '' AS  REMARK, '' AS  CARRY_OVER, '' AS  CLOTH_REPAIR, '' AS  SHUTTLE_REPAIR, '' AS  PICK_REPAIR, '' AS  WARP_END_REPAIR, '' AS  TEMPLE_REPAIR, '' AS  MC_STOPPAGES, '' AS  CR1, '' AS  CR2, '' AS  CR3, '' AS  CR4, '' AS  CR5, '' AS  CR6, '' AS  SR1, '' AS  SR2, '' AS  SR3, '' AS  SR4, '' AS  PR1, '' AS  PR2, '' AS  PR3, '' AS  PR4, '' AS  PR5, '' AS  PR6, '' AS  PR7, '' AS  PR8, '' AS  WR1, '' AS  WR2, '' AS  WR3, '' AS  WR4, '' AS  WR5, '' AS  TR1, '' AS  TR2, '' AS  TR3, '' AS  TR4, '' AS  TR5,'' AS EMP_NAME_MASTER,'' AS NEW_EMP_NO,'' AS SHIFT_ID "
                    + "FROM DUAL";
            // + ",'' AS Q1_WEIGHT,'' AS Q1_SQMTR,'' AS Q2_WEIGHT,'' AS Q2_SQMTR,'' AS Q3_WEIGHT,'' AS Q3_SQMTR,'' AS Q4_WEIGHT,'' AS Q4_SQMTR "
            //length*width*(gsm/1000)*q1=KG
            //length*width*q1=SQMT
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            DataModel.ClearAllReadOnly();

            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                
                    DataModel.addColumn(rsInfo.getColumnName(i));
                    DataModel.SetVariable(i-1, rsInfo.getColumnName(i)); //1
                    DataModel.SetReadOnly(i-1);
                    
                
            }
            Table.getColumnModel().getColumn(41).setCellRenderer(CellAlign);
            Table.getColumnModel().getColumn(1).setCellRenderer(CellAlign1);
            DataModel.SetReadOnly(0);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From IP");

        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        lblStatus1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DOC_NO1 = new javax.swing.JTextField();
        cmdNextToTab2 = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        cmdimport = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(51, 51, 255));
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 900, 250);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(lblStatus1);
        lblStatus1.setBounds(10, 320, 920, 30);

        jLabel1.setText("Document No");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 20, 100, 20);

        DOC_NO1.setEditable(false);
        DOC_NO1.setText("BU000001");
        jPanel1.add(DOC_NO1);
        DOC_NO1.setBounds(140, 20, 130, 30);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(762, 360, 120, 30);
        jPanel1.add(file1);
        file1.setBounds(170, 40, 300, 442);

        cmdimport.setText("Import Data");
        cmdimport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdimportActionPerformed(evt);
            }
        });
        jPanel1.add(cmdimport);
        cmdimport.setBounds(440, 3, 140, 40);

        jButton1.setText("Download Template");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(724, 10, 180, 30);

        Tab.addTab("Production Uploaded Entry", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 20);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 37);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 37);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 20);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 37);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 20);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup5.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 24);

        buttonGroup5.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup5.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup5.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 20);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 37);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 20);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 37);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 340, 102, 30);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab3.setMnemonic('N');
        cmdNextToTab3.setText("Next >>");
        cmdNextToTab3.setToolTipText("Next Tab");
        cmdNextToTab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab3ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab3);
        cmdNextToTab3.setBounds(560, 340, 102, 30);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 410);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 20);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 20);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 37);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(570, 290, 130, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 930, 440);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle1.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle1.setText("Production Uploaded Entry");
        lblTitle1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle1.setOpaque(true);
        getContentPane().add(lblTitle1);
        lblTitle1.setBounds(0, 40, 930, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
    }//GEN-LAST:event_TableKeyPressed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        //SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "On State Change SelHierarchyId : "+SelHierarchyID);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus1.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);
        DOC_NO = DOC_NO1.getText();
        cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        //txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus1.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked


    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab3ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab3ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = DOC_NO1.getText();
        //WVG_Upload.ShowHistory(DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        //WVG_Upload.HistoryView = false;
        //WVG_Upload.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_TableFocusGained

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:
        lblStatus1.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // REPORT QUERY : SELECT A.DOC_NO,A.PIECE_NO,A.DL_REMARK,B.PR_MACHINE_NO,B.PR_POSITION_NO,B.PR_LENGTH,B.PR_WIDTH,B.PR_GSM,B.PR_GROUP,B.PR_STYLE,B.PR_SQMTR,B.PR_STYLE,B.PR_SYN_PER,B.PR_PIECE_REMARK,B.PR_PIECE_STAGE,B.PR_PRODUCT_CODE,B.PR_PARTY_CODE,B.PR_PO_NO,B.PR_PO_DATE,B.PR_REFERENCE_DATE,B.PR_ORDER_REMARK,B.PR_ORDER_DATE FROM  PRODUCTION.FELT_SALES_DIVERSION_LIST_APPROVAL A, PRODUCTION.FELT_SALES_PIECE_REGISTER B;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdimportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdimportActionPerformed
        // TODO add your handling code here:
        import_data();
    }//GEN-LAST:event_cmdimportActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        try {
////            exp.fillData(Table_PendingList, new File("/root/Desktop/SALES_PENDING_LIST_REPORT.xls"));
//            exp.fillData(Table, new File("D://F_WVG_REPORTS_FORMAT.xls"));
////            JOptionPane.showMessageDialog(null, "Data saved at "
////                    + "'/root/Desktop/SALES_PENDING_LIST_REPORT.xls' successfully in Linux PC or 'D://SALES_PENDING_LIST_REPORT.xls' successfully in Windows PC    ", "Message",
////                    JOptionPane.INFORMATION_MESSAGE);
//
//            exp.fillData(Table, new File(System.getProperty("user.home") + "/Desktop/F_WVG_REPORTS_FORMAT.xls"));
//            JOptionPane.showMessageDialog(null, "Data saved at "
//                    + "'" + System.getProperty("user.home") + "/Desktop/F_WVG_REPORTS_FORMAT.xls' or 'D://F_WVG_REPORTS_FORMAT.xls' successfully in PC    ", "Message",
//                    JOptionPane.INFORMATION_MESSAGE);
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
        EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();
        String sql = "SELECT '' AS  DOC_DATE, '' AS  SHIFT_ID, '' AS  EMP_NAME, '' AS  EMP_TYPE, '' AS  EMP_NO, '' AS  REG_ROKDI, '' AS  CATOGORY_WISE_ENG, '' AS  LOOM_ENG, '' AS  BEAM_WARP_SR_NO, '' AS  PRODUCT_GROUP, '' AS  REED_SPACE_METER, '' AS  PIECE_NO, '' AS  WEFT_DETAILS, '' AS  SHIFT_STARTING, '' AS  IST_RECESS_OUT, '' AS  IST_RECESS_IN, '' AS  IIND_RECESS_OUT, '' AS  IIND_RECESS_IN, '' AS  IIIRD_RECESS_OUT, '' AS  IIIRD_RECESS_IN, '' AS  SHIFT_END_OUT, '' AS  GATE_PASS_OUT, '' AS  GATE_PASS_IN, '' AS  MC_RPM, '' AS  PICKS_10CM, '' AS  START_READING, '' AS  END_READING, '' AS  PICK, '' AS  TOTAL_WEAVE_TIME, '' AS  NO_WARP_NO_WEFT, '' AS  NO_POWER_NO_AIR, '' AS  BEAN_GAITING, '' AS  RE_BEAM_GAITING, '' AS  NO_WEAVER, '' AS  CLOTH_REPAIR_TOTAL, '' AS  NO_BEAM_READY, '' AS  Q_CHANGES, '' AS  MECH_REPAIR, '' AS  ELE_RO_REPAIR, '' AS  SHUTTLE_REPAIR_TOTAL, '' AS  OVER_HAULING, '' AS NO_PIRN, '' AS OTHER, '' AS  SELEVEDGE_EDGE_CORD_REPAIR, '' AS  TOTAL_TIME, '' AS  REMARK, '' AS  CARRY_OVER, '' AS  CLOTH_REPAIR, '' AS  SHUTTLE_REPAIR, '' AS  PICK_REPAIR, '' AS  WARP_END_REPAIR, '' AS  TEMPLE_REPAIR, '' AS  MC_STOPPAGES, '' AS  CR1, '' AS  CR2, '' AS  CR3, '' AS  CR4, '' AS  CR5, '' AS  CR6, '' AS  SR1, '' AS  SR2, '' AS  SR3, '' AS  SR4, '' AS  PR1, '' AS  PR2, '' AS  PR3, '' AS  PR4, '' AS  PR5, '' AS  PR6, '' AS  PR7, '' AS  PR8, '' AS  WR1, '' AS  WR2, '' AS  WR3, '' AS  WR4, '' AS  WR5, '' AS  TR1, '' AS  TR2, '' AS  TR3, '' AS  TR4, '' AS  TR5 "
                    + "FROM DUAL";
        
        File Source_File;
        JFileChooser chooser =new JFileChooser();
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("XLX File", "pdf", "jpg");
        //sfilter.
        //chooser.setFileFilter(filter);
        String attach = EITLERPGLOBAL.getCurrentDay()+""+EITLERPGLOBAL.getCurrentMonth()+""+EITLERPGLOBAL.getCurrentYear();
        chooser.setSelectedFile(new File("WVG_REPORTS_FORMAT"+attach+".xls"));
        int n  = chooser.showSaveDialog(this);
        Source_File = chooser.getSelectedFile();
        
        
        exprt.fillData(sql, Source_File, "F_WVG_REPORTS_FORMAT");
        JOptionPane.showMessageDialog(null , "Format saved on : "+Source_File.getPath());
        
    }//GEN-LAST:event_jButton1ActionPerformed
    private void MoveFirst() {
        WVG_Upload.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        WVG_Upload.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        WVG_Upload.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        WVG_Upload.MoveLast();
        DisplayData();
    }

    private void Find() {

    }

    public void FindWaiting() {
        WVG_Upload.Filter(" DOC_NO IN (SELECT DISTINCT PRODUCTION.FELT_BUDGET_DETAIL.DOC_NO FROM PRODUCTION.FELT_BUDGET_DETAIL, PRODUCTION.FELT_PROD_DOC_DATA WHERE PRODUCTION.FELT_BUDGET_DETAIL.DOC_NO=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Add() {

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        EditMode = EITLERPGLOBAL.ADD;
        cmdimport.setVisible(true);

        SetFields(true);
        DisableToolbar();

        SetupApproval();

        clearFields();

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 323;
        FFNo = aList.FirstFreeNo;
        DOC_NO1.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle1.setText("WNG PRODUCTION LOOM REPORT - " + DOC_NO1.getText());
        
        //import_data();
    }

    private void Save() {

        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Enter Budget Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //WVG_Upload.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (WVG_Upload.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = ModuleId;
                aList.FirstFreeNo = 323;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);

                if (OpgFinal.isSelected()) {
                    try {

                        String DOC_NO = DOC_NO1.getText();
                        String DOC_DATE = EITLERPGLOBAL.getCurrentDate();
                        String Party_Code = "";

                        
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + WVG_Upload.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (WVG_Upload.Update()) {
                if (OpgFinal.isSelected()) {
                    try {

                        String DOC_NO = DOC_NO1.getText();
                        String DOC_DATE = EITLERPGLOBAL.getCurrentDate();
                        String Party_Code = "";

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + WVG_Upload.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        cmdimport.setVisible(false);
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) WVG_Upload.getAttribute("DOC_NO").getString();

        if (WVG_Upload.IsEditable(EITLERPGLOBAL.gCompanyID, productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateCombos();
            //GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            // SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
                SetFields(true);
            } else {

                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");
        }

    }

// find rate update by doc no
    public void Find(String docNo) {
        WVG_Upload.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String docno) {
        WVG_Upload.Filter(" DOC_NO='" + docno + "'");
        WVG_Upload.MoveFirst();
        DisplayData();
    }

    private void Delete() {

    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO1.getText());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        Table.setEnabled(true);
    }

    private void SetFields(boolean pStat) {

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

        WVG_Upload.setAttribute("DOC_NO", DOC_NO1.getText());

        DOC_NO = DOC_NO1.getText();

        WVG_Upload.setAttribute("DOC_NO", DOC_NO);
        WVG_Upload.setAttribute("MODULE_ID", ModuleId);
        WVG_Upload.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        WVG_Upload.setAttribute("REJECTED_REMARKS", txtToRemarks.getText());
        WVG_Upload.setAttribute("REMARKS", "");
        WVG_Upload.setAttribute("APPROVAL_STATUS", "");
        WVG_Upload.setAttribute("APPROVER_REMARKS", txtFromRemarks.getText());
        WVG_Upload.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        WVG_Upload.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        WVG_Upload.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        WVG_Upload.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        WVG_Upload.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "R");
            WVG_Upload.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            WVG_Upload.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        
        if (EditMode == EITLERPGLOBAL.ADD) {
            WVG_Upload.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            WVG_Upload.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            WVG_Upload.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            WVG_Upload.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            WVG_Upload.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            WVG_Upload.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        WVG_Upload.colMRItems.clear();
        
        for (int m = 0; m < Table.getRowCount(); m++) {
            
                clsWVG_Prod_Loom_WVRItem ObjMRItems = new clsWVG_Prod_Loom_WVRItem();

                ObjMRItems.setAttribute("DOC_NO", DOC_NO1.getText());
                //System.out.println("Data 1 : "+DataModel.getValueAt(1, 1));
                ObjMRItems.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("DOC_DATE",m)));
                ObjMRItems.setAttribute("SHIFT_ID", DataModel.getValueByVariable("SHIFT_ID",m));
                ObjMRItems.setAttribute("EMP_NAME", DataModel.getValueByVariable("EMP_NAME",m));
                ObjMRItems.setAttribute("EMP_TYPE", DataModel.getValueByVariable("EMP_TYPE",m));
                ObjMRItems.setAttribute("EMP_NO", DataModel.getValueByVariable("EMP_NO",m));
                ObjMRItems.setAttribute("REG_ROKDI", DataModel.getValueByVariable("REG_ROKDI",m));
                ObjMRItems.setAttribute("CATOGORY_WISE_ENG", DataModel.getValueByVariable("CATOGORY_WISE_ENG",m));
                ObjMRItems.setAttribute("LOOM_ENG", DataModel.getValueByVariable("LOOM_ENG",m));
                ObjMRItems.setAttribute("BEAM_WARP_SR_NO", DataModel.getValueByVariable("BEAM_WARP_SR_NO",m));
                ObjMRItems.setAttribute("PRODUCT_GROUP", DataModel.getValueByVariable("PRODUCT_GROUP",m));
                ObjMRItems.setAttribute("REED_SPACE_METER", DataModel.getValueByVariable("REED_SPACE_METER",m));
                ObjMRItems.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO",m));
                ObjMRItems.setAttribute("WEFT_DETAILS", DataModel.getValueByVariable("WEFT_DETAILS",m));
                ObjMRItems.setAttribute("SHIFT_STARTING", DataModel.getValueByVariable("SHIFT_STARTING",m));
                ObjMRItems.setAttribute("IST_RECESS_OUT", DataModel.getValueByVariable("IST_RECESS_OUT",m));
                ObjMRItems.setAttribute("IST_RECESS_IN", DataModel.getValueByVariable("IST_RECESS_IN",m));
                ObjMRItems.setAttribute("IIND_RECESS_OUT", DataModel.getValueByVariable("IIND_RECESS_OUT",m));
                ObjMRItems.setAttribute("IIND_RECESS_IN", DataModel.getValueByVariable("IIND_RECESS_IN",m));
                ObjMRItems.setAttribute("IIIRD_RECESS_OUT", DataModel.getValueByVariable("IIIRD_RECESS_OUT",m));
                ObjMRItems.setAttribute("IIIRD_RECESS_IN", DataModel.getValueByVariable("IIIRD_RECESS_IN",m));
                ObjMRItems.setAttribute("SHIFT_END_OUT", DataModel.getValueByVariable("SHIFT_END_OUT",m));
                ObjMRItems.setAttribute("GATE_PASS_OUT", DataModel.getValueByVariable("GATE_PASS_OUT",m));
                ObjMRItems.setAttribute("GATE_PASS_IN", DataModel.getValueByVariable("GATE_PASS_IN",m));
                ObjMRItems.setAttribute("MC_RPM", DataModel.getValueByVariable("MC_RPM",m));
                ObjMRItems.setAttribute("PICKS_10CM", DataModel.getValueByVariable("PICKS_10CM",m));
                ObjMRItems.setAttribute("START_READING", DataModel.getValueByVariable("START_READING",m));
                ObjMRItems.setAttribute("END_READING", DataModel.getValueByVariable("END_READING",m));
                ObjMRItems.setAttribute("PICK", DataModel.getValueByVariable("PICK",m));
                ObjMRItems.setAttribute("TOTAL_WEAVE_TIME", DataModel.getValueByVariable("TOTAL_WEAVE_TIME",m));
                
                
                ObjMRItems.setAttribute("NO_WARP_NO_WEFT", DataModel.getValueByVariable("NO_WARP_NO_WEFT",m));
                ObjMRItems.setAttribute("NO_POWER_NO_AIR", DataModel.getValueByVariable("NO_POWER_NO_AIR",m));
                ObjMRItems.setAttribute("BEAN_GAITING", DataModel.getValueByVariable("BEAN_GAITING",m));
                ObjMRItems.setAttribute("RE_BEAM_GAITING", DataModel.getValueByVariable("RE_BEAM_GAITING",m));
                ObjMRItems.setAttribute("NO_WEAVER", DataModel.getValueByVariable("NO_WEAVER",m));
                ObjMRItems.setAttribute("CLOTH_REPAIR_TOTAL", DataModel.getValueByVariable("CLOTH_REPAIR_TOTAL",m));
                ObjMRItems.setAttribute("NO_BEAM_READY", DataModel.getValueByVariable("NO_BEAM_READY",m));
                ObjMRItems.setAttribute("Q_CHANGES", DataModel.getValueByVariable("Q_CHANGES",m));
                ObjMRItems.setAttribute("MECH_REPAIR", DataModel.getValueByVariable("MECH_REPAIR",m));
                ObjMRItems.setAttribute("ELE_RO_REPAIR", DataModel.getValueByVariable("ELE_RO_REPAIR",m));
                ObjMRItems.setAttribute("SHUTTLE_REPAIR_TOTAL", DataModel.getValueByVariable("SHUTTLE_REPAIR_TOTAL",m));
                ObjMRItems.setAttribute("OVER_HAULING", DataModel.getValueByVariable("OVER_HAULING",m));
                
                ObjMRItems.setAttribute("NO_PIRN", DataModel.getValueByVariable("NO_PIRN",m));
                ObjMRItems.setAttribute("OTHER", DataModel.getValueByVariable("OTHER",m));
                
                ObjMRItems.setAttribute("SELEVEDGE_EDGE_CORD_REPAIR", DataModel.getValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR",m));
                
                double NO_WARP_NO_WEFT=0,NO_POWER_NO_AIR=0,BEAN_GAITING=0,NO_WEAVER=0,CLOTH_REPAIR_TOTAL=0
                        ,NO_BEAM_READY=0,Q_CHANGES=0
                        ,MECH_REPAIR=0,ELE_RO_REPAIR=0,SHUTTLE_REPAIR_TOTAL=0,OVER_HAULING=0,SELEVEDGE_EDGE_CORD_REPAIR=0;
                double total=0;
                try{
                    NO_WARP_NO_WEFT = Double.parseDouble(DataModel.getValueByVariable("NO_WARP_NO_WEFT",m));
                }catch(Exception e)
                {
                    //e.printStackTrace();
                }
                try{  NO_POWER_NO_AIR = Double.parseDouble(DataModel.getValueByVariable("NO_POWER_NO_AIR",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  BEAN_GAITING = Double.parseDouble(DataModel.getValueByVariable("BEAN_GAITING",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  NO_WEAVER = Double.parseDouble(DataModel.getValueByVariable("NO_WEAVER",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  CLOTH_REPAIR_TOTAL = Double.parseDouble(DataModel.getValueByVariable("CLOTH_REPAIR_TOTAL",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  NO_BEAM_READY = Double.parseDouble(DataModel.getValueByVariable("NO_BEAM_READY",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  Q_CHANGES = Double.parseDouble(DataModel.getValueByVariable("Q_CHANGES",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  MECH_REPAIR = Double.parseDouble(DataModel.getValueByVariable("MECH_REPAIR",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  ELE_RO_REPAIR = Double.parseDouble(DataModel.getValueByVariable("ELE_RO_REPAIR",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  SHUTTLE_REPAIR_TOTAL = Double.parseDouble(DataModel.getValueByVariable("SHUTTLE_REPAIR_TOTAL",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  OVER_HAULING = Double.parseDouble(DataModel.getValueByVariable("OVER_HAULING",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                try{  SELEVEDGE_EDGE_CORD_REPAIR = Double.parseDouble(DataModel.getValueByVariable("SELEVEDGE_EDGE_CORD_REPAIR",m));
                }catch(Exception e) { //e.printStackTrace(); 
                }
                
                
                total = NO_WARP_NO_WEFT + NO_POWER_NO_AIR + BEAN_GAITING+NO_WEAVER + CLOTH_REPAIR_TOTAL + NO_BEAM_READY + Q_CHANGES
                        + MECH_REPAIR + ELE_RO_REPAIR + SHUTTLE_REPAIR_TOTAL + OVER_HAULING + SELEVEDGE_EDGE_CORD_REPAIR;
                
                ObjMRItems.setAttribute("TOTAL_TIME", total+"");
                ObjMRItems.setAttribute("REMARK", DataModel.getValueByVariable("REMARK",m));
                ObjMRItems.setAttribute("CARRY_OVER", DataModel.getValueByVariable("CARRY_OVER",m));
                ObjMRItems.setAttribute("CLOTH_REPAIR", DataModel.getValueByVariable("CLOTH_REPAIR",m));
                ObjMRItems.setAttribute("SHUTTLE_REPAIR", DataModel.getValueByVariable("SHUTTLE_REPAIR",m));
                
                ObjMRItems.setAttribute("PICK_REPAIR", DataModel.getValueByVariable("PICK_REPAIR",m));
                ObjMRItems.setAttribute("WARP_END_REPAIR", DataModel.getValueByVariable("WARP_END_REPAIR",m));
                ObjMRItems.setAttribute("TEMPLE_REPAIR", DataModel.getValueByVariable("TEMPLE_REPAIR",m));
                ObjMRItems.setAttribute("MC_STOPPAGES", DataModel.getValueByVariable("MC_STOPPAGES",m));
                ObjMRItems.setAttribute("CR1", DataModel.getValueByVariable("CR1",m));
                ObjMRItems.setAttribute("CR2", DataModel.getValueByVariable("CR2",m));
                ObjMRItems.setAttribute("CR3", DataModel.getValueByVariable("CR3",m));
                ObjMRItems.setAttribute("CR4", DataModel.getValueByVariable("CR4",m));
                ObjMRItems.setAttribute("CR5", DataModel.getValueByVariable("CR5",m));
                ObjMRItems.setAttribute("CR6", DataModel.getValueByVariable("CR6",m));
                ObjMRItems.setAttribute("SR1", DataModel.getValueByVariable("SR1",m));
                ObjMRItems.setAttribute("SR2", DataModel.getValueByVariable("SR2",m));
                ObjMRItems.setAttribute("SR3", DataModel.getValueByVariable("SR3",m));
                ObjMRItems.setAttribute("SR4", DataModel.getValueByVariable("SR4",m));
                ObjMRItems.setAttribute("PR1", DataModel.getValueByVariable("PR1",m));
                ObjMRItems.setAttribute("PR2", DataModel.getValueByVariable("PR2",m));
                ObjMRItems.setAttribute("PR3", DataModel.getValueByVariable("PR3",m));
                ObjMRItems.setAttribute("PR4", DataModel.getValueByVariable("PR4",m));
                ObjMRItems.setAttribute("PR5", DataModel.getValueByVariable("PR5",m));
                ObjMRItems.setAttribute("PR6", DataModel.getValueByVariable("PR6",m));
                ObjMRItems.setAttribute("PR7", DataModel.getValueByVariable("PR7",m));
                ObjMRItems.setAttribute("PR8", DataModel.getValueByVariable("PR8",m));
                ObjMRItems.setAttribute("WR1", DataModel.getValueByVariable("WR1",m));
                ObjMRItems.setAttribute("WR2", DataModel.getValueByVariable("WR2",m));
                ObjMRItems.setAttribute("WR3", DataModel.getValueByVariable("WR3",m));
                ObjMRItems.setAttribute("WR4", DataModel.getValueByVariable("WR4",m));
                ObjMRItems.setAttribute("WR5", DataModel.getValueByVariable("WR5",m));
                ObjMRItems.setAttribute("TR1", DataModel.getValueByVariable("TR1",m));
                ObjMRItems.setAttribute("TR2", DataModel.getValueByVariable("TR2",m));
                ObjMRItems.setAttribute("TR3", DataModel.getValueByVariable("TR3",m));
                ObjMRItems.setAttribute("TR4", DataModel.getValueByVariable("TR4",m));
                ObjMRItems.setAttribute("TR5", DataModel.getValueByVariable("TR5",m));
                
                
                WVG_Upload.colMRItems.put(Integer.toString(WVG_Upload.colMRItems.size() + 1), ObjMRItems);
            
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DOC_NO1;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNextToTab3;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton cmdimport;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
 private void import_data() {
        Connection Conn = null, con = null;
        Statement stmt = null;

        try {
            String strSQL = "";
            Conn = data.getConn();
            Conn.setAutoCommit(false);
            stmt = Conn.createStatement();

            con = data.getConn();
            PreparedStatement pstm = null;
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            FileInputStream input = new FileInputStream(file);
            POIFSFileSystem fs = new POIFSFileSystem(input);
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            int k;
            
            FormatGrid();
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                row = (Row) sheet.getRow(i);
                if(row.getCell(1).getNumericCellValue()!=0)
                {
                        Object[] rowData = new Object[80];
                        rowData[0] = i;
                        for (k = 0; k < 79; k++) {
                            
                            row.getCell(k).setCellType(row.getCell(k).CELL_TYPE_STRING);
                            
                            try {
                                rowData[k + 1] = row.getCell(k).toString();
                            } catch (Exception a) {
                                    rowData[k + 1] = "";
                            }
                            
//                            try {
//                                
//                                rowData[k + 1] = row.getCell(k).toString();
//                            } catch (Exception a) {
//                                rowData[k + 1] = "";
//                            }
                        }

                        DataModel.addRow(rowData);
                        
                         
                }
                //System.out.println("Import rows " + i);
            }
           // boolean cmdsv = chk_import_data();
           // cmdSave.setEnabled(cmdsv);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    
    
}
