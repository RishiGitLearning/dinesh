/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.PieceDivision;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.LOV;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmPieceDivision extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModel_Exist;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 0;
    private final int ModuleId = 760;
    private String DOC_NO = "";
    private clsPieceDivision feltPieceDivision;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

//    DecimalFormat f_single = new DecimalFormat("##.0");
//    DecimalFormat f_double = new DecimalFormat("##.00");
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    /**
     * Initializes the applet FrmfeltPieceDivision
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();
        FormatGrid();
        FormatGrid_exist();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        //Cancel();
        try {
            MaskFormatter dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('_');
            dateMask.install(PDDate);

        } catch (ParseException ex) {
            System.out.println("Error on Mask : " + ex.getLocalizedMessage());
        }
        PDDate.setText(df.format(new Date()));

        feltPieceDivision = new clsPieceDivision();
        boolean load = feltPieceDivision.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + feltPieceDivision.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetFields(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        PDNo.setText("0");
        txtPieceNo.setText("");
        txtRemark.setText("");
        cmbDivisionBy.setSelectedIndex(0);
        cmbNo_Of_Division.setSelectedIndex(0);
        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();
        FormatGrid_exist();
        // FormatGridA();
        FormatGridHS();

        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }
        Object[] rowData = new Object[15];
        rowData[0] = 1;
        DataModel.addRow(rowData);
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (feltPieceDivision.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (feltPieceDivision.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (feltPieceDivision.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //clsfeltPieceDivision.ChangeVoucherNo=false;
        clearFields();
        try {
            PDNo.setText(feltPieceDivision.getAttribute("P_D_NO").getString());
            lblTitle.setText("Felt Piece Division - " + feltPieceDivision.getAttribute("P_D_NO").getString());
            PDDate.setText(EITLERPGLOBAL.formatDate(feltPieceDivision.getAttribute("P_D_DATE").getString()));
            lblRevNo.setText(Integer.toString((int) feltPieceDivision.getAttribute("REVISION_NO").getVal()));
            txtPieceNo.setText(feltPieceDivision.getAttribute("PIECE_NO").getString());
            cmbNo_Of_Division.setSelectedItem(feltPieceDivision.getAttribute("NO_OF_DIVISION").getString());
            cmbDivisionBy.setSelectedItem(feltPieceDivision.getAttribute("DIVISION_BY").getString());
            txtRemark.setText(feltPieceDivision.getAttribute("REMARK").getString());

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, feltPieceDivision.getAttribute("HIERARCHY_ID").getInt());

            FormatGrid();
            double total_length = 0;
            double total_width = 0;
            //Now Generate Table
            for (int i = 1; i <= feltPieceDivision.hmFeltPieceDivisionDetails.size(); i++) {
                clsPieceDivisionDetails ObjItem = (clsPieceDivisionDetails) feltPieceDivision.hmFeltPieceDivisionDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);
                int NewRow = Table.getRowCount() - 1;
                DataModel.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_CODE", ObjItem.getAttribute("PARTY_CODE").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString(), NewRow);
                DataModel.setValueByVariable("MACHINE_NO", ObjItem.getAttribute("MACHINE_NO").getString(), NewRow);
                DataModel.setValueByVariable("POSITION", ObjItem.getAttribute("POSITION").getString(), NewRow);
                DataModel.setValueByVariable("POSITION_DESC", ObjItem.getAttribute("POSITION_DESC").getString(), NewRow);
                DataModel.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel.setValueByVariable("PRODUCT", ObjItem.getAttribute("PRODUCT").getString(), NewRow);
                DataModel.setValueByVariable("PRODUCT_DESCRIPTION", ObjItem.getAttribute("PRODUCT_DESCRIPTION").getString(), NewRow);
                DataModel.setValueByVariable("PRODUCT_GROUP", ObjItem.getAttribute("PRODUCT_GROUP").getString(), NewRow);
                DataModel.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                DataModel.setValueByVariable("THEORTICAL_WEIGHT", ObjItem.getAttribute("THEORTICAL_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("SQ_MT", ObjItem.getAttribute("SQ_MT").getString(), NewRow);
                DataModel.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                DataModel.setValueByVariable("REQ_MONTH", ObjItem.getAttribute("REQ_MONTH").getString(), NewRow);
                DataModel.setValueByVariable("SYN_PER", ObjItem.getAttribute("SYN_PER").getString(), NewRow);
                DataModel.setValueByVariable("REMARK", ObjItem.getAttribute("REMARK").getString(), NewRow);
                DataModel.setValueByVariable("BILL_LENGTH", ObjItem.getAttribute("BILL_LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("BILL_WIDTH", ObjItem.getAttribute("BILL_WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("BILL_WEIGHT", ObjItem.getAttribute("BILL_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("BILL_SQMTR", ObjItem.getAttribute("BILL_SQMTR").getString(), NewRow);
                DataModel.setValueByVariable("BILL_GSM", ObjItem.getAttribute("BILL_GSM").getString(), NewRow);
                DataModel.setValueByVariable("BILL_PRODUCT_CODE", ObjItem.getAttribute("BILL_PRODUCT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("PIECE_STAGE", ObjItem.getAttribute("PIECE_STAGE").getString(), NewRow);
                
                DataModel.setValueByVariable("DIVISION_LENGTH_PER", ObjItem.getAttribute("DIVISION_LENGTH_PER").getString(), NewRow);
                DataModel.setValueByVariable("DIVISION_WIDTH_PER", ObjItem.getAttribute("DIVISION_WIDTH_PER").getString(), NewRow);

                if (cmbDivisionBy.getSelectedItem().equals("By Length")) {
                    total_length = total_length + Float.parseFloat(DataModel.getValueByVariable("LENGTH", NewRow));
                    total_width = Float.parseFloat(DataModel.getValueByVariable("WIDTH", NewRow));
                } else if (cmbDivisionBy.getSelectedItem().equals("By Width")) {
                    total_length = Float.parseFloat(DataModel.getValueByVariable("LENGTH", NewRow));
                    total_width = total_width + Float.parseFloat(DataModel.getValueByVariable("WIDTH", NewRow));
                }
            }
            Total_length.setText(EITLERPGLOBAL.round(total_length, 2) + "");
            Total_Width.setText(EITLERPGLOBAL.round(total_width, 2) + "");

            try {

                Object[] rowData = new Object[15];
                FormatGrid_exist();
                rowData[0] = 1;
                DataModel_Exist.addRow(rowData);

                Connection Conn;
                Statement stmt;
                ResultSet rsData;

                Conn = data.getConn();
                stmt = Conn.createStatement();

                rsData = stmt.executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where PR_PIECE_NO='" + txtPieceNo.getText() + "'");
                rsData.first();

                DataModel_Exist.setValueByVariable("SR_NO", 1 + "", 0);
                DataModel_Exist.setValueByVariable("PIECE_NO", rsData.getString("PR_PIECE_NO"), 0);

                DataModel_Exist.setValueByVariable("PARTY_CODE", rsData.getString("PR_PARTY_CODE"), 0);
                DataModel_Exist.setValueByVariable("PARTY_NAME", clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsData.getString("PR_PARTY_CODE")), 0);

                DataModel_Exist.setValueByVariable("MACHINE_NO", rsData.getString("PR_MACHINE_NO"), 0);
                DataModel_Exist.setValueByVariable("POSITION", rsData.getString("PR_POSITION_NO"), 0);

                try {
                    DataModel_Exist.setValueByVariable("POSITION_DESC", data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + rsData.getString("PR_POSITION_NO") + "'"), 0);
                } catch (Exception ew) {
                    ew.printStackTrace();
                }

                DataModel_Exist.setValueByVariable("PRODUCT", rsData.getString("PR_PRODUCT_CODE"), 0);
                DataModel_Exist.setValueByVariable("PRODUCT_DESCRIPTION", data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsData.getString("PR_PRODUCT_CODE") + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')"), 0);
                DataModel_Exist.setValueByVariable("PRODUCT_GROUP", rsData.getString("PR_GROUP"), 0);
                DataModel_Exist.setValueByVariable("LENGTH", rsData.getString("PR_LENGTH"), 0);
                DataModel_Exist.setValueByVariable("WIDTH", rsData.getString("PR_WIDTH"), 0);
                DataModel_Exist.setValueByVariable("GSM", rsData.getString("PR_GSM"), 0);
                DataModel_Exist.setValueByVariable("WEIGHT", rsData.getString("PR_THORITICAL_WEIGHT"), 0);
                DataModel_Exist.setValueByVariable("SQ_MT", rsData.getString("PR_SQMTR"), 0);
                DataModel_Exist.setValueByVariable("STYLE", rsData.getString("PR_STYLE"), 0);
                DataModel_Exist.setValueByVariable("REQ_MONTH", rsData.getString("PR_REQUESTED_MONTH"), 0);
                DataModel_Exist.setValueByVariable("SYN_PER", rsData.getString("PR_SYN_PER"), 0);
                DataModel_Exist.setValueByVariable("REMARK", rsData.getString("PR_PIECE_REMARK"), 0);
                DataModel_Exist.setValueByVariable("BILL_LENGTH", rsData.getString("PR_BILL_LENGTH"), 0);
                DataModel_Exist.setValueByVariable("BILL_WIDTH", rsData.getString("PR_BILL_WIDTH"), 0);
                DataModel_Exist.setValueByVariable("BILL_WEIGHT", rsData.getString("PR_BILL_WEIGHT"), 0);
                DataModel_Exist.setValueByVariable("BILL_SQMTR", rsData.getString("PR_BILL_SQMTR"), 0);
                DataModel_Exist.setValueByVariable("BILL_GSM", rsData.getString("PR_BILL_GSM"), 0);
                DataModel_Exist.setValueByVariable("BILL_PRODUCT_CODE", rsData.getString("PR_BILL_PRODUCT_CODE"), 0);
                DataModel_Exist.setValueByVariable("PIECE_STAGE", rsData.getString("PR_PIECE_STAGE"), 0);

                DataModel_Exist.setValueByVariable("ACTUAL_LENGTH", rsData.getString("PR_ACTUAL_LENGTH"), 0);
                DataModel_Exist.setValueByVariable("ACTUAL_WIDTH", rsData.getString("PR_ACTUAL_WIDTH"), 0);
                DataModel_Exist.setValueByVariable("ACTUAL_WEIGHT", rsData.getString("PR_ACTUAL_WEIGHT"), 0);

            } catch (Exception e) {
                System.out.println("Error on fetch data for  Piece Register " + e.getMessage());
            }

            //DoNotEvaluate=false;
            //UpdateTotals();
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = feltPieceDivision.getAttribute("P_D_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = feltPieceDivision.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsPieceDivision ObjHistory = (clsPieceDivision) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("MODIFIED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("MODIFIED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            txtPieceNoFocusLost(null);
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6084, 60841)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6084, 60842)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6084, 60843)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6084, 60845)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo"); //0 - Read Only
            DataModel.addColumn("PARTY CODE"); //1
            DataModel.addColumn("PARTY NAME"); //1
            DataModel.addColumn("MACHINE NO"); //1
            DataModel.addColumn("POSITION"); //2
            DataModel.addColumn("POSITION DESC"); //3
            DataModel.addColumn("PIECE NO"); //4
            DataModel.addColumn("PRODUCT"); //5
            DataModel.addColumn("DESCRIPTION"); //6
            DataModel.addColumn("GROUP"); //7
            DataModel.addColumn("LENGTH"); //8
            DataModel.addColumn("WIDTH"); //9
            DataModel.addColumn("GSM"); //10
            DataModel.addColumn("THEORTICAL WEIGHT"); //11
            DataModel.addColumn("SQ MT"); //12
            DataModel.addColumn("STYLE"); //13
            DataModel.addColumn("REQ MONTH"); //14
            DataModel.addColumn("SYN(%)"); //15
            DataModel.addColumn("REMARK"); //16
            DataModel.addColumn("BILL LENGTH");
            DataModel.addColumn("BILL WIDTH");
            DataModel.addColumn("BILL WEIGHT");
            DataModel.addColumn("BILL SQMTR");
            DataModel.addColumn("BILL GSM");
            DataModel.addColumn("BILL PRODUCT CODE");
            DataModel.addColumn("PIECE STAGE");
            DataModel.addColumn("DIVISION LENGTH PER");
            DataModel.addColumn("DIVISION WIDTH PER");

            DataModel.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel.SetVariable(1, "PARTY_CODE"); //1
            DataModel.SetVariable(2, "PARTY_NAME"); //1
            DataModel.SetVariable(3, "MACHINE_NO"); //1
            DataModel.SetVariable(4, "POSITION"); //2
            DataModel.SetVariable(5, "POSITION_DESC"); //3
            DataModel.SetVariable(6, "PIECE_NO"); //4
            DataModel.SetVariable(7, "PRODUCT"); //5
            DataModel.SetVariable(8, "PRODUCT_DESCRIPTION"); //6
            DataModel.SetVariable(9, "PRODUCT_GROUP"); //7
            DataModel.SetVariable(10, "LENGTH"); //8
            DataModel.SetVariable(11, "WIDTH"); //9
            DataModel.SetVariable(12, "GSM"); //10
            DataModel.SetVariable(13, "THEORTICAL_WEIGHT"); //11
            DataModel.SetVariable(14, "SQ_MT"); //12
            DataModel.SetVariable(15, "STYLE"); //13
            DataModel.SetVariable(16, "REQ_MONTH"); //14
            DataModel.SetVariable(17, "SYN_PER"); //15
            DataModel.SetVariable(18, "REMARK"); //16
            DataModel.SetVariable(19, "BILL_LENGTH");
            DataModel.SetVariable(20, "BILL_WIDTH");
            DataModel.SetVariable(21, "BILL_WEIGHT");
            DataModel.SetVariable(22, "BILL_SQMTR");
            DataModel.SetVariable(23, "BILL_GSM");
            DataModel.SetVariable(24, "BILL_PRODUCT_CODE");
            DataModel.SetVariable(25, "PIECE_STAGE");
            DataModel.SetVariable(26, "DIVISION_LENGTH_PER");
            DataModel.SetVariable(27, "DIVISION_WIDTH_PER");

            Table.getColumnModel().getColumn(0).setMinWidth(20);

            for (int i = 1; i <= 25; i++) {
                Table.getColumnModel().getColumn(i).setMinWidth(100);
                
            }
            Table.getColumnModel().getColumn(26).setMinWidth(150);
            Table.getColumnModel().getColumn(27).setMinWidth(150);

            Table.getColumnModel().getColumn(3).setMinWidth(50);
            Table.getColumnModel().getColumn(4).setMinWidth(50);
            Table.getColumnModel().getColumn(8).setMinWidth(150);
            Table.getColumnModel().getColumn(8).setMinWidth(150);

            //Requested Month Hide
            Table.getColumnModel().getColumn(16).setMinWidth(0);
            Table.getColumnModel().getColumn(16).setMaxWidth(0);

            Table.getColumnModel().getColumn(19).setMinWidth(0);
            Table.getColumnModel().getColumn(20).setMinWidth(0);
            Table.getColumnModel().getColumn(21).setMinWidth(0);
            Table.getColumnModel().getColumn(22).setMinWidth(0);
            Table.getColumnModel().getColumn(23).setMinWidth(0);
            Table.getColumnModel().getColumn(24).setMinWidth(0);

            Table.getColumnModel().getColumn(19).setMaxWidth(0);
            Table.getColumnModel().getColumn(20).setMaxWidth(0);
            Table.getColumnModel().getColumn(21).setMaxWidth(0);
            Table.getColumnModel().getColumn(22).setMaxWidth(0);
            Table.getColumnModel().getColumn(23).setMaxWidth(0);
            Table.getColumnModel().getColumn(24).setMaxWidth(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_exist() {
        try {

            DataModel_Exist = new EITLTableModel();
            Table_Exist.removeAll();

            Table_Exist.setModel(DataModel_Exist);
            Table_Exist.setAutoResizeMode(0);

            DataModel_Exist.addColumn("SrNo"); //0 - Read Only
            DataModel_Exist.addColumn("PARTY CODE"); //1
            DataModel_Exist.addColumn("PARTY NAME"); //2
            DataModel_Exist.addColumn("MACHINE NO"); //3
            DataModel_Exist.addColumn("POSITION"); //4
            DataModel_Exist.addColumn("POSITION DESC"); //5
            DataModel_Exist.addColumn("PIECE NO"); //6
            DataModel_Exist.addColumn("PRODUCT"); //7
            DataModel_Exist.addColumn("DESCRIPTION"); //8
            DataModel_Exist.addColumn("GROUP"); //9
            DataModel_Exist.addColumn("ORDER LENGTH"); //10
            DataModel_Exist.addColumn("ACTUAL LENGTH"); //11
            DataModel_Exist.addColumn("ORDER WIDTH"); //12
            DataModel_Exist.addColumn("ACTUAL WIDTH"); //13
            DataModel_Exist.addColumn("GSM"); //14
            DataModel_Exist.addColumn("WEIGHT"); //15
            DataModel_Exist.addColumn("ACTUAL WEIGHT"); //16
            DataModel_Exist.addColumn("SQ MT"); //17
            DataModel_Exist.addColumn("STYLE"); //18
            DataModel_Exist.addColumn("REQ MONTH"); //19
            DataModel_Exist.addColumn("SYN(%)"); //20
            DataModel_Exist.addColumn("REMARK"); //21
            DataModel_Exist.addColumn("BILL LENGTH");//22
            DataModel_Exist.addColumn("BILL WIDTH");//23
            DataModel_Exist.addColumn("BILL WEIGHT");//24
            DataModel_Exist.addColumn("BILL SQMTR");//25
            DataModel_Exist.addColumn("BILL GSM");//26
            DataModel_Exist.addColumn("BILL PRODUCT CODE");//27
            DataModel_Exist.addColumn("PIECE STAGE"); //28

            DataModel_Exist.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModel_Exist.SetVariable(1, "PARTY_CODE"); //1
            DataModel_Exist.SetVariable(2, "PARTY_NAME"); //2
            DataModel_Exist.SetVariable(3, "MACHINE_NO"); //3
            DataModel_Exist.SetVariable(4, "POSITION"); //4
            DataModel_Exist.SetVariable(5, "POSITION_DESC"); //5
            DataModel_Exist.SetVariable(6, "PIECE_NO"); //6
            DataModel_Exist.SetVariable(7, "PRODUCT"); //7
            DataModel_Exist.SetVariable(8, "PRODUCT_DESCRIPTION"); //8
            DataModel_Exist.SetVariable(9, "PRODUCT_GROUP"); //9
            DataModel_Exist.SetVariable(10, "LENGTH"); //10
            DataModel_Exist.SetVariable(11, "ACTUAL_LENGTH"); //29
            DataModel_Exist.SetVariable(12, "WIDTH"); //11
            DataModel_Exist.SetVariable(13, "ACTUAL_WIDTH"); //29
            DataModel_Exist.SetVariable(14, "GSM"); //12
            DataModel_Exist.SetVariable(15, "WEIGHT"); //13
            DataModel_Exist.SetVariable(16, "ACTUAL_WEIGHT"); //13
            DataModel_Exist.SetVariable(17, "SQ_MT"); //14
            DataModel_Exist.SetVariable(18, "STYLE"); //15
            DataModel_Exist.SetVariable(19, "REQ_MONTH"); //16
            DataModel_Exist.SetVariable(20, "SYN_PER"); //17
            DataModel_Exist.SetVariable(21, "REMARK"); //18
            DataModel_Exist.SetVariable(22, "BILL_LENGTH");//19
            DataModel_Exist.SetVariable(23, "BILL_WIDTH");//20
            DataModel_Exist.SetVariable(24, "BILL_WEIGHT");//21
            DataModel_Exist.SetVariable(25, "BILL_SQMTR");//22
            DataModel_Exist.SetVariable(26, "BILL_GSM");//23
            DataModel_Exist.SetVariable(27, "BILL_PRODUCT_CODE");//24
            DataModel_Exist.SetVariable(28, "PIECE_STAGE"); //29

            Table_Exist.getColumnModel().getColumn(0).setMinWidth(20);

            for (int i = 1; i <= 27; i++) {
                Table_Exist.getColumnModel().getColumn(i).setMinWidth(100);
            }
            Table_Exist.getColumnModel().getColumn(3).setMinWidth(50);
            Table_Exist.getColumnModel().getColumn(4).setMinWidth(50);
            Table_Exist.getColumnModel().getColumn(8).setMinWidth(150);

            Table_Exist.getColumnModel().getColumn(10).setMinWidth(120);
            Table_Exist.getColumnModel().getColumn(11).setMinWidth(120);
            Table_Exist.getColumnModel().getColumn(12).setMinWidth(120);
            Table_Exist.getColumnModel().getColumn(13).setMinWidth(120);

            Table_Exist.getColumnModel().getColumn(17).setMinWidth(120);

            //Requested Month Hide
            Table_Exist.getColumnModel().getColumn(19).setMinWidth(0);
            Table_Exist.setEnabled(false);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        PDNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        PDDate = new javax.swing.JFormattedTextField();
        lblRevNo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_Exist = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPieceNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbDivisionBy = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmbNo_Of_Division = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        Total_length = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Total_Width = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("P D Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 20, 80, 17);

        jLabel3.setText("P D  No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(320, 20, 80, 17);

        PDNo.setEditable(false);
        PDNo.setBackground(new java.awt.Color(254, 242, 230));
        PDNo.setText("PD000001");
        PDNo.setEnabled(false);
        jPanel1.add(PDNo);
        PDNo.setBounds(380, 10, 200, 27);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                TableAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                TableCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 150, 900, 160);

        PDDate.setEditable(false);
        jPanel1.add(PDDate);
        PDDate.setBounds(90, 10, 200, 30);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(280, 10, 34, 30);

        Table_Exist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Table_Exist);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 370, 900, 70);

        jLabel1.setText("Existing Piece Detail");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 350, 190, 20);

        jLabel4.setText("Piece No *");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 57, 90, 20);

        txtPieceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPieceNoFocusLost(evt);
            }
        });
        txtPieceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPieceNoKeyPressed(evt);
            }
        });
        jPanel1.add(txtPieceNo);
        txtPieceNo.setBounds(90, 50, 130, 27);

        jLabel5.setText("No Of  Division");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(230, 60, 120, 17);

        jLabel6.setText("Diviosion By");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(440, 50, 100, 30);

        cmbDivisionBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "----SELECT-----", "By Length", "By Width" }));
        cmbDivisionBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDivisionByItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbDivisionBy);
        cmbDivisionBy.setBounds(520, 50, 170, 27);

        jLabel7.setText("Remark ");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(10, 100, 80, 17);
        jPanel1.add(txtRemark);
        txtRemark.setBounds(90, 90, 610, 27);

        jLabel8.setText("Piece Division");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(10, 130, 120, 17);

        cmbNo_Of_Division.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25" }));
        cmbNo_Of_Division.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNo_Of_DivisionItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbNo_Of_Division);
        cmbNo_Of_Division.setBounds(330, 50, 70, 27);

        jLabel9.setText("Total Length");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(490, 330, 100, 17);

        Total_length.setEditable(false);
        Total_length.setText("0");
        jPanel1.add(Total_length);
        Total_length.setBounds(580, 320, 90, 27);

        jLabel10.setText("Total Width");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(680, 330, 90, 17);

        Total_Width.setEditable(false);
        Total_Width.setText("0");
        jPanel1.add(Total_Width);
        Total_Width.setBounds(760, 320, 80, 27);

        Tab.addTab("Piece Division", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 17);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 17);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 27);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 17);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 17);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 27);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 29);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 27);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 930, 480);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Piece Division");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 930, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 560, 930, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        DOC_NO = PDNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        ReportShow();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        feltPieceDivision.HistoryView = false;
        feltPieceDivision.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = PDNo.getText();
        feltPieceDivision.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // if (evt.getKeyCode() == 112 || evt.getKeyCode() == 10) {

    }//GEN-LAST:event_TableKeyPressed

    private void TableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_TableAncestorMoved

    private void TableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TableCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCaretPositionChanged

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:if(Table.getSelectedColumn() == 1)
        lblStatus.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:
        if (Table.getSelectedColumn() == 1) {
            lblStatus.setText("Press F1 for selection Machine No and Position No");
        } else {
            lblStatus.setText("");
        }
    }//GEN-LAST:event_TableFocusGained

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        //jdbc:mysql://200.0.0.227:3306/PRODUCTION
    }//GEN-LAST:event_TableMouseClicked

    private void txtPieceNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPieceNoFocusLost
        // TODO add your handling code here:

        if (EditMode == EITLERPGLOBAL.EDIT || EditMode == EITLERPGLOBAL.ADD) {

            if (!txtPieceNo.getText().equals("")) {

                try {

                    Object[] rowData = new Object[15];
                    FormatGrid_exist();
                    rowData[0] = 1;
                    DataModel_Exist.addRow(rowData);

                    Connection Conn;
                    Statement stmt;
                    ResultSet rsData;

                    Conn = data.getConn();
                    stmt = Conn.createStatement();

                    rsData = stmt.executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER where PR_PIECE_NO='" + txtPieceNo.getText() + "'");
                    rsData.first();

                    if (!( rsData.getString("PR_PIECE_STAGE").equals("WEAVING") || rsData.getString("PR_PIECE_STAGE").equals("MENDING") || rsData.getString("PR_PIECE_STAGE").equals("NEEDLING") || rsData.getString("PR_PIECE_STAGE").equals("SEAMING") || rsData.getString("PR_PIECE_STAGE").equals("IN STOCK"))) {
                        JOptionPane.showMessageDialog(null, "Piece stage " + rsData.getString("PR_PIECE_STAGE") + " not valid for DIVISION");
                        txtPieceNo.requestFocus();
                        return;
                    }
                    //'WEAVING','','',''

                    DataModel_Exist.setValueByVariable("SR_NO", 1 + "", 0);
                    DataModel_Exist.setValueByVariable("PIECE_NO", rsData.getString("PR_PIECE_NO"), 0);

                    DataModel_Exist.setValueByVariable("PARTY_CODE", rsData.getString("PR_PARTY_CODE"), 0);
                    DataModel_Exist.setValueByVariable("PARTY_NAME", clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsData.getString("PR_PARTY_CODE")), 0);

                    DataModel_Exist.setValueByVariable("MACHINE_NO", rsData.getString("PR_MACHINE_NO"), 0);
                    DataModel_Exist.setValueByVariable("POSITION", rsData.getString("PR_POSITION_NO"), 0);

                    String check_lock = data.getStringValueFromDB("SELECT COALESCE(PARTY_LOCK, 0) AS PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE='"+rsData.getString("PR_PARTY_CODE")+"'");
                    if("1".equals(check_lock))
                    {
                        JOptionPane.showMessageDialog(null, "Party Code : "+rsData.getString("PR_PARTY_CODE")+" is locked.");
                        return;
                    }
                    String check_lock_MACHINE = data.getStringValueFromDB("SELECT COALESCE(MACHINE_LOCK_IND, 0) AS PARTY_LOCK FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_PARTY_CODE='"+rsData.getString("PR_PARTY_CODE")+"' AND MM_MACHINE_NO='"+rsData.getString("PR_MACHINE_NO")+"'");
                    if("1".equals(check_lock_MACHINE))
                    {
                        JOptionPane.showMessageDialog(null, "Machine : "+rsData.getString("PR_MACHINE_NO")+" is locked for Party Code : "+rsData.getString("PR_PARTY_CODE")+".");
                        return;
                    }
                    String check_lock_POSITION = data.getStringValueFromDB("SELECT COALESCE(POSITION_LOCK_IND, 0) AS POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='"+rsData.getString("PR_PARTY_CODE")+"' AND MM_MACHINE_NO='"+rsData.getString("PR_MACHINE_NO")+"' AND MM_MACHINE_POSITION='"+rsData.getString("PR_POSITION_NO")+"'");
                    if("1".equals(check_lock_POSITION))
                    {
                        JOptionPane.showMessageDialog(null, "Machine : "+rsData.getString("PR_MACHINE_NO")+" AND Position : "+rsData.getString("PR_POSITION_NO")+" is locked for Party Code : "+rsData.getString("PR_PARTY_CODE")+".");
                        return;
                    }
                    
                    try {
                        DataModel_Exist.setValueByVariable("POSITION_DESC", data.getStringValueFromDB("SELECT POSITION_DESC FROM PRODUCTION.FELT_MACHINE_POSITION_MST WHERE POSITION_NO='" + rsData.getString("PR_POSITION_NO") + "'"), 0);
                    } catch (Exception ew) {
                        ew.printStackTrace();
                        //System.out.println("Error on getting from Machine Master");
                    }
                    DataModel_Exist.setValueByVariable("PRODUCT", rsData.getString("PR_PRODUCT_CODE"), 0);
                    DataModel_Exist.setValueByVariable("PRODUCT_DESCRIPTION", data.getStringValueFromDB("SELECT PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsData.getString("PR_PRODUCT_CODE") + "'  AND APPROVED=1 AND CANCELED=0 AND EFFECTIVE_FROM<='" + EITLERPGLOBAL.getCurrentDateDB() + "' AND (EFFECTIVE_TO>='" + EITLERPGLOBAL.getCurrentDateDB() + "' OR EFFECTIVE_TO='0000-00-00')"), 0);
                    DataModel_Exist.setValueByVariable("PRODUCT_GROUP", rsData.getString("PR_GROUP"), 0);
                    DataModel_Exist.setValueByVariable("LENGTH", rsData.getString("PR_LENGTH"), 0);
                    DataModel_Exist.setValueByVariable("WIDTH", rsData.getString("PR_WIDTH"), 0);
                    DataModel_Exist.setValueByVariable("GSM", rsData.getString("PR_GSM"), 0);
                    DataModel_Exist.setValueByVariable("WEIGHT", rsData.getString("PR_THORITICAL_WEIGHT"), 0);
                    DataModel_Exist.setValueByVariable("SQ_MT", rsData.getString("PR_SQMTR"), 0);
                    DataModel_Exist.setValueByVariable("STYLE", rsData.getString("PR_STYLE"), 0);
                    DataModel_Exist.setValueByVariable("REQ_MONTH", rsData.getString("PR_REQUESTED_MONTH"), 0);
                    DataModel_Exist.setValueByVariable("SYN_PER", rsData.getString("PR_SYN_PER"), 0);
                    DataModel_Exist.setValueByVariable("REMARK", rsData.getString("PR_PIECE_REMARK"), 0);
                    DataModel_Exist.setValueByVariable("BILL_LENGTH", rsData.getString("PR_BILL_LENGTH"), 0);
                    DataModel_Exist.setValueByVariable("BILL_WIDTH", rsData.getString("PR_BILL_WIDTH"), 0);
                    DataModel_Exist.setValueByVariable("BILL_WEIGHT", rsData.getString("PR_BILL_WEIGHT"), 0);
                    DataModel_Exist.setValueByVariable("BILL_SQMTR", rsData.getString("PR_BILL_SQMTR"), 0);
                    DataModel_Exist.setValueByVariable("BILL_GSM", rsData.getString("PR_BILL_GSM"), 0);
                    DataModel_Exist.setValueByVariable("BILL_PRODUCT_CODE", rsData.getString("PR_BILL_PRODUCT_CODE"), 0);
                    DataModel_Exist.setValueByVariable("PIECE_STAGE", rsData.getString("PR_PIECE_STAGE"), 0);

                    DataModel_Exist.setValueByVariable("ACTUAL_LENGTH", rsData.getString("PR_ACTUAL_LENGTH"), 0);
                    DataModel_Exist.setValueByVariable("ACTUAL_WIDTH", rsData.getString("PR_ACTUAL_WIDTH"), 0);
                    DataModel_Exist.setValueByVariable("ACTUAL_WEIGHT", rsData.getString("PR_ACTUAL_WEIGHT"), 0);

                    if (rsData.getString("PR_PRODUCT_CODE").startsWith("7")) {
                        cmbDivisionBy.setEnabled(true);
                    } else {
                        cmbDivisionBy.setSelectedItem("By Width");
                        cmbDivisionBy.setEnabled(false);
                    }

                } catch (Exception e) {
                    System.out.println("Error onm fetch data for  Piece Register " + e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_txtPieceNoFocusLost

    private void cmbDivisionByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDivisionByItemStateChanged
        // TODO add your handling code here:

        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            cmbDivisionBy.removeItem("----SELECT-----");
            Division_of_Piece();
        }

    }//GEN-LAST:event_cmbDivisionByItemStateChanged

    private void cmbNo_Of_DivisionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbNo_Of_DivisionItemStateChanged
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            Division_of_Piece();
        }
    }//GEN-LAST:event_cmbNo_Of_DivisionItemStateChanged

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:

        if (EditMode == EITLERPGLOBAL.ADD && cmbNo_Of_Division.getSelectedItem().equals("2")) {
            float total_existing_length;
            float total_existing_width;
//            if (DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("IN STOCK") || DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("STOCK")) {
//                total_existing_length = Float.parseFloat(DataModel_Exist.getValueByVariable("ACTUAL_LENGTH", 0));
//                total_existing_width = Float.parseFloat(DataModel_Exist.getValueByVariable("ACTUAL_WIDTH", 0));
//            } else {
//                total_existing_length = Float.parseFloat(DataModel_Exist.getValueByVariable("LENGTH", 0));
//                total_existing_width = Float.parseFloat(DataModel_Exist.getValueByVariable("WIDTH", 0));
//            }

            total_existing_length = Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_LENGTH", 0));
            total_existing_width = Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_WIDTH", 0));
            
            if (cmbDivisionBy.getSelectedItem().equals("By Length")) {
                if (Table.getSelectedRow() == 0) {
                    float length_0 = Float.parseFloat(DataModel.getValueByVariable("LENGTH", 0));
                    float length_1 = total_existing_length - length_0;
                    DataModel.setValueByVariable("LENGTH", EITLERPGLOBAL.round(length_1, 2) + "", 1);
                } else {
                    float length_1 = Float.parseFloat(DataModel.getValueByVariable("LENGTH", 1));
                    float length_0 = total_existing_length - length_1;
                    DataModel.setValueByVariable("LENGTH", EITLERPGLOBAL.round(length_0, 2) + "", 0);
                }
            } else if (cmbDivisionBy.getSelectedItem().equals("By Width")) {
                if (Table.getSelectedRow() == 0) {
                    float width_0 = Float.parseFloat(DataModel.getValueByVariable("WIDTH", 0));
                    float width_1 = total_existing_width - width_0;
                    DataModel.setValueByVariable("WIDTH", EITLERPGLOBAL.round(width_1, 2) + "", 1);
                } else {
                    float width_1 = Float.parseFloat(DataModel.getValueByVariable("WIDTH", 1));
                    float width_0 = total_existing_width - width_1;
                    DataModel.setValueByVariable("WIDTH", EITLERPGLOBAL.round(width_0, 2) + "", 0);
                }
            }
        }

        float total_length = 0;
        float total_width = 0;
        for (int i = 0; i < Table.getRowCount(); i++) {
            if (cmbDivisionBy.getSelectedItem().equals("By Length")) {
                total_length = total_length + Float.parseFloat(DataModel.getValueByVariable("LENGTH", i));
                total_width = Float.parseFloat(DataModel.getValueByVariable("WIDTH", i));
            } else if (cmbDivisionBy.getSelectedItem().equals("By Width")) {
                total_length = Float.parseFloat(DataModel.getValueByVariable("LENGTH", i));
                total_width = total_width + Float.parseFloat(DataModel.getValueByVariable("WIDTH", i));
            }

            float length = Float.parseFloat(DataModel.getValueByVariable("LENGTH", i));
            float width = Float.parseFloat(DataModel.getValueByVariable("WIDTH", i));

            float length_per = length * 100 / Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_LENGTH", 0));
            float width_per = width * 100 / Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_WIDTH", 0));
            
            float weight = (length * width * Integer.parseInt(DataModel_Exist.getValueByVariable("GSM", 0))) / 1000;
            float sq_mtr = length * width;

            DataModel.setValueByVariable("THEORTICAL_WEIGHT", EITLERPGLOBAL.round(weight, 1) + "", i);
            DataModel.setValueByVariable("SQ_MT", EITLERPGLOBAL.round(sq_mtr, 2) + "", i);
            
            DataModel.setValueByVariable("DIVISION_LENGTH_PER", EITLERPGLOBAL.round(length_per, 2) + "", i);
            DataModel.setValueByVariable("DIVISION_WIDTH_PER", EITLERPGLOBAL.round(width_per, 2) + "", i);
        }
        Total_length.setText(String.format("%.2f", total_length));
        Total_Width.setText(String.format("%.2f", total_width));

    }//GEN-LAST:event_TableKeyReleased

    private void txtPieceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPieceNoKeyPressed
        // TODO add your handling code here:
        FormatGrid();
        FormatGrid_exist();
        if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
            cmbNo_Of_Division.requestFocus();
        } else if (evt.getKeyCode() == 112) {
            try {
                LOV aList = new LOV();

                aList.SQL = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_PIECE_STAGE  FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE IN ('WEAVING','MENDING','NEEDLING','IN STOCK','SEAMING') AND A.PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') AND A.PR_PARTY_CODE=B.PARTY_CODE";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                aList.UseSpecifiedConn = true;
                aList.dbURL = EITLERPGLOBAL.DatabaseURL;

                if (aList.ShowLOV()) {
                    txtPieceNo.setText(aList.ReturnVal);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtPieceNoKeyPressed
    private void ReportShow() {

//        try {
//            TReportWriter.SimpleDataProvider.TRow objRow;
//            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
//            
//            objReportData.AddColumn("P_D_NO");
//            objReportData.AddColumn("S_ORDER_DATE");
//            objReportData.AddColumn("PARTY_CODE");
//            objReportData.AddColumn("PARTY_NAME");
//            objReportData.AddColumn("REGION");
//            objReportData.AddColumn("MACHINE_NO");
//            objReportData.AddColumn("POSITION");
//            objReportData.AddColumn("PIECE_NO");
//            objReportData.AddColumn("PRODUCT_CODE");
//            objReportData.AddColumn("S_GROUP");
//            objReportData.AddColumn("SYN_PER");
//            objReportData.AddColumn("LENGTH");
//            objReportData.AddColumn("WIDTH");
//            objReportData.AddColumn("GSM");
//            objReportData.AddColumn("THORITICAL_WIDTH");
//            objReportData.AddColumn("SQ_MTR");
//            objReportData.AddColumn("STYLE");
//            objReportData.AddColumn("REQ_MONTH");
//            objReportData.AddColumn("CITY_ID");
//            objReportData.AddColumn("DISTRICT");
//            objReportData.AddColumn("COUNTRY_NAME");
//            objReportData.AddColumn("OV_RATE");
//            objReportData.AddColumn("OV_AMT");
//            objReportData.AddColumn("P_O_NO");
//            objReportData.AddColumn("P_O_DATE");
//            objReportData.AddColumn("REFERENCE");
//            objReportData.AddColumn("REFERENCE_DATE");
//            objReportData.AddColumn("REMARK");
//            objReportData.AddColumn("SR_NO");
//            
//            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
//            
//            objOpeningRow.setValue("P_D_NO","");
//            objOpeningRow.setValue("S_ORDER_DATE","");
//            objOpeningRow.setValue("PARTY_CODE","");
//            objOpeningRow.setValue("PARTY_NAME","");
//            objOpeningRow.setValue("REGION","");
//            objOpeningRow.setValue("MACHINE_NO","");
//            objOpeningRow.setValue("POSITION","");
//            objOpeningRow.setValue("PIECE_NO","");
//            objOpeningRow.setValue("PRODUCT_CODE","");
//            objOpeningRow.setValue("S_GROUP","");
//            objOpeningRow.setValue("SYN_PER","");
//            objOpeningRow.setValue("LENGTH","");
//            objOpeningRow.setValue("WIDTH","");
//            objOpeningRow.setValue("GSM","");
//            objOpeningRow.setValue("THORITICAL_WIDTH","");
//            objOpeningRow.setValue("SQ_MTR","");
//            objOpeningRow.setValue("STYLE","");
//            objOpeningRow.setValue("REQ_MONTH","");
//            objOpeningRow.setValue("CITY_ID","");
//            objOpeningRow.setValue("DISTRICT","");
//            objOpeningRow.setValue("COUNTRY_NAME","");
//            objOpeningRow.setValue("OV_RATE","");
//            objOpeningRow.setValue("OV_AMT","");
//            objOpeningRow.setValue("P_O_NO","");
//            objOpeningRow.setValue("P_O_DATE","");
//            objOpeningRow.setValue("REFERENCE","");
//            objOpeningRow.setValue("REFERENCE_DATE","");
//            objOpeningRow.setValue("REMARK","");
//            objOpeningRow.setValue("SR_NO","");
//            
//            String query_str="";
//            
//            DateFormat df = new SimpleDateFormat("dd/mm/yyyy");
//            DateFormat df1 = new SimpleDateFormat("yyyy-mm-dd");
//            
//            DOC_NO = PDNo.getText();
//            
//            //String strSQL="SELECT A.PKG_BALE_NO,A.PKG_BALE_DATE,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME,PKG_TRANSPORT_MODE, A.PKG_STATION,A.PKG_BOX_SIZE, B.PKG_PIECE_NO,B.PKG_LENGTH,B.PKG_WIDTH,B.PKG_GSM,B.PKG_SQM,B.PKG_ORDER_NO, B.PKG_ORDER_DATE,B.PKG_MCN_POSITION_DESC,B.PKG_STYLE,B.PKG_SYN_PER,B.PKG_PRODUCT_CODE FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_PARTY_CODE='"+txtPartyCode.getText().trim()+"' GROUP BY A.PKG_PARTY_CODE;";
//            //String strSQL="SELECT A.S_ORDER_DATE,A.PARTY_CODE,substr(A.PARTY_NAME,1,25) AS PARTY_NAME,A.REGION, B.MACHINE_NO,B.POSITION,B.PIECE_NO,B.PRODUCT_CODE,B.S_GROUP,B.SYN_PER,B.LENGTH,B.WIDTH,B.GSM,B.OV_RATE,B.OV_AMT  FROM PRODUCTION.FELT_SALES_ORDER_HEADER A,PRODUCTION.FELT_SALES_ORDER_DETAIL B where A.APPROVED=1 AND B.PIECE_NO!=''  AND A.PARTY_CODE!='' "+query_str+" and A.P_D_NO = B.P_D_NO";
//            String strSQL = "SELECT  A.P_D_NO, A.S_ORDER_DATE, A.REGION, A.SALES_ENGINEER, A.REGION, "
//                    + "A.PARTY_CODE, A.PARTY_NAME, A.REFERENCE, A.REFERENCE_DATE, A.P_O_NO, "
//                    + "A.P_O_DATE, A.REMARK, A.CREATED_BY, A.CREATED_DATE, A.APPROVED, B.SR_NO, "
//                    + "B.MACHINE_NO, B.POSITION, B.POSITION_DESC, B.PIECE_NO, B.PRODUCT_CODE, "
//                    + "B.PRODUCT_DESC, B.S_GROUP, B.LENGTH, B.WIDTH, B.GSM, B.THORITICAL_WIDTH, "
//                    + "B.SQ_MTR, B.STYLE, B.REQ_MONTH, B.SYN_PER, B.OV_RATE, B.OV_AMT, PM.CITY_ID, "
//                    + "PM.DISTRICT, CM.COUNTRY_NAME FROM PRODUCTION.FELT_SALES_ORDER_HEADER A, PRODUCTION.FELT_SALES_ORDER_DETAIL B, DINESHMILLS.D_SAL_PARTY_MASTER PM, DINESHMILLS.D_SAL_COUNTRY_MASTER CM   where  A.P_D_NO = B.P_D_NO AND   A.PARTY_CODE = PM.PARTY_CODE AND  PM.COUNTRY_ID = CM.COUNTRY_ID AND   B.P_D_NO = '"+DOC_NO+"'";
//            System.out.println(strSQL);
//            
//            ResultSet rsTmp=data.getResult(strSQL);
//            rsTmp.first();
//            
//            int Counter = 0;
//            
//            if(rsTmp.getRow()>0) {
//                while(!rsTmp.isAfterLast()) {
//                    Counter ++;
//                    objRow=objReportData.newRow();
//                    
//                    
//                    objRow.setValue("P_D_NO",UtilFunctions.getString(rsTmp,"P_D_NO",""));
//                    objRow.setValue("S_ORDER_DATE",UtilFunctions.getString(rsTmp,"S_ORDER_DATE",""));
//                    objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
//                    objRow.setValue("PARTY_NAME",UtilFunctions.getString(rsTmp,"PARTY_NAME",""));
//                    objRow.setValue("REGION",UtilFunctions.getString(rsTmp,"REGION",""));
//                    objRow.setValue("MACHINE_NO",UtilFunctions.getString(rsTmp,"MACHINE_NO",""));
//                    objRow.setValue("POSITION",UtilFunctions.getString(rsTmp,"POSITION",""));
//                    objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTmp,"PIECE_NO",""));
//                    objRow.setValue("PRODUCT_CODE",UtilFunctions.getString(rsTmp,"PRODUCT_CODE",""));
//                    objRow.setValue("S_GROUP",UtilFunctions.getString(rsTmp,"S_GROUP",""));
//                    objRow.setValue("SYN_PER",UtilFunctions.getString(rsTmp,"SYN_PER",""));
//                    objRow.setValue("LENGTH",UtilFunctions.getString(rsTmp,"LENGTH",""));
//                    objRow.setValue("WIDTH",UtilFunctions.getString(rsTmp,"WIDTH",""));
//                    objRow.setValue("GSM",UtilFunctions.getString(rsTmp,"GSM",""));
//                    objRow.setValue("THORITICAL_WIDTH",UtilFunctions.getString(rsTmp,"THORITICAL_WIDTH",""));
//                    objRow.setValue("SQ_MTR",UtilFunctions.getString(rsTmp,"SQ_MTR",""));
//                    objRow.setValue("STYLE",UtilFunctions.getString(rsTmp,"STYLE",""));
//                    objRow.setValue("REQ_MONTH",UtilFunctions.getString(rsTmp,"REQ_MONTH",""));
//                    objRow.setValue("CITY_ID",UtilFunctions.getString(rsTmp,"CITY_ID",""));
//                    objRow.setValue("DISTRICT",UtilFunctions.getString(rsTmp,"DISTRICT",""));
//                    objRow.setValue("COUNTRY_NAME",UtilFunctions.getString(rsTmp,"COUNTRY_NAME",""));
//                    objRow.setValue("OV_RATE",UtilFunctions.getString(rsTmp,"OV_RATE",""));
//                    objRow.setValue("OV_AMT",UtilFunctions.getString(rsTmp,"OV_AMT",""));
//                    objRow.setValue("P_O_NO",UtilFunctions.getString(rsTmp,"P_O_NO",""));
//                    objRow.setValue("P_O_DATE",UtilFunctions.getString(rsTmp,"P_O_DATE",""));
//                    objRow.setValue("REFERENCE",UtilFunctions.getString(rsTmp,"REFERENCE",""));
//                    objRow.setValue("REFERENCE_DATE",UtilFunctions.getString(rsTmp,"REFERENCE_DATE",""));
//                    objRow.setValue("REMARK",UtilFunctions.getString(rsTmp,"REMARK",""));
//                    objRow.setValue("SR_NO",UtilFunctions.getString(rsTmp,"SR_NO",""));
//            
//                    objReportData.AddRow(objRow);
//                    
//                    rsTmp.next();
//                }
//            }
//            
//            int Comp_ID = EITLERPGLOBAL.gCompanyID;
//            
//            HashMap Parameters=new HashMap();
//            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
//            //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptfeltPieceDivision.rpt");
//            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/FeltSales/feltPieceDivision.rpt",Parameters,objReportData);
//            
//        }
//        catch(Exception e) {
//            System.out.println("Error : "+e.getLocalizedMessage());
//            e.printStackTrace();
//        }
    }

    private void MoveFirst() {
        feltPieceDivision.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        feltPieceDivision.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        feltPieceDivision.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        feltPieceDivision.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        clearFields();

        EditMode = EITLERPGLOBAL.ADD;
        DisableToolbar();
        SetFields(true);
        SetupApproval();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 222;

        PDDate.setText(df.format(new Date()));
        FFNo = aList.FirstFreeNo;
        PDNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("Felt Piece Division - " + PDNo.getText());
        txtPieceNo.requestFocus();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.Order.frmFindfeltPieceDivision", true);
        frmFindPieceDivision ObjFindfeltPieceDivision = (frmFindPieceDivision) ObjLoader.getObj();

        if (ObjFindfeltPieceDivision.Cancelled == false) {
            if (!feltPieceDivision.Filter(ObjFindfeltPieceDivision.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt Division", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindEx(int pCompanyID, String AmendID) {
        feltPieceDivision.Filter(" P_D_NO='" + AmendID + "'");
        feltPieceDivision.MoveFirst();
        DisplayData();
    }

    // find rate update by doc no
    public void Find(String docNo) {
        feltPieceDivision.Filter(" P_D_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        feltPieceDivision.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        if (txtPieceNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Piece No");
            txtPieceNo.requestFocus();
            return;
        }

        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Data not correct");
            return;
        }
        
        if(data.IsRecordExist("SELECT H.PC_DOC_NO FROM PRODUCTION.FELT_SALES_PIECE_CLUBBING_HEADER H,PRODUCTION.FELT_SALES_PIECE_CLUBBING_DETAIL D\n" +
            "where H.CANCELED=0 AND H.PC_DOC_NO=D.PC_DOC_NO AND D.PIECE_NO='"+txtPieceNo.getText()+"'"))
        {
            String DocNo = data.getStringValueFromDB("SELECT H.PC_DOC_NO FROM PRODUCTION.FELT_SALES_PIECE_CLUBBING_HEADER H,PRODUCTION.FELT_SALES_PIECE_CLUBBING_DETAIL D\n" +
            "where H.CANCELED=0 AND H.PC_DOC_NO=D.PC_DOC_NO AND D.PIECE_NO='"+txtPieceNo.getText()+"'");
            JOptionPane.showMessageDialog(this, "Piece "+txtPieceNo.getText()+" is exist in Clubbing "+DocNo+", So you can not create division for this piece.");
            return;
        }

//        if(Float.parseFloat(Total_length.getText()) != Float.parseFloat(DataModel_Exist.getValueByVariable("LENGTH", 0)))
//        {
//            JOptionPane.showMessageDialog(null, "Total Length is not match as per Existing Piece length");
//            return;
//        }
//        
//        if(Float.parseFloat(Total_Width.getText()) != Float.parseFloat(DataModel_Exist.getValueByVariable("WIDTH", 0)))
//        {
//            JOptionPane.showMessageDialog(null, "Total Width is not match as per Existing Piece width");
//            return;
//        }
//        
        float total_existing_length;
        float total_existing_width;
//        if (DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("IN STOCK") || DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("STOCK")) {
//            total_existing_length = Float.parseFloat(DataModel_Exist.getValueByVariable("ACTUAL_LENGTH", 0));
//            total_existing_width = Float.parseFloat(DataModel_Exist.getValueByVariable("ACTUAL_WIDTH", 0));
//        } else {
//            total_existing_length = Float.parseFloat(DataModel_Exist.getValueByVariable("LENGTH", 0));
//            total_existing_width = Float.parseFloat(DataModel_Exist.getValueByVariable("WIDTH", 0));
//        }

            total_existing_length = Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_LENGTH", 0));
            total_existing_width = Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_WIDTH", 0));

            if (Float.parseFloat(Total_length.getText()) != total_existing_length) {
                JOptionPane.showMessageDialog(null, "Total Length is not match as per Existing Piece length");
                return;
            }

        if (Float.parseFloat(Total_Width.getText()) != total_existing_width) {
            JOptionPane.showMessageDialog(null, "Total Width is not match as per Existing Piece width");
            return;
        }

        String PARTY_CODE = DataModel_Exist.getValueByVariable("PARTY_CODE", 0);
        String MACHINE_NO = DataModel_Exist.getValueByVariable("MACHINE_NO", 0);
        String POSITION = DataModel_Exist.getValueByVariable("POSITION", 0);
        
        String check_lock = data.getStringValueFromDB("SELECT COALESCE(PARTY_LOCK, 0) AS PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE='"+PARTY_CODE+"'");
        if("1".equals(check_lock))
        {
            JOptionPane.showMessageDialog(null, "Party Code : "+PARTY_CODE+" is locked.");
            return;
        }
        String check_lock_MACHINE = data.getStringValueFromDB("SELECT COALESCE(MACHINE_LOCK_IND, 0) AS PARTY_LOCK FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MM_PARTY_CODE='"+PARTY_CODE+"' AND MM_MACHINE_NO='"+MACHINE_NO+"'");
        if("1".equals(check_lock_MACHINE))
        {
            JOptionPane.showMessageDialog(null, "Machine : "+MACHINE_NO+" is locked for Party Code : "+PARTY_CODE+".");
            return;
        }
        String check_lock_POSITION = data.getStringValueFromDB("SELECT COALESCE(POSITION_LOCK_IND, 0) AS POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE MM_PARTY_CODE='"+PARTY_CODE+"' AND MM_MACHINE_NO='"+MACHINE_NO+"' AND MM_MACHINE_POSITION='"+POSITION+"'");
        if("1".equals(check_lock_POSITION))
        {
            JOptionPane.showMessageDialog(null, "Machine : "+MACHINE_NO+" AND Position : "+POSITION+" is locked for Party Code : "+PARTY_CODE+".");
            return;
        }
        
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //feltPieceDivision.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (feltPieceDivision.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = ModuleId;
                aList.FirstFreeNo = 222;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
                EditMode = 0;

                if (OpgFinal.isSelected()) {

                    data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE='DIVIDED',PR_DIVERSION_FLAG='',PR_DIVERTED_REASON='DIVIDED INTO " + cmbNo_Of_Division.getSelectedItem() + " PARTS' WHERE PR_PIECE_NO='" + txtPieceNo.getText() + "'");

                    try {
                        String DOC_NO = PDNo.getText();
                        String DOC_DATE = PDDate.getText();
                        String Party_Code = "";

                        String responce = JavaMail.sendFinalApprovalMail(ModuleId, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + feltPieceDivision.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (feltPieceDivision.Update()) {
                if (OpgFinal.isSelected())  {

                    data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER SET PR_PIECE_STAGE='DIVIDED',PR_DIVERSION_FLAG='',PR_DIVERTED_REASON='DIVIDED INTO " + cmbNo_Of_Division.getSelectedItem() + " PARTS' WHERE PR_PIECE_NO='" + txtPieceNo.getText() + "'");

                    /*try {
                        String DOC_NO = PDNo.getText();
                        String DOC_DATE = PDDate.getText();
                        String Party_Code = "";

                        String responce = JavaMail.sendFinalApprovalMail(ModuleId, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }*/
                    

                                    String docNo = PDNo.getText();
                                        String DOC_DATE = PDDate.getText();
                                        String Party_Code = "";
                                        int Module_Id = 760;

                                        //String responce = JavaMail.sendFinalApprovalMail(Module_Id, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                                        //System.out.println("Send Mail Responce : "+responce); 

                                        //SENDING MAIL START

                                       
                                        try {


                                            int userId = EITLERPGLOBAL.gNewUserID;
                                            int hierarchyId = SelHierarchyID;

                                            String pSubject = "Notification : Felt Sales Piece Division : " + docNo;
                                            String pMessage = "";
                                            String cc = "";

                                            if (!OpgFinal.isSelected()) {
                                                pMessage = "<br>Felt Sales Piece Division No : " + docNo + " has been approve and forward by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                                            } else {
                                                pMessage = "<br>Felt Sales Piece Division No : " + docNo + " has been final approved by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                                            }

                                            pMessage = pMessage + "<br>Document No : " + docNo + "";
                                            pMessage = pMessage + "<br>Document Date : " + DOC_DATE + "";
                                            


                                            Connection Conn1;
                                            Statement stmt1;
                                            ResultSet rsData1;

                                            Conn1 = data.getConn();
                                            stmt1 = Conn1.createStatement();
                                            //rsData1 = stmt1.executeQuery("SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL WHERE MASTER_NO ='" + docNo + "'");
                                            rsData1 = stmt1.executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_DIVISION_HEADER where P_D_NO= '" + docNo + "'");
                                            System.out.println("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_DIVISION_HEADER where P_D_NO= '" + docNo + "'");
                                            rsData1.first();
                                            pMessage = pMessage + "<br>Piece Division By  : "+rsData1.getString("DIVISION_BY"); 
                                            pMessage = pMessage + "<br>No of Piece Divided  : "+rsData1.getString("NO_OF_DIVISION"); 
                                            pMessage = pMessage + "<br>Remark  : "+rsData1.getString("REMARK"); 
                                            
                                            
                                            ResultSet pr_result = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+rsData1.getString("PIECE_NO")+"'");
                                            pMessage = pMessage + "<br>Original Piece Detail <br> "; 
                                            pMessage = pMessage + "<table border='1'>"
                                                    + "<tr>"
                                                    + "<th align='center'> Piece No. </th>"
                                                    + "<th align='center'> Party Code. </th>"
                                                    + "<th align='center'> Party Name. </th>"
                                                    + "<th align='center'> Product Code </th>"
                                                    + "<th align='center'> Group </th>"
                                                    + "<th align='center'> Style </th>"
                                                    + "<th align='center'> Length </th>"
                                                    + "<th align='center'> Width </th>"
                                                    + "<th align='center'> GSM </th>"
                                                    + "<th align='center'> Weight </th>"
                                                    + "<th align='center'> Sqmtr </th>"
                                                    + "</tr>";
                                            rsData1.first();
                                            if (rsData1.getRow() > 0) {
                                                pMessage = pMessage + ""
                                                            + "<tr>"
                                                            + "<td align='center'> " + pr_result.getString("PR_PIECE_NO") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_PARTY_CODE") + " </td>"
                                                            + "<td align='center'> " + clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, pr_result.getString("PR_PARTY_CODE")) + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_PRODUCT_CODE") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_GROUP") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_STYLE") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_LENGTH") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_WIDTH") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_GSM") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_THORITICAL_WEIGHT") + " </td>"
                                                            + "<td align='center'> " + pr_result.getString("PR_SQMTR") + " </td>"
                                                            + "</tr>";
                                                
                                            }
                                            pMessage = pMessage + "</table>";
                                            

                                            Connection Conn2;
                                            Statement stmt2;
                                            ResultSet rsData2;

                                            Conn2 = data.getConn();
                                            stmt2 = Conn2.createStatement();
                                            rsData2 = stmt2.executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_DIVISION_DETAIL where P_D_NO='" + docNo + "'");
                                            rsData2.first();
                                            pMessage = pMessage + "<br>Divided Piece Details <br> "; 
                                            pMessage = pMessage + "<table border='1'>"
                                                    + "<tr>"
                                                    + "<th align='center'> Piece No. </th>"
                                                    + "<th align='center'> Product Code </th>"
                                                    + "<th align='center'> Group </th>"
                                                    + "<th align='center'> Style </th>"
                                                    + "<th align='center'> Length </th>"
                                                    + "<th align='center'> Width </th>"
                                                    + "<th align='center'> GSM </th>"
                                                    + "<th align='center'> Weight </th>"
                                                    + "<th align='center'> Sqmtr </th>"
                                                    + "</tr>";
                                            if (rsData2.getRow() > 0) {
                                                while (!rsData2.isAfterLast()){ 
                                                        pMessage = pMessage + ""
                                                            + "<tr>"
                                                            + "<td align='center'> "+rsData2.getString("PIECE_NO")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("PRODUCT")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("PRODUCT_GROUP")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("STYLE")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("LENGTH")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("WIDTH")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("GSM")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("THEORTICAL_WEIGHT")+" </td>"
                                                            + "<td align='center'> "+rsData2.getString("SQ_MT")+" </td>"
                                                            + "</tr>";
                                                        rsData2.next();
                                                }
                                            }
                                            pMessage = pMessage + "</table>";

                                            pMessage = pMessage + "<br><br>All Approvers Remark as given below : ";

                                           
                                            pMessage += "<table border=1>";
                                            pMessage += "<tr><td align='center'><b> Sr.No </b></td>"
                                                    + "<td align='center'><b> User </b></td>"
                                                    + "<td align='center'><b> Date  </b></td>"
                                                    + "<td align='center'><b> Status </b></td>"
                                                    + "<td align='center'><b> Remark </b></td>"
                                                    + "</tr>";

                                            HashMap hmApprovalHistory = clsPieceDivision.getHistoryList(EITLERPGLOBAL.gCompanyID+"", docNo);
                                            for (int ij = 1; ij <= hmApprovalHistory.size(); ij++) {
                                                pMessage += "<tr>";

                                                clsPieceDivision ObjHistory = (clsPieceDivision) hmApprovalHistory.get(Integer.toString(ij));
                                                pMessage += "<td>" + Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal()) + "</td>";

                                                pMessage += "<td>" + clsUser.getUserName(2, Integer.parseInt(ObjHistory.getAttribute("MODIFIED_BY").getString())) + "</td>";

                                                pMessage += "<td>" +  ObjHistory.getAttribute("ENTRY_DATE").getString() + "</td>";

                                                String ApprovalStatus = "";

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                                                    ApprovalStatus = "Hold";
                                                }

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                                                    ApprovalStatus = "Approved";
                                                }

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                                                    ApprovalStatus = "Final Approved";
                                                }

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                                                    ApprovalStatus = "Waiting";
                                                }

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                                                    ApprovalStatus = "Rejected";
                                                }

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                                                    ApprovalStatus = "Pending";
                                                }

                                                if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                                                    ApprovalStatus = "Skiped";
                                                }
                                                pMessage += "<td>" + ApprovalStatus + "</td>";
                                                pMessage += "<td>" + ObjHistory.getAttribute("APPROVER_REMARKS").getString() + "</td>";
                                                pMessage += "</tr>";
                                            }
                                            pMessage += "</table>";
                                            pMessage += "<br><br>";
                                            pMessage += "<br>";

                                        HashMap hmSendToList;
                                            String recievers = "";

                                        pMessage = pMessage + "<br><br><br> : Email Send to : <br>";
                                        hmSendToList = clsHierarchy.getUserList(EITLERPGLOBAL.gCompanyID, hierarchyId, userId, true);
                                        for (int i = 1; i <= hmSendToList.size(); i++) {
                                            clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                                            int U_ID = ObjUser.getAttribute("USER_ID").getInt();
                            
                                            String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, U_ID);
                            
                                            System.out.println("USERID : " + U_ID + ", send_to : " + to);
                                            if (!to.equals("")) {

                                                recievers = recievers + "," + to;
                                                pMessage = pMessage + "<br>" + ObjUser.getAttribute("USER_NAME").getString();
                                            }
                                        }
                                        recievers = recievers + ",vdshanbhag@dineshmills.com,brdfltdesign@dineshmills.com,brdfltfin@dineshmills.com,feltwh@dineshmills.com,narendramotiani@dineshmills.com";
                                            pMessage = pMessage + "<br><br><br><br>**** This is an auto-generated email, please do not reply ****";

                                            System.out.println("Recivers : " + recievers);
                                            System.out.println("pSubject : " + pSubject);
                                            System.out.println("pMessage : " + pMessage);

                                            String responce = MailNotification.sendNotificationMail(Module_Id, pSubject, pMessage, recievers, cc, hierarchyId);
                                            System.out.println("Send Mail Responce : " + responce);

                                        } catch (Exception e) {
                                            e.printStackTrace();
                                            System.out.println("Error on Mail: " + e.getMessage());
                                        }
                    
                }
                EditMode = 0;
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + feltPieceDivision.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Cancel() {

        EditMode = 0;
        DisplayData();
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) feltPieceDivision.getAttribute("P_D_NO").getObj();
        if (feltPieceDivision.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            
            DisableToolbar();
            
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            
            
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (feltPieceDivision.CanDelete(PDNo.getText() + "", PDDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, feltPieceDivision.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, PDNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        SetFields(true);
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        PDDate.setEnabled(pStat);
        PDNo.setEnabled(pStat);
        txtPieceNo.setEnabled(pStat);

        if (EditMode == EITLERPGLOBAL.ADD) {
            //cmbDivisionBy.setEnabled(true);
            cmbNo_Of_Division.setEnabled(true);
        } else {
            cmbDivisionBy.setEnabled(false);
            cmbNo_Of_Division.setEnabled(false);
        }

        txtRemark.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        Table.setEnabled(pStat);
        //JOptionPane.showMessageDialog(null, "Dept Id :"+EITLERPGLOBAL.gUserDeptID);

        DataModel.ClearAllReadOnly();

        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(1);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        //DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(5);
        DataModel.SetReadOnly(6);
        DataModel.SetReadOnly(7);
        DataModel.SetReadOnly(8);
        DataModel.SetReadOnly(9);

        //By Length
        if (!((EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) && cmbDivisionBy.getSelectedItem().equals("By Length"))) {
            DataModel.SetReadOnly(10);
        }

        //By Width
        if (!((EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) && cmbDivisionBy.getSelectedItem().equals("By Width"))) {
            DataModel.SetReadOnly(11);
        }

        DataModel.SetReadOnly(12);
        DataModel.SetReadOnly(13);
        DataModel.SetReadOnly(14);
        DataModel.SetReadOnly(15);
        DataModel.SetReadOnly(16);
        DataModel.SetReadOnly(17);
        DataModel.SetReadOnly(18);
        DataModel.SetReadOnly(19);
        DataModel.SetReadOnly(20);
        DataModel.SetReadOnly(21);
        DataModel.SetReadOnly(22);
        DataModel.SetReadOnly(23);
        DataModel.SetReadOnly(24);
        DataModel.SetReadOnly(25);
        DataModel.SetReadOnly(26);
        DataModel.SetReadOnly(27);
        DataModel.SetReadOnly(28);
        DataModel.SetReadOnly(29);
        DataModel.SetReadOnly(30);
        DataModel.SetReadOnly(31);
        DataModel.SetReadOnly(32);
        DataModel.SetReadOnly(33);
        DataModel.SetReadOnly(34);
        DataModel.SetReadOnly(35);
        DataModel.SetReadOnly(36);
        DataModel.SetReadOnly(37);
        DataModel.SetReadOnly(38);
        DataModel.SetReadOnly(39);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void filterHierarchyCombo() {
        GenerateHierarchyCombo();

        String incharge = data.getStringValueFromDB("SELECT DESIGNER_INCHARGE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=''");
        System.out.println("Selected Incharge : " + incharge);

        switch (incharge) {
            case "2": {
                ArrayList<String> Hierarchy = new ArrayList<>();
                Hierarchy.add("AP-SJP-RKP");
                Hierarchy.add("AC-SJP-RKP");
                Hierarchy.add("SR-SJP-RKP");
                filter(Hierarchy);
                break;
            }
            case "1": {
                ArrayList<String> Hierarchy = new ArrayList<>();
                Hierarchy.add("AP-KM-RKP");
                Hierarchy.add("AC-KM-RKP");
                Hierarchy.add("SR-KM-RKP");
                filter(Hierarchy);
                break;
            }
        }
    }

    private void filter(ArrayList<String> Hierarchy) {
        for (String current : Hierarchy) {
            int n = cmbHierarchyModel.getIndexOf(current);
            if (n != -1) {
                cmbHierarchyModel.setSelectedItem(current);
            }
        }

    }

    private void SetData() {

        feltPieceDivision.setAttribute("P_D_NO", PDNo.getText());
        feltPieceDivision.setAttribute("P_D_DATE", PDDate.getText());

        feltPieceDivision.setAttribute("PIECE_NO", txtPieceNo.getText());
        feltPieceDivision.setAttribute("NO_OF_DIVISION", cmbNo_Of_Division.getSelectedItem());
        feltPieceDivision.setAttribute("DIVISION_BY", cmbDivisionBy.getSelectedItem());
        feltPieceDivision.setAttribute("REMARK", txtRemark.getText());

        DOC_NO = PDNo.getText();
        feltPieceDivision.setAttribute("DOC_NO", PDNo.getText());
        feltPieceDivision.setAttribute("DOC_DATE", PDDate.getText());
        feltPieceDivision.setAttribute("MODULE_ID", ModuleId);
        feltPieceDivision.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        feltPieceDivision.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        feltPieceDivision.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        feltPieceDivision.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        feltPieceDivision.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            feltPieceDivision.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            feltPieceDivision.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            feltPieceDivision.setAttribute("APPROVAL_STATUS", "R");
            feltPieceDivision.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            feltPieceDivision.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            feltPieceDivision.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            feltPieceDivision.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            feltPieceDivision.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            feltPieceDivision.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            feltPieceDivision.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            feltPieceDivision.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        try {
            feltPieceDivision.hmFeltPieceDivisionDetails.clear();

            for (int i = 0; i <= Table.getRowCount() - 1; i++) {

                clsPieceDivisionDetails objfeltPieceDivisionDetails = new clsPieceDivisionDetails();

                //objfeltPieceDivisionDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                objfeltPieceDivisionDetails.setAttribute("P_D_NO", PDNo.getText());
                objfeltPieceDivisionDetails.setAttribute("SR_NO", (i + 1));
                objfeltPieceDivisionDetails.setAttribute("PARTY_CODE", DataModel.getValueByVariable("PARTY_CODE", i));
                objfeltPieceDivisionDetails.setAttribute("PARTY_NAME", DataModel.getValueByVariable("PARTY_NAME", i));
                objfeltPieceDivisionDetails.setAttribute("MACHINE_NO", DataModel.getValueByVariable("MACHINE_NO", i));
                objfeltPieceDivisionDetails.setAttribute("POSITION", DataModel.getValueByVariable("POSITION", i));
                objfeltPieceDivisionDetails.setAttribute("POSITION_DESC", DataModel.getValueByVariable("POSITION_DESC", i));
                objfeltPieceDivisionDetails.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", i));
                objfeltPieceDivisionDetails.setAttribute("PRODUCT", DataModel.getValueByVariable("PRODUCT", i));
                objfeltPieceDivisionDetails.setAttribute("PRODUCT_DESCRIPTION", DataModel.getValueByVariable("PRODUCT_DESCRIPTION", i));
                objfeltPieceDivisionDetails.setAttribute("PRODUCT_GROUP", DataModel.getValueByVariable("PRODUCT_GROUP", i));
                objfeltPieceDivisionDetails.setAttribute("LENGTH", DataModel.getValueByVariable("LENGTH", i));
                objfeltPieceDivisionDetails.setAttribute("WIDTH", DataModel.getValueByVariable("WIDTH", i));
                objfeltPieceDivisionDetails.setAttribute("GSM", DataModel.getValueByVariable("GSM", i));
                objfeltPieceDivisionDetails.setAttribute("THEORTICAL_WEIGHT", DataModel.getValueByVariable("THEORTICAL_WEIGHT", i));
                objfeltPieceDivisionDetails.setAttribute("SQ_MT", DataModel.getValueByVariable("SQ_MT", i));
                objfeltPieceDivisionDetails.setAttribute("STYLE", DataModel.getValueByVariable("STYLE", i));
                objfeltPieceDivisionDetails.setAttribute("REQ_MONTH", DataModel.getValueByVariable("REQ_MONTH", i));
                objfeltPieceDivisionDetails.setAttribute("SYN_PER", DataModel.getValueByVariable("SYN_PER", i));
                objfeltPieceDivisionDetails.setAttribute("REMARK", DataModel.getValueByVariable("REMARK", i));
                objfeltPieceDivisionDetails.setAttribute("BILL_LENGTH", DataModel.getValueByVariable("BILL_LENGTH", i));
                objfeltPieceDivisionDetails.setAttribute("BILL_WIDTH", DataModel.getValueByVariable("BILL_WIDTH", i));
                objfeltPieceDivisionDetails.setAttribute("BILL_WEIGHT", DataModel.getValueByVariable("BILL_WEIGHT", i));
                objfeltPieceDivisionDetails.setAttribute("BILL_SQMTR", DataModel.getValueByVariable("BILL_SQMTR", i));
                objfeltPieceDivisionDetails.setAttribute("BILL_GSM", DataModel.getValueByVariable("BILL_GSM", i));
                objfeltPieceDivisionDetails.setAttribute("BILL_PRODUCT_CODE", DataModel.getValueByVariable("BILL_PRODUCT_CODE", i));

                //Piece Stage from Existing Stage
                objfeltPieceDivisionDetails.setAttribute("PIECE_STAGE", DataModel_Exist.getValueByVariable("PIECE_STAGE", 0));

                objfeltPieceDivisionDetails.setAttribute("DIVISION_LENGTH_PER", DataModel.getValueByVariable("DIVISION_LENGTH_PER", i));
                objfeltPieceDivisionDetails.setAttribute("DIVISION_WIDTH_PER", DataModel.getValueByVariable("DIVISION_WIDTH_PER", i));
                
                feltPieceDivision.hmFeltPieceDivisionDetails.put(Integer.toString(feltPieceDivision.hmFeltPieceDivisionDetails.size() + 1), objfeltPieceDivisionDetails);

            }
        } catch (Exception e) {
            System.out.println("Eroor on setData : " + e.getMessage());
            e.printStackTrace();
        };
    }

    private void Division_of_Piece() {
        /*
         DataModel_Exist.SetVariable(10  ,"LENGTH"); //10
         DataModel_Exist.SetVariable(11  ,"WIDTH"); //11
         */
        try{
        int no_of_division = Integer.parseInt(cmbNo_Of_Division.getSelectedItem().toString());
        float length;
        float width;
        
        /*
        if (DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("IN STOCK") || DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("STOCK")) {
            length = Float.parseFloat(DataModel_Exist.getValueByVariable("ACTUAL_LENGTH", 0));
            width = Float.parseFloat(DataModel_Exist.getValueByVariable("ACTUAL_WIDTH", 0));
        } else {
            length = Float.parseFloat(DataModel_Exist.getValueByVariable("LENGTH", 0));
            width = Float.parseFloat(DataModel_Exist.getValueByVariable("WIDTH", 0));
        }
        */
        length = Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_LENGTH", 0));
        width = Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_WIDTH", 0));
        
        
        //By Length
        if (cmbDivisionBy.getSelectedItem().equals("By Length")) {
            float divided_length = length / no_of_division;

            setData(divided_length, width);

        } //By Width
        else if (cmbDivisionBy.getSelectedItem().equals("By Width")) {
            float divided_width = width / no_of_division;

            setData(length, divided_width);
        } //By Length and Width
        else if (cmbDivisionBy.getSelectedItem().equals("By Length and Width")) {

        }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void setData(float length, float width) {
        FormatGrid();
        SetFields(true);
        int no_of_division = Integer.parseInt(cmbNo_Of_Division.getSelectedItem().toString());
        float total_length = 0;
        float total_width = 0;
        for (int i = 0; i < no_of_division; i++) {
            Object[] rowData = new Object[15];
            rowData[0] = 1;
            DataModel.addRow(rowData);

            DataModel.setValueByVariable("SR_NO", "" + (i + 1), i);
            DataModel.setValueByVariable("PARTY_CODE", DataModel_Exist.getValueByVariable("PARTY_CODE", 0), i);
            DataModel.setValueByVariable("PARTY_NAME", DataModel_Exist.getValueByVariable("PARTY_NAME", 0), i);
            DataModel.setValueByVariable("MACHINE_NO", DataModel_Exist.getValueByVariable("MACHINE_NO", 0), i);
            DataModel.setValueByVariable("POSITION", DataModel_Exist.getValueByVariable("POSITION", 0), i);
            DataModel.setValueByVariable("POSITION_DESC", DataModel_Exist.getValueByVariable("POSITION_DESC", 0), i);

            String Piece_tag = "";
            if (DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("IN STOCK") || DataModel_Exist.getValueByVariable("PIECE_STAGE", 0).equals("STOCK")) {
                if (DataModel_Exist.getValueByVariable("PIECE_NO", 0).trim().indexOf('V') == -1) // -1 != -1
                {
                    Piece_tag = "V" + Character.toString((char) (i + 65));
                } else {
                    Piece_tag = Character.toString((char) (i + 65));
                }
            } else {
                if (DataModel_Exist.getValueByVariable("PIECE_NO", 0).trim().indexOf('P') == -1) {
                    Piece_tag = "P" + Character.toString((char) (i + 65));
                } else {
                    Piece_tag = Character.toString((char) (i + 65));
                }
            }

            DataModel.setValueByVariable("PIECE_NO", (DataModel_Exist.getValueByVariable("PIECE_NO", 0).trim()) + Piece_tag, i);
            DataModel.setValueByVariable("PRODUCT", DataModel_Exist.getValueByVariable("PRODUCT", 0), i);

            if (DataModel_Exist.getValueByVariable("PRODUCT", 0).startsWith("7")) {
                cmbDivisionBy.setEnabled(true);
            } else {
                cmbDivisionBy.setEnabled(false);
            }

            DataModel.setValueByVariable("PRODUCT_DESCRIPTION", DataModel_Exist.getValueByVariable("PRODUCT_DESCRIPTION", 0), i);
            DataModel.setValueByVariable("PRODUCT_GROUP", DataModel_Exist.getValueByVariable("PRODUCT_GROUP", 0), i);
            DataModel.setValueByVariable("LENGTH", String.format("%.2f", length), i);
            DataModel.setValueByVariable("WIDTH", String.format("%.2f", width), i);
            DataModel.setValueByVariable("GSM", DataModel_Exist.getValueByVariable("GSM", 0), i);

            float weight = (length * width * Integer.parseInt(DataModel_Exist.getValueByVariable("GSM", 0))) / 1000;
            float sq_mtr = length * width;

            DataModel.setValueByVariable("THEORTICAL_WEIGHT", EITLERPGLOBAL.round(weight, 1) + "", i);
            DataModel.setValueByVariable("SQ_MT", EITLERPGLOBAL.round(sq_mtr, 2) + "", i);
            DataModel.setValueByVariable("STYLE", DataModel_Exist.getValueByVariable("STYLE", 0), i);
            DataModel.setValueByVariable("REQ_MONTH", DataModel_Exist.getValueByVariable("REQ_MONTH", 0), i);
            DataModel.setValueByVariable("SYN_PER", DataModel_Exist.getValueByVariable("SYN_PER", 0), i);
            DataModel.setValueByVariable("REMARK", DataModel_Exist.getValueByVariable("REMARK", 0), i);
            DataModel.setValueByVariable("BILL_LENGTH", DataModel_Exist.getValueByVariable("BILL_LENGTH", 0), i);
            DataModel.setValueByVariable("BILL_WIDTH", DataModel_Exist.getValueByVariable("BILL_WIDTH", 0), i);
            DataModel.setValueByVariable("BILL_WEIGHT", DataModel_Exist.getValueByVariable("BILL_WEIGHT", 0), i);
            DataModel.setValueByVariable("BILL_SQMTR", DataModel_Exist.getValueByVariable("BILL_SQMTR", 0), i);
            DataModel.setValueByVariable("BILL_GSM", DataModel_Exist.getValueByVariable("BILL_GSM", 0), i);
            DataModel.setValueByVariable("BILL_PRODUCT_CODE", DataModel_Exist.getValueByVariable("BILL_PRODUCT_CODE", 0), i);
            DataModel.setValueByVariable("PIECE_STAGE", DataModel_Exist.getValueByVariable("PIECE_STAGE", 0), i);

            float length_per = length * 100 / Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_LENGTH", 0));
            float width_per = width * 100 / Float.parseFloat(DataModel_Exist.getValueByVariable("BILL_WIDTH", 0));
            
            DataModel.setValueByVariable("DIVISION_LENGTH_PER", EITLERPGLOBAL.round(length_per, 2) + "", i);
            DataModel.setValueByVariable("DIVISION_WIDTH_PER", EITLERPGLOBAL.round(width_per, 2) + "", i);
            
            if (cmbDivisionBy.getSelectedItem().equals("By Length")) {
                total_length = total_length + Float.parseFloat(DataModel.getValueByVariable("LENGTH", i));
                total_width = Float.parseFloat(DataModel.getValueByVariable("WIDTH", i));
            } else if (cmbDivisionBy.getSelectedItem().equals("By Width")) {
                total_length = Float.parseFloat(DataModel.getValueByVariable("LENGTH", i));
                total_width = total_width + Float.parseFloat(DataModel.getValueByVariable("WIDTH", i));
            }
        }

        Total_length.setText("" + String.format("%.2f", total_length));
        Total_Width.setText("" + String.format("%.2f", total_width));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JFormattedTextField PDDate;
    private javax.swing.JTextField PDNo;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JTable Table_Exist;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JTextField Total_Width;
    private javax.swing.JTextField Total_length;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDivisionBy;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbNo_Of_Division;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPieceNo;
    private javax.swing.JTextField txtRemark;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
}
