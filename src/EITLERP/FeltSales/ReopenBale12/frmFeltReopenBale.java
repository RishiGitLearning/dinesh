/*
 * frmFeltReopenBale.java
 *
 * Created on June 19, 2013, 5:27 PM
 */

package EITLERP.FeltSales.ReopenBale12;

/**
 *
 * @author RAJPALSINH JADEJA
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.clsSales_Party;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.ReportUI.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import EITLERP.Finance.UtilFunctions;
import EITLERP.ReportRegister;
import TReportWriter.TReportEngine;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTextField;


public class frmFeltReopenBale extends javax.swing.JApplet {
    private clsFeltReopenBale ObjFeltReopenBale;
    
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    private int FFNo=0; //First Free No.
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    private boolean DoNotEvaluate=false;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    
    private EITLTableModel DataModelPieceNo;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel=new EITLTableModel();
    private TReportEngine objEngine=new TReportEngine();
    
    public frmPendingApprovals frmPA;
    
    
    /** Creates new form frmFeltReopenBale */
    public void init() {
        System.gc();
        setSize(1000,700);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjFeltReopenBale=new clsFeltReopenBale();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateModeReopenBaleCombo();
        txtBaleNo.setEditable(false);
        txtPartyCode.setEditable(false);
        txtTransportMode.setEditable(false);
        cmdPreview.setEnabled(true);
        lblTitle.setForeground(Color.WHITE);
        
        if(ObjFeltReopenBale.LoadData()) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(this,"Error occured while Loading Data. Error is "+ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        txtPartyCode = new javax.swing.JTextField();
        txtTransportMode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtBoxSize = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtBaleNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBaleDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtStation = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtModeOfPacking = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 810, 40);

        lblTitle.setBackground(new java.awt.Color(178, 182, 185));
        lblTitle.setText(" FELT REOPENBALE DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 810, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 200, 670, 145);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 190, 675, 4);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(620, 360, 90, 29);

        txtPartyCode.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtPartyCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPartyCode.setEnabled(false);
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(90, 70, 110, 27);
        txtPartyCode.getAccessibleContext().setAccessibleParent(this);

        txtTransportMode.setEditable(false);
        txtTransportMode.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtTransportMode.setToolTipText("");
        txtTransportMode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTransportMode.setEnabled(false);
        txtTransportMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTransportModeActionPerformed(evt);
            }
        });
        txtTransportMode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTransportModeKeyPressed(evt);
            }
        });
        Tab1.add(txtTransportMode);
        txtTransportMode.setBounds(120, 110, 140, 27);

        jLabel8.setText("Party Code");
        Tab1.add(jLabel8);
        jLabel8.setBounds(10, 70, 70, 17);

        jLabel9.setText("Transport Mode");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 110, 100, 17);

        jLabel12.setText("Box Size");
        Tab1.add(jLabel12);
        jLabel12.setBounds(50, 140, 60, 17);

        txtBoxSize.setEditable(false);
        txtBoxSize.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtBoxSize.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtBoxSize.setEnabled(false);
        Tab1.add(txtBoxSize);
        txtBoxSize.setBounds(120, 140, 130, 27);

        lblPartyName.setBackground(new java.awt.Color(255, 255, 255));
        lblPartyName.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        lblPartyName.setOpaque(true);
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(210, 70, 280, 30);

        jLabel1.setText("Bale No");
        Tab1.add(jLabel1);
        jLabel1.setBounds(10, 40, 60, 17);

        txtBaleNo.setEnabled(false);
        txtBaleNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtBaleNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBaleNoFocusLost(evt);
            }
        });
        txtBaleNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBaleNoKeyPressed(evt);
            }
        });
        Tab1.add(txtBaleNo);
        txtBaleNo.setBounds(90, 40, 130, 27);

        jLabel2.setText("Bale Date");
        Tab1.add(jLabel2);
        jLabel2.setBounds(300, 40, 70, 17);

        txtBaleDate.setEditable(false);
        txtBaleDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBaleDateActionPerformed(evt);
            }
        });
        Tab1.add(txtBaleDate);
        txtBaleDate.setBounds(370, 30, 140, 27);

        jLabel4.setText("Station");
        Tab1.add(jLabel4);
        jLabel4.setBounds(500, 70, 60, 17);

        txtStation.setEditable(false);
        Tab1.add(txtStation);
        txtStation.setBounds(550, 70, 150, 27);

        jLabel5.setText("Mode Of Packing");
        Tab1.add(jLabel5);
        jLabel5.setBounds(270, 110, 106, 17);

        txtModeOfPacking.setEditable(false);
        Tab1.add(txtModeOfPacking);
        txtModeOfPacking.setBounds(400, 110, 130, 27);

        lblRevNo.setText("....");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(230, 40, 30, 20);

        jLabel3.setText("Doc No ");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 10, 60, 17);

        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(90, 10, 130, 27);

        Tab.addTab("ReopenBale Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 230, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 230, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 540, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 160, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 212, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 230, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 242, 60, 17);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 240, 590, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(457, 273, 100, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(633, 70, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(574, 273, 100, 29);

        Tab.addTab("Approval", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 670, 100);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 132, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 150, 550, 150);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(570, 275, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(570, 180, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(570, 150, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 210, 110, 33);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 76, 810, 430);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 510, 740, 22);
    }// </editor-fold>//GEN-END:initComponents
                            
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
    BaleReopenReport();    
    //Report();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(this,"Select a row from Document Update History","ERROR",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltReopenBale.HistoryView = false;
        ObjFeltReopenBale.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed
    
    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltReopenBale.ShowHistory(EITLERPGLOBAL.formatDateDB(txtBaleDate.getText()), txtBaleNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
            
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
        
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(740,ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltReopenBale.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
            
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtBaleDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtBaleDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBaleDateActionPerformed
       
    }//GEN-LAST:event_txtBaleDateActionPerformed

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
      if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL="SELECT PARTY_CODE, PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            
            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
            }
            
        }

    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtPartyCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusGained
        lblStatus.setText("Press F1 for Party Code");
    }//GEN-LAST:event_txtPartyCodeFocusGained

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed

    }//GEN-LAST:event_TableKeyPressed

    private void txtTransportModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTransportModeActionPerformed
    
    }//GEN-LAST:event_txtTransportModeActionPerformed

    private void txtTransportModeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTransportModeKeyPressed

    }//GEN-LAST:event_txtTransportModeKeyPressed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
           try {
            if (!txtPartyCode.getText().equals("")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=" + txtPartyCode.getText().trim() + "";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                lblPartyName.setText(rsTmp.getString("PARTY_NAME"));
                txtStation.requestFocus();
            }
        } catch (Exception e) {

        }
       
        
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtBaleNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBaleNoKeyPressed
             if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL="SELECT PKG_BALE_NO,PKG_BALE_DATE,PKG_PARTY_CODE,PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE APPROVED=1 AND PKG_BALE_NO!=0 AND INVOICE_FLG=0 AND CONCAT(PKG_BALE_NO,PKG_BALE_DATE) NOT IN (SELECT CONCAT(BALE_NO,BALE_DATE) FROM PRODUCTION.FELT_REOPEN_BALE_HEADER WHERE CANCELED=0)";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            
            if (aList.ShowLOV()) {
                txtBaleNo.setText(aList.ReturnVal);
                txtBaleDate.setText(EITLERPGLOBAL.formatDate(clsFeltReopenBale.getBaleDate(EITLERPGLOBAL.gCompanyID, aList.ReturnVal)));
                txtPartyCode.setText(clsFeltReopenBale.getPartyCode(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                lblPartyName.setText(clsFeltReopenBale.getParyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtStation.setText(clsFeltReopenBale.getStation(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtBoxSize.setText(clsFeltReopenBale.getboxsize(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtModeOfPacking.setText(clsFeltReopenBale.getmode(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtTransportMode.setText(clsFeltReopenBale.gettransport(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                txtBaleDate.requestFocus();
            }
            
        }
    }//GEN-LAST:event_txtBaleNoKeyPressed

    private void txtBaleNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBaleNoFocusLost
        try {
             FormatGrid();
            String baleno  = txtBaleNo.getText().trim();
           
            String baledate = txtBaleDate.getText();
            
            
            String strSQL = "SELECT * FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='"+baleno+"' AND PKG_BALE_DATE='"+EITLERPGLOBAL.formatDateDB(baledate)+"' ORDER BY PKG_BALE_DATE DESC";
            String strSQL1 = "SELECT * FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO='"+baleno+"' AND PKG_BALE_DATE='"+EITLERPGLOBAL.formatDateDB(baledate)+"' ORDER BY PKG_BALE_DATE DESC";

            ResultSet rsTmp1 = data.getResult(strSQL1);
            txtBaleDate.setText(EITLERPGLOBAL.formatDate(rsTmp1.getString("PKG_BALE_DATE")));
            txtPartyCode.setText(rsTmp1.getString("PKG_PARTY_CODE"));
            lblPartyName.setText(rsTmp1.getString("PKG_PARTY_NAME"));
            txtStation.setText(rsTmp1.getString("PKG_STATION"));
            txtTransportMode.setText(rsTmp1.getString("PKG_TRANSPORT_MODE"));
            txtBoxSize.setText(rsTmp1.getString("PKG_BOX_SIZE"));
            txtModeOfPacking.setText(rsTmp1.getString("PKG_MODE_PACKING"));
            
        
            ResultSet rsTmp = data.getResult(strSQL);
            Object[] rowData=new Object[50];
            
            if(rsTmp.first()) {
                
            while(!rsTmp.isAfterLast()){
            rowData[0]=Integer.toString(Table.getRowCount()+1);
            rowData[1]=rsTmp.getString("PKG_PIECE_NO");
            rowData[2]=rsTmp.getString("PKG_LENGTH");
            rowData[3]=rsTmp.getString("PKG_WIDTH");
            rowData[4]=rsTmp.getString("PKG_GSM");
            rowData[5]=rsTmp.getString("PKG_SQM");
            rowData[6]=rsTmp.getString("PKG_SYN_PER");
            rowData[7]=rsTmp.getString("PKG_STYLE");
            rowData[8]=rsTmp.getString("PKG_PRODUCT_CODE");
            rowData[9]=rsTmp.getString("PKG_MCN_POSITION_DESC");
            rowData[10]=rsTmp.getString("PKG_MACHINE_NO");
            rowData[11]=rsTmp.getString("PKG_ORDER_NO");
            rowData[12]=EITLERPGLOBAL.formatDate(rsTmp.getString("PKG_ORDER_DATE"));
            DataModelPieceNo.addRow(rowData);
                
                rsTmp.next();
            }
        }
     }
        catch(Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtBaleNoFocusLost
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtBaleDate;
    private javax.swing.JTextField txtBaleNo;
    private javax.swing.JTextField txtBoxSize;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtModeOfPacking;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtStation;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTransportMode;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);        
        txtTransportMode.setEnabled(pStat);
        txtBoxSize.setEnabled(pStat);
        txtBaleNo.setEnabled(pStat);
        txtBaleDate.setEnabled(pStat);
        lblPartyName.setEnabled(pStat);
        txtStation.setEnabled(pStat);
        txtModeOfPacking.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtBaleDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtBaleNo.setText("");
        txtBaleDate.setText("");
        txtPartyCode.setText("");
        lblPartyName.setText("");
        txtStation.setText("");
        txtTransportMode.setText("");
        txtBoxSize.setText("");
        txtModeOfPacking.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
    }
    
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,740)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //=========== Title Bar Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjFeltReopenBale.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else lblTitle.setBackground(Color.GRAY);
                
                if(ObjFeltReopenBale.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//
            
            
            String docNo= ObjFeltReopenBale.getAttribute("DOC_NO").getString();
            lblTitle.setText(" FELT REOPEN BALE DETAILS - "+ docNo);
            lblRevNo.setText(Integer.toString((int)ObjFeltReopenBale.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,ObjFeltReopenBale.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate=true;
            
            txtDocNo.setText(docNo);
            txtBaleNo.setText(ObjFeltReopenBale.getAttribute("BALE_NO").getString());
            txtBaleDate.setText(EITLERPGLOBAL.formatDate(ObjFeltReopenBale.getAttribute("BALE_DATE").getString()));
            txtPartyCode.setText(ObjFeltReopenBale.getAttribute("PARTY_CODE").getString());
            lblPartyName.setText(ObjFeltReopenBale.getAttribute("PARTY_NAME").getString());
            txtStation.setText(ObjFeltReopenBale.getAttribute("STATION").getString());
            txtTransportMode.setText(ObjFeltReopenBale.getAttribute("TRANSPORT_MODE").getString());
            txtBoxSize.setText(ObjFeltReopenBale.getAttribute("BOX_SIZE").getString());
            txtModeOfPacking.setText(ObjFeltReopenBale.getAttribute("MODE_PACKING").getString());
            
            FormatGrid();
            for(int i=1;i<=ObjFeltReopenBale.hmFeltReopenBaleDetails.size();i++) {
                clsFeltReopenBaleDetails ObjFeltReopenBaleDetails=(clsFeltReopenBaleDetails)ObjFeltReopenBale.hmFeltReopenBaleDetails.get(Integer.toString(i));
                
                Object[] rowData=new Object[14];
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjFeltReopenBaleDetails.getAttribute("PIECE_NO").getString();
                rowData[2]=Double.toString(EITLERPGLOBAL.round(ObjFeltReopenBaleDetails.getAttribute("LENGTH").getVal(),2));
                rowData[3]=Double.toString(EITLERPGLOBAL.round(ObjFeltReopenBaleDetails.getAttribute("WIDTH").getVal(),2));
                rowData[4]=Double.toString(EITLERPGLOBAL.round(ObjFeltReopenBaleDetails.getAttribute("GSM").getInt(),2));
                rowData[5]=Double.toString(EITLERPGLOBAL.round(ObjFeltReopenBaleDetails.getAttribute("SQM").getInt(),2));
                rowData[6]=Double.toString(EITLERPGLOBAL.round(ObjFeltReopenBaleDetails.getAttribute("SYN_PER").getInt(),2));
                rowData[7]=ObjFeltReopenBaleDetails.getAttribute("STYLE").getString();
                rowData[8]=ObjFeltReopenBaleDetails.getAttribute("PRODUCT_CODE").getString();
                rowData[9]=ObjFeltReopenBaleDetails.getAttribute("MCN_POSITION_DESC").getString();
                rowData[10]=ObjFeltReopenBaleDetails.getAttribute("MACHINE_NO").getString();
                rowData[11]=ObjFeltReopenBaleDetails.getAttribute("ORDER_NO").getString();
                rowData[12]=EITLERPGLOBAL.formatDate(ObjFeltReopenBaleDetails.getAttribute("ORDER_DATE").getString());
                
                DataModelPieceNo.addRow(rowData);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            hmList=clsFeltProductionApprovalFlow.getDocumentFlow(740, ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmList.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsFeltReopenBale.getHistoryList(ObjFeltReopenBale.getAttribute("BALE_DATE").getString(), docNo);
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsFeltReopenBale ObjFeltReopenBale=(clsFeltReopenBale)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[6];
                
                rowData[0]=Integer.toString((int)ObjFeltReopenBale.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(2, (int)ObjFeltReopenBale.getAttribute("UPDATED_BY").getVal());
                rowData[2]=ObjFeltReopenBale.getAttribute("ENTRY_DATE").getString();
                
                String ApprovalStatus="";
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjFeltReopenBale.getAttribute("APPROVER_REMARKS").getString();
                rowData[5]=ObjFeltReopenBale.getAttribute("FROM_IP").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=740 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=740 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    private void SetupApproval() {
        OpgHold.setSelected(true);
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(740,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(740,FromUserID,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(740, ObjFeltReopenBale.getAttribute("DOC_NO").getString()) ){
                OpgReject.setEnabled(false);
            }
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6063,60631)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6063,60632)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6063,60633)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6063,60634)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//
        EITLERP.SelectFirstFree aList=new EITLERP.SelectFirstFree();
        aList.ModuleID=740;
        aList.FirstFreeNo = 223;
        FFNo = aList.FirstFreeNo;
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FFNo = aList.FirstFreeNo;
        SetupApproval();
        txtDocNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 740, 223, false));
        lblTitle.setText("FELT REOPEN BALE DETAILS - "+txtBaleNo.getText());
        lblTitle.setBackground(Color.GRAY);
        txtBaleNo.setEditable(true);
        
        
    }
    
    private void Edit() {
        if(ObjFeltReopenBale.IsEditable(txtDocNo.getText(), ObjFeltReopenBale.getAttribute("BALE_DATE").getString(), EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            if(clsFeltProductionApprovalFlow.IsCreator(740,ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            }else {
                EnableApproval();
            }
        }else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//
        
        if(ObjFeltReopenBale.CanDelete(txtBaleNo.getText(),txtBaleDate.getText(), EITLERPGLOBAL.gNewUserID)){
            DisplayData();
        }else {
            JOptionPane.showMessageDialog(this,ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Save() {
       
        String docNo,baleNo,baleDate, partyCode="",partyName="",station="", transportMode="", boxSize="", modeReopenBale="", modepacking="";
        
        docNo = txtDocNo.getText().trim();
        baleNo = txtBaleNo.getText().trim();
        baleDate = txtBaleDate.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        partyName = lblPartyName.getText();
        station = txtStation.getText();
        transportMode = txtTransportMode.getText().trim();
        boxSize = txtBoxSize.getText().trim().toUpperCase();
        modepacking = txtModeOfPacking.getText().trim().trim();

        // check ReopenBale Date is Within Financial Year?
//        java.sql.Date FinFromDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
//        java.sql.Date FinToDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
//        java.sql.Date bale_Date=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(baleDate));
//        if((bale_Date.after(FinFromDate)||bale_Date.compareTo(FinFromDate)==0)&&(bale_Date.before(FinToDate)||bale_Date.compareTo(FinToDate)==0)) {
//            //Within the year
//        }else {
//            JOptionPane.showMessageDialog(this,"ReopenBale Date is Not Within Financial Year.","ERROR",JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//        
//        if(bale_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB()))>0) {
//            JOptionPane.showMessageDialog(this,"ReopenBale Date Must be Before or the Same Date as Today.","Wrong ReopenBale Date",JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        
        if(partyCode.equals("") || partyCode.equals(null) || clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,partyCode).equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Party Code.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            if(transportMode.equals("") || transportMode.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Transporter Code.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(modepacking.equals("")) {
                return;
            }
           if (boxSize.equals("")) {
            }
            
            
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Enter Correct Details. Error is : "+ nfe.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            nfe.printStackTrace();
            return;
        }
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(this,"Enter ReopenBale Details Before Saving.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int i=0, j=0;
        try{
            String pieceNo="", lengthString="", widthString="", weightString="", gsmString="",sqmString="", synPerString="",
            style="", productCode="", positionDescription="", positionNo="",  orderNo="", orderDate="";
            float length=0, width=0, weight=0;
            int synPer=0, gsm=0,sqm=0;
            
            // check duplicate piece no in table
            for(int k=0;k<=Table.getRowCount()-1;k++) {
                for(int l=k;l<=Table.getRowCount()-1;l++){
                    if(l!=k && ((String)Table.getValueAt(k, 1)).trim().equals(((String)Table.getValueAt(l, 1)).trim()) ){
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row "+(k+1)+" and "+(l+1),"ERROR",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
            
            //Check the entered details in Table.
            for(i=0;i<=Table.getRowCount()-1;i++) {
                pieceNo = ((String)Table.getValueAt(i, 1)).trim();
                lengthString = ((String)Table.getValueAt(i, 2)).trim();
                widthString = ((String)Table.getValueAt(i, 3)).trim();
                gsmString = ((String)Table.getValueAt(i, 4)).trim();
                sqmString = ((String)Table.getValueAt(i, 5)).trim();
                synPerString = ((String)Table.getValueAt(i, 6)).trim();
                style = ((String)Table.getValueAt(i, 7)).trim();
                productCode = ((String)Table.getValueAt(i, 8)).trim();
                positionDescription = ((String)Table.getValueAt(i, 9)).trim();
                positionNo = ((String)Table.getValueAt(i, 10)).trim();
                orderNo = ((String)Table.getValueAt(i, 11)).trim();
                orderDate = ((String)Table.getValueAt(i, 12)).trim();
                
                
                j++;
                if(pieceNo.equals("") || pieceNo.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter Piece No.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(lengthString.equals("") || lengthString.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter Felt Length.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(widthString.equals("") || widthString.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter Felt Width.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                
                j++;
                if(gsmString.equals("")) {
                    
                }
                
                j++;
                if(sqmString.equals("")) {
                    
                }
                
                j++;
                if(synPerString.equals("")) {
                }
                
                j++;
                if(style.equals("")) {
                    
                }
                
                j++;
                if(productCode.equals("")) {
                }
                
                j++;
                if(positionDescription.equals("")) {
                   
                }
                
                j++;
                if(positionNo.equals("")) {
                                    }
             
                
                j++;
                if(orderNo.equals("")) {
                    
                }
                j++;
                if(orderDate.equals("")) {
                    
                    return;
                }
                
                j=0;
                
                if(EditMode==EITLERPGLOBAL.ADD) {
                    if(ObjFeltReopenBale.checkPieceNoInDB(pieceNo)) {
                        JOptionPane.showMessageDialog(frmFeltReopenBale.this,"Piece No."+pieceNo+", Already Packed."," Piece No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // check Felt No. already Packed?
                if(EditMode==EITLERPGLOBAL.EDIT) {
                    if(ObjFeltReopenBale.checkPieceNoInDB(pieceNo, baleNo, baleDate)) {
                        JOptionPane.showMessageDialog(frmFeltReopenBale.this,"Piece No."+pieceNo+" Already Packed."," Piece No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Enter Correct Details at Row "+(i+1) +" and Column "+(j+1)+". Error is : "+nfe.getMessage());
            j=0;
            nfe.printStackTrace();
            return;
        }
        
        if(OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter the remarks for rejection","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected()) && cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(this,"Select the user, to whom rejected document to be send");
            return;
        }
        
        //set data for insert/update
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltReopenBale.Insert()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFeltReopenBale.Update()) {

                DisplayData();
                if (OpgFinal.isSelected()) {
                    try {                        
                        String DOC_NO = txtDocNo.getText();
                        String DOC_DATE = "";
                        String Party_Code = txtBaleNo.getText();

                        //String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        String responce = JavaMail.sendNotificationMailOfDetail(740, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), false);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving editing. Error is "+ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        txtBaleDate.setEnabled(false);
        txtToRemarks.setText("");
        EnableToolbar();
        SetMenuForRights();
        try {
            if(PENDING_DOCUMENT){
                frmPA.RefreshView();
                PENDING_DOCUMENT=false;
            }
        }catch(Exception e){e.printStackTrace();}
    }
    
    //Sets data to the Details Class Object
    private void SetData() {
        String  docNo,baleDate, baleNo, partyCode="",partyName="",station="", transportMode="", boxSize="", modeReopenBale="",modepacking="";
        
        docNo = txtDocNo.getText().trim();
        baleNo = txtBaleNo.getText().trim();
        baleDate = txtBaleDate.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        partyName = lblPartyName.getText().trim();
        station = txtStation.getText().trim();
        boxSize = txtBoxSize.getText().trim().toUpperCase();
        transportMode = txtTransportMode.getText().trim();
        modepacking = txtModeOfPacking.getText().trim();

        ObjFeltReopenBale.setAttribute("DOC_NO",docNo);
        ObjFeltReopenBale.setAttribute("BALE_NO",baleNo);
        ObjFeltReopenBale.setAttribute("BALE_DATE",baleDate);
        ObjFeltReopenBale.setAttribute("PARTY_CODE",partyCode);
        ObjFeltReopenBale.setAttribute("PARTY_NAME",partyName);
        ObjFeltReopenBale.setAttribute("STATION",station);
        ObjFeltReopenBale.setAttribute("TRANSPORT_MODE",transportMode);
        ObjFeltReopenBale.setAttribute("BOX_SIZE",boxSize);
        ObjFeltReopenBale.setAttribute("MODE_PACKING",modepacking);
        
        //-------- Update Approval Specific Fields -----------//
        ObjFeltReopenBale.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltReopenBale.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFeltReopenBale.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltReopenBale.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim());
        ObjFeltReopenBale.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if(OpgApprove.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","R");
            ObjFeltReopenBale.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFeltReopenBale.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
        }else {
            ObjFeltReopenBale.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
        

        ObjFeltReopenBale.hmFeltReopenBaleDetails.clear();
        // Insert entered data in hashmap for update or insert
        for(int i=0;i<Table.getRowCount();i++) {
            clsFeltReopenBaleDetails ObjFeltReopenBaleDetails = new clsFeltReopenBaleDetails();
            String pieceNo=(String)Table.getValueAt(i, 1);
            
            ObjFeltReopenBaleDetails.setAttribute("PIECE_NO",pieceNo); //1
            ObjFeltReopenBaleDetails.setAttribute("LENGTH",Float.parseFloat((String)Table.getValueAt(i,2)));
            ObjFeltReopenBaleDetails.setAttribute("WIDTH",Float.parseFloat((String)Table.getValueAt(i,3))); //3
            ObjFeltReopenBaleDetails.setAttribute("GSM",Float.parseFloat((String)Table.getValueAt(i,4))); //4
            ObjFeltReopenBaleDetails.setAttribute("SQM",Float.parseFloat((String)Table.getValueAt(i,5))); //5
            ObjFeltReopenBaleDetails.setAttribute("SYN_PER",Float.parseFloat((String)Table.getValueAt(i,6)));;
            ObjFeltReopenBaleDetails.setAttribute("STYLE",(String)Table.getValueAt(i,7));;
            ObjFeltReopenBaleDetails.setAttribute("PRODUCT_CODE",(String)Table.getValueAt(i,8));;
            ObjFeltReopenBaleDetails.setAttribute("MCN_POSITION_DESC",(String)Table.getValueAt(i,9));;
            ObjFeltReopenBaleDetails.setAttribute("MACHINE_NO",(String)Table.getValueAt(i,10));;
            ObjFeltReopenBaleDetails.setAttribute("ORDER_NO",(String)Table.getValueAt(i,11));;
            ObjFeltReopenBaleDetails.setAttribute("ORDER_DATE",(String)Table.getValueAt(i,12));
           
            
            ObjFeltReopenBale.hmFeltReopenBaleDetails.put(Integer.toString(ObjFeltReopenBale.hmFeltReopenBaleDetails.size()+1), ObjFeltReopenBaleDetails);
        }
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        lblPartyName.setText("");
        txtBaleDate.setEnabled(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.ReopenBale12.frmFindFeltReopenBale", true);
        frmFindFeltReopenBale ObjFindBaleReopen = (frmFindFeltReopenBale) ObjLoader.getObj();

        if (ObjFindBaleReopen.Cancelled == false) {
            if (!ObjFeltReopenBale.Filter(ObjFindBaleReopen.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltReopenBale.this, " No records found.", "Find Felt Bale ReOpen Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }
    

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltReopenBale.Filter(" DOC_NO='"+docNo+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find all pending document
    public void FindWaiting() {
        ObjFeltReopenBale.Filter("DOC_NO IN (SELECT H.DOC_NO FROM PRODUCTION.FELT_PACKING_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=740 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID, String pGroupId) {
        ObjFeltReopenBale.Filter(" DOC_NO='" + pGroupId + "'");
        ObjFeltReopenBale.MoveFirst();
        DisplayData();
    }
    private void MoveFirst() {
        ObjFeltReopenBale.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFeltReopenBale.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFeltReopenBale.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFeltReopenBale.MoveLast();
        DisplayData();
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= clsFeltProductionApprovalFlow.getRemainingUsers(740,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(740, ObjFeltReopenBale.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(740, ObjFeltReopenBale.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(740,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void FormatGrid() {
        DataModelPieceNo=new EITLTableModel();
        Table.removeAll();
        
        Table.setModel(DataModelPieceNo);
        TableColumnModel ColModel=Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModelPieceNo.addColumn("Sr.No"); //0
        DataModelPieceNo.addColumn("Piece No."); //1
        DataModelPieceNo.addColumn("Length"); //2
        DataModelPieceNo.addColumn("Width"); //3
        DataModelPieceNo.addColumn("GSM"); //4
        DataModelPieceNo.addColumn("SQM"); //5
        DataModelPieceNo.addColumn("Syn %"); //6
        DataModelPieceNo.addColumn("Style"); //7
        DataModelPieceNo.addColumn("Product Code"); //8
        DataModelPieceNo.addColumn("Position Description"); //9
        DataModelPieceNo.addColumn("Machine No"); //10
        DataModelPieceNo.addColumn("Order No"); //11
        DataModelPieceNo.addColumn("Order Date"); //12
        
        
      
        DataModelPieceNo.SetVariable(0,"");
        DataModelPieceNo.SetVariable(1,"PIECE_NO"); 
        DataModelPieceNo.SetVariable(2,"LENGTH"); 
        DataModelPieceNo.SetVariable(3,"WIDTH"); 
        DataModelPieceNo.SetVariable(4,"GSM"); 
        DataModelPieceNo.SetVariable(5,"SQM"); 
        DataModelPieceNo.SetVariable(6,"SYN_PER"); 
        DataModelPieceNo.SetVariable(7,"STYLE"); 
        DataModelPieceNo.SetVariable(8,"PRODUCT_CODE");
        DataModelPieceNo.SetVariable(9,"MCN_POSITION_DESC");
        DataModelPieceNo.SetVariable(10,"MACHINE_NO");
        DataModelPieceNo.SetVariable(11,"ORDER_NO");
        DataModelPieceNo.SetVariable(12,"ORDER_DATE");
        
        
        DataModelPieceNo.TableReadOnly(false);
        
        for(int i=1;i<=13;i++) {
            DataModelPieceNo.SetReadOnly(i);
        }
        
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
        
        TableColumnModel tcm= TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
        
        TableColumnModel tcm= TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }
    private void GenerateModeReopenBaleCombo(){
        
        EITLComboModel cmbModeReopenBaleModel = new EITLComboModel();

        ComboData aData = new ComboData();
        aData = new ComboData();
        aData.strCode = "0";
        aData.Text = "Select Mode";
        cmbModeReopenBaleModel.addElement(aData);

        
        aData = new ComboData();
        aData.strCode = "1";
        aData.Text = "SLEEVE";
        cmbModeReopenBaleModel.addElement(aData);

        
        aData = new ComboData();
        aData.strCode = "2";
        aData.Text = "BALE";
        cmbModeReopenBaleModel.addElement(aData);
        
        aData = new ComboData();
        aData.strCode = "3";
        aData.Text = "WOODEN BOX";
        cmbModeReopenBaleModel.addElement(aData);
        
  }
    
    private void Report() {
        
        try {
            
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            
            objReportData.AddColumn("BALE_NO");
            objReportData.AddColumn("BALE_DATE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PIECE_NO");
            objReportData.AddColumn("PRODUCT_CODE");
            
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("BALE_NO","");
            objOpeningRow.setValue("BALE_DATE","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("PIECE_NO","");
            objOpeningRow.setValue("PRODUCT_CODE","");
            
            String strSQL="SELECT A.PARTY_CODE,A.BALE_NO,A.BALE_DATE,B.PIECE_NO,B.PRODUCT_CODE FROM PRODUCTION.FELT_REOPEN_BALE_DETAIL B,PRODUCTION.FELT_REOPEN_BALE_HEADER A WHERE A.BALE_NO='"+txtBaleNo.getText().trim()+"' AND A.BALE_NO=B.BALE_NO ";
            
            System.out.println(strSQL);
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("BALE_NO",UtilFunctions.getString(rsTmp,"BALE_NO",""));
                    objRow.setValue("BALE_DATE",UtilFunctions.getString(rsTmp,"BALE_DATE",""));
                    objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                    objRow.setValue("PIECE_NO",UtilFunctions.getString(rsTmp,"PIECE_NO",""));
                    objRow.setValue("PRODUCT_CODE",UtilFunctions.getString(rsTmp,"PRODUCT_CODE",""));
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            
            HashMap Parameters=new HashMap();
            //Parameters.put("BALE_NO",txtBaleNo.getText().trim());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate()+" "+EITLERPGLOBAL.getCurrentTime());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptReopenBale.rpt",Parameters,objReportData);
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
 
    
  private void BaleReopenReport() {
        
        String BaleNo =txtBaleNo.getText().trim();
        
        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();
            
            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
            
            EITLERP.FeltSales.FeltPacking.ReportRegister rpt = new EITLERP.FeltSales.FeltPacking.ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT A.PRODUCT_CODE,A.PIECE_NO,A.LENGTH,B.PKG_WEIGHT,A.BALE_NO FROM PRODUCTION.FELT_REOPEN_BALE_DETAIL A,PRODUCTION.FELT_PKG_SLIP_DETAIL B,PRODUCTION.FELT_REOPEN_BALE_HEADER C WHERE A.PIECE_NO=B.PKG_PIECE_NO AND A.BALE_NO=B.PKG_BALE_NO AND A.BALE_DATE=B.PKG_BALE_DATE AND AND A.BALE_NO=C.BALE_NO AND A.BALE_NO='"+BaleNo+"' AND C.APPROVED=1 AND C.CANCELED=0 ";
            

            rpt.setReportName("/EITLERP/FeltSales/ReopenBale12/ReopenBale.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();
            

        } catch (Exception e) {
            e.printStackTrace();
        } 
    }
  
}
