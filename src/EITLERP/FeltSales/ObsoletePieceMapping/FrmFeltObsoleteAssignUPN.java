/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.ObsoletePieceMapping;

import EITLERP.AppletFrame;
import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.common.FeltInvCalc;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsSales_Party;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
//import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author DAXESH PRAJAPATI
 *
 */
public class FrmFeltObsoleteAssignUPN extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 0;
    private int ModuleId = 661;
    private String DOC_NO = "";
    private clsFeltObsoleteAssignUPN feltOrder;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();
    private frmFindFeltObsoleteAssignUPN ObjFindFeltorder;
    private EITLTableCellRenderer render_invoice = new EITLTableCellRenderer();
    private EITLTableCellRenderer Renderer1 = new EITLTableCellRenderer();
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();
    /**
     * Initializes the applet FrmFeltOrder
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();
        FormatGrid();
        //FormatGrid_OldTransaction();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
       
        feltOrder = new clsFeltObsoleteAssignUPN();
        boolean load = feltOrder.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + feltOrder.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        SetFields(false);
        file1.setVisible(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        txtDocNo.setText("0");
        txtDocDate.setText("");
       
        txtRemark.setText("");
        
        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();
        // FormatGridA();
        FormatGridHS();

        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }
        Object[] rowData = new Object[15];
        rowData[0] = 1;
        DataModel.addRow(rowData);
    }

    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            
            
            if (feltOrder.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
                
            }

            if (feltOrder.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (feltOrder.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        
        clearFields();
        try {
            txtDocNo.setText(feltOrder.getAttribute("DOC_NO").getString());
            lblTitle.setText("Felt Sales Assign UPN to Obsolete Piece - " + feltOrder.getAttribute("DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(feltOrder.getAttribute("DOC_DATE").getString()));
            txtDocumentName.setText(feltOrder.getAttribute("DOCUMENT_NAME").getString());
            txtRemark.setText(feltOrder.getAttribute("REMARK").getString());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, feltOrder.getAttribute("HIERARCHY_ID").getInt());

            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= feltOrder.hmFeltSalesOrderDetails.size(); i++) {
                clsFeltObsoleteAssignUPNDetails ObjItem = (clsFeltObsoleteAssignUPNDetails) feltOrder.hmFeltSalesOrderDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);
                int NewRow = Table.getRowCount() - 1;
                DataModel.setValueByVariable("SrNo", Integer.toString(i), NewRow);
                DataModel.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_CODE", ObjItem.getAttribute("PARTY_CODE").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_NAME", clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, ObjItem.getAttribute("PARTY_CODE").getString()), NewRow);
                DataModel.setValueByVariable("UPN", ObjItem.getAttribute("UPN").getString(), NewRow);
                DataModel.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                DataModel.setValueByVariable("PIECE_STAGE", ObjItem.getAttribute("PIECE_STAGE").getString(), NewRow);
                DataModel.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                
                DataModel.setValueByVariable("DIVISION_POSSIBILITY", ObjItem.getAttribute("DIVISION_POSSIBILITY").getBool(), NewRow);
                
                DataModel.setValueByVariable("UPN_ASSIGN_STATUS", ObjItem.getAttribute("UPN_ASSIGN_STATUS").getString(), NewRow);
                
                DataModel.setValueByVariable("UPN1", ObjItem.getAttribute("UPN1").getString(), NewRow);
                DataModel.setValueByVariable("UPN2", ObjItem.getAttribute("UPN2").getString(), NewRow);
                DataModel.setValueByVariable("UPN3", ObjItem.getAttribute("UPN3").getString(), NewRow);
                DataModel.setValueByVariable("UPN4", ObjItem.getAttribute("UPN4").getString(), NewRow);
                DataModel.setValueByVariable("UPN5", ObjItem.getAttribute("UPN5").getString(), NewRow);
                DataModel.setValueByVariable("UPN6", ObjItem.getAttribute("UPN6").getString(), NewRow);
                DataModel.setValueByVariable("UPN7", ObjItem.getAttribute("UPN7").getString(), NewRow);
                DataModel.setValueByVariable("UPN8", ObjItem.getAttribute("UPN8").getString(), NewRow);
                DataModel.setValueByVariable("UPN9", ObjItem.getAttribute("UPN9").getString(), NewRow);
                DataModel.setValueByVariable("UPN10", ObjItem.getAttribute("UPN10").getString(), NewRow);
                DataModel.setValueByVariable("UPN11", ObjItem.getAttribute("UPN11").getString(), NewRow);
                DataModel.setValueByVariable("UPN12", ObjItem.getAttribute("UPN12").getString(), NewRow);
                DataModel.setValueByVariable("UPN13", ObjItem.getAttribute("UPN13").getString(), NewRow);
                DataModel.setValueByVariable("UPN14", ObjItem.getAttribute("UPN14").getString(), NewRow);
                DataModel.setValueByVariable("UPN15", ObjItem.getAttribute("UPN15").getString(), NewRow);
                DataModel.setValueByVariable("UPN16", ObjItem.getAttribute("UPN16").getString(), NewRow);
                DataModel.setValueByVariable("UPN17", ObjItem.getAttribute("UPN17").getString(), NewRow);
                DataModel.setValueByVariable("UPN18", ObjItem.getAttribute("UPN18").getString(), NewRow);
                DataModel.setValueByVariable("UPN19", ObjItem.getAttribute("UPN19").getString(), NewRow);
                DataModel.setValueByVariable("UPN20", ObjItem.getAttribute("UPN20").getString(), NewRow);
            }

            //DoNotEvaluate=false;
            //UpdateTotals();
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = feltOrder.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = feltOrder.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsFeltObsoleteAssignUPN ObjHistory = (clsFeltObsoleteAssignUPN) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("UPDATED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("UPDATED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
            
        } catch (Exception e) {
                e.printStackTrace();
        }
       
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6601, 66011)) { //7008,70081
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6601, 66012)) { //7008,70082
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6601, 66013)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6601, 66015)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo"); //0 - Read Only
            DataModel.addColumn("Piece No"); //1
            DataModel.addColumn("Party Code"); //2
            DataModel.addColumn("Party Name"); //2
            DataModel.addColumn("UPN"); //3
            DataModel.addColumn("Length"); //3
            DataModel.addColumn("Width"); //3
            DataModel.addColumn("GSM"); //3
            DataModel.addColumn("Piece Stage"); //3
            DataModel.addColumn("Style"); //3
            DataModel.addColumn("DIVISION POSSIBILITY"); //3
            DataModel.addColumn("UPN_ASSIGN_STATUS"); //3
            DataModel.addColumn("UPN1"); //4
            DataModel.addColumn("UPN2");
            DataModel.addColumn("UPN3"); //5
            DataModel.addColumn("UPN4"); //6
            DataModel.addColumn("UPN5"); //7
            DataModel.addColumn("UPN6"); //8
            DataModel.addColumn("UPN7"); //9
            DataModel.addColumn("UPN8"); //10
            DataModel.addColumn("UPN9"); //11
            DataModel.addColumn("UPN10"); //12
            DataModel.addColumn("UPN11"); //13
            DataModel.addColumn("UPN12"); //14
            DataModel.addColumn("UPN13"); //15
            DataModel.addColumn("UPN14"); //16
            DataModel.addColumn("UPN15"); //17
            DataModel.addColumn("UPN16"); //18
            DataModel.addColumn("UPN17"); //19
            DataModel.addColumn("UPN18"); //20
            DataModel.addColumn("UPN19"); //21
            DataModel.addColumn("UPN20"); //22
            
            DataModel.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel.SetVariable(1, "PIECE_NO"); //1
            DataModel.SetVariable(2, "PARTY_CODE"); //2
            DataModel.SetVariable(3, "PARTY_NAME"); //3
            DataModel.SetVariable(4, "UPN"); //3
            DataModel.SetVariable(5, "LENGTH"); //3
            DataModel.SetVariable(6, "WIDTH"); //3
            DataModel.SetVariable(7, "GSM"); //3
            DataModel.SetVariable(8, "PIECE_STAGE"); //3
            DataModel.SetVariable(9, "STYLE"); //3
            DataModel.SetVariable(10, "DIVISION_POSSIBILITY"); //4
            DataModel.SetVariable(11, "UPN_ASSIGN_STATUS"); //4//
            DataModel.SetVariable(12, "UPN1"); //4
            DataModel.SetVariable(13, "UPN2"); //5
            DataModel.SetVariable(14, "UPN3"); //6
            DataModel.SetVariable(15, "UPN4"); //7
            DataModel.SetVariable(16, "UPN5"); //8
            DataModel.SetVariable(17, "UPN6"); //9
            DataModel.SetVariable(18, "UPN7"); //10
            DataModel.SetVariable(19, "UPN8"); //11
            DataModel.SetVariable(20, "UPN9"); //12
            DataModel.SetVariable(21, "UPN10"); //13
            DataModel.SetVariable(22, "UPN11"); //14
            DataModel.SetVariable(23, "UPN12"); //15
            DataModel.SetVariable(24, "UPN13"); //16
            DataModel.SetVariable(25, "UPN14"); //17
            DataModel.SetVariable(26, "UPN15"); //18
            DataModel.SetVariable(27, "UPN16"); //19
            DataModel.SetVariable(28, "UPN17"); //20
            DataModel.SetVariable(29, "UPN18"); //21
            DataModel.SetVariable(30, "UPN19"); //22
            DataModel.SetVariable(31, "UPN20"); //22
            
            Table.getColumnModel().getColumn(0).setMinWidth(20);
            Table.getColumnModel().getColumn(1).setMinWidth(120);
            Table.getColumnModel().getColumn(2).setMinWidth(120);
            Table.getColumnModel().getColumn(3).setMinWidth(120);
            Table.getColumnModel().getColumn(4).setMinWidth(120);
            Table.getColumnModel().getColumn(5).setMinWidth(150);
            Table.getColumnModel().getColumn(6).setMinWidth(120);
            Table.getColumnModel().getColumn(7).setMinWidth(100);
            Table.getColumnModel().getColumn(8).setMinWidth(120);
            Table.getColumnModel().getColumn(9).setMinWidth(120);
            Table.getColumnModel().getColumn(10).setMinWidth(120);
            Table.getColumnModel().getColumn(11).setMinWidth(120);
            Table.getColumnModel().getColumn(12).setMinWidth(120);
            Table.getColumnModel().getColumn(13).setMinWidth(120);
            Table.getColumnModel().getColumn(14).setMinWidth(120);
            Table.getColumnModel().getColumn(15).setMinWidth(120);
            Table.getColumnModel().getColumn(16).setMinWidth(100);
            Table.getColumnModel().getColumn(17).setMinWidth(100);
            Table.getColumnModel().getColumn(18).setMinWidth(100);
            Table.getColumnModel().getColumn(19).setMinWidth(100);
            Table.getColumnModel().getColumn(20).setMinWidth(100);
            Table.getColumnModel().getColumn(21).setMinWidth(100);
            Table.getColumnModel().getColumn(22).setMinWidth(100);
            Table.getColumnModel().getColumn(23).setMinWidth(100);
            Table.getColumnModel().getColumn(24).setMinWidth(100);
            Table.getColumnModel().getColumn(25).setMinWidth(100);
           
            Table.getColumnModel().getColumn(26).setMinWidth(100);
            Table.getColumnModel().getColumn(27).setMinWidth(100);
            Table.getColumnModel().getColumn(28).setMinWidth(100);
            Table.getColumnModel().getColumn(29).setMinWidth(100);
            Table.getColumnModel().getColumn(30).setMinWidth(100);
            Table.getColumnModel().getColumn(31).setMinWidth(100);
            
            int ImportCol2 = DataModel.getColFromVariable("DIVISION_POSSIBILITY");
            Renderer1.setCustomComponent(ImportCol2, "CheckBox");
            JCheckBox aCheckBox2 = new JCheckBox();
            aCheckBox2.setBackground(Color.WHITE);
            aCheckBox2.setVisible(true);
            
            int ImportCol_status = DataModel.getColFromVariable("UPN_ASSIGN_STATUS");
            TableColumn ObsoleteColumn = Table.getColumnModel().getColumn(ImportCol_status);
            JComboBox fields = new JComboBox();
            fields.addItem("MAPPED");
            fields.addItem("UNMAPPED");
            fields.addItem("SCRAP");
            ObsoleteColumn.setCellEditor(new DefaultCellEditor(fields));
            
//            //For Felt Design (Change Posibility )
//            if(clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID) == 39)
//            {
//                aCheckBox2.setEnabled(true);
//            }
//            else
//            {
//                aCheckBox2.setEnabled(false);
//            }
            
            aCheckBox2.setSelected(false);
            Table.getColumnModel().getColumn(ImportCol2).setCellEditor(new DefaultCellEditor(aCheckBox2));
            Table.getColumnModel().getColumn(ImportCol2).setCellRenderer(Renderer1);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------//
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        txtDocDate = new javax.swing.JFormattedTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtDocumentName = new javax.swing.JTextField();
        btnExpToExcl = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblStatus1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ltbPink = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("Doc Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 90, 30);

        jLabel3.setText("Doc No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(260, 10, 80, 30);

        txtDocNo.setEditable(false);
        txtDocNo.setBackground(new java.awt.Color(254, 242, 230));
        txtDocNo.setText("S00000001");
        txtDocNo.setEnabled(false);
        jPanel1.add(txtDocNo);
        txtDocNo.setBounds(340, 10, 200, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                TableCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                TableAncestorMoved(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 90, 910, 410);

        txtDocDate.setEditable(false);
        jPanel1.add(txtDocDate);
        txtDocDate.setBounds(90, 10, 140, 30);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(230, 10, 30, 30);

        jLabel4.setText("Remark");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 50, 80, 30);
        jPanel1.add(txtRemark);
        txtRemark.setBounds(90, 50, 450, 30);

        jLabel1.setText("Obsolete Document");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(560, 20, 150, 15);
        jPanel1.add(txtDocumentName);
        txtDocumentName.setBounds(700, 10, 210, 30);

        btnExpToExcl.setText("Export to Excel");
        btnExpToExcl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpToExclActionPerformed(evt);
            }
        });
        jPanel1.add(btnExpToExcl);
        btnExpToExcl.setBounds(754, 60, 160, 25);
        jPanel1.add(file1);
        file1.setBounds(370, 110, 517, 326);

        Tab.addTab("Order Entry", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 25);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 19);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 930, 560);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 930, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Sales Assign UPN to Spilover Piece");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 930, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 930, 22);

        lblStatus1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus1.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus1);
        lblStatus1.setBounds(20, 590, 740, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
        getContentPane().add(ltbPink);
        ltbPink.setBounds(10, 70, 0, 0);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
       // if (evt.getKeyCode() == 112 || evt.getKeyCode() == 10) {

        
    }//GEN-LAST:event_TableKeyPressed
    

   
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        DOC_NO = txtDocNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = txtDocNo.getText();
        feltOrder.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        feltOrder.HistoryView = false;
        feltOrder.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

    }//GEN-LAST:event_TabMouseClicked

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:
        if (Table.getSelectedColumn() == 1) {
            lblStatus1.setText("Press F1 for selection Machine No and Position No");
        } else {
            lblStatus1.setText("");
        }
    }//GEN-LAST:event_TableFocusGained

    private void TableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_TableAncestorMoved

    private void TableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TableCaretPositionChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TableCaretPositionChanged

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:if(Table.getSelectedColumn() == 1)
        lblStatus1.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        //jdbc:mysql://200.0.0.230:3306/PRODUCTION
        
    }//GEN-LAST:event_TableMouseClicked

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed
    

    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        
//        for(int i=1;i<=20;i++)
//        {
//            String UPN = "UPN"+i;
//            if(Table.getValueAt(Table.getSelectedRow(), DataModel.getColFromVariable("DIVISION_POSSIBILITY")).equals(false) && !DataModel.getValueByVariable(UPN, Table.getSelectedRow()).equals(""))
//            {
//                DataModel.setValueByVariable(UPN, "", Table.getSelectedRow());
//            }
//        }
    }//GEN-LAST:event_TableKeyReleased

    private void btnExpToExclActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpToExclActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                + file.toString() + " successfully ...", "Message",
                JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExpToExclActionPerformed
    private void MoveFirst() {
        feltOrder.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        feltOrder.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        feltOrder.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        feltOrder.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        EditMode = EITLERPGLOBAL.ADD;

        DisableToolbar();
        SetFields(true);
        SetupApproval();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);
        clearFields();


        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 661;
        aList.FirstFreeNo = 363;

        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
       
        FFNo = aList.FirstFreeNo;
        txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("Felt Sales Assign UPN to Obsolete Piece - " + txtDocNo.getText());
        AddPiece();
    }
    private void AddPiece()
    {
        try{
            FormatGrid();

            ResultSet rsData = data.getResult("SELECT * FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO=''");
            System.out.println("SELECT * FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO=''");
            rsData.first();
            while (!rsData.isAfterLast()) {
                        Object[] rowData = new Object[100];

                        rowData[0] = Integer.toString(1);
                        rowData[1] = rsData.getString("PIECE_NO");
                        rowData[2] = rsData.getString("PARTY_CODE");
                        rowData[3] = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, rsData.getString("PARTY_CODE")) ;
                        rowData[4] = data.getStringValueFromDB("SELECT PR_UPN from PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+rsData.getString("PIECE_NO")+"'");
                        rowData[5] = false;
                        rowData[6] = rsData.getString("UPN_ASSIGN_STATUS");//
                        //rowData[3] = rsData.getString("");
                        //rowData[4] = rsData.getString("");
                        
                        DataModel.addRow(rowData);
                        rsData.next();
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }

    }
    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.PieceSpilover.frmFindFeltObsoleteAssignUPN", true);
       

        if (ObjFindFeltorder.Cancelled == false) {
            if (!feltOrder.Filter(ObjFindFeltorder.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt Spilover UPN", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find rate update by doc no
    public void Find(String docNo) {
        feltOrder.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        //     feltOrder.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID="+ModuleId+" AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        
        int selHie =  EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        
        if(EditMode==EITLERPGLOBAL.ADD)
        {
            System.out.println("Selected Hierarchy  : "+selHie);
            HashMap hmSendToList = new HashMap();
            hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, selHie, EITLERPGLOBAL.gNewUserID);
            ArrayList<Integer> user_list = new ArrayList<>();
            for (int i = 1; i <= hmSendToList.size(); i++) {
                clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                
                int user_id = (int) ObjUser.getAttribute("USER_ID").getVal();
                user_list.add(user_id);
            }
        }

        
        
//        for (int j = 0; j < Table.getRowCount(); j++) {
//            
//            String UPN = DataModel.getValueByVariable("UPN", j);
//            String PIECE_NO = DataModel.getValueByVariable("PIECE_NO", j);
//            
//            String felt_base_value_str = data.getStringValueFromDB("SELECT MM_FELT_BASE_VALUE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL where MM_UPN_NO='"+UPN+"'");
//            System.out.println("SELECT MM_FELT_BASE_VALUE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL where MM_UPN_NO='"+UPN+"'");
//            float felt_base_value = 0;
//            try{
//                felt_base_value = Float.parseFloat(felt_base_value_str);
//            }catch(Exception e)
//            {
//                //e.printStackTrace();
//            }
//            System.out.println("BASE VALUE = "+felt_base_value);
//            if(felt_base_value!=0)
//            {
//                for(int i=1;i<=20;i++)
//                {
//                    String allocate_UPN_field = "UPN"+i;
//                    String allocate_UPN = DataModel.getValueByVariable(allocate_UPN_field, j);
//                    
//                    if(!allocate_UPN.equals(""))
//                    {
//                        String felt_base_value_str_all_upn = data.getStringValueFromDB("SELECT MM_FELT_BASE_VALUE FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL where MM_UPN_NO='"+allocate_UPN+"'");
//                    
//                        float felt_base_value_all_upn = 0;
//                        try{
//                            felt_base_value_all_upn = Float.parseFloat(felt_base_value_str_all_upn);
//                        }catch(Exception e)
//                        {
//                            e.printStackTrace();
//                        }
//                        
//                        
//                        float diff_per = 100 - ( ( felt_base_value_all_upn * 100 ) /  felt_base_value );
//                        System.out.println("100 - ( ( "+felt_base_value_all_upn+" * 100 ) /  "+felt_base_value+" )");
//                        System.out.println("allocated "+allocate_UPN_field+" , BASE VALUE : "+felt_base_value_all_upn+" , DIFF PER : "+diff_per);
//                        
//                        if(diff_per>15)
//                        {
//                            JOptionPane.showMessageDialog(this, "Piece no : "+PIECE_NO+" Base value : "+felt_base_value+", UPN : "+allocate_UPN+" Base value : "+felt_base_value_all_upn+", DIFF PER "+Math.round(diff_per)+" is not allowed more than 15%");
//                            Table.changeSelection(j-1, DataModel.getColFromVariable(allocate_UPN_field), true, true);
//                            Table.requestFocus();
//                            return;
//                        }
//                    }
//                }
//            }
//            else
//            {
//               // JOptionPane.showMessageDialog(this, "");
//            }
//        }

        if(OpgApprove.isSelected() || OpgFinal.isSelected())
        {
            for (int j = 0; j < Table.getRowCount(); j++) {
            
                String UPN = DataModel.getValueByVariable("UPN", j);
                String PIECE_NO = DataModel.getValueByVariable("PIECE_NO", j);
                String UPN_ASSIGN_STATUS = DataModel.getValueByVariable("UPN_ASSIGN_STATUS", j);
                String UPN1 = DataModel.getValueByVariable("UPN1", j);
                if(UPN_ASSIGN_STATUS.equals(""))
                {
                    JOptionPane.showMessageDialog(this, "Please select any UPN ASSIGN STATUS");
                    return;
                }
                else if(UPN_ASSIGN_STATUS.equals("MAPPED") && UPN1.equals(""))
                {
                    JOptionPane.showMessageDialog(this, "Please set atleast one UPN for MAPPED Status");
                    return;
                }
                
                if(!UPN1.equals(""))
                {
                   //String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN1+"',1,6)   AND coalesce(PARTY_CLOSE_IND,0)=0 AND coalesce(PARTY_MILL_CLOSED_IND,0)!=2 ");
                    String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN1+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))  ");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN1 : "+UPN1+", Party Not Active");
                       return;
                   }
                }
                String UPN2 = DataModel.getValueByVariable("UPN2", j);
                if(!UPN2.equals(""))
                {
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN2+"',1,6)  AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2)) ");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN2 : "+UPN2+", Party Not Active");
                       return;
                   }
                }
                String UPN3 = DataModel.getValueByVariable("UPN3", j);
                if(!UPN3.equals(""))
                {
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN3+"',1,6)   AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN3 : "+UPN3+", Party Not Active");
                       return;
                   }
                }
                String UPN4 = DataModel.getValueByVariable("UPN4", j);
                if(!UPN4.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN4+"',1,6)  AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN4 : "+UPN4+", Party Not Active");
                       return;
                   }
                }
                String UPN5 = DataModel.getValueByVariable("UPN5", j);
                if(!UPN5.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN5+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN5 : "+UPN5+", Party Not Active");
                       return;
                   }
                }
                String UPN6 = DataModel.getValueByVariable("UPN6", j);
                if(!UPN6.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN6+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN6 : "+UPN6+", Party Not Active");
                       return;
                   }
                }
                String UPN7 = DataModel.getValueByVariable("UPN7", j);
                if(!UPN7.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN7+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN7 : "+UPN7+", Party Not Active");
                       return;
                   }
                }
                String UPN8 = DataModel.getValueByVariable("UPN8", j);
                if(!UPN8.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN8+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN8 : "+UPN8+", Party Not Active");
                       return;
                   }
                }
                String UPN9 = DataModel.getValueByVariable("UPN9", j);
                if(!UPN9.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN9+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN9 : "+UPN9+", Party Not Active");
                       return;
                   }
                }
                String UPN10 = DataModel.getValueByVariable("UPN10", j);
                if(!UPN10.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN10+"',1,6)  AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN10 : "+UPN10+", Party Not Active");
                       return;
                   }
                }
                String UPN11 = DataModel.getValueByVariable("UPN11", j);
                if(!UPN11.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN11+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN11 : "+UPN11+", Party Not Active");
                       return;
                   }
                }
                String UPN12 = DataModel.getValueByVariable("UPN12", j);
                if(!UPN12.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN12+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN12 : "+UPN12+", Party Not Active");
                       return;
                   }
                }
                String UPN13 = DataModel.getValueByVariable("UPN13", j);
                if(!UPN13.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN13+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN13 : "+UPN13+", Party Not Active");
                       return;
                   }
                }
                String UPN14 = DataModel.getValueByVariable("UPN14", j);
                if(!UPN14.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN14+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN14 : "+UPN14+", Party Not Active");
                       return;
                   }
                }
                String UPN15 = DataModel.getValueByVariable("UPN15", j);
                if(!UPN15.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN15+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN15 : "+UPN15+", Party Not Active");
                       return;
                   }
                }
                String UPN16 = DataModel.getValueByVariable("UPN16", j);
                if(!UPN16.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN16+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN11 : "+UPN16+", Party Not Active");
                       return;
                   }
                }
                String UPN17 = DataModel.getValueByVariable("UPN17", j);
                if(!UPN17.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN17+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN17 : "+UPN17+", Party Not Active");
                       return;
                   }
                }
                String UPN18 = DataModel.getValueByVariable("UPN18", j);
                if(!UPN18.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN18+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN18 : "+UPN18+", Party Not Active");
                       return;
                   }
                }
                String UPN19 = DataModel.getValueByVariable("UPN19", j);
                if(!UPN19.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN19+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN19 : "+UPN19+", Party Not Active");
                       return;
                   }
                }
                String UPN20 = DataModel.getValueByVariable("UPN20", j);
                if(!UPN20.equals(""))
                { 
                   String ActiveParty=data.getStringValueFromDB("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=substr('"+UPN20+"',1,6) AND (coalesce(PARTY_CLOSE_IND,0)=0 OR (coalesce(PARTY_CLOSE_IND,0)=1 AND coalesce(PARTY_MILL_CLOSED_IND,0)=2))");
                   if(ActiveParty.equals(""))
                   {
                       JOptionPane.showMessageDialog(this, "UPN20 : "+UPN20+", Party Not Active");
                       return;
                   }
                }
            }
        }
        
        if (OpgFinal.isSelected()) {

            
            
        }

        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //feltOrder.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (feltOrder.Insert()) {

                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = 661;
                aList.FirstFreeNo = 363;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);

                if (OpgFinal.isSelected()) {
                    for (int j = 0; j < Table.getRowCount(); j++) {

                        String UPN = DataModel.getValueByVariable("UPN", j);
                        String PIECE_NO = DataModel.getValueByVariable("PIECE_NO", j);
                        String UPN_ASSIGN_STATUS = DataModel.getValueByVariable("UPN_ASSIGN_STATUS", j);
                        String UPN1 = DataModel.getValueByVariable("UPN1", j);
                        if(UPN_ASSIGN_STATUS.equals("UNMAPPED"))
                        {
                            System.out.println("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET MAPPING_DOC_NO='"+txtDocNo.getText()+"'   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET MAPPING_DOC_NO='"+txtDocNo.getText()+"'   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                
                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET  AUTO_MAPPED_IND=1  \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED') AND MAPPING_DOC_NO='"+txtDocNo.getText()+"' AND PIECE_NO='"+PIECE_NO+"'");
                
                            
                            System.out.println("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
                                        "SELECT \n" +
                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '', PIECE_STAGE, 0\n" +
                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='"+txtDocNo.getText()+"' AND PIECE_NO='"+PIECE_NO+"'");
                            data.Execute("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
                                        "SELECT \n" +
                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '', PIECE_STAGE, 0\n" +
                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='"+txtDocNo.getText()+"' AND PIECE_NO='"+PIECE_NO+"'");
                   
                        }
                        else if(UPN_ASSIGN_STATUS.equals("MAPPED"))
                        {
                            System.out.println("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET UPN_ASSIGN_STATUS='MAPPED',MAPPING_DOC_NO='"+txtDocNo.getText()+"',AUTO_MAPPED_IND=0   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET UPN_ASSIGN_STATUS='MAPPED',MAPPING_DOC_NO='"+txtDocNo.getText()+"',AUTO_MAPPED_IND=0   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                        }
                        else if(UPN_ASSIGN_STATUS.equals("SCRAP"))
                        {
//                            System.out.println("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                            data.Execute("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                        
                            String pDocNo = clsFirstFree.getNextFreeNo(2, 662, 364, true);
                            String pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                            String pPieceNo = PIECE_NO;
                            String pScrapReason = "";

                            String sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP "
                                                + "(DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                                                + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                                                + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, CANCELED, "
                                                + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                                                + "VALUES('" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'OBSOLETE_PIECE_MAPPING', "
                                                + "'" + txtDocNo.getText() + "', '" + EITLERPGLOBAL.formatDateDB(txtDocDate.getText()) + "', " + pScrapReason + ", "
                                                + "338, '" + pDocDate + "', NULL, NULL, 0, '0000-00-00', 0, '0000-00-00', 0, "
                                                + "4435, 1, '" + pDocDate + "')";
                                        System.out.println("Insert Into Obsolete Piece Scrap :" + sql);
                                        data.Execute(sql);

                                        sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP_H "
                                                + "(REVISION_NO, UPDATED_BY, ENTRY_DATE, APPROVAL_STATUS, APPROVER_REMARKS, "
                                                + "DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                                                + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                                                + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                                                + "VALUES (1, 338, '" + pDocDate + "', 'W', '', "
                                                + "'" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'WIP_PIECE_REVIEW', "
                                                + "'" + txtDocNo.getText() + "', '" + EITLERPGLOBAL.formatDateDB(txtDocDate.getText()) + "', " + pScrapReason + ", "
                                                + "4435, 1, '" + pDocDate + "')";
                                        System.out.println("Insert Into History of Obsolete Piece Scrap :" + sql);
                                        data.Execute(sql);

                                        sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                                                + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,"
                                                + "TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,"
                                                + "ACTION_DATE,CHANGED,CHANGED_DATE) "
                                                + "SELECT 662,'" + pDocNo + "','" + pDocDate + "',USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
                                                + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'FROM FELT REJECTION',SR_NO,0,'','" + pDocDate + "',"
                                                + "'0000-00-00',1,'" + pDocDate + "'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS  WHERE HIERARCHY_ID = 4435 ";
                                        System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                                        data.Execute(sql);
                        }
                    }
                    
                    
                    
//                    for (int j = 0; j < Table.getRowCount(); j++) {
//
//                        String UPN = DataModel.getValueByVariable("UPN", j);
//                        String PIECE_NO = DataModel.getValueByVariable("PIECE_NO", j);
//                        String UPN_ASSIGN_STATUS = DataModel.getValueByVariable("UPN_ASSIGN_STATUS", j);
//                        String UPN1 = DataModel.getValueByVariable("UPN1", j);
//                        if(UPN_ASSIGN_STATUS.equals("UNMAPPED"))
//                        {
//                            System.out.println("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                            data.Execute("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                        }
//                        else if(UPN_ASSIGN_STATUS.equals("MAPPED"))
//                        {
//                            System.out.println("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET UPN_ASSIGN_STATUS='MAPPED',MAPPING_DOC_NO='"+txtDocNo.getText()+"'   \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET UPN_ASSIGN_STATUS='MAPPED',MAPPING_DOC_NO='"+txtDocNo.getText()+"'   \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                        }
//                        else if(UPN_ASSIGN_STATUS.equals("SCRAP"))
//                        {
//                            System.out.println("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                            data.Execute("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                        }
//                    }
                    
                    for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                            if (!DataModel.getValueByVariable("PIECE_NO", i).equals("")) {
                               try{ 
                                    String PieceNo = DataModel.getValueByVariable("PIECE_NO", i);
                                    
                                    if(!DataModel.getValueByVariable("UPN1", i).equals(""))
                                    {
                                        ResultSet rsResult = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo+"'");
                                        String Doc_No = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_SALES_SPILOVER_UPN_AREAINCHARGE_HEADER WHERE INCHARGE='"+rsResult.getString("PR_INCHARGE")+"'");

                                        String date_add_60_day = data.getStringValueFromDB("SELECT DATE_ADD(curdate(),interval 60 DAY) FROM DUAL");

                                        String insert_str = "INSERT INTO PRODUCTION.FELT_SALES_SPILOVER_UPN_AREAINCHARGE_DETAIL " +
                                                            "(DOC_NO,PIECE_NO,PARTY_CODE,PARTY_NAME,UPN,DIVISION_POSSIBILITY,UPN1,UPN2,UPN3,UPN4,UPN5,UPN6,UPN7,UPN8,UPN9,UPN10,UPN11,UPN12,UPN13,UPN14,UPN15,UPN16,UPN17,UPN18,UPN19,UPN20,REMARK,RELEASE_FOR_DIVERSION,ENTRY_DATE,AUTO_RELEASE_FOR_DIVERSION_DATE,ENTRY_STATUS) " +
                                                            "VALUES  " +
                                                            "('"+Doc_No+"','"+PieceNo+"','"+DataModel.getValueByVariable("PARTY_CODE", i)+"','"+DataModel.getValueByVariable("PARTY_NAME", i)+"','"+DataModel.getValueByVariable("UPN", i)+"','"+DataModel.getValueByVariable("DIVISION_POSSIBILITY", i)+"','"+DataModel.getValueByVariable("UPN1", i)+"','"+DataModel.getValueByVariable("UPN2", i)+"','"+DataModel.getValueByVariable("UPN3", i)+"','"+DataModel.getValueByVariable("UPN4", i)+"','"+DataModel.getValueByVariable("UPN5", i)+"','"+DataModel.getValueByVariable("UPN6", i)+"','"+DataModel.getValueByVariable("UPN7", i)+"','"+DataModel.getValueByVariable("UPN8", i)+"','"+DataModel.getValueByVariable("UPN9", i)+"','"+DataModel.getValueByVariable("UPN10", i)+"','"+DataModel.getValueByVariable("UPN11", i)+"','"+DataModel.getValueByVariable("UPN12", i)+"','"+DataModel.getValueByVariable("UPN13", i)+"','"+DataModel.getValueByVariable("UPN14", i)+"','"+DataModel.getValueByVariable("UPN15", i)+"','"+DataModel.getValueByVariable("UPN16", i)+"','"+DataModel.getValueByVariable("UPN17", i)+"','"+DataModel.getValueByVariable("UPN18", i)+"','"+DataModel.getValueByVariable("UPN19", i)+"','"+DataModel.getValueByVariable("UPN20", i)+"','','0','"+EITLERPGLOBAL.getCurrentDateDB()+"','"+date_add_60_day+"','ACTIVE');";
                                        data.Execute(insert_str);
                                    }
                                    else
                                    {
//                                        String insert_str = "INSERT INTO PRODUCTION.FELT_SALES_SPILOVER_UPN_EXP_DISPATCH_DETAIL " +
//                                                            "(DOC_NO,PIECE_NO,PARTY_CODE,PARTY_NAME,UPN,DIVISION_POSSIBILITY,UPN1,UPN2,UPN3,UPN4,UPN5,UPN6,UPN7,UPN8,UPN9,UPN10,UPN11,UPN12,UPN13,UPN14,UPN15,UPN16,UPN17,UPN18,UPN19,UPN20,REMARK,ENTRY_DATE,ENTRY_STATUS,EXP_DISPATCH_MONTH) " +
//                                                            "VALUES  " +
//                                                            "('DOC19200001','"+PieceNo+"','"+DataModel.getValueByVariable("PARTY_CODE", i)+"','"+DataModel.getValueByVariable("PARTY_NAME", i)+"','"+DataModel.getValueByVariable("UPN", i)+"','"+DataModel.getValueByVariable("DIVISION_POSSIBILITY", i)+"','','','','','','','','','','','','','','','','','','','','','','"+EITLERPGLOBAL.getCurrentDateDB()+"','ACTIVE','')";
//                                        
//                                        data.Execute(insert_str);
                                    }
                                    
                               }catch(Exception e)
                               {
                                   e.printStackTrace();
                               }
                                //objFeltOrderDetails.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", i));
                                //objFeltOrderDetails.setAttribute("PARTY_CODE", DataModel.getValueByVariable("PARTY_CODE", i)); 
                            }
                    }
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + feltOrder.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (feltOrder.Update()) {

                if (OpgFinal.isSelected()) {
                    
                    for (int j = 0; j < Table.getRowCount(); j++) {

                        String UPN = DataModel.getValueByVariable("UPN", j);
                        String PIECE_NO = DataModel.getValueByVariable("PIECE_NO", j);
                        String UPN_ASSIGN_STATUS = DataModel.getValueByVariable("UPN_ASSIGN_STATUS", j);
                        String UPN1 = DataModel.getValueByVariable("UPN1", j);
                        if(UPN_ASSIGN_STATUS.equals("UNMAPPED"))
                        {
                            System.out.println("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET MAPPING_DOC_NO='"+txtDocNo.getText()+"'   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET MAPPING_DOC_NO='"+txtDocNo.getText()+"'   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                
                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET  AUTO_MAPPED_IND=1  \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED') AND MAPPING_DOC_NO='"+txtDocNo.getText()+"' AND PIECE_NO='"+PIECE_NO+"'");
                
                            
                            System.out.println("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
                                        "SELECT \n" +
                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '', PIECE_STAGE, 0\n" +
                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='"+txtDocNo.getText()+"' AND PIECE_NO='"+PIECE_NO+"'");
                            data.Execute("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
                                        "SELECT \n" +
                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '', PIECE_STAGE, 0\n" +
                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='"+txtDocNo.getText()+"' AND PIECE_NO='"+PIECE_NO+"'");
                   
                        }
                        else if(UPN_ASSIGN_STATUS.equals("MAPPED"))
                        {
                            System.out.println("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET UPN_ASSIGN_STATUS='MAPPED',MAPPING_DOC_NO='"+txtDocNo.getText()+"',AUTO_MAPPED_IND=0   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                            data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET UPN_ASSIGN_STATUS='MAPPED',MAPPING_DOC_NO='"+txtDocNo.getText()+"',AUTO_MAPPED_IND=0   \n" +
                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                        }
                        else if(UPN_ASSIGN_STATUS.equals("SCRAP"))
                        {
//                            System.out.println("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
//                            data.Execute("insert INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "(PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, MAPPING_DOC_NO, PIECE_STAGE, AUTO_MAPPED_IND)\n" +
//                                        "SELECT \n" +
//                                        "PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, SYN_PER, '"+UPN_ASSIGN_STATUS+"', UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE, '"+txtDocNo.getText()+"', PIECE_STAGE, '1'\n" +
//                                        " FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP \n" +
//                                        "WHERE UPN_ASSIGN_STATUS IN ('MAPPED','UNMAPPED') AND MAPPING_DOC_NO='' AND PIECE_NO='"+PIECE_NO+"'");
                        
                            String pDocNo = clsFirstFree.getNextFreeNo(2, 662, 364, true);
                            String pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                            String pPieceNo = PIECE_NO;
                            String pScrapReason = "";

                            String sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP "
                                                + "(DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                                                + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                                                + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, CANCELED, "
                                                + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                                                + "VALUES('" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'OBSOLETE_PIECE_MAPPING', "
                                                + "'" + txtDocNo.getText() + "', '" + EITLERPGLOBAL.formatDateDB(txtDocDate.getText()) + "', " + pScrapReason + ", "
                                                + "338, '" + pDocDate + "', NULL, NULL, 0, '0000-00-00', 0, '0000-00-00', 0, "
                                                + "4435, 1, '" + pDocDate + "')";
                                        System.out.println("Insert Into Obsolete Piece Scrap :" + sql);
                                        data.Execute(sql);

                                        sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP_H "
                                                + "(REVISION_NO, UPDATED_BY, ENTRY_DATE, APPROVAL_STATUS, APPROVER_REMARKS, "
                                                + "DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                                                + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                                                + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                                                + "VALUES (1, 338, '" + pDocDate + "', 'W', '', "
                                                + "'" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'WIP_PIECE_REVIEW', "
                                                + "'" + txtDocNo.getText() + "', '" + EITLERPGLOBAL.formatDateDB(txtDocDate.getText()) + "', " + pScrapReason + ", "
                                                + "4435, 1, '" + pDocDate + "')";
                                        System.out.println("Insert Into History of Obsolete Piece Scrap :" + sql);
                                        data.Execute(sql);

                                        sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                                                + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,"
                                                + "TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,"
                                                + "ACTION_DATE,CHANGED,CHANGED_DATE) "
                                                + "SELECT 662,'" + pDocNo + "','" + pDocDate + "',USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
                                                + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'FROM FELT REJECTION',SR_NO,0,'','" + pDocDate + "',"
                                                + "'0000-00-00',1,'" + pDocDate + "'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS  WHERE HIERARCHY_ID = 4435 ";
                                        System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                                        data.Execute(sql);
                        }
                    }
                    
                    for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                            if (!DataModel.getValueByVariable("PIECE_NO", i).equals("")) {
                               try{ 
                                    String PieceNo = DataModel.getValueByVariable("PIECE_NO", i);
                                    String UPN_ASSIGN_STATUS = DataModel.getValueByVariable("UPN_ASSIGN_STATUS", i);
                                    if(UPN_ASSIGN_STATUS.equals("MAPPED"))
                                    {
                                            if(!DataModel.getValueByVariable("UPN1", i).equals(""))
                                            {
                                                ResultSet rsResult = data.getResult("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PieceNo+"'");
                                                String Doc_No = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_SALES_SPILOVER_UPN_AREAINCHARGE_HEADER WHERE INCHARGE='"+rsResult.getString("PR_INCHARGE")+"'");

                                                String date_add_60_day = data.getStringValueFromDB("SELECT DATE_ADD(curdate(),interval 60 DAY) FROM DUAL");

                                                String insert_str = "INSERT INTO PRODUCTION.FELT_SALES_SPILOVER_UPN_AREAINCHARGE_DETAIL " +
                                                                    "(DOC_NO,PIECE_NO,PARTY_CODE,PARTY_NAME,UPN,DIVISION_POSSIBILITY,UPN1,UPN2,UPN3,UPN4,UPN5,UPN6,UPN7,UPN8,UPN9,UPN10,UPN11,UPN12,UPN13,UPN14,UPN15,UPN16,UPN17,UPN18,UPN19,UPN20,REMARK,RELEASE_FOR_DIVERSION,ENTRY_DATE,AUTO_RELEASE_FOR_DIVERSION_DATE,ENTRY_STATUS) " +
                                                                    "VALUES  " +
                                                                    "('"+Doc_No+"','"+PieceNo+"','"+DataModel.getValueByVariable("PARTY_CODE", i)+"','"+DataModel.getValueByVariable("PARTY_NAME", i)+"','"+DataModel.getValueByVariable("UPN", i)+"','"+DataModel.getValueByVariable("DIVISION_POSSIBILITY", i)+"','"+DataModel.getValueByVariable("UPN1", i)+"','"+DataModel.getValueByVariable("UPN2", i)+"','"+DataModel.getValueByVariable("UPN3", i)+"','"+DataModel.getValueByVariable("UPN4", i)+"','"+DataModel.getValueByVariable("UPN5", i)+"','"+DataModel.getValueByVariable("UPN6", i)+"','"+DataModel.getValueByVariable("UPN7", i)+"','"+DataModel.getValueByVariable("UPN8", i)+"','"+DataModel.getValueByVariable("UPN9", i)+"','"+DataModel.getValueByVariable("UPN10", i)+"','"+DataModel.getValueByVariable("UPN11", i)+"','"+DataModel.getValueByVariable("UPN12", i)+"','"+DataModel.getValueByVariable("UPN13", i)+"','"+DataModel.getValueByVariable("UPN14", i)+"','"+DataModel.getValueByVariable("UPN15", i)+"','"+DataModel.getValueByVariable("UPN16", i)+"','"+DataModel.getValueByVariable("UPN17", i)+"','"+DataModel.getValueByVariable("UPN18", i)+"','"+DataModel.getValueByVariable("UPN19", i)+"','"+DataModel.getValueByVariable("UPN20", i)+"','','0','"+EITLERPGLOBAL.getCurrentDateDB()+"','"+date_add_60_day+"','ACTIVE');";
                                                data.Execute(insert_str);
                                            }
                                            else
                                            {
        //                                        String insert_str = "INSERT INTO PRODUCTION.FELT_SALES_SPILOVER_UPN_EXP_DISPATCH_DETAIL " +
        //                                                            "(DOC_NO,PIECE_NO,PARTY_CODE,PARTY_NAME,UPN,DIVISION_POSSIBILITY,UPN1,UPN2,UPN3,UPN4,UPN5,UPN6,UPN7,UPN8,UPN9,UPN10,UPN11,UPN12,UPN13,UPN14,UPN15,UPN16,UPN17,UPN18,UPN19,UPN20,REMARK,ENTRY_DATE,ENTRY_STATUS,EXP_DISPATCH_MONTH) " +
        //                                                            "VALUES  " +
        //                                                            "('DOC19200001','"+PieceNo+"','"+DataModel.getValueByVariable("PARTY_CODE", i)+"','"+DataModel.getValueByVariable("PARTY_NAME", i)+"','"+DataModel.getValueByVariable("UPN", i)+"','"+DataModel.getValueByVariable("DIVISION_POSSIBILITY", i)+"','','','','','','','','','','','','','','','','','','','','','','"+EITLERPGLOBAL.getCurrentDateDB()+"','ACTIVE','')";
        //                                        
        //                                        data.Execute(insert_str);
                                            }
                                    }
                               }catch(Exception e)
                               {
                                   e.printStackTrace();
                               }
                                //objFeltOrderDetails.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", i));
                                //objFeltOrderDetails.setAttribute("PARTY_CODE", DataModel.getValueByVariable("PARTY_CODE", i)); 
                            }
                    }
                    
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + feltOrder.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
   
    private void Cancel() {
        DisplayData();
        EditMode = 0;
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);
        
    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) feltOrder.getAttribute("DOC_NO").getObj();
        if (feltOrder.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(661, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            if (EITLERPGLOBAL.gUserDeptID == 39 || EITLERPGLOBAL.gUserDeptID == 27) {
                SetFields(true);
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (feltOrder.CanDelete(txtDocNo.getText() + "", txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, feltOrder.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, txtDocNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        txtDocDate.setEnabled(pStat);
        txtDocNo.setEnabled(pStat);
        txtRemark.setEnabled(pStat);
        txtDocumentName.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        Table.setEnabled(pStat);
        
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(1);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);

        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }
    private void filter(ArrayList<String> Hierarchy) {
        for (String current : Hierarchy) {
            int n = cmbHierarchyModel.getIndexOf(current);
            if (n != -1) {
                cmbHierarchyModel.setSelectedItem(current);
            }
        }

    }

    private void SetData() {

        feltOrder.setAttribute("DOC_NO", txtDocNo.getText());
        feltOrder.setAttribute("DOC_DATE", txtDocDate.getText());
        
        DOC_NO = txtDocNo.getText();
        feltOrder.setAttribute("DOC_NO", txtDocNo.getText());
        feltOrder.setAttribute("DOC_DATE", txtDocDate.getText());
        
        feltOrder.setAttribute("DOCUMENT_NAME", txtDocumentName.getText());
        feltOrder.setAttribute("REMARK", txtRemark.getText());
        
        feltOrder.setAttribute("MODULE_ID", ModuleId);
        feltOrder.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        feltOrder.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        feltOrder.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        feltOrder.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        feltOrder.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "R");
            feltOrder.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            feltOrder.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            feltOrder.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            feltOrder.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            feltOrder.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            feltOrder.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //======= Set Line part ============
        try {
            feltOrder.hmFeltSalesOrderDetails.clear();

            for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                if (!DataModel.getValueByVariable("PIECE_NO", i).equals("")) {
                    clsFeltObsoleteAssignUPNDetails objFeltOrderDetails = new clsFeltObsoleteAssignUPNDetails();

                    //objFeltOrderDetails.setAttribute("S_ORDER_DETAIL_CODE","");
                    objFeltOrderDetails.setAttribute("DOC_NO", txtDocNo.getText());
                    objFeltOrderDetails.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", i));
                    objFeltOrderDetails.setAttribute("PARTY_CODE", DataModel.getValueByVariable("PARTY_CODE", i));
                    objFeltOrderDetails.setAttribute("PARTY_NAME", DataModel.getValueByVariable("PARTY_NAME", i));
                    objFeltOrderDetails.setAttribute("UPN", DataModel.getValueByVariable("UPN", i));
                    
                    objFeltOrderDetails.setAttribute("LENGTH", DataModel.getValueByVariable("LENGTH", i));
                    objFeltOrderDetails.setAttribute("WIDTH", DataModel.getValueByVariable("WIDTH", i));
                    objFeltOrderDetails.setAttribute("GSM", DataModel.getValueByVariable("GSM", i));
                    objFeltOrderDetails.setAttribute("PIECE_STAGE", DataModel.getValueByVariable("PIECE_STAGE", i));
                    objFeltOrderDetails.setAttribute("STYLE", DataModel.getValueByVariable("STYLE", i));
                    
                    if (Table.getValueAt(i, DataModel.getColFromVariable("DIVISION_POSSIBILITY")).equals(true))
                    {
                        objFeltOrderDetails.setAttribute("DIVISION_POSSIBILITY", true);
                    }
                    else
                    {
                        objFeltOrderDetails.setAttribute("DIVISION_POSSIBILITY", false);
                    }
                    //
                    objFeltOrderDetails.setAttribute("UPN_ASSIGN_STATUS", DataModel.getValueByVariable("UPN_ASSIGN_STATUS", i));
                    
                    objFeltOrderDetails.setAttribute("UPN1", DataModel.getValueByVariable("UPN1", i));
                    objFeltOrderDetails.setAttribute("UPN2", DataModel.getValueByVariable("UPN2", i));
                    objFeltOrderDetails.setAttribute("UPN3", DataModel.getValueByVariable("UPN3", i));
                    objFeltOrderDetails.setAttribute("UPN4", DataModel.getValueByVariable("UPN4", i));
                    objFeltOrderDetails.setAttribute("UPN5", DataModel.getValueByVariable("UPN5", i));
                    objFeltOrderDetails.setAttribute("UPN6", DataModel.getValueByVariable("UPN6", i));
                    objFeltOrderDetails.setAttribute("UPN7", DataModel.getValueByVariable("UPN7", i));
                    objFeltOrderDetails.setAttribute("UPN8", DataModel.getValueByVariable("UPN8", i));
                    objFeltOrderDetails.setAttribute("UPN9", DataModel.getValueByVariable("UPN9", i));
                    objFeltOrderDetails.setAttribute("UPN10", DataModel.getValueByVariable("UPN10", i));
                    objFeltOrderDetails.setAttribute("UPN11", DataModel.getValueByVariable("UPN11", i));
                    objFeltOrderDetails.setAttribute("UPN12", DataModel.getValueByVariable("UPN12", i));
                    objFeltOrderDetails.setAttribute("UPN13", DataModel.getValueByVariable("UPN13", i));
                    objFeltOrderDetails.setAttribute("UPN14", DataModel.getValueByVariable("UPN14", i));
                    objFeltOrderDetails.setAttribute("UPN15", DataModel.getValueByVariable("UPN15", i));
                    objFeltOrderDetails.setAttribute("UPN16", DataModel.getValueByVariable("UPN16", i));
                    objFeltOrderDetails.setAttribute("UPN17", DataModel.getValueByVariable("UPN17", i));
                    objFeltOrderDetails.setAttribute("UPN18", DataModel.getValueByVariable("UPN18", i));
                    objFeltOrderDetails.setAttribute("UPN19", DataModel.getValueByVariable("UPN19", i));
                    objFeltOrderDetails.setAttribute("UPN20", DataModel.getValueByVariable("UPN20", i));
                    feltOrder.hmFeltSalesOrderDetails.put(Integer.toString(feltOrder.hmFeltSalesOrderDetails.size() + 1), objFeltOrderDetails);
                }
            }
        } catch (Exception e) {
            System.out.println("Error on setData : " + e.getMessage());
            e.printStackTrace();
        };
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnExpToExcl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel ltbPink;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JFormattedTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtDocumentName;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRemark;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    
}
