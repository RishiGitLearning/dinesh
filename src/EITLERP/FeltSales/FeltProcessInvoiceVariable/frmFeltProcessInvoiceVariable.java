/*
 * frmFeltProcessInvoiceVariable.java
 *
 * Created on June 19, 2013, 5:27 PM
 */
package EITLERP.FeltSales.FeltProcessInvoiceVariable;

/**
 *
 * @author RAJPALSINH JADEJA
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.FeltSales.FeltPacking.clsFeltPacking;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.clsSales_Party;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.ReportUI.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashSet;
import javax.swing.JTextField;

public class frmFeltProcessInvoiceVariable extends javax.swing.JApplet {

    private clsFeltProcessInvoiceVariable ObjFeltReopenBale;

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private int FFNo = 0; //First Free No.
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;

    private EITLTableModel DataModelPieceNo;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel = new EITLTableModel();
    private TReportEngine objEngine = new TReportEngine();

    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltProcessInvoiceVariable
     */
    public void init() {
        System.gc();
        setSize(1000, 700);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjFeltReopenBale = new clsFeltProcessInvoiceVariable();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();

        SetFields(false);

        cmdPreview.setEnabled(true);

        if (ObjFeltReopenBale.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + ObjFeltReopenBale.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtchargecodeold = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtbaleno = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtprocessdate = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        jLabel2 = new javax.swing.JLabel();
        txtdocno = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        lblPartyName = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCheckBoxf6 = new javax.swing.JCheckBox();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 720, 40);

        lblTitle.setBackground(new java.awt.Color(178, 182, 185));
        lblTitle.setText("FELT INVOICE F6 PROCESS PARAMTER  DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 720, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(540, 330, 90, 29);

        jLabel1.setText("Charge Code");
        Tab1.add(jLabel1);
        jLabel1.setBounds(10, 110, 90, 20);

        txtchargecodeold.setEditable(false);
        txtchargecodeold = new JTextFieldHint(new JTextField(),"Search by F1");
        txtchargecodeold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtchargecodeoldActionPerformed(evt);
            }
        });
        txtchargecodeold.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtchargecodeoldKeyPressed(evt);
            }
        });
        Tab1.add(txtchargecodeold);
        txtchargecodeold.setBounds(110, 110, 130, 27);

        jLabel10.setText("Bale No");
        Tab1.add(jLabel10);
        jLabel10.setBounds(50, 80, 53, 17);

        txtbaleno.setEditable(false);
        txtbaleno = new JTextFieldHint(new JTextField(),"Search by F1");
        txtbaleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbalenoActionPerformed(evt);
            }
        });
        txtbaleno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtbalenoFocusLost(evt);
            }
        });
        txtbaleno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbalenoKeyPressed(evt);
            }
        });
        Tab1.add(txtbaleno);
        txtbaleno.setBounds(110, 80, 320, 27);

        jLabel11.setText("Doc Date");
        Tab1.add(jLabel11);
        jLabel11.setBounds(300, 10, 90, 17);

        txtprocessdate.setEditable(false);
        Tab1.add(txtprocessdate);
        txtprocessdate.setBounds(400, 10, 130, 27);

        jLabel14.setText("Party Code");
        Tab1.add(jLabel14);
        jLabel14.setBounds(30, 50, 80, 20);

        txtpartycode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartycodeActionPerformed(evt);
            }
        });
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        Tab1.add(txtpartycode);
        txtpartycode.setBounds(110, 40, 100, 27);

        jLabel2.setText("Doc No");
        Tab1.add(jLabel2);
        jLabel2.setBounds(50, 10, 50, 17);

        txtdocno.setEditable(false);
        txtdocno.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtdocno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdocnoActionPerformed(evt);
            }
        });
        Tab1.add(txtdocno);
        txtdocno.setBounds(110, 10, 130, 27);

        lblRevNo.setText(".....");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(250, 10, 30, 17);
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(220, 50, 260, 17);
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(110, 150, 430, 27);

        jLabel4.setText("Remarks");
        Tab1.add(jLabel4);
        jLabel4.setBounds(20, 160, 70, 17);

        jCheckBoxf6.setText("F6");
        jCheckBoxf6.setEnabled(false);
        jCheckBoxf6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxf6ItemStateChanged(evt);
            }
        });
        jCheckBoxf6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxf6ActionPerformed(evt);
            }
        });
        Tab1.add(jCheckBoxf6);
        jCheckBoxf6.setBounds(260, 110, 70, 30);

        Tab.addTab("Felt Invoice F6 Process Parameter", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 230, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 230, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 500, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 160, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 212, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 230, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 242, 60, 17);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 240, 490, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(410, 280, 100, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(610, 70, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(540, 280, 100, 29);

        Tab.addTab("Approval", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 180, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 600, 100);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 132, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 150, 510, 150);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(530, 250, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(530, 180, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(530, 150, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(530, 210, 110, 33);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 96, 660, 410);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 510, 740, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        Report();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltReopenBale.HistoryView = false;
        ObjFeltReopenBale.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltReopenBale.ShowHistory(EITLERPGLOBAL.formatDateDB(txtprocessdate.getText()), txtdocno.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltReopenBale.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained

    }//GEN-LAST:event_Tab1FocusGained

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void txtbalenoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbalenoKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            PKGLOV aList = new PKGLOV();
            aList.SQL = "SELECT NULL,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_NO NOT IN (SELECT BALE_NO FROM PRODUCTION.FELT_F6_INVOICE_MODIFICATION_HEADER WHERE  CANCELED=0 ) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.INVOICE_FLG=0 AND A.PKG_PARTY_CODE='" + txtpartycode.getText() + "'GROUP BY B.PKG_BALE_NO UNION ALL SELECT GROUP_CONCAT(B.PKG_PIECE_NO) AS PKG_PIECE_NO,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_NO IN (SELECT BALE_NO FROM PRODUCTION.FELT_F6_INVOICE_MODIFICATION_HEADER WHERE CANCELED=1 AND DOC_DATE>=CURDATE()) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.INVOICE_FLG=0 GROUP BY B.PKG_BALE_NO ORDER BY PKG_BALE_NO";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                String str = aList.ReturnVal;
                str = str.substring(1, str.length());
                txtbaleno.setText(str);
                //txtpartycode.setText(aList.ReturnVal);
                // lblPartyName.setText(clsFeltProcessInvoiceVariable.getParyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                txtchargecodeold.setText(clsFeltProcessInvoiceVariable.getChargeCode(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                txttransportcode.setText(clsFeltProcessInvoiceVariable.gettransportid(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                txtcriticallimitold.setText(clsFeltProcessInvoiceVariable.getCriticalLimit(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));

            }
        }
    }//GEN-LAST:event_txtbalenoKeyPressed

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT PKG_PARTY_CODE,PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE APPROVED=1 AND CANCELED=0 AND INVOICE_FLG=0 AND BALE_REOPEN_FLG=0 GROUP BY PKG_PARTY_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                lblPartyName.setText(clsFeltProcessInvoiceVariable.getParyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                txtchargecodeold.setText(clsFeltProcessInvoiceVariable.getChargeCode(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                txttransportcode.setText(clsFeltProcessInvoiceVariable.gettransportid(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
//                txtcriticallimitold.setText(clsFeltProcessInvoiceVariable.getCriticalLimit(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void txtbalenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbalenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbalenoActionPerformed

    private void txtpartycodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartycodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartycodeActionPerformed

    private void txtdocnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdocnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdocnoActionPerformed

    private void txtchargecodeoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtchargecodeoldActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_txtchargecodeoldActionPerformed

    private void txtbalenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtbalenoFocusLost
        txtRemarks.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtbalenoFocusLost

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost

        try {
            if (!txtpartycode.getText().equals("")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE=" + txtpartycode.getText().trim() + "";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                lblPartyName.setText(rsTmp.getString("PARTY_NAME"));
                txtchargecodeold.setText("01");

            }
        } catch (Exception e) {

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtchargecodeoldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtchargecodeoldKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT distinct CHARGE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE CHARGE_CODE>0 ORDER BY CHARGE_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtchargecodeold.setText(aList.ReturnVal);
                lblPartyName.setText(clsFeltProcessInvoiceVariable.getParyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtchargecodeoldKeyPressed

    private void jCheckBoxf6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxf6ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxf6ItemStateChanged

    private void jCheckBoxf6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxf6ActionPerformed
        if (jCheckBoxf6.isSelected()) {
            txtchargecodeold.setText("01");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxf6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JCheckBox jCheckBoxf6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtbaleno;
    private javax.swing.JTextField txtchargecodeold;
    private javax.swing.JTextField txtdocno;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtprocessdate;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtdocno.setEditable(pStat);
        txtchargecodeold.setEditable(pStat);
        txtbaleno.setEditable(pStat);
        //txtpieceno.setEditable(pStat);
        txtprocessdate.setEditable(pStat);
        txtpartycode.setEditable(pStat);
        lblPartyName.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        jCheckBoxf6.setEnabled(pStat);
        // rdoPieceNo.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
       // jCheckBox2.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {

        txtprocessdate.setText(EITLERPGLOBAL.getCurrentDate());
        txtbaleno.setText("");
        txtchargecodeold.setText("");
        txtpartycode.setText("");
        //txtpieceno.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        lblPartyName.setText("");
        txtRemarks.setText("");
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();

    }

    private void DisplayData() {

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 765)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltReopenBale.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltReopenBale.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String DOCNO = ObjFeltReopenBale.getAttribute("DOC_NO").getString();
            lblTitle.setText(" FELT INVOICE F6 PROCESS PARAMETER - " + DOCNO);
            lblRevNo.setText(Integer.toString((int) ObjFeltReopenBale.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, ObjFeltReopenBale.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate = true;

            txtdocno.setText(DOCNO);
            txtprocessdate.setText(EITLERPGLOBAL.formatDate(ObjFeltReopenBale.getAttribute("DOC_DATE").getString()));
            String blNo = data.getStringValueFromDB("SELECT GROUP_CONCAT(BALE_NO) FROM PRODUCTION.FELT_F6_INVOICE_MODIFICATION_HEADER WHERE DOC_NO='" + DOCNO + "'");
//            txtbaleno.setText(ObjFeltReopenBale.getAttribute("BALE_NO").getString());
            txtbaleno.setText(blNo);
            //txtpieceno.setText(ObjFeltReopenBale.getAttribute("PIECE_NO").getString());
            txtpartycode.setText(ObjFeltReopenBale.getAttribute("PARTY_CODE").getString());
            lblPartyName.setText(ObjFeltReopenBale.getAttribute("PARTY_NAME").getString());
            txtchargecodeold.setText(ObjFeltReopenBale.getAttribute("CHARGE_CODE").getString());
            txtRemarks.setText(ObjFeltReopenBale.getAttribute("REMARKS").getString());
            jCheckBoxf6.setSelected(ObjFeltReopenBale.getAttribute("F6").getBool());

//======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            for (int i = 1; i <= hmList.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltProcessInvoiceVariable.getHistoryList(ObjFeltReopenBale.getAttribute("DOC_DATE").getString(), DOCNO);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltProcessInvoiceVariable ObjFeltReopenBale = (clsFeltProcessInvoiceVariable) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltReopenBale.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltReopenBale.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltReopenBale.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltReopenBale.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltReopenBale.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=765 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=765 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void SetupApproval() {
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(765, FromUserID, ObjFeltReopenBale.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6111, 61111)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6111, 61112)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6111, 61113)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6111, 61114)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//
        EITLERP.SelectFirstFree aList = new EITLERP.SelectFirstFree();
        aList.ModuleID = 765;
        aList.FirstFreeNo = 230;
        FFNo = aList.FirstFreeNo;
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FFNo = aList.FirstFreeNo;
        SetupApproval();
        txtdocno.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 765, FFNo, false));
        lblTitle.setText("FELT INVOICE f6 PROCESS PARAMETER DETAILS - " + txtdocno.getText());
        lblTitle.setBackground(Color.GRAY);
        txtprocessdate.setEditable(false);
        txtpartycode.setEnabled(true);
        txtdocno.setEditable(false);
        txtchargecodeold.setEditable(false);
        jCheckBoxf6.setSelected(true);
        jCheckBoxf6.setEnabled(false);

    }

    private void Edit() {
        if (ObjFeltReopenBale.IsEditable(txtdocno.getText(), ObjFeltReopenBale.getAttribute("DOC_DATE").getString(), EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            if (clsFeltProductionApprovalFlow.IsCreator(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//
    }

    private void Save() {

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltReopenBale.Insert()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + ObjFeltReopenBale.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltReopenBale.Update()) {

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + ObjFeltReopenBale.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        txtToRemarks.setText("");
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {

        ObjFeltReopenBale.setAttribute("FFNO", FFNo);
        ObjFeltReopenBale.setAttribute("DOC_NO", txtdocno.getText());
        ObjFeltReopenBale.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtprocessdate.getText()));
        ObjFeltReopenBale.setAttribute("PARTY_CODE", txtpartycode.getText());
        ObjFeltReopenBale.setAttribute("PARTY_NAME", lblPartyName.getText());
        ObjFeltReopenBale.setAttribute("BALE_NO", txtbaleno.getText());
        ObjFeltReopenBale.setAttribute("CHARGE_CODE", txtchargecodeold.getText());
        ObjFeltReopenBale.setAttribute("REMARKS", txtRemarks.getText());
        ObjFeltReopenBale.setAttribute("F6", jCheckBoxf6.isSelected());

        //-------- Update Approval Specific Fields -----------//
        ObjFeltReopenBale.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltReopenBale.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltReopenBale.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltReopenBale.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltReopenBale.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltReopenBale.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltReopenBale.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltReopenBale.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltReopenBale.Filter("DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltReopenBale.Filter("DOC_NO IN (SELECT H.DOC_NO FROM PRODUCTION.FELT_F6_INVOICE_MODIFICATION_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=765 AND CANCELED=0) GROUP BY DOC_NO ");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String pGroupId) {
        ObjFeltReopenBale.Filter(" DOC_NO='" + pGroupId + "'");
        ObjFeltReopenBale.MoveFirst();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltReopenBale.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltReopenBale.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltReopenBale.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltReopenBale.MoveLast();
        DisplayData();
    }

    private void EnableApproval() {

        txtdocno.setEnabled(true);
        txtprocessdate.setEnabled(true);
        txtchargecodeold.setEnabled(true);
        txtbaleno.setEnabled(true);
        txtpartycode.setEnabled(true);
        //txtpieceno.setEnabled(true);
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();

    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(765, ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltProcessInvoiceVariable.frmFindFeltProcessInvoiceVariable", true);
        frmFindFeltProcessInvoiceVariable ObjFindFeltPacking = (frmFindFeltProcessInvoiceVariable) ObjLoader.getObj();

        if (ObjFindFeltPacking.Cancelled == false) {
            if (!ObjFeltReopenBale.Filter(ObjFindFeltPacking.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltProcessInvoiceVariable.this, " No records found.", "Find Invoice Process Control Parameter Modification Details  Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    private void Report() {

        try {

            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("DOC_NO");
            objReportData.AddColumn("DOC_DATE");
            objReportData.AddColumn("BALE_NO");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("CHARGE_CODE");
            objReportData.AddColumn("CRITICAL_LIMIT_NEW");
            objReportData.AddColumn("TRANSPORTER_CODE");
            objReportData.AddColumn("INSURANCE_CODE");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("DOC_NO", "");
            objOpeningRow.setValue("DOC_DATE", "");
            objOpeningRow.setValue("BALE_NO", "");
            objOpeningRow.setValue("PARTY_CODE", "");
            objOpeningRow.setValue("CHARGE_CODE", "");
            objOpeningRow.setValue("CRITICAL_LIMIT_NEW", "");
            objOpeningRow.setValue("TRANSPORTER_CODE", "");
            objOpeningRow.setValue("INSURANCE_CODE", "");

            String strSQL = "SELECT * FROM PRODUCTION.FELT_INV_PROCESS_VAR WHERE DOC_NO='" + txtdocno.getText().trim() + "' AND APPROVED=1";

            System.out.println(strSQL);
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("DOC_NO", UtilFunctions.getString(rsTmp, "DOC_NO", ""));
                    objRow.setValue("DOC_DATE", UtilFunctions.getString(rsTmp, "DOC_DATE", ""));
                    objRow.setValue("BALE_NO", UtilFunctions.getString(rsTmp, "BALE_NO", ""));
                    objRow.setValue("PARTY_CODE", UtilFunctions.getString(rsTmp, "PARTY_CODE", ""));
                    objRow.setValue("CHARGE_CODE", UtilFunctions.getString(rsTmp, "CHARGE_CODE", ""));
                    objRow.setValue("CRITICAL_LIMIT_NEW", UtilFunctions.getString(rsTmp, "CRITICAL_LIMIT_NEW", ""));
                    objRow.setValue("TRANSPORTER_CODE", UtilFunctions.getString(rsTmp, "TRANSPORTER_CODE", ""));
                    objRow.setValue("INSURANCE_CODE", UtilFunctions.getString(rsTmp, "INSURANCE_CODE", ""));

                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptInvoiceParameter.rpt", Parameters, objReportData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
