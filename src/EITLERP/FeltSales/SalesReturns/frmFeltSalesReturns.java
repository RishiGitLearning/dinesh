/*
 * frmFeltSalesReturns.java
 *
 * Created on June 19, 2013, 5:27 PM
 */
package EITLERP.FeltSales.SalesReturns;

/**
 *
 * @author Jadeja Rajpalsinh
 */
import EITLERP.FeltSales.GroupMaster.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import java.awt.Color;
import java.util.HashMap;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.FeltSales.common.Order_No_Conversion;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.LOV;
import EITLERP.clsFirstFree;
import EITLERP.clsSales_Party;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;

public class frmFeltSalesReturns extends javax.swing.JApplet {

    private clsFeltSalesReturns ObjFeltGroupMaster;

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private int FFNo = 0; //First Free No.
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;
    private int FlagId = 0;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer RendererUPN = new EITLTableCellRenderer();
    private EITLTableCellRenderer RendererCondition = new EITLTableCellRenderer();
    private EITLTableCellRenderer RendererStatus = new EITLTableCellRenderer();
    private EITLTableCellRenderer Paint = new EITLTableCellRenderer();
    private TReportEngine objEngine = new TReportEngine();

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;

    private EITLTableModel DataModelPieceNo;
    private EITLTableModel DataModelPartyCode;
    private EITLTableModel DataModelPieceNoApprovalStatus;
    private EITLTableModel DataModelPieceNoUpdateHistory;
    private EITLTableModel DataModelPieceNoPieceNo = new EITLTableModel();
    public frmPendingApprovals frmPA;

    private int mCondition = 0;

    /**
     * Creates new form frmFeltSalesReturns
     */
    public void init() {
        System.gc();
        setSize(800, 600);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjFeltGroupMaster = new clsFeltSalesReturns();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        cmdPreview.setEnabled(true);

        lblTitle.setForeground(Color.WHITE);

        if (ObjFeltGroupMaster.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + ObjFeltGroupMaster.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        menuGR = new javax.swing.JMenuItem();
        menuGRC = new javax.swing.JMenuItem();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtdocno = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        txtinwardno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtdocdate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtinwarddate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        lblMenu = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();

        menuGR.setText("GR");
        menuGR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGRActionPerformed(evt);
            }
        });
        jPopupMenu.add(menuGR);

        menuGRC.setText("GR with Complain");
        menuGRC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGRCActionPerformed(evt);
            }
        });
        jPopupMenu.add(menuGRC);

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(178, 182, 185));
        lblTitle.setText(" FELT SALES RETURNS DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Doc No / Sr.No :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 110, 15);

        txtdocno.setEditable(false);
        txtdocno.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtdocno.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtdocno.setEnabled(false);
        txtdocno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdocnoActionPerformed(evt);
            }
        });
        txtdocno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtdocnoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtdocnoFocusLost(evt);
            }
        });
        txtdocno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtdocnoKeyPressed(evt);
            }
        });
        Tab1.add(txtdocno);
        txtdocno.setBounds(130, 10, 110, 21);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TableKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        Table.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                TableVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 130, 780, 145);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(560, 290, 90, 30);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 104, 780, 10);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(700, 290, 90, 30);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(460, 290, 90, 30);

        txtinwardno.setEnabled(false);
        txtinwardno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtinwardnoFocusLost(evt);
            }
        });
        Tab1.add(txtinwardno);
        txtinwardno.setBounds(130, 50, 110, 19);

        jLabel5.setText("GR Inward No :");
        Tab1.add(jLabel5);
        jLabel5.setBounds(20, 50, 100, 15);

        jLabel6.setText("Doc Date :");
        Tab1.add(jLabel6);
        jLabel6.setBounds(330, 10, 70, 15);

        txtdocdate.setEnabled(false);
        Tab1.add(txtdocdate);
        txtdocdate.setBounds(420, 10, 130, 19);

        jLabel1.setText("GR Inward Date :");
        Tab1.add(jLabel1);
        jLabel1.setBounds(300, 50, 110, 15);

        txtinwarddate.setEnabled(false);
        txtinwarddate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtinwarddateActionPerformed(evt);
            }
        });
        Tab1.add(txtinwarddate);
        txtinwarddate.setBounds(420, 50, 130, 19);

        lblRevNo.setText("......");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(250, 10, 30, 15);
        Tab1.add(lblMenu);
        lblMenu.setBounds(631, 10, 160, 0);

        Tab.addTab("Sales Returns Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 230, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 230, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 540, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 160, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 212, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 230, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 242, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 240, 590, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(457, 273, 100, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(633, 70, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(574, 273, 100, 25);

        Tab.addTab("Approval", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 670, 100);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 132, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 150, 550, 150);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(570, 275, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(570, 180, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(570, 150, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 210, 110, 25);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 76, 830, 430);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 510, 730, 22);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltGroupMaster.HistoryView = false;
        ObjFeltGroupMaster.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltGroupMaster.ShowHistory(EITLERPGLOBAL.formatDateDB(txtdocdate.getText()), txtdocno.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained

    }//GEN-LAST:event_Tab1FocusGained

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModelPieceNo.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                if (Table.getSelectedColumn() == 1) {
                    LOV aList = new LOV();

                    //String strSQL = "SELECT PIECE_NO,INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_INVOICE_DATA";
                    //String strSQL ="SELECT A.PIECE_NO,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,B.PARTY_NAME FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B,PRODUCTION.FELT_SAL_INVOICE_HEADER C WHERE C.INVOICE_NO=A.INVOICE_NO AND C.APPROVED=1 AND C.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE AND B.MAIN_ACCOUNT_CODE=210010 ORDER BY A.PARTY_CODE";
                    String strSQL = "SELECT A.PIECE_NO,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,B.PARTY_NAME FROM PRODUCTION.FELT_SAL_INVOICE_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B,PRODUCTION.FELT_SAL_INVOICE_HEADER C WHERE C.INVOICE_NO=A.INVOICE_NO AND SUBSTRING(C.INVOICE_DATE,1,10)=SUBSTRING(A.INVOICE_DATE,1,10) AND C.APPROVED=1 AND C.CANCELLED=0 AND A.PARTY_CODE=B.PARTY_CODE AND A.PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL WHERE CANCELED=0) AND B.MAIN_ACCOUNT_CODE=210010 ORDER BY A.PARTY_CODE";
                    aList.SQL = strSQL;
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    //aList.DefaultSearchOn=2;
                    aList.DefaultSearchOn = 1;

                    if (aList.ShowLOV()) {
                        if (Table.getCellEditor() != null) {
                            Table.getCellEditor().stopCellEditing();

                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
                        String invoiceno = clsFeltSalesReturns.getinvoiceno(aList.ReturnVal);
                        Table.setValueAt(invoiceno, Table.getSelectedRow(), 2);
                        String invoicedate = EITLERPGLOBAL.formatDate(clsFeltSalesReturns.getinvoicedate(aList.ReturnVal));
                        Table.setValueAt(invoicedate, Table.getSelectedRow(), 3);
                        String partycode = clsFeltSalesReturns.getpartycode(aList.ReturnVal);
                        Table.setValueAt(partycode, Table.getSelectedRow(), 4);
                        String partyname = clsFeltSalesReturns.getpartyname(partycode);
                        Table.setValueAt(partyname, Table.getSelectedRow(), 5);
                        String productcode = clsFeltSalesReturns.getproductcode(aList.ReturnVal);
                        Table.setValueAt(productcode, Table.getSelectedRow(), 6);
                        String length = clsFeltSalesReturns.getlength(aList.ReturnVal);
                        Table.setValueAt(length, Table.getSelectedRow(), 7);
                        String width = clsFeltSalesReturns.getwidth(aList.ReturnVal);
                        Table.setValueAt(width, Table.getSelectedRow(), 8);
                        String weight = clsFeltSalesReturns.getweight(aList.ReturnVal);
                        Table.setValueAt(weight, Table.getSelectedRow(), 9);

//                        String baseamt = clsFeltSalesReturns.getbaseamt(partycode);
//                        Table.setValueAt(baseamt, Table.getSelectedRow(), 10);
//                        String discamt = clsFeltSalesReturns.getdisamt(partycode);
//                        Table.setValueAt(discamt, Table.getSelectedRow(), 11);
//                        String seamcharge = clsFeltSalesReturns.getseamcharge(partycode);
//                        Table.setValueAt(seamcharge, Table.getSelectedRow(), 12);
//                        String grossamt = clsFeltSalesReturns.getgrossamt(partycode);
//                        Table.setValueAt(grossamt, Table.getSelectedRow(), 13);
//                        String taxes = clsFeltSalesReturns.gettaxes(partycode);
//                        Table.setValueAt(taxes, Table.getSelectedRow(), 14);
//                        String SDamt = clsFeltSalesReturns.getSDamt(partycode);
//                        Table.setValueAt(SDamt, Table.getSelectedRow(), 15);
//                        String netamt = clsFeltSalesReturns.getnetamt(partycode);
//                        Table.setValueAt(netamt, Table.getSelectedRow(), 16);
                        String baseamt = clsFeltSalesReturns.getbaseamt(aList.ReturnVal);
                        Table.setValueAt(baseamt, Table.getSelectedRow(), 10);
                        String discamt = clsFeltSalesReturns.getdisamt(aList.ReturnVal);
                        Table.setValueAt(discamt, Table.getSelectedRow(), 11);
                        String seamcharge = clsFeltSalesReturns.getseamcharge(aList.ReturnVal);
                        Table.setValueAt(seamcharge, Table.getSelectedRow(), 12);
                        String grossamt = clsFeltSalesReturns.getgrossamt(aList.ReturnVal);
                        Table.setValueAt(grossamt, Table.getSelectedRow(), 13);
                        String taxes = clsFeltSalesReturns.gettaxes(aList.ReturnVal);
                        Table.setValueAt(taxes, Table.getSelectedRow(), 14);
                        String SDamt = clsFeltSalesReturns.getSDamt(aList.ReturnVal);
                        Table.setValueAt(SDamt, Table.getSelectedRow(), 15);
                        String netamt = clsFeltSalesReturns.getnetamt(aList.ReturnVal);
                        Table.setValueAt(netamt, Table.getSelectedRow(), 16);

//                        String totalnetamt = clsFeltSalesReturns.gettotalnetamt(aList.ReturnVal);
//                        Table.setValueAt(totalnetamt, Table.getSelectedRow(), 11);
//                        String grosssqmtr = clsFeltSalesReturns.getgrosssqmtr(aList.ReturnVal);
//                        Table.setValueAt(grosssqmtr, Table.getSelectedRow(), 12);
//                        String invoiceamt = clsFeltSalesReturns.getinvoiceamt(partycode);
//                        Table.setValueAt(invoiceamt, Table.getSelectedRow(), 13);
//                        String grossamt = clsFeltSalesReturns.getgrossamt(partycode);
//                        Table.setValueAt(grossamt, Table.getSelectedRow(), 14);
//                        String disamt = clsFeltSalesReturns.getdisamt(partycode);
//                        Table.setValueAt(disamt, Table.getSelectedRow(), 15);
//                        String netamt = clsFeltSalesReturns.getnetamt(partycode);
//                        Table.setValueAt(netamt, Table.getSelectedRow(), 16);
                        Table.setValueAt(aList.ReturnVal.trim() + "RV", Table.getSelectedRow(), 19);
                    }

                }
            }
        }
    }//GEN-LAST:event_TableKeyPressed

    private void txtdocnoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtdocnoFocusGained
        //lblStatus.setText("Enter Packing Date.");
    }//GEN-LAST:event_txtdocnoFocusGained

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        Report();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltGroupMaster.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed

        Object[] rowData = new Object[50];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        rowData[7] = "";
        rowData[8] = "";
        rowData[9] = "";
        rowData[10] = "";
        rowData[11] = "";
        rowData[12] = "";
        rowData[13] = "";
        rowData[14] = "";
        rowData[15] = "";
        rowData[16] = "";
        rowData[17] = "";
        rowData[18] = "";
        rowData[19] = "";
        rowData[20] = lblMenu.getText().trim();
        rowData[21] = "";
        rowData[22] = "";
        rowData[23] = "";
        rowData[24] = "";
        rowData[25] = "";
        rowData[26] = "";

        DataModelPieceNo.addRow(rowData);
        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
        int last = Table.getSelectedColumn();

        if (last == 1) {
            ShowMessage("Enter Press F1 for the Piece No");
        }

    }//GEN-LAST:event_cmdAddActionPerformed

    private void txtdocnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtdocnoFocusLost

    }//GEN-LAST:event_txtdocnoFocusLost

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased

        if ((EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) && (EITLERPGLOBAL.gNewUserID == 394 || EITLERPGLOBAL.gNewUserID == 331 || EITLERPGLOBAL.gNewUserID == 318 || EITLERPGLOBAL.gNewUserID == 361 || EITLERPGLOBAL.gNewUserID == 352)) {
            if (Table.getSelectedColumn() == 22 || Table.getSelectedColumn() == 23 || Table.getSelectedColumn() == 24 || Table.getSelectedColumn() == 0) {
                if (evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == 10 || evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
                    try {
                        String UPNStatus = ((String) Table.getValueAt(Table.getSelectedRow(), 22)).trim();
                        String scrapReason = ((String) Table.getValueAt(Table.getSelectedRow(), 23)).trim();
                        String unmappedReason = ((String) Table.getValueAt(Table.getSelectedRow(), 24)).trim();
                        if (UPNStatus.trim().equals("SCRAP")) {
                            Table.setValueAt("", Table.getSelectedRow(), 24);
                        } else if (UPNStatus.trim().equals("UNMAPPED")) {
                            Table.setValueAt("", Table.getSelectedRow(), 23);
                        } else {
                            Table.setValueAt("", Table.getSelectedRow(), 23);
                            Table.setValueAt("", Table.getSelectedRow(), 24);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278) {
                for (int i = 0; i <= Table.getRowCount() - 1; i++) {
                    String category = ((String) Table.getValueAt(i, 20)).trim();
                    String categoryCndtn = ((String) Table.getValueAt(i, 25)).trim();
                    String cndtnStatus = ((String) Table.getValueAt(i, 26)).trim();

                    if (category.equals("GR with Complain") && !categoryCndtn.equals("Usable/Received in original")) {
                        mCondition = 1;
                    }
                    if (category.equals("GR with Complain") && categoryCndtn.equals("Usable/Received in original") && cndtnStatus.equals("SCRAP")) {
                        mCondition = 1;
                    }
                }
            }
            if (lblMenu.getText().trim().toString().equals("GR with Complain")) {
                if (mCondition == 1 && (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278)) {
                    OpgApprove.setEnabled(true);
                    OpgFinal.setEnabled(false);
                }
                if (mCondition == 0 && (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278)) {
                    OpgApprove.setEnabled(false);
                    OpgFinal.setEnabled(true);
                }
            }
        }

    }//GEN-LAST:event_TableKeyReleased

    private void txtdocnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdocnoKeyPressed

    }//GEN-LAST:event_txtdocnoKeyPressed

    private void txtdocnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdocnoActionPerformed

    }//GEN-LAST:event_txtdocnoActionPerformed

    private void txtinwardnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtinwardnoFocusLost

    }//GEN-LAST:event_txtinwardnoFocusLost

    private void TableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_TableKeyTyped

    private void TableVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_TableVetoableChange
        // TODO add your handling code here:

    }//GEN-LAST:event_TableVetoableChange

    private void txtinwarddateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtinwarddateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtinwarddateActionPerformed

    private void menuGRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGRActionPerformed
        // TODO add your handling code here:
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Generate new document no.
        EITLERP.SelectFirstFree aList = new EITLERP.SelectFirstFree();
        aList.ModuleID = 744;
        aList.FirstFreeNo = 207;
        FFNo = aList.FirstFreeNo;
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FFNo = aList.FirstFreeNo;
        SetupApproval();

        //Display newly generated document no.
        txtdocno.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 744, FFNo, false));
        lblTitle.setText("FELT SALES RETURNS DETAILS - " + txtdocno.getText());
        lblTitle.setBackground(Color.GRAY);
        lblMenu.setText("GR");
        GenerateHierarchyCombo();
    }//GEN-LAST:event_menuGRActionPerformed

    private void menuGRCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGRCActionPerformed
        // TODO add your handling code here:
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Generate new document no.
        EITLERP.SelectFirstFree aList = new EITLERP.SelectFirstFree();
        aList.ModuleID = 744;
        aList.FirstFreeNo = 207;
        FFNo = aList.FirstFreeNo;
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FFNo = aList.FirstFreeNo;
        SetupApproval();

        //Display newly generated document no.
        txtdocno.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 744, FFNo, false));
        lblTitle.setText("FELT SALES RETURNS DETAILS - " + txtdocno.getText());
        lblTitle.setBackground(Color.GRAY);
        lblMenu.setText("GR with Complain");
        GenerateHierarchyCombo();
    }//GEN-LAST:event_menuGRCActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblMenu;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem menuGR;
    private javax.swing.JMenuItem menuGRC;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtdocdate;
    private javax.swing.JTextField txtdocno;
    private javax.swing.JTextField txtinwarddate;
    private javax.swing.JTextField txtinwardno;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {
        txtdocno.setEnabled(pStat);
        txtdocdate.setEnabled(pStat);
        txtinwardno.setEnabled(pStat);
        txtinwarddate.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        Table.setEnabled(pStat);
        SetupApproval();
    }

    private void ClearFields() {
        txtdocno.setText("");
        txtdocdate.setText(EITLERPGLOBAL.getCurrentDate());
        txtinwardno.setText("");
        txtinwarddate.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        lblMenu.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 744)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltGroupMaster.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltGroupMaster.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String groupid = ObjFeltGroupMaster.getAttribute("DOC_NO").getString();

            txtdocdate.setText(EITLERPGLOBAL.formatDate(ObjFeltGroupMaster.getAttribute("DOC_DATE").getString()));
            txtinwardno.setText(ObjFeltGroupMaster.getAttribute("GR_INWARD_NO").getString());
            txtinwarddate.setText(EITLERPGLOBAL.formatDate(ObjFeltGroupMaster.getAttribute("GR_INWARD_DATE").getString()));
            lblMenu.setText(ObjFeltGroupMaster.getAttribute("GR_CATEGORY").getString());

            lblTitle.setText(" FELT SALES RETURNS DETAILS - " + groupid);
            lblRevNo.setText(Integer.toString((int) ObjFeltGroupMaster.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, ObjFeltGroupMaster.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate = true;

            txtdocno.setText(groupid);

            //Now Generate Table
            FormatGrid();

            int total = 0;
            for (int i = 1; i <= ObjFeltGroupMaster.hmFeltGroupMasterDetails.size(); i++) {
                clsFeltSalesReturnsDetails ObjFeltGroupMasterDetails = (clsFeltSalesReturnsDetails) ObjFeltGroupMaster.hmFeltGroupMasterDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];
                rowData[0] = Integer.toString(i);
                rowData[1] = ObjFeltGroupMasterDetails.getAttribute("PIECE_NO").getString();
                rowData[2] = ObjFeltGroupMasterDetails.getAttribute("INVOICE_NO").getString();
                rowData[3] = EITLERPGLOBAL.formatDate(ObjFeltGroupMasterDetails.getAttribute("INVOICE_DATE").getString());
                rowData[4] = ObjFeltGroupMasterDetails.getAttribute("PARTY_CODE").getString();
                rowData[5] = ObjFeltGroupMasterDetails.getAttribute("PARTY_NAME").getString();
                rowData[6] = ObjFeltGroupMasterDetails.getAttribute("QUALITY_NO").getString();
                rowData[7] = ObjFeltGroupMasterDetails.getAttribute("LENGTH").getString();
                rowData[8] = ObjFeltGroupMasterDetails.getAttribute("WIDTH").getString();
                rowData[9] = ObjFeltGroupMasterDetails.getAttribute("ACTUAL_WEIGHT").getString();
                rowData[10] = ObjFeltGroupMasterDetails.getAttribute("TOTAL_GROSS").getString();
                rowData[11] = ObjFeltGroupMasterDetails.getAttribute("TOTAL_NET_AMOUNT").getString();
                rowData[12] = ObjFeltGroupMasterDetails.getAttribute("GROSS_SQ_MTR").getString();
                rowData[13] = ObjFeltGroupMasterDetails.getAttribute("GROSS_KG").getString();
                rowData[14] = ObjFeltGroupMasterDetails.getAttribute("GROSS_AMOUNT").getString();
                rowData[15] = ObjFeltGroupMasterDetails.getAttribute("TRD_DISCOUNT").getString();
                rowData[16] = ObjFeltGroupMasterDetails.getAttribute("NET_AMOUNT").getString();
                rowData[17] = ObjFeltGroupMasterDetails.getAttribute("REMARKS").getString();
                rowData[18] = ObjFeltGroupMasterDetails.getAttribute("LR_NO").getString();
                rowData[19] = ObjFeltGroupMasterDetails.getAttribute("NEW_PIECE_NO").getString();
                rowData[20] = ObjFeltGroupMasterDetails.getAttribute("RETURN_CATEGORY").getString();
                rowData[21] = ObjFeltGroupMasterDetails.getAttribute("OC_MONTH").getString();
                rowData[22] = ObjFeltGroupMasterDetails.getAttribute("OBSOLETE_UPN_ASSIGN_STATUS").getString();
                rowData[23] = ObjFeltGroupMasterDetails.getAttribute("SCRAP_REASON").getString();
                rowData[24] = ObjFeltGroupMasterDetails.getAttribute("UNMAPPED_REASON").getString();
                rowData[25] = ObjFeltGroupMasterDetails.getAttribute("CATEGORY_CONDITION").getString();
                rowData[26] = ObjFeltGroupMasterDetails.getAttribute("CONDITION_STATUS").getString();

                DataModelPieceNo.addRow(rowData);

            }
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString());
            for (int i = 1; i <= hmList.size(); i++) {

                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelPieceNoApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltSalesReturns.getHistoryList(ObjFeltGroupMaster.getAttribute("DOC_NO").getString(), groupid);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltSalesReturns ObjFeltGroupMaster = (clsFeltSalesReturns) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltGroupMaster.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltGroupMaster.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltGroupMaster.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltGroupMaster.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltGroupMaster.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltGroupMaster.getAttribute("FROM_IP").getString();

                DataModelPieceNoUpdateHistory.addRow(rowData);
            }
            SetFields(false);
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=744 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=744 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
//            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
//            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
//            cmbHierarchyModel.addElement(aData);
            if (lblMenu.getText().trim().equals("GR") && !ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj().toString().contains("-ABP")) {
                aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
            if (!lblMenu.getText().trim().equals("GR") && ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj().toString().contains("-ABP")) {
                aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
                aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
                cmbHierarchyModel.addElement(aData);
            }
        }
    }

    private void SetupApproval() {

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(744, FromUserID, ObjFeltGroupMaster.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
        if (EditMode == EITLERPGLOBAL.EDIT && (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278)) {
            OpgApprove.setEnabled(true);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6064, 60641)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6064, 60642)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6064, 60643)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6064, 60644)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {

        jPopupMenu.show(cmdNew, 0, 30);
        //FlagId = 1;
//        if (!EITLERPGLOBAL.YearIsOpen) {
//            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        //Generate new document no.
//        EITLERP.SelectFirstFree aList = new EITLERP.SelectFirstFree();
//        aList.ModuleID = 744;
//        aList.FirstFreeNo = 207;
//        FFNo = aList.FirstFreeNo;
//        EditMode = EITLERPGLOBAL.ADD;
//        SetFields(true);
//        DisableToolbar();
//        ClearFields();
//        FFNo = aList.FirstFreeNo;
//        SetupApproval();
//
//        //Display newly generated document no.
//        txtdocno.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 744, FFNo, false));
//        lblTitle.setText("FELT SALES RETURNS DETAILS - " + txtdocno.getText());
//        lblTitle.setBackground(Color.GRAY);

    }

    private void Edit() {
        if (ObjFeltGroupMaster.IsEditable(txtdocno.getText(), EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            if (clsFeltProductionApprovalFlow.IsCreator(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            } else {
                EnableApproval();
                if (EITLERPGLOBAL.gNewUserID == 394 || EITLERPGLOBAL.gNewUserID == 331 || EITLERPGLOBAL.gNewUserID == 318 || EITLERPGLOBAL.gNewUserID == 361 || EITLERPGLOBAL.gNewUserID == 352) {
                    Table.setEnabled(true);
                    for (int l = 0; l <= 20; l++) {
                        DataModelPieceNo.SetReadOnly(l);
                    }
                    DataModelPieceNo.SetReadOnly(25);
                    DataModelPieceNo.SetReadOnly(26);
                } else if (EITLERPGLOBAL.gNewUserID == 338 && !lblMenu.getText().trim().equals("GR")) {
                    Table.setEnabled(true);
                    for (int l = 0; l <= 24; l++) {
                        DataModelPieceNo.SetReadOnly(l);
                    }
                    DataModelPieceNo.SetReadOnly(26);
                } else if (!lblMenu.getText().trim().equals("GR") && (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278)) {
                    Table.setEnabled(true);
                    for (int l = 0; l <= 25; l++) {
                        DataModelPieceNo.SetReadOnly(l);
                    }
                } else {
                    Table.setEnabled(false);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        // txtdocdate.setEnabled(true);
        txtinwardno.setEnabled(true);
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this, "The year is closed. You cannot enter/edit any transaction", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//

        int ValidEntryCount = 0;

        if (txtinwardno.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Party Code");
            txtinwardno.requestFocus(true);
            return;
        }
        if (ObjFeltGroupMaster.CanDelete(txtdocno.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, ObjFeltGroupMaster.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {

        String docno, docdate, inwardno = "", inwarddate = "", pieceno = "", invoiceno = "", invoicedate = "", length = "", width = "", weight = "", Remarks = "";
        String pMenu = "";

        docno = txtdocno.getText().trim();
        docdate = txtdocdate.getText().trim();
        inwardno = txtinwardno.getText().trim();
        inwarddate = txtinwarddate.getText().trim();
        pMenu = lblMenu.getText().trim();
        //Form level validations
        if (docno.equals("")) {

            return;
        }
        if (docdate.equals("")) {

            return;
        }
        if (pMenu.equals("")) {
            return;
        }

        // check Packing Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);

        //Check the no. of items
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Enter Group Master Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int i = 0, j = 0;
        try {
            String partyCode = "", partyName = "", productcode = "", totalgross = "", totalnetamount = "", grosssqmtr = "", grosskg = "", grossamount = "", trddiscount = "", netamount = "", lrno = "", newPieceNo = "", category = "", OCMonth = "";
            String UPNStatus = "", scrapReason = "", unmappedReason = "";
            String categoryCndtn = "", cndtnStatus = "";

            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Party Code at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {
                pieceno = ((String) Table.getValueAt(i, 1)).trim();
                invoiceno = ((String) Table.getValueAt(i, 2)).trim();
                invoicedate = ((String) Table.getValueAt(i, 3)).trim();
                partyCode = ((String) Table.getValueAt(i, 4)).trim();
                partyName = ((String) Table.getValueAt(i, 5)).trim();
                productcode = ((String) Table.getValueAt(i, 6)).trim();
                length = ((String) Table.getValueAt(i, 7)).trim();
                width = ((String) Table.getValueAt(i, 8)).trim();
                weight = ((String) Table.getValueAt(i, 9)).trim();
                totalgross = ((String) Table.getValueAt(i, 10)).trim();
                totalnetamount = ((String) Table.getValueAt(i, 11)).trim();
                grosssqmtr = ((String) Table.getValueAt(i, 12)).trim();
                grosskg = ((String) Table.getValueAt(i, 13)).trim();
                grossamount = ((String) Table.getValueAt(i, 14)).trim();
                trddiscount = ((String) Table.getValueAt(i, 15)).trim();
                netamount = ((String) Table.getValueAt(i, 16)).trim();
                Remarks = ((String) Table.getValueAt(i, 17)).trim();
                lrno = ((String) Table.getValueAt(i, 18)).trim();

                newPieceNo = ((String) Table.getValueAt(i, 19)).trim();
                category = ((String) Table.getValueAt(i, 20)).trim();
                OCMonth = ((String) Table.getValueAt(i, 21)).trim();

                UPNStatus = ((String) Table.getValueAt(i, 22)).trim();
                scrapReason = ((String) Table.getValueAt(i, 23)).trim();
                unmappedReason = ((String) Table.getValueAt(i, 24)).trim();

                categoryCndtn = ((String) Table.getValueAt(i, 25)).trim();
                cndtnStatus = ((String) Table.getValueAt(i, 26)).trim();

                j++;
                if (partyCode.equals("") || partyCode.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Party Code", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (Remarks.equals("") || Remarks.equals(null)) {
                    JOptionPane.showMessageDialog(this, "Enter Remarks ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
//                if (category.equals("") || category.equals(null)) {
//                    JOptionPane.showMessageDialog(this, "Select Return Category", "ERROR", JOptionPane.ERROR_MESSAGE);
//                    return;
//                }
//                if (OCMonth.equals("") || OCMonth.equals(null)) {
//                    JOptionPane.showMessageDialog(this, "Select OC Month of Return Piece ", "ERROR", JOptionPane.ERROR_MESSAGE);
//                    return;
//                }
                if (EITLERPGLOBAL.gNewUserID == 394 || EITLERPGLOBAL.gNewUserID == 331 || EITLERPGLOBAL.gNewUserID == 318 || EITLERPGLOBAL.gNewUserID == 361 || EITLERPGLOBAL.gNewUserID == 352) {
                    if (category.equals("") || category.equals(null)) {
                        JOptionPane.showMessageDialog(this, "Select Return Category", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (OCMonth.equals("") || OCMonth.equals(null)) {
                        JOptionPane.showMessageDialog(this, "Select OC Month of Return Piece ", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (EITLERPGLOBAL.gNewUserID == 394 || EITLERPGLOBAL.gNewUserID == 331 || EITLERPGLOBAL.gNewUserID == 318 || EITLERPGLOBAL.gNewUserID == 361 || EITLERPGLOBAL.gNewUserID == 352) {
                    if (category.equals("GR with Complain") && (UPNStatus.equals("") || UPNStatus.equals(null))) {
                        JOptionPane.showMessageDialog(this, "Select Return Obsolete UPN Assign Status", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (UPNStatus.equals("SCRAP") && (scrapReason.equals("") || scrapReason.equals(null))) {
                        JOptionPane.showMessageDialog(this, "Enter Scrap Reason", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (UPNStatus.equals("UNMAPPED") && (unmappedReason.equals("") || unmappedReason.equals(null))) {
                        JOptionPane.showMessageDialog(this, "Enter UnMapped Reason", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (EITLERPGLOBAL.gNewUserID == 338) {
                    if (category.equals("GR with Complain") && (categoryCndtn.equals("") || categoryCndtn.equals(null))) {
                        JOptionPane.showMessageDialog(this, "Select Return Category Condition", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278) {
                    if (category.equals("GR with Complain") && (cndtnStatus.equals("") || cndtnStatus.equals(null))) {
                        JOptionPane.showMessageDialog(this, "Select Return Condition Status", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (category.equals("GR with Complain") && !categoryCndtn.equals("Usable/Received in original")) {
                        mCondition = 1;
                    }
                    if (category.equals("GR with Complain") && categoryCndtn.equals("Usable/Received in original") && cndtnStatus.equals("SCRAP")) {
                        mCondition = 1;
                    }
                }

            }
        } catch (NumberFormatException nfe) {
            return;
        }

        if (lblMenu.getText().trim().toString().equals("GR with Complain")) {
            if (mCondition == 1 && OpgFinal.isSelected() && (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278)) {
                OpgFinal.setEnabled(false);
                OpgFinal.setSelected(false);
                OpgHold.setSelected(true);
                JOptionPane.showMessageDialog(this, "You can not final approve this record.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (mCondition == 0 && OpgApprove.isSelected() && (EITLERPGLOBAL.gNewUserID == 26 || EITLERPGLOBAL.gNewUserID == 28 || EITLERPGLOBAL.gNewUserID == 278)) {
                OpgApprove.setEnabled(false);
                OpgApprove.setSelected(false);
                OpgHold.setSelected(true);
                JOptionPane.showMessageDialog(this, "You can final approve this record.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send");
            return;
        }
//                for (int k = 0; k < Table.getRowCount(); k++) {
//            
//                   String PieceNo = data.getStringValueFromDB("SELECT PIECE_NO FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL WHERE PIECE_NO='" + (String)Table.getValueAt(k, 1) +"' AND CANCELED=0");
//
//                if (PieceNo != "") {
//                JOptionPane.showMessageDialog(this,"Piece already exist");
//                return;
//            }
        //    }

        //set data for insert/update
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltGroupMaster.Insert()) {

//                        if(OpgFinal.isSelected())
//                        {
//                                    try{
//                                       String DOC_NO = txtdocno.getText();
//                                       String DOC_DATE = txtdocdate.getText();
//                                       String Party_Code = "";
//                                       int Module_Id = 744;
//
//                                       String responce = JavaMail.sendFinalApprovalMail(Module_Id, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
//                                       System.out.println("Send Mail Responce : "+responce); 
//
//                                   }catch(Exception e)
//                                   {
//                                       e.printStackTrace();
//                                   }
//                        } 
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + ObjFeltGroupMaster.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltGroupMaster.Update()) {

                if (OpgFinal.isSelected()) {

                    for (i = 0; i <= Table.getRowCount() - 1; i++) {
                        String PIECE_NO = ((String) Table.getValueAt(i, 1)).trim();
                        String PartyCode = ((String) Table.getValueAt(i, 4)).trim();
                        String REMAKRS = ((String) Table.getValueAt(i, 17)).trim();
                        String Category = ((String) Table.getValueAt(i, 20)).trim();
                        String OCMonth = ((String) Table.getValueAt(i, 21)).trim();

                        String UPNStatus = ((String) Table.getValueAt(i, 22)).trim();
                        String scrapReason = ((String) Table.getValueAt(i, 23)).trim();
                        String unmappedReason = ((String) Table.getValueAt(i, 24)).trim();

                        String cndtnStatus = ((String) Table.getValueAt(i, 26)).trim();

//                                String InsertQuery = "INSERT INTO PRODUCTION.FELT_SALES_PIECE_REGISTER SELECT CONCAT(TRIM(PR_PIECE_NO),'R'),PR_DATE,PR_ORDER_DATE,PR_DOC_NO,PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,PR_PRODUCT_CODE,PR_GROUP,PR_STYLE,PR_LENGTH,PR_WIDTH,PR_GSM,PR_THORITICAL_WEIGHT,PR_SQMTR,PR_SYN_PER,PR_REQUESTED_MONTH,PR_REGION,PR_INCHARGE,PR_REFERENCE,PR_REFERENCE_DATE,PR_PO_NO,PR_PO_DATE,PR_ORDER_REMARK,PR_PIECE_REMARK,PR_PIECE_STAGE,PR_WARP_DATE,PR_WVG_DATE,PR_MND_DATE,PR_NDL_DATE,PR_FNSG_DATE,PR_RCV_DATE,PR_ACTUAL_WEIGHT,PR_ACTUAL_LENGTH,PR_ACTUAL_WIDTH,PR_BALE_NO,PR_PACKED_DATE,PR_REJECTED_FLAG,PR_REJECTED_REMARK,PR_DIVERSION_FLAG,PR_DIVERSION_REASON,PR_DIVERTED_FLAG,PR_DIVERTED_REASON,PR_EXP_DISPATCH_DATE,PR_PRIORITY_HOLD_CAN_FLAG,PR_INVOICE_NO,PR_INVOICE_DATE,PR_LR_NO,PR_LR_DATE,PR_INVOICE_PARTY,PR_PARTY_CODE_ORIGINAL,PR_PIECE_NO_ORIGINAL,PR_WH_CODE,PR_INWARD_NO,PR_RACK_NO,PR_PIECE_ID,PR_LOCATION,PR_HOLD_DATE,PR_HOLD_REASON,PR_RELEASE_DATE,CREATED_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY,HIERARCHY_ID,APPROVER_BY,APPROVER_DATE,APPROVER_REMARK,BALE_REOPEN_FLG,WVG_LAYER_REMARK,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_BILL_GSM,PR_BILL_PRODUCT_CODE,PR_PKG_DP_NO,PR_PKG_DP_DATE,PR_SALES_RETURNS_NO,PR_SALES_RETURNS_DATE,PR_SALES_RETURNS_REMARKS,PR_SALES_RETURNS_FLG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PIECE_NO+"'";
                        //String InsertQuery = "INSERT INTO PRODUCTION.FELT_SALES_PIECE_REGISTER (PR_PIECE_NO, PR_DATE, PR_ORDER_DATE, PR_DOC_NO, PR_MACHINE_NO, PR_POSITION_NO, PR_PARTY_CODE, PR_PRODUCT_CODE, PR_GROUP, PR_STYLE, PR_LENGTH, PR_WIDTH, PR_GSM, PR_THORITICAL_WEIGHT, PR_SQMTR, PR_SYN_PER, PR_REQUESTED_MONTH, PR_REGION, PR_INCHARGE, PR_REFERENCE, PR_REFERENCE_DATE, PR_PO_NO, PR_PO_DATE, PR_ORDER_REMARK, PR_PIECE_REMARK, PR_PIECE_STAGE, PR_WARP_DATE, PR_WVG_DATE, PR_MND_DATE, PR_NDL_DATE, PR_FNSG_DATE, PR_RCV_DATE, PR_ACTUAL_WEIGHT, PR_ACTUAL_LENGTH, PR_ACTUAL_WIDTH, PR_BALE_NO, PR_PACKED_DATE, PR_REJECTED_FLAG, PR_REJECTED_REMARK, PR_DIVERSION_FLAG, PR_DIVERSION_REASON, PR_DIVERTED_FLAG, PR_DIVERTED_REASON, PR_EXP_DISPATCH_DATE, PR_PRIORITY_HOLD_CAN_FLAG, PR_INVOICE_NO, PR_INVOICE_DATE, PR_LR_NO, PR_LR_DATE, PR_INVOICE_PARTY, PR_PARTY_CODE_ORIGINAL, PR_PIECE_NO_ORIGINAL, PR_WH_CODE, PR_INWARD_NO, PR_RACK_NO, PR_PIECE_ID, PR_LOCATION, PR_HOLD_DATE, PR_HOLD_REASON, PR_RELEASE_DATE, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, HIERARCHY_ID, APPROVER_BY, APPROVER_DATE, APPROVER_REMARK, BALE_REOPEN_FLG, WVG_LAYER_REMARK, PR_BILL_LENGTH, PR_BILL_WIDTH, PR_BILL_WEIGHT, PR_BILL_SQMTR, PR_BILL_GSM, PR_BILL_PRODUCT_CODE, PR_PKG_DP_NO, PR_PKG_DP_DATE, PR_SALES_RETURNS_NO, PR_SALES_RETURNS_DATE, PR_SALES_RETURNS_REMARKS, PR_SALES_RETURNS_FLG) SELECT CONCAT(TRIM(PR_PIECE_NO),'RV'),PR_DATE,PR_ORDER_DATE,PR_DOC_NO,PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,PR_PRODUCT_CODE,PR_GROUP,PR_STYLE,PR_LENGTH,PR_WIDTH,PR_GSM,PR_THORITICAL_WEIGHT,PR_SQMTR,PR_SYN_PER,PR_REQUESTED_MONTH,PR_REGION,PR_INCHARGE,PR_REFERENCE,PR_REFERENCE_DATE,PR_PO_NO,PR_PO_DATE,PR_ORDER_REMARK,PR_PIECE_REMARK,PR_PIECE_STAGE,PR_WARP_DATE,PR_WVG_DATE,PR_MND_DATE,PR_NDL_DATE,PR_FNSG_DATE,PR_RCV_DATE,PR_ACTUAL_WEIGHT,PR_ACTUAL_LENGTH,PR_ACTUAL_WIDTH,PR_BALE_NO,PR_PACKED_DATE,PR_REJECTED_FLAG,PR_REJECTED_REMARK,PR_DIVERSION_FLAG,PR_DIVERSION_REASON,PR_DIVERTED_FLAG,PR_DIVERTED_REASON,PR_EXP_DISPATCH_DATE,PR_PRIORITY_HOLD_CAN_FLAG,PR_INVOICE_NO,PR_INVOICE_DATE,PR_LR_NO,PR_LR_DATE,PR_INVOICE_PARTY,PR_PARTY_CODE_ORIGINAL,PR_PIECE_NO_ORIGINAL,PR_WH_CODE,PR_INWARD_NO,PR_RACK_NO,PR_PIECE_ID,PR_LOCATION,PR_HOLD_DATE,PR_HOLD_REASON,PR_RELEASE_DATE,CREATED_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY,HIERARCHY_ID,APPROVER_BY,APPROVER_DATE,APPROVER_REMARK,BALE_REOPEN_FLG,WVG_LAYER_REMARK,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_BILL_GSM,PR_BILL_PRODUCT_CODE,PR_PKG_DP_NO,PR_PKG_DP_DATE,PR_SALES_RETURNS_NO,PR_SALES_RETURNS_DATE,PR_SALES_RETURNS_REMARKS,PR_SALES_RETURNS_FLG FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PIECE_NO+"'";
                        String InsertQuery = "INSERT INTO PRODUCTION.FELT_SALES_PIECE_REGISTER (PR_PIECE_NO, PR_DATE, PR_ORDER_DATE, PR_DOC_NO, PR_MACHINE_NO, PR_POSITION_NO, PR_PARTY_CODE, PR_PRODUCT_CODE, PR_GROUP, PR_STYLE, PR_LENGTH, PR_WIDTH, PR_GSM, PR_THORITICAL_WEIGHT, PR_SQMTR, PR_SYN_PER, PR_REQUESTED_MONTH, PR_REGION, PR_INCHARGE, PR_REFERENCE, PR_REFERENCE_DATE, PR_PO_NO, PR_PO_DATE, PR_ORDER_REMARK, PR_PIECE_REMARK, PR_PIECE_STAGE, PR_WARP_DATE, PR_WVG_DATE, PR_MND_DATE, PR_NDL_DATE, PR_FNSG_DATE, PR_RCV_DATE, PR_ACTUAL_WEIGHT, PR_ACTUAL_LENGTH, PR_ACTUAL_WIDTH, PR_BALE_NO, PR_PACKED_DATE, PR_REJECTED_FLAG, PR_REJECTED_REMARK, PR_DIVERSION_FLAG, PR_DIVERSION_REASON, PR_DIVERTED_FLAG, PR_DIVERTED_REASON, PR_EXP_DISPATCH_DATE, PR_PRIORITY_HOLD_CAN_FLAG, PR_INVOICE_NO, PR_INVOICE_DATE, PR_LR_NO, PR_LR_DATE, PR_INVOICE_PARTY, PR_PARTY_CODE_ORIGINAL, PR_PIECE_NO_ORIGINAL, PR_WH_CODE, PR_INWARD_NO, PR_RACK_NO, PR_PIECE_ID, PR_LOCATION, PR_HOLD_DATE, PR_HOLD_REASON, PR_RELEASE_DATE, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, HIERARCHY_ID, APPROVER_BY, APPROVER_DATE, APPROVER_REMARK, BALE_REOPEN_FLG, WVG_LAYER_REMARK, PR_BILL_LENGTH, PR_BILL_WIDTH, PR_BILL_WEIGHT, PR_BILL_SQMTR, PR_BILL_GSM, PR_BILL_PRODUCT_CODE, PR_PKG_DP_NO, PR_PKG_DP_DATE, PR_SALES_RETURNS_NO, PR_SALES_RETURNS_DATE, PR_SALES_RETURNS_REMARKS, PR_SALES_RETURNS_FLG, PR_WEAVING_WEIGHT, PR_WEAVING_WEIGHT_A, PR_WEAVING_WEIGHT_B, PR_NEEDLING_WEIGHT, PR_NEEDLING_WEIGHT_A, PR_NEEDLING_WEIGHT_B, PR_WIP_STATUS, PR_UPN, PR_WVG_A_DATE, PR_WVG_B_DATE, PR_MND_A_DATE, PR_MND_B_DATE, PR_SPLICE_DATE, PR_SPLICE_WIEGHT, PR_SEAM_DATE, PR_SEAM_WEIGHT, PR_MENDING_WEIGHT_A, PR_MENDING_WEIGHT_B, PR_MENDING_WEIGHT, PR_CLOSURE_REOPEN_IND, PR_CLOSURE_DATE, PR_CLOSURE_REMARK, PR_PIECE_AB_FLAG, PR_WARP_A_DATE, PR_WARP_B_DATE, PR_WARPING_WEIGHT, PR_WARPING_WEIGHT_A, PR_WARPING_WEIGHT_B, PR_BILL_STYLE, PR_ADJUSTABLE_LENGTH, PR_ADJUSTABLE_WIDTH, PR_ADJUSTABLE_GSM, PR_ADJUSTABLE_WEIGHT, PR_GIDC_STATUS, PR_TENDER_GSM, PR_TENDER_WEIGHT) SELECT CONCAT(TRIM(PR_PIECE_NO),'RV'),PR_DATE,PR_ORDER_DATE,PR_DOC_NO,PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,PR_PRODUCT_CODE,PR_GROUP,PR_STYLE,PR_LENGTH,PR_WIDTH,PR_GSM,PR_THORITICAL_WEIGHT,PR_SQMTR,PR_SYN_PER,PR_REQUESTED_MONTH,PR_REGION,PR_INCHARGE,PR_REFERENCE,PR_REFERENCE_DATE,PR_PO_NO,PR_PO_DATE,PR_ORDER_REMARK,PR_PIECE_REMARK,PR_PIECE_STAGE,PR_WARP_DATE,PR_WVG_DATE,PR_MND_DATE,PR_NDL_DATE,PR_FNSG_DATE,PR_RCV_DATE,PR_ACTUAL_WEIGHT,PR_ACTUAL_LENGTH,PR_ACTUAL_WIDTH,PR_BALE_NO,PR_PACKED_DATE,PR_REJECTED_FLAG,PR_REJECTED_REMARK,'READY',PR_DIVERSION_REASON,PR_DIVERTED_FLAG,PR_DIVERTED_REASON,PR_EXP_DISPATCH_DATE,'5',PR_INVOICE_NO,PR_INVOICE_DATE,PR_LR_NO,PR_LR_DATE,PR_INVOICE_PARTY,PR_PARTY_CODE_ORIGINAL,PR_PIECE_NO_ORIGINAL,PR_WH_CODE,PR_INWARD_NO,PR_RACK_NO,PR_PIECE_ID,PR_LOCATION,PR_HOLD_DATE,PR_HOLD_REASON,PR_RELEASE_DATE,CREATED_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY,HIERARCHY_ID,APPROVER_BY,APPROVER_DATE,APPROVER_REMARK,BALE_REOPEN_FLG,WVG_LAYER_REMARK,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_BILL_GSM,PR_BILL_PRODUCT_CODE,PR_PKG_DP_NO,PR_PKG_DP_DATE,PR_SALES_RETURNS_NO,PR_SALES_RETURNS_DATE,PR_SALES_RETURNS_REMARKS,PR_SALES_RETURNS_FLG, PR_WEAVING_WEIGHT, PR_WEAVING_WEIGHT_A, PR_WEAVING_WEIGHT_B, PR_NEEDLING_WEIGHT, PR_NEEDLING_WEIGHT_A, PR_NEEDLING_WEIGHT_B, PR_WIP_STATUS, PR_UPN, PR_WVG_A_DATE, PR_WVG_B_DATE, PR_MND_A_DATE, PR_MND_B_DATE, PR_SPLICE_DATE, PR_SPLICE_WIEGHT, PR_SEAM_DATE, PR_SEAM_WEIGHT, PR_MENDING_WEIGHT_A, PR_MENDING_WEIGHT_B, PR_MENDING_WEIGHT, PR_CLOSURE_REOPEN_IND, PR_CLOSURE_DATE, PR_CLOSURE_REMARK, PR_PIECE_AB_FLAG, PR_WARP_A_DATE, PR_WARP_B_DATE, PR_WARPING_WEIGHT, PR_WARPING_WEIGHT_A, PR_WARPING_WEIGHT_B, PR_BILL_STYLE, PR_ADJUSTABLE_LENGTH, PR_ADJUSTABLE_WIDTH, PR_ADJUSTABLE_GSM, PR_ADJUSTABLE_WEIGHT, PR_GIDC_STATUS, PR_TENDER_GSM, PR_TENDER_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + PIECE_NO + "'";
                        data.Execute(InsertQuery);
                        //Added on 08/04/2019
                        String InsertWIPQuery = "INSERT INTO PRODUCTION.FELT_WIP_PIECE_REGISTER (WIP_PIECE_NO, WIP_EXT_PIECE_NO, WIP_DATE, WIP_ORDER_DATE, WIP_DOC_NO, WIP_MACHINE_NO, WIP_POSITION_NO, WIP_PARTY_CODE, WIP_PRODUCT_CODE, WIP_GROUP, WIP_STYLE, WIP_LENGTH, WIP_WIDTH, WIP_GSM, WIP_THORITICAL_WEIGHT, WIP_SQMTR, WIP_SYN_PER, WIP_REGION, WIP_INCHARGE, WIP_REFERENCE, WIP_REFERENCE_DATE, WIP_PO_NO, WIP_PO_DATE, WIP_ORDER_REMARK, WIP_PIECE_REMARK, WIP_PIECE_STAGE, WIP_STATUS, WIP_WARP_DATE, WIP_WVG_DATE, WIP_MND_DATE, WIP_NDL_DATE, WIP_FNSG_DATE, WIP_ACTUAL_WEIGHT, WIP_ACTUAL_LENGTH, WIP_ACTUAL_WIDTH, WIP_REJECTED_FLAG, WIP_REJECTED_REMARK, WIP_DIVERSION_FLAG, WIP_DIVERSION_REASON, WIP_DIVERTED_FLAG, WIP_DIVERTED_REASON, WIP_EXP_DISPATCH_DATE, WIP_PRIORITY_HOLD_CAN_FLAG, WIP_PARTY_CODE_ORIGINAL, WIP_PIECE_NO_ORIGINAL, WIP_HOLD_DATE, WIP_HOLD_REASON, WIP_RELEASE_DATE, WIP_BILL_LENGTH, WIP_BILL_WIDTH, WIP_BILL_WEIGHT, WIP_BILL_SQMTR, WIP_BILL_GSM, WIP_BILL_PRODUCT_CODE, WIP_UPN, WIP_BILL_STYLE, WIP_TENDER_GSM, WIP_TENDER_WEIGHT, WIP_GIDC_STATUS, WIP_PIECE_AB_FLAG, WIP_WARP_A_DATE, WIP_WARP_B_DATE, WIP_WARPING_WEIGHT, WIP_WARPING_WEIGHT_A, WIP_WARPING_WEIGHT_B, WIP_WVG_A_DATE, WIP_WVG_B_DATE, WIP_WEAVING_WEIGHT, WIP_WEAVING_WEIGHT_A, WIP_WEAVING_WEIGHT_B, WIP_MND_A_DATE, WIP_MND_B_DATE, WIP_MENDING_WEIGHT, WIP_MENDING_WEIGHT_A, WIP_MENDING_WEIGHT_B, WIP_NEEDLING_WEIGHT, WIP_SEAM_DATE, WIP_SEAM_WEIGHT, WIP_ADJUSTABLE_LENGTH, WIP_ADJUSTABLE_WIDTH, WIP_ADJUSTABLE_GSM, WIP_ADJUSTABLE_WEIGHT) SELECT CONCAT(TRIM(PR_PIECE_NO),'RV'), CONCAT(TRIM(PR_PIECE_NO),'RV'),PR_DATE,PR_ORDER_DATE,PR_DOC_NO,PR_MACHINE_NO,PR_POSITION_NO,PR_PARTY_CODE,PR_PRODUCT_CODE,PR_GROUP,PR_STYLE,PR_LENGTH,PR_WIDTH,PR_GSM,PR_THORITICAL_WEIGHT,PR_SQMTR,PR_SYN_PER,PR_REGION,PR_INCHARGE,PR_REFERENCE,PR_REFERENCE_DATE,PR_PO_NO,PR_PO_DATE,PR_ORDER_REMARK,PR_PIECE_REMARK,'OSG STOCK','RETURN',PR_WARP_DATE,PR_WVG_DATE,PR_MND_DATE,PR_NDL_DATE,'0000-00-00',PR_ACTUAL_WEIGHT,PR_ACTUAL_LENGTH,PR_ACTUAL_WIDTH,'0',PR_REJECTED_REMARK,'READY',PR_DIVERSION_REASON,PR_DIVERTED_FLAG,PR_DIVERTED_REASON,PR_EXP_DISPATCH_DATE,'0',PR_PARTY_CODE_ORIGINAL,PR_PIECE_NO_ORIGINAL,PR_HOLD_DATE,PR_HOLD_REASON,PR_RELEASE_DATE,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_WEIGHT,PR_BILL_SQMTR,PR_BILL_GSM,PR_BILL_PRODUCT_CODE, PR_UPN, PR_BILL_STYLE, PR_TENDER_GSM, PR_TENDER_WEIGHT, PR_GIDC_STATUS, PR_PIECE_AB_FLAG, PR_WARP_A_DATE, PR_WARP_B_DATE, PR_WARPING_WEIGHT, PR_WARPING_WEIGHT_A, PR_WARPING_WEIGHT_B, PR_WVG_A_DATE, PR_WVG_B_DATE, PR_WEAVING_WEIGHT, PR_WEAVING_WEIGHT_A, PR_WEAVING_WEIGHT_B, PR_MND_A_DATE, PR_MND_B_DATE, PR_MENDING_WEIGHT, PR_MENDING_WEIGHT_A, PR_MENDING_WEIGHT_B, PR_NEEDLING_WEIGHT, PR_SEAM_DATE, PR_SEAM_WEIGHT, PR_ADJUSTABLE_LENGTH, PR_ADJUSTABLE_WIDTH, PR_ADJUSTABLE_GSM, PR_ADJUSTABLE_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + PIECE_NO + "'";
                        data.Execute(InsertWIPQuery);

                        //data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_PIECE_STAGE='OSG STOCK',PR_WIP_STATUS='RETURN',PR_PKG_DP_NO='',PR_PKG_DP_DATE='0000-00-00',PR_INVOICE_NO='',PR_INVOICE_DATE='0000-00-00',PR_BALE_NO='',PR_PACKED_DATE='0000-00-00',PR_FNSG_DATE='0000-00-00',PR_RCV_DATE='0000-00-00',PR_DELINK='OBSOLETE',PR_OBSOLETE_DATE=CURDATE(),PR_DELINK_REASON='GOODS RETURN',PR_OC_MONTHYEAR='"+OCMonth+"',PR_REQUESTED_MONTH='"+OCMonth+"',PR_CURRENT_SCH_MONTH='"+OCMonth+"' WHERE PR_PIECE_NO='"+PIECE_NO+"RV'");
                        data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_PIECE_STAGE='OSG STOCK',PR_WIP_STATUS='RETURN',PR_PKG_DP_NO='',PR_PKG_DP_DATE='0000-00-00',PR_INVOICE_NO='',PR_INVOICE_DATE='0000-00-00',PR_BALE_NO='',PR_PACKED_DATE='0000-00-00',PR_FNSG_DATE='0000-00-00',PR_RCV_DATE='0000-00-00',PR_OC_MONTHYEAR='" + OCMonth + "',PR_REQUESTED_MONTH='" + OCMonth + "',PR_CURRENT_SCH_MONTH='" + OCMonth + "' WHERE PR_PIECE_NO='" + PIECE_NO + "RV'");
                        data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER  SET WIP_OC_MONTHYEAR='" + OCMonth + "',WIP_REQUESTED_MONTH='" + OCMonth + "',WIP_CURRENT_SCH_MONTH='" + OCMonth + "' WHERE WIP_PIECE_NO='" + PIECE_NO + "RV'");
                        // Added on 05/03/2020
                        if (Category.equals("GR with Complain")) {
                            String sql = "";

                            if (cndtnStatus.equals("OBSOLETE")) {
                                data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_DELINK='OBSOLETE',PR_OBSOLETE_DATE=CURDATE(),PR_DELINK_REASON='GOODS RETURN',PR_OBSOLETE_SOURCE='GOODS RETURN',PR_OBSOLETE_UPN_ASSIGN_STATUS='" + UPNStatus + "',PR_SCRAP_REASON='" + scrapReason + "',PR_UNMAPPED_REASON='" + unmappedReason + "' WHERE PR_PIECE_NO='" + PIECE_NO + "RV'");
                                data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER  SET WIP_OBSOLETE='OBSOLETE',WIP_OBSOLETE_DATE=CURDATE(),WIP_OBSOLETE_REASON='GOODS RETURN',WIP_OBSOLETE_SOURCE='GOODS RETURN',WIP_OBSOLETE_UPN_ASSIGN_STATUS='" + UPNStatus + "',WIP_SCRAP_REASON='" + scrapReason + "',WIP_UNMAPPED_REASON='" + unmappedReason + "' WHERE WIP_PIECE_NO='" + PIECE_NO + "RV'");
                                sql = "INSERT INTO PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP (PIECE_NO, PARTY_CODE, STYLE, PROD_GROUP, GSM, "
                                        + "SYN_PER, UPN_ASSIGN_STATUS, UNMAPPED_REASON, SCRAP_REASON, OBSOLETE_SOURCE, ENTRY_DATE) "
                                        + "SELECT PR_PIECE_NO, PR_PARTY_CODE, PR_STYLE, PR_GROUP, PR_GSM, PR_SYN_PER, PR_OBSOLETE_UPN_ASSIGN_STATUS, "
                                        + "PR_UNMAPPED_REASON, PR_SCRAP_REASON, 'GOODS RETURN', CURDATE() "
                                        + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO = '" + PIECE_NO + "RV' ";
                                data.Execute(sql);
                            }

                            //START OF SCRAP
                            if (cndtnStatus.equals("SCRAP")) {

                                String pDocNo = clsFirstFree.getNextFreeNo(2, 662, 364, true);
                                String pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                                String pPieceNo = PIECE_NO + "RV";
                                String pRejReason = scrapReason.trim();

                                String rejDocNo = txtdocno.getText().trim();
                                String rejDocDate = txtdocdate.getText().trim();

                                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP "
                                        + "(DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                                        + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                                        + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, CANCELED, "
                                        + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                                        + "VALUES('" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'GOODS RETURN', "
                                        + "'" + rejDocNo + "', '" + EITLERPGLOBAL.formatDateDB(rejDocDate) + "', '" + pRejReason + "', "
                                        + "338, '" + pDocDate + "', 0, '0000-00-00', 0, '0000-00-00', 0, '0000-00-00', 0, "
                                        + "4435, 1, '" + pDocDate + "')";
                                System.out.println("Insert Into Obsolete Piece Scrap :" + sql);
                                data.Execute(sql);

                                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP_H "
                                        + "(REVISION_NO, UPDATED_BY, ENTRY_DATE, APPROVAL_STATUS, APPROVER_REMARKS, "
                                        + "DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                                        + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                                        + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                                        + "VALUES (1, 338, '" + pDocDate + "', 'W', '', "
                                        + "'" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'GOODS RETURN', "
                                        + "'" + rejDocNo + "', '" + EITLERPGLOBAL.formatDateDB(rejDocDate) + "', '" + pRejReason + "', "
                                        + "4435, 1, '" + pDocDate + "')";
                                System.out.println("Insert Into History of Obsolete Piece Scrap :" + sql);
                                data.Execute(sql);

                                sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                                        + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,"
                                        + "TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,"
                                        + "ACTION_DATE,CHANGED,CHANGED_DATE) "
                                        + "SELECT 662,'" + pDocNo + "','" + pDocDate + "',USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
                                        + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'FROM GOODS RETURN',SR_NO,0,'','" + pDocDate + "',"
                                        + "'0000-00-00',1,'" + pDocDate + "'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS  WHERE HIERARCHY_ID = 4435 ";
                                System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                                data.Execute(sql);

                            }
                            //END OF SCRAP

//                            //START OF MAPPED
//                            if (UPNStatus.equals("MAPPED")) {
//
//                                String pDocNo = clsFirstFree.getNextFreeNo(2, 661, 363, true);
//                                String pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");
//
//                                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_HEADER "
//                                        + "(DOC_NO, DOC_DATE, DOCUMENT_NAME, REMARK, "
//                                        + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED, CHANGED_DATE, REJECTED, REJECTED_BY, "
//                                        + "REJECTED_DATE, APPROVED, APPROVED_BY, APPROVED_DATE, CANCELED, HIERARCHY_ID) "
//                                        + "VALUES('" + pDocNo + "', '" + pDocDate + "', 'GOODS RETURN', '', "
//                                        + "338, '" + pDocDate + "', 0, '0000-00-00', 1, '" + pDocDate + "', 0, '', "
//                                        + "'0000-00-00', 0, '', '0000-00-00', 0, 4439)";
//                                System.out.println("Insert Into Header Data :" + sql);
//                                data.Execute(sql);
//
//                                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_HEADER_H "
//                                        + "(REVISION_NO, DOC_NO, DOC_DATE, DOCUMENT_NAME, REMARK, "
//                                        + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED, CHANGED_DATE, REJECTED, REJECTED_BY, "
//                                        + "REJECTED_DATE, APPROVED, APPROVED_BY, APPROVED_DATE, CANCELED, HIERARCHY_ID, "
//                                        + "REJECTED_REMARKS, FROM_IP, UPDATED_BY, UPDATED_DATE, APPROVAL_STATUS, ENTRY_DATE, APPROVER_REMARKS) "
//                                        + "VALUES(1, '" + pDocNo + "', '" + pDocDate + "', 'GOODS RETURN', '', "
//                                        + "338, '" + pDocDate + "', 0, '0000-00-00', 1, '" + pDocDate + "', 0, '', "
//                                        + "'0000-00-00', 0, '', '0000-00-00', 0, 4439, "
//                                        + "'', '200.0.0.227', 311, '" + pDocDate + "', 'W', '" + pDocDate + "', '')";
//                                System.out.println("Insert Into Header History Data :" + sql);
//                                data.Execute(sql);
//
//                                String pPieceNo = PIECE_NO + "RV";
//                                String pPartyCode = PartyCode;
//                                String pPartyName = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, pPartyCode);
//                                String pPieceStage = data.getStringValueFromDB("SELECT PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pPieceNo + "' ");
//                                String pUPN = data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pPieceNo + "' ");
//                                String pUPNStatus = "MAPPED";
//
//                                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_DETAIL "
//                                        + "(SR_NO, DOC_NO, PIECE_NO, PARTY_CODE, PARTY_NAME, UPN, DIVISION_POSSIBILITY, "
//                                        + "UPN1, UPN2, UPN3, UPN4, UPN5, UPN6, UPN7, UPN8, UPN9, UPN10, UPN11, UPN12, UPN13, UPN14, UPN15, UPN16, UPN17, UPN18, UPN19, UPN20, "
//                                        + "REMARK, PIECE_STAGE, UPN_ASSIGN_STATUS) "
//                                        + "SELECT 1, '" + pDocNo + "', PIECE_NO, PARTY_CODE, '" + pPartyName + "', '" + pUPN + "', 0, "
//                                        + "'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', "
//                                        + "'', '" + pPieceStage + "', '" + pUPNStatus + "' "
//                                        + "FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP "
//                                        + "WHERE MAPPING_DOC_NO='' AND PIECE_NO='" + pPieceNo + "' AND PARTY_CODE='" + pPartyCode + "' ";
//                                System.out.println("Insert Into Detail Data :" + sql);
//                                data.Execute(sql);
//
//                                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_DETAIL_H "
//                                        + "(REVISION_NO, SR_NO, DOC_NO, PIECE_NO, PARTY_CODE, PARTY_NAME, UPN, DIVISION_POSSIBILITY, "
//                                        + "UPN1, UPN2, UPN3, UPN4, UPN5, UPN6, UPN7, UPN8, UPN9, UPN10, UPN11, UPN12, UPN13, UPN14, UPN15, UPN16, UPN17, UPN18, UPN19, UPN20, "
//                                        + "REMARK, UPN_ASSIGN_STATUS) "
//                                        + "SELECT 1, 1, '" + pDocNo + "', PIECE_NO, PARTY_CODE, '" + pPartyName + "', '" + pUPN + "', 0, "
//                                        + "'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', "
//                                        + "'', '" + pUPNStatus + "' "
//                                        + "FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP "
//                                        + "WHERE MAPPING_DOC_NO='' AND PIECE_NO='" + pPieceNo + "' AND PARTY_CODE='" + pPartyCode + "' ";
//                                System.out.println("Insert Into Detail History Data :" + sql);
//                                data.Execute(sql);
//
//                                data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET MAPPING_DOC_NO='" + pDocNo + "' "
//                                        + "WHERE COALESCE(MAPPING_DOC_NO,'')='' AND PIECE_NO='" + pPieceNo + "' AND PARTY_CODE='" + pPartyCode + "' ");
//
//                                sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
//                                        + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,"
//                                        + "TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,"
//                                        + "ACTION_DATE,CHANGED,CHANGED_DATE) "
//                                        + "SELECT 661,'" + pDocNo + "','" + pDocDate + "',USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
//                                        + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'FROM GOODS RETURN',SR_NO,0,'','" + pDocDate + "',"
//                                        + "'0000-00-00',1,'" + pDocDate + "'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS  WHERE HIERARCHY_ID = 4439 ";
//                                System.out.println("Insert Into Felt Prod Doc Data :" + sql);
//                                data.Execute(sql);
//                            }
//                            //END OF MAPPED
                        }

                        data.Execute("UPDATE PRODUCTION.FELT_SALES_PIECE_REGISTER  SET PR_PIECE_STAGE='RETURN',PR_SALES_RETURNS_FLG=1,PR_SALES_RETURNS_NO='" + docno + "',PR_SALES_RETURNS_DATE='" + EITLERPGLOBAL.formatDateDB(docdate) + "',PR_SALES_RETURNS_REMARKS='" + REMAKRS + "'  WHERE PR_PIECE_NO='" + PIECE_NO + "'");
                        data.Execute("UPDATE PRODUCTION.FELT_WIP_PIECE_REGISTER  SET WIP_PIECE_STAGE='RETURN',WIP_STATUS='RETURN' WHERE WIP_PIECE_NO='" + PIECE_NO + "'");

                    }

                    /*try{
                     String DOC_NO = txtdocno.getText();
                     String DOC_DATE = txtdocdate.getText();
                     String Party_Code = "";
                     int Module_Id = 744;

                     String responce = JavaMail.sendFinalApprovalMail(Module_Id, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                     System.out.println("Send Mail Responce : "+responce); 

                     }catch(Exception e)
                     {
                     e.printStackTrace();
                     }*/
                    try {
                        String DOC_NO = txtdocno.getText();
                        String DOC_DATE = txtdocdate.getText();
                        String Party_Code = "";
                        int Module_Id = 744;

                        //String responce = JavaMail.sendFinalApprovalMail(Module_Id, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
                        //System.out.println("Send Mail Responce : "+responce); 
                        //SENDING MAIL START
                        if (OpgApprove.isSelected() || OpgFinal.isSelected()) {
                            try {

                                int userId = EITLERPGLOBAL.gNewUserID;
                                int hierarchyId = SelHierarchyID;

                                String docNo = txtdocno.getText();
                                String partyCode = "";

                                String pSubject = "Notification : Felt Sales Returns : " + docNo;
                                String pMessage = "";
                                String cc = "";
                                String prodPcHeader = "";

                                if (!OpgFinal.isSelected()) {
                                    pMessage = "<br>Felt Sales Returns No : " + docNo + " has been approve and forward by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                                } else {
                                    pMessage = "<br>Felt Sales Returns No : " + docNo + " has been final approved by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                                }

                                pMessage = pMessage + "<br>Document No : " + docNo + "";
                                pMessage = pMessage + "<br>Document Date : " + txtdocdate.getText() + "";
                                pMessage = pMessage + "<br>Goods Inward No : " + txtinwardno.getText();
                                pMessage = pMessage + "<br>Goods Inward Date : " + txtinwarddate.getText();

                                Connection Conn1;
                                Statement stmt1;
                                ResultSet rsData1;

                                Conn1 = data.getConn();
                                stmt1 = Conn1.createStatement();
                                //rsData1 = stmt1.executeQuery("SELECT * FROM PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL WHERE MASTER_NO ='" + docNo + "'");
                                rsData1 = stmt1.executeQuery("SELECT * FROM  PRODUCTION.FELT_SALES_RETURNS_DETAIL WHERE DOC_NO='" + docNo + "'");
                                System.out.println("SELECT * FROM  PRODUCTION.FELT_SALES_RETURNS_DETAIL WHERE DOC_NO='" + docNo + "'");
                                rsData1.first();

                                pMessage = pMessage + "<table border='1'>"
                                        + "<tr>"
                                        + "<th align='center'> Sr. No. </th>"
                                        + "<th align='center'> Piece No. </th>"
                                        + "<th align='center'> Invoice No. </th>"
                                        + "<th align='center'> Invoice Date </th>"
                                        + "<th align='center'> Product code </th>"
                                        + "<th align='center'> Value </th>"
                                        + "<th align='center'> Size & Wt. </th>"
                                        + "<th align='center'> Taxes </th>"
                                        + "<th align='center'> Remarks </th>"
                                        + "<th align='center'> Category </th>"
                                        + "<th align='center'> Obsolete UPN Status </th>"
                                        + "<th align='center'> Category Condition </th>"
                                        + "<th align='center'> Condition Action </th>"
                                        + "</tr>";

                                rsData1.first();

                                if (rsData1.getRow() > 0) {
                                    int sr = 1;
                                    while (!rsData1.isAfterLast()) {
                                        String Product_Code = data.getStringValueFromDB("SELECT PR_BILL_PRODUCT_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + rsData1.getString("PIECE_NO") + "'");
                                        pMessage = pMessage + ""
                                                + "<tr>"
                                                + "<td align='center'> " + sr + " </td>"
                                                + "<td align='center'> " + rsData1.getString("PIECE_NO") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("INVOICE_NO") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("INVOICE_DATE") + " </td>"
                                                + "<td align='center'> " + Product_Code + " </td>"
                                                + "<td align='center'> " + rsData1.getString("NET_AMOUNT") + " </td>"
                                                + "<td align='center'> (" + rsData1.getString("LENGTH") + " X " + rsData1.getString("WIDTH") + ") - " + rsData1.getString("ACTUAL_WEIGHT") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("GROSS_AMOUNT") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("REMARKS") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("RETURN_CATEGORY") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("OBSOLETE_UPN_ASSIGN_STATUS") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("CATEGORY_CONDITION") + " </td>"
                                                + "<td align='center'> " + rsData1.getString("CONDITION_STATUS") + " </td>"
                                                + "</tr>";
                                        sr++;
                                        rsData1.next();
                                    }
                                }
                                pMessage = pMessage + "</table>";

                                pMessage = pMessage + "<br><br>All Approvers Remark as given below : ";

                                pMessage += "</table>";
                                pMessage += "<table border=1>";
                                pMessage += "<tr><td align='center'><b> Sr.No </b></td>"
                                        + "<td align='center'><b> User </b></td>"
                                        + "<td align='center'><b> Date  </b></td>"
                                        + "<td align='center'><b> Status </b></td>"
                                        + "<td align='center'><b> Remark </b></td>"
                                        + "</tr>";

                                HashMap hmApprovalHistory = clsFeltSalesReturns.getHistoryList(EITLERPGLOBAL.gCompanyID + "", docNo);
                                for (int ij = 1; ij <= hmApprovalHistory.size(); ij++) {
                                    pMessage += "<tr>";

                                    clsFeltSalesReturns ObjHistory = (clsFeltSalesReturns) hmApprovalHistory.get(Integer.toString(ij));
                                    pMessage += "<td>" + Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal()) + "</td>";

                                    pMessage += "<td>" + clsUser.getUserName(2, (int) ObjHistory.getAttribute("UPDATED_BY").getVal()) + "</td>";

                                    pMessage += "<td>" + ObjHistory.getAttribute("ENTRY_DATE").getString() + "</td>";

                                    String ApprovalStatus = "";

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                                        ApprovalStatus = "Hold";
                                    }

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                                        ApprovalStatus = "Approved";
                                    }

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                                        ApprovalStatus = "Final Approved";
                                    }

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                                        ApprovalStatus = "Waiting";
                                    }

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                                        ApprovalStatus = "Rejected";
                                    }

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                                        ApprovalStatus = "Pending";
                                    }

                                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                                        ApprovalStatus = "Skiped";
                                    }
                                    pMessage += "<td>" + ApprovalStatus + "</td>";
                                    pMessage += "<td>" + ObjHistory.getAttribute("APPROVER_REMARKS").getString() + "</td>";
                                    pMessage += "</tr>";
                                }
                                pMessage += "</table>";
                                pMessage += "<br><br>";
                                pMessage += "<br>";

                                HashMap hmSendToList;
                                String recievers = "sdmlerp@dineshmills.com";

                                pMessage = pMessage + "<br><br><br> : Email Send to : <br>";
                                hmSendToList = clsHierarchy.getUserList(EITLERPGLOBAL.gCompanyID, hierarchyId, userId, true);
                                for (int ij = 1; ij <= hmSendToList.size(); ij++) {
                                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(ij));
                                    int U_ID = ObjUser.getAttribute("USER_ID").getInt();

                                    String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, U_ID);

                                    System.out.println("USERID : " + U_ID + ", send_to : " + to);
                                    if (!to.equals("")) {
                                        recievers = recievers + "," + to;
                                        pMessage = pMessage + "<br>" + ObjUser.getAttribute("USER_NAME").getString();
                                    }
                                }
                                //Add notification to bansi & feltwh on 15-05-2019 by Dharmendra
                                recievers = recievers + ",bansi_audit@dineshmills.com,feltwh@dineshmills.com";

                                pMessage = pMessage + "<br><br><br><br>**** This is an auto-generated email, please do not reply ****";

                                System.out.println("Recivers : " + recievers);
                                System.out.println("pSubject : " + pSubject);
                                System.out.println("pMessage : " + pMessage);

                                String responce = MailNotification.sendNotificationMail(Module_Id, pSubject, pMessage, recievers, cc, hierarchyId);
                                System.out.println("Send Mail Responce : " + responce);
                            } catch (Exception e) {
                                System.out.println("Error on Mail: " + e.getMessage());
                            }
                        }

                        //SENDING MAIL END
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //clsHierarchy.sendMailToAllUsers(COMPANY_ID,SelHierarchyID,CURRENT_USER,SUBJECT,MESSAGE,cc);
                    //String Subject = "Felt Sales Return - Final Approved";
                    //String Message = "Document No : "+docno+" has been final approved by "+clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gNewUserID);
                    //clsHierarchy.sendMailToAllUsers((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, Subject, Message, "sdmlerp@dineshmills.com");
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + ObjFeltGroupMaster.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        txtToRemarks.setText("");
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {

        String docno = "", docdate = "", inwardno = "", inwarddate = "";
        String pMenu = "";

        docno = txtdocno.getText().trim();
        docdate = txtdocdate.getText().trim();
        inwardno = txtinwardno.getText().trim();
        inwarddate = txtinwarddate.getText().trim();
        pMenu = lblMenu.getText().trim();

        ObjFeltGroupMaster.setAttribute("FLAG_ID", FlagId);
        ObjFeltGroupMaster.setAttribute("FFNO", FFNo);
        ObjFeltGroupMaster.setAttribute("DOC_NO", docno);
        ObjFeltGroupMaster.setAttribute("DOC_DATE", docdate);
        ObjFeltGroupMaster.setAttribute("GR_INWARD_NO", inwardno);
        ObjFeltGroupMaster.setAttribute("GR_INWARD_DATE", inwarddate);
        ObjFeltGroupMaster.setAttribute("GR_CATEGORY", pMenu);

        //-------- Update Approval Specific Fields -----------//
        ObjFeltGroupMaster.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltGroupMaster.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltGroupMaster.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltGroupMaster.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltGroupMaster.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltGroupMaster.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltGroupMaster.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltGroupMaster.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltGroupMaster.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltGroupMaster.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltGroupMaster.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltGroupMaster.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }

        ObjFeltGroupMaster.hmFeltGroupMasterDetails.clear();
        // Insert entered data in hashmap for update or insert
        for (int i = 0; i < Table.getRowCount(); i++) {
            clsFeltSalesReturnsDetails ObjFeltGroupMasterDetails = new clsFeltSalesReturnsDetails();

            ObjFeltGroupMasterDetails.setAttribute("PIECE_NO", (String) Table.getValueAt(i, 1)); //1
            ObjFeltGroupMasterDetails.setAttribute("INVOICE_NO", (String) Table.getValueAt(i, 2)); //1
            ObjFeltGroupMasterDetails.setAttribute("INVOICE_DATE", (String) Table.getValueAt(i, 3)); //1
            ObjFeltGroupMasterDetails.setAttribute("PARTY_CODE", (String) Table.getValueAt(i, 4)); //1
            ObjFeltGroupMasterDetails.setAttribute("PARTY_NAME", (String) Table.getValueAt(i, 5));
            ObjFeltGroupMasterDetails.setAttribute("QUALITY_NO", (String) Table.getValueAt(i, 6));
            ObjFeltGroupMasterDetails.setAttribute("LENGTH", (String) Table.getValueAt(i, 7)); //3
            ObjFeltGroupMasterDetails.setAttribute("WIDTH", (String) Table.getValueAt(i, 8)); //3
            ObjFeltGroupMasterDetails.setAttribute("ACTUAL_WEIGHT", (String) Table.getValueAt(i, 9)); //3            
            ObjFeltGroupMasterDetails.setAttribute("TOTAL_GROSS", (String) Table.getValueAt(i, 10)); //3
            ObjFeltGroupMasterDetails.setAttribute("TOTAL_NET_AMOUNT", (String) Table.getValueAt(i, 11)); //3
            ObjFeltGroupMasterDetails.setAttribute("GROSS_SQ_MTR", (String) Table.getValueAt(i, 12)); //3
            ObjFeltGroupMasterDetails.setAttribute("GROSS_KG", (String) Table.getValueAt(i, 13)); //3
            ObjFeltGroupMasterDetails.setAttribute("GROSS_AMOUNT", (String) Table.getValueAt(i, 14)); //3
            ObjFeltGroupMasterDetails.setAttribute("TRD_DISCOUNT", (String) Table.getValueAt(i, 15)); //3
            ObjFeltGroupMasterDetails.setAttribute("NET_AMOUNT", (String) Table.getValueAt(i, 16)); //3            
            ObjFeltGroupMasterDetails.setAttribute("REMARKS", (String) Table.getValueAt(i, 17)); //3
            ObjFeltGroupMasterDetails.setAttribute("LR_NO", (String) Table.getValueAt(i, 18)); //3
            ObjFeltGroupMasterDetails.setAttribute("NEW_PIECE_NO", (String) Table.getValueAt(i, 19)); //3
            ObjFeltGroupMasterDetails.setAttribute("RETURN_CATEGORY", (String) Table.getValueAt(i, 20)); //3
            ObjFeltGroupMasterDetails.setAttribute("OC_MONTH", (String) Table.getValueAt(i, 21)); //3
            ObjFeltGroupMasterDetails.setAttribute("OBSOLETE_UPN_ASSIGN_STATUS", (String) Table.getValueAt(i, 22)); //3
            ObjFeltGroupMasterDetails.setAttribute("SCRAP_REASON", (String) Table.getValueAt(i, 23)); //3
            ObjFeltGroupMasterDetails.setAttribute("UNMAPPED_REASON", (String) Table.getValueAt(i, 24)); //3
            ObjFeltGroupMasterDetails.setAttribute("CATEGORY_CONDITION", (String) Table.getValueAt(i, 25)); //3
            ObjFeltGroupMasterDetails.setAttribute("CONDITION_STATUS", (String) Table.getValueAt(i, 26)); //3

            ObjFeltGroupMaster.hmFeltGroupMasterDetails.put(Integer.toString(ObjFeltGroupMaster.hmFeltGroupMasterDetails.size() + 1), ObjFeltGroupMasterDetails);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.SalesReturns.frmFindFeltSalesReturns", true);
        frmFindFeltSalesReturns ObjFindFeltPacking = (frmFindFeltSalesReturns) ObjLoader.getObj();

        if (ObjFindFeltPacking.Cancelled == false) {
            if (!ObjFeltGroupMaster.Filter(ObjFindFeltPacking.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltSalesReturns.this, " No records found.", "Find Felt Sales Return Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltGroupMaster.Filter(" AND DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltGroupMaster.Filter(" AND DOC_NO IN (SELECT H.DOC_NO FROM PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=744 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String pGroupId) {
        ObjFeltGroupMaster.Filter(" AND DOC_NO='" + pGroupId + "'");
        ObjFeltGroupMaster.MoveFirst();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltGroupMaster.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltGroupMaster.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltGroupMaster.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltGroupMaster.MoveLast();
        DisplayData();
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //=============== Setting Table Fields ==================//
        DataModelPieceNo.ClearAllReadOnly();
//        Table.setEnabled(false);
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(744, ObjFeltGroupMaster.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void FormatGrid() {
        DataModelPieceNo = new EITLTableModel();
        Table.removeAll();

        Table.setModel(DataModelPieceNo);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DataModelPieceNo.addColumn("Sr.No"); //0
        DataModelPieceNo.addColumn("Piece No"); //1
        DataModelPieceNo.addColumn("Invoice No"); //2
        DataModelPieceNo.addColumn("Invoice Date"); //3
        DataModelPieceNo.addColumn("Party Code"); //4
        DataModelPieceNo.addColumn("Party Name"); //5
        DataModelPieceNo.addColumn("Product Code"); //6
        DataModelPieceNo.addColumn("Length"); //7
        DataModelPieceNo.addColumn("Width"); //8
        DataModelPieceNo.addColumn("Weight"); //9
//        DataModelPieceNo.addColumn("Total Gross"); //10
//        DataModelPieceNo.addColumn("Total Net Amount"); //11
//        DataModelPieceNo.addColumn("Gross Sq Mtr"); //12
//        DataModelPieceNo.addColumn("Gross Kg"); //13
//        DataModelPieceNo.addColumn("Gross Amount"); //14
//        DataModelPieceNo.addColumn("Discount Amount"); //15
//        DataModelPieceNo.addColumn("Net Amount"); //16
//       

        DataModelPieceNo.addColumn("Basic Amount"); //10
        DataModelPieceNo.addColumn("Discount Amount"); //11
        DataModelPieceNo.addColumn("Seam Charges"); //12
        DataModelPieceNo.addColumn("Gross Amount"); //13
        DataModelPieceNo.addColumn("Taxes"); //14
        DataModelPieceNo.addColumn("SD Amount"); //15
        DataModelPieceNo.addColumn("Net Amount"); //16
        DataModelPieceNo.addColumn("Remarks"); //17
        DataModelPieceNo.addColumn("LR No"); //18
        DataModelPieceNo.addColumn("New Piece No"); //19
        DataModelPieceNo.addColumn("Category"); //20
        DataModelPieceNo.addColumn("OC Month"); //21
        DataModelPieceNo.addColumn("Obsolete UPN Assign Status"); //22
        DataModelPieceNo.addColumn("Scrap Reason"); //23
        DataModelPieceNo.addColumn("UnMapped Reason"); //24
        DataModelPieceNo.addColumn("Category Condition"); //25        
        DataModelPieceNo.addColumn("Condition Action"); //26

        DataModelPieceNo.SetReadOnly(0);
        DataModelPieceNo.SetReadOnly(1);
        DataModelPieceNo.SetReadOnly(2);
        DataModelPieceNo.SetReadOnly(3);
        DataModelPieceNo.SetReadOnly(4);
        DataModelPieceNo.SetReadOnly(5);
        DataModelPieceNo.SetReadOnly(6);
        DataModelPieceNo.SetReadOnly(7);
        DataModelPieceNo.SetReadOnly(8);
        DataModelPieceNo.SetReadOnly(9);
        DataModelPieceNo.SetReadOnly(10);
        DataModelPieceNo.SetReadOnly(11);
        DataModelPieceNo.SetReadOnly(12);
        DataModelPieceNo.SetReadOnly(13);
        DataModelPieceNo.SetReadOnly(14);
        DataModelPieceNo.SetReadOnly(15);
        DataModelPieceNo.SetReadOnly(16);
        DataModelPieceNo.SetReadOnly(19);
        DataModelPieceNo.SetReadOnly(20);
//        if (EITLERPGLOBAL.gNewUserID != 338) {
//            DataModelPieceNo.SetReadOnly(22);
//            DataModelPieceNo.SetReadOnly(23);
//            DataModelPieceNo.SetReadOnly(24);
//        }
        if (EITLERPGLOBAL.gNewUserID != 394 || EITLERPGLOBAL.gNewUserID != 331 || EITLERPGLOBAL.gNewUserID != 318 || EITLERPGLOBAL.gNewUserID != 361 || EITLERPGLOBAL.gNewUserID != 352) {
//            DataModelPieceNo.SetReadOnly(20);
            DataModelPieceNo.SetReadOnly(21);
            DataModelPieceNo.SetReadOnly(22);
            DataModelPieceNo.SetReadOnly(23);
            DataModelPieceNo.SetReadOnly(24);
        }

        if (EITLERPGLOBAL.gNewUserID != 338) {
            DataModelPieceNo.SetReadOnly(25);
        }

        if (EITLERPGLOBAL.gNewUserID != 26 || EITLERPGLOBAL.gNewUserID != 28 || EITLERPGLOBAL.gNewUserID != 278) {
            DataModelPieceNo.SetReadOnly(26);
        }

        //Table.getColumnModel().getColumn(9).setMinWidth(0);
        //Table.getColumnModel().getColumn(9).setMaxWidth(0);
        Table.getColumnModel().getColumn(10).setMinWidth(0);
        Table.getColumnModel().getColumn(10).setMaxWidth(0);
        Table.getColumnModel().getColumn(11).setMinWidth(0);
        Table.getColumnModel().getColumn(11).setMaxWidth(0);

        //Add ComboBox
//        JComboBox cmbCopyType = new JComboBox();
//
//        EITLComboModel cmbCopyTypeModel = new EITLComboModel();
//        cmbCopyType.removeAllItems();
//        cmbCopyType.setModel(cmbCopyTypeModel);
//
//        ComboData aData = new ComboData();
//        aData.Code = 1;
//        aData.Text = "GR";
//        cmbCopyTypeModel.addElement(aData);
//
//        aData = new ComboData();
//        aData.Code = 2;
//        aData.Text = "GR with Complain";
//        cmbCopyTypeModel.addElement(aData);
//
////        aData = new ComboData();
////        aData.Code = 2;
////        aData.Text = "F6";
////        cmbCopyTypeModel.addElement(aData);
//        Renderer.setCustomComponent(DataModelPieceNo.getColID(20), "ComboBox");
//        Renderer.setCustomComponent(DataModelPieceNo.getColID(20), cmbCopyType);
//
//        Table.getColumnModel().getColumn(20).setCellEditor(new DefaultCellEditor(cmbCopyType));
        TableColumn dateColumn = Table.getColumnModel().getColumn(21);

        JComboBox monthbox = new JComboBox();
        String month_name = "";
        Date date = new Date();
        int month = date.getMonth();
        int year = date.getYear() + 1900;
        for (int i = 0; i < 12; i++) {
            month = month + 1;

            if (month >= 13) {
                month = 1;
                year = year + 1;
            }

            if (month == 1) {
                month_name = "Jan";
            } else if (month == 2) {
                month_name = "Feb";
            } else if (month == 3) {
                month_name = "Mar";
            } else if (month == 4) {
                month_name = "Apr";
            } else if (month == 5) {
                month_name = "May";
            } else if (month == 6) {
                month_name = "Jun";
            } else if (month == 7) {
                month_name = "Jul";
            } else if (month == 8) {
                month_name = "Aug";
            } else if (month == 9) {
                month_name = "Sep";
            } else if (month == 10) {
                month_name = "Oct";
            } else if (month == 11) {
                month_name = "Nov";
            } else if (month == 12) {
                month_name = "Dec";
            }
            monthbox.addItem(month_name + " - " + year);
        }

        dateColumn.setCellEditor(new DefaultCellEditor(monthbox));

        //Add ComboBox
        JComboBox cmbUPN = new JComboBox();

        EITLComboModel cmbUPNModel = new EITLComboModel();
        cmbUPN.removeAllItems();
        cmbUPN.setModel(cmbUPNModel);

        ComboData aData1 = new ComboData();
        aData1.Code = 1;
        aData1.Text = "UNMAPPED";
        cmbUPNModel.addElement(aData1);

//        aData1 = new ComboData();
//        aData1.Code = 2;
//        aData1.Text = "MAPPED";
//        cmbUPNModel.addElement(aData1);
//
//        aData1 = new ComboData();
//        aData1.Code = 3;
//        aData1.Text = "UNMAPPED";
//        cmbUPNModel.addElement(aData1);
//
//        aData1 = new ComboData();
//        aData1.Code = 4;
//        aData1.Text = "SCRAP";
//        cmbUPNModel.addElement(aData1);
        RendererUPN.setCustomComponent(DataModelPieceNo.getColID(22), "ComboBox");
        RendererUPN.setCustomComponent(DataModelPieceNo.getColID(22), cmbUPN);

        Table.getColumnModel().getColumn(22).setCellEditor(new DefaultCellEditor(cmbUPN));

        //Add ComboBox
        JComboBox cmbCondition = new JComboBox();

        EITLComboModel cmbConditionModel = new EITLComboModel();
        cmbCondition.removeAllItems();
        cmbCondition.setModel(cmbConditionModel);

        ComboData aData2 = new ComboData();
        aData2.Code = 1;
        aData2.Text = "Usable/Received in original";
        cmbConditionModel.addElement(aData2);

        aData2 = new ComboData();
        aData2.Code = 2;
        aData2.Text = "Unusable/Altered";
        cmbConditionModel.addElement(aData2);

        RendererCondition.setCustomComponent(DataModelPieceNo.getColID(25), "ComboBox");
        RendererCondition.setCustomComponent(DataModelPieceNo.getColID(25), cmbCondition);

        Table.getColumnModel().getColumn(25).setCellEditor(new DefaultCellEditor(cmbCondition));

        //Add ComboBox
        JComboBox cmbStatus = new JComboBox();

        EITLComboModel cmbStatusModel = new EITLComboModel();
        cmbStatus.removeAllItems();
        cmbStatus.setModel(cmbStatusModel);

        ComboData aData3 = new ComboData();
        aData3.Code = 1;
        aData3.Text = "OBSOLETE";
        cmbStatusModel.addElement(aData3);

        aData3 = new ComboData();
        aData3.Code = 2;
        aData3.Text = "SCRAP";
        cmbStatusModel.addElement(aData3);

        RendererStatus.setCustomComponent(DataModelPieceNo.getColID(26), "ComboBox");
        RendererStatus.setCustomComponent(DataModelPieceNo.getColID(26), cmbStatus);

        Table.getColumnModel().getColumn(26).setCellEditor(new DefaultCellEditor(cmbStatus));

        Table.getColumnModel().getColumn(20).setMinWidth(80);
        Table.getColumnModel().getColumn(20).setMaxWidth(150);
        Table.getColumnModel().getColumn(21).setMinWidth(100);
        Table.getColumnModel().getColumn(21).setMaxWidth(150);
        Table.getColumnModel().getColumn(22).setMinWidth(100);
//        Table.getColumnModel().getColumn(22).setMaxWidth(100);
        Table.getColumnModel().getColumn(23).setMinWidth(120);
//        Table.getColumnModel().getColumn(23).setMaxWidth(120);
        Table.getColumnModel().getColumn(24).setMinWidth(120);
//        Table.getColumnModel().getColumn(24).setMaxWidth(120);
        Table.getColumnModel().getColumn(25).setMinWidth(250);
//        Table.getColumnModel().getColumn(25).setMaxWidth(250);
        Table.getColumnModel().getColumn(26).setMinWidth(100);
//        Table.getColumnModel().getColumn(26).setMaxWidth(100);

    }

    private void FormatGridApprovalStatus() {
        DataModelPieceNoApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelPieceNoApprovalStatus);

        //Set the table Readonly
        DataModelPieceNoApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelPieceNoApprovalStatus.addColumn("Sr.");
        DataModelPieceNoApprovalStatus.addColumn("User");
        DataModelPieceNoApprovalStatus.addColumn("Department");
        DataModelPieceNoApprovalStatus.addColumn("Status");
        DataModelPieceNoApprovalStatus.addColumn("Received Date");
        DataModelPieceNoApprovalStatus.addColumn("Action Date");
        DataModelPieceNoApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelPieceNoUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelPieceNoUpdateHistory);

        //Set the table Readonly
        DataModelPieceNoUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelPieceNoUpdateHistory.addColumn("Rev No.");
        DataModelPieceNoUpdateHistory.addColumn("User");
        DataModelPieceNoUpdateHistory.addColumn("Date");
        DataModelPieceNoUpdateHistory.addColumn("Status");
        DataModelPieceNoUpdateHistory.addColumn("Remarks");
        DataModelPieceNoUpdateHistory.addColumn("From Ip");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void Report() {

        try {

            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("PIECE_NO");
            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("QUALITY_NO");
            objReportData.AddColumn("LENGTH");
            objReportData.AddColumn("WIDTH");
            objReportData.AddColumn("TOTAL_GROSS");
            objReportData.AddColumn("TOTAL_NET_AMOUNT");
            objReportData.AddColumn("GROSS_SQ_MTR");
            objReportData.AddColumn("GROSS_KG");
            objReportData.AddColumn("GROSS_AMOUNT");
            objReportData.AddColumn("TRD_DISCOUNT");
            objReportData.AddColumn("NET_AMOUNT");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("PIECE_NO", "");
            objOpeningRow.setValue("INVOICE_NO", "");
            objOpeningRow.setValue("INVOICE_DATE", "");
            objOpeningRow.setValue("PARTY_CODE", "");
            objOpeningRow.setValue("PARTY_NAME", "");
            objOpeningRow.setValue("QUALITY_NO", "");
            objOpeningRow.setValue("LENGTH", "");
            objOpeningRow.setValue("WIDTH", "");
            objOpeningRow.setValue("TOTAL_GROSS", "");
            objOpeningRow.setValue("TOTAL_NET_AMOUNT", "");
            objOpeningRow.setValue("GROSS_SQ_MTR", "");
            objOpeningRow.setValue("GROSS_KG", "");
            objOpeningRow.setValue("GROSS_AMOUNT", "");
            objOpeningRow.setValue("TRD_DISCOUNT", "");
            objOpeningRow.setValue("NET_AMOUNT", "");

            String strSQL = "SELECT * FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL WHERE DOC_NO='" + txtdocno.getText() + "'";

            System.out.println(strSQL);
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("PIECE_NO", UtilFunctions.getString(rsTmp, "PIECE_NO", ""));
                    objRow.setValue("INVOICE_NO", UtilFunctions.getString(rsTmp, "INVOICE_NO", ""));
                    objRow.setValue("INVOICE_DATE", UtilFunctions.getString(rsTmp, "INVOICE_DATE", ""));
                    objRow.setValue("PARTY_CODE", UtilFunctions.getString(rsTmp, "PARTY_CODE", ""));
                    objRow.setValue("PARTY_NAME", UtilFunctions.getString(rsTmp, "PARTY_NAME", ""));
                    objRow.setValue("QUALITY_NO", UtilFunctions.getString(rsTmp, "QUALITY_NO", ""));
                    objRow.setValue("LENGTH", UtilFunctions.getString(rsTmp, "LENGTH", ""));
                    objRow.setValue("WIDTH", UtilFunctions.getString(rsTmp, "WIDTH", ""));
                    objRow.setValue("TOTAL_GROSS", UtilFunctions.getString(rsTmp, "TOTAL_GROSS", ""));
                    objRow.setValue("TOTAL_NET_AMOUNT", UtilFunctions.getString(rsTmp, "TOTAL_NET_AMOUNT", ""));
                    objRow.setValue("GROSS_SQ_MTR", UtilFunctions.getString(rsTmp, "GROSS_SQ_MTR", ""));
                    objRow.setValue("GROSS_KG", UtilFunctions.getString(rsTmp, "GROSS_KG", ""));
                    objRow.setValue("GROSS_AMOUNT", UtilFunctions.getString(rsTmp, "GROSS_AMOUNT", ""));
                    objRow.setValue("TRD_DISCOUNT", UtilFunctions.getString(rsTmp, "TRD_DISCOUNT", ""));
                    objRow.setValue("NET_AMOUNT", UtilFunctions.getString(rsTmp, "NET_AMOUNT", ""));

                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptSalesReturns.rpt", Parameters, objReportData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
