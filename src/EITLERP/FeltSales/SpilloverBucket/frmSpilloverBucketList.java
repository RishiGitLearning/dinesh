/*
 * frmChangePassword.java
 *
 * Created on July 3, 2004, 3:36 PM
 */
package EITLERP.FeltSales.SpilloverBucket;

import EITLERP.*;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
//import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//import EITLERP.Sales.clsExcelExporter;

/*<APPLET CODE=frmChangePassword HEIGHT=200 WIDTH=430></APPLET>*/
/**
 *
 * @author Daxesh Prajapati
 */
public class frmSpilloverBucketList extends javax.swing.JApplet {

    private EITLTableModel DataModel = new EITLTableModel();

    private EITLComboModel cmbUserModel = new EITLComboModel();
    private EITLComboModel modelShift = new EITLComboModel();
    private EITLComboModel modelMainCategory = new EITLComboModel();
    private EITLComboModel modelCategory = new EITLComboModel();
    private EITLComboModel cmbIncharge = new EITLComboModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private EITLTableCellRenderer Renderer_btn = new EITLTableCellRenderer();
    int USER_ID = EITLERPGLOBAL.gNewUserID;

    //GenerateInvoiceParameterModificationCombo();
    /**
     * Initializes the applet frmChangePassword
     */
    public void init() {
        initComponents();
        setSize(1200, 750);

        GenerateCombo();
        //canpieced.setVisible(false);
        jLabel1.setForeground(Color.WHITE);
        txtpartyname.setEnabled(false);

//        jLabel26.setVisible(false);
//        INCHARGE.setVisible(false);
//        jLabel4.setVisible(false);
//        txtpartycode.setVisible(false);
//        txtpartyname.setVisible(false);
        if (USER_ID == 243 || USER_ID == 311 || USER_ID == 28 || USER_ID == 26 || USER_ID == 278) {
            cmbIncharge.setSelectedItem("ALL");
            Table.setEnabled(true);
            INCHARGE.setEnabled(true);
        }
        if (USER_ID == 352)//North: JAYDEEP
        {
            cmbIncharge.setSelectedItem("NORTH");
            INCHARGE.setEnabled(false);
        } else if (USER_ID == 136)//East/West: Mr. Jaydeep Pandya
        {
//            cmbIncharge.setSelectedItem("EAST/WEST");//CLOSED ON 17-05-2022
            cmbIncharge.setSelectedItem("NORTH");
            INCHARGE.setEnabled(false);
        } else if (USER_ID == 318)//East/West: Mr. Jaydeep Pandya
        {
            cmbIncharge.setSelectedItem("EAST/WEST");
            INCHARGE.setEnabled(false);
        } else if (USER_ID == 394)//ACNE: Bakhtyar Bavaadam
        {
            cmbIncharge.setSelectedItem("ACNE");//ACNE/KeyClient
//            cmbIncharge.setSelectedItem("ACNE/KEYCLIENT");
            INCHARGE.setEnabled(false);
        } else if (USER_ID == 331)//South: Mr. Siddharth NeogiC
        {
            cmbIncharge.setSelectedItem("SOUTH");
            INCHARGE.setEnabled(false);
        } else if (USER_ID == 361)//South: Mr. Manoj Gupta
        {
            cmbIncharge.setSelectedItem("KEY CLIENT");//ACNE/KeyClient
//            cmbIncharge.setSelectedItem("ACNE/KEYCLIENT");
            INCHARGE.setEnabled(false);
        } else if (USER_ID == 280)//South: Mr. Manoj Gupta
        {
//            cmbIncharge.setSelectedItem("KEY CLIENT");//ACNE/KeyClient
            cmbIncharge.setSelectedItem("EXPORT");
            INCHARGE.setEnabled(false);
        }
        Table.setEnabled(true);

        GenerateList();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        file1 = new javax.swing.JFileChooser();
        CANEXCESSGRUP = new javax.swing.ButtonGroup();
        YTMGROUP = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jScrollPane25 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnEmpMstETE = new javax.swing.JButton();
        cmbFY = new javax.swing.JComboBox();
        lblMonthCmb1 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        INCHARGE = new javax.swing.JComboBox();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Spillover Bucket List");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1200, 25);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 80, 1200, 4);

        btnClear.setText("Clear All");
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear);
        btnClear.setBounds(1080, 30, 110, 20);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.getTableHeader().setReorderingAllowed(false);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane25.setViewportView(Table);

        getContentPane().add(jScrollPane25);
        jScrollPane25.setBounds(10, 90, 1180, 450);

        btnEmpMstETE.setLabel("Export to Excel");
        btnEmpMstETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmpMstETEActionPerformed(evt);
            }
        });
        getContentPane().add(btnEmpMstETE);
        btnEmpMstETE.setBounds(1040, 50, 150, 20);

        cmbFY.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2022-2023" }));
        cmbFY.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFYItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbFY);
        cmbFY.setBounds(130, 30, 170, 20);

        lblMonthCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb1.setText("Financial Year : ");
        getContentPane().add(lblMonthCmb1);
        lblMonthCmb1.setBounds(0, 30, 120, 20);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Incharge : ");
        getContentPane().add(jLabel26);
        jLabel26.setBounds(0, 50, 120, 20);

        INCHARGE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Sales Eng 1", "Sales Eng 2", "Sales Eng 3" }));
        INCHARGE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                INCHARGEItemStateChanged(evt);
            }
        });
        getContentPane().add(INCHARGE);
        INCHARGE.setBounds(130, 50, 140, 20);

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(410, 30, 70, 20);

        txtpartyname.setDisabledTextColor(java.awt.Color.black);
        txtpartyname = new JTextFieldHint(new JTextField(),"Party Name");
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(480, 30, 370, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Party Code : ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(310, 30, 100, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        cmbFY.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed


    private void btnEmpMstETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmpMstETEActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnEmpMstETEActionPerformed

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
        if (!txtpartycode.getText().trim().equals("") && data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtpartycode.getText().trim() + "' AND MAIN_ACCOUNT_CODE=210010 ")) {
            txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtpartycode.getText()));
            GenerateList();
        } else {
            if (!txtpartycode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Party Code doesn't exist/under approval.");
            }
            txtpartycode.setText("");
            txtpartyname.setText("");
            GenerateList();
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
//            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 ";
//            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_CLOSE_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0";
            aList.SQL = "SELECT DISTINCT PARTY_CODE,PARTY_NAME FROM PRODUCTION.SPILLOVER_BUCKET_LIST WHERE FIN_YEAR = '" + cmbFY.getSelectedItem() + "' ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
            GenerateList();
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpartynameActionPerformed

    private void cmbFYItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFYItemStateChanged
        // TODO add your handling code here:
        GenerateList();
    }//GEN-LAST:event_cmbFYItemStateChanged

    private void INCHARGEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_INCHARGEItemStateChanged
        // TODO add your handling code here:
        GenerateList();
    }//GEN-LAST:event_INCHARGEItemStateChanged

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
//        if (evt.getClickCount() == 2 && Table.getSelectedColumn() == 1) {
//            String pUPN = Table.getValueAt(Table.getSelectedRow(), 1).toString();
//            String pPartyCode = Table.getValueAt(Table.getSelectedRow(), 2).toString();
//
//            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL WHERE LEFT(DOC_NO,2)='B2' AND UPN='" + pUPN + "' AND YEAR_FROM=2022 AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 GROUP BY DOC_NO")) {
//                String pDocNo = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL WHERE LEFT(DOC_NO,2)='B2' AND UPN='" + pUPN + "' AND YEAR_FROM=2022 AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 GROUP BY DOC_NO");
//                data.Execute("UPDATE PRODUCTION.FELT_PROD_DOC_DATA SET STATUS='P' WHERE DOC_NO='" + pDocNo + "' ");
//                data.Execute("UPDATE PRODUCTION.FELT_PROD_DOC_DATA SET STATUS='W' WHERE DOC_NO='" + pDocNo + "' AND SR_NO=1 ");
//                AppletFrame aFrame = new AppletFrame("Sales Projection Entry");
//                aFrame.startAppletEx("EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry", "Sales Projection Entry");
//                EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry ObjItem = (EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry) aFrame.ObjApplet;
////            ObjItem.requestFocus();
//                ObjItem.FindD(" UPN='" + pUPN + "' AND YEAR_FROM=2022 AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 ");
//            } else {
//                JOptionPane.showMessageDialog(this, "Projection isn't present for UPN : " + pUPN, "ERROR", JOptionPane.ERROR_MESSAGE);
//            }
//        }
    }//GEN-LAST:event_TableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup CANEXCESSGRUP;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JComboBox INCHARGE;
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup YTMGROUP;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEmpMstETE;
    private javax.swing.JComboBox cmbFY;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JLabel lblMonthCmb1;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        INCHARGE.setModel(cmbIncharge);
        cmbIncharge.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            if (!ObjIncharge.getAttribute("INCHARGE_NAME").getString().equals("ACNE/KEYCLIENT")) {
                ComboData aData = new ComboData();
                aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
                aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
                cmbIncharge.addElement(aData);
            }
        }

    }

    private void FormatGrid() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);

        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        DataModel.addColumn("Sr.");
        DataModel.addColumn("UPN");
        DataModel.addColumn("Party Code");
        DataModel.addColumn("Party Name");
        DataModel.addColumn("Incharge");
        DataModel.addColumn("Pieces");
        DataModel.addColumn("No of Pieces");
        DataModel.addColumn("Prod Desc");
        DataModel.addColumn("Total Projection");

//        DataModel.TableReadOnly(true);
        
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(5);
        DataModel.SetReadOnly(6);
        DataModel.SetReadOnly(7);
        DataModel.SetReadOnly(8);
        
        Table.getColumnModel().getColumn(0).setMaxWidth(50);
        Table.getColumnModel().getColumn(1).setMinWidth(80);
        Table.getColumnModel().getColumn(2).setMinWidth(80);
        Table.getColumnModel().getColumn(3).setMinWidth(100);
        Table.getColumnModel().getColumn(4).setMinWidth(80);
        Table.getColumnModel().getColumn(5).setMinWidth(120);
        Table.getColumnModel().getColumn(6).setMinWidth(80);
        Table.getColumnModel().getColumn(7).setMinWidth(80);
        Table.getColumnModel().getColumn(8).setMinWidth(80);

        if (USER_ID != 311 && USER_ID != 352 && USER_ID != 136 && USER_ID != 318 && USER_ID != 329 && USER_ID != 331 && USER_ID != 28 && USER_ID != 394 && USER_ID != 361 && USER_ID != 280) {
            DataModel.SetReadOnly(1);
        } else {
            DataModel.SetReadOnly(1);
//            int ImportCol = 1;
//            Renderer_btn.setCustomComponent(ImportCol, "CheckBox");
//            Table.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer_btn);
//            Table.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(new JCheckBox()));
//            Table.getColumnModel().getColumn(ImportCol).setCellEditor(new ButtonEditor(new JCheckBox()));
//            Table.getColumnModel().getColumn(ImportCol).setCellRenderer(new ButtonRenderer());
        }

    }

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {

        protected JButton button;
        private String label;
        private boolean isPushed;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
            }
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                //JOptionPane.showMessageDialog(button, label + ": Ouch!");
                if (Table.getSelectedColumn() == 1) {
                    openSalesProjection();
                }

            }
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }
    }

    public void openSalesProjection() {
        try {
            String pUPN = Table.getValueAt(Table.getSelectedRow(), 1).toString();
            String pPartyCode = Table.getValueAt(Table.getSelectedRow(), 2).toString();

            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL WHERE LEFT(DOC_NO,2)='B2' AND UPN='" + pUPN + "' AND YEAR_FROM=2022 AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 GROUP BY DOC_NO")) {
                String pDocNo = data.getStringValueFromDB("SELECT DOC_NO FROM PRODUCTION.FELT_BUDGET_REVIEW_DETAIL WHERE LEFT(DOC_NO,2)='B2' AND UPN='" + pUPN + "' AND YEAR_FROM=2022 AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 GROUP BY DOC_NO");
                data.Execute("UPDATE PRODUCTION.FELT_PROD_DOC_DATA SET STATUS='P' WHERE DOC_NO='" + pDocNo + "' ");
                data.Execute("UPDATE PRODUCTION.FELT_PROD_DOC_DATA SET STATUS='W' WHERE DOC_NO='" + pDocNo + "' AND SR_NO=1 ");
                AppletFrame aFrame = new AppletFrame("Sales Projection Entry");
                aFrame.startAppletEx("EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry", "Sales Projection Entry");
                EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry ObjItem = (EITLERP.FeltSales.Budget.FrmNewSalesProjectionEntry) aFrame.ObjApplet;
//            ObjItem.requestFocus();
                ObjItem.FindD(" UPN='" + pUPN + "' AND YEAR_FROM=2022 AND COALESCE(APPROVED,0)=0 AND COALESCE(CANCELED,0)=0 ");
            } else {
                JOptionPane.showMessageDialog(this, "Projection isn't present for UPN : " + pUPN, "ERROR", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateList() {
        String cndtn = "";
        try {
            FormatGrid(); //clear existing content of table
            ResultSet rsTmp;

            if (!cmbFY.getSelectedItem().toString().equals("")) {
                cndtn += "AND FIN_YEAR='" + cmbFY.getSelectedItem().toString() + "' ";
            }
            if (!txtpartycode.getText().toString().equals("")) {
                cndtn += "AND PARTY_CODE='" + txtpartycode.getText().toString() + "' ";
            }
            if (!INCHARGE.getSelectedItem().toString().equals("ALL")) {
                cndtn += "AND INCHARGE_NAME='" + INCHARGE.getSelectedItem().toString() + "' ";
            }
            String strSQL = "";
            strSQL = "SELECT * FROM PRODUCTION.SPILLOVER_BUCKET_LIST WHERE 1=1 "
                    + cndtn
                    + "ORDER BY UPN";

//            System.out.println("Query..." + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                DecimalFormat df = new DecimalFormat("###.##");
                while (!rsTmp.isAfterLast()) {
                    cnt++;

                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("UPN");
                    rowData[2] = rsTmp.getString("PARTY_CODE");
                    rowData[3] = rsTmp.getString("PARTY_NAME");
                    rowData[4] = rsTmp.getString("INCHARGE_NAME");
                    rowData[5] = rsTmp.getString("PIECE_NO");
                    rowData[6] = rsTmp.getString("PIECE_CNT");
                    rowData[7] = rsTmp.getString("PROD_DESC");
                    rowData[8] = rsTmp.getString("SP_CNT");

                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 10, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Zero (0) Record Found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

}
