/*
 * frmFeltPieceAmend.java
 *
 * Created on March 12, 2013, 3:10 PM
 */
package EITLERP.FeltSales.FeltPDC;

/**
 *
 * @author RISHI RAJ NEEKHRA
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import EITLERP.*;
import java.net.URL;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.FeltSales.FeltGSTAdvancePaymentEntryForm.clsFeltGSTAdvancePaymentEntryForm;
import EITLERP.FeltSales.FeltInvReport.clsFeltSalesInvoice;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsVoucher;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.Renderer;
import javax.swing.table.TableCellRenderer;

public class frmFeltPDC extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public int DeptID = EITLERPGLOBAL.gUserDeptID;
    public String finalapproved = "";
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLERP.FeltSales.common.FeltInvCalc inv_calculation;

    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private clsFeltPDC ObjFeltPDC;
    private clsFeltPDCBankDetails ObjFeltPDCBank;
    private clsFeltPDCPieceDetails ObjFeltPDCPiece;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModelBD;
    private EITLTableModel DataModelPS;
    private EITLTableModel DataModelAmendH;
    private EITLTableModel DataModelAmendD;
    
    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltPieceAmend
     */
    public void init() {
        System.gc();
        setSize(830, 590);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModelBD = new EITLTableModel();
        ObjFeltPDC = new clsFeltPDC();
        lblTitle.setForeground(Color.WHITE);

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        txtPartyCode.setEditable(false);
        FormatGridBD();
        FormatGridPS();
        FormatGridAmendH();
        FormatGridAmendD();
        if (ObjFeltPDC.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltPDC.this, "Error occured while Loading Data. Error is " + ObjFeltPDC.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemWarping = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePS = new javax.swing.JTable();
        cmdAddBD = new javax.swing.JButton();
        cmdRemoveBD = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableBD = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        lblPartyName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTotalChequeAmt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtManualAmt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmdAddPS = new javax.swing.JButton();
        cmdRemovePS = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtTotalPieceAmt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtBalanceAmt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPDCRemark = new javax.swing.JTextField();
        txtCreditDays = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtCriticalLimit = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCarryForwardAmt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtUnadjustedCredit = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableAmendH = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableAmendD = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();

        jMenuItemWarping.setText("Warping Report");
        jMenuItemWarping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWarpingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWarping);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("PDC Entry Form - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Doc Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(310, 10, 70, 30);

        txtDocDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(390, 10, 150, 29);

        TablePS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePS.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TablePS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablePSKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TablePSKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TablePS);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 240, 790, 100);

        cmdAddBD.setMnemonic('A');
        cmdAddBD.setText("Add");
        cmdAddBD.setToolTipText("Add Row");
        cmdAddBD.setEnabled(false);
        cmdAddBD.setNextFocusableComponent(cmdRemoveBD);
        cmdAddBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddBDActionPerformed(evt);
            }
        });
        Tab1.add(cmdAddBD);
        cmdAddBD.setBounds(10, 170, 100, 28);

        cmdRemoveBD.setMnemonic('R');
        cmdRemoveBD.setText("Remove");
        cmdRemoveBD.setToolTipText("Remove Selected Row");
        cmdRemoveBD.setEnabled(false);
        cmdRemoveBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveBDActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemoveBD);
        cmdRemoveBD.setBounds(110, 170, 90, 28);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 230, 790, 6);

        jLabel5.setText("Doc No");
        Tab1.add(jLabel5);
        jLabel5.setBounds(10, 10, 70, 30);

        txtDocNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(80, 10, 190, 29);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(550, 10, 20, 18);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        TableBD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableBD.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TableBD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableBDMouseClicked(evt);
            }
        });
        TableBD.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableBDFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableBDFocusLost(evt);
            }
        });
        TableBD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableBDKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableBDKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(TableBD);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(11, 80, 790, 80);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel4);
        jPanel4.setBounds(6, 70, 790, 6);

        lblPartyName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(240, 40, 330, 30);

        jLabel4.setText("Party Code ");
        Tab1.add(jLabel4);
        jLabel4.setBounds(10, 40, 90, 30);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Total Amount ");
        Tab1.add(jLabel1);
        jLabel1.setBounds(490, 160, 120, 30);

        txtTotalChequeAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalChequeAmt.setDisabledTextColor(java.awt.Color.black);
        txtTotalChequeAmt.setEnabled(false);
        Tab1.add(txtTotalChequeAmt);
        txtTotalChequeAmt.setBounds(610, 160, 130, 28);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Critical Limit");
        Tab1.add(jLabel2);
        jLabel2.setBounds(570, 10, 110, 30);

        txtManualAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtManualAmt.setDisabledTextColor(java.awt.Color.black);
        txtManualAmt.setEnabled(false);
        txtManualAmt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtManualAmtFocusLost(evt);
            }
        });
        txtManualAmt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtManualAmtKeyPressed(evt);
            }
        });
        Tab1.add(txtManualAmt);
        txtManualAmt.setBounds(610, 190, 130, 28);

        jLabel6.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel6.setText("Piece Detail");
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 206, 140, 20);

        cmdAddPS.setMnemonic('A');
        cmdAddPS.setText("Add");
        cmdAddPS.setToolTipText("Add Row");
        cmdAddPS.setEnabled(false);
        cmdAddPS.setNextFocusableComponent(cmdRemoveBD);
        cmdAddPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddPSActionPerformed(evt);
            }
        });
        Tab1.add(cmdAddPS);
        cmdAddPS.setBounds(10, 350, 100, 28);

        cmdRemovePS.setMnemonic('R');
        cmdRemovePS.setText("Remove");
        cmdRemovePS.setToolTipText("Remove Selected Row");
        cmdRemovePS.setEnabled(false);
        cmdRemovePS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemovePSActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemovePS);
        cmdRemovePS.setBounds(110, 350, 90, 28);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Total Piece Amount ");
        Tab1.add(jLabel7);
        jLabel7.setBounds(450, 340, 160, 30);

        txtTotalPieceAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalPieceAmt.setDisabledTextColor(java.awt.Color.black);
        txtTotalPieceAmt.setEnabled(false);
        Tab1.add(txtTotalPieceAmt);
        txtTotalPieceAmt.setBounds(610, 340, 130, 28);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Balance Amount ");
        Tab1.add(jLabel8);
        jLabel8.setBounds(430, 370, 180, 30);

        txtBalanceAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtBalanceAmt.setDisabledTextColor(java.awt.Color.black);
        txtBalanceAmt.setEnabled(false);
        Tab1.add(txtBalanceAmt);
        txtBalanceAmt.setBounds(610, 370, 130, 28);

        jLabel9.setText("Remark ");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 386, 70, 30);

        txtPDCRemark.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtPDCRemark.setDisabledTextColor(java.awt.Color.black);
        txtPDCRemark.setEnabled(false);
        Tab1.add(txtPDCRemark);
        txtPDCRemark.setBounds(80, 390, 400, 28);

        txtCreditDays.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtCreditDays.setDisabledTextColor(java.awt.Color.black);
        txtCreditDays.setEnabled(false);
        txtCreditDays.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCreditDaysFocusLost(evt);
            }
        });
        txtCreditDays.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCreditDaysKeyPressed(evt);
            }
        });
        Tab1.add(txtCreditDays);
        txtCreditDays.setBounds(740, 40, 60, 29);

        jLabel10.setText("Credit Days (+6 Days)");
        Tab1.add(jLabel10);
        jLabel10.setBounds(580, 40, 160, 30);

        txtPartyCode.setDisabledTextColor(java.awt.Color.black);
        txtPartyCode.setEnabled(false);
        txtPartyCode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyReleased(evt);
            }
        });
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(94, 40, 130, 28);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Unadjusted Credit");
        Tab1.add(jLabel11);
        jLabel11.setBounds(210, 160, 150, 30);

        txtCriticalLimit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCriticalLimit.setDisabledTextColor(java.awt.Color.black);
        txtCriticalLimit.setEnabled(false);
        txtCriticalLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCriticalLimitActionPerformed(evt);
            }
        });
        Tab1.add(txtCriticalLimit);
        txtCriticalLimit.setBounds(684, 10, 110, 28);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Manual Amount ");
        Tab1.add(jLabel12);
        jLabel12.setBounds(490, 190, 120, 30);

        txtCarryForwardAmt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCarryForwardAmt.setDisabledTextColor(java.awt.Color.black);
        txtCarryForwardAmt.setEnabled(false);
        Tab1.add(txtCarryForwardAmt);
        txtCarryForwardAmt.setBounds(360, 190, 130, 28);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("CarryForward Amount ");
        Tab1.add(jLabel13);
        jLabel13.setBounds(210, 190, 150, 30);

        txtUnadjustedCredit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtUnadjustedCredit.setDisabledTextColor(java.awt.Color.black);
        txtUnadjustedCredit.setEnabled(false);
        Tab1.add(txtUnadjustedCredit);
        txtUnadjustedCredit.setBounds(360, 160, 130, 28);

        Tab.addTab("Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 16);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 28);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 29);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 28);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 16);

        cmbSendTo.setEnabled(false);
        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 28);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 16);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 16);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 16);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 32);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 32);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 32);

        Tab.addTab("Status", jPanel1);

        jPanel2.setLayout(null);

        TableAmendH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableAmendH);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(0, 12, 810, 390);

        Tab.addTab("Amendment", jPanel2);

        jPanel5.setLayout(null);

        TableAmendD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableAmendD);

        jPanel5.add(jScrollPane5);
        jScrollPane5.setBounds(0, 12, 810, 390);

        Tab.addTab("Amendment Detail", jPanel5);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 830, 460);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 530, 820, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed

    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed

    }//GEN-LAST:event_jMenuItemWarpingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        //   new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltWeaving.rpt",new HashMap(),ObjFeltPDC.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
        //  EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed

    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltPDC.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltPDC.HistoryView = false;
        ObjFeltPDC.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltPDC.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()), txtDocNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        ShowMessage("Enter Updation Date");
    }//GEN-LAST:event_txtDocDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        finalapproved = "NO";
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "NO";
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "YES";
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        finalapproved = "NO";
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(625, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltPDC.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltPDC.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveBDActionPerformed
        if (TableBD.getRowCount() > 0) {
            DataModelBD.removeRow(TableBD.getSelectedRow());
        }
        BalanceCal();
//        UtilizedBalanceCal();
    }//GEN-LAST:event_cmdRemoveBDActionPerformed

    private void cmdAddBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddBDActionPerformed
        if (!txtPartyCode.getText().trim().equals("")) {
            Object[] rowData = new Object[34];
            rowData[0] = Integer.toString(TableBD.getRowCount() + 1);
            rowData[1] = "";
            rowData[2] = "";
            rowData[3] = "";
            rowData[4] = "";
            rowData[5] = "";
            rowData[6] = "";
            rowData[7] = "Physical";
            rowData[8] = "";
            rowData[9] = "";
            rowData[10] = "";
            rowData[11] = "";

            DataModelBD.addRow(rowData);
            TableBD.changeSelection(TableBD.getRowCount() - 1, 1, false, false);
            TableBD.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "Please select Party First.");
            return;
        }
    }//GEN-LAST:event_cmdAddBDActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void TableBDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableBDMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableBDMouseClicked

    private void TableBDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableBDFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_TableBDFocusGained

    private void TableBDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableBDFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TableBDFocusLost

    private void TableBDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableBDKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD && evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT BANK_ID,BANK_NAME FROM DINESHMILLS.D_COM_BANK_MASTER ORDER BY BANK_ID";
            aList.ReturnCol = 2;
            aList.SecondCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                TableBD.setValueAt(aList.ReturnVal, TableBD.getSelectedRow(), 1);
                TableBD.setValueAt(aList.SecondVal, TableBD.getSelectedRow(), 2);
            }
        }
    }//GEN-LAST:event_TableBDKeyPressed

    private void TableBDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableBDKeyReleased
        // TODO add your handling code here:
        BalanceCal();
//        UtilizedBalanceCal();
    }//GEN-LAST:event_TableBDKeyReleased

    private void TablePSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePSKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();
                aList.SQL = "SELECT PR_PIECE_NO,PR_BALE_NO,PR_PACKED_DATE,PR_PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_SALES_PIECE_REGISTER, DINESHMILLS.D_SAL_PARTY_MASTER WHERE PR_PARTY_CODE=PARTY_CODE AND PR_PIECE_STAGE IN ('IN STOCK','BSR') AND PR_PIECE_NO NOT IN (SELECT PDC_PIECE_NO FROM PRODUCTION.FELT_PDC_PIECE_DETAIL WHERE CANCELED=0) AND PR_PARTY_CODE='" + txtPartyCode.getText() + "' ";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    String str = aList.ReturnVal;
                    TablePS.setValueAt(aList.ReturnVal, TablePS.getSelectedRow(), 1);
                    DataModelPS.setValueByVariable("PDC_PIECE_NO", str, TablePS.getSelectedRow());

                    String PieceNO = str;
                    String ProductCode = data.getStringValueFromDB("SELECT PR_BILL_PRODUCT_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + str + "'");
                    String Partycode = txtPartyCode.getText();//txtPartyCode.setText(Partycode);
                    String Length = data.getStringValueFromDB("SELECT PR_BILL_LENGTH FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + str + "'");
                    String Width = data.getStringValueFromDB("SELECT PR_BILL_WIDTH FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + str + "'");
                    String Weight = data.getStringValueFromDB("SELECT PR_BILL_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + str + "'");
                    String Sqmtr = data.getStringValueFromDB("SELECT PR_BILL_SQMTR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + str + "'");
                    String Orderdate = EITLERPGLOBAL.getCurrentDateDB();

                    inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(PieceNO, ProductCode, Partycode, Float.parseFloat(Length), Float.parseFloat(Width), Float.parseFloat(Weight), Float.parseFloat(Sqmtr), Orderdate);
                    float billvalue = Math.round(inv_calculation.getFicInvAmt());
                    
                    TablePS.setValueAt(billvalue, TablePS.getSelectedRow(), 2);
                    DataModelPS.setValueByVariable("PDC_PIECE_AMOUNT", String.valueOf(billvalue), TablePS.getSelectedRow());

                    BalanceCal();
//                    UtilizedBalanceCal();
                }

            }
        }

//        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
//            if (evt.getKeyCode() == 112) //F1 Key pressed
//            {
//                LOV aList = new LOV();
////                aList.SQL = "SELECT GROUP_CONCAT(B.PKG_PIECE_NO) AS PKG_PIECE_NO,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_NO NOT IN (SELECT BALE_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE CANCELED=0 AND PROCESSING_DATE>=CURDATE() ) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.INVOICE_FLG=0 AND A.PKG_PARTY_CODE='" + txtPartyCode.getText() + "' GROUP BY B.PKG_BALE_NO UNION ALL SELECT GROUP_CONCAT(B.PKG_PIECE_NO) AS PKG_PIECE_NO,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND A.PKG_BALE_NO IN (SELECT BALE_NO FROM PRODUCTION.FELT_INV_PROCESS_VAR_GST WHERE CANCELED=1 AND PROCESSING_DATE>=CURDATE()) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.INVOICE_FLG=0 AND A.PKG_PARTY_CODE='" + txtPartyCode.getText() + "' GROUP BY B.PKG_BALE_NO ORDER BY PKG_BALE_NO";
//                aList.SQL = "SELECT GROUP_CONCAT(B.PKG_PIECE_NO) AS PKG_PIECE_NO,A.PKG_BALE_NO,A.PKG_PARTY_CODE,A.PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER A,PRODUCTION.FELT_PKG_SLIP_DETAIL B WHERE A.PKG_BALE_NO=B.PKG_BALE_NO AND CONCAT(A.PKG_BALE_NO,A.PKG_BALE_DATE) NOT IN (SELECT CONCAT(PDC_BALE_NO,PDC_BALE_DATE) FROM PRODUCTION.FELT_PDC_BALE_DETAIL WHERE CANCELED=0) AND A.BALE_REOPEN_FLG=0 AND A.APPROVED=1 AND A.INVOICE_FLG=0 AND A.PKG_PARTY_CODE='" + txtPartyCode.getText() + "' GROUP BY B.PKG_BALE_NO ";
//                aList.ReturnCol = 2;
//                aList.ShowReturnCol = true;
//                aList.DefaultSearchOn = 3;
//
//                if (aList.ShowLOV()) {
//                    String str = aList.ReturnVal;
//                    TablePS.setValueAt(aList.ReturnVal, TablePS.getSelectedRow(), 1);
//                    DataModelPS.setValueByVariable("PDC_BALE_NO", str, TablePS.getSelectedRow());
//                    
//                    String BaleDate = EITLERPGLOBAL.formatDate(clsFeltGSTAdvancePaymentEntryForm.getBaleDate(aList.ReturnVal));
//                    TablePS.setValueAt(BaleDate, TablePS.getSelectedRow(), 2);
//                    DataModelPS.setValueByVariable("PDC_BALE_DATE", BaleDate, TablePS.getSelectedRow());
//
//                    String PieceNO = data.getStringValueFromDB("SELECT PKG_PIECE_NO FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
//                    String ProductCode = data.getStringValueFromDB("SELECT PKG_PRODUCT_CODE FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
//                    String Partycode = txtPartyCode.getText();//txtPartyCode.setText(Partycode);
//                    String Length = data.getStringValueFromDB("SELECT PKG_LENGTH FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
//                    String Width = data.getStringValueFromDB("SELECT PKG_WIDTH FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
//                    String Weight = data.getStringValueFromDB("SELECT PKG_WEIGHT FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
//                    String Sqmtr = data.getStringValueFromDB("SELECT PKG_SQM FROM PRODUCTION.FELT_PKG_SLIP_DETAIL WHERE PKG_BALE_NO='" + str + "'");
//                    String Orderdate = EITLERPGLOBAL.getCurrentDateDB();
//
//                    inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(PieceNO, ProductCode, Partycode, Float.parseFloat(Length), Float.parseFloat(Width), Float.parseFloat(Weight), Float.parseFloat(Sqmtr), Orderdate);
//                    Float billvalue = inv_calculation.getFicInvAmt();
//
//                    TablePS.setValueAt(billvalue, TablePS.getSelectedRow(), 3);
//                    DataModelPS.setValueByVariable("PDC_BALE_AMOUNT", String.valueOf(billvalue), TablePS.getSelectedRow());
//                    
//                    BalanceCal();
//                }
//
//            }
//        }
    }//GEN-LAST:event_TablePSKeyPressed

    private void cmdAddPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddPSActionPerformed
        // TODO add your handling code here:
        if (!txtPartyCode.getText().trim().equals("")) {
            TableBD.setEnabled(false);
            cmdAddBD.setEnabled(false);
            cmdRemoveBD.setEnabled(false);

            Object[] rowData = new Object[34];
            rowData[0] = Integer.toString(TablePS.getRowCount() + 1);
            rowData[1] = "";
            rowData[2] = "";
            rowData[3] = "";
            rowData[4] = "";
            rowData[5] = "";
            rowData[6] = "";
            rowData[7] = "";
            rowData[8] = "";
            rowData[9] = "";
            rowData[10] = "";

            DataModelPS.addRow(rowData);
            TablePS.changeSelection(TablePS.getRowCount() - 1, 1, false, false);
            TablePS.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "Please select Party First.");
            return;
        }
    }//GEN-LAST:event_cmdAddPSActionPerformed

    private void cmdRemovePSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemovePSActionPerformed
        // TODO add your handling code here:
        if (TablePS.getRowCount() > 0) {
            DataModelPS.removeRow(TablePS.getSelectedRow());
        }
//        for (int i = 0; i <= TableBD.getRowCount() - 1; i++) {
//            String useableAmt = DataModelBD.getValueByVariable("PDC_USEABLE_AMOUNT", i);
//            DataModelBD.setValueByVariable("PDC_BALANCE_AMOUNT", useableAmt, i);
//            String chequeAmt = DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i);
//            double utilizedAmt = EITLERPGLOBAL.round(Double.valueOf(chequeAmt) - Double.valueOf(useableAmt),2);
//            DataModelBD.setValueByVariable("PDC_UTILIZED_AMOUNT", String.valueOf(utilizedAmt), i);
//        }
        BalanceCal();
//        UtilizedBalanceCal();
    }//GEN-LAST:event_cmdRemovePSActionPerformed

    private void TablePSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablePSKeyReleased
        // TODO add your handling code here:
        BalanceCal();
//        UtilizedBalanceCal();
    }//GEN-LAST:event_TablePSKeyReleased

    private void txtManualAmtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtManualAmtKeyPressed
        // TODO add your handling code here:
        BalanceCal();
    }//GEN-LAST:event_txtManualAmtKeyPressed

    private void txtManualAmtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtManualAmtFocusLost
        // TODO add your handling code here:
        BalanceCal();
    }//GEN-LAST:event_txtManualAmtFocusLost

    private void txtCreditDaysFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCreditDaysFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCreditDaysFocusLost

    private void txtCreditDaysKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCreditDaysKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCreditDaysKeyPressed

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD && evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 ORDER BY PARTY_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_PDC_HEADER WHERE PDC_PARTY_CODE='"+aList.ReturnVal+"' AND APPROVED=0 AND CANCELED=0 ")) {
                    JOptionPane.showMessageDialog(null, "Please final approved priveous entry of Party : '" + aList.ReturnVal + "'.");
                    return;
                }
                
                if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_PDC_AMEND_HEADER WHERE PDC_PARTY_CODE='"+aList.ReturnVal+"' AND APPROVED=0 AND CANCELED=0 ")) {
                    JOptionPane.showMessageDialog(null, "PDC Amendment not final approved for Party : '" + aList.ReturnVal + "'.");
                    return;
                }
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(clsSales_Party.getPartyName(2, aList.ReturnVal));
                txtCreditDays.setText(data.getStringValueFromDB("SELECT CREDIT_DAYS+GRACE_CREDIT_DAYS+EXTRA_CREDIT_DAYS+6 FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 "));
                txtCriticalLimit.setText(data.getStringValueFromDB("SELECT AMOUNT_LIMIT FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 "));
//                double pOutStandingAmt = OutStanding("210010", aList.ReturnVal);
//                txtUnadjustedCredit.setText(String.valueOf(EITLERPGLOBAL.round(pOutStandingAmt, 2)));
                double pUnadjCreditAmt = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM FINANCE.D_FIN_VOUCHER_DETAIL D, FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO =  D.VOUCHER_NO AND SUB_ACCOUNT_CODE = '"+aList.ReturnVal+"' AND INVOICE_NO ='' AND MATCHED =0 AND EFFECT ='C' AND H.APPROVED =1 AND H.CANCELLED =0 GROUP BY SUB_ACCOUNT_CODE");
                txtUnadjustedCredit.setText(String.valueOf(EITLERPGLOBAL.round(pUnadjCreditAmt, 0)));
                txtPartyCode.setEnabled(false);
            }
            if (!aList.ReturnVal.equals("")) {
                CarryForward(aList.ReturnVal);
                BalanceCal();
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD) {
            String PartyCode = txtPartyCode.getText().trim();
            if (data.IsRecordExist("SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 ORDER BY PARTY_CODE")) {
                lblPartyName.setText(clsSales_Party.getPartyName(2, PartyCode));
                txtCreditDays.setText(data.getStringValueFromDB("SELECT CREDIT_DAYS+GRACE_CREDIT_DAYS+EXTRA_CREDIT_DAYS+6 FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 "));
                txtCriticalLimit.setText(data.getStringValueFromDB("SELECT AMOUNT_LIMIT FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 "));
//                double pOutStandingAmt = OutStanding("210010", txtPartyCode.getText().trim());
//                txtUnadjustedCredit.setText(String.valueOf(EITLERPGLOBAL.round(pOutStandingAmt, 2)));
                double pUnadjCreditAmt = data.getDoubleValueFromDB("SELECT SUM(AMOUNT) FROM FINANCE.D_FIN_VOUCHER_DETAIL D, FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO =  D.VOUCHER_NO AND SUB_ACCOUNT_CODE = '"+txtPartyCode.getText().trim()+"' AND INVOICE_NO ='' AND MATCHED =0 AND EFFECT ='C' AND H.APPROVED =1 AND H.CANCELLED =0 GROUP BY SUB_ACCOUNT_CODE");
                txtUnadjustedCredit.setText(String.valueOf(EITLERPGLOBAL.round(pUnadjCreditAmt, 2)));
                txtPartyCode.setEnabled(false);
            } else {
                txtPartyCode.setText("");
                lblPartyName.setText("");
                txtCreditDays.setText("");
                txtCriticalLimit.setText("");
                txtUnadjustedCredit.setText("");
            }
//            lblPartyName.setText(clsSales_Party.getPartyName(2, PartyCode));
//            txtPartyCode.setEnabled(false);
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtCriticalLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCriticalLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCriticalLimitActionPerformed

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    private void txtPartyCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartyCodeKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableAmendD;
    private javax.swing.JTable TableAmendH;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableBD;
    private javax.swing.JTable TablePS;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAddBD;
    private javax.swing.JButton cmdAddPS;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemoveBD;
    private javax.swing.JButton cmdRemovePS;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWarping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtBalanceAmt;
    private javax.swing.JTextField txtCarryForwardAmt;
    private javax.swing.JTextField txtCreditDays;
    private javax.swing.JTextField txtCriticalLimit;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtManualAmt;
    private javax.swing.JTextField txtPDCRemark;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalChequeAmt;
    private javax.swing.JTextField txtTotalPieceAmt;
    private javax.swing.JTextField txtUnadjustedCredit;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {
        txtPartyCode.setEnabled(pStat);
        txtDocDate.setEnabled(false);
        txtTotalChequeAmt.setEnabled(false);
        txtManualAmt.setEnabled(pStat);
        txtCriticalLimit.setEnabled(false);
        txtCarryForwardAmt.setEnabled(false);
        txtUnadjustedCredit.setEnabled(false);
        txtTotalPieceAmt.setEnabled(false);
        txtBalanceAmt.setEnabled(false);
        txtPDCRemark.setEnabled(pStat);

        cmdAddBD.setEnabled(pStat);
        cmdRemoveBD.setEnabled(pStat);
        cmdAddPS.setEnabled(pStat);
        cmdRemovePS.setEnabled(pStat);

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtDocNo.setText("");
        txtPartyCode.setText("");
        lblPartyName.setText("");
        txtCreditDays.setText("");
        txtTotalChequeAmt.setText("0.0");
        txtManualAmt.setText("0.0");
        txtCriticalLimit.setText("0.0");
        txtCarryForwardAmt.setText("0.0");
        txtUnadjustedCredit.setText("0.0");
        txtTotalPieceAmt.setText("0.0");
        txtBalanceAmt.setText("0.0");
        txtPDCRemark.setText("");

        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGridBD();
        FormatGridPS();
        FormatGridAmendH();
        FormatGridAmendD();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltPDC.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjFeltPDC.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltPDC.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 625)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        try {

            txtDocNo.setText((String) ObjFeltPDC.getAttribute("PDC_DOC_NO").getObj());
            lblRevNo.setText(Integer.toString((int) ObjFeltPDC.getAttribute("REVISION_NO").getVal()));

            String theTitle = "PDC Entry Form - " + txtDocNo.getText();
            lblTitle.setText(theTitle);

            txtDocDate.setText(EITLERPGLOBAL.formatDate((String) ObjFeltPDC.getAttribute("PDC_DOC_DATE").getObj()));
            txtPartyCode.setText((String) ObjFeltPDC.getAttribute("PDC_PARTY_CODE").getObj());
//            lblPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, (String) ObjFeltPDC.getAttribute("PDC_PARTY_CODE").getObj()));
//            txtCreditDays.setText(data.getStringValueFromDB("SELECT CREDIT_DAYS+GRACE_CREDIT_DAYS+EXTRA_CREDIT_DAYS+6 FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+(String) ObjFeltPDC.getAttribute("PDC_PARTY_CODE").getObj()+"' AND MAIN_ACCOUNT_CODE='210010' AND CHARGE_CODE IN ('08') AND APPROVED=1 AND CANCELLED=0 AND PARTY_CLOSE_IND!=1 "));
            lblPartyName.setText((String) ObjFeltPDC.getAttribute("PDC_PARTY_NAME").getObj());
            txtCreditDays.setText((String) ObjFeltPDC.getAttribute("PDC_PARTY_CREDIT_DAYS").getObj());

            txtPDCRemark.setText((String) ObjFeltPDC.getAttribute("PDC_REMARK").getObj());

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltPDC.getAttribute("HIERARCHY_ID").getVal());

            txtManualAmt.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_MANUAL_AMOUNT").getVal()));
            txtCriticalLimit.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_CRITICAL_AMOUNT").getVal()));
            txtCarryForwardAmt.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_CARRY_FORWARD_AMOUNT").getVal()));
            txtUnadjustedCredit.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_UNADJUSTED_CREDIT").getVal()));
            txtTotalChequeAmt.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_TOTAL_AMOUNT").getVal()));
            txtTotalPieceAmt.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_TOTAL_PIECE_AMOUNT").getVal()));
            txtBalanceAmt.setText(Double.toString(ObjFeltPDC.getAttribute("PDC_TOTAL_BALANCE").getVal()));

            //========= Display Bank Details =============//
            FormatGridBD();

            DoNotEvaluate = true;

            for (int i = 1; i <= ObjFeltPDC.colPDCBankItems.size(); i++) {
                //Insert New Row
                Object[] rowData = new Object[1];
                DataModelBD.addRow(rowData);
                int NewRow = TableBD.getRowCount() - 1;

                clsFeltPDCBankDetails ObjBankItem = (clsFeltPDCBankDetails) ObjFeltPDC.colPDCBankItems.get(Integer.toString(i));

                DataModelBD.setValueByVariable("PDC_SR_NO", Integer.toString(i), NewRow);
                DataModelBD.setValueByVariable("PDC_BANK_NAME", (String) ObjBankItem.getAttribute("PDC_BANK_NAME").getObj(), NewRow);
                DataModelBD.setValueByVariable("PDC_BANK_CD", (String) ObjBankItem.getAttribute("PDC_BANK_CD").getObj(), NewRow);
                DataModelBD.setValueByVariable("PDC_BANK_BRANCH", (String) ObjBankItem.getAttribute("PDC_BANK_BRANCH").getObj(), NewRow);
                DataModelBD.setValueByVariable("PDC_CHEQUE_NO", (String) ObjBankItem.getAttribute("PDC_CHEQUE_NO").getObj(), NewRow);
                DataModelBD.setValueByVariable("PDC_CHEQUE_DATE", EITLERPGLOBAL.formatDate((String) ObjBankItem.getAttribute("PDC_CHEQUE_DATE").getObj()), NewRow);
                DataModelBD.setValueByVariable("PDC_CHEQUE_AMOUNT", Double.toString(ObjBankItem.getAttribute("PDC_CHEQUE_AMOUNT").getVal()), NewRow);
                DataModelBD.setValueByVariable("PDC_BILLING_DATE", EITLERPGLOBAL.formatDate((String) ObjBankItem.getAttribute("PDC_BILLING_DATE").getObj()), NewRow);

                String CopyType = (String) ObjBankItem.getAttribute("PDC_PHYSICAL_SCANNED").getObj();

                if (CopyType.startsWith("P")) {
                    DataModelBD.setValueByVariable("PDC_PHYSICAL_SCANNED", "Physical", NewRow);
                }

                if (CopyType.startsWith("S")) {
                    DataModelBD.setValueByVariable("PDC_PHYSICAL_SCANNED", "Scanned", NewRow);
                }
            }

            //========= Display Piece Details =============//
            FormatGridPS();

            DoNotEvaluate = true;

            for (int i = 1; i <= ObjFeltPDC.colPDCPieceItems.size(); i++) {
                //Insert New Row
                Object[] rowData = new Object[1];
                DataModelPS.addRow(rowData);
                int NewRow = TablePS.getRowCount() - 1;

                clsFeltPDCPieceDetails ObjPieceItem = (clsFeltPDCPieceDetails) ObjFeltPDC.colPDCPieceItems.get(Integer.toString(i));

                DataModelPS.setValueByVariable("PIECE_SR_NO", Integer.toString(i), NewRow);
                DataModelPS.setValueByVariable("PDC_PIECE_NO", (String) ObjPieceItem.getAttribute("PDC_PIECE_NO").getObj(), NewRow);
                DataModelPS.setValueByVariable("PDC_PIECE_AMOUNT", Double.toString(ObjPieceItem.getAttribute("PDC_PIECE_AMOUNT").getVal()), NewRow);
            }

            //=================================================================//
            DoNotEvaluate = false;

            if (EditMode == 0) {
                DataModelBD.TableReadOnly(true);
                DataModelPS.TableReadOnly(true);
            }
            //=========================================//

            FormatGridAmendH();
            String mDocNo = (String) ObjFeltPDC.getAttribute("PDC_DOC_NO").getObj();
            String msql = "SELECT * FROM PRODUCTION.FELT_PDC_AMEND_HEADER WHERE PDC_DOC_NO='" + mDocNo + "' ";
            ResultSet hisrs = data.getResult(msql);
            hisrs.first();
            if (hisrs.getRow() > 0) {
                while (!hisrs.isAfterLast()) {
                    Object[] rowData = new Object[20];
                    rowData[0] = hisrs.getString("PDC_AMEND_NO");
                    rowData[1] = EITLERPGLOBAL.formatDate(hisrs.getString("PDC_AMEND_DATE"));
                    rowData[2] = EITLERPGLOBAL.round(hisrs.getDouble("PDC_TOTAL_AMOUNT"),2);
                    rowData[3] = EITLERPGLOBAL.round(hisrs.getDouble("PDC_MANUAL_AMOUNT"),2);
                    rowData[4] = EITLERPGLOBAL.round(hisrs.getDouble("PDC_UNADJUSTED_CREDIT"),2);
                    rowData[5] = EITLERPGLOBAL.round(hisrs.getDouble("PDC_CARRY_FORWARD_AMOUNT"),2);
                    DataModelAmendH.addRow(rowData);
                    hisrs.next();
                }
            }
            //======== END History ========//
            FormatGridAmendD();
            try {
                ResultSet t;
                t = data.getResult("SELECT * FROM PRODUCTION.FELT_PDC_PIECE_DETAIL WHERE PDC_PIECE_STATUS IN ('ADD','DELETE') AND PDC_DOC_NO='" + mDocNo + "' ORDER BY PDC_PIECE_STATUS,PDC_PIECE_AMEND_NO");
                t.first();
                int cnt=1;
                if (t.getRow() > 0) {
                    while (!t.isAfterLast()) {
                        Object[] rowData = new Object[50];

                        rowData[0] = cnt++;
                        rowData[1] = t.getString("PDC_PIECE_STATUS");
                        rowData[2] = t.getString("PDC_PIECE_AMEND_NO");
                        rowData[3] = EITLERPGLOBAL.formatDate(t.getString("PDC_PIECE_AMEND_DATE"));
                        rowData[4] = t.getString("PDC_PIECE_NO");
                        rowData[5] = EITLERPGLOBAL.round(t.getDouble("PDC_PIECE_AMOUNT"), 2);
                        DataModelAmendD.addRow(rowData);
                        t.next();
                    }
                }
            } catch (Exception a) {
                a.printStackTrace();
            }
            

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();
            String DocNo = (String) ObjFeltPDC.getAttribute("PDC_DOC_NO").getObj();
            String DocDate = (String) ObjFeltPDC.getAttribute("PDC_DOC_DATE").getObj();
            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(625, DocNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
//            HashMap hmApprovalHistory=clsFeltPDC.getHistoryList(ObjFeltPDC.getAttribute("FELT_AMEND_ID").getString(), txtAmendID.getText());
            HashMap hmApprovalHistory = clsFeltPDC.getHistoryList(DocDate, DocNo);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltPDC ObjFeltPDC = (clsFeltPDC) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjFeltPDC.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFeltPDC.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltPDC.getAttribute("ENTRY_DATE").getString());

                String ApprovalStatus = "";

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltPDC.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltPDC.getAttribute("APPROVER_REMARKS").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGridBD() {
        try {
            cmdAddBD.requestFocus();

            DataModelBD = new EITLTableModel();
            TableBD.removeAll();

            TableBD.setModel(DataModelBD);
            TableColumnModel ColModel = TableBD.getColumnModel();
            TableBD.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModelBD.addColumn("Sr.No"); //0
            DataModelBD.addColumn("Bank Name"); //1
            DataModelBD.addColumn("Bank Code"); //2
            DataModelBD.addColumn("Bank Branch"); //3
            DataModelBD.addColumn("Cheque No"); //4
            DataModelBD.addColumn("Cheque Date"); //5
            DataModelBD.addColumn("Cheque Amount"); //6
            DataModelBD.addColumn("Physical/Scanned Copy"); //7
            DataModelBD.addColumn("Billing Date Onward"); //8

            DataModelBD.SetVariable(0, "PDC_SR_NO");
            DataModelBD.SetVariable(1, "PDC_BANK_NAME");
            DataModelBD.SetVariable(2, "PDC_BANK_CD");
            DataModelBD.SetVariable(3, "PDC_BANK_BRANCH");
            DataModelBD.SetVariable(4, "PDC_CHEQUE_NO");
            DataModelBD.SetVariable(5, "PDC_CHEQUE_DATE");
            DataModelBD.SetVariable(6, "PDC_CHEQUE_AMOUNT");
            DataModelBD.SetVariable(7, "PDC_PHYSICAL_SCANNED");
            DataModelBD.SetVariable(8, "PDC_BILLING_DATE");

            DataModelBD.SetReadOnly(0);
            DataModelBD.SetReadOnly(1);
            DataModelBD.SetReadOnly(2);
            DataModelBD.SetReadOnly(8);

            //Add ComboBox
            JComboBox cmbCopyType = new JComboBox();

            EITLComboModel cmbCopyTypeModel = new EITLComboModel();
            cmbCopyType.removeAllItems();
            cmbCopyType.setModel(cmbCopyTypeModel);

            ComboData aData = new ComboData();
            aData.Code = 1;
            aData.Text = "Physical";
            cmbCopyTypeModel.addElement(aData);

            aData = new ComboData();
            aData.Code = 2;
            aData.Text = "Scanned";
            cmbCopyTypeModel.addElement(aData);

            Renderer.setCustomComponent(DataModelBD.getColFromVariable("PDC_PHYSICAL_SCANNED"), "ComboBox");
            Renderer.setCustomComponent(DataModelBD.getColFromVariable("PDC_PHYSICAL_SCANNED"), cmbCopyType);

            TableBD.getColumnModel().getColumn(DataModelBD.getColFromVariable("PDC_PHYSICAL_SCANNED")).setCellEditor(new DefaultCellEditor(cmbCopyType));

//
//            int ImportCol = 6;
//            Renderer.setCustomComponent(ImportCol, "ComboBox");
//            JComboBox comboBox = new JComboBox();
//            comboBox.addItem("Physical");
//            comboBox.addItem("Scanned");
//            TableBD.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(comboBox));
//            TableBD.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
//            sportColumn.setCellEditor(new DefaultCellEditor(comboBox));
//
//            //Set up tool tips for the sport cells.
//            DefaultTableCellRenderer renderer
//                    = new DefaultTableCellRenderer();
//            renderer.setToolTipText("Click for combo box");
//            sportColumn.setCellRenderer(renderer);
//            int ImportCol = 6;
//            Renderer.setCustomComponent(ImportCol, "CheckBox");
//            JCheckBox aCheckBox = new JCheckBox();
//            aCheckBox.setBackground(Color.WHITE);
//            aCheckBox.setVisible(true);
//            aCheckBox.setEnabled(true);
//            aCheckBox.setSelected(false);
//            TableBD.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
//            TableBD.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
//
//            int ImportCol1 = 7;
//            Renderer.setCustomComponent(ImportCol1, "CheckBox");
//            JCheckBox aCheckBox1 = new JCheckBox();
//            aCheckBox1.setBackground(Color.WHITE);
//            aCheckBox1.setVisible(true);
//            aCheckBox1.setEnabled(true);
//            aCheckBox1.setSelected(false);
//            TableBD.getColumnModel().getColumn(ImportCol1).setCellEditor(new DefaultCellEditor(aCheckBox1));
//            TableBD.getColumnModel().getColumn(ImportCol1).setCellRenderer(Renderer);
            if (EditMode != 0) {
                //------- Install Table List Selection Listener ------//
                TableBD.getColumnModel().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int column = TableBD.getSelectedColumn();
                        String strVar = DataModelBD.getVariable(column);
                        //=============== Cell Editing Routine =======================//
                        TableBD.editCellAt(TableBD.getSelectedRow(), column);
                        if (TableBD.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent) TableBD.getEditorComponent()).selectAll();
                        }
                        if (column == 1) {
                            ShowMessage("Press F1 for Piece No List...");
                        }
                        //============= Cell Editing Routine Ended =================//
                    }
                });

                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                TableBD.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = TableBD.getSelectedRow();
                            int column = e.getColumn();

                            //=========== Cell Update Prevention Check ===========//
                            String curValue = ((String) TableBD.getValueAt(row, column)).trim();
                            if (curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if (DoNotEvaluate) {
                                return;
                            }

                            if (column == 5) {
                                String billDt = ""; //SELECT '2018-12-27' - INTERVAL 60 DAY
                                billDt = data.getStringValueFromDB("SELECT '" + EITLERPGLOBAL.formatDateDB(curValue) + "' - INTERVAL " + txtCreditDays.getText().trim() + " DAY");
                                DataModelBD.setValueByVariable("PDC_BILLING_DATE", EITLERPGLOBAL.formatDate(billDt), row);
                            }

                            if (column == 6) {
                                BalanceCal();
//                                UtilizedBalanceCal();
                            }
                        }
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void FormatGridPS() {
        cmdAddPS.requestFocus();

        DataModelPS = new EITLTableModel();
        TablePS.removeAll();

        TablePS.setModel(DataModelPS);
        TableColumnModel ColModel = TablePS.getColumnModel();
        TablePS.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        cmdAddPS.requestFocus();

        DataModelPS = new EITLTableModel();
        TablePS.removeAll();

        TablePS.setModel(DataModelPS);
        TableColumnModel ColModelPS = TablePS.getColumnModel();
        TablePS.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DataModelPS.addColumn("Sr.No"); //0
        DataModelPS.addColumn("Piece No"); //1
        DataModelPS.addColumn("Piece Amount"); //2

        DataModelPS.SetVariable(0, "PIECE_SR_NO");
        DataModelPS.SetVariable(1, "PDC_PIECE_NO");
        DataModelPS.SetVariable(2, "PDC_PIECE_AMOUNT");

        DataModelPS.SetReadOnly(0);
        DataModelPS.SetReadOnly(1);
        DataModelPS.SetReadOnly(2);
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=625 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=625 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(625, ObjFeltPDC.getAttribute("PDC_DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(625, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(625, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(625, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(625, ObjFeltPDC.getAttribute("PDC_DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(625, FromUserID, ObjFeltPDC.getAttribute("PDC_DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(625, txtDocNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6113, 61131)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6113, 61132)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6113, 61133)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6113, 61134)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }

        // --- Preview Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6113, 61135)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

//        cmbAmendReason.setEnabled(true);
        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 625;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 625, FFNo, false));
//            txtPartyCode.setEnabled(true);
//            txtPartyCode.requestFocus();
            TablePS.requestFocus();

            lblTitle.setText("PDC Entry Form - " + txtDocNo.getText());
            lblTitle.setBackground(Color.GRAY);
            TableBD.setEnabled(true);                
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

        /*  
         SetFields(true);
         DisableToolbar();
         ClearFields();
         SetupApproval();
         lblTitle.setBackground(Color.GRAY);*/
    }

    private void Edit() {

        String productionDocumentNo = (String) ObjFeltPDC.getAttribute("PDC_DOC_NO").getObj();
        if (ObjFeltPDC.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
//            cmbAmendReason.setEnabled(true);
            if (clsFeltProductionApprovalFlow.IsCreator(625, productionDocumentNo)) {
                SetFields(true);
                txtDocDate.setEnabled(false);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltPDC.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltPDC.CanDelete(txtDocNo.getText(), txtDocDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltPDC.this, ObjFeltPDC.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        //Form level validations
        if (Validate() == false) {
            return; //Validation failed
        }

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltPDC.Insert()) {
//                data.Execute("UPDATE PRODUCTION.FELT_PDC_HEADER SET PDC_CARRYFORWARD_IND=1 WHERE PDC_PARTY_CODE='" + txtPartyCode.getText().trim() + "' AND APPROVED=1 AND CANCELED=0");

//                if (OpgFinal.isSelected()) {
//                    try {
//                        String DOC_NO = txtDocNo.getText();
//                        String DOC_DATE = txtDocDate.getText();
//                        String Party_Code = "";
//
//                        String responce = JavaMail.sendFinalApprovalMail(625, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
//                        System.out.println("Send Mail Responce : " + responce);
//
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                }
                MoveLast();
                DisplayData();

            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjFeltPDC.LastError);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltPDC.Update()) {

//                if (OpgFinal.isSelected()) {
//                    try {
//                        String DOC_NO = txtDocNo.getText();
//                        String DOC_DATE = txtDocDate.getText();
//                        String Party_Code = "";
//
//                        String responce = JavaMail.sendFinalApprovalMail(625, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true);
//                        System.out.println("Send Mail Responce : " + responce);
//
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjFeltPDC.LastError);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ShowMessage("Ready");
    }

    //Sets data to the Class Object
    private void SetData() {
        //Header Fields        
        ObjFeltPDC.setAttribute("PDC_DOC_NO", txtDocNo.getText().trim());

        if (EITLERPGLOBAL.formatDateDB(txtDocDate.getText()).equals("")) {
            ObjFeltPDC.setAttribute("PDC_DOC_DATE", "0000-00-00");
        } else {
            ObjFeltPDC.setAttribute("PDC_DOC_DATE", EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        }

        ObjFeltPDC.setAttribute("PDC_PARTY_CODE", txtPartyCode.getText().trim());
        ObjFeltPDC.setAttribute("PDC_PARTY_NAME", lblPartyName.getText().trim());
        ObjFeltPDC.setAttribute("PDC_PARTY_CREDIT_DAYS", txtCreditDays.getText().trim());
        ObjFeltPDC.setAttribute("PDC_MANUAL_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtManualAmt.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_CRITICAL_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtCriticalLimit.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_CARRY_FORWARD_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtCarryForwardAmt.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_UNADJUSTED_CREDIT", EITLERPGLOBAL.round(Double.parseDouble(txtUnadjustedCredit.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_TOTAL_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtTotalChequeAmt.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_TOTAL_PIECE_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtTotalPieceAmt.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_TOTAL_BALANCE", EITLERPGLOBAL.round(Double.parseDouble(txtBalanceAmt.getText()), 2));
        ObjFeltPDC.setAttribute("PDC_REMARK", txtPDCRemark.getText().trim());

        //-------- Update Approval Specific Fields -----------//
        ObjFeltPDC.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltPDC.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltPDC.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltPDC.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        //    ObjFeltPDC.setAttribute("UPDATED_BY",EITLERPGLOBAL.getComboCode(cmbUserName));
        ObjFeltPDC.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltPDC.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltPDC.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltPDC.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltPDC.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltPDC.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltPDC.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltPDC.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjFeltPDC.setAttribute("CREATED_BY", (int) ObjFeltPDC.getAttribute("CREATED_BY").getVal());
            ObjFeltPDC.setAttribute("CREATED_DATE", ObjFeltPDC.getAttribute("CREATED_DATE").getString());
            ObjFeltPDC.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltPDC.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //=================== Setting up Bank Details ==================//
        ObjFeltPDC.colPDCBankItems.clear();

        for (int i = 0; i < TableBD.getRowCount(); i++) {
            clsFeltPDCBankDetails ObjBankItem = new clsFeltPDCBankDetails();

            ObjBankItem.setAttribute("PDC_BANK_CD", DataModelBD.getValueByVariable("PDC_BANK_CD", i));
            ObjBankItem.setAttribute("PDC_BANK_NAME", DataModelBD.getValueByVariable("PDC_BANK_NAME", i));
            ObjBankItem.setAttribute("PDC_BANK_BRANCH", DataModelBD.getValueByVariable("PDC_BANK_BRANCH", i));
            ObjBankItem.setAttribute("PDC_CHEQUE_NO", DataModelBD.getValueByVariable("PDC_CHEQUE_NO", i));
            if (DataModelBD.getValueByVariable("PDC_CHEQUE_DATE", i).equals("")) {
                ObjBankItem.setAttribute("PDC_CHEQUE_DATE", "0000-00-00");
            } else {
                ObjBankItem.setAttribute("PDC_CHEQUE_DATE", EITLERPGLOBAL.formatDateDB(DataModelBD.getValueByVariable("PDC_CHEQUE_DATE", i)));
            }
            ObjBankItem.setAttribute("PDC_CHEQUE_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i)), 2));
            ObjBankItem.setAttribute("PDC_PHYSICAL_SCANNED", DataModelBD.getValueByVariable("PDC_PHYSICAL_SCANNED", i));
            if (DataModelBD.getValueByVariable("PDC_BILLING_DATE", i).equals("")) {
                ObjBankItem.setAttribute("PDC_BILLING_DATE", "0000-00-00");
            } else {
                ObjBankItem.setAttribute("PDC_BILLING_DATE", EITLERPGLOBAL.formatDateDB(DataModelBD.getValueByVariable("PDC_BILLING_DATE", i)));
            }
            ObjBankItem.setAttribute("PDC_UTILIZED_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i)), 2));
            ObjBankItem.setAttribute("PDC_BALANCE_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i)), 2));
            ObjBankItem.setAttribute("PDC_CLOSED", "0");

            ObjFeltPDC.colPDCBankItems.put(Integer.toString(ObjFeltPDC.colPDCBankItems.size() + 1), ObjBankItem);
        }
        //======================Completed ===========================//

        //=================== Setting up Piece Details ==================//
        ObjFeltPDC.colPDCPieceItems.clear();

        for (int i = 0; i < TablePS.getRowCount(); i++) {
            clsFeltPDCPieceDetails ObjPieceItem = new clsFeltPDCPieceDetails();

            ObjPieceItem.setAttribute("PDC_PIECE_NO", DataModelPS.getValueByVariable("PDC_PIECE_NO", i));
            ObjPieceItem.setAttribute("PDC_PIECE_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(DataModelPS.getValueByVariable("PDC_PIECE_AMOUNT", i)), 2));
            ObjPieceItem.setAttribute("PDC_PIECE_STATUS", "INSERT");            

            ObjFeltPDC.colPDCPieceItems.put(Integer.toString(ObjFeltPDC.colPDCPieceItems.size() + 1), ObjPieceItem);
        }
        //======================Completed ===========================//

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltPDC.frmFindFeltPDC", true);
        frmFindFeltPDC ObjFindFeltOrderUpd = (frmFindFeltPDC) ObjLoader.getObj();

        if (ObjFindFeltOrderUpd.Cancelled == false) {
            if (!ObjFeltPDC.Filter(ObjFindFeltOrderUpd.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltPDC.this, " No records found.", "Find Felt PDC Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String AmendID) {
        ObjFeltPDC.Filter(" PDC_DOC_NO='" + AmendID + "'");
        SetMenuForRights();
        DisplayData();
    }

//    // find details by piece no.
//    public void Find(String pieceNo, String prodDate) {
//        ObjFeltPDC.Filter(" FELT_AMEND_PIECE_NO='" + pieceNo + "'");
//        SetMenuForRights();
//        DisplayData();
//    }
    // find all pending document
    public void FindWaiting() {
        ObjFeltPDC.Filter(" PDC_DOC_NO IN (SELECT DISTINCT PDC_DOC_NO FROM PRODUCTION.FELT_PDC_HEADER, PRODUCTION.FELT_PROD_DOC_DATA WHERE PDC_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=625 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();

    }

    public void FindEx(int pCompanyID, String AmendID) {
        ObjFeltPDC.Filter(" PDC_DOC_NO='" + AmendID + "'");
        ObjFeltPDC.MoveFirst();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltPDC.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltPDC.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltPDC.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltPDC.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModelBD.ClearAllReadOnly();
        DataModelPS.ClearAllReadOnly();
        TableBD.setEnabled(false);
        TablePS.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }

    private boolean Validate() {
        //Validates Item Entries

        if (txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Party Code");
            return false;
        }

        if (TableBD.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter at least one item in Bank Detail");
            return false;
        }

        if (TablePS.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter at least one item in Piece Detail");
            return false;
        }

        //Search in Table
        int BankName = DataModelBD.getColFromVariable("PDC_BANK_NAME");
        int BankBranch = DataModelBD.getColFromVariable("PDC_BANK_BRANCH");
        int ChqNo = DataModelBD.getColFromVariable("PDC_CHEQUE_NO");
        int ChqDate = DataModelBD.getColFromVariable("PDC_CHEQUE_DATE");
        int ChqAmt = DataModelBD.getColFromVariable("PDC_CHEQUE_AMOUNT");
        int billDate = DataModelBD.getColFromVariable("PDC_BILLING_DATE");

        for (int i = 0; i < TableBD.getRowCount(); i++) {
            if (DataModelBD.getValueAt(i, BankName).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter Bank Name at row : " + (i + 1));
                return false;
            }

            if (DataModelBD.getValueAt(i, BankBranch).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter Bank Branch at row : " + (i + 1));
                return false;
            }

            if (DataModelBD.getValueAt(i, ChqNo).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter Cheque No at row : " + (i + 1));
                return false;
            }

            if (DataModelBD.getValueAt(i, ChqDate).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter Cheque Date at row : " + (i + 1));
                return false;
            }

            if (!EITLERPGLOBAL.isDate(DataModelBD.getValueAt(i, ChqDate).toString())) {
                JOptionPane.showMessageDialog(null, "Invalid Cheque Date at row : " + (i + 1));
                return false;
            }

            if (DataModelBD.getValueAt(i, ChqAmt).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter Cheque Amount at row : " + (i + 1));
                return false;
            }

            if (DataModelBD.getValueAt(i, billDate).toString().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please check Billing Date at row : " + (i + 1));
                return false;
            }

            if (!EITLERPGLOBAL.isDate(DataModelBD.getValueAt(i, billDate).toString())) {
                JOptionPane.showMessageDialog(null, "Invalid Billing Date at row : " + (i + 1));
                return false;
            }
        }

        // check duplicate piece no in table
        for (int k = 0; k <= TablePS.getRowCount() - 1; k++) {
            for (int l = k; l <= TablePS.getRowCount() - 1; l++) {
                if (l != k && ((String) TablePS.getValueAt(k, 1)).trim().equals(((String) TablePS.getValueAt(l, 1)).trim())) {
                    JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }

        //Now Header level validations
        if (txtDocDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Doc Date");
            return false;
        }

        if (!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Doc Date");
            return false;
        }

        if (Double.parseDouble(txtBalanceAmt.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "Balance Amount should not be shorter.");
            return false;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return false;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return false;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return false;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return false;
        }

        return true;
    }

    private void BalanceCal() {
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (Double.parseDouble(txtManualAmt.getText()) <= Double.parseDouble(txtUnadjustedCredit.getText())) {
                double chequeAmt = 0, manualAmt = 0, carryForwardAmt = 0, pieceAmt = 0, balanceAmt = 0;
                String chqAmt = "";
                for (int i = 0; i <= TableBD.getRowCount() - 1; i++) {
                    if (DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i).equals("")) {
                        chqAmt = "0.0";
                    } else {
                        chqAmt = DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i);
                    }
                    chequeAmt += Double.parseDouble(chqAmt);
                }
                txtTotalChequeAmt.setText(String.valueOf(chequeAmt));
//                manualAmt = Double.parseDouble(txtManualAmt.getText());
                if (txtManualAmt.getText().equals("")) {
                    manualAmt = Double.parseDouble("0.0");
                } else {
                    manualAmt = Double.parseDouble(txtManualAmt.getText());
                }
//                carryForwardAmt = Double.parseDouble(txtCarryForwardAmt.getText());
                if (txtCarryForwardAmt.getText().equals("")) {
                    carryForwardAmt = Double.parseDouble("0.0");
                } else {
                    carryForwardAmt = Double.parseDouble(txtCarryForwardAmt.getText());
                }
                for (int j = 0; j <= TablePS.getRowCount() - 1; j++) {
                    pieceAmt += Double.parseDouble(TablePS.getValueAt(j, 2).toString());
                }
                pieceAmt = EITLERPGLOBAL.round(pieceAmt, 0);
                txtTotalPieceAmt.setText(String.valueOf(pieceAmt));
                balanceAmt = EITLERPGLOBAL.round((chequeAmt + manualAmt + carryForwardAmt - pieceAmt), 0);
                txtBalanceAmt.setText(String.valueOf(balanceAmt));
            } else {
                JOptionPane.showMessageDialog(null, "Manual Amount must be less then Unadjusted Credit.");
                txtManualAmt.setText("0.0");
            }
        }
    }

    private void CarryForward(String pPartyCode) {
        try {
            Connection conn = data.getConn();
            Statement stmt = conn.createStatement();

            String strSQL = "SELECT COUNT(*) AS COUNT FROM PRODUCTION.FELT_PDC_HEADER WHERE PDC_PARTY_CODE='" + pPartyCode + "' AND PDC_DOC_NO NOT IN ('" + txtDocNo.getText().trim() + "') AND APPROVED=0 AND CANCELED=0 "; //AND EFFECTIVE_TO IS NULL AND EFFECTIVE_FROM>'"+EITLERPGLOBAL.formatDateDB(txtEffectFrom.getText().trim())+"'
            System.out.println(strSQL);
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            if (rsTmp.getInt("COUNT") > 0) //Item is Approved
            {
                JOptionPane.showMessageDialog(null, "Please Final Approve or Reject Priveous Record of Party Code : '" + pPartyCode + "'.");
                txtPartyCode.setText("");
                lblPartyName.setText("");
                txtCreditDays.setText("");
                txtCriticalLimit.setText("");
                txtUnadjustedCredit.setText("");
                //Cancel();
            } else {
                txtCarryForwardAmt.setText(data.getStringValueFromDB("SELECT ROUND(H.PDC_TOTAL_BALANCE) FROM PRODUCTION.FELT_PDC_HEADER H, PRODUCTION.FELT_PDC_BANK_DETAIL B WHERE H.PDC_DOC_NO=B.PDC_DOC_NO AND H.PDC_PARTY_CODE='" + pPartyCode + "' AND B.PDC_CHEQUE_DATE>CURDATE() AND H.APPROVED=1 AND H.CANCELED=0 ORDER BY H.PDC_DOC_NO DESC"));
                if (txtCarryForwardAmt.getText().equals("")) {
                    txtCarryForwardAmt.setText("0.0");
                }

//                String sr = "SELECT B.* FROM PRODUCTION.FELT_PDC_HEADER H, PRODUCTION.FELT_PDC_BANK_DETAIL B WHERE H.PDC_DOC_NO=B.PDC_DOC_NO AND H.PDC_PARTY_CODE='" + pPartyCode + "' AND B.PDC_CHEQUE_DATE>CURDATE() AND B.PDC_BALANCE_AMOUNT>0 AND H.APPROVED=1 AND H.CANCELED=0 ORDER BY H.PDC_DOC_NO DESC";
//                System.out.println(sr);
//                ResultSet rs = data.getResult(sr);
//                rs.first();
//
//                if (data.IsRecordExist("SELECT B.* FROM PRODUCTION.FELT_PDC_HEADER H, PRODUCTION.FELT_PDC_BANK_DETAIL B WHERE H.PDC_DOC_NO=B.PDC_DOC_NO AND H.PDC_PARTY_CODE='" + pPartyCode + "' AND B.PDC_CHEQUE_DATE>CURDATE() AND B.PDC_BALANCE_AMOUNT>0 AND H.APPROVED=1 AND H.CANCELED=0 ORDER BY H.PDC_DOC_NO DESC")) {
//                    while (!rs.isAfterLast()) {
//
//                        Object[] rowData = new Object[34];
//                        rowData[0] = Integer.toString(TableBD.getRowCount() + 1);
//                        rowData[1] = rs.getString("PDC_BANK_NAME");
//                        rowData[2] = rs.getString("PDC_BANK_CD");
//                        rowData[3] = rs.getString("PDC_BANK_BRANCH");
//                        rowData[4] = rs.getString("PDC_CHEQUE_NO");
//                        rowData[5] = EITLERPGLOBAL.formatDate(rs.getString("PDC_CHEQUE_DATE"));
//                        rowData[6] = rs.getString("PDC_CHEQUE_AMOUNT");
//                        rowData[7] = rs.getString("PDC_PHYSICAL_SCANNED");
//                        rowData[8] = EITLERPGLOBAL.formatDate(rs.getString("PDC_BILLING_DATE"));
//                        rowData[9] = rs.getString("PDC_UTILIZED_AMOUNT");
//                        rowData[10] = rs.getString("PDC_BALANCE_AMOUNT");
//                        rowData[11] = rs.getString("PDC_BALANCE_AMOUNT");
//
//                        DataModelBD.addRow(rowData);
//                        TableBD.setRowSelectionAllowed(false);
//                        
//                        rs.next();
//                    }
//                } else {
//
//                }
            }
        } catch (Exception e) {
//            e.printStackTrace();
        }
    }

    private double OutStanding(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            if (MainCode.equals("210010")) {
                InvoiceType = 2;
                BookCode = " AND BOOK_CODE IN ('09') "; //,'18'
                //ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            }
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE,A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_BAL_TR (MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT) " + SQL);

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) { //&& clsVoucher.getVoucherType(VoucherNo)!=FinanceGlobal.TYPE_DEBIT_NOTE
                        rsInvoice.next();
                        continue;
                    }

                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    private void UtilizedBalanceCal1() {
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            double chequeAmt = 0, manualAmt = 0, utilizedAmt = 0, pieceAmt = 0, balanceAmt = 0;
//            for (int i = 0; i <= TableBD.getRowCount() - 1; i++) {
//                if (DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i).equals("")) {
//                    chqAmt = "0.0";
//                } else {
//                    chqAmt = DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", i);
//                }
//                chequeAmt += Double.parseDouble(chqAmt);
//            }
//            txtTotalChequeAmt.setText(String.valueOf(chequeAmt));
//            manualAmt = Double.parseDouble(txtManualAmt.getText());
//            carryForwardAmt = Double.parseDouble(txtCarryForwardAmt.getText());
//            for (int j = 0; j <= TablePS.getRowCount() - 1; j++) {
//                pieceAmt += Double.parseDouble(TablePS.getValueAt(j, 2).toString());
//            }
//            pieceAmt = EITLERPGLOBAL.round(pieceAmt, 2);
//            txtTotalPieceAmt.setText(String.valueOf(pieceAmt));
//            balanceAmt = EITLERPGLOBAL.round((chequeAmt + manualAmt + carryForwardAmt - pieceAmt), 2);
//            txtBalanceAmt.setText(String.valueOf(balanceAmt));

            for (int i = 0; i <= TablePS.getRowCount() - 1; i++) {
                pieceAmt = Double.parseDouble(DataModelPS.getValueByVariable("PDC_PIECE_AMOUNT", i).toString());
                for (int j = 0; j <= TableBD.getRowCount() - 1; j++) {
                    chequeAmt = Double.parseDouble(DataModelBD.getValueByVariable("PDC_CHEQUE_AMOUNT", j));
                    utilizedAmt = Double.parseDouble(DataModelBD.getValueByVariable("PDC_UTILIZED_AMOUNT", j));
                    balanceAmt = Double.parseDouble(DataModelBD.getValueByVariable("PDC_BALANCE_AMOUNT", j));
                    if (pieceAmt > 0) {
                        if (balanceAmt < pieceAmt) {
                            pieceAmt = pieceAmt - balanceAmt;
                            utilizedAmt = utilizedAmt + balanceAmt;
                            balanceAmt = 0;
                            DataModelBD.setValueByVariable("PDC_UTILIZED_AMOUNT", String.valueOf(utilizedAmt), j);
                            DataModelBD.setValueByVariable("PDC_BALANCE_AMOUNT", String.valueOf(balanceAmt), j);
                        }
                        if (balanceAmt > pieceAmt) {
                            balanceAmt = balanceAmt - pieceAmt;
                            utilizedAmt = utilizedAmt + pieceAmt;
                            pieceAmt = 0;
                            DataModelBD.setValueByVariable("PDC_UTILIZED_AMOUNT", String.valueOf(utilizedAmt), j);
                            DataModelBD.setValueByVariable("PDC_BALANCE_AMOUNT", String.valueOf(balanceAmt), j);
                        }
                    }
                }
            }
        }
    }
    
    private void FormatGridAmendH() {
        DataModelAmendH = new EITLTableModel();

        TableAmendH.removeAll();
        TableAmendH.setModel(DataModelAmendH);

        //Set the table Readonly
        DataModelAmendH.TableReadOnly(true);

        //Add the columns
        DataModelAmendH.addColumn("Amend No.");
        DataModelAmendH.addColumn("Amend Date");
        DataModelAmendH.addColumn("Total Amount");
        DataModelAmendH.addColumn("Manual Amount");
        DataModelAmendH.addColumn("Unadjusted Credit");
        DataModelAmendH.addColumn("Carryforward Amount");

        TableAmendH.setAutoResizeMode(TableAmendH.AUTO_RESIZE_OFF);

    }
    
    private void FormatGridAmendD() {
        DataModelAmendD = new EITLTableModel();

        TableAmendD.removeAll();
        TableAmendD.setModel(DataModelAmendD);

        //Set the table Readonly
        DataModelAmendD.TableReadOnly(true);

        //Add the columns
        DataModelAmendD.addColumn("Sr No.");
        DataModelAmendD.addColumn("Status");
        DataModelAmendD.addColumn("Amend No.");
        DataModelAmendD.addColumn("Amend Date");
        DataModelAmendD.addColumn("Piece No");
        DataModelAmendD.addColumn("Piece Amount");

        TableAmendD.setAutoResizeMode(TableAmendD.AUTO_RESIZE_OFF);

    }

}
