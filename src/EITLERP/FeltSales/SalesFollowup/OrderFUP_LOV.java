/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author
 */
package EITLERP.FeltSales.SalesFollowup;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.data;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.sql.*;
import java.awt.Frame;

public class OrderFUP_LOV extends javax.swing.JApplet {

    /**
     * Initializes the applet searchkey
     */
    public String SQL, MSQL, tempSQL;
    public String dSQL, sSQL, wSQL;
    public int ReturnCol;
    public int SecondCol = -1;
    public boolean ShowReturnCol;
    public int DefaultSearchOn;
    public String Party_Code;
    public String QueryCode;
    public boolean Cancelled = true;
    public boolean UseSpecifiedConn = false;
    public String dbURL = "";
    public String UPN = "";

    public String ReturnVal = "";
    public String SecondVal = "";

    private JDialog aDialog;

    private EITLTableModel DataModel;
    private EITLTableModel DataModel_Dispatch;
    private EITLTableModel DataModel_Stock;
    private EITLTableModel DataModel_WIP;

    public boolean UseCreatedConn = false;

    private int mfnd = 0;
    private int mtotcol = 0;
    Connection Conn = null;
    Statement stmt = null;
    Statement dstmt = null;
    Statement sstmt = null;
    Statement wstmt = null;

    public OrderFUP_LOV() {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        DataModel_Dispatch = new EITLTableModel();
        DataModel_Stock = new EITLTableModel();
        DataModel_WIP = new EITLTableModel();
        SQL = "";
        MSQL = "";
        dSQL = "";
        sSQL = "";
        wSQL = "";
        ReturnCol = 0;
        ShowReturnCol = false;
        DefaultSearchOn = 0;
        try {
            if (UseSpecifiedConn) {
                Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
            } else {
                if (UseCreatedConn) {
                    //Conn=data.getCreatedConn();
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                } else {
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                }
            }
            stmt = Conn.createStatement();
            dstmt = Conn.createStatement();
            sstmt = Conn.createStatement();
            wstmt = Conn.createStatement();
        } catch (Exception e) {
            System.out.println("Error on connectrion = " + e.getMessage());
        }

    }

    public OrderFUP_LOV(String pSQL, int pReturnCol, boolean pShowReturnCol, int pDefaultSearchOn) {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = pSQL;
        MSQL = pSQL;
        ReturnCol = pReturnCol;
        ShowReturnCol = pShowReturnCol;
        DefaultSearchOn = pDefaultSearchOn;

    }

    @Override
    public void init() {
        initComponents();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Dispatch = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_StockBSR = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        Table_WIP = new javax.swing.JTable();

        Table_Dispatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table_Dispatch);

        jTabbedPane1.addTab("Dispatch", jScrollPane1);

        Table_StockBSR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(Table_StockBSR);

        jTabbedPane1.addTab("Stock / BSR", jScrollPane2);

        Table_WIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Table_WIP);

        jTabbedPane1.addTab("WIP", jScrollPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1184, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table_Dispatch;
    private javax.swing.JTable Table_StockBSR;
    private javax.swing.JTable Table_WIP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    public void setsearchText(String pstxt) {
        System.out.println("Data in Search Box = " + pstxt);
    }

    public boolean ShowLOV() {
        try {
            GenerateLOV();

            setSize(1238, 450);

            Frame f = findParentFrame(this);

            aDialog = new JDialog(f, "UPN Status : " + UPN, true);

            aDialog.getContentPane().add("Center", this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(true);

            //Place it to center of the screen
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int) (screenSize.width - appletSize.getWidth()) / 2, (int) (screenSize.height - appletSize.getHeight()) / 2);

            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        } catch (Exception e) {
        }
        //if (mfnd==1)
        return !Cancelled;
        //else
        //    return false;
    }

    private void GenerateLOV() {
        try {
//            System.out.println("ShowLOV1 SQL = " + SQL);
            System.out.println("ShowLOV dSQL = " + dSQL);
            System.out.println("ShowLOV sSQL = " + sSQL);
            System.out.println("ShowLOV wSQL = " + wSQL);

//            ResultSet rsData = stmt.executeQuery(SQL);
//            //System.out.println("Data on rsData = "+rsData.getString(1));
//            ResultSetMetaData rsInfo = rsData.getMetaData();
            ResultSet drsData = dstmt.executeQuery(dSQL);
            ResultSetMetaData drsInfo = drsData.getMetaData();

            ResultSet srsData = sstmt.executeQuery(sSQL);
            ResultSetMetaData srsInfo = srsData.getMetaData();

            ResultSet wrsData = wstmt.executeQuery(wSQL);
            ResultSetMetaData wrsInfo = wrsData.getMetaData();

            //Format the table from the resultset meta data for Dispatch
            for (int i = 1; i <= drsInfo.getColumnCount(); i++) {
                DataModel_Dispatch.addColumn(drsInfo.getColumnName(i));
                DataModel_Dispatch.SetReadOnly(i - 1);
            }

            Table_Dispatch.setModel(DataModel_Dispatch);
            Table_Dispatch.setColumnSelectionAllowed(true);
            Table_Dispatch.setRowSelectionAllowed(true);
            //DataModel.TableReadOnly(true);

            //Now Populate the table
            drsData.first();
            if (drsData.getRow() > 0) {
                mtotcol = drsInfo.getColumnCount();
                while (!drsData.isAfterLast()) {
                    Object[] rowData_Dispatch = new Object[drsInfo.getColumnCount()];

                    //Fillup the array
                    for (int i = 1; i <= drsInfo.getColumnCount(); i++) {
                        switch (drsInfo.getColumnType(i)) {
                            case -5: //Long
                                rowData_Dispatch[i - 1] = Long.toString(drsData.getLong(i));
                                break;

                            case 4: //Integer,Small int
                                rowData_Dispatch[i - 1] = Integer.toString(drsData.getInt(i));
                                break;
                            case 5: //Integer,Small int
                                rowData_Dispatch[i - 1] = Integer.toString(drsData.getInt(i));
                                break;
                            case -6: //Integer,Small int
                                rowData_Dispatch[i - 1] = Integer.toString(drsData.getInt(i));
                                break;
                            case 16: //Boolean
                                if (drsData.getBoolean(i) == true) {
                                    rowData_Dispatch[i - 1] = "Yes";
                                } else {
                                    rowData_Dispatch[i - 1] = "No";
                                }
                                break;
                            case 91: //Date
                                rowData_Dispatch[i - 1] = EITLERPGLOBAL.formatDate(drsData.getDate(i));
                                break;
                            case 8: //Double
                                rowData_Dispatch[i - 1] = Double.toString(drsData.getDouble(i));
                                break;
                            case 6: //Float
                                rowData_Dispatch[i - 1] = Float.toString(drsData.getFloat(i));
                                break;
                            case 12://Varchar
                                rowData_Dispatch[i - 1] = drsData.getString(i);
                                break;
                            default: //Varchar
                                rowData_Dispatch[i - 1] = drsData.getString(i);
                                break;
                        } //Switch
                    }// for

                    if (rowData_Dispatch[1].toString().length() == 1) {
                        rowData_Dispatch[1] = "0" + rowData_Dispatch[1];
                    }
                    //Add a row to the table
                    DataModel_Dispatch.addRow(rowData_Dispatch);

                    //Move to the next row
                    drsData.next();
                }
            }

            TableColumnModel ColModel_Dispatch = Table_Dispatch.getColumnModel();
            Table_Dispatch.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table_Dispatch.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table_Dispatch.changeSelection(0, 0, false, false);

            //Format the table from the resultset meta data for Stock
            for (int i = 1; i <= srsInfo.getColumnCount(); i++) {
                DataModel_Stock.addColumn(srsInfo.getColumnName(i));
                DataModel_Stock.SetReadOnly(i - 1);
            }

            Table_StockBSR.setModel(DataModel_Stock);
            Table_StockBSR.setColumnSelectionAllowed(true);
            Table_StockBSR.setRowSelectionAllowed(true);
            //DataModel.TableReadOnly(true);

            //Now Populate the table
            srsData.first();
            if (srsData.getRow() > 0) {
                mtotcol = srsInfo.getColumnCount();
                while (!srsData.isAfterLast()) {
                    Object[] rowData_Stock = new Object[srsInfo.getColumnCount()];

                    //Fillup the array
                    for (int i = 1; i <= srsInfo.getColumnCount(); i++) {
                        switch (srsInfo.getColumnType(i)) {
                            case -5: //Long
                                rowData_Stock[i - 1] = Long.toString(srsData.getLong(i));
                                break;

                            case 4: //Integer,Small int
                                rowData_Stock[i - 1] = Integer.toString(srsData.getInt(i));
                                break;
                            case 5: //Integer,Small int
                                rowData_Stock[i - 1] = Integer.toString(srsData.getInt(i));
                                break;
                            case -6: //Integer,Small int
                                rowData_Stock[i - 1] = Integer.toString(srsData.getInt(i));
                                break;
                            case 16: //Boolean
                                if (srsData.getBoolean(i) == true) {
                                    rowData_Stock[i - 1] = "Yes";
                                } else {
                                    rowData_Stock[i - 1] = "No";
                                }
                                break;
                            case 91: //Date
                                rowData_Stock[i - 1] = EITLERPGLOBAL.formatDate(srsData.getDate(i));
                                break;
                            case 8: //Double
                                rowData_Stock[i - 1] = Double.toString(srsData.getDouble(i));
                                break;
                            case 6: //Float
                                rowData_Stock[i - 1] = Float.toString(srsData.getFloat(i));
                                break;
                            case 12://Varchar
                                rowData_Stock[i - 1] = srsData.getString(i);
                                break;
                            default: //Varchar
                                rowData_Stock[i - 1] = srsData.getString(i);
                                break;
                        } //Switch
                    }// for

                    if (rowData_Stock[1].toString().length() == 1) {
                        rowData_Stock[1] = "0" + rowData_Stock[1];
                    }
                    //Add a row to the table
                    DataModel_Stock.addRow(rowData_Stock);

                    //Move to the next row
                    srsData.next();
                }
            }

            TableColumnModel ColModel_StockBSR = Table_StockBSR.getColumnModel();
            Table_StockBSR.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table_StockBSR.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table_StockBSR.changeSelection(0, 0, false, false);

            //Format the table from the resultset meta data for WIP
            for (int i = 1; i <= wrsInfo.getColumnCount(); i++) {
                DataModel_WIP.addColumn(wrsInfo.getColumnName(i));
                DataModel_WIP.SetReadOnly(i - 1);
            }

            Table_WIP.setModel(DataModel_WIP);
            Table_WIP.setColumnSelectionAllowed(true);
            Table_WIP.setRowSelectionAllowed(true);
            //DataModel.TableReadOnly(true);

            //Now Populate the table
            wrsData.first();
            if (wrsData.getRow() > 0) {
                mtotcol = wrsInfo.getColumnCount();
                while (!wrsData.isAfterLast()) {
                    Object[] rowData_WIP = new Object[wrsInfo.getColumnCount()];

                    //Fillup the array
                    for (int i = 1; i <= wrsInfo.getColumnCount(); i++) {
                        switch (wrsInfo.getColumnType(i)) {
                            case -5: //Long
                                rowData_WIP[i - 1] = Long.toString(wrsData.getLong(i));
                                break;

                            case 4: //Integer,Small int
                                rowData_WIP[i - 1] = Integer.toString(wrsData.getInt(i));
                                break;
                            case 5: //Integer,Small int
                                rowData_WIP[i - 1] = Integer.toString(wrsData.getInt(i));
                                break;
                            case -6: //Integer,Small int
                                rowData_WIP[i - 1] = Integer.toString(wrsData.getInt(i));
                                break;
                            case 16: //Boolean
                                if (wrsData.getBoolean(i) == true) {
                                    rowData_WIP[i - 1] = "Yes";
                                } else {
                                    rowData_WIP[i - 1] = "No";
                                }
                                break;
                            case 91: //Date
                                rowData_WIP[i - 1] = EITLERPGLOBAL.formatDate(wrsData.getDate(i));
                                break;
                            case 8: //Double
                                rowData_WIP[i - 1] = Double.toString(wrsData.getDouble(i));
                                break;
                            case 6: //Float
                                rowData_WIP[i - 1] = Float.toString(wrsData.getFloat(i));
                                break;
                            case 12://Varchar
                                rowData_WIP[i - 1] = wrsData.getString(i);
                                break;
                            default: //Varchar
                                rowData_WIP[i - 1] = wrsData.getString(i);
                                break;
                        } //Switch
                    }// for

                    if (rowData_WIP[1].toString().length() == 1) {
                        rowData_WIP[1] = "0" + rowData_WIP[1];
                    }
                    //Add a row to the table
                    DataModel_WIP.addRow(rowData_WIP);

                    //Move to the next row
                    wrsData.next();
                }
            }

            TableColumnModel ColModel_WIP = Table_WIP.getColumnModel();
            Table_WIP.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table_WIP.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table_WIP.changeSelection(0, 0, false, false);

            if (ShowReturnCol == false) {
                System.out.println("Return Col = " + ReturnCol);
//                ColModel.getColumn(ReturnCol - 1).setMinWidth(0);
//                ColModel.getColumn(ReturnCol - 1).setPreferredWidth(0);
            }

        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null,e.getMessage());
            e.printStackTrace();
        }
    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    public void destroy() {
        try {
            stmt.close();
            Conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
