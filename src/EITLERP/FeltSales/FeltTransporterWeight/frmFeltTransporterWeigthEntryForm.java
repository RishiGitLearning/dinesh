/*
 * frmFeltProcessInvoiceVariable.java
 *
 * Created on June 19, 2013, 5:27 PM
 */

package EITLERP.FeltSales.FeltTransporterWeight;

/**
 *
 * @author RAJPALSINH JADEJA
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.FeltSales.FeltPacking.clsFeltPacking;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.clsSales_Party;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.ReportUI.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import TReportWriter.TReportEngine;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashSet;
import javax.swing.JTextField;


public class frmFeltTransporterWeigthEntryForm extends javax.swing.JApplet {
    private clsFeltTransporterWeigthEntryForm ObjFeltReopenBale;
    
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    private int FFNo=0; //First Free No.
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    private boolean DoNotEvaluate=false;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    
    private EITLTableModel DataModelPieceNo;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel=new EITLTableModel();
    private TReportEngine objEngine=new TReportEngine();
    
    public frmPendingApprovals frmPA;
    
    
    /** Creates new form frmFeltProcessInvoiceVariable */
    public void init() {
        System.gc();
        setSize(1000,700);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjFeltReopenBale=new clsFeltTransporterWeigthEntryForm();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        
        SetFields(false);
        
        cmdPreview.setEnabled(true);
               
        if(ObjFeltReopenBale.LoadData()) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(this,"Error occured while Loading Data. Error is "+ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtBoxSize = new javax.swing.JTextField();
        txtbaleno = new javax.swing.JTextField();
        txtDocdate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtdocno = new javax.swing.JTextField();
        txtGrossWeight = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lblRevNo = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBaleDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCartRate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 720, 40);

        lblTitle.setBackground(new java.awt.Color(178, 182, 185));
        lblTitle.setText("TRANSPORTER WEIGHT ENTRY FORM -");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 720, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(530, 260, 90, 29);

        jLabel7.setText("Box Size");
        Tab1.add(jLabel7);
        jLabel7.setBounds(50, 110, 60, 20);

        txtBoxSize.setEditable(false);
        txtBoxSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBoxSizeActionPerformed(evt);
            }
        });
        txtBoxSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBoxSizeFocusLost(evt);
            }
        });
        txtBoxSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBoxSizeKeyPressed(evt);
            }
        });
        Tab1.add(txtBoxSize);
        txtBoxSize.setBounds(120, 110, 130, 27);

        txtbaleno.setEditable(false);
        txtbaleno = new JTextFieldHint(new JTextField(),"Search by F1");
        txtbaleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbalenoActionPerformed(evt);
            }
        });
        txtbaleno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtbalenoFocusLost(evt);
            }
        });
        txtbaleno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtbalenoKeyPressed(evt);
            }
        });
        Tab1.add(txtbaleno);
        txtbaleno.setBounds(120, 40, 130, 27);

        txtDocdate.setEditable(false);
        Tab1.add(txtDocdate);
        txtDocdate.setBounds(410, 10, 130, 27);

        jLabel2.setText("Doc No");
        Tab1.add(jLabel2);
        jLabel2.setBounds(50, 10, 50, 17);

        txtdocno.setEditable(false);
        txtdocno.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        txtdocno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdocnoActionPerformed(evt);
            }
        });
        Tab1.add(txtdocno);
        txtdocno.setBounds(120, 10, 130, 27);

        txtGrossWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtGrossWeightKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGrossWeightKeyReleased(evt);
            }
        });
        Tab1.add(txtGrossWeight);
        txtGrossWeight.setBounds(410, 110, 130, 27);

        jLabel3.setText("Gross Weight");
        Tab1.add(jLabel3);
        jLabel3.setBounds(310, 120, 90, 17);

        lblRevNo.setText(".....");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(260, 10, 30, 17);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Doc Date");
        Tab1.add(jLabel12);
        jLabel12.setBounds(310, 10, 90, 17);

        jLabel19.setText("Bale No");
        Tab1.add(jLabel19);
        jLabel19.setBounds(50, 40, 53, 17);

        jLabel4.setText("Bale Date");
        Tab1.add(jLabel4);
        jLabel4.setBounds(340, 40, 70, 17);

        txtBaleDate.setEditable(false);
        Tab1.add(txtBaleDate);
        txtBaleDate.setBounds(410, 40, 130, 27);

        jLabel5.setText("Cart Rate");
        Tab1.add(jLabel5);
        jLabel5.setBounds(40, 140, 70, 17);

        txtCartRate.setEditable(false);
        Tab1.add(txtCartRate);
        txtCartRate.setBounds(120, 140, 130, 27);

        jLabel1.setText("Party Code");
        Tab1.add(jLabel1);
        jLabel1.setBounds(25, 70, 80, 17);

        txtPartyCode.setEditable(false);
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(120, 70, 130, 27);
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(260, 80, 370, 17);

        Tab.addTab("TRANSPORTER WEIGHT ENTRY FORM", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 230, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 230, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 500, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 160, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 212, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 230, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 242, 60, 17);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 240, 490, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(410, 280, 100, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(610, 70, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(540, 280, 100, 29);

        Tab.addTab("Approval", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 180, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 600, 100);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 132, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 150, 510, 150);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(530, 250, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(530, 180, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(530, 150, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(530, 210, 110, 33);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 96, 660, 380);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 510, 740, 22);
    }// </editor-fold>//GEN-END:initComponents
                            
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        Report();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(this,"Select a row from Document Update History","ERROR",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltReopenBale.HistoryView = false;
        ObjFeltReopenBale.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed
    
    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltReopenBale.ShowHistory(EITLERPGLOBAL.formatDateDB(txtDocdate.getText()), txtdocno.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
            
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
        
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(762,ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltReopenBale.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
       Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
            
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained

    }//GEN-LAST:event_Tab1FocusGained

    private void txtdocnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdocnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdocnoActionPerformed

    private void txtbalenoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbalenoKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList=new LOV();
//            aList.SQL="SELECT * FROM (SELECT DISTINCT PKG_BALE_NO,PKG_BALE_DATE,PKG_PARTY_CODE,PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_NO NOT IN (SELECT BALE_NO FROM PRODUCTION.FELT_TRANSPORTER_WEIGHT) AND PKG_BALE_NO!='' AND INVOICE_FLG=0 UNION ALL (SELECT  DISTINCT PKG_BALE_NO,PKG_BALE_DATE,PKG_PARTY_CODE,PKG_PARTY_NAME FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A,PRODUCTION.FELT_PKG_SLIP_HEADER B WHERE INVOICE_DATE<=current_date AND A.BALE_NO=B.PKG_BALE_NO AND INVOICE_FLG=1)) AS A WHERE PKG_BALE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND PKG_BALE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"'";
            aList.SQL="SELECT * FROM (SELECT DISTINCT PKG_BALE_NO,PKG_BALE_DATE,PKG_PARTY_CODE,PKG_PARTY_NAME FROM PRODUCTION.FELT_PKG_SLIP_HEADER WHERE PKG_BALE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND PKG_BALE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CONCAT(PKG_BALE_NO,PKG_BALE_DATE) NOT IN (SELECT CONCAT(BALE_NO,BALE_DATE) FROM PRODUCTION.FELT_TRANSPORTER_WEIGHT WHERE BALE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND BALE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"') AND PKG_BALE_NO!='' AND INVOICE_FLG=0 UNION ALL (SELECT  DISTINCT PKG_BALE_NO,PKG_BALE_DATE,PKG_PARTY_CODE,PKG_PARTY_NAME FROM PRODUCTION.FELT_SAL_INVOICE_HEADER A,PRODUCTION.FELT_PKG_SLIP_HEADER B WHERE INVOICE_DATE<=current_date AND A.BALE_NO=B.PKG_BALE_NO AND A.PACKING_DATE=B.PKG_BALE_DATE AND B.PKG_BALE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND B.PKG_BALE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND INVOICE_FLG=1) ) AS A WHERE PKG_BALE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND PKG_BALE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                String str = aList.ReturnVal;
                txtbaleno.setText(str);
                txtBaleDate.setText(EITLERPGLOBAL.formatDate(clsFeltTransporterWeigthEntryForm.getBaleDate(EITLERPGLOBAL.gCompanyID, txtbaleno.getText().trim())));
                txtPartyCode.setText(clsFeltTransporterWeigthEntryForm.getPartyCode(EITLERPGLOBAL.gCompanyID, txtbaleno.getText().trim()));
                lblPartyName.setText(clsFeltTransporterWeigthEntryForm.getPartyName(EITLERPGLOBAL.gCompanyID, txtbaleno.getText().trim()));
                txtBoxSize.setText(clsFeltTransporterWeigthEntryForm.getBoxSize(EITLERPGLOBAL.gCompanyID, txtbaleno.getText().trim()));
                //txtInvoiceNo.setText(clsFeltTransporterWeigthEntryForm.getInvoiceNo(EITLERPGLOBAL.gCompanyID, txtbaleno.getText().trim()));
                //txtInvoiceDate.setText(EITLERPGLOBAL.formatDate(clsFeltTransporterWeigthEntryForm.getInvoiceDate(EITLERPGLOBAL.gCompanyID, txtbaleno.getText().trim())));
            }
            

        }
    }//GEN-LAST:event_txtbalenoKeyPressed

    private void txtbalenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtbalenoFocusLost
     txtGrossWeight.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtbalenoFocusLost

    private void txtbalenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbalenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbalenoActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void txtGrossWeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrossWeightKeyPressed
                  // TODO add your handling code here:
    }//GEN-LAST:event_txtGrossWeightKeyPressed

    private void txtBoxSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBoxSizeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBoxSizeKeyPressed

    private void txtBoxSizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBoxSizeFocusLost
                // TODO add your handling code here:
    }//GEN-LAST:event_txtBoxSizeFocusLost

    private void txtBoxSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBoxSizeActionPerformed

    }//GEN-LAST:event_txtBoxSizeActionPerformed

    private void txtGrossWeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrossWeightKeyReleased
     //txtGrossWeight.getText()        // TODO add your handling code here:
        
       double gross_weight = 0; 
       try{
           gross_weight = Double.parseDouble(txtGrossWeight.getText());
       } catch(Exception e)
       {
           txtCartRate.setText("");
           //e.printStackTrace();
       }    
        
//       if(gross_weight != 0)
//       {
//           if(gross_weight <= 50)
//           {
//               txtCartRate.setText("90");
//           }
//           else if (gross_weight > 50 && gross_weight <= 80) {
//               txtCartRate.setText("100");
//           }
//           else if (gross_weight > 80 && gross_weight <= 110) {
//               txtCartRate.setText("175");
//           }
//           else if (gross_weight > 110 && gross_weight <= 140) {
//               txtCartRate.setText("200");
//           }
//           else if (gross_weight > 140 && gross_weight <= 170) {
//               txtCartRate.setText("225");
//           }
//           else if (gross_weight > 170 && gross_weight <= 200) {
//               txtCartRate.setText("300");
//           }
//           else if (gross_weight > 200 && gross_weight <= 230) {
//               txtCartRate.setText("350");
//           }
//           else if (gross_weight > 230 && gross_weight <= 260) {
//               txtCartRate.setText("400");
//           }
//           else if (gross_weight > 260 && gross_weight <= 300) {
//               txtCartRate.setText("450");
//           }
//           else if (gross_weight > 300 && gross_weight <= 350) {
//               txtCartRate.setText("500");
//           }
//           else if (gross_weight > 350 && gross_weight <= 400) {
//               txtCartRate.setText("550");
//           }
//           else if (gross_weight > 400 && gross_weight <= 500) {
//               txtCartRate.setText("650");
//           }
//           else if (gross_weight > 500 && gross_weight <= 600) {
//               txtCartRate.setText("700");
//           }
//           else if (gross_weight > 600 && gross_weight <= 700) {
//               txtCartRate.setText("850");
//           }
//           else if (gross_weight > 700 && gross_weight <= 800) {
//               txtCartRate.setText("1000");
//           }
//           else if (gross_weight > 800 && gross_weight <= 900) {
//               txtCartRate.setText("1200");
//           }
//           else if (gross_weight > 900 && gross_weight <= 1200) {
//               txtCartRate.setText("1500");
//           }
//           else if (gross_weight > 1200) {
//               txtCartRate.setText("1500");
//           }
//           else
//           {
//               txtCartRate.setText("0");
//           }           
//       }
       
       
       // STARTING FROM 16/12/2019
       if(gross_weight != 0)
       {
           if(gross_weight <= 50)
           {
               txtCartRate.setText("180");
           }
           else if (gross_weight > 50 && gross_weight <= 80) {
               txtCartRate.setText("200");
           }
           else if (gross_weight > 80 && gross_weight <= 110) {
               txtCartRate.setText("350");
           }
           else if (gross_weight > 110 && gross_weight <= 140) {
               txtCartRate.setText("400");
           }
           else if (gross_weight > 140 && gross_weight <= 170) {
               txtCartRate.setText("450");
           }
           else if (gross_weight > 170 && gross_weight <= 200) {
               txtCartRate.setText("600");
           }
           else if (gross_weight > 200 && gross_weight <= 230) {
               txtCartRate.setText("700");
           }
           else if (gross_weight > 230 && gross_weight <= 260) {
               txtCartRate.setText("800");
           }
           else if (gross_weight > 260 && gross_weight <= 300) {
               txtCartRate.setText("900");
           }
           else if (gross_weight > 300 && gross_weight <= 350) {
               txtCartRate.setText("1000");
           }
           else if (gross_weight > 350 && gross_weight <= 400) {
               txtCartRate.setText("1100");
           }
           else if (gross_weight > 400 && gross_weight <= 500) {
               txtCartRate.setText("1300");
           }
           else if (gross_weight > 500 && gross_weight <= 600) {
               txtCartRate.setText("1400");
           }
           else if (gross_weight > 600 && gross_weight <= 700) {
               txtCartRate.setText("1700");
           }
           else if (gross_weight > 700 && gross_weight <= 800) {
               txtCartRate.setText("2000");
           }
           else if (gross_weight > 800 && gross_weight <= 900) {
               txtCartRate.setText("2400");
           }
           else if (gross_weight > 900 && gross_weight <= 1000) {
               txtCartRate.setText("3000");
           }
           else if (gross_weight > 1000) {
               txtCartRate.setText("3000");
           }
           else
           {
               txtCartRate.setText("0");
           }           
       }
       
    }//GEN-LAST:event_txtGrossWeightKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtBaleDate;
    private javax.swing.JTextField txtBoxSize;
    private javax.swing.JTextField txtCartRate;
    private javax.swing.JTextField txtDocdate;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGrossWeight;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtbaleno;
    private javax.swing.JTextField txtdocno;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
       
        txtdocno.setEnabled(pStat);
        txtDocdate.setEnabled(pStat);
        txtbaleno.setEditable(pStat);
        txtBaleDate.setEnabled(pStat);
//        txtInvoiceNo.setEnabled(pStat);
//        txtInvoiceDate.setEnabled(pStat);
        txtBoxSize.setEnabled(pStat);
        txtGrossWeight.setEnabled(pStat);
        txtCartRate.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        lblPartyName.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
            
        
        SetupApproval();
    }
    
    private void ClearFields() {
       
        txtdocno.setText("");
        txtDocdate.setText(EITLERPGLOBAL.getCurrentDate());
        txtbaleno.setText("");
        txtBaleDate.setText("");
//        txtInvoiceNo.setText("");
//        txtInvoiceDate.setText("");
        txtBoxSize.setText("");
        txtGrossWeight.setText("");
        txtCartRate.setText("");
        txtPartyCode.setText("");
        lblPartyName.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        
    }
    
    private void DisplayData() {
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,762)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //=========== Title Bar Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjFeltReopenBale.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else lblTitle.setBackground(Color.GRAY);
                
                if(ObjFeltReopenBale.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//
            
            
            String DOCNO= ObjFeltReopenBale.getAttribute("DOC_NO").getString();
            lblTitle.setText(" TRANSPORTER WEIGHT ENTRY FORM - "+ DOCNO);
            lblRevNo.setText(Integer.toString((int)ObjFeltReopenBale.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,ObjFeltReopenBale.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate=true;
            
            txtdocno.setText(DOCNO);
            txtDocdate.setText(EITLERPGLOBAL.formatDate(ObjFeltReopenBale.getAttribute("DOC_DATE").getString()));
            txtbaleno.setText(ObjFeltReopenBale.getAttribute("BALE_NO").getString());
            txtBaleDate.setText(EITLERPGLOBAL.formatDate(ObjFeltReopenBale.getAttribute("BALE_DATE").getString()));
//            txtInvoiceNo.setText(ObjFeltReopenBale.getAttribute("INVOICE_NO").getString());
//            txtInvoiceDate.setText(EITLERPGLOBAL.formatDate(ObjFeltReopenBale.getAttribute("INVOICE_DATE").getString()));
            txtBoxSize.setText(ObjFeltReopenBale.getAttribute("BOX_SIZE").getString());
            txtGrossWeight.setText(ObjFeltReopenBale.getAttribute("GROSS_WEIGHT").getString());
            txtCartRate.setText(ObjFeltReopenBale.getAttribute("CART_RATE").getString());
            txtPartyCode.setText(ObjFeltReopenBale.getAttribute("PARTY_CODE").getString());
            lblPartyName.setText(ObjFeltReopenBale.getAttribute("PARTY_NAME").getString());
            
//======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            hmList=clsFeltProductionApprovalFlow.getDocumentFlow(762, ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmList.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsFeltTransporterWeigthEntryForm.getHistoryList(ObjFeltReopenBale.getAttribute("DOC_DATE").getString(), DOCNO);
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsFeltTransporterWeigthEntryForm ObjFeltReopenBale=(clsFeltTransporterWeigthEntryForm)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[6];
                
                rowData[0]=Integer.toString((int)ObjFeltReopenBale.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(2, (int)ObjFeltReopenBale.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate(ObjFeltReopenBale.getAttribute("ENTRY_DATE").getString().substring(0, 10))+" "+ObjFeltReopenBale.getAttribute("ENTRY_DATE").getString().substring(11);
                //rowData[2]=ObjFeltReopenBale.getAttribute("ENTRY_DATE").getString().substring(0, 10);
                
                String ApprovalStatus="";
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjFeltReopenBale.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjFeltReopenBale.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltReopenBale.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=762 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=762 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    private void SetupApproval() {
        OpgHold.setSelected(true);
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(762,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(762,FromUserID,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(762, ObjFeltReopenBale.getAttribute("DOC_NO").getString()) ){
                OpgReject.setEnabled(false);
            }
        }
        
        if(EditMode==0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6086,60861)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6086,60862)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6086,60863)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6086,60864)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
//        if(!EITLERPGLOBAL.YearIsOpen) {
//            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction","ERROR",JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        //----------------------------------//
        EITLERP.SelectFirstFree aList=new EITLERP.SelectFirstFree();
        aList.ModuleID=762;
        aList.FirstFreeNo=225;
        FFNo = aList.FirstFreeNo;
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FFNo=aList.FirstFreeNo;
        SetupApproval();
        txtdocno.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 762, FFNo,  false));
        lblTitle.setText("TRANSPORTER WEIGHT ENTRY FORM - "+txtdocno.getText());
        lblTitle.setBackground(Color.GRAY);
        
  }
    
    private void Edit() {
        if(ObjFeltReopenBale.IsEditable(txtdocno.getText(), ObjFeltReopenBale.getAttribute("DOC_DATE").getString(), EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
//            txtbaleno.setEditable(false);
//            txtBoxSize.setEditable(false);
//            txtGrossWeight.setEditable(false);
            if(clsFeltProductionApprovalFlow.IsCreator(762,ObjFeltReopenBale.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            }else {
                EnableApproval();
            }
        }else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//
    }
    
    private void Save() {
       
       SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltReopenBale.Insert()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFeltReopenBale.Update()) {

                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving editing. Error is "+ObjFeltReopenBale.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        txtToRemarks.setText("");
        EnableToolbar();
        SetMenuForRights();
        try {
            if(PENDING_DOCUMENT){
                frmPA.RefreshView();
                PENDING_DOCUMENT=false;
            }
        }catch(Exception e){e.printStackTrace();}
    }
    
    //Sets data to the Details Class Object
    private void SetData() {
        
        ObjFeltReopenBale.setAttribute("FFNO",FFNo);
        ObjFeltReopenBale.setAttribute("DOC_NO",txtdocno.getText());
        ObjFeltReopenBale.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtDocdate.getText()));
        ObjFeltReopenBale.setAttribute("BALE_NO",txtbaleno.getText());
        ObjFeltReopenBale.setAttribute("BALE_DATE", EITLERPGLOBAL.formatDateDB(txtBaleDate.getText()));
//        ObjFeltReopenBale.setAttribute("INVOICE_NO",txtInvoiceNo.getText());
//        ObjFeltReopenBale.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
        ObjFeltReopenBale.setAttribute("BOX_SIZE",txtBoxSize.getText());
        try{
        ObjFeltReopenBale.setAttribute("GROSS_WEIGHT",Float.parseFloat(txtGrossWeight.getText()));
        }catch(Exception e){}
        ObjFeltReopenBale.setAttribute("CART_RATE",txtCartRate.getText());
        ObjFeltReopenBale.setAttribute("PARTY_CODE",txtPartyCode.getText());
        ObjFeltReopenBale.setAttribute("PARTY_NAME",lblPartyName.getText());
        
        //-------- Update Approval Specific Fields -----------//
        ObjFeltReopenBale.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltReopenBale.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFeltReopenBale.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltReopenBale.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim());
        ObjFeltReopenBale.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if(OpgApprove.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","R");
            ObjFeltReopenBale.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFeltReopenBale.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFeltReopenBale.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
        }else {
            ObjFeltReopenBale.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
        
        
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltReopenBale.Filter("DOC_NO='"+docNo+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find all pending document
    public void FindWaiting() {
        ObjFeltReopenBale.Filter("DOC_NO IN (SELECT H.DOC_NO FROM PRODUCTION.FELT_TRANSPORTER_WEIGHT H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=762 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID, String pGroupId) {
        ObjFeltReopenBale.Filter(" DOC_NO='" + pGroupId + "'");
        ObjFeltReopenBale.MoveFirst();
        DisplayData();
    }
    private void MoveFirst() {
        ObjFeltReopenBale.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFeltReopenBale.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFeltReopenBale.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFeltReopenBale.MoveLast();
        DisplayData();
    }
    
    private void EnableApproval() {
        
        txtdocno.setEnabled(true);
        txtDocdate.setEnabled(true);
        txtbaleno.setEnabled(true);
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= clsFeltProductionApprovalFlow.getRemainingUsers(762,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(762, ObjFeltReopenBale.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(762, ObjFeltReopenBale.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(762,ObjFeltReopenBale.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
   
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
        
        TableColumnModel tcm= TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
        
        TableColumnModel tcm= TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }
  
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.FeltSales.FeltProcessInvoiceVariable.frmFindFeltProcessInvoiceVariable",true);
        frmFindTransporterWeigthEntryForm ObjFindFeltPacking= (frmFindTransporterWeigthEntryForm)ObjLoader.getObj();
        
        if(ObjFindFeltPacking.Cancelled==false) {
            if(!ObjFeltReopenBale.Filter(ObjFindFeltPacking.stringFindQuery)) {
                //JOptionPane.showMessageDialog(frmFindTransporterWeigthEntryForm.this," No records found.","Find Invoice Process Control Parameter Modification Details  Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }
    
 private void Report() {
        
        try {
            
            
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            
            objReportData.AddColumn("DOC_NO");
            objReportData.AddColumn("DOC_DATE");
            objReportData.AddColumn("BALE_NO");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("CHARGE_CODE_NEW");
            objReportData.AddColumn("CRITICAL_LIMIT_NEW");
            objReportData.AddColumn("TRANSPORTER_CODE");
            objReportData.AddColumn("INSURANCE_CODE");
            
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
            objOpeningRow.setValue("DOC_NO","");
            objOpeningRow.setValue("DOC_DATE","");
            objOpeningRow.setValue("BALE_NO","");
            objOpeningRow.setValue("PARTY_CODE","");
            objOpeningRow.setValue("CHARGE_CODE_NEW","");
            objOpeningRow.setValue("CRITICAL_LIMIT_NEW","");
            objOpeningRow.setValue("TRANSPORTER_CODE","");
            objOpeningRow.setValue("INSURANCE_CODE","");
            
            String strSQL="SELECT * FROM PRODUCTION.FELT_TRANSPORTER_WEIGHT WHERE DOC_NO='"+txtdocno.getText().trim()+"' AND APPROVED=1";
            
            System.out.println(strSQL);
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("DOC_NO",UtilFunctions.getString(rsTmp,"DOC_NO",""));
                    objRow.setValue("DOC_DATE",UtilFunctions.getString(rsTmp,"DOC_DATE",""));
                    objRow.setValue("BALE_NO",UtilFunctions.getString(rsTmp,"BALE_NO",""));
                    objRow.setValue("PARTY_CODE",UtilFunctions.getString(rsTmp,"PARTY_CODE",""));
                    objRow.setValue("CHARGE_CODE_NEW",UtilFunctions.getString(rsTmp,"CHARGE_CODE_NEW",""));
                    objRow.setValue("CRITICAL_LIMIT_NEW",UtilFunctions.getString(rsTmp,"CRITICAL_LIMIT_NEW",""));
                    objRow.setValue("TRANSPORTER_CODE",UtilFunctions.getString(rsTmp,"TRANSPORTER_CODE",""));
                    objRow.setValue("INSURANCE_CODE",UtilFunctions.getString(rsTmp,"INSURANCE_CODE",""));
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            
            HashMap Parameters=new HashMap();
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate()+" "+EITLERPGLOBAL.getCurrentTime());
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptInvoiceParameter.rpt",Parameters,objReportData);
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
}
