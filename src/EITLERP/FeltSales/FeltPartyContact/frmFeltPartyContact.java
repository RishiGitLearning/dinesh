/*
 * frmFeltRateMaster.java
 *
 * Created on September 3, 2013, 5:10 PM
 */
package EITLERP.FeltSales.FeltPartyContact;

/**
 *
 * @author Vivek Kumar
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.awt.Color;
import java.util.HashMap;
import javax.swing.table.TableColumnModel;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.EITLComboModel;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.ReportRegister;
import EITLERP.SelectFirstFree;
import EITLERP.clsSales_Party;
import EITLERP.data;
import TReportWriter.*;
import TReportWriter.TReportEngine;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class frmFeltPartyContact extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private TReportEngine objEngine = new TReportEngine();

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbZoneModel;
    private EITLComboModel cmbDeliveryModeModel;
    
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel = new EITLTableModel();

    private clsFeltPartyContact ObjFeltPartyContact;
    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltRateMaster
     */
    public void init() {
        System.gc();
        setSize(720, 580);
        initComponents();
        lblTitle.setForeground(Color.WHITE);

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjFeltPartyContact = new clsFeltPartyContact();
        GenerateZoneCombo();

        GenerateHierarchyCombo();
        GenerateSendToCombo();

        if (ObjFeltPartyContact.LoadData()) {
            ObjFeltPartyContact.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while loading data. Error is " + ObjFeltPartyContact.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        SetMenuForRights();

        SetFields(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        cmdNext2 = new javax.swing.JButton();
        lblRevNo1 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField(7);
        txtShowRemark = new javax.swing.JButton();
        jLabel = new javax.swing.JLabel();
        txtPartyCode = new EITLERP.Production.SDMLTextField(6,"Press F1");
        lblPartyName = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbZone = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        txtCorrAdd = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblTransID = new javax.swing.JLabel();
        txtTranID = new javax.swing.JTextField();
        txtTranName = new javax.swing.JTextField();
        txtShowAddress = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtEmail2 = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtEmail3 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtContactPerson = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        txtContactPerson3 = new javax.swing.JTextField();
        txtContactPerson2 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtDesignation = new javax.swing.JTextField();
        txtDesignation2 = new javax.swing.JTextField();
        txtDesignation3 = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtMobile = new javax.swing.JTextField();
        txtMobile2 = new javax.swing.JTextField();
        txtMobile3 = new javax.swing.JTextField();
        txtAreaInchargeCode = new EITLERP.Production.SDMLTextField(6,"Press F1");
        txtAreaInchargeName = new javax.swing.JTextField();
        lblTransID1 = new javax.swing.JLabel();
        cmbDeliveryMode = new javax.swing.JComboBox();
        lblTransID2 = new javax.swing.JLabel();
        txtPincode = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        cmdBackToTab1 = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.setEnabled(false);
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.setEnabled(false);
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 710, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("FELT PARTY CONTACT DETAIL - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 710, 25);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.setLayout(null);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Document No.");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab3.add(jLabel17);
        jLabel17.setBounds(10, 10, 110, 20);

        txtDocNo.setEditable(false);
        txtDocNo.setBackground(new java.awt.Color(255, 255, 255));
        txtDocNo.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        Tab3.add(txtDocNo);
        txtDocNo.setBounds(120, 10, 140, 20);

        cmdNext2.setMnemonic('X');
        cmdNext2.setText("Next >>");
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });
        Tab3.add(cmdNext2);
        cmdNext2.setBounds(590, 380, 102, 25);

        lblRevNo1.setText("...");
        Tab3.add(lblRevNo1);
        lblRevNo1.setBounds(260, 10, 20, 18);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("Remarks");
        jLabel29.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab3.add(jLabel29);
        jLabel29.setBounds(10, 380, 80, 20);

        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab3.add(txtRemarks);
        txtRemarks.setBounds(90, 380, 460, 20);

        jLabel49.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel49.setText("Doc Date.");
        jLabel49.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab3.add(jLabel49);
        jLabel49.setBounds(310, 10, 70, 20);

        txtDocDate.setEditable(false);
        txtDocDate.setBackground(new java.awt.Color(255, 255, 255));
        txtDocDate.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDocDateFocusLost(evt);
            }
        });
        Tab3.add(txtDocDate);
        txtDocDate.setBounds(390, 10, 110, 20);

        txtShowRemark.setText("Show");
        txtShowRemark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowRemarkActionPerformed(evt);
            }
        });
        Tab3.add(txtShowRemark);
        txtShowRemark.setBounds(550, 380, 30, 20);

        jLabel.setText("Party Code");
        Tab3.add(jLabel);
        jLabel.setBounds(10, 40, 90, 20);

        txtPartyCode.setEditable(false);
        txtPartyCode.setBackground(new java.awt.Color(255, 255, 255));
        txtPartyCode.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPartyCode.setToolTipText("Enter Party Code and Press TAB Key");
        txtPartyCode.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        Tab3.add(txtPartyCode);
        txtPartyCode.setBounds(100, 40, 90, 20);

        lblPartyName.setBackground(new java.awt.Color(204, 204, 204));
        lblPartyName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblPartyName.setOpaque(true);
        Tab3.add(lblPartyName);
        lblPartyName.setBounds(200, 40, 450, 20);

        jLabel6.setText("Incharge");
        jLabel6.setToolTipText("Incharge");
        Tab3.add(jLabel6);
        jLabel6.setBounds(280, 140, 70, 20);

        jLabel7.setText("Zone");
        jLabel7.setToolTipText("Zone");
        Tab3.add(jLabel7);
        jLabel7.setBounds(10, 140, 37, 20);

        cmbZone.setEditable(true);
        cmbZone.setToolTipText("Party Zone");
        cmbZone.setEnabled(false);
        cmbZone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbZoneItemStateChanged(evt);
            }
        });
        Tab3.add(cmbZone);
        cmbZone.setBounds(60, 140, 180, 24);

        jLabel38.setText("Corres. Address :");
        jLabel38.setToolTipText("Correspondence Address");
        Tab3.add(jLabel38);
        jLabel38.setBounds(10, 80, 110, 20);

        txtCorrAdd.setToolTipText("Correspondence Address");
        txtCorrAdd.setEnabled(false);
        txtCorrAdd.setName("ADD2"); // NOI18N
        Tab3.add(txtCorrAdd);
        txtCorrAdd.setBounds(130, 80, 520, 20);

        jLabel12.setText("Phone/LandLine No :");
        jLabel12.setToolTipText("Phone / LandLine No");
        Tab3.add(jLabel12);
        jLabel12.setBounds(10, 110, 150, 20);

        txtPhone.setEnabled(false);
        txtPhone.setName("PHONE_O"); // NOI18N
        Tab3.add(txtPhone);
        txtPhone.setBounds(170, 110, 240, 20);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.add(jPanel4);

        Tab3.add(jPanel3);
        jPanel3.setBounds(10, 370, 684, 4);

        lblTransID.setText("Pin Code : ");
        lblTransID.setToolTipText("Transporter");
        Tab3.add(lblTransID);
        lblTransID.setBounds(430, 110, 80, 20);

        txtTranID.setEnabled(false);
        txtTranID.setName("BANK_ID"); // NOI18N
        txtTranID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTranIDFocusLost(evt);
            }
        });
        txtTranID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTranIDKeyPressed(evt);
            }
        });
        Tab3.add(txtTranID);
        txtTranID.setBounds(110, 170, 80, 20);

        txtTranName.setEditable(false);
        txtTranName.setBackground(new java.awt.Color(255, 255, 255));
        txtTranName.setEnabled(false);
        txtTranName.setName("BANK_NAME"); // NOI18N
        Tab3.add(txtTranName);
        txtTranName.setBounds(200, 170, 430, 20);

        txtShowAddress.setText("Show");
        txtShowAddress.setToolTipText("Show Address");
        txtShowAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowAddressActionPerformed(evt);
            }
        });
        Tab3.add(txtShowAddress);
        txtShowAddress.setBounds(650, 80, 30, 20);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel7.setBackground(new java.awt.Color(153, 153, 153));
        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.add(jPanel7);

        Tab3.add(jPanel5);
        jPanel5.setBounds(10, 70, 684, 4);

        jPanel8.setBackground(new java.awt.Color(153, 153, 153));
        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel9.setBackground(new java.awt.Color(153, 153, 153));
        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel8.add(jPanel9);

        Tab3.add(jPanel8);
        jPanel8.setBounds(10, 230, 684, 4);

        jLabel56.setText("E-Mail ID :");
        Tab3.add(jLabel56);
        jLabel56.setBounds(490, 240, 110, 15);

        txtEmail.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtEmail.setEnabled(false);
        txtEmail.setName("EMAIL_ADD"); // NOI18N
        Tab3.add(txtEmail);
        txtEmail.setBounds(490, 260, 210, 20);

        txtEmail2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtEmail2.setEnabled(false);
        txtEmail2.setName("EMAIL_ADD"); // NOI18N
        Tab3.add(txtEmail2);
        txtEmail2.setBounds(490, 290, 210, 20);

        jLabel57.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel57.setText("2 ");
        Tab3.add(jLabel57);
        jLabel57.setBounds(10, 290, 20, 20);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("3 ");
        Tab3.add(jLabel15);
        jLabel15.setBounds(10, 320, 20, 20);

        txtEmail3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtEmail3.setEnabled(false);
        txtEmail3.setName("EMAIL_ADD"); // NOI18N
        Tab3.add(txtEmail3);
        txtEmail3.setBounds(490, 320, 210, 20);

        jLabel30.setText("Contact Person :");
        Tab3.add(jLabel30);
        jLabel30.setBounds(30, 240, 170, 15);

        txtContactPerson.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtContactPerson.setEnabled(false);
        txtContactPerson.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtContactPerson);
        txtContactPerson.setBounds(30, 260, 180, 20);

        jLabel58.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel58.setText("1 ");
        Tab3.add(jLabel58);
        jLabel58.setBounds(10, 260, 20, 20);

        txtContactPerson3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtContactPerson3.setEnabled(false);
        txtContactPerson3.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtContactPerson3);
        txtContactPerson3.setBounds(30, 320, 180, 20);

        txtContactPerson2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtContactPerson2.setEnabled(false);
        txtContactPerson2.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtContactPerson2);
        txtContactPerson2.setBounds(30, 290, 180, 20);

        jLabel37.setText("Designation :");
        Tab3.add(jLabel37);
        jLabel37.setBounds(210, 240, 130, 15);

        txtDesignation.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtDesignation.setEnabled(false);
        txtDesignation.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtDesignation);
        txtDesignation.setBounds(210, 260, 140, 20);

        txtDesignation2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtDesignation2.setEnabled(false);
        txtDesignation2.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtDesignation2);
        txtDesignation2.setBounds(210, 290, 140, 20);

        txtDesignation3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtDesignation3.setEnabled(false);
        txtDesignation3.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtDesignation3);
        txtDesignation3.setBounds(210, 320, 140, 20);

        jLabel39.setText("Mobile :");
        Tab3.add(jLabel39);
        jLabel39.setBounds(350, 240, 130, 15);

        txtMobile.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtMobile.setEnabled(false);
        txtMobile.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtMobile);
        txtMobile.setBounds(350, 260, 140, 20);

        txtMobile2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtMobile2.setEnabled(false);
        txtMobile2.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtMobile2);
        txtMobile2.setBounds(350, 290, 140, 20);

        txtMobile3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        txtMobile3.setEnabled(false);
        txtMobile3.setName("CONTACT_PERSON_1"); // NOI18N
        Tab3.add(txtMobile3);
        txtMobile3.setBounds(350, 320, 140, 20);

        txtAreaInchargeCode.setEnabled(false);
        txtAreaInchargeCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaInchargeCodeKeyPressed(evt);
            }
        });
        Tab3.add(txtAreaInchargeCode);
        txtAreaInchargeCode.setBounds(350, 140, 50, 20);

        txtAreaInchargeName.setEnabled(false);
        Tab3.add(txtAreaInchargeName);
        txtAreaInchargeName.setBounds(410, 140, 220, 20);

        lblTransID1.setText("Transporter :");
        lblTransID1.setToolTipText("Transporter");
        Tab3.add(lblTransID1);
        lblTransID1.setBounds(10, 170, 100, 20);

        cmbDeliveryMode.setEditable(true);
        cmbDeliveryMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Delivery Mode", "Godown Delivery", "Door Delivery" }));
        cmbDeliveryMode.setEnabled(false);
        Tab3.add(cmbDeliveryMode);
        cmbDeliveryMode.setBounds(130, 200, 230, 24);

        lblTransID2.setText("Delivery Mode : ");
        lblTransID2.setToolTipText("Transporter");
        Tab3.add(lblTransID2);
        lblTransID2.setBounds(10, 200, 120, 20);

        txtPincode.setEnabled(false);
        txtPincode.setName("PHONE_O"); // NOI18N
        Tab3.add(txtPincode);
        txtPincode.setBounds(510, 110, 120, 20);

        Tab.addTab("Details", Tab3);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(440, 370, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(560, 370, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 30, 680, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(10, 190, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 560, 190);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(580, 210, 110, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(580, 240, 110, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(580, 280, 110, 24);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(580, 370, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 66, 710, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 710, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltPartyContact.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
        if (ObjFeltPartyContact.LoadData()) {
            ObjFeltPartyContact.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        ObjFeltPartyContact.HistoryView = false;
        ObjFeltPartyContact.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        ObjFeltPartyContact.ShowHistory(txtDocNo.getText().trim());
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void txtDocDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocDateFocusLost

    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocDateFocusGained

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        lblStatus.setText("Enter Remarks");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext2ActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
//        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void txtShowRemarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowRemarkActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(this, txtRemarks.getText());
        JTextArea ta = new JTextArea(10, 20);
        ta.setEditable(false);
        ta.setText(txtRemarks.getText());
        ta.setSize(600, 100);
        ta.setLineWrap(true);
        JScrollPane msgPane = new JScrollPane(ta);
        msgPane.setSize(600, 100);
        JOptionPane.showMessageDialog(this, msgPane, "Remark", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_txtShowRemarkActionPerformed

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
//        String partyCode = txtPartyCode.getText().trim();
//        if (partyCode.length() <= 6 && partyCode.length() >= 3) {
//            if (ObjFeltPartyContact.checkPartyCode(partyCode)) {
//                DisplayPartyDetail(partyCode);
//            } else {
//                JOptionPane.showMessageDialog(this, "Party doesn't Exist.", "ERROR", JOptionPane.ERROR_MESSAGE);
//            }
//        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        try {
            if (evt.getKeyCode() == 112) { //F1 Key pressed
                LOV aList = new LOV();
                aList.SQL = "SELECT PARTY_CODE, PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND COALESCE(PARTY_CLOSE_IND,0)=0 AND PARTY_CODE NOT IN (SELECT PARTY_CODE FROM PRODUCTION.FELT_PARTY_EXTRA_CONTACT_DETAIL WHERE APPROVED=0 AND CANCELED=0) ";
                aList.ReturnCol = 1;
                //aList.SecondCol=2; //to get Second Value
                //aList.ShowReturnCol=true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    txtPartyCode.setText(aList.ReturnVal);
                    DisplayPartyDetail(aList.ReturnVal);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed

    private void txtTranIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTranIDFocusLost
        // TODO add your handling code here:
        if (!txtTranID.getText().trim().equals("")) {
            txtTranName.setText(clsSales_Party.getTransporterName((long) EITLERPGLOBAL.gCompanyID, Long.parseLong(txtTranID.getText().trim())));
        }
        txtContactPerson.requestFocus();
    }//GEN-LAST:event_txtTranIDFocusLost

    private void txtTranIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTranIDKeyPressed
        // TODO add your handling code here:
        //=========== Transporter List ===============
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT TRANSPORTER_ID,TRANSPORTER_NAME FROM D_SAL_TRANSPORTER_MASTER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " ORDER BY TRANSPORTER_NAME";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtTranID.setText(aList.ReturnVal);
                txtTranName.setText(clsSales_Party.getTransporterName((long) EITLERPGLOBAL.gCompanyID, Long.parseLong(aList.ReturnVal)));
            }
        }
    }//GEN-LAST:event_txtTranIDKeyPressed

    private void txtShowAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowAddressActionPerformed
        // TODO add your handling code here:
        JTextArea ta = new JTextArea(10, 20);
        ta.setEditable(false);
        ta.setText(txtCorrAdd.getText());
        ta.setSize(600, 100);
        ta.setLineWrap(true);
        JScrollPane msgPane = new JScrollPane(ta);
        msgPane.setSize(600, 100);
        JOptionPane.showMessageDialog(this, msgPane, "Address", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_txtShowAddressActionPerformed

    private void txtAreaInchargeCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaInchargeCodeKeyPressed
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();

            if (cmbZone.getSelectedItem().toString().equals("OTHER")) {
                aList.SQL="SELECT INCHARGE_CD, INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE WHERE INCHARGE_CD IN (1,2,3,8) ";
            } else {
                aList.SQL="SELECT INCHARGE_CD, INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE WHERE INCHARGE_CD NOT IN (1,2,3,8) ";
            }
            //            aList.SQL="SELECT INCHARGE_CD, INCHARGE_NAME FROM PRODUCTION.FELT_INCHARGE";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;

            if(aList.ShowLOV()) {
                txtAreaInchargeCode.setText(aList.ReturnVal);
                txtAreaInchargeName.setText(clsSales_Party.getFeltInchargeName(Long.parseLong(aList.ReturnVal)));
            }
        }
    }//GEN-LAST:event_txtAreaInchargeCodeKeyPressed

    private void cmbZoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbZoneItemStateChanged
        // TODO add your handling code here:
        txtAreaInchargeCode.setText("");
        txtAreaInchargeName.setText("");
    }//GEN-LAST:event_cmbZoneItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDeliveryMode;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbZone;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTransID;
    private javax.swing.JLabel lblTransID1;
    private javax.swing.JLabel lblTransID2;
    private javax.swing.JTextField txtAreaInchargeCode;
    private javax.swing.JTextField txtAreaInchargeName;
    private javax.swing.JTextField txtContactPerson;
    private javax.swing.JTextField txtContactPerson2;
    private javax.swing.JTextField txtContactPerson3;
    private javax.swing.JTextField txtCorrAdd;
    private javax.swing.JTextField txtDesignation;
    private javax.swing.JTextField txtDesignation2;
    private javax.swing.JTextField txtDesignation3;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmail2;
    private javax.swing.JTextField txtEmail3;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtMobile2;
    private javax.swing.JTextField txtMobile3;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtPincode;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JButton txtShowAddress;
    private javax.swing.JButton txtShowRemark;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTranID;
    private javax.swing.JTextField txtTranName;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtDocNo.setEnabled(false);
        txtDocDate.setEnabled(false);

        txtPartyCode.setEnabled(false);
        lblPartyName.setEnabled(false);

        txtCorrAdd.setEnabled(pStat);
        txtPhone.setEnabled(pStat);
        txtPincode.setEnabled(pStat);

        txtAreaInchargeCode.setEnabled(pStat);
        txtAreaInchargeName.setEnabled(false);
        
        cmbZone.setEnabled(pStat);
        cmbDeliveryMode.setEnabled(pStat);

        txtTranID.setEnabled(pStat);
        txtTranName.setEnabled(false);

        txtContactPerson.setEnabled(pStat);
        txtDesignation.setEnabled(pStat);
        txtMobile.setEnabled(pStat);
        txtEmail.setEnabled(pStat);

        txtContactPerson2.setEnabled(pStat);
        txtDesignation2.setEnabled(pStat);
        txtMobile2.setEnabled(pStat);
        txtEmail2.setEnabled(pStat);

        txtContactPerson3.setEnabled(pStat);
        txtDesignation3.setEnabled(pStat);
        txtMobile3.setEnabled(pStat);
        txtEmail3.setEnabled(pStat);

        txtRemarks.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();

    }

    private void ClearFields() {

        txtDocNo.setText("");
        txtDocDate.setText("");

        txtPartyCode.setText("");
        lblPartyName.setText("");
        txtCorrAdd.setText("");
        txtPhone.setText("");
        txtPincode.setText("");
        cmbZone.setSelectedIndex(0);
        cmbDeliveryMode.setSelectedIndex(0);
        txtAreaInchargeCode.setText("");
        txtAreaInchargeName.setText("");
        txtTranID.setText("");
        txtTranName.setText("");

        txtContactPerson.setText("");
        txtDesignation.setText("");
        txtMobile.setText("");
        txtEmail.setText("");

        txtContactPerson2.setText("");
        txtDesignation2.setText("");
        txtMobile2.setText("");
        txtEmail2.setText("");

        txtContactPerson3.setText("");
        txtDesignation3.setText("");
        txtMobile3.setText("");
        txtEmail3.setText("");
        txtRemarks.setText("");

        txtFromRemarks.setText("");
        txtToRemarks.setText("");

        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Didplay data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = 634;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        try {
            //=========== Title Bar Color Indication ===============//
            if (EditMode == 0) {
                if (ObjFeltPartyContact.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltPartyContact.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            ClearFields();

            lblTitle.setText("FELT PARTY CONTACT DETAIL - " + ObjFeltPartyContact.getAttribute("DOC_NO").getString());
            lblRevNo1.setText(Integer.toString((int) ObjFeltPartyContact.getAttribute("REVISION_NO").getVal()));
            txtDocNo.setText(ObjFeltPartyContact.getAttribute("DOC_NO").getString());
            txtDocDate.setText(EITLERPGLOBAL.formatDate(ObjFeltPartyContact.getAttribute("DOC_DATE").getString()));

            txtPartyCode.setText(ObjFeltPartyContact.getAttribute("PARTY_CODE").getString());
            lblPartyName.setText(ObjFeltPartyContact.getAttribute("PARTY_NAME").getString());

            txtCorrAdd.setText(ObjFeltPartyContact.getAttribute("CORR_ADDRESS").getString());
            txtPhone.setText(ObjFeltPartyContact.getAttribute("PHONE_NO").getString());
            txtPincode.setText(ObjFeltPartyContact.getAttribute("PIN_CODE").getString());
            EITLERPGLOBAL.setComboIndex(cmbZone, ObjFeltPartyContact.getAttribute("ZONE").getString());
            txtAreaInchargeCode.setText(ObjFeltPartyContact.getAttribute("INCHARGE_CD").getString());
            txtAreaInchargeName.setText(ObjFeltPartyContact.getAttribute("INCHARGE_NAME").getString());
            txtTranID.setText(ObjFeltPartyContact.getAttribute("TRANSPORTER_ID").getString());
            txtTranName.setText(ObjFeltPartyContact.getAttribute("TRANSPORTER_NAME").getString());
            cmbDeliveryMode.setSelectedItem(ObjFeltPartyContact.getAttribute("DELIVERY_MODE").getString());

            txtContactPerson.setText(ObjFeltPartyContact.getAttribute("CONTACT_PERSON").getString());
            txtDesignation.setText(ObjFeltPartyContact.getAttribute("CONT_PERS_DESIGNATION").getString());
            txtMobile.setText(ObjFeltPartyContact.getAttribute("MOBILE_NO").getString());
            txtEmail.setText(ObjFeltPartyContact.getAttribute("EMAIL").getString());

            txtContactPerson2.setText(ObjFeltPartyContact.getAttribute("CONTACT_PERSON_2").getString());
            txtDesignation2.setText(ObjFeltPartyContact.getAttribute("CONT_PERS_DESIGNATION_2").getString());
            txtMobile2.setText(ObjFeltPartyContact.getAttribute("MOBILE_NO_2").getString());
            txtEmail2.setText(ObjFeltPartyContact.getAttribute("EMAIL_ID2").getString());

            txtContactPerson3.setText(ObjFeltPartyContact.getAttribute("CONTACT_PERSON_3").getString());
            txtDesignation3.setText(ObjFeltPartyContact.getAttribute("CONT_PERS_DESIGNATION_3").getString());
            txtMobile3.setText(ObjFeltPartyContact.getAttribute("MOBILE_NO_3").getString());
            txtEmail3.setText(ObjFeltPartyContact.getAttribute("EMAIL_ID3").getString());

            txtRemarks.setText(ObjFeltPartyContact.getAttribute("REMARKS").getString());

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltPartyContact.getAttribute("HIERARCHY_ID").getVal());

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString());
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltPartyContact.getHistoryList(EITLERPGLOBAL.gCompanyID, ObjFeltPartyContact.getAttribute("DOC_NO").getString());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltPartyContact ObjFeltPartyContact = (clsFeltPartyContact) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltPartyContact.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltPartyContact.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltPartyContact.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltPartyContact.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltPartyContact.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltPartyContact.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Class Object
    private void SetData() {
        ObjFeltPartyContact.setAttribute("DOC_NO", txtDocNo.getText().trim());
        ObjFeltPartyContact.setAttribute("DOC_DATE", txtDocDate.getText().trim());
        ObjFeltPartyContact.setAttribute("PARTY_CODE", txtPartyCode.getText().trim());
        ObjFeltPartyContact.setAttribute("PARTY_NAME", lblPartyName.getText().trim().toUpperCase());
        ObjFeltPartyContact.setAttribute("CORR_ADDRESS", txtCorrAdd.getText().trim().toUpperCase());
        ObjFeltPartyContact.setAttribute("PHONE_NO", txtPhone.getText().trim());
        ObjFeltPartyContact.setAttribute("PIN_CODE", txtPincode.getText().trim());
//        ObjFeltPartyContact.setAttribute("ZONE", EITLERPGLOBAL.getCombostrCode(cmbZone));
        String pAreaCode=EITLERPGLOBAL.getCombostrCode(cmbZone);
        String pPartyCode=txtPartyCode.getText().substring(0, 3);
        String pArea = data.getStringValueFromDB("SELECT PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='FELT_AREA_CODE' AND PARA_EXT1 LIKE '%"+pPartyCode+"%' ");
        if (pAreaCode.equals("OTHER") && !pArea.equals("")) {
            ObjFeltPartyContact.setAttribute("ZONE",pArea);
        } else {
            ObjFeltPartyContact.setAttribute("ZONE",EITLERPGLOBAL.getCombostrCode(cmbZone));
        }
        ObjFeltPartyContact.setAttribute("INCHARGE_CD",txtAreaInchargeCode.getText());
        ObjFeltPartyContact.setAttribute("INCHARGE_NAME",txtAreaInchargeName.getText());
        ObjFeltPartyContact.setAttribute("TRANSPORTER_ID", txtTranID.getText().trim());
        ObjFeltPartyContact.setAttribute("TRANSPORTER_NAME", txtTranName.getText().trim());
        ObjFeltPartyContact.setAttribute("DELIVERY_MODE", cmbDeliveryMode.getSelectedItem().toString().trim());

        ObjFeltPartyContact.setAttribute("CONTACT_PERSON", txtContactPerson.getText().trim());
        ObjFeltPartyContact.setAttribute("CONT_PERS_DESIGNATION", txtDesignation.getText().trim());
        ObjFeltPartyContact.setAttribute("MOBILE_NO", txtMobile.getText().trim());
        ObjFeltPartyContact.setAttribute("EMAIL", txtEmail.getText().trim());

        ObjFeltPartyContact.setAttribute("CONTACT_PERSON_2", txtContactPerson2.getText().trim());
        ObjFeltPartyContact.setAttribute("CONT_PERS_DESIGNATION_2", txtDesignation2.getText().trim());
        ObjFeltPartyContact.setAttribute("MOBILE_NO_2", txtMobile2.getText().trim());
        ObjFeltPartyContact.setAttribute("EMAIL_ID2", txtEmail2.getText().trim());

        ObjFeltPartyContact.setAttribute("CONTACT_PERSON_3", txtContactPerson3.getText().trim());
        ObjFeltPartyContact.setAttribute("CONT_PERS_DESIGNATION_3", txtDesignation3.getText().trim());
        ObjFeltPartyContact.setAttribute("MOBILE_NO_3", txtMobile3.getText().trim());
        ObjFeltPartyContact.setAttribute("EMAIL_ID3", txtEmail3.getText().trim());

        ObjFeltPartyContact.setAttribute("REMARKS", txtRemarks.getText().trim().toUpperCase());

        //----- Update Approval Specific Fields -----------//
        ObjFeltPartyContact.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltPartyContact.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltPartyContact.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltPartyContact.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim().toUpperCase());
        ObjFeltPartyContact.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        if (OpgApprove.isSelected()) {
            ObjFeltPartyContact.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltPartyContact.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltPartyContact.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltPartyContact.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltPartyContact.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltPartyContact.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltPartyContact.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjFeltPartyContact.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltPartyContact.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/
        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(634, FromUserID, ObjFeltPartyContact.getAttribute("DOC_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6259, 62591)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6259, 62592)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6259, 62593)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6259, 62595)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 634;
        aList.FirstFreeNo = 340;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtDocNo.setText(clsFeltPartyContact.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 634, FFNo, false));
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("FELT PARTY CONTACT DETAIL - " + txtDocNo.getText());
        lblTitle.setBackground(Color.GRAY);
        txtPartyCode.setEnabled(true);
    }

    private void Edit() {
        String lDocNo = ObjFeltPartyContact.getAttribute("DOC_NO").getString();
        if (ObjFeltPartyContact.IsEditable(lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (clsFeltProductionApprovalFlow.IsCreator(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            DisableToolbar();
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        //Form level validations
        if (txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Party Code.");
            return;
        }
        
        if (txtAreaInchargeCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Area Incharge Code.");
            return;
        }

        if (txtRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Remarks.");
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the Hierarchy.");
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.");
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection");
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send");
            return;
        }

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltPartyContact.Insert()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + ObjFeltPartyContact.LastError);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltPartyContact.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving Editing. Error is " + ObjFeltPartyContact.LastError);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltPartyContact.frmFindFeltPartyContact", true);
        frmFindFeltPartyContact ObjFindFeltQltRate = (frmFindFeltPartyContact) ObjLoader.getObj();

        if (ObjFindFeltQltRate.Cancelled == false) {
            if (!ObjFeltPartyContact.Filter(ObjFindFeltQltRate.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Felt Quality Rate", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find rate update by doc no
    public void Find(String docNo) {
        ObjFeltPartyContact.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltPartyContact.Filter(" DOC_NO IN (SELECT PRODUCTION.FELT_PARTY_EXTRA_CONTACT_DETAIL.DOC_NO FROM PRODUCTION.FELT_PARTY_EXTRA_CONTACT_DETAIL,PRODUCTION.FELT_PROD_DOC_DATA WHERE PRODUCTION.FELT_PARTY_EXTRA_CONTACT_DETAIL.DOC_NO=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND PRODUCTION.FELT_PROD_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W' AND MODULE_ID=" + 634 + ")");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltPartyContact.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltPartyContact.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltPartyContact.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltPartyContact.MoveLast();
        DisplayData();
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

//        //========== Setting Up Header Fields ================//
//        String FieldName = "";
//        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);
//
//        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
//            if (Tab1.getComponent(i).getName() != null) {
//                FieldName = Tab1.getComponent(i).getName();
//                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
//                    Tab1.getComponent(i).setEnabled(true);
//                }
//            }
//        }
//        //=============== Header Fields Setup Complete =================//
//
//        //=============== Setting Table Fields ==================//
//        DataModel.ClearAllReadOnly();
//        for (int i = 0; i < Table.getColumnCount(); i++) {
//            FieldName = DataModel.getVariable(i);
//
//            if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
//                //Do Nothing
//            } else {
//                DataModel.SetReadOnly(i);
//            }
//        }
//        //=======================================================//
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=634 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=634 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = ObjHierarchy.getAttribute("HIERARCHY_NAME").getString();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = ObjUser.getAttribute("USER_NAME").getString();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(634, ObjFeltPartyContact.getAttribute("DOC_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = ObjUser.getAttribute("USER_NAME").getString();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //Generates Encharge Name Combo Box
    private void GenerateZoneCombo() {
        HashMap zoneList=new HashMap();
        
        cmbZoneModel=new EITLComboModel();
        cmbZone.removeAllItems();
        cmbZone.setModel(cmbZoneModel);
        
        ComboData aData=new ComboData();
        aData.strCode="SELECT AREA CODE";
        aData.Text="SELECT AREA CODE";
        cmbZoneModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="KEY CLIENT";
        aData.Text="KEY CLIENT";
        cmbZoneModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="ACNE";
        aData.Text="ACNE";
        cmbZoneModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="EXPORT";
        aData.Text="EXPORT";
        cmbZoneModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="OTHER";
        aData.Text="OTHER";
        cmbZoneModel.addElement(aData);
    }
    
    private void PreviewReport() {
        String prodNo = txtPartyCode.getText().trim();

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            parameterMap.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT PRODUCT_CODE,PRODUCT_DESC,SYN_PER,SQM_CHRG,WT_RATE,EFFECTIVE_FROM,EFFECTIVE_TO,CHEM_TRT_IND,CHEM_TRT_CHRG,PIN_IND,PIN_CHRG,SPR_IND,SPR_CHRG,SUR_IND,SUR_CHRG,SQM_IND,EXC_CAT_IND,EXC_CAT_CHRG,GROUP_NAME,DIVERSION_GROUP,CASE WHEN CATEGORY=1 THEN 'ACNE' ELSE CASE WHEN CATEGORY=2 THEN 'DRY' ELSE CASE WHEN CATEGORY=3 THEN 'WET' ELSE ' ' END END END AS CATEGORY, ";
            strSQL += "CASE WHEN FABRIC_CATG=1 THEN 'BASE' ELSE CASE WHEN FABRIC_CATG=2 THEN 'CLOTH' ELSE ' ' END END AS FABRIC_CATG, ";
            strSQL += "CASE WHEN POSITION_CATG=1 THEN 'DRIER' ELSE CASE WHEN POSITION_CATG=2 THEN 'PRESS' ELSE ' ' END END AS POSITION_CATG ";
            strSQL += "FROM PRODUCTION.FELT_PARTY_EXTRA_CONTACT_DETAIL WHERE PRODUCT_CODE='" + prodNo + "' AND APPROVED=1 AND CANCELED=0 ORDER BY EFFECTIVE_FROM";

            rpt.setReportName("/EITLERP/FeltSales/FeltQualityRateMaster/QltRateHistory.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void DisplayPartyDetail(String partyCode) {
        Connection tmpConn;
        Statement Stmt;
        ResultSet rsTmp;
        try {
            tmpConn = data.getConn();
            Stmt = tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rsTmp = Stmt.executeQuery("SELECT COALESCE(PARTY_NAME,'') AS PARTY_NAME, COALESCE(PHONE_NO,'') AS PHONE_NO, COALESCE(PINCODE,'') AS PINCODE,COALESCE(MOBILE_NO,'') AS MOBILE_NO, COALESCE(MOBILE_NO_2,'') AS MOBILE_NO_2, COALESCE(MOBILE_NO_3,'') AS MOBILE_NO_3, COALESCE(EMAIL,'') AS EMAIL, COALESCE(CONTACT_PERSON,'') AS CONTACT_PERSON, COALESCE(CONTACT_PERSON_2,'') AS CONTACT_PERSON_2, COALESCE(CONTACT_PERSON_3,'') AS CONTACT_PERSON_3, COALESCE(TRANSPORTER_ID,0) AS TRANSPORTER_ID, COALESCE(TRANSPORTER_NAME,'') AS TRANSPORTER_NAME, CASE WHEN COALESCE(DELIVERY_MODE,'')='' THEN 'Select Delivery Mode' ELSE DELIVERY_MODE END AS DELIVERY_MODE,COALESCE(INCHARGE_CD,'') AS INCHARGE_CD, COALESCE(ZONE,'') AS ZONE, COALESCE(CORR_ADDRESS,'') AS CORR_ADDRESS, COALESCE(EMAIL_ID2,'') AS EMAIL_ID2, COALESCE(EMAIL_ID3,'') AS EMAIL_ID3, COALESCE(CONT_PERS_DESIGNATION,'') AS CONT_PERS_DESIGNATION, COALESCE(CONT_PERS_DESIGNATION_2,'') AS CONT_PERS_DESIGNATION_2, COALESCE(CONT_PERS_DESIGNATION_3,'') AS CONT_PERS_DESIGNATION_3 FROM D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + partyCode + "' AND MAIN_ACCOUNT_CODE=210010 ");
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                lblPartyName.setText(rsTmp.getString("PARTY_NAME"));
                txtCorrAdd.setText(rsTmp.getString("CORR_ADDRESS"));
                txtPhone.setText(rsTmp.getString("PHONE_NO"));
                txtPincode.setText(rsTmp.getString("PINCODE"));
                EITLERPGLOBAL.setComboIndex(cmbZone, rsTmp.getString("ZONE"));
                txtAreaInchargeCode.setText(rsTmp.getString("INCHARGE_CD"));
                txtAreaInchargeName.setText(clsSales_Party.getFeltInchargeName(Long.parseLong(rsTmp.getString("INCHARGE_CD"))));
                txtTranID.setText(rsTmp.getString("TRANSPORTER_ID"));
                txtTranName.setText(rsTmp.getString("TRANSPORTER_NAME"));
                cmbDeliveryMode.setSelectedItem(rsTmp.getString("DELIVERY_MODE"));

                txtContactPerson.setText(rsTmp.getString("CONTACT_PERSON"));
                txtDesignation.setText(rsTmp.getString("CONT_PERS_DESIGNATION"));
                txtMobile.setText(rsTmp.getString("MOBILE_NO"));
                txtEmail.setText(rsTmp.getString("EMAIL"));

                txtContactPerson2.setText(rsTmp.getString("CONTACT_PERSON_2"));
                txtDesignation2.setText(rsTmp.getString("CONT_PERS_DESIGNATION_2"));
                txtMobile2.setText(rsTmp.getString("MOBILE_NO_2"));
                txtEmail2.setText(rsTmp.getString("EMAIL_ID2"));

                txtContactPerson3.setText(rsTmp.getString("CONTACT_PERSON_3"));
                txtDesignation3.setText(rsTmp.getString("CONT_PERS_DESIGNATION_3"));
                txtMobile3.setText(rsTmp.getString("MOBILE_NO_3"));
                txtEmail3.setText(rsTmp.getString("EMAIL_ID3"));
            }

            Stmt.close();
            rsTmp.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
