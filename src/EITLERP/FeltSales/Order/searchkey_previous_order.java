/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author  DAXESH PRAJAPATI
 *
 */
package EITLERP.FeltSales.Order;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.sql.*;
import java.awt.Frame;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

public class searchkey_previous_order extends javax.swing.JApplet {

    /**
     * Initializes the applet searchkey
     */
    public String SQL, MSQL;
    public int ReturnCol;
    public int SecondCol = -1;
    public boolean ShowReturnCol;
    public int DefaultSearchOn;
    public String Party_Code;
    public String QueryCode;
    public boolean Cancelled = true;
    public boolean UseSpecifiedConn = false;
    public String dbURL = "";
    
    public String Order_Group = "";
    public String ReturnVal = "";
    public String SecondVal = "";

    private JDialog aDialog;

    private EITLTableModel DataModel;

    public boolean UseCreatedConn = false;

    private int mfnd = 0;
    private int mtotcol = 0;
    Connection Conn = null;
    Statement stmt = null;
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    HashMap hmPieceList=new HashMap();
    
    public searchkey_previous_order() {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = "";
        MSQL = "";
        ReturnCol = 0;
        ShowReturnCol = false;
        DefaultSearchOn = 0;
        try {
            if (UseSpecifiedConn) {
                Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
            } else {
                if (UseCreatedConn) {
                    //Conn=data.getCreatedConn();
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                } else {
                    Conn = data.getConn(EITLERPGLOBAL.DatabaseURL_Production);
                }
            }
            stmt = Conn.createStatement();
        } catch (Exception e) {
              System.out.println("Error on connectrion = "+e.getMessage());  
        }
        jLabel1.setForeground(Color.WHITE);
        
    }

    public searchkey_previous_order(String pSQL, int pReturnCol, boolean pShowReturnCol, int pDefaultSearchOn) {
        System.gc();
        initComponents();
        DataModel = new EITLTableModel();
        SQL = pSQL;
        MSQL = pSQL;
        ReturnCol = pReturnCol;
        ShowReturnCol = pShowReturnCol;
        DefaultSearchOn = pDefaultSearchOn;
        
    }

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchkey.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
       
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdOK = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMachineNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPosition = new javax.swing.JTextField();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setEnabled(false);

        Table.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 70, 1010, 260);

        cmdOK.setText("CLOSE >> DIVERSION LIST");
        cmdOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        getContentPane().add(cmdOK);
        cmdOK.setBounds(790, 340, 220, 30);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Existing Piece Available for same Party , Machine and Position");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1030, 25);

        txtPartyCode.setEnabled(false);
        getContentPane().add(txtPartyCode);
        txtPartyCode.setBounds(100, 30, 120, 27);

        jLabel2.setText("PARTY CODE");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 37, 100, 20);

        jLabel3.setText("MACHINE NO");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(250, 37, 110, 20);

        txtMachineNo.setEnabled(false);
        getContentPane().add(txtMachineNo);
        txtMachineNo.setBounds(340, 30, 60, 27);

        jLabel4.setText("POSITION");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(440, 37, 90, 20);

        txtPosition.setEnabled(false);
        getContentPane().add(txtPosition);
        txtPosition.setBounds(510, 30, 80, 27);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // Add your handling code here:
        
        System.gc();
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TableKeyPressed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
//        if(evt.getClickCount() == 2)
//        {
//            if (Table.getRowCount() <= 0) {
//                    Cancelled = true;
//                } else {
//                    Cancelled = false;
//                    ReturnVal = (String) DataModel.getValueAt(Table.getSelectedRow(), ReturnCol - 1);
//                     //  SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1); 
//                            
//                    try {
//                        if (SecondCol >= 0) {
//                            SecondVal = (String) DataModel.getValueAt(Table.getSelectedRow(), SecondCol - 1);
//                        }
//                    } catch (Exception e) {
//                           System.out.println("Error on second value = "+e.getMessage()); 
//                    }
//
//                }
//                aDialog.dispose();
//                return;
//        }
    }//GEN-LAST:event_TableMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 27) //Escape key pressed
        {
            Cancelled = true;
            ReturnVal = "";
            aDialog.dispose();
            return;
        }
    }//GEN-LAST:event_formKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField txtMachineNo;
    public javax.swing.JTextField txtPartyCode;
    public javax.swing.JTextField txtPosition;
    // End of variables declaration//GEN-END:variables

    public void setsearchText(String pstxt) {
       
       
    }
    
    public boolean ShowRSLOV() {
        try {
            GenerateLOV();

            //setSize(930, 600);
            Frame f = findParentFrame(this);

            aDialog = new JDialog(f, "Piece Register List with same order", true);
            aDialog.getContentPane().add("Center", this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(1030, 410);
            aDialog.setResizable(true);
            aDialog.addWindowListener(null);
           
            //Place it to center of the screen
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation(50, (int) (screenSize.height - appletSize.getHeight()) / 6);

            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
            
        } catch (Exception e) {
        }
        return !Cancelled;
    }

    private void GenerateLOV() {
        try {
            System.out.println("ShowLOV1 SQL = "+SQL); 
            ResultSet rsData = stmt.executeQuery(SQL);
            //System.out.println("Data on rsData = "+rsData.getString(1));
            ResultSetMetaData rsInfo = rsData.getMetaData();

            //Format the table from the resultset meta data
            for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
            }

            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            Table.setRowSelectionAllowed(true);
            DataModel.TableReadOnly(true);

            //Now Populate the table
            rsData.first();
            mtotcol = rsInfo.getColumnCount();
            while (!rsData.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];

                //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                            
                    switch (rsInfo.getColumnType(i)) {
                        case -5: //Long
                            rowData[i - 1] = Long.toString(rsData.getLong(i));
                            break;
                        case 4: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 5: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case -6: //Integer,Small int
                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
                            break;
                        case 91: //Date
                            rowData[i - 1] = EITLERPGLOBAL.formatDate(rsData.getDate(i));
                            break;
                        case 8: //Double
                            rowData[i - 1] = Double.toString(rsData.getDouble(i));
                            break;
                        case 6: //Float
                            rowData[i - 1] = Float.toString(rsData.getFloat(i));
                            break;
                      
                        default: //Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                    } //Switch
                }// for

                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                rsData.next();
            }

            TableColumnModel ColModel = Table.getColumnModel();
            //Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            //Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
            Table.changeSelection(0, 0, false, false);
            
            Table.getColumnModel().getColumn(0).setMinWidth(100);
            Table.getColumnModel().getColumn(1).setMinWidth(100);
            Table.getColumnModel().getColumn(2).setMinWidth(100);
            Table.getColumnModel().getColumn(3).setMinWidth(130);
            Table.getColumnModel().getColumn(4).setMinWidth(100);
            Table.getColumnModel().getColumn(5).setMinWidth(150);
            Table.getColumnModel().getColumn(6).setMinWidth(100);
            Table.getColumnModel().getColumn(7).setMinWidth(100);
            Table.getColumnModel().getColumn(8).setMinWidth(100);
            Table.getColumnModel().getColumn(9).setMinWidth(100);
            Table.getColumnModel().getColumn(10).setMinWidth(100);
            Table.getColumnModel().getColumn(11).setMinWidth(100);
            Table.getColumnModel().getColumn(12).setMinWidth(100);
            Table.getColumnModel().getColumn(13).setMinWidth(100);
            Table.getColumnModel().getColumn(14).setMinWidth(120);
            Table.getColumnModel().getColumn(15).setMinWidth(120);
            Table.getColumnModel().getColumn(16).setMinWidth(120);
//            Table.getColumnModel().getColumn(17).setMinWidth(120);
            
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null,e.getMessage());
            e.printStackTrace();
        }
    }

    private void FilterLOV() {
        try {

            ResultSet rsData = stmt.executeQuery(SQL);
            
            ResultSetMetaData rsInfo = rsData.getMetaData();
            //JOptionPane.showMessageDialog(null, "Data Loaded");
            //Format the table from the resultset meta data
            Table.setModel(DataModel);
            Table.setColumnSelectionAllowed(true);
            Table.setRowSelectionAllowed(true);
            DataModel.TableReadOnly(true);

            int rowCount = DataModel.getRowCount();
//Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                DataModel.removeRow(i);
            }

            //Now Populate the table
            rsData.first();
            
            while (!rsData.isAfterLast()) {
                Object[] rowData = new Object[rsInfo.getColumnCount()];
                 //Fillup the array
                for (int i = 1; i <= rsInfo.getColumnCount(); i++) {
                    switch (rsInfo.getColumnType(i)) {
//                        case -5: //Long
//                            rowData[i - 1] = Long.toString(rsData.getLong(i));
//                            break;
//                        case 4: //Integer,Small int
//                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
//                            break;
//                        case 5: //Integer,Small int
//                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
//                            break;
//                        case -6: //Integer,Small int
//                            rowData[i - 1] = Integer.toString(rsData.getInt(i));
//                            break;
//                        case 16: //Boolean
//                            if (rsData.getBoolean(i) == true) {
//                                rowData[i - 1] = "Yes";
//                            } else {
//                                rowData[i - 1] = "No";
//                            }
//                            break;
//                        case 91: //Date
//                            rowData[i - 1] = EITLERPGLOBAL.formatDate(rsData.getDate(i));
//                            break;
//                        case 8: //Double
//                            rowData[i - 1] = Double.toString(rsData.getDouble(i));
//                            break;
//                        case 6: //Float
//                            rowData[i - 1] = Float.toString(rsData.getFloat(i));
//                            break;
//                        case 12://Varchar
//                            rowData[i - 1] = rsData.getString(i);
//                            break;
                        default: //Varchar
                            rowData[i - 1] = rsData.getString(i);
                            break;
                    } //Switch
                }// for

                //Add a row to the table
                DataModel.addRow(rowData);

                //Move to the next row
                rsData.next();
            }

            TableColumnModel ColModel = Table.getColumnModel();
            //Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

            Table.changeSelection(0, 0, false, false);
        

            if (ShowReturnCol == false) {
                ColModel.getColumn(ReturnCol - 1).setMinWidth(0);
                ColModel.getColumn(ReturnCol - 1).setPreferredWidth(0);
            }

        } catch (Exception e) {
           // JOptionPane.showMessageDialog(null,"Error on filter"+e.getMessage());
            JOptionPane.showMessageDialog(null,"PIECE NOT FOUND! ");
           
            //e.printStackTrace();
        }
    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

    public void destroy() {
        try {
            stmt.close();
            Conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
