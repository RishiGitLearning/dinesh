/*
 * frmFeltFinishing.java
 *
 * Created on August 22, 2013, 11:20 AM
 */
package EITLERP.FeltSales.FeltFinishing;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import TReportWriter.NumWord;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.FeltSales.FeltQualityRateMaster.frmFeltQltRateMaster;
import EITLERP.FeltSales.Perfomainvoice.clsProforma;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.FeltSales.common.JavaMailNew;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.Production.FeltNeedling.frmFeltNeedling;
import EITLERP.Production.FeltMending.frmFeltMending_New;
import EITLERP.Production.FeltWeaving.frmFeltWeaving;
import EITLERP.SelectFirstFree;
import EITLERP.clsFirstFree;
import EITLERP.data;
import EITLERP.clsDocMailer;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class frmFeltFinishing extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private clsFeltFinishing ObjFeltFinishing;
    private EITLERP.FeltSales.common.FeltInvCalc inv_calculation;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelF;
    private int FinalApprovedBy = 0;
    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltFinishing
     */
    public void init() {
        System.gc();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(830, 590);
        initComponents();
        lblTitle.setForeground(Color.WHITE);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjFeltFinishing = new clsFeltFinishing();

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        if (ObjFeltFinishing.LoadData()) {
            ObjFeltFinishing.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Error occured while Loading Data. Error is " + ObjFeltFinishing.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
        txtDayWeightwithoutV.setVisible(false);
        jLabel7.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemNeedling = new javax.swing.JMenuItem();
        jMenuItemMending = new javax.swing.JMenuItem();
        jMenuItemWeaving = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        txtProductionDocumentNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFeltProductionDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        cmdNextToTab1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Table1 = new javax.swing.JTable();
        jLabel29 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        txtPreviousWeight = new javax.swing.JTextField();
        txtDayWeight = new javax.swing.JTextField();
        txtMonthWeight = new javax.swing.JTextField();
        txtTotalWeight = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDayWeightwithV = new javax.swing.JTextField();
        txtDayWeightwithoutV = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtFinishingDate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        btnSendFAmail = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemNeedling.setText("Needling Report");
        jMenuItemNeedling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNeedlingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemNeedling);

        jMenuItemMending.setText("Mending Report");
        jMenuItemMending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMendingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemMending);

        jMenuItemWeaving.setText("Weaving Report");
        jMenuItemWeaving.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWeavingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWeaving);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 990, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT PRODUCTION FINISHING DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 990, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel16.setText("Document No.");
        Tab1.add(jLabel16);
        jLabel16.setBounds(20, 10, 110, 30);

        txtProductionDocumentNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtProductionDocumentNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtProductionDocumentNo.setEnabled(false);
        Tab1.add(txtProductionDocumentNo);
        txtProductionDocumentNo.setBounds(130, 10, 102, 21);

        jLabel6.setText("Document Date.");
        Tab1.add(jLabel6);
        jLabel6.setBounds(250, 10, 110, 30);

        txtFeltProductionDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFeltProductionDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFeltProductionDate.setEnabled(false);
        txtFeltProductionDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFeltProductionDateFocusGained(evt);
            }
        });
        Tab1.add(txtFeltProductionDate);
        txtFeltProductionDate.setBounds(370, 10, 102, 21);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(480, 10, 20, 18);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel4);
        jPanel4.setBounds(10, 40, 940, 10);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(460, 320, 90, 30);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(560, 320, 90, 25);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(660, 320, 90, 25);

        jScrollPane4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane4KeyReleased(evt);
            }
        });

        Table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table1.getTableHeader().setReorderingAllowed(false);
        Table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table1MouseClicked(evt);
            }
        });
        Table1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Table1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Table1KeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(Table1);

        Tab1.add(jScrollPane4);
        jScrollPane4.setBounds(11, 90, 940, 220);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel29.setText("Remarks");
        jLabel29.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel29);
        jLabel29.setBounds(10, 320, 70, 30);

        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(90, 320, 360, 19);
        Tab1.add(txtPreviousWeight);
        txtPreviousWeight.setBounds(140, 350, 84, 19);
        Tab1.add(txtDayWeight);
        txtDayWeight.setBounds(350, 350, 90, 19);
        Tab1.add(txtMonthWeight);
        txtMonthWeight.setBounds(140, 390, 80, 19);
        Tab1.add(txtTotalWeight);
        txtTotalWeight.setBounds(350, 390, 90, 19);

        jLabel1.setText("Previous Weight");
        Tab1.add(jLabel1);
        jLabel1.setBounds(10, 360, 120, 20);

        jLabel2.setText("Month Weight");
        Tab1.add(jLabel2);
        jLabel2.setBounds(10, 390, 120, 15);

        jLabel3.setText("Day Weight");
        Tab1.add(jLabel3);
        jLabel3.setBounds(240, 360, 100, 15);

        jLabel4.setText("Total Weight");
        Tab1.add(jLabel4);
        jLabel4.setBounds(240, 390, 100, 15);
        Tab1.add(txtDayWeightwithV);
        txtDayWeightwithV.setBounds(460, 350, 90, 19);
        Tab1.add(txtDayWeightwithoutV);
        txtDayWeightwithoutV.setBounds(570, 350, 90, 19);

        jLabel5.setText("With V");
        Tab1.add(jLabel5);
        jLabel5.setBounds(465, 390, 60, 15);

        jLabel7.setText("Without V");
        Tab1.add(jLabel7);
        jLabel7.setBounds(577, 390, 80, 15);

        jLabel8.setText("Finishing Date");
        Tab1.add(jLabel8);
        jLabel8.setBounds(520, 10, 110, 30);

        txtFinishingDate.setEditable(false);
        Tab1.add(txtFinishingDate);
        txtFinishingDate.setBounds(620, 10, 140, 19);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 255));
        jLabel9.setText("Press F1 For Piece Selection");
        Tab1.add(jLabel9);
        jLabel9.setBounds(20, 50, 270, 30);

        Tab.addTab("Finishing Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 15);

        txtToRemarks.setEnabled(false);
        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        btnSendFAmail.setText("Send final approved mail");
        btnSendFAmail.setEnabled(false);
        btnSendFAmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendFAmailActionPerformed(evt);
            }
        });
        Tab2.add(btnSendFAmail);
        btnSendFAmail.setBounds(546, 10, 200, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 980, 460);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 980, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed

    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWeavingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWeavingActionPerformed

    }//GEN-LAST:event_jMenuItemWeavingActionPerformed

    private void jMenuItemMendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMendingActionPerformed

    }//GEN-LAST:event_jMenuItemMendingActionPerformed

    private void jMenuItemNeedlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNeedlingActionPerformed

    }//GEN-LAST:event_jMenuItemNeedlingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjFeltFinishing.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
//        HashMap Parameters = new HashMap();
//        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());
//        
//        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/FELTFINISHING.rpt",Parameters,ObjFeltFinishing.getReportData(txtProductionDocumentNo.getText().trim(),EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
//        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
//        try {
//            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
//            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
//            e.printStackTrace();
//        }

//        PreviewReport();
        HashMap Parameters = new HashMap();
        Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());

        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/FELTFINISHING.rpt", Parameters, ObjFeltFinishing.getReportData(txtProductionDocumentNo.getText().trim(), EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltFinishing.HistoryView = false;
        ObjFeltFinishing.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltFinishing.ShowHistory(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()), txtProductionDocumentNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtFeltProductionDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(603, txtProductionDocumentNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltFinishing.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
        if (ObjFeltFinishing.LoadData()) {
            ObjFeltFinishing.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltFinishing.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void txtFeltProductionDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFeltProductionDateFocusGained
        ShowMessage("Enter Production Date");
    }//GEN-LAST:event_txtFeltProductionDateFocusGained

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        Object[] rowData = new Object[50];
        rowData[0] = Integer.toString(Table1.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        rowData[7] = "";
        rowData[8] = "";
        rowData[9] = "";
        rowData[10] = "";
        rowData[11] = "";
        rowData[12] = "";
        rowData[13] = "";
        rowData[14] = "";
        rowData[15] = "";
        rowData[16] = "";
        rowData[17] = "";
        rowData[18] = "";
        rowData[19] = "";
        rowData[20] = "";
        rowData[21] = "";
        rowData[22] = "";
        rowData[23] = "";
        rowData[24] = "";
        rowData[25] = "";

        DataModelF.addRow(rowData);
        Table1.changeSelection(Table1.getRowCount() - 1, 1, false, false);
        Table1.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table1.getRowCount() > 0) {
            DataModelF.removeRow(Table1.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Table1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table1KeyPressed
         // TODO add your handling code here:

        //=========== Style List ================
        if (Table1.getSelectedColumn() == 7) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();

                aList.SQL = "SELECT PRODUCT_CODE,STYLE_CODE FROM PRODUCTION.FELT_SALES_STYLE_MASTER WHERE PRODUCT_CODE='" + Table1.getValueAt(Table1.getSelectedRow(), 4) + "' AND STATUS='ACTIVE' ORDER BY STYLE_CODE";
                aList.ReturnCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    Table1.setValueAt(aList.ReturnVal, Table1.getSelectedRow(), 7);
                }
            }
        }
        //=========================================

        //=========== Bill Style List =============
        if (Table1.getSelectedColumn() == 23) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();

                aList.SQL = "SELECT PRODUCT_CODE,STYLE_CODE FROM PRODUCTION.FELT_SALES_STYLE_MASTER WHERE PRODUCT_CODE='" + Table1.getValueAt(Table1.getSelectedRow(), 21) + "' AND STATUS='ACTIVE' ORDER BY STYLE_CODE";
                aList.ReturnCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    Table1.setValueAt(aList.ReturnVal, Table1.getSelectedRow(), 23);
                }
            }
        }
        //=========================================

        //============ Piece List =================
        if (Table1.getSelectedColumn() == 1) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();

                aList.SQL = "SELECT WIP_PIECE_NO AS PIECE_NO,WIP_PIECE_NO AS PIECE,WIP_PARTY_CODE AS PARTY_CODE,"
                        + "PARTY_NAME,WIP_GROUP AS 'GROUP',COALESCE(AMEND_WIP.PIECE_AMEND_NO,'') AS PENDING_WIP_AMEND "
//                        + ",CASE WHEN PARTY_LOCK=1 THEN 'LOCKED' ELSE '' END AS PARTY_LOCK "
//                        + ",CASE WHEN POSITION_LOCK_IND=1 THEN 'LOCKED' ELSE '' END AS POSITION_LOCK "
                        + ",CASE WHEN PARTY_CLOSE_IND=1 THEN 'CLOSED' ELSE '' END AS PARTY_CLOSED "
                        + ",CASE WHEN POSITION_CLOSE_IND=1 THEN 'CLOSED' ELSE '' END AS POSITION_CLOSED "
                        + "FROM PRODUCTION.FELT_WIP_PIECE_REGISTER R "
                        + " LEFT JOIN PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                        + " ON WIP_PARTY_CODE=MM_PARTY_CODE AND WIP_MACHINE_NO=MM_MACHINE_NO AND WIP_POSITION_NO=MM_MACHINE_POSITION "
                        + "LEFT JOIN (SELECT PD.PIECE_NO,PH.PIECE_AMEND_NO,PH.APPROVED  FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH,"
                        + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                        + "WHERE PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO  AND COALESCE(PH.APPROVED,0)=0  AND COALESCE(PH.CANCELED,0)!=1) AS AMEND_WIP "
                        + "ON WIP_PIECE_NO=AMEND_WIP.PIECE_NO "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M ON R.WIP_PARTY_CODE=M.PARTY_CODE "
                        + "WHERE WIP_PIECE_STAGE IN ('FINISHING','OSG STOCK') AND WIP_PRIORITY_HOLD_CAN_FLAG=0 AND COALESCE(WIP_REJECTED_FLAG,0)=0";
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;

                if (aList.ShowLOV()) {
                    if (!data.getStringValueFromDB("SELECT PD.PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                            + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                            + "WHERE COALESCE(PH.APPROVED,0)!=1 AND COALESCE(PH.CANCELED,0)!=1 AND "
                            + "PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO AND LEFT(PD.PIECE_NO,5)='" + aList.ReturnVal.substring(0, 5) + "' ").equalsIgnoreCase("")) {

                        String pUser = data.getStringValueFromDB("SELECT USER_NAME FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_USER_MASTER U "
                                + "WHERE D.USER_ID=U.USER_ID AND D.STATUS='W' "
                                + "AND D.DOC_NO = (SELECT PD.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                                + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                                + "WHERE COALESCE(PH.APPROVED,0)!=1 AND COALESCE(PH.CANCELED,0)!=1 AND "
                                + "PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO AND LEFT(PD.PIECE_NO,5)='" + aList.ReturnVal.substring(0, 5) + "') ");
                        JOptionPane.showMessageDialog(this, "Piece is Under Approval in WIP Piece Amend in User : " + pUser, "ERROR", JOptionPane.ERROR_MESSAGE);

//                        JOptionPane.showMessageDialog(this, "Piece is Under Approval in WIP Piece Amend", "ERROR", JOptionPane.ERROR_MESSAGE);
                    } else if (data.getIntValueFromDB("SELECT PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=(SELECT WIP_PARTY_CODE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')") == 1) {
                        JOptionPane.showMessageDialog(this, "Party is Locked...", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    } else if (data.getIntValueFromDB("SELECT POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE CONCAT(TRIM(MM_PARTY_CODE),TRIM(MM_MACHINE_NO),TRIM(MM_MACHINE_POSITION))=(SELECT CONCAT(TRIM(WIP_PARTY_CODE),TRIM(WIP_MACHINE_NO),TRIM(WIP_POSITION_NO)) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')") == 1) {
                        JOptionPane.showMessageDialog(this, "Position is Locked...", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    } else {
                        Table1.setValueAt(aList.ReturnVal, Table1.getSelectedRow(), 1);
                        Table1.setValueAt(aList.ReturnVal, Table1.getSelectedRow(), 26);
                        String PieceNo = aList.ReturnVal;
                        String ocYearMonth = data.getStringValueFromDB("SELECT WIP_OC_MONTHYEAR FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + PieceNo + "'");
                        Table1.setValueAt(ocYearMonth, Table1.getSelectedRow(), 27);
                        try {
                            String pc = Table1.getValueAt(Table1.getSelectedRow(), 1).toString();

                            int count = data.getIntValueFromDB("SELECT COUNT(WIP_PIECE_NO) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");

                            if (count < 1) {
                                System.out.println("Count Press:" + count);
                                DataModelF.removeRow(Table1.getSelectedRow());
                                JOptionPane.showMessageDialog(null, "Piece not found.");
                            } else {

                                String IsAmendPending2 = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP PD "
                                        + "WHERE PD.PIECE_NO='" + pc + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");

                                if (!IsAmendPending2.equals("")) {
                                    JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + pc + " with DOC No : " + IsAmendPending2 + ". \nThis Piece is on Hold, Please contact with Sales");
                                    return;
                                }

                                String Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP!='SDF' AND COALESCE(WIP_WVG_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                                if (!"".equals(Check_dates_notSDF)) {
                                    JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE : " + pc + " is compulsory.");
                                    return;
                                }

                                Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP!='SDF' AND COALESCE(WIP_MND_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                                if (!"".equals(Check_dates_notSDF)) {
                                    JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE : " + pc + " is compulsory.");
                                    return;
                                }

//                        Check_dates_notSDF = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP!='SDF' AND (PR_NDL_DATE='' OR PR_NDL_DATE = '0000-00-00') AND PR_PIECE_NO='"+pc+"'");
                                Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP NOT IN ('SDF','HDS','M35','M50') AND COALESCE(WIP_NDL_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 AND WIP_PIECE_STAGE IN ('FINISHING','OSG STOCK') ");
                                if (!"".equals(Check_dates_notSDF)) {
                                    JOptionPane.showMessageDialog(null, "Needling Date not updated, Needling Date to FINISHING for PIECE : " + pc + " is compulsory.");
                                    return;
                                }

                                String Check_dates_HDS = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP='HDS' AND COALESCE(WIP_WVG_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                                if (!"".equals(Check_dates_HDS)) {
                                    JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE  : " + pc + " (HDS) is compulsory.");
                                    return;
                                }

                                Check_dates_HDS = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP='HDS' AND COALESCE(WIP_MND_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                                if (!"".equals(Check_dates_HDS)) {
                                    JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE  : " + pc + " (HDS) is compulsory.");
                                    return;
                                }

                                ResultSet rsTmp1 = data.getConn().createStatement().executeQuery("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                                rsTmp1.first();

                                if (rsTmp1.getString("WIP_PIECE_STAGE").equals("DIVERTED")) {
                                    JOptionPane.showMessageDialog(null, "This Piece was diverted, Diverted Pieces are not allowed.");
                                    return;
                                }

                                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + rsTmp1.getString("WIP_PARTY_CODE") + "' AND APPROVED=1 AND CANCELLED=0")) {
                                    Table1.setValueAt(rsTmp1.getString("WIP_PARTY_CODE"), Table1.getSelectedRow(), 2);

//                        ResultSet rsTmp2 = data.getConn().createStatement().executeQuery("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+Table1.getValueAt(Table1.getSelectedRow(), 2).toString()+"'");
//                        rsTmp2.first();
//                        Table1.setValueAt(rsTmp2.getString("PARTY_NAME"), Table1.getSelectedRow(), 3);
                                    String pName = data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + Table1.getValueAt(Table1.getSelectedRow(), 2).toString() + "'");
                                    Table1.setValueAt(pName, Table1.getSelectedRow(), 3);

                                    Table1.setValueAt(rsTmp1.getString("WIP_PRODUCT_CODE"), Table1.getSelectedRow(), 4);
                                    Table1.setValueAt(rsTmp1.getString("WIP_DOC_NO"), Table1.getSelectedRow(), 5);
                                    Table1.setValueAt(EITLERPGLOBAL.formatDate(rsTmp1.getString("WIP_ORDER_DATE")), Table1.getSelectedRow(), 6);
                                    Table1.setValueAt(rsTmp1.getString("WIP_STYLE"), Table1.getSelectedRow(), 7);
                                    Table1.setValueAt(rsTmp1.getString("WIP_GSM"), Table1.getSelectedRow(), 8);
                                    Table1.setValueAt(rsTmp1.getString("WIP_GROUP"), Table1.getSelectedRow(), 9);
                                    Table1.setValueAt(rsTmp1.getString("WIP_LENGTH"), Table1.getSelectedRow(), 10);
                                    Table1.setValueAt(rsTmp1.getString("WIP_WIDTH"), Table1.getSelectedRow(), 11);
                                    Table1.setValueAt("", Table1.getSelectedRow(), 12);
                                    Table1.setValueAt("", Table1.getSelectedRow(), 13);
                                    Table1.setValueAt("", Table1.getSelectedRow(), 14);
                                    Table1.setValueAt("", Table1.getSelectedRow(), 15);
                                    Table1.setValueAt(rsTmp1.getString("WIP_BILL_GSM"), Table1.getSelectedRow(), 16);
                                    Table1.setValueAt(rsTmp1.getString("WIP_BILL_SQMTR"), Table1.getSelectedRow(), 17);
                                    Table1.setValueAt(rsTmp1.getString("WIP_BILL_LENGTH"), Table1.getSelectedRow(), 18);
                                    Table1.setValueAt(rsTmp1.getString("WIP_BILL_WIDTH"), Table1.getSelectedRow(), 19);
                                    Table1.setValueAt(rsTmp1.getString("WIP_BILL_WEIGHT"), Table1.getSelectedRow(), 20);
                                    Table1.setValueAt(rsTmp1.getString("WIP_BILL_PRODUCT_CODE"), Table1.getSelectedRow(), 21);

                                    String synPer = data.getStringValueFromDB("SELECT SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsTmp1.getString("WIP_PRODUCT_CODE").substring(0, 6) + "' AND (EFFECTIVE_TO='0000-00-00' OR EFFECTIVE_TO IS NULL) AND APPROVED=1 AND CANCELED=0");
                                    Table1.setValueAt(synPer, Table1.getSelectedRow(), 22);
                                    Table1.setValueAt(rsTmp1.getString("WIP_STYLE"), Table1.getSelectedRow(), 23);

                                    String feltRate = data.getStringValueFromDB("SELECT COALESCE(PR_FELT_RATE,'0') AS PR_FELT_RATE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pc + "' ");
                                    Table1.setValueAt(feltRate, Table1.getSelectedRow(), 24);
                                    String feltValue = data.getStringValueFromDB("SELECT COALESCE(PR_FELT_VALUE_WITHOUT_DISCOUNT,'0') AS PR_FELT_VALUE_WITHOUT_DISCOUNT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pc + "' ");
                                    Table1.setValueAt(feltValue, Table1.getSelectedRow(), 25);
                                    
                                    String thWt = data.getStringValueFromDB("SELECT PR_THORITICAL_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pc + "' ");
                                    Table1.setValueAt(thWt, Table1.getSelectedRow(), 28);
                                    
                                    Table1.changeSelection(Table1.getSelectedRow(), 12, false, false);
                                } else {
                                    DataModelF.removeRow(Table1.getSelectedRow());
                                    JOptionPane.showMessageDialog(null, "Party Code not found.");
                                }

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        //=========================================        

//        if(evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10)
//        {
//            try {
//                FeltPieceMasterServiceImpl pieceS = new FeltPieceMasterServiceImpl();
//                FeltSalesPieceMaster pieceDetail = pieceS.getPieceDetail(Table1.getValueAt(Table1.getRowCount() - 1, 1).toString());
//                
//                Table1.setValueAt(pieceDetail.getPmPartyCode(), Table1.getSelectedRow(), 2);
//                
//                PartyMasterServiceImpl partyMst = new PartyMasterServiceImpl();
//                DSalPartyMaster partyD = partyMst.getFeltPartyDetail(Table1.getValueAt(Table1.getRowCount() - 1, 2).toString());
//                
//                Table1.setValueAt(partyD.getPartyName(), Table1.getSelectedRow(), 3);
//                
//                Table1.setValueAt(pieceDetail.getPmProductCode(), Table1.getSelectedRow(), 4);
//                Table1.setValueAt(pieceDetail.getPmStyle(), Table1.getSelectedRow(), 5);
//                Table1.setValueAt(pieceDetail.getPmLength(), Table1.getSelectedRow(), 6);
//                Table1.setValueAt(pieceDetail.getPmWidth(), Table1.getSelectedRow(), 7);
//                
//                //Table1.changeSelection(Table1.getSelectedRow(), 8, false, false);
//                    
//            }catch(Exception e)
//            {
//                e.printStackTrace();
//            }
//        } 
//        if(Table1.getSelectedColumn()==1)
//        {
//        if(evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10)
//        {
//            try {
//                FeltSalesPieceRegisterServiceImpl pieceS = new FeltSalesPieceRegisterServiceImpl();
//                //FeltSalesPieceRegister pieceDetail = pieceS.getPieceDetail(Table1.getValueAt(Table1.getSelectedRow(), 1).toString());
//                
//                if(pieceS.checkPiece(Table1.getValueAt(Table1.getSelectedRow(), 1).toString())==1)
//                {
//                    DataModelF.removeRow(Table1.getSelectedRow());
//                    JOptionPane.showMessageDialog(null, "piece not found");
//                }
//                else
//                {
//                    
//                    FeltSalesPieceRegister pieceDetail = pieceS.getPieceDetail(Table1.getValueAt(Table1.getSelectedRow(), 1).toString());
//                Table1.setValueAt(pieceDetail.getPrPartyCode(), Table1.getSelectedRow(), 2);
//                
//                PartyMasterServiceImpl partyMst = new PartyMasterServiceImpl();
//                DSalPartyMaster partyD = partyMst.getFeltPartyDetail(Table1.getValueAt(Table1.getSelectedRow(), 2).toString());
//                
//                Table1.setValueAt(partyD.getPartyName(), Table1.getSelectedRow(), 3);
//                
//                Table1.setValueAt(pieceDetail.getPrProductCode(), Table1.getSelectedRow(), 4);
//                Table1.setValueAt(pieceDetail.getPrStyle(), Table1.getSelectedRow(), 5);
//                Table1.setValueAt(pieceDetail.getPrLength(), Table1.getSelectedRow(), 6);
//                Table1.setValueAt(pieceDetail.getPrWidth(), Table1.getSelectedRow(), 7);
//                
//                Table1.changeSelection(Table1.getSelectedRow(), 8, false, false);
//                }    
//            }catch(Exception e)
//            {
//                e.printStackTrace();
//            }
//        }   
//        }
//        else
//        {
//            JOptionPane.showMessageDialog(null, "other colm found");
//            
//        }

    }//GEN-LAST:event_Table1KeyPressed

    private void Table1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Table1KeyReleased
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == 10 || evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
                System.out.println("tab or enter : " + Table1.getSelectedColumn());
                if (Table1.getSelectedColumn() == 1 || Table1.getSelectedColumn() == 2) {
                    try {
                        String pc = Table1.getValueAt(Table1.getSelectedRow(), 1).toString();

                        int count = data.getIntValueFromDB("SELECT COUNT(WIP_PIECE_NO) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");

                        if (count < 1) {
                            System.out.println("Count Realse:" + count);
                            DataModelF.removeRow(Table1.getSelectedRow());
                            JOptionPane.showMessageDialog(null, "Piece not found.");
                        } else {

                            String IsAmendPending = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_HEADER PH,PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_DETAIL PD "
                                    + "WHERE PD.PIECE_NO='" + pc + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                            if (!IsAmendPending.equals("")) {
                                JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + pc + " with DOC No : " + IsAmendPending + ". \nThis Piece is on Hold, Please contact with Sales");
                                return;
                            }

                            String IsAmendPending2 = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP PD "
                                    + "WHERE PD.PIECE_NO='" + pc + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");

                            if (!IsAmendPending2.equals("")) {
                                JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + pc + " with DOC No : " + IsAmendPending2 + ". \nThis Piece is on Hold, Please contact with Sales");
                                return;
                            }

                            String IsDiversionPending = data.getStringValueFromDB("SELECT SD_ORDER_NO FROM PRODUCTION.FELT_SALES_ORDER_DIVERSION where D_PIECE_NO='" + pc + "' AND APPROVED=0 AND CANCELED=0");
                            System.out.println("SELECT SD_ORDER_NO FROM PRODUCTION.FELT_SALES_ORDER_DIVERSION where D_PIECE_NO='" + pc + "' AND APPROVED=0 AND CANCELED=0");
                            if (!IsDiversionPending.equals("")) {
                                JOptionPane.showMessageDialog(null, "Diversion is Pending for Piece No " + pc + " with DOC No : " + IsDiversionPending + ". \nThis Piece cannot processed right now.");
                                return;
                            }

                            String Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP!='SDF' AND COALESCE(WIP_WVG_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                            if (!"".equals(Check_dates_notSDF)) {
                                JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE : " + pc + " is compulsory.");
                                return;
                            }

                            Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP!='SDF' AND COALESCE(WIP_MND_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                            if (!"".equals(Check_dates_notSDF)) {
                                JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE : " + pc + " is compulsory.");
                                return;
                            }

//                        Check_dates_notSDF = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP!='SDF' AND (PR_NDL_DATE='' OR PR_NDL_DATE = '0000-00-00') AND PR_PIECE_NO='"+pc+"'");
                            Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP NOT IN ('SDF','HDS','M35','M50') AND COALESCE(WIP_NDL_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 AND WIP_PIECE_STAGE IN ('FINISHING','OSG STOCK') ");
                            if (!"".equals(Check_dates_notSDF)) {
                                JOptionPane.showMessageDialog(null, "Needling Date not updated, Needling Date to FINISHING for PIECE : " + pc + " is compulsory.");
                                return;
                            }

                            String Check_dates_HDS = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP='HDS' AND COALESCE(WIP_WVG_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                            if (!"".equals(Check_dates_HDS)) {
                                JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE  : " + pc + " (HDS) is compulsory.");
                                return;
                            }

                            Check_dates_HDS = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP='HDS' AND COALESCE(WIP_MND_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                            if (!"".equals(Check_dates_HDS)) {
                                JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE  : " + pc + " (HDS) is compulsory.");
                                return;
                            }

//                        String pCd = Table1.getValueAt(Table1.getSelectedRow(), 4).toString();
//
//                        if (pCd.equals("") || pCd == null) {
                            ResultSet rsTmp1 = data.getConn().createStatement().executeQuery("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + pc + "'  AND COALESCE(WIP_REJECTED_FLAG,0)=0 ");
                            rsTmp1.first();

                            if (rsTmp1.getString("WIP_PIECE_STAGE").equals("DIVERTED")) {
                                JOptionPane.showMessageDialog(null, "This Piece was diverted, Diverted Pieces are not allowed.");
                                return;
                            }

                            if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + rsTmp1.getString("WIP_PARTY_CODE") + "' AND APPROVED=1 AND CANCELLED=0")) {
//                                Table1.setValueAt(rsTmp1.getString("PR_PARTY_CODE"), Table1.getSelectedRow(), 2);
//
////                        ResultSet rsTmp2 = data.getConn().createStatement().executeQuery("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+Table1.getValueAt(Table1.getSelectedRow(), 2).toString()+"'");
////                        rsTmp2.first();
////                        Table1.setValueAt(rsTmp2.getString("PARTY_NAME"), Table1.getSelectedRow(), 3);
//                                String pName = data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + Table1.getValueAt(Table1.getSelectedRow(), 2).toString() + "'");
//                                Table1.setValueAt(pName, Table1.getSelectedRow(), 3);
//
//                                Table1.setValueAt(rsTmp1.getString("PR_PRODUCT_CODE"), Table1.getSelectedRow(), 4);
//                                Table1.setValueAt(rsTmp1.getString("PR_DOC_NO"), Table1.getSelectedRow(), 5);
//                                Table1.setValueAt(EITLERPGLOBAL.formatDate(rsTmp1.getString("PR_ORDER_DATE")), Table1.getSelectedRow(), 6);
//                                Table1.setValueAt(rsTmp1.getString("PR_STYLE"), Table1.getSelectedRow(), 7);
//                                Table1.setValueAt(rsTmp1.getString("PR_GSM"), Table1.getSelectedRow(), 8);
//                                Table1.setValueAt(rsTmp1.getString("PR_GROUP"), Table1.getSelectedRow(), 9);
//                                Table1.setValueAt(rsTmp1.getString("PR_LENGTH"), Table1.getSelectedRow(), 10);
//                                Table1.setValueAt(rsTmp1.getString("PR_WIDTH"), Table1.getSelectedRow(), 11);
//                                Table1.setValueAt(rsTmp1.getString("PR_BILL_GSM"), Table1.getSelectedRow(), 16);
//                                Table1.setValueAt(rsTmp1.getString("PR_BILL_SQMTR"), Table1.getSelectedRow(), 17);
//                                Table1.setValueAt(rsTmp1.getString("PR_BILL_LENGTH"), Table1.getSelectedRow(), 18);
//                                Table1.setValueAt(rsTmp1.getString("PR_BILL_WIDTH"), Table1.getSelectedRow(), 19);
//                                Table1.setValueAt(rsTmp1.getString("PR_BILL_WEIGHT"), Table1.getSelectedRow(), 20);
//                                Table1.setValueAt(rsTmp1.getString("PR_BILL_PRODUCT_CODE"), Table1.getSelectedRow(), 21);
//
//                                String synPer = data.getStringValueFromDB("SELECT SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsTmp1.getString("PR_PRODUCT_CODE").substring(0, 6) + "' AND (EFFECTIVE_TO='0000-00-00' OR EFFECTIVE_TO IS NULL) AND APPROVED=1 AND CANCELED=0");
//                                Table1.setValueAt(synPer, Table1.getSelectedRow(), 22);
//                                Table1.setValueAt(rsTmp1.getString("PR_STYLE"), Table1.getSelectedRow(), 23);
//
//                                Table1.changeSelection(Table1.getSelectedRow(), 12, false, false);
                            } else {
                                DataModelF.removeRow(Table1.getSelectedRow());
                                JOptionPane.showMessageDialog(null, "Party Code not found.");
                            }
//                        }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (EditMode == EITLERPGLOBAL.ADD || (EditMode == EITLERPGLOBAL.EDIT && clsFeltProductionApprovalFlow.IsCreator(603, txtProductionDocumentNo.getText().trim()))) {
                    if (Table1.getSelectedColumn() == 15) {
                        Table1.setValueAt(Table1.getValueAt(Table1.getSelectedRow(), 14), Table1.getSelectedRow(), 15);
                    }
                }
            }

            //=========================================       
            if (EditMode == EITLERPGLOBAL.ADD || (EditMode == EITLERPGLOBAL.EDIT && clsFeltProductionApprovalFlow.IsCreator(603, txtProductionDocumentNo.getText().trim()))) {
                if (Table1.getSelectedColumn() == 15 || Table1.getSelectedColumn() == 16) {
                    if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
                        try {
                            String pc = Table1.getValueAt(Table1.getSelectedRow(), 1).toString();
                            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=2 AND PR.WIP_PIECE_NO='" + pc + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')")) {
                                //System.out.println("SELECT PR.PR_THORITICAL_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.PR_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=2 AND PR.PR_PIECE_NO='" + pc + "' AND PR.PR_PIECE_STAGE='IN STOCK' AND PR.PR_GROUP NOT IN ('HDS','SDF')");
                                String tWeight = data.getStringValueFromDB("SELECT PR.WIP_THORITICAL_WEIGHT FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=2 AND PR.WIP_PIECE_NO='" + pc + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')");
                                Table1.setValueAt(tWeight, Table1.getSelectedRow(), 15);
                            }

                            // ADDED on 28/01/2019
                            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=3 AND PR.WIP_PIECE_NO='" + pc + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')")) {
                                //System.out.println("SELECT PR.PR_THORITICAL_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.PR_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=2 AND PR.PR_PIECE_NO='" + pc + "' AND PR.PR_PIECE_STAGE='IN STOCK' AND PR.PR_GROUP NOT IN ('HDS','SDF')");
                                String tenderWeight = data.getStringValueFromDB("SELECT PR.WIP_TENDER_WEIGHT FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=3 AND PR.WIP_PIECE_NO='" + pc + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')");
                                Table1.setValueAt(tenderWeight, Table1.getSelectedRow(), 15);
                            }
                            // ADDED on 28/01/2019

                            // ADDED on 04/01/2021
                            if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=4 AND PR.WIP_PIECE_NO='" + pc + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')")) {
                                double thWeight = data.getDoubleValueFromDB("SELECT PR.WIP_THORITICAL_WEIGHT FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=4 AND PR.WIP_PIECE_NO='" + pc + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')");
                                double acWeight = Double.parseDouble(Table1.getValueAt(Table1.getSelectedRow(), 14).toString());
                                double tagWeight = 0;
//                                if (thWeight >= acWeight) {
//                                    tagWeight = EITLERPGLOBAL.round(((thWeight*3)/100) + acWeight,2);
//                                } else {
//                                    if (acWeight >= (thWeight*103)/100) {
//                                        tagWeight = EITLERPGLOBAL.round(acWeight,2);
//                                    } else {
//                                        tagWeight = EITLERPGLOBAL.round((thWeight*103)/100,2);
//                                    }
//                                }
                                if (acWeight >= (thWeight * 103) / 100) {
                                    tagWeight = EITLERPGLOBAL.round(acWeight, 1);
                                } else {
                                    if ((acWeight * 103) / 100 < (thWeight * 103) / 100) {
                                        tagWeight = EITLERPGLOBAL.round((acWeight * 103) / 100, 1);
                                    } else {
                                        tagWeight = EITLERPGLOBAL.round((thWeight * 103) / 100, 1);
                                    }
                                }
                                Table1.setValueAt(tagWeight + "", Table1.getSelectedRow(), 15);
                            }
                            // ADDED on 04/01/2021
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }

        //=========================================
//        else {
//            System.out.println("other keys : " + Table1.getSelectedColumn());
//            if (Table1.getSelectedColumn() == 1) {
//                try {
//                    String pc = Table1.getValueAt(Table1.getSelectedRow(), 1).toString();
//                    
//                    int count=data.getIntValueFromDB("SELECT COUNT(PR_PIECE_NO) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+pc+"'");
//                    
//                    if(count<1) {
//                        DataModelF.removeRow(Table1.getSelectedRow());
//                        JOptionPane.showMessageDialog(null, "pIece not found");
//                    } else {
//                        
//                        ResultSet rsTmp1 = data.getConn().createStatement().executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+pc+"'");
//                        rsTmp1.first();
//                        
//                        Table1.setValueAt(rsTmp1.getString("PR_PARTY_CODE"), Table1.getSelectedRow(), 2);
//
////                        ResultSet rsTmp2 = data.getConn().createStatement().executeQuery("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+Table1.getValueAt(Table1.getSelectedRow(), 2).toString()+"'");
////                        rsTmp2.first();
////                        
////                        Table1.setValueAt(rsTmp2.getString("PARTY_NAME"), Table1.getSelectedRow(), 3);
//                        
//                        String pName = data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='"+Table1.getValueAt(Table1.getSelectedRow(), 2).toString()+"'");
//                        Table1.setValueAt(pName, Table1.getSelectedRow(), 3);
//
//                        Table1.setValueAt(rsTmp1.getString("PR_PRODUCT_CODE"), Table1.getSelectedRow(), 4);
//                        Table1.setValueAt(rsTmp1.getString("PR_DOC_NO"), Table1.getSelectedRow(), 5);
//                        Table1.setValueAt(EITLERPGLOBAL.formatDate(rsTmp1.getString("PR_ORDER_DATE")), Table1.getSelectedRow(), 6);
//                        Table1.setValueAt(rsTmp1.getString("PR_STYLE"), Table1.getSelectedRow(), 7);
//                        Table1.setValueAt(rsTmp1.getString("PR_GSM"), Table1.getSelectedRow(), 8);
//                        Table1.setValueAt(rsTmp1.getString("PR_GROUP"), Table1.getSelectedRow(), 9);
//                        Table1.setValueAt(rsTmp1.getString("PR_LENGTH"), Table1.getSelectedRow(), 10);
//                        Table1.setValueAt(rsTmp1.getString("PR_WIDTH"), Table1.getSelectedRow(), 11);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_GSM"), Table1.getSelectedRow(), 16);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_SQMTR"), Table1.getSelectedRow(), 17);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_LENGTH"), Table1.getSelectedRow(), 18);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_WIDTH"), Table1.getSelectedRow(), 19);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_WEIGHT"), Table1.getSelectedRow(), 20);
//        
//                        String synPer = data.getStringValueFromDB("SELECT SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '"+rsTmp1.getString("PR_PRODUCT_CODE")+"' AND (EFFECTIVE_TO='0000-00-00' OR EFFECTIVE_TO IS NULL) AND APPROVED=1 AND CANCELED=0");
//                        Table1.setValueAt(synPer, Table1.getSelectedRow(), 21);
//                        
//                        Table1.changeSelection(Table1.getSelectedRow(), 12, false, false);
//                    }
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        }
//        if(Table1.getSelectedColumn()==1)
//        {
//        if(evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10)
//        {
//            try {
//                FeltSalesPieceRegisterServiceImpl pieceS = new FeltSalesPieceRegisterServiceImpl();
//                //FeltSalesPieceRegister pieceDetail = pieceS.getPieceDetail(Table1.getValueAt(Table1.getSelectedRow(), 1).toString());
//                
//                if(pieceS.checkPiece(Table1.getValueAt(Table1.getSelectedRow(), 1).toString())==1)
//                {
//                    DataModelF.removeRow(Table1.getSelectedRow());
//                    JOptionPane.showMessageDialog(null, "piece not found");
//                }
//                else
//                {
//                    
//                    FeltSalesPieceRegister pieceDetail = pieceS.getPieceDetail(Table1.getValueAt(Table1.getSelectedRow(), 1).toString());
//                Table1.setValueAt(pieceDetail.getPrPartyCode(), Table1.getSelectedRow(), 2);
//                
//                PartyMasterServiceImpl partyMst = new PartyMasterServiceImpl();
//                DSalPartyMaster partyD = partyMst.getFeltPartyDetail(Table1.getValueAt(Table1.getSelectedRow(), 2).toString());
//                
//                Table1.setValueAt(partyD.getPartyName(), Table1.getSelectedRow(), 3);
//                
//                Table1.setValueAt(pieceDetail.getPrProductCode(), Table1.getSelectedRow(), 4);
//                Table1.setValueAt(pieceDetail.getPrStyle(), Table1.getSelectedRow(), 5);
//                Table1.setValueAt(pieceDetail.getPrLength(), Table1.getSelectedRow(), 6);
//                Table1.setValueAt(pieceDetail.getPrWidth(), Table1.getSelectedRow(), 7);
//                
//                Table1.changeSelection(Table1.getSelectedRow(), 8, false, false);
//                }    
//            }catch(Exception e)
//            {
//                e.printStackTrace();
//            }
//        }   
//        }
//        else
//        {
//            JOptionPane.showMessageDialog(null, "other colm found");
//            
//        }
    }//GEN-LAST:event_Table1KeyReleased

    private void Table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table1MouseClicked
        // TODO add your handling code here:
//        System.out.println("other keys : " + Table1.getSelectedColumn());
//            if (Table1.getSelectedColumn() != 1) {
//                try {
//                    String pc = Table1.getValueAt(Table1.getSelectedRow(), 1).toString();
//                    
//                    int count=data.getIntValueFromDB("SELECT COUNT(PR_PIECE_NO) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+pc+"'");
//                    
//                    if(count<1) {
//                        DataModelF.removeRow(Table1.getSelectedRow());
//                        JOptionPane.showMessageDialog(null, "piece not found");
//                    } else {
//                        
//                        ResultSet rsTmp1 = data.getConn().createStatement().executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+pc+"'");
//                        rsTmp1.first();
//                        
//                        Table1.setValueAt(rsTmp1.getString("PR_PARTY_CODE"), Table1.getSelectedRow(), 2);
//
////                        ResultSet rsTmp2 = data.getConn().createStatement().executeQuery("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+Table1.getValueAt(Table1.getSelectedRow(), 2).toString()+"'");
////                        rsTmp2.first();
////                        
////                        Table1.setValueAt(rsTmp2.getString("PARTY_NAME"), Table1.getSelectedRow(), 3);
//                        
//                        String pName = data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='"+Table1.getValueAt(Table1.getSelectedRow(), 2).toString()+"'");
//                        Table1.setValueAt(pName, Table1.getSelectedRow(), 3);
//
//                        Table1.setValueAt(rsTmp1.getString("PR_PRODUCT_CODE"), Table1.getSelectedRow(), 4);
//                        Table1.setValueAt(rsTmp1.getString("PR_DOC_NO"), Table1.getSelectedRow(), 5);
//                        Table1.setValueAt(EITLERPGLOBAL.formatDate(rsTmp1.getString("PR_ORDER_DATE")), Table1.getSelectedRow(), 6);
//                        Table1.setValueAt(rsTmp1.getString("PR_STYLE"), Table1.getSelectedRow(), 7);
//                        Table1.setValueAt(rsTmp1.getString("PR_GSM"), Table1.getSelectedRow(), 8);
//                        Table1.setValueAt(rsTmp1.getString("PR_GROUP"), Table1.getSelectedRow(), 9);
//                        Table1.setValueAt(rsTmp1.getString("PR_LENGTH"), Table1.getSelectedRow(), 10);
//                        Table1.setValueAt(rsTmp1.getString("PR_WIDTH"), Table1.getSelectedRow(), 11);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_GSM"), Table1.getSelectedRow(), 16);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_SQMTR"), Table1.getSelectedRow(), 17);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_LENGTH"), Table1.getSelectedRow(), 18);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_WIDTH"), Table1.getSelectedRow(), 19);
//                        Table1.setValueAt(rsTmp1.getString("PR_BILL_WEIGHT"), Table1.getSelectedRow(), 20);
//                        
//                        String synPer = data.getStringValueFromDB("SELECT SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '"+rsTmp1.getString("PR_PRODUCT_CODE")+"' AND (EFFECTIVE_TO='0000-00-00' OR EFFECTIVE_TO IS NULL) AND APPROVED=1 AND CANCELED=0");
//                        Table1.setValueAt(synPer, Table1.getSelectedRow(), 21);
//                        
//                        //Table1.changeSelection(Table1.getSelectedRow(), 8, false, false);
//                    }
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
    }//GEN-LAST:event_Table1MouseClicked

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        lblStatus.setText("Enter Remarks");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void btnSendFAmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendFAmailActionPerformed
        // TODO add your handling code here:
        //System.out.println("Sel Hierarchy : "+SelHierarchyID);

        System.out.println("finishing approved = " + ObjFeltFinishing.getAttribute("APPROVED").getInt());

        if (ObjFeltFinishing.getAttribute("APPROVED").getInt() == 1) {
            int value = JOptionPane.showConfirmDialog(this, " Are you sure? You want to send Final Approved mail to all users? ", "Confirmation Alert!", JOptionPane.YES_NO_OPTION);
            System.out.println("VALUE = " + value);
            if (value == 0) {
                try {
                    String DOC_NO = txtProductionDocumentNo.getText();
                    String DOC_DATE = txtFeltProductionDate.getText();
                    String Party_Code = "multiple";
                    int Hierarchy = (int) ObjFeltFinishing.getAttribute("HIERARCHY_ID").getVal();

                    System.out.println("ModuleId, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, SelHierarchyID, true " + 603 + "," + DOC_NO + "," + DOC_DATE + "," + Party_Code + "," + EITLERPGLOBAL.gNewUserID + "," + Hierarchy + "," + true);
                    System.out.println("Final Approved By : " + FinalApprovedBy);
                    String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, FinalApprovedBy, Hierarchy, true, EITLERPGLOBAL.gNewUserID);
                    System.out.println("Send Mail Responce : " + responce);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnSendFAmailActionPerformed

    private void jScrollPane4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane4KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4KeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table1;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnSendFAmail;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItemMending;
    private javax.swing.JMenuItem jMenuItemNeedling;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWeaving;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDayWeight;
    private javax.swing.JTextField txtDayWeightwithV;
    private javax.swing.JTextField txtDayWeightwithoutV;
    private javax.swing.JTextField txtFeltProductionDate;
    private javax.swing.JTextField txtFinishingDate;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMonthWeight;
    private javax.swing.JTextField txtPreviousWeight;
    private javax.swing.JTextField txtProductionDocumentNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalWeight;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {

        txtProductionDocumentNo.setEnabled(false);
        txtFeltProductionDate.setEnabled(false);
        //txtRemarks.setEnabled(false);
        txtRemarks.setEnabled(pStat);
        //Table1.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);

        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtFeltProductionDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtProductionDocumentNo.setText("");
        txtRemarks.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        txtPreviousWeight.setText(txtMonthWeight.getText());
        txtDayWeight.setText("0.00");
        txtTotalWeight.setText(txtMonthWeight.getText());
        FormatGrid2();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 603)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        btnSendFAmail.setEnabled(false);
        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltFinishing.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                    lblTitle.setForeground(Color.WHITE);
                    btnSendFAmail.setEnabled(true);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltFinishing.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String productionDate = EITLERPGLOBAL.formatDate(ObjFeltFinishing.getAttribute("PRODUCTION_DATE").getString());
            String documentNo = ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString();
            String rmk = ObjFeltFinishing.getAttribute("HEADER_REMARK").getString();
            lblTitle.setText(" FELT PRODUCTION FINISHING DETAILS - " + documentNo);
            lblRevNo.setText(Integer.toString((int) ObjFeltFinishing.getAttribute("REVISION_NO").getVal()));
            txtMonthWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltFinishing.getAttribute("TOTAL_WEIGHT").getVal(), 2)));
            txtPreviousWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltFinishing.getAttribute("PREVIOUS_WEIGHT").getVal(), 2)));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltFinishing.getAttribute("HIERARCHY_ID").getVal());

            txtFinishingDate.setText(EITLERPGLOBAL.formatDate(ObjFeltFinishing.getAttribute("FINAL_APPROVAL_DATE").getString()));

            DoNotEvaluate = true;

            //GenerateHierarchyCombo();
            FormatGrid2();
//            txtFeltProductionDate.setText(productionDate);
//            txtProductionDocumentNo.setText(documentNo);
//            
            //Now Generate Table
            for (int i = 1; i <= ObjFeltFinishing.hmFeltFinishingDetails.size(); i++) {
                clsFeltFinishingDetails ObjFeltFinishingDetails = (clsFeltFinishingDetails) ObjFeltFinishing.hmFeltFinishingDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];

                txtFeltProductionDate.setText(productionDate);
                txtProductionDocumentNo.setText(documentNo);
                txtRemarks.setText(rmk);

                rowData[0] = Integer.toString(i);
                String PieceNo = ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString();
                rowData[1] = ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString();

                ResultSet rsTmp1 = data.getConn().createStatement().executeQuery("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");
                rsTmp1.first();
                //rowData[2]=rsTmp1.getString("PR_PARTY_CODE");
                rowData[2] = data.getStringValueFromDB("SELECT PR_PARTY_CODE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");

//                ResultSet rsTmp2 = data.getConn().createStatement().executeQuery("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+rsTmp1.getString("PR_PARTY_CODE")+"'");
//                rsTmp2.first();
//                rowData[3]=rsTmp2.getString("PARTY_NAME");
                rowData[3] = data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND PARTY_CODE='" + rsTmp1.getString("PR_PARTY_CODE") + "'");

                rowData[4] = rsTmp1.getString("PR_PRODUCT_CODE");
                rowData[5] = rsTmp1.getString("PR_DOC_NO");
                rowData[6] = EITLERPGLOBAL.formatDate(rsTmp1.getString("PR_ORDER_DATE"));
                rowData[7] = rsTmp1.getString("PR_STYLE");
                rowData[8] = rsTmp1.getString("PR_GSM");
                rowData[9] = rsTmp1.getString("PR_GROUP");
                rowData[10] = rsTmp1.getString("PR_LENGTH");
                rowData[11] = rsTmp1.getString("PR_WIDTH");

                rowData[12] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("LENGTH").getVal(), 2));
                rowData[13] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("WIDTH").getVal(), 2));
                rowData[14] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("WEIGHT").getVal(), 2));
                rowData[15] = Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("TAG_WEIGHT").getVal(), 2));

                rowData[16] = rsTmp1.getString("PR_BILL_GSM");
                rowData[17] = rsTmp1.getString("PR_BILL_SQMTR");
                rowData[18] = rsTmp1.getString("PR_BILL_LENGTH");
                rowData[19] = rsTmp1.getString("PR_BILL_WIDTH");
                rowData[20] = rsTmp1.getString("PR_BILL_WEIGHT");
                rowData[21] = rsTmp1.getString("PR_BILL_PRODUCT_CODE");

                rowData[22] = data.getStringValueFromDB("SELECT SYN_PER FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE PRODUCT_CODE = '" + rsTmp1.getString("PR_PRODUCT_CODE").substring(0, 6) + "' AND (EFFECTIVE_TO='0000-00-00' OR EFFECTIVE_TO IS NULL) AND APPROVED=1 AND CANCELED=0");

                rowData[23] = rsTmp1.getString("PR_BILL_STYLE");

                
                rowData[24] = rsTmp1.getString("PR_FELT_RATE");
                rowData[25] = rsTmp1.getString("PR_FELT_VALUE_WITHOUT_DISCOUNT");

                rowData[26] = ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString();
                String ocYearMonth = data.getStringValueFromDB("SELECT WIP_OC_MONTHYEAR FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + PieceNo + "'");
                rowData[27] = ocYearMonth;
                
                rowData[28] = data.getStringValueFromDB("SELECT PR_THORITICAL_WEIGHT FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");

                DataModelF.addRow(rowData);
            }
            //set day weight and total weight in text boxes
            double dayWeight = 0, previousWeight = 0, dayWeightWithV = 0, dayWeightWithoutV = 0;
            for (int i = 0; i < Table1.getRowCount(); i++) {
                String str = Table1.getValueAt(i, 1).toString();
                //System.out.println(str);
                //System.out.println(str.substring(Math.max(str.length()-1, 0)));
//                if (str.substring(Math.max(str.length() - 1, 0)).equals("V")) {
//                    if (Table1.getValueAt(i, 15) != null) {
//                        dayWeightWithV = dayWeightWithV + Double.parseDouble((String) Table1.getValueAt(i, 15));
//                    }
//                } else {
//                    if (Table1.getValueAt(i, 15) != null) {
//                        dayWeightWithoutV = dayWeightWithoutV + Double.parseDouble((String) Table1.getValueAt(i, 15));
//                    }
//                }

                if (str.contains("V")) {
                    if (Table1.getValueAt(i, 15) != null) {
                        dayWeightWithV = dayWeightWithV + Double.parseDouble((String) Table1.getValueAt(i, 15));
                    }
                } else {
                    if (Table1.getValueAt(i, 15) != null) {
                        dayWeightWithoutV = dayWeightWithoutV + Double.parseDouble((String) Table1.getValueAt(i, 15));
                    }
                }
                if (Table1.getValueAt(i, 15) != null) {
                    dayWeight = dayWeight + Double.parseDouble((String) Table1.getValueAt(i, 15));
                }
            }
            previousWeight = Double.parseDouble(txtPreviousWeight.getText());
            txtDayWeightwithV.setText(Double.toString(EITLERPGLOBAL.round(dayWeightWithV, 2)));
            //txtDayWeightwithoutV.setText(Double.toString(EITLERPGLOBAL.round(dayWeightWithoutV,2)));
            //txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeight,2)));
            txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeightWithoutV, 2)));
            //txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(previousWeight+dayWeight,2)));
            txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(previousWeight + dayWeightWithoutV, 2)));

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(603, documentNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltFinishing.getHistoryList(txtProductionDocumentNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltFinishing ObjFeltFinishing = (clsFeltFinishing) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltFinishing.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(2, (int) ObjFeltFinishing.getAttribute("UPDATED_BY").getVal());
                rowData[2] = ObjFeltFinishing.getAttribute("ENTRY_DATE").getString();

                String ApprovalStatus = "";

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                    FinalApprovedBy = (int) ObjFeltFinishing.getAttribute("UPDATED_BY").getVal();
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltFinishing.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltFinishing.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

//    private void FormatGrid() {
//        try {
//            cmdAdd.requestFocus();
//            
//            DataModel=new EITLTableModel();
//            Table.removeAll();
//            
//            Table.setModel(DataModel);
//            TableColumnModel ColModel=Table.getColumnModel();
//            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//            
//            //Add Columns to it
//            DataModel.addColumn("Sr. No.");
//            DataModel.addColumn("Piece No");
//            DataModel.addColumn("Party Code");
//            DataModel.addColumn("Length");
//            DataModel.addColumn("Width");
//            DataModel.addColumn("Weight");
//            DataModel.addColumn("Remarks");
//            
//            DataModel.SetReadOnly(0);
//            DataModel.SetReadOnly(2);
//            
//            if(EditMode!=0){
//                //------- Install Table List Selection Listener ------//
//                Table.getColumnModel().getSelectionModel().addListSelectionListener(
//                new ListSelectionListener() {
//                    public void valueChanged(ListSelectionEvent e) {
//                        int column=Table.getSelectedColumn();
//                        String strVar=DataModel.getVariable(column);
//                        //=============== Cell Editing Routine =======================//
//                        Table.editCellAt(Table.getSelectedRow(),column);
//                        if(Table.getEditorComponent() instanceof JTextComponent) {
//                            ((JTextComponent)Table.getEditorComponent()).selectAll();
//                        }
//                        //============= Cell Editing Routine Ended =================//
//                    }
//                });
//                
//                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
//                Table.getModel().addTableModelListener(new TableModelListener() {
//                    public void tableChanged(TableModelEvent e) {
//                        if (e.getType() == TableModelEvent.UPDATE) {
//                            int row = Table.getSelectedRow();
//                            int column = e.getColumn();
//                            
//                            //=========== Cell Update Prevention Check ===========//
//                            String curValue=((String)Table.getValueAt(row, column)).trim();
//                            if(curValue.equals("")) {
//                                return;
//                            }
//                            //====================================================//
//                            if(DoNotEvaluate) {
//                                return;
//                            }
//                            
//                            if(column==1){
//                                String pieceNo=((String)Table.getValueAt(row,1)).trim();
//                                Table.setValueAt(ObjFeltFinishing.getPartyCode(pieceNo), row, 2);
//                            }
//                            
//                            //---seting total weight to dayWeight and total Weight textbox----------------
//                            double dayWeight=0,totalWeight=0, previousWeight=0, dayTotalWeight=0, monthWeight=0;
//                            dayTotalWeight=Double.parseDouble(txtDayWeight.getText().trim());
//                            monthWeight=Double.parseDouble(txtMonthWeight.getText().trim());
//                            
//                            for(int i=0;i<Table.getRowCount();i++) {
//                                if(Table.getValueAt(i,3)!=null) {
//                                    dayWeight=dayWeight+Double.parseDouble(((String)Table.getValueAt(i,5)).trim());
//                                    totalWeight=monthWeight+dayTotalWeight;
//                                }
//                            }
//                            
//                            txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeight,2)));
//                            txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(totalWeight,5)));
//                            //----------------------------------------------------------------------------------
//                        }
//                    }
//                });
//            }
//        }catch(Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
//        }
//    }
    private void FormatGrid2() {
        try {
            cmdAdd.requestFocus();

            DataModelF = new EITLTableModel();
            Table1.removeAll();

            Table1.setModel(DataModelF);
            Table1.setAutoResizeMode(0);

            DataModelF.addColumn("SrNo"); //0 - Read Only
            DataModelF.addColumn("Piece No"); //1
            DataModelF.addColumn("Party Code");
            DataModelF.addColumn("Party Name");
            DataModelF.addColumn("Product Code"); //2
            DataModelF.addColumn("Order No");
            DataModelF.addColumn("Order Date");
            DataModelF.addColumn("Style Code"); //3
            DataModelF.addColumn("GSM"); //3
            DataModelF.addColumn("Group Name"); //3
            DataModelF.addColumn("Order Length(mtr)");
            DataModelF.addColumn("Order Width(mtr)"); //4
            DataModelF.addColumn("Floor Length(mtr)"); //5
            DataModelF.addColumn("Floor Width(mtr)");
            DataModelF.addColumn("Finished Weight(kg)"); //6
            DataModelF.addColumn("Tag Weight(kg)"); //6
            DataModelF.addColumn("Bill GSM"); //5
            DataModelF.addColumn("Bill Sq.Mtr");
            DataModelF.addColumn("Bill Length(mtr)");
            DataModelF.addColumn("Bill Width(mtr)"); //4
            DataModelF.addColumn("Bill Weight(kg)");
            DataModelF.addColumn("Bill Prod Code");//6
            DataModelF.addColumn("Synthetic %");
            DataModelF.addColumn("Bill Style Code");//6
            DataModelF.addColumn("Felt Rate");//6
            DataModelF.addColumn("Felt Value(without Discount)");//6            

            DataModelF.addColumn("Piece No");
            DataModelF.addColumn("OC MnthYr");
            
            DataModelF.addColumn("Theoretical Weight");

            DataModelF.SetVariable(0, "SrNo"); //0 - Read Only
            DataModelF.SetVariable(1, "Piece No"); //1
            DataModelF.SetVariable(2, "Party Code");
            DataModelF.SetVariable(3, "Party Name");
            DataModelF.SetVariable(4, "Product Code"); //2
            DataModelF.SetVariable(5, "Order No");
            DataModelF.SetVariable(6, "Order Date"); //2
            DataModelF.SetVariable(7, "Style Code"); //3
            DataModelF.SetVariable(8, "GSM"); //3
            DataModelF.SetVariable(9, "Group Name"); //3
            DataModelF.SetVariable(10, "Order Length(mtr)");
            DataModelF.SetVariable(11, "Order Width(mtr)"); //4
            DataModelF.SetVariable(12, "Floor Length(mtr)"); //5
            DataModelF.SetVariable(13, "Floor Width(mtr)");
            DataModelF.SetVariable(14, "Finished Weight(kg)"); //6
            DataModelF.SetVariable(15, "Tag Weight(kg)"); //6
            DataModelF.SetVariable(16, "Bill GSM"); //5
            DataModelF.SetVariable(17, "Bill Sq.Mtr");
            DataModelF.SetVariable(18, "Bill Length(mtr)");
            DataModelF.SetVariable(19, "Bill Width(mtr)"); //4
            DataModelF.SetVariable(20, "Bill Weight(kg)"); //6
            DataModelF.SetVariable(21, "Bill Prod Code");
            DataModelF.SetVariable(22, "Synthetic Per");
            DataModelF.SetVariable(23, "Bill Style Code");
            DataModelF.SetVariable(24, "Felt Rate");
            DataModelF.SetVariable(25, "Felt Value");

            DataModelF.SetReadOnly(0);
            DataModelF.SetReadOnly(1);
            DataModelF.SetReadOnly(2);
            DataModelF.SetReadOnly(3);
            DataModelF.SetReadOnly(4);
            DataModelF.SetReadOnly(5);
            DataModelF.SetReadOnly(6);
            DataModelF.SetReadOnly(7);
            DataModelF.SetReadOnly(8);
            DataModelF.SetReadOnly(9);
            DataModelF.SetReadOnly(10);
            DataModelF.SetReadOnly(11);
            DataModelF.SetReadOnly(16);
            DataModelF.SetReadOnly(17);
            DataModelF.SetReadOnly(18);
            DataModelF.SetReadOnly(19);
            DataModelF.SetReadOnly(20);
            DataModelF.SetReadOnly(21);
            DataModelF.SetReadOnly(22);
            DataModelF.SetReadOnly(23);
            DataModelF.SetReadOnly(24);
            DataModelF.SetReadOnly(25);

            DataModelF.SetReadOnly(26);
            DataModelF.SetReadOnly(27);
            
            DataModelF.SetReadOnly(28);
//            if (EditMode == EITLERPGLOBAL.EDIT ){
//                if(!clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)){
//                DataModelF.SetReadOnly(1);
//                DataModelF.SetReadOnly(12);
//                DataModelF.SetReadOnly(13);
//                DataModelF.SetReadOnly(14);
//                DataModelF.SetReadOnly(15);
//                }
//            }

            Table1.getColumnModel().getColumn(0).setMinWidth(40);
            Table1.getColumnModel().getColumn(0).setMaxWidth(40);
            Table1.getColumnModel().getColumn(1).setMinWidth(70);
            Table1.getColumnModel().getColumn(1).setMaxWidth(70);
            Table1.getColumnModel().getColumn(2).setMinWidth(80);
            Table1.getColumnModel().getColumn(2).setMaxWidth(80);
            Table1.getColumnModel().getColumn(3).setMinWidth(120);
            Table1.getColumnModel().getColumn(4).setMinWidth(80);
            Table1.getColumnModel().getColumn(4).setMaxWidth(80);
            Table1.getColumnModel().getColumn(5).setMinWidth(80);
            Table1.getColumnModel().getColumn(5).setMaxWidth(80);
            Table1.getColumnModel().getColumn(6).setMinWidth(100);
            Table1.getColumnModel().getColumn(6).setMaxWidth(100);
            Table1.getColumnModel().getColumn(7).setMinWidth(100);
            Table1.getColumnModel().getColumn(7).setMaxWidth(100);
            Table1.getColumnModel().getColumn(8).setMinWidth(80);
            Table1.getColumnModel().getColumn(8).setMaxWidth(80);
            Table1.getColumnModel().getColumn(9).setMinWidth(80);
            Table1.getColumnModel().getColumn(9).setMaxWidth(80);
            Table1.getColumnModel().getColumn(10).setMinWidth(80);
            Table1.getColumnModel().getColumn(10).setMaxWidth(80);
            Table1.getColumnModel().getColumn(11).setMinWidth(80);
            Table1.getColumnModel().getColumn(11).setMaxWidth(80);
            Table1.getColumnModel().getColumn(12).setMinWidth(80);
            Table1.getColumnModel().getColumn(12).setMaxWidth(80);
            Table1.getColumnModel().getColumn(13).setMinWidth(80);
            Table1.getColumnModel().getColumn(13).setMaxWidth(80);
            //Table1.getColumnModel().getColumn(14).setMinWidth(80);
            //Table1.getColumnModel().getColumn(14).setMaxWidth(80);            
            Table1.getColumnModel().getColumn(16).setMinWidth(80);
            Table1.getColumnModel().getColumn(17).setMinWidth(80);
            Table1.getColumnModel().getColumn(18).setMinWidth(80);
            Table1.getColumnModel().getColumn(19).setMinWidth(80);
            Table1.getColumnModel().getColumn(20).setMinWidth(80);
            Table1.getColumnModel().getColumn(21).setMinWidth(80);
            Table1.getColumnModel().getColumn(22).setMinWidth(80);
            Table1.getColumnModel().getColumn(23).setMinWidth(80);
            Table1.getColumnModel().getColumn(24).setMinWidth(80);
            Table1.getColumnModel().getColumn(25).setMinWidth(120);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=603 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=603 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(603, ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(603, txtProductionDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(603, txtProductionDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(603, txtProductionDocumentNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(603, ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(603, FromUserID, ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(603, txtProductionDocumentNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6075, 60751)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6075, 60752)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6075, 60753)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6075, 60755)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 603;
        aList.FirstFreeNo = 200;

        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        FormatGrid2();

        SelPrefix = aList.Prefix; //Selected Prefix;
        SelSuffix = aList.Suffix;
        FFNo = aList.FirstFreeNo;

        SetupApproval();
        //Display newly generated document no.
        txtProductionDocumentNo.setText(clsFeltFinishing.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 603, FFNo, false));
        txtFeltProductionDate.setText(EITLERPGLOBAL.getCurrentDate());

        lblTitle.setText("FELT PRODUCTION FINISHING DETAILS - " + txtProductionDocumentNo.getText());
        lblTitle.setBackground(Color.GRAY);

    }

    private void Edit() {
        String productionDocumentNo = (String) ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getObj();
        if (ObjFeltFinishing.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (clsFeltProductionApprovalFlow.IsCreator(603, productionDocumentNo)) {
                SetFields(true);
            } else {
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltFinishing.CanDelete(txtProductionDocumentNo.getText(), txtFeltProductionDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, ObjFeltFinishing.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String productionDate, productionDocumentNo, Remark;
        float Tagweight = 0, weight = 0, width = 0, length = 0;
        int i = 0, j = 0;
        String pieceNo = "", formNo = "", partyCode = "", remarks = "", styleCd = "", billStyleCd = "";
        String TagweightString = "", weightString = "", widthString = "", lengthString = "";
        productionDate = txtFeltProductionDate.getText().trim();
        productionDocumentNo = txtProductionDocumentNo.getText().trim();
        Remark = txtRemarks.getText().trim();

        //Check the no. of items in table
        if (Table1.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Finishing Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // check duplicate piece no in table
            for (int k = 0; k <= Table1.getRowCount() - 1; k++) {
                for (int l = k; l <= Table1.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table1.getValueAt(k, 1)).trim().equals(((String) Table1.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            ObjFeltFinishing.hmFeltFinishingDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table1.getRowCount() - 1; i++) {
                j++;
                pieceNo = ((String) Table1.getValueAt(i, 1)).trim().toUpperCase();
                if (pieceNo.equals("") || pieceNo.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Piece No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                String Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP!='SDF' AND COALESCE(WIP_WVG_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pieceNo + "'");
                if (!"".equals(Check_dates_notSDF)) {
                    JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE : " + pieceNo + " is compulsory.");
                    return;
                }

                Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP!='SDF' AND COALESCE(WIP_MND_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pieceNo + "'");
                if (!"".equals(Check_dates_notSDF)) {
                    JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE : " + pieceNo + " is compulsory.");
                    return;
                }

//                Check_dates_notSDF = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP!='SDF' AND (PR_NDL_DATE='' OR PR_NDL_DATE = '0000-00-00') AND PR_PIECE_NO='"+pieceNo+"'");
                Check_dates_notSDF = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP NOT IN ('SDF','HDS','M35','M50') AND COALESCE(WIP_NDL_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_STAGE='FINISHING' AND WIP_PIECE_NO='" + pieceNo + "'");
                if (!"".equals(Check_dates_notSDF)) {
                    JOptionPane.showMessageDialog(null, "Needling Date not updated, Needling Date to FINISHING for PIECE : " + pieceNo + " is compulsory.");
                    return;
                }

                String Check_dates_HDS = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP='HDS' AND COALESCE(WIP_WVG_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pieceNo + "'");
                if (!"".equals(Check_dates_HDS)) {
                    JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE  : " + pieceNo + " (HDS) is compulsory.");
                    return;
                }

                Check_dates_HDS = data.getStringValueFromDB("SELECT WIP_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_GROUP='HDS' AND COALESCE(WIP_MND_DATE,'0000-00-00') = '0000-00-00' AND WIP_PIECE_NO='" + pieceNo + "'");
                if (!"".equals(Check_dates_HDS)) {
                    JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE  : " + pieceNo + " (HDS) is compulsory.");
                    return;
                }

                if (!OpgReject.isSelected()) {
                    String IsAmendPending = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_HEADER PH,PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_DETAIL PD "
                            + "WHERE PD.PIECE_NO='" + pieceNo + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                    if (!IsAmendPending.equals("")) {
                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + pieceNo + " with DOC No : " + IsAmendPending + ". \nThis Piece is on Hold, Please contact with Sales");
                        return;
                    }

                    String IsAmendPending2 = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP PD "
                            + "WHERE PD.PIECE_NO='" + pieceNo + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                    if (!IsAmendPending2.equals("")) {
                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + pieceNo + " with DOC No : " + IsAmendPending2 + ". \nThis Piece is on Hold, Please contact with Sales");
                        return;
                    }

                    String IsDiversionPending = data.getStringValueFromDB("SELECT SD_ORDER_NO FROM PRODUCTION.FELT_SALES_ORDER_DIVERSION where D_PIECE_NO='" + pieceNo + "' AND APPROVED=0 AND CANCELED=0");
                    if (!IsDiversionPending.equals("")) {
                        JOptionPane.showMessageDialog(null, "Diversion is Pending for Piece No " + pieceNo + " with DOC No : " + IsDiversionPending + ". \nThis Piece cannot processed right now.");
                        return;
                    }

                    String IsDelinkPending = data.getStringValueFromDB("select A.PIECE_AMEND_NO from PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_DELINK A,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_DELINK B WHERE A.APPROVED=0 AND A.CANCELED!=1 AND B.PIECE_NO='" + (pieceNo) + "' AND A.PIECE_AMEND_NO=B.PIECE_AMEND_NO");
                    if (!IsDelinkPending.equals("")) {
                        JOptionPane.showMessageDialog(null, "DELINK Approval is Pending for Piece No " + (pieceNo) + " with DOC No : " + IsDelinkPending + ". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    }
                }

                j++;
                partyCode = ((String) Table1.getValueAt(i, 2)).trim();
                if (partyCode.equals("") || partyCode.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Party Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                styleCd = ((String) Table1.getValueAt(i, 7)).trim();
                if (styleCd.equals("") || styleCd.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Style Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                lengthString = ((String) Table1.getValueAt(i, 12)).trim();
                if (lengthString.equals("") || lengthString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Length of Felt.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    length = Float.parseFloat(lengthString);
                }

                j++;
                widthString = ((String) Table1.getValueAt(i, 13)).trim();
                if (widthString.equals("") || widthString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Width of Felt.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    width = Float.parseFloat(widthString);
                }

                j++;
                weightString = ((String) Table1.getValueAt(i, 14)).trim();
                if (weightString.equals("") || weightString.equals(null)) {
//                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Weight of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
//                    return;
                    weight = Float.parseFloat(String.valueOf(0));
                } else {
                    weight = Float.parseFloat(weightString);
                }

                j++;
                TagweightString = ((String) Table1.getValueAt(i, 15)).trim();
                if (TagweightString.equals("") || TagweightString.equals(null)) {
//                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Weight of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
//                    return;
                    Tagweight = Float.parseFloat(String.valueOf(0));
                } else {
                    Tagweight = Float.parseFloat(TagweightString);
                }

                double order_weigth = Double.parseDouble(weightString);
                double TagOrder_weigth = Double.parseDouble(TagweightString);

                //if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.PR_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND=2 AND PR.PR_PIECE_NO='" + pieceNo + "' AND PR.PR_GROUP NOT IN ('HDS','SDF')")) {
                // ADDED on 28/01/2019 modified on 04/01/2021 for indicator 4
                if (!data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER PR,DINESHMILLS.D_SAL_PARTY_MASTER PM WHERE PR.WIP_PARTY_CODE=PM.PARTY_CODE AND PM.TAGGING_APPROVAL_IND IN (2,3,4) AND PR.WIP_PIECE_NO='" + pieceNo + "' AND PR.WIP_GROUP NOT IN ('HDS','SDF')")) {
                    if (TagOrder_weigth < order_weigth) {
                        JOptionPane.showMessageDialog(this, "Billed(Tag) Weight cannot less than Original Weight.");
                        return;
                    }
                }

                j++;
                billStyleCd = ((String) Table1.getValueAt(i, 23)).trim();
                if (billStyleCd.equals("") || billStyleCd.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Bill Style Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j = 0;
                //remarks = ((String)Table.getValueAt(i, 6)).trim();

                // check piece no is already finished?
                if (EditMode == EITLERPGLOBAL.ADD) {
                    if (ObjFeltFinishing.checkPieceNoInDB(pieceNo)) {
                        JOptionPane.showMessageDialog(frmFeltFinishing.this, "Piece No." + pieceNo + " Is Already Finished.", " Piece No Already Exists", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                // check piece no is already finished?
                if (EditMode == EITLERPGLOBAL.EDIT) {
                    if (ObjFeltFinishing.checkPieceNoInDB(pieceNo, productionDate)) {
                        JOptionPane.showMessageDialog(frmFeltFinishing.this, "Piece No." + pieceNo + " Is Already Finished.", " Piece No Already Exists", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                String machineNo = data.getStringValueFromDB("SELECT WIP_MACHINE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER  WHERE WIP_PIECE_NO='" + pieceNo + "' ");
                String positionNo = data.getStringValueFromDB("SELECT WIP_POSITION_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER  WHERE WIP_PIECE_NO='" + pieceNo + "' ");

                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CLOSE_IND=1 AND PARTY_CODE='" + partyCode + "' ")) {
                    JOptionPane.showMessageDialog(null, "Party closed in Party Master at Row : " + (i + 1));
                    return;
                } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' ")) {
                    JOptionPane.showMessageDialog(null, "Party Machine closed in Machine Master at Row : " + (i + 1));
                    return;
                } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE POSITION_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' AND MM_MACHINE_POSITION='" + positionNo + "' ")) {
                    JOptionPane.showMessageDialog(null, "Party Machine Position closed in Machine Master at Row : " + (i + 1));
                    return;
                }

                clsFeltFinishingDetails ObjFeltFinishingDetails = new clsFeltFinishingDetails();

                ObjFeltFinishingDetails.setAttribute("PRODUCTION_PIECE_NO", pieceNo);
                ObjFeltFinishingDetails.setAttribute("PRODUCTION_PARTY_CODE", partyCode);
                ObjFeltFinishingDetails.setAttribute("LENGTH", length);
                ObjFeltFinishingDetails.setAttribute("WIDTH", width);
                ObjFeltFinishingDetails.setAttribute("WEIGHT", weight);
                ObjFeltFinishingDetails.setAttribute("TAG_WEIGHT", Tagweight);
                ObjFeltFinishingDetails.setAttribute("STYLE_CODE", styleCd);
                ObjFeltFinishingDetails.setAttribute("BILL_STYLE_CODE", billStyleCd);
                //ObjFeltFinishingDetails.setAttribute("REMARKS",remarks);

                ObjFeltFinishing.hmFeltFinishingDetails.put(Integer.toString(ObjFeltFinishing.hmFeltFinishingDetails.size() + 1), ObjFeltFinishingDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltFinishing.setAttribute("PRODUCTION_DATE", productionDate);
        ObjFeltFinishing.setAttribute("PRODUCTION_DOCUMENT_NO", productionDocumentNo);
        ObjFeltFinishing.setAttribute("HEADER_REMARK", Remark);
        ObjFeltFinishing.setAttribute("PRODUCTION_FORM_NO", formNo);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltFinishing.Insert()) {

//                if (OpgFinal.isSelected()) {
//                    try {
//                        Auto_PI();
//                        String DOC_NO = txtProductionDocumentNo.getText();
//                        String DOC_DATE = txtFeltProductionDate.getText();
//                        String Party_Code = "multiple";
//
//                        String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true, 0);
//                        System.out.println("Send Mail Responce : " + responce);
//
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//
//                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltFinishing.this, "Error occured while saving. Error is " + ObjFeltFinishing.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltFinishing.Update()) {

//                if (OpgFinal.isSelected()) {
//                    try {
//                        Auto_PI();
//                        String DOC_NO = txtProductionDocumentNo.getText();
//                        String DOC_DATE = txtFeltProductionDate.getText();
//                        String Party_Code = "multiple";
//
////                        String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true, 0);
////                        System.out.println("Send Mail Responce : " + responce);
//
//                    } catch (Exception e) {
//                        e.printStackTrace();
//                    }
//                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltFinishing.this, "Error occured while saving editing. Error is " + ObjFeltFinishing.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjFeltFinishing.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltFinishing.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltFinishing.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltFinishing.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltFinishing.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        //ObjFeltFinishing.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltFinishing.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

//        if(EditMode==EITLERPGLOBAL.ADD) {
//            ObjFeltFinishing.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
//            ObjFeltFinishing.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
//        }else {
//            ObjFeltFinishing.setAttribute("CREATED_BY", (int)ObjFeltFinishing.getAttribute("CREATED_BY").getVal());
//            ObjFeltFinishing.setAttribute("CREATED_DATE", ObjFeltFinishing.getAttribute("CREATED_DATE").getString());
//            ObjFeltFinishing.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
//        }
        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltFinishing.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltFinishing.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            //ObjFeltFinishing.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            //ObjFeltFinishing.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
            ObjFeltFinishing.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltFinishing.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.FeltFinishing.frmFindFeltFinishing", true);
        frmFindFeltFinishing ObjFindFeltFinishing = (frmFindFeltFinishing) ObjLoader.getObj();

        if (ObjFindFeltFinishing.Cancelled == false) {
            if (!ObjFeltFinishing.Filter(ObjFindFeltFinishing.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltFinishing.this, " No records found.", "Find Felt Finishing Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String docNo) {
        ObjFeltFinishing.Filter("AND PROD_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find details by piece no.
    public void Find(String pieceNo, String prodDate) {
        ObjFeltFinishing.Filter("AND PROD_PIECE_NO+0='" + pieceNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindByPiece(String pieceNo) {
        ObjFeltFinishing.Filter("AND PROD_PIECE_NO+0='" + pieceNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltFinishing.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=603 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltFinishing.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltFinishing.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltFinishing.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltFinishing.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
//        DataModel.ClearAllReadOnly();
//        Table1.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

    private void PreviewReport() {
        String prodNo = txtProductionDocumentNo.getText().trim();
        String prodDate = EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText());

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

//            String strSQL = "SELECT PROD_DATE,PROD_PARTY_CODE,PARTY_NAME,PROD_PIECE_NO,LENGTH,WIDTH,WEIGHT,SYN_PER,STYLE,GRUP,ITEM_CODE,ITEM_DESC,TOTAL_LENGTH,TOTAL_WIDTH,TOTAL_WEIGHT ";
//            strSQL += "FROM (SELECT PROD_DATE,PROD_PIECE_NO,PROD_PARTY_CODE,LENGTH,WIDTH,WEIGHT FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DATE = '"+prodDate+"' AND PROD_DOC_NO='"+prodNo+"' AND PROD_DEPT='FELT FINISHING' AND APPROVED=1 AND CANCELED=0) D ";
//            strSQL += "LEFT JOIN (SELECT PR_STYLE AS STYLE,PR_PRODUCT_CODE AS PRODUCT_CODE,PR_PIECE_NO AS PIECE_NO,PR_PARTY_CODE AS PARTY_CD FROM PRODUCTION.FELT_SALES_PIECE_REGISTER) R ON R.PARTY_CD = D.PROD_PARTY_CODE AND R.PIECE_NO = D.PROD_PIECE_NO ";
//            strSQL += "LEFT JOIN (SELECT PARTY_CODE, TRIM(PARTY_NAME) PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0) AS P ON P.PARTY_CODE = D.PROD_PARTY_CODE ";
//            strSQL += "LEFT JOIN (SELECT COALESCE(SUM(LENGTH),0) AS TOTAL_LENGTH FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'FELT FINISHING' AND MONTH(PROD_DATE)=MONTH('"+prodDate+"') AND YEAR(PROD_DATE)=YEAR('"+prodDate+"') AND PROD_DATE<='"+prodDate+"' AND PROD_DOC_NO<='"+prodNo+"' AND APPROVED=1) AS TL ON R.PARTY_CD = D.PROD_PARTY_CODE ";
//            strSQL += "LEFT JOIN (SELECT COALESCE(SUM(WIDTH),0) AS TOTAL_WIDTH FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'FELT FINISHING' AND MONTH(PROD_DATE)=MONTH('"+prodDate+"') AND YEAR(PROD_DATE)=YEAR('"+prodDate+"') AND PROD_DATE<='"+prodDate+"' AND PROD_DOC_NO<='"+prodNo+"' AND APPROVED=1) AS TW ON R.PARTY_CD = D.PROD_PARTY_CODE ";
//            strSQL += "LEFT JOIN (SELECT COALESCE(SUM(WEIGHT),0) AS TOTAL_WEIGHT FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'FELT FINISHING' AND MONTH(PROD_DATE)=MONTH('"+prodDate+"') AND YEAR(PROD_DATE)=YEAR('"+prodDate+"') AND PROD_DATE<='"+prodDate+"' AND PROD_DOC_NO<='"+prodNo+"' AND APPROVED=1) AS WT ON R.PARTY_CD = D.PROD_PARTY_CODE ";
//            strSQL += "LEFT JOIN (SELECT PRODUCT_CODE AS ITEM_CODE,TRIM(PRODUCT_DESC) ITEM_DESC,SYN_PER,GROUP_NAME AS GRUP FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE (EFFECTIVE_TO='0000-00-00' OR EFFECTIVE_TO IS NULL) AND APPROVED=1 AND CANCELED=0) AS Q ON SUBSTRING(PRODUCT_CODE,1,6)=ITEM_CODE ";
//            
            String strSQL = "SELECT SR_NO,PROD_DATE,PROD_DOC_NO,PROD_PIECE_NO,PR_STYLE,PR_PRODUCT_CODE,GROUP_NAME,PRODUCT_DESC,SYN_PER,PR_PARTY_CODE,COALESCE(PARTY_NAME,'') AS PARTY_NAME,LENGTH,WIDTH,WEIGHT,TOTAL_LENGTH,TOTAL_WEIGHT  ";
            strSQL += "FROM (SELECT 1 AS SR_NO,F.PROD_DATE,F.PROD_DOC_NO,F.PROD_PIECE_NO,P.PR_BILL_STYLE AS PR_STYLE, ";
            strSQL += "P.PR_BILL_PRODUCT_CODE AS PR_PRODUCT_CODE,Q.GROUP_NAME,Q.PRODUCT_DESC,Q.SYN_PER,P.PR_PARTY_CODE,P.PR_BILL_LENGTH AS LENGTH, ";
            strSQL += "P.PR_BILL_WIDTH AS WIDTH,F.TAG_WEIGHT AS WEIGHT ";
            strSQL += "FROM PRODUCTION.FELT_PROD_DATA F, PRODUCTION.FELT_SALES_PIECE_REGISTER P, PRODUCTION.FELT_QLT_RATE_MASTER Q ";
            strSQL += "WHERE F.PROD_PIECE_NO=P.PR_PIECE_NO ";
            strSQL += "AND F.PROD_DOC_NO='" + prodNo + "' ";
            strSQL += "AND F.PROD_DATE='" + prodDate + "' ";
            strSQL += "AND SUBSTRING(P.PR_BILL_PRODUCT_CODE,1,6)=Q.PRODUCT_CODE ";
            strSQL += "AND F.PROD_DEPT = 'FELT FINISHING' ";//#AND F.APPROVED=1 AND F.CANCELED=0
            strSQL += "AND (Q.EFFECTIVE_TO='0000-00-00' OR Q.EFFECTIVE_TO IS NULL) AND Q.APPROVED=1 AND Q.CANCELED=0 ) AS DA ";
            strSQL += "LEFT JOIN (SELECT PARTY_CODE, SUBSTRING(PARTY_NAME,1,18) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 AND APPROVED=1 AND CANCELLED=0 ) AS DP ON DP.PARTY_CODE = DA.PR_PARTY_CODE ";
            strSQL += "LEFT JOIN (SELECT COALESCE(SUM(P.PR_BILL_LENGTH),0) AS TOTAL_LENGTH FROM PRODUCTION.FELT_PROD_DATA D,PRODUCTION.FELT_SALES_PIECE_REGISTER P WHERE D.PROD_DEPT = 'FELT FINISHING' AND MONTH(D.PROD_DATE)=MONTH('" + prodDate + "') AND YEAR(D.PROD_DATE)=YEAR('" + prodDate + "') AND D.PROD_PIECE_NO=P.PR_PIECE_NO AND P.PR_PIECE_NO NOT LIKE '%V%' AND D.PROD_DATE<='" + prodDate + "' AND D.PROD_DOC_NO<='" + prodNo + "' ) AS TL ON DP.PARTY_CODE = DA.PR_PARTY_CODE ";
            strSQL += "LEFT JOIN (SELECT COALESCE(SUM(TAG_WEIGHT),0) AS TOTAL_WEIGHT FROM PRODUCTION.FELT_PROD_DATA WHERE PROD_DEPT = 'FELT FINISHING' AND MONTH(PROD_DATE)=MONTH('" + prodDate + "') AND YEAR(PROD_DATE)=YEAR('" + prodDate + "') AND PROD_DATE<='" + prodDate + "' AND PROD_DOC_NO<='" + prodNo + "' AND PROD_PIECE_NO NOT LIKE '%V%' ) AS WT ON DP.PARTY_CODE = DA.PR_PARTY_CODE ";

            rpt.setReportName("/EITLERP/FeltSales/FeltFinishing/FeltFinishing.jrxml", 1, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void Auto_PI() {
        String sql, mproforma, PieceNo, UOM, req_mnth, mduedt1, mduedt2;
        ResultSet tmpr, tmpp;
        String word = "";
        int addpi, mnth, mdiff;
        NumWord nw = new NumWord();
        String month[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        try {
            for (int i = 0; i < Table1.getRowCount(); i++) {

                PieceNo = ((String) Table1.getValueAt(i, 1)).trim().toUpperCase();

                addpi = data.getIntValueFromDB("SELECT COUNT(*) FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE WHERE PIECE_NO='" + PieceNo + "'");

                if (addpi > 0) {
                    req_mnth = data.getStringValueFromDB("SELECT REQ_MONTH FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE WHERE PIECE_NO='" + PieceNo + "'");

                    mnth = 0;
                    for (String s : month) {
                        mnth++;
                        if (req_mnth.startsWith(s)) {
                            break;
                        }
                    }
                    sql = "SELECT DATEDIFF('" + req_mnth.substring(6) + "-" + mnth + "-01',CURDATE())+DAY(CURDATE())-1 FROM DUAL";
                    System.out.println("Date Diff: " + sql);
                    mdiff = data.getIntValueFromDB(sql);

                    if (mdiff <= 0) {
                        mduedt1 = data.getStringValueFromDB("SELECT ADDDATE(CURDATE(),7) FROM DUAL");
                        mduedt2 = data.getStringValueFromDB("SELECT ADDDATE(CURDATE(),15) FROM DUAL");
                    } else {
                        mduedt1 = req_mnth.substring(6) + "-" + mnth + "-07";
                        mduedt2 = req_mnth.substring(6) + "-" + mnth + "-15";
                    }

                    mproforma = clsFirstFree.getNextFreeNo((int) EITLERPGLOBAL.gCompanyID, 708, 167, true);
                    sql = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + PieceNo + "'";

                    tmpr = data.getResult(sql);
                    tmpr.first();
                    tmpp = data.getResult("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='" + tmpr.getString("PR_PARTY_CODE") + "'");
                    String pposition = clsProforma.getposition(PieceNo);
                    String ppiecedec = clsProforma.getpiecedec(PieceNo);
                    String plength = tmpr.getString("PR_BILL_LENGTH");
                    String pwidth = tmpr.getString("PR_BILL_WIDTH");
                    String pgsm = tmpr.getString("PR_BILL_GSM");
                    String pweight = tmpr.getString("PR_BILL_WEIGHT");
                    String psqmtr = tmpr.getString("PR_BILL_SQMTR");
                    String pproductcode = tmpr.getString("PR_BILL_PRODUCT_CODE");

                    float actual_weight = 0;
                    if (pproductcode.startsWith("71") || pproductcode.startsWith("72")) {
                        actual_weight = Float.parseFloat(plength) * Float.parseFloat(pwidth);
                        UOM = "SQM";
                    } else {
                        UOM = "Kg";
                    }

                    if (pgsm == null) {
                        pgsm = "0";
                    }
                    if (pweight == null) {
                        pweight = "0";
                    }
                    if (psqmtr == null) {
                        psqmtr = "0";
                    }

                    inv_calculation = EITLERP.FeltSales.common.clsOrderValueCalc.calculate(PieceNo, pproductcode, tmpr.getString("PR_PARTY_CODE"), Float.parseFloat(plength), Float.parseFloat(pwidth), Float.parseFloat(pweight), Float.parseFloat(psqmtr), EITLERPGLOBAL.getCurrentDateDB(), "");

                    word = nw.convertNumToWord(Math.round(Double.parseDouble(String.valueOf(inv_calculation.getFicInvAmt() + inv_calculation.getSD()))));

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_HEADER "
                            + "(PROFORMA_NO,PROFORMA_DATE,PARTY_CD,NAME,STATION,CONTACT,PHONE,REMARK1,REMARK2,REMARK3,REMARK4,REMARK5,FROM_IP,HIERARCHY_ID,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,APPROVED,APPROVED_DATE,REJECTED,REJECTED_DATE,CANCELED,CHANGED,CHANGED_DATE,REJECTED_REMARKS) "
                            + "VALUES('" + mproforma + "','" + EITLERPGLOBAL.getCurrentDateDB() + "','" + tmpr.getString("PR_PARTY_CODE") + "',"
                            + "'" + tmpp.getString("PARTY_NAME") + "','" + tmpp.getString("CITY_ID") + "','" + tmpp.getString("MOBILE_NO") + "',"
                            + "'" + tmpp.getString("PHONE_NO") + "','2)CASH DISCOUNT WOULD BE ALLOWED AS FOLLOW IF PAYMENT IN FULL IS RECEIVED AT OUR END BY THE DUE DATES','DUE DATE     RATE OF DISCOUNT[ON BASIC]','" + EITLERPGLOBAL.formatDate(mduedt1) + "            1.50%','" + EITLERPGLOBAL.formatDate(mduedt2) + "            0.75%','DISCOUNT AMOUNT WOULD BE CREDITED TO YOUR A/C SEPARATELY BY WAY OF CREDIT NOTE.',NULL,2035,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',"
                            + "NULL,NULL,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "',0,'0000-00-00',0,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "',NULL)";
                    System.out.println("Insert Into Proforma Header :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_HEADER_H "
                            + "(REVISION_NO,UPDATED_BY,APPROVAL_STATUS,ENTRY_DATE,APPROVER_REMARKS,PROFORMA_NO,PROFORMA_DATE,PARTY_CD,NAME,STATION,CONTACT,PHONE,REMARK1,REMARK2,REMARK3,REMARK4,REMARK5,FROM_IP,HIERARCHY_ID,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,APPROVED,APPROVED_DATE,REJECTED_DATE,CANCELED,CHANGED,CHANGED_DATE,REJECTED,REJECTED_REMARKS) "
                            + "VALUES(1,336,'F','" + EITLERPGLOBAL.getCurrentDateDB() + "','','" + mproforma + "','" + EITLERPGLOBAL.getCurrentDateDB() + "','" + tmpr.getString("PR_PARTY_CODE") + "',"
                            + "'" + tmpp.getString("PARTY_NAME") + "','" + tmpp.getString("CITY_ID") + "','" + tmpp.getString("MOBILE_NO") + "',"
                            + "'" + tmpp.getString("PHONE_NO") + "','2)CASH DISCOUNT WOULD BE ALLOWED AS FOLLOW IF PAYMENT IN FULL IS RECEIVED AT OUR END BY THE DUE DATES','DUE DATE     RATE OF DISCOUNT[ON BASIC]','" + EITLERPGLOBAL.formatDate(mduedt1) + "            1.50%','" + EITLERPGLOBAL.formatDate(mduedt2) + "            0.75%','DISCOUNT AMOUNT WOULD BE CREDITED TO YOUR A/C SEPARATELY BY WAY OF CREDIT NOTE.',NULL,2035,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',"
                            + "NULL,NULL,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "','0000-00-00',0,1,'" + EITLERPGLOBAL.getCurrentDateDB() + "',0,NULL)";
                    System.out.println("Insert Into Proforma Header History :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL "
                            + "(PROFORMA_NO,SR_NO,PRIORITY_DATE,INCHARGE_NAME,PRIORITY,PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE,COMM_DATE,PRODUCT_CD,ITEM,STYLE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,GSQ,WEIGHT,RECD_KG,RATE,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,EXCISE,SEAM_CHG,SEAM_CHG_PER,INSACC_AMT,INV_AMT,DAYS,REF_NO,CONF_NO,MACHINE_NO,POSITION,STATION,ZONE,INSURANCE_CODE,ITEM_DESC,SYN_PER,PO_NO,PO_DATE,FROM_IP,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,CHANGED_DATE,CHANGED,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,INS_IND,VAT,CST,SD_AMT,FIVE_PER_WEIGHT,PRO_INV_AMT,INV_VAL,INV_VAL_WORD,CGST_AMT,SGST_AMT,IGST_AMT,SQMTR,UOM,AOSD_PER,AOSD_AMT) "
                            + "VALUES('" + mproforma + "',1,NULL,'" + tmpr.getString("PR_INCHARGE") + "',NULL,'" + PieceNo + "',";
                    try {
                        if (tmpr.getString("PR_ORDER_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_ORDER_DATE") + "',";
                        }
                    } catch (Exception b) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,NULL,NULL,'" + tmpr.getString("PR_BILL_PRODUCT_CODE") + "',NULL,'" + tmpr.getString("PR_STYLE") + "',"
                            + tmpr.getString("PR_BILL_LENGTH") + ",NULL," + tmpr.getString("PR_BILL_WIDTH") + ",NULL,"
                            + tmpr.getString("PR_BILL_GSM") + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + "0";
                    } else {
                        sql = sql + tmpr.getString("PR_BILL_WEIGHT");
                    }
                    sql = sql + ",NULL," + inv_calculation.getFicRate() + ","
                            + inv_calculation.getFicBasAmount() + ",NULL," + inv_calculation.getFicDiscPer() + "," + inv_calculation.getFicDiscAmt() + ","
                            + inv_calculation.getFicDiscBasamt() + "," + inv_calculation.getFicExcise() + "," + inv_calculation.getFicSeamChg() + ",0,"
                            + inv_calculation.getFicInsAmt() + "," + inv_calculation.getFicInvAmt() + ",NULL,NULL,NULL,'" + tmpr.getString("PR_MACHINE_NO") + "',"
                            + "'" + pposition + "',NULL,NULL,NULL,'" + ppiecedec + "',NULL,'" + tmpr.getString("PR_PO_NO") + "',";
                    try {
                        if (tmpr.getString("PR_PO_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_PO_DATE") + "',";
                        }
                    } catch (Exception a) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',NULL,NULL,'" + EITLERPGLOBAL.getCurrentDateDB() + "',1,"
                            + "'" + inv_calculation.getFicChemTrtChg() + "','" + inv_calculation.getFicPinChg() + "','" + inv_calculation.getFicSpiralChg() + "',"
                            + "'" + inv_calculation.getFicInsInd() + "','" + inv_calculation.getVat() + "','" + inv_calculation.getCst() + "',"
                            + "'" + inv_calculation.getSD() + "',0,0,'" + Math.round((inv_calculation.getFicInvAmt() + inv_calculation.getSD())) + "',"
                            + "'" + word + "'," + inv_calculation.getFicCGST() + "," + inv_calculation.getFicSGST() + "," + inv_calculation.getFicIGST() + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + tmpr.getFloat("PR_BILL_SQMTR");
                    } else {
                        sql = sql + "0";
                    }
                    sql = sql + ",'" + UOM + "'," + inv_calculation.getAosd_per() + "," + inv_calculation.getAosd_amt() + ")";
                    System.out.println("Insert Into Felt Proforma Invoice Detail :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL_H "
                            + "(REVISION_NO,PROFORMA_NO,SR_NO,PRIORITY_DATE,INCHARGE_NAME,PRIORITY,PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE,COMM_DATE,PRODUCT_CD,ITEM,STYLE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,GSQ,WEIGHT,RECD_KG,RATE,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,EXCISE,SEAM_CHG,SEAM_CHG_PER,INSACC_AMT,INV_AMT,DAYS,REF_NO,CONF_NO,MACHINE_NO,POSITION,STATION,ZONE,INSURANCE_CODE,ITEM_DESC,SYN_PER,PO_NO,PO_DATE,FROM_IP,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,CHANGED_DATE,CHANGED,CHEM_TRT_CHG,PIN_CHG,SPIRAL_CHG,INS_IND,VAT,CST,SD_AMT,FIVE_PER_WEIGHT,PRO_INV_AMT,INV_VAL,INV_VAL_WORD,CGST_AMT,SGST_AMT,IGST_AMT,SQMTR,UOM,AOSD_PER,AOSD_AMT) "
                            + "VALUES(1,'" + mproforma + "',1,NULL,'" + tmpr.getString("PR_INCHARGE") + "',NULL,'" + PieceNo + "',";
                    try {
                        if (tmpr.getString("PR_ORDER_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_ORDER_DATE") + "',";
                        }
                    } catch (Exception b) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,NULL,NULL,'" + tmpr.getString("PR_BILL_PRODUCT_CODE") + "',NULL,'" + tmpr.getString("PR_STYLE") + "',"
                            + tmpr.getString("PR_BILL_LENGTH") + ",NULL," + tmpr.getString("PR_BILL_WIDTH") + ",NULL,"
                            + tmpr.getString("PR_BILL_GSM") + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + "0";
                    } else {
                        sql = sql + tmpr.getString("PR_BILL_WEIGHT");
                    }
                    sql = sql + ",NULL," + inv_calculation.getFicRate() + ","
                            + inv_calculation.getFicBasAmount() + ",NULL," + inv_calculation.getFicDiscPer() + "," + inv_calculation.getFicDiscAmt() + ","
                            + inv_calculation.getFicDiscBasamt() + "," + inv_calculation.getFicExcise() + "," + inv_calculation.getFicSeamChg() + ",0,"
                            + inv_calculation.getFicInsAmt() + "," + inv_calculation.getFicInvAmt() + ",NULL,NULL,NULL,'" + tmpr.getString("PR_MACHINE_NO") + "',"
                            + "'" + pposition + "',NULL,NULL,NULL,'" + ppiecedec + "',NULL,'" + tmpr.getString("PR_PO_NO") + "',";
                    try {
                        if (tmpr.getString("PR_PO_DATE").equalsIgnoreCase("null")) {
                            sql = sql + "NULL,";
                        } else {
                            sql = sql + "'" + tmpr.getString("PR_PO_DATE") + "',";
                        }
                    } catch (Exception a) {
                        sql = sql + "NULL,";
                    }
                    sql = sql + "NULL,336,'" + EITLERPGLOBAL.getCurrentDateDB() + "',NULL,NULL,'" + EITLERPGLOBAL.getCurrentDateDB() + "',1,"
                            + "'" + inv_calculation.getFicChemTrtChg() + "','" + inv_calculation.getFicPinChg() + "','" + inv_calculation.getFicSpiralChg() + "',"
                            + "'" + inv_calculation.getFicInsInd() + "','" + inv_calculation.getVat() + "','" + inv_calculation.getCst() + "',"
                            + "'" + inv_calculation.getSD() + "',0,0,'" + Math.round((inv_calculation.getFicInvAmt() + inv_calculation.getSD())) + "',"
                            + "'" + word + "'," + inv_calculation.getFicCGST() + "," + inv_calculation.getFicSGST() + "," + inv_calculation.getFicIGST() + ",";
                    if (UOM.equalsIgnoreCase("SQM")) {
                        sql = sql + tmpr.getFloat("PR_BILL_SQMTR");
                    } else {
                        sql = sql + "0";
                    }
                    sql = sql + ",'" + UOM + "'," + inv_calculation.getAosd_per() + "," + inv_calculation.getAosd_amt() + ")";
                    System.out.println("Insert Into Felt Proforma Invoice Detail History :" + sql);
                    data.Execute(sql);

                    sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                            + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,ACTION_DATE,CHANGED,CHANGED_DATE) "
                            + "VALUES(708,'" + mproforma + "','" + EITLERPGLOBAL.getCurrentDateDB() + "',336,'F','C','ERP SYSTEM AUTO GENERATED',1,0,NULL,'0000-00-00','" + EITLERPGLOBAL.getCurrentDateTimeDB() + "',1,'" + EITLERPGLOBAL.getCurrentDateTimeDB() + "')";
                    System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                    data.Execute(sql);

                    sql = "UPDATE PRODUCTION.ANNUAL_ORDER_INCENTIVE "
                            + "SET WH_RCVD_DATE='" + tmpr.getString("PR_FNSG_DATE") + "',"
                            + "WH_WEIGHT=" + tmpr.getDouble("PR_BILL_WEIGHT") + ","
                            + "LENGTH=" + tmpr.getDouble("PR_BILL_LENGTH") + ","
                            + "WIDTH=" + tmpr.getDouble("PR_BILL_WIDTH") + ","
                            + "GSM=" + tmpr.getDouble("PR_BILL_GSM") + ","
                            + "PI_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "',"
                            + "PI_AMT=" + Math.round((inv_calculation.getFicInvAmt() + inv_calculation.getSD())) + ","
                            + "PI_NO='" + mproforma + "',"
                            + "DUE_DATE1='" + mduedt1 + "',"
                            + "DUE_DATE2='" + mduedt2 + "' "
                            + " WHERE PIECE_NO='" + PieceNo + "'";
                    data.Execute(sql);

                    Connection Conn = data.getConn();
                    Statement st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    String fdt = EITLERPGLOBAL.formatDate("");
                    String tdt = EITLERPGLOBAL.formatDate("");

                    parameterMap.put("PROFORMA_DATE", EITLERPGLOBAL.getCurrentDate());
                    parameterMap.put("PROFORMA_NO", mproforma);

                    URL MailDocument1 = new URL("http://200.0.0.227:8080/jmx-console/dinesh/EITLERP/Reports/rptPIMail.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&PROFORMA_DATE=" + EITLERPGLOBAL.getCurrentDate() + "&DocNo=" + mproforma + "&File=" + PieceNo + ".pdf");

                    EITLERPGLOBAL.loginContext.showDocument(MailDocument1, "_blank");

//                    PDFProforma rpt = new PDFProforma(parameterMap, Conn);
//                    sql = "SELECT A.PROFORMA_NO,A.PROFORMA_DATE,A.NAME,A.STATION,A.CONTACT,"
//                            + "A.PHONE,B.SR_NO,B.PIECE_NO,B.POSITION,B.MACHINE_NO,B.ITEM_DESC,"
//                            + "B.LNGTH,B.WIDTH,B.GSQ,B.STYLE,B.RATE,B.BAS_AMT,B.AOSD_PER,B.AOSD_AMT,B.DISC_PER,B.DISAMT,"
//                            + "B.DISBASAMT,B.EXCISE,B.SEAM_CHG,B.INV_AMT,B.VAT,B.CST,B.SD_AMT,"
//                            + "B.INV_VAL,A.REMARK1,A.REMARK2,A.REMARK3,A.REMARK4,A.REMARK5,B.INV_VAL_WORD,"
//                            + "B.IGST_AMT,B.CGST_AMT,B.SGST_AMT,B.INSACC_AMT,B.WEIGHT,B.SQMTR,C.GSTIN_NO,D.PR_SYN_PER,B.UOM FROM "
//                            + "PRODUCTION.FELT_PROFORMA_INVOICE_HEADER AS A,"
//                            + "PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL AS B,"
//                            + "PRODUCTION.FELT_SALES_PIECE_REGISTER AS D,"
//                            + "DINESHMILLS.D_SAL_PARTY_MASTER AS C  "
//                            + "WHERE A.PROFORMA_NO=B.PROFORMA_NO "
//                            + "AND A.PARTY_CD=C.PARTY_CODE "
//                            + "AND B.PIECE_NO=D.PR_PIECE_NO "
//                            + "AND A.PROFORMA_NO='" + mproforma + "' AND A.PROFORMA_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "'";
//                    rpt.setReportName("/EITLERP/FeltSales/FeltFinishing/pdfProforma.jrxml", 1, sql, PieceNo); //productlist is the name of my jasper file.
//                    rpt.callReport();
                    System.out.println("PDF Generated");

                    String mbody;
                    mbody = "<html><body> Dear Sir,<br><br> "
                            + "We are pleased to inform you that your follwing felt has been made ready on priority.<br><br>"
                            + "</p><br><table border='1'>"
                            + "<tr><th>PC NO</th><th align='center'> M/C NO </th>"
                            + "<th align='center'> POSITION </th><th align='center'>LENGTH </th>"
                            + "<th align='center'>WIDTH </th>"
                            + "<th align='center'>GSM </th><th align='center'>VALUE(RS)</th></tr>"
                            + "<tr>"
                            + "<td>"
                            + "<p>" + PieceNo + "</p>"
                            + "</td>"
                            + "<td>"
                            + "<p>" + tmpr.getString("PR_MACHINE_NO") + "</p>"
                            + "</td>"
                            + "<td>"
                            + "<p>" + pposition + "</p>"
                            + "</td>"
                            + "<td>"
                            + "<p>" + tmpr.getString("PR_BILL_LENGTH") + "</p>"
                            + "</td>"
                            + "<td>"
                            + "<p>" + tmpr.getString("PR_BILL_WIDTH") + "</p>"
                            + "</td>"
                            + "<td>"
                            + "<p>" + tmpr.getString("PR_BILL_GSM") + "</p>"
                            + "</td>"
                            + "<td>"
                            + "<p>" + Math.round((inv_calculation.getFicInvAmt() + inv_calculation.getSD())) + "</p>"
                            + "</td>"
                            + "</table><p>Kindly arrange to send us your payment in full by the due dates mentioned in the proforma invoice<br>"
                            + "so that you would be eligible for cash discount as per the said proforma invoice.<br>"
                            + "The discount amount would be credited to your account in the 1st week of the next month and <br>"
                            + "would be adjusted in our supplies to be made immediately thereafter.Kindly note that<br>"
                            + "the cash discount would be allowed only if the full payment is realised at our end by the due date.<br><br><br>"
                            + "We request you to arrange the needful immediately and avail the benefit of <br>"
                            + "cash discount extended to you.<br><br><br>"
                            + "Thanks & Regards,<br><br>"
                            + "Sandeep Raut</p>";
                    String toemail = data.getStringValueFromDB("SELECT EMAIL FROM PRODUCTION.ANNUAL_ORDER_INCENTIVE WHERE PIECE_NO='" + PieceNo + "'");
                    //toemail = "felts@dineshmills.com";
                    //toemail = "dharmendrarrp@gmail.com,rishineekhra@gmail.com";
                    try {
                        HashMap sendList = new HashMap();
                        String[] str_to = toemail.split(",");
                        for (String str1 : str_to) {
                            sendList.put(Integer.toString(sendList.size() + 1), str1);
                        }
                        clsDocMailer ObjMailer = new clsDocMailer();
                        ObjMailer.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                        ObjMailer.setAttribute("DOC_NO", 0);
                        ObjMailer.setAttribute("DOC_DATE", EITLERPGLOBAL.getCurrentDateDB());
                        ObjMailer.setAttribute("MODULE_ID", 708);
                        ObjMailer.setAttribute("SENT_BY", "sdmlerp@dineshmills.com");
                        ObjMailer.setAttribute("DESCRIPTION", mbody);
                        ObjMailer.setAttribute("FROM", "sdmlerp@dineshmills.com");
                        ObjMailer.setAttribute("SUBJECT", "Proforma Invoice with Cash disount");
                        ObjMailer.setAttribute("MAIL_DOC_NO", mproforma);
                        ObjMailer.setAttribute("CC", "felts@dineshmills.com");
                        //ObjMailer.setAttribute("CC", "");
                        ObjMailer.setAttribute("BCC", "dharmendra@dineshmills.com");

                        for (i = 1; i <= sendList.size(); i++) {
                            String email = (String) sendList.get(Integer.toString(i));
                            ObjMailer.colEmail.put(Integer.toString(ObjMailer.colEmail.size() + 1), email);
                        }

                        long MailNo = ObjMailer.Insert();

                        if (MailNo != 0) {

                            //Now depending upon the module id divert to different jsp pages
                            //URL MailDocument=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptDocMailer.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+MailNo+"&File="+this.theFile); //+".pdf"
                            try {

                                //URL MailDocument = new URL("http://200.0.0.227:8080/jmx-console/dinesh/EITLERP/Reports/rptDocMailerPI.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + MailNo + "&File=" + "/root/Desktop/" + PieceNo + ".pdf"); //+".pdf"
                                URL MailDocument = new URL("http://200.0.0.227:8080/jmx-console/dinesh/EITLERP/Reports/rptDocMailerPI.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + MailNo + "&File=" + PieceNo + ".pdf"); //+".pdf"
                                EITLERPGLOBAL.loginContext.showDocument(MailDocument, "_blank");
                            } catch (Exception a) {
                                a.printStackTrace();
                            }

                        }
                    } catch (Exception e) {

                    }

//                    try {
//                        JavaMailNew.SendMail(toemail, mbody, "Proforma Invoice with Cash disount", "felts@dineshmills.com,rishineekhra@dineshmills.com,dharmendra@dineshmills.com", "D://" + PieceNo + ".pdf");
//                    } catch (Exception s) {
//                        JavaMailNew.SendMail(toemail, mbody, "Proforma Invoice with Cash disount", "felts@dineshmills.com,rishineekhra@dineshmills.com,dharmendra@dineshmills.com", "/root/Desktop/" + PieceNo + ".pdf");
//                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
