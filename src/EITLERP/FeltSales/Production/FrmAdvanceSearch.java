/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Production;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.Production.FeltCreditNote.clsExcelExporter;
import EITLERP.data;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
//455,457,458,459,460,476,

/**
 *
 * @author root
 */
public class FrmAdvanceSearch extends javax.swing.JApplet {

    private EITLTableModel DataModel_Shiftwise;
    private EITLTableModel DataModel_JobwiseAllocation;
    private EITLTableModel DataModel_ShiftReport;
    private EITLTableModel DataModel_DatewisePresence;
    private EITLTableModel DataModel_AllDataReport;
    private EITLTableModel DataModel_DateWiseWeaveTime;
    private EITLTableModel DataModel_LOOMWEAVE;
    private EITLTableModel DataModel_WVGPRODATTDTL;
    private EITLTableModel DataModel_WVGPRODATTSMRY;
    private EITLTableModel DataModel_Warpdtl;
    private EITLTableModel DataModel_WarpPiecedtl;
    private EITLTableModel DataModel_DocStatus;
    private EITLTableModel DataModel_EmpwiseIncMst;
    private EITLTableModel DataModel_Inc_Grade_Mst;

    public EITLERP.FeltSales.Reports.clsExcelExporter exp = new EITLERP.FeltSales.Reports.clsExcelExporter();

    /**
     * Initializes the applet FrmAdvanceSearch
     */
    public void init() {

        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        cmbMonth.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear.setText(EITLERPGLOBAL.getCurrentYear() + "");
        cmbMonth1.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear1.setText(EITLERPGLOBAL.getCurrentYear() + "");
        cmbMonth4.setSelectedIndex(EITLERPGLOBAL.getCurrentMonth());
        txtYear4.setText(EITLERPGLOBAL.getCurrentYear() + "");

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmdwarppiecedtl = new javax.swing.JTabbedPane();
        panel1 = new java.awt.Panel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShiftwise = new javax.swing.JTable();
        txtShowReport1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        cmbShiftwise = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblJobwiseAllocation = new javax.swing.JTable();
        txtDateJobwise = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtShowReport_Jobwise = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblShiftReport = new javax.swing.JTable();
        txtToDateShift = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtShowReport_Shift = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cmbtblDatewisePresence = new javax.swing.JComboBox();
        txtFromDateShift = new javax.swing.JTextField();
        lblDate3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblDatewisePresence = new javax.swing.JTable();
        txtDatewisePresence = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtShowReport_DatewisePresence = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        cmbDatewisePresence = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblAllDataReport = new javax.swing.JTable();
        txtDateAllDataReport_FROM = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtShowReport_AllDataReport = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        txtDateAllDataReport_TO = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblDatewiseWeaveTime = new javax.swing.JTable();
        txtDatewiseWeaveTimeFrom = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtShowReport_DatewiseWeaveTime = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        txtDatewiseWeaveTimeTo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblLoomWeave = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        btnWeaver = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblwvgproddtl = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        lblMonthCmb = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        lblYearCmb = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        btnWeaver1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblwvgprodsmry = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        lblMonthCmb1 = new javax.swing.JLabel();
        cmbMonth1 = new javax.swing.JComboBox();
        lblYearCmb1 = new javax.swing.JLabel();
        txtYear1 = new javax.swing.JTextField();
        btnWeaver2 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblwarpdtl = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        cmdwarpdtl = new javax.swing.JButton();
        lblDate1 = new javax.swing.JLabel();
        txtFromDate1 = new javax.swing.JTextField();
        lblDate2 = new javax.swing.JLabel();
        txtToDate1 = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblWarpPiecedtl = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        lblMonthCmb3 = new javax.swing.JLabel();
        lblYearCmb3 = new javax.swing.JLabel();
        txtwarpno = new javax.swing.JTextField();
        btnWeaver4 = new javax.swing.JButton();
        txtloomno = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblDocstatus = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        lblMonthCmb4 = new javax.swing.JLabel();
        cmbMonth4 = new javax.swing.JComboBox();
        lblYearCmb4 = new javax.swing.JLabel();
        txtYear4 = new javax.swing.JTextField();
        cmddocsts = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        tblEmpwiseIncentiveMst = new javax.swing.JTable();
        txtShowReport_Jobwise1 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tblIncGradeMst = new javax.swing.JTable();
        txtShowReport_Jobwise2 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("Advance Search - Felt Production ");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 1050, 25);

        cmdwarppiecedtl.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        panel1.setBackground(new java.awt.Color(220, 215, 215));
        panel1.setLayout(null);

        tblShiftwise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblShiftwise);

        panel1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 40, 1030, 400);

        txtShowReport1.setText("Show Data");
        txtShowReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport1ActionPerformed(evt);
            }
        });
        panel1.add(txtShowReport1);
        txtShowReport1.setBounds(910, 10, 110, 25);

        jLabel2.setText("Date");
        panel1.add(jLabel2);
        jLabel2.setBounds(470, 10, 80, 20);
        panel1.add(txtDate);
        txtDate.setBounds(510, 10, 160, 28);

        jButton1.setText("Export to Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panel1.add(jButton1);
        jButton1.setBounds(834, 450, 170, 25);

        cmbShiftwise.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1st Shift", "2nd Shift", "3rd Shift", "General Shift" }));
        panel1.add(cmbShiftwise);
        cmbShiftwise.setBounds(690, 7, 210, 30);

        cmdwarppiecedtl.addTab("Shiftwise Loom Operation Report", panel1);

        jPanel1.setLayout(null);

        tblJobwiseAllocation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblJobwiseAllocation);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 1030, 410);
        jPanel1.add(txtDateJobwise);
        txtDateJobwise.setBounds(740, 10, 160, 28);

        jLabel3.setText("Date");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(690, 10, 80, 30);

        txtShowReport_Jobwise.setText("Show Data");
        txtShowReport_Jobwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_JobwiseActionPerformed(evt);
            }
        });
        jPanel1.add(txtShowReport_Jobwise);
        txtShowReport_Jobwise.setBounds(910, 10, 110, 25);

        jButton2.setText("Export to Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(830, 460, 170, 25);

        cmdwarppiecedtl.addTab("Jobwise Allocation cum daily attendance", jPanel1);

        jPanel2.setLayout(null);

        tblShiftReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblShiftReport);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(0, 40, 1030, 400);

        txtToDateShift = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel2.add(txtToDateShift);
        txtToDateShift.setBounds(500, 10, 160, 20);

        jLabel4.setText("To Date");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(430, 10, 80, 20);

        txtShowReport_Shift.setText("Show Data");
        txtShowReport_Shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_ShiftActionPerformed(evt);
            }
        });
        jPanel2.add(txtShowReport_Shift);
        txtShowReport_Shift.setBounds(890, 10, 130, 25);

        jButton3.setText("Export to Excel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);
        jButton3.setBounds(834, 450, 170, 25);

        cmbtblDatewisePresence.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1st Shift", "2nd Shift", "3rd Shift", "All Shift", "General Shift" }));
        jPanel2.add(cmbtblDatewisePresence);
        cmbtblDatewisePresence.setBounds(680, 10, 190, 30);

        txtFromDateShift = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel2.add(txtFromDateShift);
        txtFromDateShift.setBounds(300, 10, 120, 20);

        lblDate3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate3.setText("From Date : ");
        jPanel2.add(lblDate3);
        lblDate3.setBounds(200, 10, 90, 20);

        cmdwarppiecedtl.addTab("Shift Report", jPanel2);

        jPanel3.setLayout(null);

        tblDatewisePresence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tblDatewisePresence);

        jPanel3.add(jScrollPane4);
        jScrollPane4.setBounds(0, 40, 1030, 400);
        jPanel3.add(txtDatewisePresence);
        txtDatewisePresence.setBounds(530, 7, 160, 30);

        jLabel5.setText("Date");
        jPanel3.add(jLabel5);
        jLabel5.setBounds(480, 10, 80, 30);

        txtShowReport_DatewisePresence.setText("Show Data");
        txtShowReport_DatewisePresence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_DatewisePresenceActionPerformed(evt);
            }
        });
        jPanel3.add(txtShowReport_DatewisePresence);
        txtShowReport_DatewisePresence.setBounds(910, 10, 110, 25);

        jButton4.setText("Export to Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(834, 450, 170, 25);

        cmbDatewisePresence.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1st Shift", "2nd Shift", "3rd Shift", "General Shift" }));
        jPanel3.add(cmbDatewisePresence);
        cmbDatewisePresence.setBounds(710, 7, 190, 30);

        cmdwarppiecedtl.addTab("Date wise and Position wise Presence", jPanel3);

        jPanel4.setLayout(null);

        tblAllDataReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tblAllDataReport);

        jPanel4.add(jScrollPane5);
        jScrollPane5.setBounds(0, 40, 1030, 410);
        jPanel4.add(txtDateAllDataReport_FROM);
        txtDateAllDataReport_FROM.setBounds(460, 10, 160, 28);

        jLabel6.setText("Date");
        jPanel4.add(jLabel6);
        jLabel6.setBounds(350, 10, 50, 30);

        txtShowReport_AllDataReport.setText("Show Data");
        txtShowReport_AllDataReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_AllDataReportActionPerformed(evt);
            }
        });
        jPanel4.add(txtShowReport_AllDataReport);
        txtShowReport_AllDataReport.setBounds(840, 10, 160, 25);

        jButton5.setText("Export to Excel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5);
        jButton5.setBounds(830, 460, 170, 25);
        jPanel4.add(txtDateAllDataReport_TO);
        txtDateAllDataReport_TO.setBounds(670, 10, 160, 28);

        jLabel7.setText("TO");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(640, 10, 30, 30);

        jLabel8.setText("FROM");
        jPanel4.add(jLabel8);
        jLabel8.setBounds(410, 10, 45, 30);

        cmdwarppiecedtl.addTab("All Data Report", jPanel4);

        jPanel5.setLayout(null);

        tblDatewiseWeaveTime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tblDatewiseWeaveTime);

        jPanel5.add(jScrollPane6);
        jScrollPane6.setBounds(0, 40, 1030, 410);
        jPanel5.add(txtDatewiseWeaveTimeFrom);
        txtDatewiseWeaveTimeFrom.setBounds(460, 10, 160, 28);

        jLabel9.setText("Date");
        jPanel5.add(jLabel9);
        jLabel9.setBounds(350, 10, 50, 30);

        txtShowReport_DatewiseWeaveTime.setText("Show Data");
        txtShowReport_DatewiseWeaveTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_DatewiseWeaveTimeActionPerformed(evt);
            }
        });
        jPanel5.add(txtShowReport_DatewiseWeaveTime);
        txtShowReport_DatewiseWeaveTime.setBounds(840, 10, 160, 25);

        jButton6.setText("Export to Excel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton6);
        jButton6.setBounds(830, 460, 170, 25);
        jPanel5.add(txtDatewiseWeaveTimeTo);
        txtDatewiseWeaveTimeTo.setBounds(670, 10, 160, 28);

        jLabel10.setText("TO");
        jPanel5.add(jLabel10);
        jLabel10.setBounds(640, 10, 30, 30);

        jLabel11.setText("FROM");
        jPanel5.add(jLabel11);
        jLabel11.setBounds(410, 10, 45, 30);

        cmdwarppiecedtl.addTab("Datewise Weave Time", jPanel5);

        jPanel6.setLayout(null);

        tblLoomWeave.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tblLoomWeave);

        jPanel6.add(jScrollPane7);
        jScrollPane7.setBounds(0, 40, 1030, 410);

        jButton7.setText("Export to Excel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton7);
        jButton7.setBounds(830, 460, 170, 25);

        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate.setText("From Date : ");
        jPanel6.add(lblDate);
        lblDate.setBounds(20, 4, 90, 20);

        txtFromDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel6.add(txtFromDate);
        txtFromDate.setBounds(120, 0, 120, 30);

        btnWeaver.setText("Show Data");
        btnWeaver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWeaverActionPerformed(evt);
            }
        });
        jPanel6.add(btnWeaver);
        btnWeaver.setBounds(510, 0, 160, 30);

        jLabel12.setText("To Date");
        jPanel6.add(jLabel12);
        jLabel12.setBounds(250, 5, 90, 20);

        txtToDate = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel6.add(txtToDate);
        txtToDate.setBounds(320, 0, 110, 30);

        cmdwarppiecedtl.addTab("Loomwise Weaver Production Report", jPanel6);

        jPanel7.setLayout(null);

        tblwvgproddtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(tblwvgproddtl);

        jPanel7.add(jScrollPane8);
        jScrollPane8.setBounds(0, 50, 1030, 400);

        jButton8.setText("Export to Excel");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton8);
        jButton8.setBounds(830, 460, 170, 25);

        lblMonthCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb.setText("Month : ");
        jPanel7.add(lblMonthCmb);
        lblMonthCmb.setBounds(10, 10, 70, 20);

        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        jPanel7.add(cmbMonth);
        cmbMonth.setBounds(100, 10, 80, 20);

        lblYearCmb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb.setText("Year : ");
        jPanel7.add(lblYearCmb);
        lblYearCmb.setBounds(200, 10, 40, 20);
        jPanel7.add(txtYear);
        txtYear.setBounds(250, 10, 60, 20);

        btnWeaver1.setText("Show Data");
        btnWeaver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWeaver1ActionPerformed(evt);
            }
        });
        jPanel7.add(btnWeaver1);
        btnWeaver1.setBounds(320, 10, 100, 30);

        cmdwarppiecedtl.addTab("Weaving Production Attendance Summary", jPanel7);

        jPanel8.setLayout(null);

        tblwvgprodsmry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(tblwvgprodsmry);

        jPanel8.add(jScrollPane9);
        jScrollPane9.setBounds(0, 50, 1030, 400);

        jButton9.setText("Export to Excel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton9);
        jButton9.setBounds(830, 460, 170, 25);

        lblMonthCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb1.setText("Month : ");
        jPanel8.add(lblMonthCmb1);
        lblMonthCmb1.setBounds(10, 10, 70, 20);

        cmbMonth1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        jPanel8.add(cmbMonth1);
        cmbMonth1.setBounds(100, 10, 80, 20);

        lblYearCmb1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb1.setText("Year : ");
        jPanel8.add(lblYearCmb1);
        lblYearCmb1.setBounds(200, 10, 40, 20);
        jPanel8.add(txtYear1);
        txtYear1.setBounds(250, 10, 60, 20);

        btnWeaver2.setText("Show Data");
        btnWeaver2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWeaver2ActionPerformed(evt);
            }
        });
        jPanel8.add(btnWeaver2);
        btnWeaver2.setBounds(320, 10, 100, 30);

        cmdwarppiecedtl.addTab("Weaving Production Attendance Detail", jPanel8);

        jPanel9.setLayout(null);

        tblwarpdtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(tblwarpdtl);

        jPanel9.add(jScrollPane10);
        jScrollPane10.setBounds(0, 50, 1030, 400);

        jButton10.setText("Export to Excel");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel9.add(jButton10);
        jButton10.setBounds(830, 460, 170, 25);

        cmdwarpdtl.setText("Show Data");
        cmdwarpdtl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdwarpdtlActionPerformed(evt);
            }
        });
        jPanel9.add(cmdwarpdtl);
        cmdwarpdtl.setBounds(380, 10, 100, 30);

        lblDate1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate1.setText("From Date : ");
        jPanel9.add(lblDate1);
        lblDate1.setBounds(10, 10, 80, 15);

        txtFromDate1 = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel9.add(txtFromDate1);
        txtFromDate1.setBounds(100, 10, 80, 19);

        lblDate2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDate2.setText("To Date : ");
        jPanel9.add(lblDate2);
        lblDate2.setBounds(190, 10, 80, 15);

        txtToDate1 = new EITLERP.FeltSales.common.DatePicker.DateTextFieldAdvanceSearch();
        jPanel9.add(txtToDate1);
        txtToDate1.setBounds(280, 10, 80, 19);

        cmdwarppiecedtl.addTab("Warp Detail", jPanel9);

        jPanel10.setLayout(null);

        tblWarpPiecedtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(tblWarpPiecedtl);

        jPanel10.add(jScrollPane11);
        jScrollPane11.setBounds(0, 50, 1030, 400);

        jButton11.setText("Export to Excel");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel10.add(jButton11);
        jButton11.setBounds(830, 460, 170, 25);

        lblMonthCmb3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb3.setText("Warp No.");
        jPanel10.add(lblMonthCmb3);
        lblMonthCmb3.setBounds(10, 10, 70, 20);

        lblYearCmb3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb3.setText("Loom No.");
        jPanel10.add(lblYearCmb3);
        lblYearCmb3.setBounds(170, 10, 70, 20);
        jPanel10.add(txtwarpno);
        txtwarpno.setBounds(90, 10, 80, 20);

        btnWeaver4.setText("Show Data");
        btnWeaver4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWeaver4ActionPerformed(evt);
            }
        });
        jPanel10.add(btnWeaver4);
        btnWeaver4.setBounds(360, 10, 100, 30);
        jPanel10.add(txtloomno);
        txtloomno.setBounds(250, 10, 80, 20);

        cmdwarppiecedtl.addTab("Warp Piecewise Detail", jPanel10);

        jPanel11.setLayout(null);

        tblDocstatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(tblDocstatus);

        jPanel11.add(jScrollPane12);
        jScrollPane12.setBounds(0, 50, 1030, 400);

        jButton12.setText("Export to Excel");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton12);
        jButton12.setBounds(830, 460, 170, 25);

        lblMonthCmb4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMonthCmb4.setText("Month : ");
        jPanel11.add(lblMonthCmb4);
        lblMonthCmb4.setBounds(10, 10, 70, 20);

        cmbMonth4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        jPanel11.add(cmbMonth4);
        cmbMonth4.setBounds(100, 10, 80, 20);

        lblYearCmb4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblYearCmb4.setText("Year : ");
        jPanel11.add(lblYearCmb4);
        lblYearCmb4.setBounds(200, 10, 40, 20);
        jPanel11.add(txtYear4);
        txtYear4.setBounds(250, 10, 60, 20);

        cmddocsts.setText("Show Data");
        cmddocsts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmddocstsActionPerformed(evt);
            }
        });
        jPanel11.add(cmddocsts);
        cmddocsts.setBounds(320, 10, 100, 30);

        cmdwarppiecedtl.addTab("Document Status", jPanel11);

        jPanel12.setLayout(null);

        tblEmpwiseIncentiveMst.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(tblEmpwiseIncentiveMst);

        jPanel12.add(jScrollPane13);
        jScrollPane13.setBounds(0, 40, 1030, 410);

        txtShowReport_Jobwise1.setText("Show Data");
        txtShowReport_Jobwise1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        txtShowReport_Jobwise1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_Jobwise1ActionPerformed(evt);
            }
        });
        jPanel12.add(txtShowReport_Jobwise1);
        txtShowReport_Jobwise1.setBounds(450, 10, 110, 25);

        jButton13.setText("Export to Excel");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton13);
        jButton13.setBounds(830, 460, 170, 25);

        cmdwarppiecedtl.addTab("Employeewise Incentive Master", jPanel12);

        jPanel13.setLayout(null);

        tblIncGradeMst.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(tblIncGradeMst);

        jPanel13.add(jScrollPane14);
        jScrollPane14.setBounds(0, 40, 1030, 410);

        txtShowReport_Jobwise2.setText("Show Data");
        txtShowReport_Jobwise2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        txtShowReport_Jobwise2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShowReport_Jobwise2ActionPerformed(evt);
            }
        });
        jPanel13.add(txtShowReport_Jobwise2);
        txtShowReport_Jobwise2.setBounds(450, 10, 110, 25);

        jButton14.setText("Export to Excel");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton14);
        jButton14.setBounds(830, 460, 170, 25);

        cmdwarppiecedtl.addTab("Incentive Grade Master", jPanel13);

        getContentPane().add(cmdwarppiecedtl);
        cmdwarppiecedtl.setBounds(0, 30, 1050, 580);
        cmdwarppiecedtl.getAccessibleContext().setAccessibleName("Shift Report");
    }// </editor-fold>//GEN-END:initComponents

    private void txtShowReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport1ActionPerformed
        // TODO add your handling code here:

        GenerateDataShiftwiseLoomOperationReport();
    }//GEN-LAST:event_txtShowReport1ActionPerformed

    private void txtShowReport_JobwiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_JobwiseActionPerformed
        // TODO add your handling code here:

        GenerateDataJobwiseAllocationReport();
    }//GEN-LAST:event_txtShowReport_JobwiseActionPerformed

    private void txtShowReport_ShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_ShiftActionPerformed
        // TODO add your handling code here:
        GenerateDataShiftReport();

    }//GEN-LAST:event_txtShowReport_ShiftActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("SHIFTWISE_REPORT.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblShiftwise, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("SHIFT_REPORT.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();
            exp.fillData(tblJobwiseAllocation, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("JOBWISE_ALLOCATION_REPORT.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblShiftReport, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtShowReport_DatewisePresenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_DatewisePresenceActionPerformed
        // TODO add your handling code here:
        GenerateDataDatewisePresence();
    }//GEN-LAST:event_txtShowReport_DatewisePresenceActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtShowReport_AllDataReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_AllDataReportActionPerformed
        // TODO add your handling code here:
        Generate_AllDataReport();
    }//GEN-LAST:event_txtShowReport_AllDataReportActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("ALLDATA_REPORT.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblAllDataReport, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtShowReport_DatewiseWeaveTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_DatewiseWeaveTimeActionPerformed
        // TODO add your handling code here:
        Generate_DatewiseWeaveTime();
    }//GEN-LAST:event_txtShowReport_DatewiseWeaveTimeActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("DatewiseWeaveTime.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblDatewiseWeaveTime, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("LoomwiseWeaverProductionReport.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblLoomWeave, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("WeavingProductionAttendanceDetail.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblwvgproddtl, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("WeavingProductionAttendanceSummary.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblwvgprodsmry, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void btnWeaverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWeaverActionPerformed
        // TODO add your handling code here:
        GenerateWeaver();
    }//GEN-LAST:event_btnWeaverActionPerformed

    private void btnWeaver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWeaver1ActionPerformed
        // TODO add your handling code here:
        GenerateReport1();
    }//GEN-LAST:event_btnWeaver1ActionPerformed

    private void btnWeaver2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWeaver2ActionPerformed
        // TODO add your handling code here:
        GenerateReport2();
    }//GEN-LAST:event_btnWeaver2ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("WarpDetail.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblwarpdtl, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void cmdwarpdtlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdwarpdtlActionPerformed
        // TODO add your handling code here:
        GenerateWarpDetail();
    }//GEN-LAST:event_cmdwarpdtlActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("WarpPieceDetail.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblWarpPiecedtl, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void btnWeaver4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWeaver4ActionPerformed
        // TODO add your handling code here:
        if (txtwarpno.getText().trim().length() > 0 || txtloomno.getText().trim().length() > 0) {
            GenerateWarpPieceDetail();
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Warp No./Loom No....", "Please Enter Warp No./Loom No....", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnWeaver4ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("DocStatus.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblDocstatus, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void cmddocstsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmddocstsActionPerformed
        // TODO add your handling code here:
        GenerateDocStatus();
    }//GEN-LAST:event_cmddocstsActionPerformed

    private void txtShowReport_Jobwise1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_Jobwise1ActionPerformed
        GenerateEmpwiseIncMst();       
    }//GEN-LAST:event_txtShowReport_Jobwise1ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("EmpwiseIncentiveReport.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblEmpwiseIncentiveMst, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void txtShowReport_Jobwise2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShowReport_Jobwise2ActionPerformed
GenerateIncGradeMst();      
    }//GEN-LAST:event_txtShowReport_Jobwise2ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        try {

            File Source_File;
            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File("IncGradMstReport.xls"));
            int n = chooser.showSaveDialog(this);
            Source_File = chooser.getSelectedFile();

            exp.fillData(tblIncGradeMst, Source_File, "Sheet1");

            JOptionPane.showMessageDialog(null, "File Saved successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed
    private void Generate_AllDataReport() {
        FormatGrid_AllDataReport();

        String str = "SELECT * FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE EMP_NO!='' AND DOC_DATE>='" + EITLERPGLOBAL.formatDateDB(txtDateAllDataReport_FROM.getText()) + "' AND DOC_DATE <='" + EITLERPGLOBAL.formatDateDB(txtDateAllDataReport_TO.getText()) + "' AND APPROVED=1 ORDER BY DOC_DATE,SHIFT_ID";
        // + " AND  SHIFT_ID='"+ShiftCode+"' AND LOOM_ENG!=''";
        System.out.println("str " + str);

        try {
            Connection Conn;
            Statement stmt;
            ResultSet rsData;

            Conn = data.getConn();
            stmt = Conn.createStatement();
            rsData = stmt.executeQuery(str);
            rsData.first();
            int cnt = 1;

            while (!rsData.isAfterLast()) {

                Object[] rowData = new Object[24];

                rowData[0] = Integer.toString(cnt);
                rowData[1] = EITLERPGLOBAL.formatDate(rsData.getString("DOC_DATE"));
                rowData[2] = rsData.getString("SHIFT_ID");
                rowData[3] = rsData.getString("LOOM_ENG");
                rowData[4] = rsData.getString("EMP_NO");
                rowData[5] = rsData.getString("EMP_NAME");
                rowData[6] = rsData.getString("CATEGORY");
                rowData[7] = rsData.getString("REG_ROKDI");
                rowData[8] = rsData.getString("EMP_TYPE");
                rowData[9] = rsData.getString("TRAINEE");
                rowData[10] = rsData.getString("TRAINEE_POSITION");

                DataModel_AllDataReport.addRow(rowData);

                cnt++;
                rsData.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Generate_DatewiseWeaveTime() {
        FormatGrid_DateWiseWeaveTime();

        String str = "SELECT DOC_DATE,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='7' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM7 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='8' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM8 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='81' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM81,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='82' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM82 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='83' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM83 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='84' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM84 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='85' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM85 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='86' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM86 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='87' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM87 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='88' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM88 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='89' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM89 , \n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='90' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM90 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='91' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM91 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='92' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM92 ,\n"
                + "SUM(COALESCE(CASE WHEN LOOM_ENG='93' THEN TOTAL_WEAVE_TIME ELSE 0 END,0)) AS LOOM93 \n"
                + "FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL \n"
                + "where DOC_DATE>='" + EITLERPGLOBAL.formatDateDB(txtDatewiseWeaveTimeFrom.getText()) + "' AND DOC_DATE<='" + EITLERPGLOBAL.formatDateDB(txtDatewiseWeaveTimeTo.getText()) + "'\n"
                + "group by DOC_DATE";
        // + " AND  SHIFT_ID='"+ShiftCode+"' AND LOOM_ENG!=''";
        System.out.println("str " + str);

        try {
            Connection Conn;
            Statement stmt;
            ResultSet rsData;

            Conn = data.getConn();
            stmt = Conn.createStatement();
            rsData = stmt.executeQuery(str);
            rsData.first();
            int cnt = 1;

            while (!rsData.isAfterLast()) {

                Object[] rowData = new Object[24];

                rowData[0] = EITLERPGLOBAL.formatDate(rsData.getString("DOC_DATE"));
                rowData[1] = rsData.getString("LOOM7");
                rowData[2] = rsData.getString("LOOM8");
                rowData[3] = rsData.getString("LOOM81");
                rowData[4] = rsData.getString("LOOM82");
                rowData[5] = rsData.getString("LOOM83");
                rowData[6] = rsData.getString("LOOM84");
                rowData[7] = rsData.getString("LOOM85");
                rowData[8] = rsData.getString("LOOM86");
                rowData[9] = rsData.getString("LOOM87");
                rowData[10] = rsData.getString("LOOM88");
                rowData[11] = rsData.getString("LOOM89");
                rowData[12] = rsData.getString("LOOM90");
                rowData[13] = rsData.getString("LOOM91");
                rowData[14] = rsData.getString("LOOM92");
                rowData[15] = rsData.getString("LOOM93");

                DataModel_DateWiseWeaveTime.addRow(rowData);

                cnt++;
                rsData.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_ShiftwiseLoomOperationReport() {
        try {
            DataModel_Shiftwise = new EITLTableModel();
            tblShiftwise.removeAll();

            tblShiftwise.setModel(DataModel_Shiftwise);
            tblShiftwise.setAutoResizeMode(0);

            DataModel_Shiftwise.addColumn("SrNo"); //0 - Read Only
            DataModel_Shiftwise.addColumn("LOOM NO"); //1
            DataModel_Shiftwise.addColumn("NAME"); //2
            DataModel_Shiftwise.addColumn("CARD NO"); //3
            DataModel_Shiftwise.addColumn("EMP MASTER NAME"); //3
            DataModel_Shiftwise.addColumn("WARP SR NO"); //4
            DataModel_Shiftwise.addColumn("READ SPACE");
            DataModel_Shiftwise.addColumn("PROD GROUP"); //5
            DataModel_Shiftwise.addColumn("PICKS INSERTED"); //6
            DataModel_Shiftwise.addColumn("NO WARP NO WEFT"); //7
            DataModel_Shiftwise.addColumn("NO POWER NO AIR"); //8
            DataModel_Shiftwise.addColumn("BEAM GAITING"); //9
            DataModel_Shiftwise.addColumn("NO WEAVER"); //10
            DataModel_Shiftwise.addColumn("CLOTH REPAIR"); //11
            DataModel_Shiftwise.addColumn("NO BEAM"); //12
            DataModel_Shiftwise.addColumn("SORT CHANGE"); //13
            DataModel_Shiftwise.addColumn("OTHERS"); //14

            DataModel_Shiftwise.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_Shiftwise.SetVariable(1, "LOOM_NO"); //1
            DataModel_Shiftwise.SetVariable(2, "NAME"); //2
            DataModel_Shiftwise.SetVariable(3, "EMP_NO"); //3
            DataModel_Shiftwise.SetVariable(4, "EMP_NAME"); //3
            DataModel_Shiftwise.SetVariable(5, "READ_SPACE"); //4
            DataModel_Shiftwise.SetVariable(6, "PROD_GROUP"); //4
            DataModel_Shiftwise.SetVariable(7, "PICKS_INSERTED"); //5
            DataModel_Shiftwise.SetVariable(8, "NO_WARP_NO_WEFT"); //6
            DataModel_Shiftwise.SetVariable(9, "NO_POWER_NO_AIR"); //7
            DataModel_Shiftwise.SetVariable(10, "BEAM_GAITING"); //8
            DataModel_Shiftwise.SetVariable(11, "NO_WEAVER"); //9
            DataModel_Shiftwise.SetVariable(12, "CLOTH_REPAIR"); //10
            DataModel_Shiftwise.SetVariable(13, "NO_BEAM"); //11
            DataModel_Shiftwise.SetVariable(14, "SORT_CHANGE"); //12
            DataModel_Shiftwise.SetVariable(15, "OTHERS"); //13

            tblShiftwise.getColumnModel().getColumn(0).setMinWidth(20);
            tblShiftwise.getColumnModel().getColumn(1).setMinWidth(90);
            tblShiftwise.getColumnModel().getColumn(2).setMinWidth(120);
            tblShiftwise.getColumnModel().getColumn(3).setMinWidth(100);
            tblShiftwise.getColumnModel().getColumn(4).setMinWidth(120);
            tblShiftwise.getColumnModel().getColumn(5).setMinWidth(70);
            tblShiftwise.getColumnModel().getColumn(6).setMinWidth(120);
            tblShiftwise.getColumnModel().getColumn(7).setMinWidth(100);
            tblShiftwise.getColumnModel().getColumn(8).setMinWidth(120);
            tblShiftwise.getColumnModel().getColumn(9).setMinWidth(80);
            tblShiftwise.getColumnModel().getColumn(10).setMinWidth(70);
            tblShiftwise.getColumnModel().getColumn(11).setMinWidth(70);
            tblShiftwise.getColumnModel().getColumn(12).setMinWidth(50);
            tblShiftwise.getColumnModel().getColumn(13).setMinWidth(130);
            tblShiftwise.getColumnModel().getColumn(14).setMinWidth(80);
            tblShiftwise.getColumnModel().getColumn(15).setMinWidth(80);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_JobwiseAllocation() {
        try {
            DataModel_JobwiseAllocation = new EITLTableModel();
            tblJobwiseAllocation.removeAll();

            tblJobwiseAllocation.setModel(DataModel_JobwiseAllocation);
            tblJobwiseAllocation.setAutoResizeMode(0);

            DataModel_JobwiseAllocation.addColumn("SrNo"); //0 - Read Only
            DataModel_JobwiseAllocation.addColumn("MACHINE/POSITION"); //1
            DataModel_JobwiseAllocation.addColumn("SHIFT-1 EMP NO"); //2
            DataModel_JobwiseAllocation.addColumn("SHIFT-1 EMP NAME"); //3
            DataModel_JobwiseAllocation.addColumn("SHIFT-2 EMP NO"); //2
            DataModel_JobwiseAllocation.addColumn("SHIFT-2 EMP NAME"); //3
            DataModel_JobwiseAllocation.addColumn("SHIFT-3 EMP NO"); //2
            DataModel_JobwiseAllocation.addColumn("SHIFT-3 EMP NAME"); //3
            DataModel_JobwiseAllocation.addColumn("SHIFT-GEN EMP NO"); //2
            DataModel_JobwiseAllocation.addColumn("SHIFT-GEN EMP NAME"); //3

            //LOOM_ENG, SHIFT-1 EMP NO, SHIFT-1 EMP NAME, SHIFT-2 EMP NO, SHIFT-2 EMP NAME, SHIFT-3 EMP NO, SHIFT-3 EMP NAME, SHIFT-GEN EMP NO, SHIFT-GEN EMP NAME
            DataModel_JobwiseAllocation.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_JobwiseAllocation.SetVariable(1, "MACHINE_POSITION"); //1
            DataModel_JobwiseAllocation.SetVariable(2, "SHIFT-1 EMP NO"); //2
            DataModel_JobwiseAllocation.SetVariable(3, "SHIFT-1 EMP NAME"); //3
            DataModel_JobwiseAllocation.SetVariable(4, "SHIFT-2 EMP NO"); //2
            DataModel_JobwiseAllocation.SetVariable(5, "SHIFT-2 EMP NAME"); //3
            DataModel_JobwiseAllocation.SetVariable(6, "SHIFT-3 EMP NO"); //2
            DataModel_JobwiseAllocation.SetVariable(7, "SHIFT-3 EMP NAME"); //3
            DataModel_JobwiseAllocation.SetVariable(8, "SHIFT-GEN EMP NO"); //2
            DataModel_JobwiseAllocation.SetVariable(9, "SHIFT-GEN EMP NAME"); //3

            tblJobwiseAllocation.getColumnModel().getColumn(0).setMinWidth(20);
            tblJobwiseAllocation.getColumnModel().getColumn(1).setMinWidth(180);
            tblJobwiseAllocation.getColumnModel().getColumn(2).setMinWidth(110);
            tblJobwiseAllocation.getColumnModel().getColumn(3).setMinWidth(150);
            tblJobwiseAllocation.getColumnModel().getColumn(4).setMinWidth(110);
            tblJobwiseAllocation.getColumnModel().getColumn(5).setMinWidth(150);
            tblJobwiseAllocation.getColumnModel().getColumn(6).setMinWidth(110);
            tblJobwiseAllocation.getColumnModel().getColumn(7).setMinWidth(150);
            tblJobwiseAllocation.getColumnModel().getColumn(8).setMinWidth(110);
            tblJobwiseAllocation.getColumnModel().getColumn(9).setMinWidth(150);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_AllDataReport() {
        try {
            DataModel_AllDataReport = new EITLTableModel();
            tblAllDataReport.removeAll();

            tblAllDataReport.setModel(DataModel_AllDataReport);
            tblAllDataReport.setAutoResizeMode(0);

            DataModel_AllDataReport.addColumn("SrNo"); //0 - Read Only
            DataModel_AllDataReport.addColumn("DATE"); //1
            DataModel_AllDataReport.addColumn("SHIFT"); //2
            DataModel_AllDataReport.addColumn("LOOM NO"); //3
            DataModel_AllDataReport.addColumn("EMP NO"); //3
            DataModel_AllDataReport.addColumn("EMP NAME"); //4
            DataModel_AllDataReport.addColumn("POSITION"); //5
            DataModel_AllDataReport.addColumn("ROKDI/REGULAR"); //6
            DataModel_AllDataReport.addColumn("PERMENANT/CONTRACT"); //7
            DataModel_AllDataReport.addColumn("TRAINEE"); //7
            DataModel_AllDataReport.addColumn("TRAINEE_POSITION"); //7

            //LOOM_ENG, SHIFT-1 EMP NO, SHIFT-1 EMP NAME, SHIFT-2 EMP NO, SHIFT-2 EMP NAME, SHIFT-3 EMP NO, SHIFT-3 EMP NAME, SHIFT-GEN EMP NO, SHIFT-GEN EMP NAME
            DataModel_AllDataReport.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_AllDataReport.SetVariable(1, "DATE_OF_REPORT"); //1
            DataModel_AllDataReport.SetVariable(2, "SHIFT"); //2
            DataModel_AllDataReport.SetVariable(3, "LOOM_NO"); //2
            DataModel_AllDataReport.SetVariable(4, "EMPNO"); //2
            DataModel_AllDataReport.SetVariable(5, "EMPNAME"); //2
            DataModel_AllDataReport.SetVariable(6, "POSITION"); //2
            DataModel_AllDataReport.SetVariable(7, "ROKDI_REGULAR"); //2
            DataModel_AllDataReport.SetVariable(8, "PER_CONTRACT"); //2
            DataModel_AllDataReport.SetVariable(9, "TRAINEE"); //2
            DataModel_AllDataReport.SetVariable(10, "TRAINEE_POSITION"); //2

            tblAllDataReport.getColumnModel().getColumn(0).setMinWidth(20);
            tblAllDataReport.getColumnModel().getColumn(1).setMinWidth(180);
            tblAllDataReport.getColumnModel().getColumn(2).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(3).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(4).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(5).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(6).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(7).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(8).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(9).setMinWidth(110);
            tblAllDataReport.getColumnModel().getColumn(10).setMinWidth(110);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid_DateWiseWeaveTime() {
        try {
            DataModel_DateWiseWeaveTime = new EITLTableModel();
            tblDatewiseWeaveTime.removeAll();

            tblDatewiseWeaveTime.setModel(DataModel_DateWiseWeaveTime);
            tblDatewiseWeaveTime.setAutoResizeMode(0);

            DataModel_DateWiseWeaveTime.addColumn("Doc Date"); //0 - Read Only
            DataModel_DateWiseWeaveTime.addColumn("L.NO.7"); //1
            DataModel_DateWiseWeaveTime.addColumn("L.NO.8"); //2
            DataModel_DateWiseWeaveTime.addColumn("L.NO.81"); //3
            DataModel_DateWiseWeaveTime.addColumn("L.NO.82"); //3
            DataModel_DateWiseWeaveTime.addColumn("L.NO.83"); //4
            DataModel_DateWiseWeaveTime.addColumn("L.NO.84"); //5
            DataModel_DateWiseWeaveTime.addColumn("L.NO.85"); //6
            DataModel_DateWiseWeaveTime.addColumn("L.NO.86"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.87"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.88"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.89"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.90"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.91"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.92"); //7
            DataModel_DateWiseWeaveTime.addColumn("L.NO.93"); //7

            //LOOM_ENG, SHIFT-1 EMP NO, SHIFT-1 EMP NAME, SHIFT-2 EMP NO, SHIFT-2 EMP NAME, SHIFT-3 EMP NO, SHIFT-3 EMP NAME, SHIFT-GEN EMP NO, SHIFT-GEN EMP NAME
            DataModel_DateWiseWeaveTime.SetVariable(0, "DOC_DATE"); //0 - Read Only
            DataModel_DateWiseWeaveTime.SetVariable(1, "LOOM_NO_7"); //1
            DataModel_DateWiseWeaveTime.SetVariable(2, "LOOM_NO_8"); //2
            DataModel_DateWiseWeaveTime.SetVariable(3, "LOOM_NO_81"); //2
            DataModel_DateWiseWeaveTime.SetVariable(4, "LOOM_NO_82"); //2
            DataModel_DateWiseWeaveTime.SetVariable(5, "LOOM_NO_83"); //2
            DataModel_DateWiseWeaveTime.SetVariable(6, "LOOM_NO_84"); //2
            DataModel_DateWiseWeaveTime.SetVariable(7, "LOOM_NO_85"); //2
            DataModel_DateWiseWeaveTime.SetVariable(8, "LOOM_NO_86"); //2
            DataModel_DateWiseWeaveTime.SetVariable(9, "LOOM_NO_87"); //2
            DataModel_DateWiseWeaveTime.SetVariable(10, "LOOM_NO_88"); //2
            DataModel_DateWiseWeaveTime.SetVariable(11, "LOOM_NO_89"); //2
            DataModel_DateWiseWeaveTime.SetVariable(12, "LOOM_NO_90"); //2
            DataModel_DateWiseWeaveTime.SetVariable(13, "LOOM_NO_91"); //2
            DataModel_DateWiseWeaveTime.SetVariable(14, "LOOM_NO_92"); //2
            DataModel_DateWiseWeaveTime.SetVariable(15, "LOOM_NO_93"); //2

            tblDatewiseWeaveTime.getColumnModel().getColumn(0).setMinWidth(20);
            tblDatewiseWeaveTime.getColumnModel().getColumn(1).setMinWidth(180);
            tblDatewiseWeaveTime.getColumnModel().getColumn(2).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(3).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(4).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(5).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(6).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(7).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(8).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(9).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(10).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(11).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(12).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(13).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(14).setMinWidth(110);
            tblDatewiseWeaveTime.getColumnModel().getColumn(15).setMinWidth(110);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDataShiftwiseLoomOperationReport() {
        FormatGrid_ShiftwiseLoomOperationReport();
        int ShiftCode = 0;

        if (cmbShiftwise.getSelectedIndex() == 0) {
            ShiftCode = 1;
        } else if (cmbShiftwise.getSelectedIndex() == 1) {
            ShiftCode = 2;
        } else if (cmbShiftwise.getSelectedIndex() == 2) {
            ShiftCode = 3;
        } else if (cmbShiftwise.getSelectedIndex() == 3) {
            ShiftCode = 6;
        }

        String str = "SELECT LOOM_ENG,EMP_NAME,EMP_NO,BEAM_WARP_SR_NO,REED_SPACE_METER,PRODUCT_GROUP, "
                + "PICK,NO_WARP_NO_WEFT,NO_POWER_NO_AIR,BEAN_GAITING,NO_WEAVER,CLOTH_REPAIR_TOTAL,NO_BEAM_READY,  "
                + "Q_CHANGES  "
                + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL where DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDate.getText()) + "'"
                + "      AND SHIFT_ID='" + ShiftCode + "'  AND (CATEGORY='WEAVER' OR LOOM_ENG!='')";
        System.out.println("str : " + str);
        try {
            Connection Conn;
            Statement stmt;
            ResultSet rsData;

            Conn = data.getConn();
            stmt = Conn.createStatement();
            rsData = stmt.executeQuery(str);
            rsData.first();
            int cnt = 1;

            double PICK = 0, NO_WARP_NO_WEFT = 0, NO_POWER_NO_AIR = 0, BEAN_GAITING = 0, NO_WEAVER = 0,
                    CLOTH_REPAIR_TOTAL = 0, NO_BEAM_READY = 0, Q_CHANGES = 0;

            while (!rsData.isAfterLast()) {

                Object[] rowData = new Object[20];

                rowData[0] = Integer.toString(cnt);
                rowData[1] = rsData.getString("LOOM_ENG");
                rowData[2] = rsData.getString("EMP_NAME");
                rowData[3] = rsData.getString("EMP_NO");
                if (!rsData.getString("EMP_NO").equals("")) {
                    rowData[4] = data.getStringValueFromDB("SELECT EMP_NAME FROM SDMLATTPAY.ATTPAY_EMPMST where EMP_NO='" + rsData.getString("EMP_NO") + "'");
                } else {
                    rowData[4] = "";
                }
                rowData[5] = rsData.getString("BEAM_WARP_SR_NO");
                rowData[6] = rsData.getString("REED_SPACE_METER");
                rowData[7] = rsData.getString("PRODUCT_GROUP");
                rowData[8] = rsData.getString("PICK");
                rowData[9] = rsData.getString("NO_WARP_NO_WEFT");
                rowData[10] = rsData.getString("NO_POWER_NO_AIR");
                rowData[11] = rsData.getString("BEAN_GAITING");
                rowData[12] = rsData.getString("NO_WEAVER");
                rowData[13] = rsData.getString("CLOTH_REPAIR_TOTAL");
                rowData[14] = rsData.getString("NO_BEAM_READY");
                rowData[15] = rsData.getString("Q_CHANGES");

                try {
                    PICK = PICK + Double.parseDouble(rsData.getString("PICK"));
                } catch (Exception e) {
                }

                try {
                    NO_WARP_NO_WEFT = NO_WARP_NO_WEFT + Double.parseDouble(rsData.getString("NO_WARP_NO_WEFT"));
                } catch (Exception e) {
                }

                try {
                    NO_POWER_NO_AIR = NO_POWER_NO_AIR + Double.parseDouble(rsData.getString("NO_POWER_NO_AIR"));
                } catch (Exception e) {
                }

                try {
                    BEAN_GAITING = BEAN_GAITING + Double.parseDouble(rsData.getString("BEAN_GAITING"));
                } catch (Exception e) {
                }

                try {
                    NO_WEAVER = NO_WEAVER + Double.parseDouble(rsData.getString("NO_WEAVER"));
                } catch (Exception e) {
                }

                try {
                    CLOTH_REPAIR_TOTAL = CLOTH_REPAIR_TOTAL + Double.parseDouble(rsData.getString("CLOTH_REPAIR_TOTAL"));
                } catch (Exception e) {
                }

                try {
                    NO_BEAM_READY = NO_BEAM_READY + Double.parseDouble(rsData.getString("NO_BEAM_READY"));
                } catch (Exception e) {
                }

                try {
                    Q_CHANGES = Q_CHANGES + Double.parseDouble(rsData.getString("Q_CHANGES"));
                } catch (Exception e) {
                }

                DataModel_Shiftwise.addRow(rowData);
                cnt++;
                rsData.next();
            }

            if (cnt > 0) {
                Object[] rowData = new Object[20];

                rowData[0] = "TOTAL";
                rowData[8] = PICK;
                rowData[9] = NO_WARP_NO_WEFT;
                rowData[10] = NO_POWER_NO_AIR;
                rowData[11] = BEAN_GAITING;
                rowData[12] = NO_WEAVER;
                rowData[13] = CLOTH_REPAIR_TOTAL;
                rowData[14] = NO_BEAM_READY;
                rowData[15] = Q_CHANGES;
                DataModel_Shiftwise.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void GenerateDataJobwiseAllocationReport() {

        FormatGrid_JobwiseAllocation();
        try {
            Connection Conn;
            Statement stmt;
            ResultSet rsData;
            Conn = data.getConn();
            stmt = Conn.createStatement();
            int cnt = 1;
            String str = "SELECT D.LOOM_ENG,"
                    + "COALESCE(E.EMP_NO,'') AS 'SHIFT-1 EMP NO',COALESCE(E.EMP_NAME,'') AS 'SHIFT-1 EMP NAME', "
                    + "COALESCE(F.EMP_NO,'') AS 'SHIFT-2 EMP NO',COALESCE(F.EMP_NAME,'') AS 'SHIFT-2 EMP NAME', "
                    + "COALESCE(G.EMP_NO,'') AS 'SHIFT-3 EMP NO',COALESCE(G.EMP_NAME,'') AS 'SHIFT-3 EMP NAME', "
                    + "COALESCE(H.EMP_NO,'') AS 'SHIFT-GEN EMP NO',COALESCE(H.EMP_NAME,'') AS 'SHIFT-GEN EMP NAME' "
                    + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  "
                    + "LEFT JOIN PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL E "
                    + "ON D.LOOM_ENG=E.LOOM_ENG AND E.SHIFT_ID=1 AND  "
                    + "(E.CATEGORY='WEAVER' OR E.LOOM_ENG!='') AND E.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' "
                    + " "
                    + "LEFT JOIN PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL F "
                    + "ON D.LOOM_ENG=F.LOOM_ENG AND F.SHIFT_ID=2 AND  "
                    + "(F.CATEGORY='WEAVER' OR F.LOOM_ENG!='') AND F.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' "
                    + " "
                    + "LEFT JOIN PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL G "
                    + "ON D.LOOM_ENG=G.LOOM_ENG AND G.SHIFT_ID=3 AND  "
                    + "(G.CATEGORY='WEAVER' OR G.LOOM_ENG!='') AND G.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' "
                    + " "
                    + "LEFT JOIN PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL H "
                    + "ON D.LOOM_ENG=H.LOOM_ENG AND H.SHIFT_ID=6 AND  "
                    + "(H.CATEGORY='WEAVER' OR H.LOOM_ENG!='') AND H.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' "
                    + " "
                    + "where D.SHIFT_ID=1 AND  "
                    + "(D.CATEGORY='WEAVER' OR D.LOOM_ENG!='') AND D.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "'";
            try {

                System.out.println("STR = " + str);
                rsData = stmt.executeQuery(str);
                rsData.first();

                while (!rsData.isAfterLast()) {

                    Object[] rowData = new Object[20];

                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = "WEAVER LOOM NO " + rsData.getString(1);
                    rowData[2] = rsData.getString(2);
                    rowData[3] = rsData.getString(3);
                    rowData[4] = rsData.getString(4);
                    rowData[5] = rsData.getString(5);
                    rowData[6] = rsData.getString(6);
                    rowData[7] = rsData.getString(7);
                    rowData[8] = rsData.getString(8);
                    rowData[9] = rsData.getString(9);

                    DataModel_JobwiseAllocation.addRow(rowData);
                    cnt++;
                    rsData.next();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            int row_start = 0;
            int counter = 0;
            try {
                ResultSet rs_category = stmt.executeQuery("SELECT distinct CATEGORY FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' AND LOOM_ENG='' AND CATEGORY!='WEAVER' AND CATEGORY!=''");
                System.out.println("SELECT distinct CATEGORY FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' AND LOOM_ENG='' AND CATEGORY!='WEAVER' AND CATEGORY!=''");
                rs_category.first();
                while (!rs_category.isAfterLast()) {
                    String category = rs_category.getString(1);

                    System.out.println("Category : " + category);

                    str = " select MAX(TOTAL) from (SELECT COUNT(*) as TOTAL FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL F "
                            + " where (F.CATEGORY='" + category + "') AND F.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "' "
                            + " group by SHIFT_ID) as MAX";
                    System.out.println("str : " + str);

                    int total_max = data.getIntValueFromDB(str);

                    row_start = cnt;
                    for (int i = 0; i < total_max; i++) {
                        Object[] rowData = new Object[20];

                        rowData[0] = Integer.toString(cnt);
                        rowData[1] = category;
                        rowData[2] = "";
                        rowData[3] = "";
                        rowData[4] = "";
                        rowData[5] = "";
                        rowData[6] = "";
                        rowData[7] = "";
                        rowData[8] = "";
                        rowData[9] = "";

                        DataModel_JobwiseAllocation.addRow(rowData);
                        cnt++;
                    }

                    try {
                        ResultSet rs1 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-1 EMP NO',D.EMP_NAME AS 'SHIFT-1 EMP NAME' "
                                + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  "
                                + " where D.SHIFT_ID=1 AND  "
                                + " (D.CATEGORY='" + category + "') AND D.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "'");
                        rs1.first();
                        counter = row_start;
                        while (!rs1.isAfterLast()) {

                            DataModel_JobwiseAllocation.setValueAt(rs1.getString(1), counter - 1, 2);
                            DataModel_JobwiseAllocation.setValueAt(rs1.getString(2), counter - 1, 3);
                            counter++;
                            rs1.next();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        ResultSet rs2 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-2 EMP NO',D.EMP_NAME AS 'SHIFT-2 EMP NAME' "
                                + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  "
                                + " where D.SHIFT_ID=2 AND  "
                                + " (D.CATEGORY='" + category + "') AND D.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "'");
                        rs2.first();
                        counter = row_start;
                        while (!rs2.isAfterLast()) {

                            DataModel_JobwiseAllocation.setValueAt(rs2.getString(1), counter - 1, 4);
                            DataModel_JobwiseAllocation.setValueAt(rs2.getString(2), counter - 1, 5);
                            counter++;
                            rs2.next();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        ResultSet rs3 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-3 EMP NO',D.EMP_NAME AS 'SHIFT-3 EMP NAME' "
                                + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  "
                                + " where D.SHIFT_ID=3 AND  "
                                + " (D.CATEGORY='" + category + "') AND D.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "'");
                        rs3.first();
                        counter = row_start;
                        while (!rs3.isAfterLast()) {

                            DataModel_JobwiseAllocation.setValueAt(rs3.getString(1), counter - 1, 6);
                            DataModel_JobwiseAllocation.setValueAt(rs3.getString(2), counter - 1, 7);
                            counter++;
                            rs3.next();
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        ResultSet rs4 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-GEN EMP NO',D.EMP_NAME AS 'SHIFT-GEN EMP NAME' "
                                + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  "
                                + " where D.SHIFT_ID=6 AND  "
                                + " (D.CATEGORY='" + category + "') AND D.DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText()) + "'");
                        rs4.first();
                        counter = row_start;
                        while (!rs4.isAfterLast()) {

                            DataModel_JobwiseAllocation.setValueAt(rs4.getString(1), counter - 1, 8);
                            DataModel_JobwiseAllocation.setValueAt(rs4.getString(2), counter - 1, 9);
                            counter++;
                            rs4.next();
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    rs_category.next();
                }

            } catch (Exception e) {
                System.out.println("Error " + e.getMessage());
                e.printStackTrace();
            }

//        
//        
//        ////TWISTER START
//        try{
//                    str= " select MAX(TOTAL) from " +
//                         " (SELECT COUNT(*) as TOTAL FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL F " +
//                         " where (F.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND F.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"' " +
//                         " group by SHIFT_ID) as MAX";
//                    System.out.println("TWISTER STR MAIN "+str);
//                    rsData = stmt.executeQuery(str);
//                    rsData.first();
//                    int total_max = data.getIntValueFromDB(str);
//                    cnt = TWISTER_row_start2;
//                    for(int i=0;i<total_max;i++)
//                    {
//                        Object[] rowData = new Object[20];
//                      
//                        rowData[0] = Integer.toString(cnt);
//                        rowData[1] = "TWISTER/TAPPER/WINDER";
//                        rowData[2] = "";
//                        rowData[3] = "";
//                        rowData[4] = "";
//                        rowData[5] = "";
//                        rowData[6] = "";
//                        rowData[7] = "";
//                        rowData[8] = "";
//                        rowData[9] = "";
//                        
//                        DataModel_JobwiseAllocation.addRow(rowData);
//                        cnt++;
//                    }
//                    WARPER_row_start2 = cnt;
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{          
//                    ResultSet rs1 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-1 EMP NO',D.EMP_NAME AS 'SHIFT-1 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=1 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    System.out.println("SELECT D.EMP_NO AS 'SHIFT-1 EMP NO',D.EMP_NAME AS 'SHIFT-1 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=1 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs1.first();
//                    cnt=TWISTER_row_start2;
//                    while (!rs1.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs1.getString(1), cnt-1, 2);
//                        DataModel_JobwiseAllocation.setValueAt(rs1.getString(2), cnt-1, 3);
//                        cnt++;
//                        rs1.next();
//                    }
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{            
//                    ResultSet rs2 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-2 EMP NO',D.EMP_NAME AS 'SHIFT-2 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=2 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    System.out.println("SELECT D.EMP_NO AS 'SHIFT-2 EMP NO',D.EMP_NAME AS 'SHIFT-2 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=2 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs2.first();
//                    cnt=TWISTER_row_start2;
//                    while (!rs2.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs2.getString(1), cnt-1, 4);
//                        DataModel_JobwiseAllocation.setValueAt(rs2.getString(2), cnt-1, 5);
//                        cnt++;
//                        rs2.next();
//                    }
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{            
//                    ResultSet rs3 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-3 EMP NO',D.EMP_NAME AS 'SHIFT-3 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=3 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    System.out.println("SELECT D.EMP_NO AS 'SHIFT-3 EMP NO',D.EMP_NAME AS 'SHIFT-3 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=3 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs3.first();
//                    cnt=TWISTER_row_start2;
//                    while (!rs3.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs3.getString(1), cnt-1, 6);
//                        DataModel_JobwiseAllocation.setValueAt(rs3.getString(2), cnt-1, 7);
//                        cnt++;
//                        rs3.next();
//                    }
//                    
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{            
//                    ResultSet rs4 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-GEN EMP NO',D.EMP_NAME AS 'SHIFT-GEN EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=6 AND  " +
//                                                    " (D.CATEGORY LIKE 'TWISTER/TAPPER/WINDER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs4.first();
//                    cnt=TWISTER_row_start2;
//                    while (!rs4.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs4.getString(1), cnt-1, 8);
//                        DataModel_JobwiseAllocation.setValueAt(rs4.getString(2), cnt-1, 9);
//                        cnt++;
//                        rs4.next();
//                    }
//                    
//            }catch(Exception e)
//            {
//                e.printStackTrace();
//            }
//        
//        //TWISTER END
//        
//        
//        ////WARPER START
//        try{
//                    str= " select MAX(TOTAL) from " +
//                         " (SELECT COUNT(*) as TOTAL FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL F " +
//                         " where (F.CATEGORY LIKE 'WARPER%') AND F.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"' " +
//                         " group by SHIFT_ID) as MAX";
//                    System.out.println("WARPER STR MAIN "+str);
//                    rsData = stmt.executeQuery(str);
//                    rsData.first();
//                    int total_max = data.getIntValueFromDB(str);
//                    cnt = WARPER_row_start2;
//                    for(int i=0;i<total_max;i++)
//                    {
//                        Object[] rowData = new Object[20];
//                      
//                        rowData[0] = Integer.toString(cnt);
//                        rowData[1] = "WARPER";
//                        rowData[2] = "";
//                        rowData[3] = "";
//                        rowData[4] = "";
//                        rowData[5] = "";
//                        rowData[6] = "";
//                        rowData[7] = "";
//                        rowData[8] = "";
//                        rowData[9] = "";
//                        
//                        DataModel_JobwiseAllocation.addRow(rowData);
//                        cnt++;
//                    }
//                   // TWISTER_row_start2 = cnt;
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{          
//                    ResultSet rs1 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-1 EMP NO',D.EMP_NAME AS 'SHIFT-1 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=1 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    System.out.println("SELECT D.EMP_NO AS 'SHIFT-1 EMP NO',D.EMP_NAME AS 'SHIFT-1 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=1 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs1.first();
//                    cnt=WARPER_row_start2;
//                    while (!rs1.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs1.getString(1), cnt-1, 2);
//                        DataModel_JobwiseAllocation.setValueAt(rs1.getString(2), cnt-1, 3);
//                        cnt++;
//                        rs1.next();
//                    }
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{            
//                    ResultSet rs2 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-2 EMP NO',D.EMP_NAME AS 'SHIFT-2 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=2 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    System.out.println("SELECT D.EMP_NO AS 'SHIFT-2 EMP NO',D.EMP_NAME AS 'SHIFT-2 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=2 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs2.first();
//                    cnt=WARPER_row_start2;
//                    while (!rs2.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs2.getString(1), cnt-1, 4);
//                        DataModel_JobwiseAllocation.setValueAt(rs2.getString(2), cnt-1, 5);
//                        cnt++;
//                        rs2.next();
//                    }
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{            
//                    ResultSet rs3 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-3 EMP NO',D.EMP_NAME AS 'SHIFT-3 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=3 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    System.out.println("SELECT D.EMP_NO AS 'SHIFT-3 EMP NO',D.EMP_NAME AS 'SHIFT-3 EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=3 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs3.first();
//                    cnt=WARPER_row_start2;
//                    while (!rs3.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs3.getString(1), cnt-1, 6);
//                        DataModel_JobwiseAllocation.setValueAt(rs3.getString(2), cnt-1, 7);
//                        cnt++;
//                        rs3.next();
//                    }
//                    
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
//        try{            
//                    ResultSet rs4 = data.getResult("SELECT D.EMP_NO AS 'SHIFT-GEN EMP NO',D.EMP_NAME AS 'SHIFT-GEN EMP NAME' " +
//                                                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL D  " +
//                                                    " where D.SHIFT_ID=6 AND  " +
//                                                    " (D.CATEGORY LIKE 'WARPER%') AND D.DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateJobwise.getText())+"'");
//                    rs4.first();
//                    cnt=WARPER_row_start2;
//                    while (!rs4.isAfterLast()) {
//                    
//                        DataModel_JobwiseAllocation.setValueAt(rs4.getString(1), cnt-1, 8);
//                        DataModel_JobwiseAllocation.setValueAt(rs4.getString(2), cnt-1, 9);
//                        cnt++;
//                        rs4.next();
//                    }
//                    
//            }catch(Exception e)
//            {
//                e.printStackTrace();
//            }
//        
//        //WARPER END
//        
//        
//        
//        
//        
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid_ShiftReport() {
        try {
            DataModel_ShiftReport = new EITLTableModel();
            tblShiftReport.removeAll();

            tblShiftReport.setModel(DataModel_ShiftReport);
            tblShiftReport.setAutoResizeMode(0);
            //, , , , , , , , , , , , , , , , , , , , , 
            DataModel_ShiftReport.addColumn("SrNo"); //0 - Read Only
            DataModel_ShiftReport.addColumn("DATE"); //1
            DataModel_ShiftReport.addColumn("SHIFT"); //1
            DataModel_ShiftReport.addColumn("LOOM_NO"); //1
            DataModel_ShiftReport.addColumn("SHIFT_STARTING"); //2
            DataModel_ShiftReport.addColumn("IST_RECESS_OUT"); //3
            DataModel_ShiftReport.addColumn("IST_RECESS_IN"); //3
            DataModel_ShiftReport.addColumn("IIND_RECESS_OUT"); //1
            DataModel_ShiftReport.addColumn("IIND_RECESS_IN"); //2
            DataModel_ShiftReport.addColumn("IIIRD_RECESS_OUT"); //3
            DataModel_ShiftReport.addColumn("IIIRD_RECESS_IN"); //3
            DataModel_ShiftReport.addColumn("SHIFT_END_OUT"); //1
            DataModel_ShiftReport.addColumn("CALCULATED_HOUR"); //2
            DataModel_ShiftReport.addColumn("BEAN_GAITING"); //3
            DataModel_ShiftReport.addColumn("RE_BEAM_GAITING"); //3
            DataModel_ShiftReport.addColumn("NO_WEAVER"); //1
            DataModel_ShiftReport.addColumn("CLOTH_REPAIR_TOTAL"); //2
            DataModel_ShiftReport.addColumn("NO_BEAM_READY"); //3
            DataModel_ShiftReport.addColumn("Q_CHANGES"); //3
            DataModel_ShiftReport.addColumn("MECH_REPAIR"); //3
            DataModel_ShiftReport.addColumn("ELE_RO_REPAIR"); //1
            DataModel_ShiftReport.addColumn("SHUTTLE_REPAIR_TOTAL"); //2
            DataModel_ShiftReport.addColumn("OVER_HAULING"); //3
            DataModel_ShiftReport.addColumn("SELEVEDGE_EDGE_CORD_REPAIR"); //3
            DataModel_ShiftReport.addColumn("TOTAL_TIME"); //3
            DataModel_ShiftReport.addColumn("REMARK"); //3
            DataModel_ShiftReport.addColumn("NO_PIRN"); //3
            DataModel_ShiftReport.addColumn("OTHER"); //3
            DataModel_ShiftReport.addColumn("TOTAL_WEAVE_TIME"); //TOTAL_WEAVE_TIME
            DataModel_ShiftReport.addColumn("NO_WARP_NO_WEFT"); //3
            DataModel_ShiftReport.addColumn("NO_POWER_NO_AIR"); //3

            DataModel_ShiftReport.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_ShiftReport.SetVariable(1, "DATE"); //1
            DataModel_ShiftReport.SetVariable(2, "SHIFT"); //1
            DataModel_ShiftReport.SetVariable(3, "LOOM_NO"); //1
            DataModel_ShiftReport.SetVariable(4, "SHIFT_STARTING"); //2
            DataModel_ShiftReport.SetVariable(5, "IST_RECESS_OUT"); //3
            DataModel_ShiftReport.SetVariable(6, "IST_RECESS_IN"); //3
            DataModel_ShiftReport.SetVariable(7, "IIND_RECESS_OUT"); //1
            DataModel_ShiftReport.SetVariable(8, "IIND_RECESS_IN"); //2
            DataModel_ShiftReport.SetVariable(9, "IIIRD_RECESS_OUT"); //3
            DataModel_ShiftReport.SetVariable(10, "IIIRD_RECESS_IN"); //3
            DataModel_ShiftReport.SetVariable(11, "SHIFT_END_OUT"); //1
            DataModel_ShiftReport.SetVariable(12, "CALCULATED_HOUR"); //2
            DataModel_ShiftReport.SetVariable(13, "BEAN_GAITING"); //3
            DataModel_ShiftReport.SetVariable(14, "RE_BEAM_GAITING"); //3
            DataModel_ShiftReport.SetVariable(15, "NO_WEAVER"); //1
            DataModel_ShiftReport.SetVariable(16, "CLOTH_REPAIR_TOTAL"); //2
            DataModel_ShiftReport.SetVariable(17, "NO_BEAM_READY"); //3
            DataModel_ShiftReport.SetVariable(18, "Q_CHANGES"); //3
            DataModel_ShiftReport.SetVariable(19, "MECH_REPAIR"); //3
            DataModel_ShiftReport.SetVariable(20, "ELE_RO_REPAIR"); //1
            DataModel_ShiftReport.SetVariable(21, "SHUTTLE_REPAIR_TOTAL"); //2
            DataModel_ShiftReport.SetVariable(22, "OVER_HAULING"); //3
            DataModel_ShiftReport.SetVariable(23, "SELEVEDGE_EDGE_CORD_REPAIR"); //3
            DataModel_ShiftReport.SetVariable(24, "TOTAL_TIME"); //3
            DataModel_ShiftReport.SetVariable(25, "REMARK"); //3
            DataModel_ShiftReport.SetVariable(26, "NO_PIRN"); //3
            DataModel_ShiftReport.SetVariable(27, "OTHER"); //3
            DataModel_ShiftReport.SetVariable(28, "TOTAL_WEAVE_TIME"); //3
            DataModel_ShiftReport.SetVariable(29, "NO_WARP_NO_WEFT"); //3
            DataModel_ShiftReport.SetVariable(30, "NO_POWER_NO_AIR"); //3

            tblShiftReport.getColumnModel().getColumn(0).setMinWidth(20);
            tblShiftReport.getColumnModel().getColumn(1).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(2).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(3).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(4).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(5).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(6).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(7).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(8).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(9).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(10).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(11).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(12).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(13).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(14).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(15).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(16).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(17).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(18).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(19).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(20).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(21).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(22).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(23).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(24).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(25).setMinWidth(450);
            tblShiftReport.getColumnModel().getColumn(26).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(27).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(28).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(29).setMinWidth(120);
            tblShiftReport.getColumnModel().getColumn(30).setMinWidth(120);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDataShiftReport() {
        FormatGrid_ShiftReport();

        String ShiftCode = "";

        if (cmbtblDatewisePresence.getSelectedIndex() == 0) {
            ShiftCode = "1";
        } else if (cmbtblDatewisePresence.getSelectedIndex() == 1) {
            ShiftCode = "2";
        } else if (cmbtblDatewisePresence.getSelectedIndex() == 2) {
            ShiftCode = "3";
        } else if (cmbtblDatewisePresence.getSelectedIndex() == 3) {
            ShiftCode = "1,2,3";
        } else if (cmbtblDatewisePresence.getSelectedIndex() == 4) {
            ShiftCode = "6";
        }

        String str = "SELECT DOC_DATE,SHIFT_ID,LOOM_ENG,SHIFT_STARTING, "
                + "IST_RECESS_OUT,IST_RECESS_IN, "
                + "IIND_RECESS_OUT,IIND_RECESS_IN, "
                + "IIIRD_RECESS_OUT,IIIRD_RECESS_IN, "
                + "SHIFT_END_OUT,TOTAL_WEAVE_TIME as CALCULATED_HOUR, "
                + "BEAN_GAITING, RE_BEAM_GAITING, NO_WEAVER, CLOTH_REPAIR_TOTAL, NO_BEAM_READY,  "
                + " Q_CHANGES, MECH_REPAIR, ELE_RO_REPAIR, SHUTTLE_REPAIR_TOTAL,  "
                + " OVER_HAULING, SELEVEDGE_EDGE_CORD_REPAIR, TOTAL_TIME,REMARK,NO_PIRN,OTHER,TOTAL_WEAVE_TIME,NO_WARP_NO_WEFT,NO_POWER_NO_AIR "
                + " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE DOC_DATE>='" + EITLERPGLOBAL.formatDateDB(txtFromDateShift.getText()) + "' AND DOC_DATE<='" + EITLERPGLOBAL.formatDateDB(txtToDateShift.getText()) + "' "
                + " AND  SHIFT_ID IN (" + ShiftCode + ") AND LOOM_ENG!='' ORDER BY DOC_DATE,SHIFT_ID";
        System.out.println("str " + str);

        
        
        try {
            Connection Conn;
            Statement stmt;
            ResultSet rsData;

            Conn = data.getConn();
            stmt = Conn.createStatement();
            rsData = stmt.executeQuery(str);
            rsData.first();
            int cnt = 1;

            double BEAN_GAITING = 0, RE_BEAM_GAITING = 0, NO_WEAVER = 0, CLOTH_REPAIR_TOTAL = 0,
                    NO_BEAM_READY = 0, Q_CHANGES = 0, MECH_REPAIR = 0, ELE_RO_REPAIR = 0,
                    SHUTTLE_REPAIR_TOTAL = 0, OVER_HAULING = 0, SELEVEDGE_EDGE_CORD_REPAIR = 0, TOTAL_TIME = 0;

            while (!rsData.isAfterLast()) {

                Object[] rowData = new Object[30];

                rowData[0] = Integer.toString(cnt);
                rowData[1] = EITLERPGLOBAL.formatDate(rsData.getString("DOC_DATE"));
                rowData[2] = rsData.getString("SHIFT_ID");
                rowData[3] = rsData.getString("LOOM_ENG");
                rowData[4] = rsData.getString("SHIFT_STARTING");
                rowData[5] = rsData.getString("IST_RECESS_OUT");
                rowData[6] = rsData.getString("IST_RECESS_IN");
                rowData[7] = rsData.getString("IIND_RECESS_OUT");
                rowData[8] = rsData.getString("IIND_RECESS_IN");
                rowData[9] = rsData.getString("IIIRD_RECESS_OUT");
                rowData[10] = rsData.getString("IIIRD_RECESS_IN");
                rowData[11] = rsData.getString("SHIFT_END_OUT");
                rowData[12] = rsData.getString("CALCULATED_HOUR");
                rowData[13] = rsData.getString("BEAN_GAITING");
                rowData[14] = rsData.getString("RE_BEAM_GAITING");
                rowData[15] = rsData.getString("NO_WEAVER");
                rowData[16] = rsData.getString("CLOTH_REPAIR_TOTAL");
                rowData[17] = rsData.getString("NO_BEAM_READY");
                rowData[18] = rsData.getString("Q_CHANGES");
                rowData[19] = rsData.getString("MECH_REPAIR");
                rowData[20] = rsData.getString("ELE_RO_REPAIR");
                rowData[21] = rsData.getString("SHUTTLE_REPAIR_TOTAL");
                rowData[22] = rsData.getString("OVER_HAULING");
                rowData[23] = rsData.getString("SELEVEDGE_EDGE_CORD_REPAIR");
                rowData[24] = rsData.getString("TOTAL_TIME");
                rowData[25] = rsData.getString("REMARK");
                rowData[25] = rsData.getString("NO_PIRN");
                rowData[26] = rsData.getString("OTHER");
                rowData[27] = rsData.getString("TOTAL_WEAVE_TIME");
                rowData[28] = rsData.getString("NO_WARP_NO_WEFT");
                rowData[29] = rsData.getString("NO_POWER_NO_AIR");

                
                //=0,=0,=0,=0,
                //    =0,=0,=0,=0,
                //    =0,=0,=0,=0;
                try {
                    BEAN_GAITING = BEAN_GAITING + Double.parseDouble(rsData.getString("BEAN_GAITING"));
                } catch (Exception e) {
                }
                try {
                    RE_BEAM_GAITING = RE_BEAM_GAITING + Double.parseDouble(rsData.getString("RE_BEAM_GAITING"));
                } catch (Exception e) {
                }
                try {
                    NO_WEAVER = NO_WEAVER + Double.parseDouble(rsData.getString("NO_WEAVER"));
                } catch (Exception e) {
                }
                try {
                    CLOTH_REPAIR_TOTAL = CLOTH_REPAIR_TOTAL + Double.parseDouble(rsData.getString("CLOTH_REPAIR_TOTAL"));
                } catch (Exception e) {
                }
                try {
                    NO_BEAM_READY = NO_BEAM_READY + Double.parseDouble(rsData.getString("NO_BEAM_READY"));
                } catch (Exception e) {
                }
                try {
                    Q_CHANGES = Q_CHANGES + Double.parseDouble(rsData.getString("Q_CHANGES"));
                } catch (Exception e) {
                }
                try {
                    MECH_REPAIR = MECH_REPAIR + Double.parseDouble(rsData.getString("MECH_REPAIR"));
                } catch (Exception e) {
                }
                try {
                    ELE_RO_REPAIR = ELE_RO_REPAIR + Double.parseDouble(rsData.getString("ELE_RO_REPAIR"));
                } catch (Exception e) {
                }
                try {
                    SHUTTLE_REPAIR_TOTAL = SHUTTLE_REPAIR_TOTAL + Double.parseDouble(rsData.getString("SHUTTLE_REPAIR_TOTAL"));
                } catch (Exception e) {
                }
                try {
                    OVER_HAULING = OVER_HAULING + Double.parseDouble(rsData.getString("OVER_HAULING"));
                } catch (Exception e) {
                }
                try {
                    SELEVEDGE_EDGE_CORD_REPAIR = SELEVEDGE_EDGE_CORD_REPAIR + Double.parseDouble(rsData.getString("SELEVEDGE_EDGE_CORD_REPAIR"));
                } catch (Exception e) {
                }
                try {
                    TOTAL_TIME = TOTAL_TIME + Double.parseDouble(rsData.getString("TOTAL_TIME"));
                } catch (Exception e) {
                }

                DataModel_ShiftReport.addRow(rowData);

                cnt++;
                rsData.next();
            }

            if (cnt > 0) {
                Object[] rowData = new Object[24];

                rowData[0] = "TOTAL";

                rowData[11] = BEAN_GAITING;
                rowData[12] = RE_BEAM_GAITING;
                rowData[13] = NO_WEAVER;
                rowData[14] = CLOTH_REPAIR_TOTAL;
                rowData[15] = NO_BEAM_READY;
                rowData[16] = Q_CHANGES;
                rowData[17] = MECH_REPAIR;
                rowData[18] = ELE_RO_REPAIR;
                rowData[19] = SHUTTLE_REPAIR_TOTAL;
                rowData[20] = OVER_HAULING;
                rowData[21] = SELEVEDGE_EDGE_CORD_REPAIR;
                rowData[22] = TOTAL_TIME;

                DataModel_ShiftReport.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void FormatGrid_DatewisePresence() {
        try {
            DataModel_DatewisePresence = new EITLTableModel();
            tblDatewisePresence.removeAll();

            tblDatewisePresence.setModel(DataModel_DatewisePresence);
            tblDatewisePresence.setAutoResizeMode(0);
            //, , , , , , , , , , , , , , , , , , , , , 
            DataModel_DatewisePresence.addColumn("SrNo"); //0 - Read Only
            DataModel_DatewisePresence.addColumn("NAME"); //1
            DataModel_DatewisePresence.addColumn("CARD_NO"); //2

            DataModel_DatewisePresence.SetVariable(0, "SrNo"); //0 - Read Only
            DataModel_DatewisePresence.SetVariable(1, "LOOM_NO"); //1
            DataModel_DatewisePresence.SetVariable(2, "CARD_NO"); //1

            ResultSet rsData = data.getResult("SELECT distinct CATEGORY FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDatewisePresence.getText()) + "' AND CATEGORY!=''");
            System.out.println("SELECT distinct CATEGORY FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDatewisePresence.getText()) + "' AND CATEGORY!=''");
            int col = 2;

            try {

                rsData.first();
                while (!rsData.isAfterLast()) {

                    col++;

                    DataModel_DatewisePresence.addColumn(rsData.getString("CATEGORY")); //2
                    DataModel_DatewisePresence.SetVariable(col, rsData.getString("CATEGORY")); //1

                    tblDatewisePresence.getColumnModel().getColumn(col).setMinWidth(150);
                    rsData.next();

                }
            } catch (Exception e) {
                e.getMessage();
                e.printStackTrace();
            }

            tblDatewisePresence.getColumnModel().getColumn(0).setMinWidth(20);
            tblDatewisePresence.getColumnModel().getColumn(1).setMinWidth(120);
            tblDatewisePresence.getColumnModel().getColumn(2).setMinWidth(120);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDataDatewisePresence() {
        FormatGrid_DatewisePresence();

        int ShiftCode = 0;

        if (cmbDatewisePresence.getSelectedIndex() == 0) {
            ShiftCode = 1;
        } else if (cmbDatewisePresence.getSelectedIndex() == 1) {
            ShiftCode = 2;
        } else if (cmbDatewisePresence.getSelectedIndex() == 2) {
            ShiftCode = 3;
        } else if (cmbDatewisePresence.getSelectedIndex() == 3) {
            ShiftCode = 6;
        }

        String str = "select distinct EMP_NO,EMP_NAME FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL  where EMP_NO!='' AND DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDatewisePresence.getText()) + "' AND SHIFT_ID='" + ShiftCode + "'";

        try {
            Connection Conn;
            Statement stmt;
            ResultSet rsData;

            Conn = data.getConn();
            stmt = Conn.createStatement();
            rsData = stmt.executeQuery(str);
            rsData.first();
            int cnt = 0;
            while (!rsData.isAfterLast()) {

                cnt++;
                Object[] rowData = new Object[24];

                rowData[0] = Integer.toString(cnt);
                rowData[1] = rsData.getString("EMP_NAME");
                rowData[2] = rsData.getString("EMP_NO");

                DataModel_DatewisePresence.addRow(rowData);
                rsData.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int i = 0; i < DataModel_DatewisePresence.getRowCount(); i++) {
            for (int j = 0; j < DataModel_DatewisePresence.getColumnCount(); j++) {
                if (j > 2) {
                    String Column_Name = DataModel_DatewisePresence.getColumnName(j);
                    String Emp_No = DataModel_DatewisePresence.getValueByVariable("CARD_NO", i);

                    String str_data = "select TOTAL_TIME FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                            + " where EMP_NO='" + Emp_No + "' AND DOC_DATE='" + EITLERPGLOBAL.formatDateDB(txtDatewisePresence.getText()) + "' "
                            + "AND SHIFT_ID='" + ShiftCode + "' "
                            + " AND CATEGORY='" + Column_Name + "'";
                    //System.out.println("str_data "+str_data);
                    String value = data.getStringValueFromDB(str_data);

                    DataModel_DatewisePresence.setValueByVariable(Column_Name, value, i);

                }
            }
        }

//        String str = "SELECT LOOM_ENG,SHIFT_STARTING, " +
//                    "IST_RECESS_OUT,IST_RECESS_IN, " +
//                    "IIND_RECESS_OUT,IIND_RECESS_IN, " +
//                    "IIIRD_RECESS_OUT,IIIRD_RECESS_IN, " +
//                    "SHIFT_END_OUT,TOTAL_WEAVE_TIME as CALCULATED_HOUR, " +
//                    "BEAN_GAITING, RE_BEAM_GAITING, NO_WEAVER, CLOTH_REPAIR_TOTAL, NO_BEAM_READY,  " +
//                    " Q_CHANGES, MECH_REPAIR, ELE_RO_REPAIR, SHUTTLE_REPAIR_TOTAL,  " +
//                    " OVER_HAULING, SELEVEDGE_EDGE_CORD_REPAIR, TOTAL_TIME " +
//                    " FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL WHERE DOC_DATE='"+EITLERPGLOBAL.formatDateDB(txtDateShift.getText())+"'"
//                  + " AND  SHIFT_ID='"+ShiftCode+"' AND LOOM_ENG!=''";
//        System.out.println("str "+str);    
//        
//        try {
//                    Connection Conn;
//                    Statement stmt;
//                    ResultSet rsData;
//
//                    Conn = data.getConn();
//                    stmt = Conn.createStatement();
//                    rsData = stmt.executeQuery(str);
//                    rsData.first();
//                    int cnt=1;    
//                    while (!rsData.isAfterLast()) {
//                        
//                        Object[] rowData = new Object[24];
//                      
//                        rowData[0] = Integer.toString(cnt);
//                        rowData[1] = rsData.getString("LOOM_ENG");
//                        rowData[2] = rsData.getString("SHIFT_STARTING");
//                        rowData[3] = rsData.getString("IST_RECESS_OUT");
//                        rowData[4] = rsData.getString("IST_RECESS_IN");
//                        rowData[5] = rsData.getString("IIND_RECESS_OUT");
//                        rowData[6] = rsData.getString("IIND_RECESS_IN");
//                        rowData[7] = rsData.getString("IIIRD_RECESS_OUT");
//                        rowData[8] = rsData.getString("IIIRD_RECESS_IN");
//                        rowData[9] = rsData.getString("SHIFT_END_OUT");
//                        rowData[10] = rsData.getString("CALCULATED_HOUR");
//                        rowData[11] = rsData.getString("BEAN_GAITING");
//                        rowData[12] = rsData.getString("RE_BEAM_GAITING");
//                        rowData[13] = rsData.getString("NO_WEAVER");
//                        rowData[14] = rsData.getString("CLOTH_REPAIR_TOTAL");
//                        rowData[15] = rsData.getString("NO_BEAM_READY");
//                        rowData[16] = rsData.getString("Q_CHANGES");
//                        rowData[17] = rsData.getString("MECH_REPAIR");
//                        rowData[18] = rsData.getString("ELE_RO_REPAIR");
//                        rowData[19] = rsData.getString("SHUTTLE_REPAIR_TOTAL");
//                        rowData[20] = rsData.getString("OVER_HAULING");
//                        rowData[21] = rsData.getString("SELEVEDGE_EDGE_CORD_REPAIR");
//                        rowData[22] = rsData.getString("TOTAL_TIME");
//                        
//                        DataModel_ShiftReport.addRow(rowData);
//                        cnt++;
//                        rsData.next();
//                    }
//                    
//        }catch(Exception e)
//        {
//            e.printStackTrace();
//        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnWeaver;
    private javax.swing.JButton btnWeaver1;
    private javax.swing.JButton btnWeaver2;
    private javax.swing.JButton btnWeaver4;
    private javax.swing.JComboBox cmbDatewisePresence;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbMonth1;
    private javax.swing.JComboBox cmbMonth4;
    private javax.swing.JComboBox cmbShiftwise;
    private javax.swing.JComboBox cmbtblDatewisePresence;
    private javax.swing.JButton cmddocsts;
    private javax.swing.JButton cmdwarpdtl;
    private javax.swing.JTabbedPane cmdwarppiecedtl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblDate3;
    private javax.swing.JLabel lblMonthCmb;
    private javax.swing.JLabel lblMonthCmb1;
    private javax.swing.JLabel lblMonthCmb3;
    private javax.swing.JLabel lblMonthCmb4;
    private javax.swing.JLabel lblYearCmb;
    private javax.swing.JLabel lblYearCmb1;
    private javax.swing.JLabel lblYearCmb3;
    private javax.swing.JLabel lblYearCmb4;
    private java.awt.Panel panel1;
    private javax.swing.JTable tblAllDataReport;
    private javax.swing.JTable tblDatewisePresence;
    private javax.swing.JTable tblDatewiseWeaveTime;
    private javax.swing.JTable tblDocstatus;
    private javax.swing.JTable tblEmpwiseIncentiveMst;
    private javax.swing.JTable tblIncGradeMst;
    private javax.swing.JTable tblJobwiseAllocation;
    private javax.swing.JTable tblLoomWeave;
    private javax.swing.JTable tblShiftReport;
    private javax.swing.JTable tblShiftwise;
    private javax.swing.JTable tblWarpPiecedtl;
    private javax.swing.JTable tblwarpdtl;
    private javax.swing.JTable tblwvgproddtl;
    private javax.swing.JTable tblwvgprodsmry;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtDateAllDataReport_FROM;
    private javax.swing.JTextField txtDateAllDataReport_TO;
    private javax.swing.JTextField txtDateJobwise;
    private javax.swing.JTextField txtDatewisePresence;
    private javax.swing.JTextField txtDatewiseWeaveTimeFrom;
    private javax.swing.JTextField txtDatewiseWeaveTimeTo;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromDate1;
    private javax.swing.JTextField txtFromDateShift;
    private javax.swing.JButton txtShowReport1;
    private javax.swing.JButton txtShowReport_AllDataReport;
    private javax.swing.JButton txtShowReport_DatewisePresence;
    private javax.swing.JButton txtShowReport_DatewiseWeaveTime;
    private javax.swing.JButton txtShowReport_Jobwise;
    private javax.swing.JButton txtShowReport_Jobwise1;
    private javax.swing.JButton txtShowReport_Jobwise2;
    private javax.swing.JButton txtShowReport_Shift;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToDate1;
    private javax.swing.JTextField txtToDateShift;
    private javax.swing.JTextField txtYear;
    private javax.swing.JTextField txtYear1;
    private javax.swing.JTextField txtYear4;
    private javax.swing.JTextField txtloomno;
    private javax.swing.JTextField txtwarpno;
    // End of variables declaration//GEN-END:variables
private void GenerateWeaver() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_LOOMWEAVE = new EITLTableModel();
            tblLoomWeave.removeAll();

            tblLoomWeave.setModel(DataModel_LOOMWEAVE);
            tblLoomWeave.setAutoResizeMode(0);
            sql = "SELECT DATE_FORMAT(DOC_DATE,'%d/%m/%Y') AS DOC_DATE,SHIFT_ID,CATEGORY,LOOM_ENG AS LOOM,EMP_NO,EMP_NAME,"
                    + "BEAM_WARP_SR_NO,REED_SPACE_METER,PRODUCT_GROUP,PICK,PIECE_NO,WEFT_DETAILS,NO_WARP_NO_WEFT,NO_POWER_NO_AIR,NO_PIRN,"
                    + "BEAN_GAITING,NO_WEAVER,OTHER,TOTAL_TIME,TOTAL_WEAVE_TIME,REMARK,NOW() AS RUN_DATE "
                    + "FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                    + "WHERE DOC_DATE >='" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "' AND DOC_DATE <='" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "' AND APPROVED =1 AND CANCELED =0 AND CATEGORY ='WEAVER' "
                    + "ORDER BY DOC_NO,SHIFT_ID, SR_NO";
            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_LOOMWEAVE.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_LOOMWEAVE.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_LOOMWEAVE.addColumn(rInfo.getColumnName(i));
                    DataModel_LOOMWEAVE.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_LOOMWEAVE.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblLoomWeave.getColumnModel();
            for (int column = 0; column < tblLoomWeave.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblLoomWeave.getRowCount(); row++) {
                    TableCellRenderer renderer = tblLoomWeave.getCellRenderer(row, column);
                    Component comp = tblLoomWeave.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

private void GenerateEmpwiseIncMst() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_EmpwiseIncMst = new EITLTableModel();
            tblEmpwiseIncentiveMst.removeAll();

            tblEmpwiseIncentiveMst.setModel(DataModel_EmpwiseIncMst);
            tblEmpwiseIncentiveMst.setAutoResizeMode(0);
            sql = "SELECT DEPARTMENT,PAY_EMP_NO,EMP_NAME,DESIGNATION,INCENTIVE_GRADE,COALESCE(RATE,0) AS RATE FROM \n"
                    + "(  SELECT DP.NAME AS DEPARTMENT ,PAY_EMP_NO,EMP_NAME,DS.NAME AS DESIGNATION,INCENTIVE_GRADE FROM \n"
                    + " SDMLATTPAY.ATTPAY_EMPMST,SDMLATTPAY.ATT_DESIGNATION_MASTER DS,SDMLATTPAY.ATT_DEPARTMENT_MASTER DP \n"
                    + "WHERE DSGID = EMP_DESIGNATION AND EMP_DEPARTMENT = DPTID AND EMP_DEPARTMENT IN (28,53,58) AND EMP_LEFT_DATE ='0000-00-00' \n"
                    + "AND SUBSTRING(PAY_EMP_NO,1,5)  IN ('BRD00','BRD30','BRD40')) AS M \n"
                    + "LEFT JOIN \n"
                    + "(SELECT DISTINCT GRADE AS GRADE ,RATE+0 AS RATE FROM WEAVING_INCENTIVE.WI_DESIGNATIONWISE_INCENTIVE_RATE) AS WI \n"
                    + "ON WI.GRADE = INCENTIVE_GRADE \n"
                    + "ORDER BY INCENTIVE_GRADE +0,DEPARTMENT,DESIGNATION,PAY_EMP_NO";
            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_EmpwiseIncMst.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_EmpwiseIncMst.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_EmpwiseIncMst.addColumn(rInfo.getColumnName(i));
                    DataModel_EmpwiseIncMst.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_EmpwiseIncMst.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblEmpwiseIncentiveMst.getColumnModel();
            for (int column = 0; column < tblEmpwiseIncentiveMst.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblEmpwiseIncentiveMst.getRowCount(); row++) {
                    TableCellRenderer renderer = tblEmpwiseIncentiveMst.getCellRenderer(row, column);
                    Component comp = tblEmpwiseIncentiveMst.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

private void GenerateIncGradeMst() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_Inc_Grade_Mst = new EITLTableModel();
            tblIncGradeMst.removeAll();

            tblIncGradeMst.setModel(DataModel_Inc_Grade_Mst);
            tblIncGradeMst.setAutoResizeMode(0);
            sql = "SELECT DISTINCT GRADE AS GRADE ,RATE+0 AS RATE FROM WEAVING_INCENTIVE.WI_DESIGNATIONWISE_INCENTIVE_RATE\n"
                    + "ORDER BY GRADE+0";
            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_Inc_Grade_Mst.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_Inc_Grade_Mst.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_Inc_Grade_Mst.addColumn(rInfo.getColumnName(i));
                    DataModel_Inc_Grade_Mst.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_Inc_Grade_Mst.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblEmpwiseIncentiveMst.getColumnModel();
            for (int column = 0; column < tblEmpwiseIncentiveMst.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblIncGradeMst.getRowCount(); row++) {
                    TableCellRenderer renderer = tblIncGradeMst.getCellRenderer(row, column);
                    Component comp = tblIncGradeMst.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void GenerateReport1() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_WVGPRODATTDTL = new EITLTableModel();
            tblwvgproddtl.removeAll();

            tblwvgproddtl.setModel(DataModel_WVGPRODATTDTL);
            tblwvgproddtl.setAutoResizeMode(0);
            sql = "SELECT DEPARTMENT,EMP_NO,EMP_NAME,CATEGORY_GRADE,DESIGNATION_GRADE,ELIGIBLE_GRADE, RATE,SUM(PRESENT) AS PRESENT,SUM(ROKDI) AS ROKDI,"
                    + "SUM(PRESENT+ROKDI) AS 'PRESENT + ROKDI' "
                    + "FROM (SELECT DEPARTMENT,EMP_NO,EMP_NAME,CATEGORY_GRADE,CATEGORY,DESIGNATION_GRADE,W.DESIGNATION,PRESENT_STATUS,PRESENT,ROKDI,"
                    + "ELIGIBLE_GRADE,CASE WHEN PRESENT+ ROKDI =0 THEN 0 ELSE RATE END AS RATE  "
                    + "FROM (SELECT  DEPARTMENT,EMP_NO,EMP_NAME,CATEGORY_GRADE,CATEGORY,DESIGNATION_GRADE,DESIGNATION,"
                    + "CASE WHEN PRESENT_STATUS ='' AND ROKDI>0 THEN 'RKRK' ELSE PRESENT_STATUS END AS PRESENT_STATUS,"
                    + "SUM(PRESENT) AS PRESENT,SUM(ROKDI) AS ROKDI,"
                    + "CASE WHEN CATEGORY_GRADE >=DESIGNATION_GRADE  THEN DESIGNATION_GRADE ELSE CATEGORY_GRADE END AS ELIGIBLE_GRADE,NOW() AS RUN_DATE "
                    + "FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                    + "WHERE MONTH(DOC_DATE) =" + cmbMonth.getSelectedItem().toString() + " AND YEAR(DOC_DATE) =" + txtYear.getText() + " AND EMP_NO !='' "
                    + "GROUP BY EMP_NO,EMP_NAME,CATEGORY_GRADE,CATEGORY,DESIGNATION_GRADE,DESIGNATION,PRESENT_STATUS ) AS W "
                    + "LEFT JOIN (SELECT DISTINCT GRADE,RATE FROM WEAVING_INCENTIVE.WI_DESIGNATIONWISE_INCENTIVE_RATE) AS D ON GRADE = ELIGIBLE_GRADE "
                    + "WHERE DEPARTMENT IN ('DF33  FELT WEAVING','DF32  FELT WVG YARN STORE','DF39  FELT MAINTENANCE')) AS F "
                    + "GROUP BY DEPARTMENT,EMP_NO,EMP_NAME,CATEGORY_GRADE,DESIGNATION_GRADE,RATE ,ELIGIBLE_GRADE "
                    + "ORDER BY EMP_NO,ELIGIBLE_GRADE";
            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_WVGPRODATTDTL.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_WVGPRODATTDTL.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_WVGPRODATTDTL.addColumn(rInfo.getColumnName(i));
                    DataModel_WVGPRODATTDTL.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_WVGPRODATTDTL.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblwvgproddtl.getColumnModel();
            for (int column = 0; column < tblwvgproddtl.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblwvgproddtl.getRowCount(); row++) {
                    TableCellRenderer renderer = tblwvgproddtl.getCellRenderer(row, column);
                    Component comp = tblwvgproddtl.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateReport2() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_WVGPRODATTSMRY = new EITLTableModel();
            tblwvgprodsmry.removeAll();

            tblwvgprodsmry.setModel(DataModel_WVGPRODATTSMRY);
            tblwvgprodsmry.setAutoResizeMode(0);
            sql = "SELECT DEPARTMENT,EMP_NO,EMP_NAME,CATEGORY_GRADE,CATEGORY,DESIGNATION_GRADE,W.DESIGNATION,PRESENT_STATUS,PRESENT,ROKDI,ELIGIBLE_GRADE,"
                    + "CASE WHEN PRESENT+ ROKDI =0 THEN 0 ELSE RATE END AS RATE FROM "
                    + "(SELECT  DEPARTMENT,EMP_NO,EMP_NAME,CATEGORY_GRADE,CATEGORY,DESIGNATION_GRADE,DESIGNATION,"
                    + "CASE WHEN PRESENT_STATUS ='' AND ROKDI>0 THEN 'RKRK' ELSE PRESENT_STATUS END AS PRESENT_STATUS,SUM(PRESENT) AS PRESENT,"
                    + "SUM(ROKDI) AS ROKDI,CASE WHEN CATEGORY_GRADE >=DESIGNATION_GRADE  THEN DESIGNATION_GRADE ELSE CATEGORY_GRADE END AS ELIGIBLE_GRADE,NOW() AS RUN_DATE "
                    + "FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                    + "WHERE MONTH(DOC_DATE) =" + cmbMonth1.getSelectedItem().toString() + " AND YEAR(DOC_DATE) =" + txtYear1.getText() + " AND EMP_NO !=''  "
                    + "GROUP BY EMP_NO,EMP_NAME,CATEGORY_GRADE,CATEGORY,DESIGNATION_GRADE,DESIGNATION,PRESENT_STATUS ) AS W "
                    + " LEFT JOIN (SELECT DISTINCT GRADE,RATE FROM WEAVING_INCENTIVE.WI_DESIGNATIONWISE_INCENTIVE_RATE) AS D ON GRADE = ELIGIBLE_GRADE "
                    + "WHERE DEPARTMENT IN ('DF33  FELT WEAVING','DF32  FELT WVG YARN STORE','DF39  FELT MAINTENANCE') "
                    + "ORDER BY EMP_NO,ELIGIBLE_GRADE ";

            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_WVGPRODATTSMRY.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_WVGPRODATTSMRY.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_WVGPRODATTSMRY.addColumn(rInfo.getColumnName(i));
                    DataModel_WVGPRODATTSMRY.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_WVGPRODATTSMRY.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblwvgprodsmry.getColumnModel();
            for (int column = 0; column < tblwvgprodsmry.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblwvgprodsmry.getRowCount(); row++) {
                    TableCellRenderer renderer = tblwvgprodsmry.getCellRenderer(row, column);
                    Component comp = tblwvgprodsmry.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateWarpDetail() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_Warpdtl = new EITLTableModel();
            tblwarpdtl.removeAll();

            tblwarpdtl.setModel(DataModel_Warpdtl);
            tblwarpdtl.setAutoResizeMode(0);
            sql = "SELECT  DISTINCT BEAM_WARP_SR_NO AS WARP_NO, LOOM_ENG AS LOOM_NO FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                    + "WHERE DOC_DATE >='" + EITLERPGLOBAL.formatDateDB(txtFromDate1.getText()) + "' AND "
                    + "DOC_DATE <='" + EITLERPGLOBAL.formatDateDB(txtToDate1.getText()) + "' AND "
                    + "BEAM_WARP_SR_NO  != '' AND LOOM_ENG !='' "
                    + "ORDER BY LOOM_ENG,BEAM_WARP_SR_NO ";

            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_Warpdtl.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_Warpdtl.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_Warpdtl.addColumn(rInfo.getColumnName(i));
                    DataModel_Warpdtl.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_Warpdtl.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblwarpdtl.getColumnModel();
            for (int column = 0; column < tblwarpdtl.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblwarpdtl.getRowCount(); row++) {
                    TableCellRenderer renderer = tblwarpdtl.getCellRenderer(row, column);
                    Component comp = tblwarpdtl.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateWarpPieceDetail() {
        try {
            String sql, condition = "";
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_WarpPiecedtl = new EITLTableModel();
            tblWarpPiecedtl.removeAll();

            tblWarpPiecedtl.setModel(DataModel_WarpPiecedtl);
            tblWarpPiecedtl.setAutoResizeMode(0);
            if (txtwarpno.getText().trim().length() > 0) {
                condition += " AND BEAM_WARP_SR_NO='" + txtwarpno.getText() + "' ";
            }
            if (txtloomno.getText().trim().length() > 0) {
                condition += " AND LOOM_ENG='" + txtloomno.getText() + "' ";
            }
            sql = "SELECT  BEAM_WARP_SR_NO AS WARP_NO, LOOM_ENG AS LOOM_NO,REPLACE(PIECE_NO,' ','' ) AS PIECE_NO,"
                    + "DATE_FORMAT(DOC_DATE,'%d/%m/%Y') AS DOC_DATE,SHIFT_ID AS SHIFT,PICK,TOTAL_WEAVE_TIME AS WEAVING_TIME,TOTAL_TIME AS STOPPAGE_TIME,"
                    + "MC_STOPPAGES AS MACHINE_STOPPAGE_TIME,REMARK "
                    + "FROM  PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                    + "WHERE  PIECE_NO !='' " + condition + " "
                    + "ORDER BY REPLACE(PIECE_NO,' ','' ),DOC_DATE,SHIFT_ID ";

            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_WarpPiecedtl.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_WarpPiecedtl.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_WarpPiecedtl.addColumn(rInfo.getColumnName(i));
                    DataModel_WarpPiecedtl.SetReadOnly(i - 1);
                }
                int srno = 1;
                String pc, cpc;
                pc = r.getString("PIECE_NO");

                double totpick, totwvg, totstop, totmstop;
                totpick = totwvg = totstop = totmstop = 0;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                        cpc = r.getString("PIECE_NO");
                    
                    if (!pc.equalsIgnoreCase(cpc)) {
                        rowData = new Object[100];
                        DataModel_WarpPiecedtl.addRow(rowData);
                        rowData = new Object[100];
                        rowData[5] = "TOTAL";
                        rowData[6] = totpick;
                        rowData[7] = totwvg;
                        rowData[8] = totstop;
                        rowData[9] = totmstop;
                        DataModel_WarpPiecedtl.addRow(rowData);
                        rowData = new Object[100];
                        DataModel_WarpPiecedtl.addRow(rowData);
                        pc = cpc;
                        totpick = totwvg = totstop = totmstop = 0;
                    }
                    rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);

                    }
                    try {
                        totpick = totpick + Double.parseDouble(r.getString("PICK"));
                    } catch (Exception e) {
                    }
                    try {
                        totwvg = totwvg + Double.parseDouble(r.getString("WEAVING_TIME"));
                    } catch (Exception e) {
                    }
                    try {
                        totstop = totstop + Double.parseDouble(r.getString("STOPPAGE_TIME"));
                    } catch (Exception e) {
                    }
                    try {
                        totmstop = totmstop + Double.parseDouble(r.getString("MACHINE_STOPPAGE_TIME"));
                    } catch (Exception e) {
                    }

                    DataModel_WarpPiecedtl.addRow(rowData);

                    r.next();
                    srno++;
                }
                Object[] rowData = new Object[100];
                DataModel_WarpPiecedtl.addRow(rowData);
                rowData = new Object[100];
                rowData[5] = "TOTAL";
                rowData[6] = totpick;
                rowData[7] = totwvg;
                rowData[8] = totstop;
                rowData[9] = totmstop;
                DataModel_WarpPiecedtl.addRow(rowData);
            }

            final TableColumnModel columnModel = tblWarpPiecedtl.getColumnModel();
            for (int column = 0; column < tblWarpPiecedtl.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblWarpPiecedtl.getRowCount(); row++) {
                    TableCellRenderer renderer = tblWarpPiecedtl.getCellRenderer(row, column);
                    Component comp = tblWarpPiecedtl.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateDocStatus() {
        try {
            String sql;
            ResultSet r;
            ResultSetMetaData rInfo;
            DataModel_DocStatus = new EITLTableModel();
            tblDocstatus.removeAll();

            tblDocstatus.setModel(DataModel_DocStatus);
            tblDocstatus.setAutoResizeMode(0);
            sql = "SELECT MONTH(DOC_DATE) AS DOC_MONTH,YEAR(DOC_DATE) AS DOC_YEAR,DATE_FORMAT(DOC_DATE,'%d/%m/%Y') AS DOC_DATE,SHIFT_ID AS SHIFT,M.DOC_NO,USER_ID,USER_NAME,"
                    + "CASE WHEN STATUS='F' THEN 'FINAL APPROVED' WHEN  STATUS='W' THEN 'UNDER APPROVED' ELSE 'MISSING CONTACT IT DEPT' END AS DOC_STATUS "
                    + "FROM "
                    + "(SELECT DISTINCT DOC_NO,DOC_DATE,SHIFT_ID FROM PRODUCTION.FELT_WVG_PROD_LOOM_WVR_NEW_DETAIL "
                    + "WHERE DOC_DATE >='" + txtYear4.getText() + "-" + cmbMonth4.getSelectedItem().toString() + "-01' AND "
                    + "DOC_DATE<=LAST_DAY('" + txtYear4.getText() + "-" + cmbMonth4.getSelectedItem().toString() + "-01')) AS M "
                    + "LEFT JOIN "
                    + "(SELECT DOC_NO,A.USER_ID,STATUS,USER_NAME FROM PRODUCTION.FELT_PROD_DOC_DATA A,DINESHMILLS.D_COM_USER_MASTER B  "
                    + "WHERE SUBSTRING(DOC_NO,1,3) = 'FWP' AND A.USER_ID = B.USER_ID AND STATUS IN ('F','W')) AS N "
                    + "ON M.DOC_NO = N.DOC_NO "
                    + "ORDER BY DOC_DATE DESC,SHIFT_ID DESC";

            r = data.getResult(sql);
            rInfo = r.getMetaData();
            int i = 1;
            DataModel_DocStatus.ClearAllReadOnly();
            r.first();
            if (r.getRow() > 0) {
                DataModel_DocStatus.addColumn("Sr.No.");
                for (i = 1; i <= rInfo.getColumnCount(); i++) {
                    DataModel_DocStatus.addColumn(rInfo.getColumnName(i));
                    DataModel_DocStatus.SetReadOnly(i - 1);
                }
                int srno = 1;
                while (!r.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = srno;
                    for (i = 1; i <= rInfo.getColumnCount(); i++) {
                        rowData[i] = r.getString(i);
                    }
                    DataModel_DocStatus.addRow(rowData);
                    r.next();
                    srno++;
                }
            }

            final TableColumnModel columnModel = tblDocstatus.getColumnModel();
            for (int column = 0; column < tblDocstatus.getColumnCount(); column++) {
                int width = 100; // Min width
                for (int row = 0; row < tblDocstatus.getRowCount(); row++) {
                    TableCellRenderer renderer = tblDocstatus.getCellRenderer(row, column);
                    Component comp = tblDocstatus.prepareRenderer(renderer, row, column);
                    width = Math.max(comp.getPreferredSize().width + 10, width);
                }
                if (width > 300) {
                    width = 300;
                }
                columnModel.getColumn(column).setPreferredWidth(width);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
