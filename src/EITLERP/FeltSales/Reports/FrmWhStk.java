/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Reports;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.ReportRegister;
import EITLERP.data;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author Dharmendra
 */
public class FrmWhStk extends javax.swing.JApplet {

    /**
     * Initializes the applet FrmWhStk
     */
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the applet */
        initComponents();
        file1.show(false);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        cmbtype = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        txtdt = new javax.swing.JTextField();
        summary = new javax.swing.JRadioButton();
        detail = new javax.swing.JRadioButton();
        cmdview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cmdWhStkExporttoExcel = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        cmbSort = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        jLabel1.setText("Stock Type");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 30, 80, 30);

        cmbtype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IN STOCK", "BSR", "LOCATION WISE", "F6 Invoiced but not Despatched" }));
        getContentPane().add(cmbtype);
        cmbtype.setBounds(130, 20, 280, 40);

        jLabel2.setText("As on Date");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 80, 80, 30);
        getContentPane().add(txtdt);
        txtdt.setBounds(130, 80, 160, 30);

        buttonGroup1.add(summary);
        summary.setSelected(true);
        summary.setText("Summary");
        getContentPane().add(summary);
        summary.setBounds(110, 120, 100, 30);

        buttonGroup1.add(detail);
        detail.setText("Detail");
        getContentPane().add(detail);
        detail.setBounds(230, 120, 100, 30);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmdview);
        cmdview.setBounds(570, 120, 120, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 160, 680, 270);

        jLabel3.setText("DD/MM/YYYY");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(130, 60, 150, 20);

        cmdWhStkExporttoExcel.setText("Export to Excel");
        cmdWhStkExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWhStkExporttoExcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdWhStkExporttoExcel);
        cmdWhStkExporttoExcel.setBounds(10, 440, 150, 40);
        getContentPane().add(file1);
        file1.setBounds(210, 370, 220, 120);

        jButton1.setText("REPORT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(556, 440, 130, 40);

        cmbSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRODUCT CODE", "PIECE NO", "BALE NO" }));
        getContentPane().add(cmbSort);
        cmbSort.setBounds(408, 120, 150, 30);

        jLabel4.setText("SORT BY");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(340, 120, 70, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        String sql = "";
        ResultSet rs;
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
        try {
            String mdt;
            if (txtdt.getText().trim().length() > 0) {
                mdt = EITLERPGLOBAL.formatDateDB(txtdt.getText().trim());
            } else {
                mdt = EITLERPGLOBAL.getCurrentDateDB();
            }

            if (cmbtype.getSelectedIndex() == 0) {
                if (summary.isSelected()) {
                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",COUNT(PR_PIECE_NO) AS NO_OF_PIECES,SUM(PR_BILL_LENGTH) AS LENGTH,SUM(PR_BILL_WEIGHT) AS WEIGHT,SUM(PR_BILL_SQMTR) AS SQMTR,'IN STOCK' AS TYPE "
                            + "FROM( "
                            //+ "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                            + "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH AS PR_BILL_LENGTH,PR_BILL_WEIGHT AS PR_BILL_WEIGHT,PR_BILL_SQMTR AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' "
                            + "UNION ALL "
                            //+ "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                            + "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH AS PR_BILL_LENGTH,PR_BILL_WEIGHT AS PR_BILL_WEIGHT,PR_BILL_SQMTR AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "') AS A "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + " WHERE  EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00')"
                            + " GROUP BY  PR_PRODUCT_CODE";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    }

                } else {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,PIECE_GROUP,AAA.PIECE_NO,RECEIVED_DATE,LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,PACKED_DATE,PARTY_CODE,PARTY_NAME,TYPE,COALESCE(LOCATION_ID,'') AS LOCATION_ID FROM ("
                            + "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS PIECE_GROUP,PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'IN STOCK' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='IN STOCK' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + "UNION ALL "
                            + "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS PIECE_GROUP,PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'IN STOCK' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='IN STOCK' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "'"
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + ") AS AAA "
                            + "LEFT JOIN (SELECT LOCATION_ID,PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ) AS BBB "
                            + "ON AAA.PIECE_NO=BBB.PIECE_NO "
                            + " ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ORDER BY PIECE_NO";
                    } else if (cmbSort.getSelectedIndex() == 2) {
                        sql = sql + " ORDER BY PACKED_DATE,BALE_NO";
                    }
                }
            } else if (cmbtype.getSelectedIndex() == 1) {
                if (summary.isSelected()) {
                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",COUNT(PR_PIECE_NO) AS NO_OF_PIECES,SUM(PR_BILL_LENGTH) AS LENGTH,SUM(PR_BILL_WEIGHT) AS WEIGHT,SUM(PR_BILL_SQMTR) AS SQMTR,'BSR' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "WHERE PR_PIECE_STAGE ='BSR' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + " GROUP BY PRODUCTION.FELT_SALES_PIECE_REGISTER.PR_PRODUCT_CODE ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    }

                } else {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,PIECE_GROUP,AAA.PIECE_NO,RECEIVED_DATE,LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,PACKED_DATE,PARTY_CODE,PARTY_NAME,TYPE,COALESCE(LOCATION_ID,'') AS LOCATION_ID FROM ("
                            + "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS PIECE_GROUP,PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'BSR' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='BSR' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + ") AS AAA "
                            + "LEFT JOIN (SELECT LOCATION_ID,PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ) AS BBB "
                            + "ON AAA.PIECE_NO=BBB.PIECE_NO "
                            + " ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ORDER BY PIECE_NO";
                    } else if (cmbSort.getSelectedIndex() == 2) {
                        sql = sql + " ORDER BY PACKED_DATE,BALE_NO";
                    }
                }
            } else if (cmbtype.getSelectedIndex() == 2) {
                if (summary.isSelected()) {
                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",COUNT(PR_PIECE_NO) AS NO_OF_PIECES,SUM(PR_BILL_LENGTH) AS LENGTH,SUM(PR_BILL_WEIGHT) AS WEIGHT,SUM(PR_BILL_SQMTR) AS SQMTR,'IN STOCK' AS TYPE "
                            + "FROM( "
                            //+ "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                            + "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH AS PR_BILL_LENGTH,PR_BILL_WEIGHT AS PR_BILL_WEIGHT,PR_BILL_SQMTR AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' "
                            + "UNION ALL "
                            //+ "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                            + "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH AS PR_BILL_LENGTH,PR_BILL_WEIGHT AS PR_BILL_WEIGHT,PR_BILL_SQMTR AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "') AS A "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + " WHERE  EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00')"
                            + " GROUP BY  PR_PRODUCT_CODE";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    }

                } else {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,PIECE_GROUP,AAA.PIECE_NO,RECEIVED_DATE,LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,PACKED_DATE,PARTY_CODE,PARTY_NAME,TYPE,COALESCE(LOCATION_ID,'') AS LOCATION_ID,COALESCE(LOC_SR_NO) AS LOCATION_SR_NO FROM (SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS PIECE_GROUP,PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,COALESCE(PR_PIECE_STAGE,'') AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE IN ('IN STOCK','BSR') "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + "UNION ALL "
                            + "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,COALESCE(PR_PIECE_STAGE,'') AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE IN ('IN STOCK','BSR') "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "'"
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00')) AS AAA "
                            + "LEFT JOIN (SELECT LOCATION_ID,PIECE_NO,SR_NO AS LOC_SR_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ) AS BBB "
                            + "ON AAA.PIECE_NO=BBB.PIECE_NO "
                            + "ORDER BY LOCATION_ID ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ,PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ,PIECE_NO";
                    } else if (cmbSort.getSelectedIndex() == 2) {
                        sql = sql + " ,PACKED_DATE,BALE_NO";
                    }
                }
            } else if (cmbtype.getSelectedIndex() == 3) {
                if (summary.isSelected()) {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME AS \"GROUP\",COUNT(NO_OF_PIECES) AS NO_OF_PIECES,SUM(LENGTH) AS LENGTH,"
                            + "SUM(ACTUAL_WEIGHT) AS WEIGHT,SUM(SQMTR) AS SQMTR,'F6 INVOICED BUT NOT DESPATCHED' AS TYPE FROM "
                            + "(SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME,NO_OF_PIECES,LENGTH,ACTUAL_WEIGHT,SQMTR,INVOICE_NO,INVOICE_DATE,"
                            + "COALESCE(WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,COALESCE(DOC_NO,'') AS DOC_NO FROM "
                            + "(SELECT INV.PRODUCT_CODE AS PRODUCT_CODE,INV.PRODUCT_DESC  AS DESCRIPTION,QM.GROUP_NAME,INV.NO_OF_PIECES AS NO_OF_PIECES,"
                            + "INV.LENGTH AS LENGTH,INV.ACTUAL_WEIGHT AS ACTUAL_WEIGHT,INV.SQMTR AS SQMTR,INV.INVOICE_NO,INV.INVOICE_DATE "
                            + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER INV LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER QM "
                            + "ON INV.PRODUCT_CODE=QM.PRODUCT_CODE WHERE INVOICE_DATE>='2019-11-01' "
                            + "AND INVOICE_DATE <= '" + mdt + "' "
                            + "AND CHARGE_CODE = 1 AND CHARGE_CODE != PARTY_CHARGE_CODE "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') ) AS INV "
                            + "LEFT JOIN (SELECT H.GATEPASS_NO,H.GATEPASS_DATE,H.GATEPASS_TYPE,D.WH_INVOICE_NO,D.WH_INVOICE_DATE,"
                            + "COALESCE(H.WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,H.WH_OUTWARD_DATE "
                            + "FROM DINESHMILLS.D_INV_NRGP_HEADER H,DINESHMILLS.D_INV_NRGP_DETAIL D "
                            + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE = 'FGP') AS OW "
                            + "ON OW.WH_INVOICE_NO = INV.INVOICE_NO AND OW.WH_INVOICE_DATE = INV.INVOICE_DATE "
                            + "LEFT JOIN (SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO AS GR_PIECE_NO,D.INVOICE_NO AS GR_INVOICE_NO,D.INVOICE_DATE AS GR_INVOICE_DATE "
                            + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                            + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                            + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR "
                            + "ON GR.GR_INVOICE_NO=INV.INVOICE_NO AND GR.GR_INVOICE_DATE=INV.INVOICE_DATE "
                            + ") AS SUB "
                            + "WHERE COALESCE(WH_OUTWARD_NO,'')='' AND COALESCE(DOC_NO,'')='' "
                            + "GROUP BY PRODUCT_CODE  ORDER BY PRODUCT_CODE ";

                } else {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,PIECE_GROUP,AAA.PIECE_NO,INVOICE_NO,INVOICE_DATE,LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,BALE_DATE,PARTY_CODE,PARTY_NAME,TYPE,COALESCE(LOCATION_ID,'') AS LOCATION_ID FROM ("
                            + "SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME AS PIECE_GROUP,PIECE_NO,INVOICE_NO,INVOICE_DATE,LENGTH,WIDTH,GSM,"
                            + "WEIGHT,SQMTR,BALE_NO,BALE_DATE,PARTY_CODE,PARTY_NAME,'F6 INVOICED BUT NOT DESPATCHED' AS TYPE FROM "
                            + "(SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME,PIECE_NO,INVOICE_NO,INVOICE_DATE,"
                            + "LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,BALE_DATE,PARTY_CODE,PARTY_NAME,"
                            + "COALESCE(WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,COALESCE(DOC_NO,'') AS DOC_NO FROM "
                            + "(SELECT INV.PRODUCT_CODE AS PRODUCT_CODE,INV.PRODUCT_DESC  AS DESCRIPTION,QM.GROUP_NAME,"
                            + "INV.PIECE_NO AS PIECE_NO,INV.INVOICE_NO AS INVOICE_NO,DATE_FORMAT(INV.INVOICE_DATE, '%d/%m/%Y') AS INVOICE_DATE,"
                            + "INV.LENGTH AS LENGTH,INV.WIDTH AS WIDTH,INV.GSM AS GSM,INV.ACTUAL_WEIGHT AS WEIGHT,INV.SQMTR AS SQMTR,"
                            + "INV.BALE_NO AS BALE_NO,DATE_FORMAT(INV.PACKING_DATE, '%d/%m/%Y') AS BALE_DATE,"
                            + "INV.PARTY_CODE AS PARTY_CODE,INV.PARTY_NAME AS PARTY_NAME "
                            + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER INV LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER QM "
                            + "ON INV.PRODUCT_CODE=QM.PRODUCT_CODE WHERE INVOICE_DATE>='2019-11-01' "
                            + "AND INVOICE_DATE <= '" + mdt + "' "
                            + "AND CHARGE_CODE = 1 AND CHARGE_CODE != PARTY_CHARGE_CODE "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') ) AS INV "
                            + "LEFT JOIN (SELECT H.GATEPASS_NO,H.GATEPASS_DATE,H.GATEPASS_TYPE,D.WH_INVOICE_NO,D.WH_INVOICE_DATE,"
                            + "COALESCE(H.WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,H.WH_OUTWARD_DATE "
                            + "FROM DINESHMILLS.D_INV_NRGP_HEADER H,DINESHMILLS.D_INV_NRGP_DETAIL D "
                            + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE = 'FGP') AS OW "
                            + "ON OW.WH_INVOICE_NO = INV.INVOICE_NO AND OW.WH_INVOICE_DATE = INV.INVOICE_DATE "
                            + "LEFT JOIN (SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO AS GR_PIECE_NO,D.INVOICE_NO AS GR_INVOICE_NO,D.INVOICE_DATE AS GR_INVOICE_DATE "
                            + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                            + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                            + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR "
                            + "ON GR.GR_INVOICE_NO=INV.INVOICE_NO AND GR.GR_INVOICE_DATE=INV.INVOICE_DATE "
                            + ") AS SUB "
                            + "WHERE COALESCE(WH_OUTWARD_NO,'')='' AND COALESCE(DOC_NO,'')='' "
                            + ") AS AAA "
                            + "LEFT JOIN (SELECT LOCATION_ID,PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ) AS BBB "
                            + "ON AAA.PIECE_NO=BBB.PIECE_NO "
                            + " ";
                    
                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ORDER BY PIECE_NO";
                    } else if (cmbSort.getSelectedIndex() == 2) {
                        sql = sql + " ORDER BY BALE_DATE,BALE_NO";
                    }
                }
            }
            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModel.addRow(rowData);
                    rs.next();
                }
            }
            DataModel.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdviewActionPerformed

    private void cmdWhStkExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWhStkExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "WH_STK");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdWhStkExporttoExcelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String sql = "";

        try {
            String mdt;
            if (txtdt.getText().trim().length() > 0) {
                mdt = EITLERPGLOBAL.formatDateDB(txtdt.getText().trim());
            } else {
                mdt = EITLERPGLOBAL.getCurrentDateDB();
            }

            Connection Conn = null;
            Statement st = null;
            ResultSet rs = null;

            if (cmbtype.getSelectedIndex() == 0) {
                if (summary.isSelected()) {
                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",COUNT(PR_PIECE_NO) AS NO_OF_PIECES,"
                            + "ROUND(SUM(PR_BILL_LENGTH),2) AS LENGTH,ROUND(SUM(PR_BILL_WEIGHT),2) AS WEIGHT,ROUND(SUM(PR_BILL_SQMTR),2) AS SQMTR,'IN STOCK' AS TYPE FROM "
                            + "( SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH+ 0E0 AS PR_BILL_LENGTH,PR_BILL_WEIGHT+ 0E0 AS PR_BILL_WEIGHT,PR_BILL_SQMTR+ 0E0 AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' "
                            + "UNION ALL "
                            //+ "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                            + "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH+ 0E0  AS PR_BILL_LENGTH,PR_BILL_WEIGHT+ 0E0 AS PR_BILL_WEIGHT,PR_BILL_SQMTR+ 0E0 AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "') AS A "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + " WHERE  EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00')"
                            + "GROUP BY  PR_PRODUCT_CODE";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "PRODUCT WISE IN STOCK SUMMARY REPORT FOR FELT W/H AS ON DATE ");
                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/Stock_Summary.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();
                } else {

                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH+ 0E0 AS LENGTH,PR_BILL_WIDTH+ 0E0 AS WIDTH,PR_BILL_GSM+ 0E0 AS GSM,"
                            + "PR_BILL_WEIGHT+ 0E0 AS WEIGHT,PR_BILL_SQMTR+ 0E0 AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'IN STOCK' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='IN STOCK' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + "UNION ALL "
                            + "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH+ 0E0 AS LENGTH,PR_BILL_WIDTH+ 0E0 AS WIDTH,PR_BILL_GSM+ 0E0 AS GSM,"
                            + "PR_BILL_WEIGHT+ 0E0 AS WEIGHT,PR_BILL_SQMTR+ 0E0 AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'IN STOCK' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='IN STOCK' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "'"
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ORDER BY PIECE_NO";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "QUALITY WISE IN STOCK DETAIL REPORT FOR FELT W/H AS ON DATE ");

                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/LooseStock_Detail.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();

                }
            } else if (cmbtype.getSelectedIndex() == 1) {
                if (summary.isSelected()) {

                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",COUNT(PR_PIECE_NO) AS NO_OF_PIECES,SUM(PR_BILL_LENGTH) AS LENGTH,SUM(PR_BILL_WEIGHT) AS WEIGHT,SUM(PR_BILL_SQMTR) AS SQMTR,'BSR' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "WHERE PR_PIECE_STAGE ='BSR' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + "GROUP BY  PR_PRODUCT_CODE";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "PRODUCT WISE BSR STOCK SUMMARY REPORT FOR FELT W/H AS ON DATE ");
                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/Stock_Summary.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();
                } else {
                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'BSR' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='BSR' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ORDER BY PIECE_NO";
                    } else if (cmbSort.getSelectedIndex() == 2) {
                        sql = sql + " ORDER BY PR_BALE_NO";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", mdt);
                    parameterMap.put("TITLE", "QUALITY WISE BSR STOCK DETAIL REPORT FOR FELT W/H AS ON DATE ");

                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/LooseStock_Detail.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();
                }
            } else if (cmbtype.getSelectedIndex() == 2) {
                if (summary.isSelected()) {
                    sql = "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",COUNT(PR_PIECE_NO) AS NO_OF_PIECES,"
                            + "ROUND(SUM(PR_BILL_LENGTH),2) AS LENGTH,ROUND(SUM(PR_BILL_WEIGHT),2) AS WEIGHT,ROUND(SUM(PR_BILL_SQMTR),2) AS SQMTR,'IN STOCK' AS TYPE FROM "
                            + "( SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH+ 0E0 AS PR_BILL_LENGTH,PR_BILL_WEIGHT+ 0E0 AS PR_BILL_WEIGHT,PR_BILL_SQMTR+ 0E0 AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' "
                            + "UNION ALL "
                            //+ "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_BILL_LENGTH,PR_BILL_WEIGHT,PR_BILL_SQMTR "
                            + "SELECT PR_PRODUCT_CODE,PR_GROUP,PR_PIECE_NO,PR_BILL_LENGTH+ 0E0  AS PR_BILL_LENGTH,PR_BILL_WEIGHT+ 0E0 AS PR_BILL_WEIGHT,PR_BILL_SQMTR+ 0E0 AS PR_BILL_SQMTR  "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE ='IN STOCK' AND "
                            + "PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "') AS A "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + " WHERE  EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00')"
                            + "GROUP BY  PR_PRODUCT_CODE";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "PRODUCT WISE IN STOCK SUMMARY REPORT FOR FELT W/H AS ON DATE ");
                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/Stock_Summary.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();
                } else {

                    sql = "SELECT COALESCE(SR_NO,'') AS SR_NO,PRODUCT_CODE,DESCRIPTION,PIECE_GROUP,AAA.PIECE_NO,RECEIVED_DATE,LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,PACKED_DATE,PARTY_CODE,PARTY_NAME,TYPE,COALESCE(LOCATION_ID,'') AS LOCATION_ID,COALESCE(LOC_SR_NO) AS LOCATION_SR_NO FROM (SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS PIECE_GROUP,PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'IN STOCK' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='IN STOCK' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') "
                            + "UNION ALL "
                            + "SELECT PR_PRODUCT_CODE AS PRODUCT_CODE,COALESCE(PRODUCT_DESC,'') AS DESCRIPTION ,PR_GROUP AS \"GROUP\",PR_PIECE_NO AS PIECE_NO,"
                            + "CASE WHEN PR_FNSG_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_FNSG_DATE, '%d/%m/%Y') END AS RECEIVED_DATE,PR_BILL_LENGTH AS LENGTH,PR_BILL_WIDTH AS WIDTH,PR_BILL_GSM AS GSM,"
                            + "PR_BILL_WEIGHT AS WEIGHT,PR_BILL_SQMTR AS SQMTR,PR_BALE_NO AS BALE_NO,"
                            + "CASE WHEN PR_PACKED_DATE='0000-00-00' THEN '' ELSE DATE_FORMAT(PR_PACKED_DATE, '%d/%m/%Y') END AS PACKED_DATE,"
                            + "PR_PARTY_CODE AS PARTY_CODE,PARTY_NAME,'IN STOCK' AS TYPE "
                            + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER "
                            + "ON PR_PRODUCT_CODE=PRODUCT_CODE "
                            + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER "
                            + "ON PR_PARTY_CODE=PARTY_CODE "
                            + "WHERE PR_PIECE_STAGE ='IN STOCK' "
                            + " AND PR_FNSG_DATE <= '" + mdt + "' AND PR_PACKED_DATE > '" + mdt + "'"
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00')) AS AAA "
                            + "LEFT JOIN (SELECT SR_NO AS LOC_SR_NO,LOCATION_ID,PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ) AS BBB "
                            + "ON AAA.PIECE_NO=BBB.PIECE_NO "
                            + "ORDER BY LOCATION_ID,(SR_NO*1) ";

                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ,PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ,PIECE_NO";
                    } else {
                        sql = sql + " ,PRODUCT_CODE";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "LOCATION WISE IN STOCK DETAIL REPORT FOR FELT W/H AS ON DATE ");

                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/Stock_Detail_Location.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();

                }
            } else if (cmbtype.getSelectedIndex() == 3) {
                if (summary.isSelected()) {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME AS \"GROUP\",COUNT(NO_OF_PIECES) AS NO_OF_PIECES,SUM(LENGTH) AS LENGTH,"
                            + "SUM(ACTUAL_WEIGHT) AS WEIGHT,SUM(SQMTR) AS SQMTR,'F6 INVOICED BUT NOT DESPATCHED' AS TYPE FROM "
                            + "(SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME,NO_OF_PIECES,LENGTH,ACTUAL_WEIGHT,SQMTR,INVOICE_NO,INVOICE_DATE,"
                            + "COALESCE(WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,COALESCE(DOC_NO,'') AS DOC_NO FROM "
                            + "(SELECT INV.PRODUCT_CODE AS PRODUCT_CODE,INV.PRODUCT_DESC  AS DESCRIPTION,QM.GROUP_NAME,INV.NO_OF_PIECES AS NO_OF_PIECES,"
                            + "INV.LENGTH AS LENGTH,INV.ACTUAL_WEIGHT AS ACTUAL_WEIGHT,INV.SQMTR AS SQMTR,INV.INVOICE_NO,INV.INVOICE_DATE "
                            + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER INV LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER QM "
                            + "ON INV.PRODUCT_CODE=QM.PRODUCT_CODE WHERE INVOICE_DATE>='2019-11-01' "
                            + "AND INVOICE_DATE <= '" + mdt + "' "
                            + "AND CHARGE_CODE = 1 AND CHARGE_CODE != PARTY_CHARGE_CODE "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') ) AS INV "
                            + "LEFT JOIN (SELECT H.GATEPASS_NO,H.GATEPASS_DATE,H.GATEPASS_TYPE,D.WH_INVOICE_NO,D.WH_INVOICE_DATE,"
                            + "COALESCE(H.WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,H.WH_OUTWARD_DATE "
                            + "FROM DINESHMILLS.D_INV_NRGP_HEADER H,DINESHMILLS.D_INV_NRGP_DETAIL D "
                            + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE = 'FGP') AS OW "
                            + "ON OW.WH_INVOICE_NO = INV.INVOICE_NO AND OW.WH_INVOICE_DATE = INV.INVOICE_DATE "
                            + "LEFT JOIN (SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO AS GR_PIECE_NO,D.INVOICE_NO AS GR_INVOICE_NO,D.INVOICE_DATE AS GR_INVOICE_DATE "
                            + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                            + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                            + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR "
                            + "ON GR.GR_INVOICE_NO=INV.INVOICE_NO AND GR.GR_INVOICE_DATE=INV.INVOICE_DATE "
                            + ") AS SUB "
                            + "WHERE COALESCE(WH_OUTWARD_NO,'')='' AND COALESCE(DOC_NO,'')='' "
                            + "GROUP BY PRODUCT_CODE  ORDER BY PRODUCT_CODE ";
                    
                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "F6 INVOICED BUT NOT DESPATCHED REPORT FOR FELT W/H AS ON DATE ");
                    
                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/F6_Despached_Summary.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();

                } else {
                    sql = "SELECT PRODUCT_CODE,DESCRIPTION,PIECE_GROUP,AAA.PIECE_NO,INVOICE_NO,INVOICE_DATE,LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,BALE_DATE,PARTY_CODE,PARTY_NAME,TYPE,COALESCE(LOCATION_ID,'') AS LOCATION_ID FROM ("
                            + "SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME AS PIECE_GROUP,PIECE_NO,INVOICE_NO,INVOICE_DATE,LENGTH,WIDTH,GSM,"
                            + "WEIGHT,SQMTR,BALE_NO,BALE_DATE,PARTY_CODE,PARTY_NAME,'F6 INVOICED BUT NOT DESPATCHED' AS TYPE FROM "
                            + "(SELECT PRODUCT_CODE,DESCRIPTION,GROUP_NAME,PIECE_NO,INVOICE_NO,INVOICE_DATE,"
                            + "LENGTH,WIDTH,GSM,WEIGHT,SQMTR,BALE_NO,BALE_DATE,PARTY_CODE,PARTY_NAME,"
                            + "COALESCE(WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,COALESCE(DOC_NO,'') AS DOC_NO FROM "
                            + "(SELECT INV.PRODUCT_CODE AS PRODUCT_CODE,INV.PRODUCT_DESC  AS DESCRIPTION,QM.GROUP_NAME,"
                            + "INV.PIECE_NO AS PIECE_NO,INV.INVOICE_NO AS INVOICE_NO,DATE_FORMAT(INV.INVOICE_DATE, '%d/%m/%Y') AS INVOICE_DATE,"
                            + "INV.LENGTH AS LENGTH,INV.WIDTH AS WIDTH,INV.GSM AS GSM,INV.ACTUAL_WEIGHT AS WEIGHT,INV.SQMTR AS SQMTR,"
                            + "INV.BALE_NO AS BALE_NO,DATE_FORMAT(INV.PACKING_DATE, '%d/%m/%Y') AS BALE_DATE,"
                            + "INV.PARTY_CODE AS PARTY_CODE,INV.PARTY_NAME AS PARTY_NAME "
                            + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER INV LEFT JOIN PRODUCTION.FELT_QLT_RATE_MASTER QM "
                            + "ON INV.PRODUCT_CODE=QM.PRODUCT_CODE WHERE INVOICE_DATE>='2019-11-01' "
                            + "AND INVOICE_DATE <= '" + mdt + "' "
                            + "AND CHARGE_CODE = 1 AND CHARGE_CODE != PARTY_CHARGE_CODE "
                            + "AND EFFECTIVE_FROM<=CURDATE() AND (EFFECTIVE_TO>=CURDATE() OR EFFECTIVE_TO='0000-00-00') ) AS INV "
                            + "LEFT JOIN (SELECT H.GATEPASS_NO,H.GATEPASS_DATE,H.GATEPASS_TYPE,D.WH_INVOICE_NO,D.WH_INVOICE_DATE,"
                            + "COALESCE(H.WH_OUTWARD_NO,'') AS WH_OUTWARD_NO,H.WH_OUTWARD_DATE "
                            + "FROM DINESHMILLS.D_INV_NRGP_HEADER H,DINESHMILLS.D_INV_NRGP_DETAIL D "
                            + "WHERE H.GATEPASS_NO = D.GATEPASS_NO AND H.GATEPASS_TYPE = 'FGP') AS OW "
                            + "ON OW.WH_INVOICE_NO = INV.INVOICE_NO AND OW.WH_INVOICE_DATE = INV.INVOICE_DATE "
                            + "LEFT JOIN (SELECT H.DOC_NO,H.DOC_DATE,D.PIECE_NO AS GR_PIECE_NO,D.INVOICE_NO AS GR_INVOICE_NO,D.INVOICE_DATE AS GR_INVOICE_DATE "
                            + "FROM PRODUCTION.FELT_SALES_RETURNS_DETAIL D,PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL I "
                            + "WHERE H.DOC_NO=D.DOC_NO AND D.INVOICE_NO=I.INVOICE_NO AND D.INVOICE_DATE=SUBSTRING(I.INVOICE_DATE,1,10) "
                            + "AND H.APPROVED=1 AND H.CANCELED=0  GROUP BY D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE ) AS GR "
                            + "ON GR.GR_INVOICE_NO=INV.INVOICE_NO AND GR.GR_INVOICE_DATE=INV.INVOICE_DATE "
                            + ") AS SUB "
                            + "WHERE COALESCE(WH_OUTWARD_NO,'')='' AND COALESCE(DOC_NO,'')='' "
                            + ") AS AAA "
                            + "LEFT JOIN (SELECT LOCATION_ID,PIECE_NO FROM PRODUCTION.FELT_LOCATION_ASSIGNMENT WHERE DOC_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND DOC_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ) AS BBB "
                            + "ON AAA.PIECE_NO=BBB.PIECE_NO "
                            + " ";
                    
                    if (cmbSort.getSelectedIndex() == 0) {
                        sql = sql + " ORDER BY PRODUCT_CODE";
                    } else if (cmbSort.getSelectedIndex() == 1) {
                        sql = sql + " ORDER BY PIECE_NO";
                    } else if (cmbSort.getSelectedIndex() == 2) {
                        sql = sql + " ORDER BY BALE_DATE,BALE_NO";
                    }

                    Conn = data.getConn();
                    st = Conn.createStatement();

                    HashMap parameterMap = new HashMap();

                    ReportRegister rpt = new ReportRegister(parameterMap, Conn);
                    parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
                    parameterMap.put("ASONDATE", EITLERPGLOBAL.formatDate(mdt));
                    parameterMap.put("TITLE", "F6 INVOICED BUT NOT DESPATCHED REPORT FOR FELT W/H AS ON DATE ");

                    System.out.println("SQL QUERY : " + sql);
                    rpt.setReportName("/EITLERP/FeltSales/Reports/F6_Despached_Detail.jrxml", 1, sql); //productlist is the name of my jasper file.
                    rpt.callReport();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbSort;
    private javax.swing.JComboBox<String> cmbtype;
    private javax.swing.JButton cmdWhStkExporttoExcel;
    private javax.swing.JButton cmdview;
    private javax.swing.JRadioButton detail;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton summary;
    private javax.swing.JTextField txtdt;
    // End of variables declaration//GEN-END:variables
}
