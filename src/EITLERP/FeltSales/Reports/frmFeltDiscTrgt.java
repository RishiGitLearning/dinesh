/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Reports;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.*;
import EITLERP.ReportRegister;
import EITLERP.data;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.*;

/**
 *
 * @author Dharmendra
 */
public class frmFeltDiscTrgt extends javax.swing.JApplet {

    /**
     * Initializes the applet FrmWhStk
     */
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.clsExcel_Exporter exprt = new EITLERP.clsExcel_Exporter();
    private String fromYear = "";
    private String toYear = "";

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        //</editor-fold>
        //</editor-fold>

        /* Create and display the applet */
        initComponents();
        file1.show(false);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        FormatTable();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        cmbFinYear = new javax.swing.JComboBox<String>();
        cmdShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdWhStkExporttoExcel = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        btnReport = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        cmbOrderBy = new javax.swing.JComboBox();

        jMenuItem1.setText("jMenuItem1");
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("jMenuItem2");
        jPopupMenu1.add(jMenuItem2);

        getContentPane().setLayout(null);

        jLabel1.setText("Financial Year :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 40, 100, 30);

        cmbFinYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Year", "2017-2018", "2018-2019", "2019-2020", "2020-2021", "2021-2022" }));
        cmbFinYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFinYearItemStateChanged(evt);
            }
        });
        cmbFinYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFinYearActionPerformed(evt);
            }
        });
        getContentPane().add(cmbFinYear);
        cmbFinYear.setBounds(120, 40, 170, 30);

        cmdShow.setText("Show");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        getContentPane().add(cmdShow);
        cmdShow.setBounds(570, 80, 120, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 680, 280);

        cmdWhStkExporttoExcel.setText("Export to Excel");
        cmdWhStkExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWhStkExporttoExcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdWhStkExporttoExcel);
        cmdWhStkExporttoExcel.setBounds(10, 410, 150, 30);
        getContentPane().add(file1);
        file1.setBounds(230, 310, 220, 120);

        btnReport.setText("REPORT");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });
        getContentPane().add(btnReport);
        btnReport.setBounds(550, 410, 130, 30);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Felt Discount Based Groupwise Partywise Target Report");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(2, 4, 460, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 700, 29);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("From Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 80, 100, 20);

        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromDateFocusLost(evt);
            }
        });
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(120, 80, 130, 30);

        jLabel6.setText("To Date :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(260, 80, 70, 20);

        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtToDateFocusLost(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(330, 80, 130, 30);

        jLabel85.setText("Order By");
        getContentPane().add(jLabel85);
        jLabel85.setBounds(330, 40, 70, 30);

        cmbOrderBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Party Code", "Group Code" }));
        cmbOrderBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOrderByItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbOrderBy);
        cmbOrderBy.setBounds(400, 40, 170, 33);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        if (!Validate()) {
            return;
        } else {

            String sql = "";
            ResultSet rs;
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
            try {
                String frmdt = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
                String todt = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());

//                sql = "SELECT GM.GROUP_CODE AS GROUP_ID, GM.GROUP_DESC, DISC.PARTY_CODE, PM.PARTY_NAME, DISC.PRODUCT_CODE, "
//                        + "DISC.EFFECTIVE_FROM, DISC.EFFECTIVE_TO, DISC.DISC_PER AS IN_BILL_DISC, DISC.YRED_DISC_PER AS YEAR_END_DISC, "
//                        + "DISC.TURN_OVER_TARGET, INVOICE_AMT AS ACTUAL_SALES, DISC.REMARK "
//                        + "FROM "
//                        + "(SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.EFFECTIVE_FROM,D.EFFECTIVE_TO,D.DISC_PER,D.YRED_DISC_PER, "
//                        + "D.TURN_OVER_TARGET,CONCAT(H.REMARK1,H.REMARK2,H.REMARK3,H.REMARK4,H.REMARK5) AS REMARK "
//                        + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D "
//                        + "WHERE H.MASTER_NO=D.MASTER_NO "
//                        + "AND D.EFFECTIVE_FROM>='" + frmdt + "' "
//                        + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL) "
//                        + "AND LENGTH(D.PRODUCT_CODE)=6 "
//                        + "AND H.APPROVED=1 AND H.CANCELED=0 ) AS DISC "
//                        + "LEFT JOIN "
//                        + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER "
//                        + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM "
//                        + "ON DISC.PARTY_CODE=PM.PARTY_CODE "
//                        + "LEFT JOIN "
//                        + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE "
//                        + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D "
//                        + "WHERE H.GROUP_CODE=D.GROUP_CODE "
//                        + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM "
//                        + "ON DISC.PARTY_CODE=GM.PARTY_CODE "
//                        + "LEFT JOIN "
//                        + "(SELECT PARTY_CODE,PRODUCT_CODE,SUM(INVOICE_AMT) AS INVOICE_AMT "
//                        + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
//                        + "WHERE INVOICE_DATE>='" + frmdt + "' AND INVOICE_DATE<='" + todt + "' "
//                        + "AND APPROVED=1 AND CANCELLED=0 "
//                        + "GROUP BY PARTY_CODE,PRODUCT_CODE) AS IH "
//                        + "ON DISC.PARTY_CODE=IH.PARTY_CODE AND DISC.PRODUCT_CODE=IH.PRODUCT_CODE ";
                sql = "SELECT GM.GROUP_CODE AS GROUP_ID, GM.GROUP_DESC, DISC.PARTY_CODE, PM.PARTY_NAME, DISC.PRODUCT_CODE,DISC.PIECE_NO,  "
                        + "DISC.EFFECTIVE_FROM, DISC.EFFECTIVE_TO, DISC.DISC_PER AS IN_BILL_DISC, DISC.YRED_DISC_PER AS YEAR_END_DISC,  "
                        + "DISC.SEAM_VALUE AS IN_BILL_SEAM_VALUE,DISC.YRED_SEAM_VALUE AS YEAR_END_SEAM_VALUE,  "
                        + "DISC.TURN_OVER_TARGET,  "
                        + "INVOICE_AMT AS ACTUAL_SALES,  "
                        + "DISC.REMARK  "
                        + "FROM  "
                        + "(SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO, "
                        + "D.DISC_PER,D.YRED_DISC_PER,D.SEAM_VALUE,D.YRED_SEAM_VALUE,  "
                        + "D.TURN_OVER_TARGET,CONCAT(H.REMARK1,H.REMARK2,H.REMARK3,H.REMARK4,H.REMARK5) AS REMARK  "
                        + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D  "
                        + "WHERE H.MASTER_NO=D.MASTER_NO  "
                        + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                        + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                        + "AND H.APPROVED=1 AND H.CANCELED=0 ) AS DISC  "
                        + "LEFT JOIN  "
                        + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                        + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                        + "ON DISC.PARTY_CODE=PM.PARTY_CODE  "
                        + "LEFT JOIN  "
                        + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE  "
                        + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                        + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                        + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                        + "ON DISC.PARTY_CODE=GM.PARTY_CODE  "
                        + "LEFT JOIN  "
                        + "(SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO, "
                        + "ROUND(SUM(I.INVOICE_AMT)/100000,2) AS INVOICE_AMT  "
                        + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, "
                        + "PRODUCTION.FELT_SAL_INVOICE_HEADER I  "
                        + "WHERE H.MASTER_NO=D.MASTER_NO  "
                        + "AND I.PARTY_CODE=D.PARTY_CODE "
                        + "AND I.PRODUCT_CODE=D.PRODUCT_CODE "
                        + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                        + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                        + "AND D.EFFECTIVE_FROM<=I.INVOICE_DATE "
                        + "AND (D.EFFECTIVE_TO>=I.INVOICE_DATE OR D.EFFECTIVE_TO IS NULL)  "
                        + "AND H.APPROVED=1 AND H.CANCELED=0 "
                        + "AND I.PIECE_NO!=D.PIECE_NO "
                        //                        + "AND I.PIECE_NO NOT IN (SELECT D.PIECE_NO "
                        //                        + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D "
                        //                        + "WHERE H.MASTER_NO=D.MASTER_NO  "
                        //                        + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                        //                        + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                        //                        + "AND H.APPROVED=1 AND H.CANCELED=0  "
                        //                        + "AND LENGTH(D.PIECE_NO)>4) "
                        + "GROUP BY I.PARTY_CODE,I.PRODUCT_CODE,D.EFFECTIVE_FROM,D.EFFECTIVE_TO "
                        + " "
                        + "UNION ALL "
                        + " "
                        + "SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO, "
                        + "ROUND(SUM(I.INVOICE_AMT)/100000,2) AS INVOICE_AMT  "
                        + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, "
                        + "PRODUCTION.FELT_SAL_INVOICE_HEADER I  "
                        + "WHERE H.MASTER_NO=D.MASTER_NO  "
                        + "AND I.PARTY_CODE=D.PARTY_CODE "
                        + "AND I.PIECE_NO=D.PIECE_NO "
                        + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                        + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                        + "AND D.EFFECTIVE_FROM<=I.INVOICE_DATE "
                        + "AND (D.EFFECTIVE_TO>=I.INVOICE_DATE OR D.EFFECTIVE_TO IS NULL)  "
                        + "AND H.APPROVED=1 AND H.CANCELED=0 "
                        + "GROUP BY I.PARTY_CODE,I.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO) AS IH  "
                        + "ON DISC.PARTY_CODE=IH.PARTY_CODE AND DISC.PRODUCT_CODE=IH.PRODUCT_CODE  "
                        + "AND DISC.PIECE_NO=IH.PIECE_NO  "
                        + "AND DISC.EFFECTIVE_FROM=IH.EFFECTIVE_FROM AND DISC.EFFECTIVE_TO=IH.EFFECTIVE_TO ";

                if (cmbOrderBy.getSelectedIndex() == 0) {
                    sql = sql + " ORDER BY PARTY_CODE,PRODUCT_CODE";
                } else if (cmbOrderBy.getSelectedIndex() == 1) {
                    sql = sql + " ORDER BY GROUP_CODE,PARTY_CODE,PRODUCT_CODE";
                }

                System.out.println(sql);
                rs = data.getResult(sql);
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel.addColumn(rsInfo.getColumnName(i));
                }
                rs.first();
                System.out.println("Row no." + rs.getRow());
                if (rs.getRow() > 0) {
                    while (!rs.isAfterLast()) {
                        Object[] rowData = new Object[100];
                        for (int m = 1; m < i; m++) {
                            rowData[m - 1] = rs.getString(m);
                        }
                        DataModel.addRow(rowData);
                        rs.next();
                    }
                }
                DataModel.TableReadOnly(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_cmdShowActionPerformed

    private void cmdWhStkExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWhStkExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "REPORT");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdWhStkExporttoExcelActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        // TODO add your handling code here:

        String sql = "";
        String frmdt = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
        String todt = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());

        try {
            String mdt;
            if (txtFromDate.getText().trim().length() > 0) {
                mdt = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            } else {
                mdt = EITLERPGLOBAL.getCurrentDateDB();
            }

            Connection Conn = null;
            Statement st = null;
            ResultSet rs = null;

//            sql = "SELECT GM.GROUP_CODE AS GROUP_ID, GM.GROUP_DESC, DISC.PARTY_CODE, PM.PARTY_NAME, DISC.PRODUCT_CODE, "
//                    + "DISC.EFFECTIVE_FROM, DISC.EFFECTIVE_TO, DISC.DISC_PER AS IN_BILL_DISC, DISC.YRED_DISC_PER AS YEAR_END_DISC, "
//                    + "DISC.TURN_OVER_TARGET, INVOICE_AMT AS ACTUAL_SALES, DISC.REMARK "
//                    + "FROM "
//                    + "(SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.EFFECTIVE_FROM,D.EFFECTIVE_TO,D.DISC_PER,D.YRED_DISC_PER, "
//                    + "D.TURN_OVER_TARGET,CONCAT(H.REMARK1,H.REMARK2,H.REMARK3,H.REMARK4,H.REMARK5) AS REMARK "
//                    + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D "
//                    + "WHERE H.MASTER_NO=D.MASTER_NO "
//                    + "AND D.EFFECTIVE_FROM>='" + frmdt + "' "
//                    + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL) "
//                    + "AND LENGTH(D.PRODUCT_CODE)=6 "
//                    + "AND H.APPROVED=1 AND H.CANCELED=0 ) AS DISC "
//                    + "LEFT JOIN "
//                    + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER "
//                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM "
//                    + "ON DISC.PARTY_CODE=PM.PARTY_CODE "
//                    + "LEFT JOIN "
//                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE "
//                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D "
//                    + "WHERE H.GROUP_CODE=D.GROUP_CODE "
//                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM "
//                    + "ON DISC.PARTY_CODE=GM.PARTY_CODE "
//                    + "LEFT JOIN "
//                    + "(SELECT PARTY_CODE,PRODUCT_CODE,SUM(INVOICE_AMT) AS INVOICE_AMT "
//                    + "FROM PRODUCTION.FELT_SAL_INVOICE_HEADER "
//                    + "WHERE INVOICE_DATE>='" + frmdt + "' AND INVOICE_DATE<='" + todt + "' "
//                    + "AND APPROVED=1 AND CANCELLED=0 "
//                    + "GROUP BY PARTY_CODE,PRODUCT_CODE) AS IH "
//                    + "ON DISC.PARTY_CODE=IH.PARTY_CODE AND DISC.PRODUCT_CODE=IH.PRODUCT_CODE ";

            sql = "SELECT GM.GROUP_CODE AS GROUP_ID, GM.GROUP_DESC, DISC.PARTY_CODE, PM.PARTY_NAME, DISC.PRODUCT_CODE,DISC.PIECE_NO,  "
                    + "CASE WHEN DISC.PRODUCT_CODE IN ('null') THEN DISC.PIECE_NO ELSE DISC.PRODUCT_CODE END AS PROD_PIECE_CODE, "
                    + "DISC.EFFECTIVE_FROM, DISC.EFFECTIVE_TO, DISC.DISC_PER AS IN_BILL_DISC, DISC.YRED_DISC_PER AS YEAR_END_DISC,  "
                    + "DISC.SEAM_VALUE AS IN_BILL_SEAM_VALUE,DISC.YRED_SEAM_VALUE AS YEAR_END_SEAM_VALUE,  "
                    + "DISC.TURN_OVER_TARGET,  "
                    + "INVOICE_AMT AS ACTUAL_SALES,  "
                    + "DISC.REMARK  "
                    + "FROM  "
                    + "(SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO, "
                    + "D.DISC_PER,D.YRED_DISC_PER,D.SEAM_VALUE,D.YRED_SEAM_VALUE,  "
                    + "D.TURN_OVER_TARGET,CONCAT(H.REMARK1,H.REMARK2,H.REMARK3,H.REMARK4,H.REMARK5) AS REMARK  "
                    + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D  "
                    + "WHERE H.MASTER_NO=D.MASTER_NO  "
                    + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                    + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0 ) AS DISC  "
                    + "LEFT JOIN  "
                    + "(SELECT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER  "
                    + "WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON DISC.PARTY_CODE=PM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  "
                    + "WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  "
                    + "ON DISC.PARTY_CODE=GM.PARTY_CODE  "
                    + "LEFT JOIN  "
                    + "(SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO, "
                    + "ROUND(SUM(I.INVOICE_AMT)/100000,2) AS INVOICE_AMT  "
                    + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, "
                    + "PRODUCTION.FELT_SAL_INVOICE_HEADER I  "
                    + "WHERE H.MASTER_NO=D.MASTER_NO  "
                    + "AND I.PARTY_CODE=D.PARTY_CODE "
                    + "AND I.PRODUCT_CODE=D.PRODUCT_CODE "
                    + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                    + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                    + "AND D.EFFECTIVE_FROM<=I.INVOICE_DATE "
                    + "AND (D.EFFECTIVE_TO>=I.INVOICE_DATE OR D.EFFECTIVE_TO IS NULL)  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0 "
                    + "AND I.PIECE_NO!=D.PIECE_NO "
                    //                        + "AND I.PIECE_NO NOT IN (SELECT D.PIECE_NO "
                    //                        + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D "
                    //                        + "WHERE H.MASTER_NO=D.MASTER_NO  "
                    //                        + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                    //                        + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                    //                        + "AND H.APPROVED=1 AND H.CANCELED=0  "
                    //                        + "AND LENGTH(D.PIECE_NO)>4) "
                    + "GROUP BY I.PARTY_CODE,I.PRODUCT_CODE,D.EFFECTIVE_FROM,D.EFFECTIVE_TO "
                    + " "
                    + "UNION ALL "
                    + " "
                    + "SELECT D.PARTY_CODE,D.PRODUCT_CODE,D.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO, "
                    + "ROUND(SUM(I.INVOICE_AMT)/100000,2) AS INVOICE_AMT  "
                    + "FROM PRODUCTION.FELT_RATE_DISC_MASTER_HEADER H,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, "
                    + "PRODUCTION.FELT_SAL_INVOICE_HEADER I  "
                    + "WHERE H.MASTER_NO=D.MASTER_NO  "
                    + "AND I.PARTY_CODE=D.PARTY_CODE "
                    + "AND I.PIECE_NO=D.PIECE_NO "
                    + "AND D.EFFECTIVE_FROM>='" + frmdt + "'  "
                    + "AND (D.EFFECTIVE_TO<='" + todt + "' OR D.EFFECTIVE_TO IS NULL)  "
                    + "AND D.EFFECTIVE_FROM<=I.INVOICE_DATE "
                    + "AND (D.EFFECTIVE_TO>=I.INVOICE_DATE OR D.EFFECTIVE_TO IS NULL)  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0 "
                    + "GROUP BY I.PARTY_CODE,I.PIECE_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO) AS IH  "
                    + "ON DISC.PARTY_CODE=IH.PARTY_CODE AND DISC.PRODUCT_CODE=IH.PRODUCT_CODE  "
                    + "AND DISC.PIECE_NO=IH.PIECE_NO  "
                    + "AND DISC.EFFECTIVE_FROM=IH.EFFECTIVE_FROM AND DISC.EFFECTIVE_TO=IH.EFFECTIVE_TO ";

            if (cmbOrderBy.getSelectedIndex() == 0) {
                sql = sql + " ORDER BY PARTY_CODE,PRODUCT_CODE";
            } else if (cmbOrderBy.getSelectedIndex() == 1) {
                sql = sql + " ORDER BY GROUP_CODE,PARTY_CODE,PRODUCT_CODE";
            }

            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);
            parameterMap.put("RUNDATE", EITLERPGLOBAL.getCurrentDate() + " " + EITLERPGLOBAL.getCurrentTime());
            System.out.println("SQL QUERY : " + sql);
            rpt.setReportName("/EITLERP/FeltSales/Reports/FeltDiscBasedTarget.jrxml", 1, sql); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnReportActionPerformed

    private void cmbFinYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFinYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFinYearActionPerformed

    private void cmbFinYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFinYearItemStateChanged
        // TODO add your handling code here:
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);

        if (cmbFinYear.getSelectedItem().equals("Select Year")) {
            txtFromDate.setText("");
            txtToDate.setText("");
        } else {
            fromYear = cmbFinYear.getSelectedItem().toString().substring(0, 4);
            toYear = cmbFinYear.getSelectedItem().toString().substring(5, 9);

            txtFromDate.setText("01/04/" + fromYear);
            txtToDate.setText("31/03/" + toYear);
        }
    }//GEN-LAST:event_cmbFinYearItemStateChanged

    private void txtFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusLost
        // TODO add your handling code here:
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter from Date");
            txtFromDate.requestFocus();
            txtFromDate.setText("");
            FormatTable();
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            txtFromDate.requestFocus();
            txtFromDate.setText("");
            FormatTable();
        } else if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "',CONCAT('" + fromYear + "','-04-01')) FROM DUAL") < 0) {
            JOptionPane.showMessageDialog(null, "Please enter From Date within Financial Year.");
            txtFromDate.requestFocus();
            txtFromDate.setText("");
            FormatTable();
        } else if (data.getIntValueFromDB("SELECT DATEDIFF(CONCAT('" + toYear + "','-03-31'),'" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
            JOptionPane.showMessageDialog(null, "Please enter From Date within Financial Year.");
            txtFromDate.requestFocus();
            txtFromDate.setText("");
            FormatTable();
        }
    }//GEN-LAST:event_txtFromDateFocusLost

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained

    private void txtToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusLost
        // TODO add your handling code here:
        if (!txtFromDate.getText().trim().equals("") && EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            if (txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please Enter To Date");
                txtToDate.requestFocus();
                txtToDate.setText("");
                FormatTable();
            } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
                JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
                txtToDate.requestFocus();
                txtToDate.setText("");
                FormatTable();
            } else if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "',CONCAT('" + fromYear + "','-04-01')) FROM DUAL") < 0) {
                JOptionPane.showMessageDialog(null, "Please enter To Date within Financial Year.");
                txtToDate.requestFocus();
                txtToDate.setText("");
                FormatTable();
            } else if (data.getIntValueFromDB("SELECT DATEDIFF(CONCAT('" + toYear + "','-03-31'),'" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "') FROM DUAL") < 0) {
                JOptionPane.showMessageDialog(null, "Please enter To Date within Financial Year.");
                txtToDate.requestFocus();
                txtToDate.setText("");
                FormatTable();
            } else if (data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtToDate.getText()) + "','" + EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) + "') FROM DUAL") < 0) {
                JOptionPane.showMessageDialog(null, "Please enter To Date greater then From Date.");
                txtToDate.requestFocus();
                txtToDate.setText("");
                FormatTable();
            }
        } else {
            txtFromDate.requestFocus();
        }
    }//GEN-LAST:event_txtToDateFocusLost

    private void cmbOrderByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOrderByItemStateChanged
        // TODO add your handling code here:
        cmdShowActionPerformed(null);
    }//GEN-LAST:event_cmbOrderByItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton btnReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbFinYear;
    private javax.swing.JComboBox cmbOrderBy;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdWhStkExporttoExcel;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    private boolean Validate() {
        //Form level validations
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter from date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter To date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }

    private void FormatTable() {
        DataModel = new EITLTableModel();
        Table.removeAll();
        Table.setModel(DataModel);
        Table.setAutoResizeMode(Table.AUTO_RESIZE_OFF);
    }

}
