/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Reports;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.Finance.UtilFunctions;
import EITLERP.ReportRegister;
import EITLERP.data;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Dharmendra
 */
public class frmSpilloverTracker extends javax.swing.JApplet {

    /**
     * Initializes the frmOverDueOutStanding
     */
    private int EditMode = 0;
    private boolean DoNotEvaluate = false;
    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModel_Sch_Month = new EITLTableModel();
    private EITLComboModel cmbOCMonthModel;
    private EITLComboModel modelMonthYear;
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    @Override
    public void init() {
        /* Create and display the applet */
        initComponents();
        file1.show(false);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
//        setSize(scrwidth, scrheight);
        setSize(1280, 540);
        cmdview.setVisible(false);
        GenerateCombo();
        GenerateSchMonthCombo();
        FormatGrid();
        GenerateData();
        cmbMonthYearItemStateChanged(null);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbOCMonth = new javax.swing.JComboBox();
        cmdview = new javax.swing.JButton();
        cmdWhStkExporttoExcel = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cmbMonthYear = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_Sch_Month = new javax.swing.JTable();

        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Felt Sales Spillover Tracker");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(2, 4, 460, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 1, 1260, 30);

        jPanel2.setLayout(null);

        jLabel1.setText("OC MONTH :");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(10, 10, 100, 30);

        cmbOCMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOCMonthItemStateChanged(evt);
            }
        });
        jPanel2.add(cmbOCMonth);
        cmbOCMonth.setBounds(100, 10, 180, 30);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        jPanel2.add(cmdview);
        cmdview.setBounds(300, 10, 120, 30);

        cmdWhStkExporttoExcel.setText("Export to Excel");
        cmdWhStkExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWhStkExporttoExcelActionPerformed(evt);
            }
        });
        jPanel2.add(cmdWhStkExporttoExcel);
        cmdWhStkExporttoExcel.setBounds(800, 10, 150, 30);
        jPanel2.add(file1);
        file1.setBounds(500, 10, 220, 420);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 50, 1240, 390);

        jTabbedPane1.addTab("OC wise Sales Plan", jPanel2);

        jPanel3.setLayout(null);

        cmbMonthYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthYearItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbMonthYear);
        cmbMonthYear.setBounds(150, 10, 140, 30);

        jLabel2.setText("Schedule MONTH :");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(10, 10, 140, 30);

        Table_Sch_Month.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(Table_Sch_Month);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(10, 50, 1240, 390);

        jTabbedPane1.addTab("Sales Plan wise OC", jPanel3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 30, 1260, 470);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        GenerateData();
    }//GEN-LAST:event_cmdviewActionPerformed

    private void cmdWhStkExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWhStkExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Spillover Tracker");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdWhStkExporttoExcelActionPerformed

    private void cmbMonthYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthYearItemStateChanged
        // TODO add your handling code here:
        GenerateSchMonth();
    }//GEN-LAST:event_cmbMonthYearItemStateChanged

    private void cmbOCMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOCMonthItemStateChanged
        // TODO add your handling code here:
        GenerateData();
    }//GEN-LAST:event_cmbOCMonthItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JTable Table_Sch_Month;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbMonthYear;
    private javax.swing.JComboBox cmbOCMonth;
    private javax.swing.JButton cmdWhStkExporttoExcel;
    private javax.swing.JButton cmdview;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void GenerateCombo() {
        //Generates Combo Boxes
        ComboData objData2 = new ComboData();
        cmbOCMonthModel = new EITLComboModel();
        cmbOCMonth.removeAllItems();
        cmbOCMonth.setModel(cmbOCMonthModel);

        try {
            ResultSet rs = data.getResult("SELECT DISTINCT OC_MONTH FROM PRODUCTION.SPILLOVER_OC_REPORT WHERE SP_MONTH_DATE<=LAST_DAY(CURDATE()) ORDER BY OC_MONTH_DATE DESC");
            rs.first();

            while (!rs.isAfterLast()) {
                objData2 = new ComboData();
                objData2.Text = rs.getString("OC_MONTH");
                objData2.strCode = rs.getString("OC_MONTH");
                cmbOCMonthModel.addElement(objData2);
                rs.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateSchMonthCombo() {
        //Generates Combo Boxes
        ComboData aData = new ComboData();
        modelMonthYear = new EITLComboModel();
        cmbMonthYear.removeAllItems();
        cmbMonthYear.setModel(modelMonthYear);

        try {
            ResultSet rs = data.getResult("SELECT distinct PR_CURRENT_SCH_MONTH FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                    + "AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','SPIRALLING','ASSEMBLY','IN STOCK','BSR','HEAT_SETTING','MARKING','SPLICING') "
                    + "AND COALESCE(PR_CURRENT_SCH_MONTH,'') != '' AND COALESCE(PR_DELINK,'') != 'OBSOLETE' "
                    + "ORDER BY PR_CURRENT_SCH_LAST_DDMMYY ");
            rs.first();

            while (!rs.isAfterLast()) {
                aData = new ComboData();
                aData.Text = rs.getString("PR_CURRENT_SCH_MONTH");
                aData.strCode = rs.getString("PR_CURRENT_SCH_MONTH");
                modelMonthYear.addElement(aData);
                rs.next();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid() {
        try {
            // objRow=objReportData.newRow();
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("OC SO Month");
            DataModel.addColumn("SP Month");
            DataModel.addColumn("Total");
            DataModel.addColumn("Mar - 2021");
            DataModel.addColumn("Apr - 2021");
            DataModel.addColumn("May - 2021");
            DataModel.addColumn("Jun - 2021");
            DataModel.addColumn("Jul - 2021");
            DataModel.addColumn("Aug - 2021");
            DataModel.addColumn("Sep - 2021");
            DataModel.addColumn("Oct - 2021");
            DataModel.addColumn("Nov - 2021");
            DataModel.addColumn("Dec - 2021");
            DataModel.addColumn("Jan - 2022");
            DataModel.addColumn("Feb - 2022");
            DataModel.addColumn("Mar - 2022");
            DataModel.addColumn("FY 2022-2023");
            DataModel.addColumn("Run DateTime");

            Table.setEnabled(false);
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Mar - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Apr - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("May - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Jun - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Jul - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Aug - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Sep - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Oct - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Nov - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Dec - 2021")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Jan - 2022")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
                Table.getColumnModel().getColumn(13).setMinWidth(0);
                Table.getColumnModel().getColumn(13).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Feb - 2022")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
                Table.getColumnModel().getColumn(13).setMinWidth(0);
                Table.getColumnModel().getColumn(13).setMaxWidth(0);
                Table.getColumnModel().getColumn(14).setMinWidth(0);
                Table.getColumnModel().getColumn(14).setMaxWidth(0);
            }
            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Mar - 2022")) {
                Table.getColumnModel().getColumn(3).setMinWidth(0);
                Table.getColumnModel().getColumn(3).setMaxWidth(0);
                Table.getColumnModel().getColumn(4).setMinWidth(0);
                Table.getColumnModel().getColumn(4).setMaxWidth(0);
                Table.getColumnModel().getColumn(5).setMinWidth(0);
                Table.getColumnModel().getColumn(5).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
                Table.getColumnModel().getColumn(13).setMinWidth(0);
                Table.getColumnModel().getColumn(13).setMaxWidth(0);
                Table.getColumnModel().getColumn(14).setMinWidth(0);
                Table.getColumnModel().getColumn(14).setMaxWidth(0);
                Table.getColumnModel().getColumn(15).setMinWidth(0);
                Table.getColumnModel().getColumn(15).setMaxWidth(0);
            }

        } catch (Exception e) {

        }
    }

    private void GenerateData() {
        FormatGrid();

        try {

            String str = "SELECT DISTINCT OC_MONTH FROM PRODUCTION.SPILLOVER_OC_REPORT "
                    + "WHERE SP_MONTH_DATE<=LAST_DAY(CURDATE()) "
                    + "AND OC_MONTH='" + cmbOCMonth.getSelectedItem().toString().trim() + "' "//Added
                    + "ORDER BY OC_MONTH_DATE ";
//            System.out.println(str);

            ResultSet rsTmp = data.getResult(str);
            rsTmp.first();
            int Counter = 0;
            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    DecimalFormat df = new DecimalFormat("###.##");

                    Object[] rowData = new Object[20];

                    DataModel.addRow(rowData);

                    rowData[0] = UtilFunctions.getString(rsTmp, "OC_MONTH", "");
                    rowData[1] = "";
                    rowData[2] = "";
                    rowData[3] = "";
                    rowData[4] = "";
                    rowData[5] = "";
                    rowData[6] = "";
                    rowData[7] = "";
                    rowData[8] = "";
                    rowData[9] = "";
                    rowData[10] = "";
                    rowData[11] = "";
                    rowData[12] = "";
                    rowData[13] = "";
                    rowData[14] = "";
                    rowData[15] = "";
                    rowData[16] = "";
                    rowData[17] = EITLERPGLOBAL.getCurrentDateTimeDB();

                    DataModel.addRow(rowData);

                    String str1 = "SELECT * FROM PRODUCTION.SPILLOVER_OC_REPORT "
                            + "WHERE SP_MONTH_DATE<=LAST_DAY(CURDATE()) AND OC_MONTH='" + rsTmp.getString("OC_MONTH") + "' "
                            + "ORDER BY SP_MONTH_DATE ";
//            System.out.println(str1);

                    ResultSet rsTmpD = data.getResult(str1);
                    rsTmpD.first();
                    int CounterD = 0;
                    if (rsTmpD.getRow() > 0) {
                        while (!rsTmpD.isAfterLast()) {
                            CounterD++;

                            rowData = new Object[20];

//                            DataModel.addRow(rowData);
                            rowData[0] = "";
                            rowData[1] = UtilFunctions.getString(rsTmpD, "SP_MONTH", "");
                            rowData[2] = UtilFunctions.getString(rsTmpD, "RSC_TOTAL", "");
                            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Mar - 2021")) {
                                rowData[3] = "";
                            } else {
                                rowData[3] = UtilFunctions.getString(rsTmpD, "RSC_MAR_P", "");
                            }
                            rowData[4] = UtilFunctions.getString(rsTmpD, "RSC_APR", "");
                            rowData[5] = UtilFunctions.getString(rsTmpD, "RSC_MAY", "");
                            rowData[6] = UtilFunctions.getString(rsTmpD, "RSC_JUN", "");
                            rowData[7] = UtilFunctions.getString(rsTmpD, "RSC_JUL", "");
                            rowData[8] = UtilFunctions.getString(rsTmpD, "RSC_AUG", "");
                            rowData[9] = UtilFunctions.getString(rsTmpD, "RSC_SEP", "");
                            rowData[10] = UtilFunctions.getString(rsTmpD, "RSC_OCT", "");
                            rowData[11] = UtilFunctions.getString(rsTmpD, "RSC_NOV", "");
                            rowData[12] = UtilFunctions.getString(rsTmpD, "RSC_DEC", "");
                            rowData[13] = UtilFunctions.getString(rsTmpD, "RSC_JAN", "");
                            rowData[14] = UtilFunctions.getString(rsTmpD, "RSC_FEB", "");
                            rowData[15] = UtilFunctions.getString(rsTmpD, "RSC_MAR", "");
                            rowData[16] = UtilFunctions.getString(rsTmpD, "RSC_NEXT_YEAR", "");
                            rowData[17] = EITLERPGLOBAL.getCurrentDateTimeDB();

                            DataModel.addRow(rowData);

                            rowData[0] = "";
                            rowData[1] = "Addtion";
                            rowData[2] = UtilFunctions.getString(rsTmpD, "ADD_TOTAL", "");
                            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Mar - 2021")) {
                                rowData[3] = "";
                            } else {
                                rowData[3] = UtilFunctions.getString(rsTmpD, "ADD_MAR_P", "");
                            }
                            rowData[4] = UtilFunctions.getString(rsTmpD, "ADD_APR", "");
                            rowData[5] = UtilFunctions.getString(rsTmpD, "ADD_MAY", "");
                            rowData[6] = UtilFunctions.getString(rsTmpD, "ADD_JUN", "");
                            rowData[7] = UtilFunctions.getString(rsTmpD, "ADD_JUL", "");
                            rowData[8] = UtilFunctions.getString(rsTmpD, "ADD_AUG", "");
                            rowData[9] = UtilFunctions.getString(rsTmpD, "ADD_SEP", "");
                            rowData[10] = UtilFunctions.getString(rsTmpD, "ADD_OCT", "");
                            rowData[11] = UtilFunctions.getString(rsTmpD, "ADD_NOV", "");
                            rowData[12] = UtilFunctions.getString(rsTmpD, "ADD_DEC", "");
                            rowData[13] = UtilFunctions.getString(rsTmpD, "ADD_JAN", "");
                            rowData[14] = UtilFunctions.getString(rsTmpD, "ADD_FEB", "");
                            rowData[15] = UtilFunctions.getString(rsTmpD, "ADD_MAR", "");
                            rowData[16] = UtilFunctions.getString(rsTmpD, "ADD_NEXT_YEAR", "");
                            rowData[17] = EITLERPGLOBAL.getCurrentDateTimeDB();

                            DataModel.addRow(rowData);

                            rowData[0] = "";
                            rowData[1] = "Act Inv/Div/Obs";
                            rowData[2] = UtilFunctions.getString(rsTmpD, "ASC_TOTAL", "");
                            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Mar - 2021")) {
                                rowData[3] = "";
                            } else {
                                rowData[3] = UtilFunctions.getString(rsTmpD, "ASC_MAR_P", "");
                            }
                            rowData[4] = UtilFunctions.getString(rsTmpD, "ASC_APR", "");
                            rowData[5] = UtilFunctions.getString(rsTmpD, "ASC_MAY", "");
                            rowData[6] = UtilFunctions.getString(rsTmpD, "ASC_JUN", "");
                            rowData[7] = UtilFunctions.getString(rsTmpD, "ASC_JUL", "");
                            rowData[8] = UtilFunctions.getString(rsTmpD, "ASC_AUG", "");
                            rowData[9] = UtilFunctions.getString(rsTmpD, "ASC_SEP", "");
                            rowData[10] = UtilFunctions.getString(rsTmpD, "ASC_OCT", "");
                            rowData[11] = UtilFunctions.getString(rsTmpD, "ASC_NOV", "");
                            rowData[12] = UtilFunctions.getString(rsTmpD, "ASC_DEC", "");
                            rowData[13] = UtilFunctions.getString(rsTmpD, "ASC_JAN", "");
                            rowData[14] = UtilFunctions.getString(rsTmpD, "ASC_FEB", "");
                            rowData[15] = UtilFunctions.getString(rsTmpD, "ASC_MAR", "");
                            rowData[16] = UtilFunctions.getString(rsTmpD, "ASC_NEXT_YEAR", "");
                            rowData[17] = EITLERPGLOBAL.getCurrentDateTimeDB();

                            DataModel.addRow(rowData);

                            rowData[0] = "";
                            rowData[1] = "Diff";
                            rowData[2] = UtilFunctions.getInt(rsTmpD, "RSC_TOTAL", 0) + UtilFunctions.getInt(rsTmpD, "ADD_TOTAL", 0) - UtilFunctions.getInt(rsTmpD, "ASC_TOTAL", 0);
                            if (cmbOCMonth.getSelectedItem().toString().equalsIgnoreCase("Mar - 2021")) {
                                rowData[3] = "";
                            } else {
                                rowData[3] = UtilFunctions.getInt(rsTmpD, "RSC_MAR_P", 0) + UtilFunctions.getInt(rsTmpD, "ADD_MAR_P", 0) - UtilFunctions.getInt(rsTmpD, "ASC_MAR_P", 0);
                            }
                            rowData[4] = UtilFunctions.getInt(rsTmpD, "RSC_APR", 0) + UtilFunctions.getInt(rsTmpD, "ADD_APR", 0) - UtilFunctions.getInt(rsTmpD, "ASC_APR", 0);
                            rowData[5] = UtilFunctions.getInt(rsTmpD, "RSC_MAY", 0) + UtilFunctions.getInt(rsTmpD, "ADD_MAY", 0) - UtilFunctions.getInt(rsTmpD, "ASC_MAY", 0);
                            rowData[6] = UtilFunctions.getInt(rsTmpD, "RSC_JUN", 0) + UtilFunctions.getInt(rsTmpD, "ADD_JUN", 0) - UtilFunctions.getInt(rsTmpD, "ASC_JUN", 0);
                            rowData[7] = UtilFunctions.getInt(rsTmpD, "RSC_JUL", 0) + UtilFunctions.getInt(rsTmpD, "ADD_JUL", 0) - UtilFunctions.getInt(rsTmpD, "ASC_JUL", 0);
                            rowData[8] = UtilFunctions.getInt(rsTmpD, "RSC_AUG", 0) + UtilFunctions.getInt(rsTmpD, "ADD_AUG", 0) - UtilFunctions.getInt(rsTmpD, "ASC_AUG", 0);
                            rowData[9] = UtilFunctions.getInt(rsTmpD, "RSC_SEP", 0) + UtilFunctions.getInt(rsTmpD, "ADD_SEP", 0) - UtilFunctions.getInt(rsTmpD, "ASC_SEP", 0);
                            rowData[10] = UtilFunctions.getInt(rsTmpD, "RSC_OCT", 0) + UtilFunctions.getInt(rsTmpD, "ADD_OCT", 0) - UtilFunctions.getInt(rsTmpD, "ASC_OCT", 0);
                            rowData[11] = UtilFunctions.getInt(rsTmpD, "RSC_NOV", 0) + UtilFunctions.getInt(rsTmpD, "ADD_NOV", 0) - UtilFunctions.getInt(rsTmpD, "ASC_NOV", 0);
                            rowData[12] = UtilFunctions.getInt(rsTmpD, "RSC_DEC", 0) + UtilFunctions.getInt(rsTmpD, "ADD_DEC", 0) - UtilFunctions.getInt(rsTmpD, "ASC_DEC", 0);
                            rowData[13] = UtilFunctions.getInt(rsTmpD, "RSC_JAN", 0) + UtilFunctions.getInt(rsTmpD, "ADD_JAN", 0) - UtilFunctions.getInt(rsTmpD, "ASC_JAN", 0);
                            rowData[14] = UtilFunctions.getInt(rsTmpD, "RSC_FEB", 0) + UtilFunctions.getInt(rsTmpD, "ADD_FEB", 0) - UtilFunctions.getInt(rsTmpD, "ASC_FEB", 0);
                            rowData[15] = UtilFunctions.getInt(rsTmpD, "RSC_MAR", 0) + UtilFunctions.getInt(rsTmpD, "ADD_MAR", 0) - UtilFunctions.getInt(rsTmpD, "ASC_MAR", 0);
                            rowData[16] = UtilFunctions.getInt(rsTmpD, "RSC_NEXT_YEAR", 0) + UtilFunctions.getInt(rsTmpD, "ADD_NEXT_YEAR", 0) - UtilFunctions.getInt(rsTmpD, "ASC_NEXT_YEAR", 0);
                            rowData[17] = EITLERPGLOBAL.getCurrentDateTimeDB();

                            DataModel.addRow(rowData);

                            rowData = new Object[20];
                            DataModel.addRow(rowData);

                            rsTmpD.next();

                        }
                    }

                    Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
                    Table.requestFocus();

                    rsTmp.next();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateSchMonth() {
        String sql = "";
        ResultSet rs;
        DataModel_Sch_Month = new EITLTableModel();
        Table_Sch_Month.removeAll();
        Table_Sch_Month.setModel(DataModel_Sch_Month);
        Table_Sch_Month.setAutoResizeMode(Table_Sch_Month.AUTO_RESIZE_OFF);

        try {
            sql = "SELECT PR_OC_LAST_DDMMYY, PR_OC_MONTHYEAR AS 'Reg. OC Month',PR_P AS 'Reg. Piece(s)', COALESCE(OC_MONTH_DATE,'') as OC_MONTH_DATE, COALESCE(OC_MONTH,'') AS 'Spillover OC Month', COALESCE(SP_P,0) AS 'Spillover Piece(s)'  FROM "
                    + "(SELECT PR_OC_LAST_DDMMYY,PR_OC_MONTHYEAR,COUNT(PR_PIECE_NO) AS PR_P FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    //                    + "WHERE PR_CURRENT_SCH_LAST_DDMMYY = '2022-01-31' "
                    + "WHERE PR_CURRENT_SCH_MONTH = '" + cmbMonthYear.getSelectedItem().toString().trim() + "' "
                    + "AND PR_PIECE_STAGE IN ('IN STOCK','BSR') AND COALESCE(PR_DELINK,'') != 'OBSOLETE' "
                    + "GROUP BY PR_OC_LAST_DDMMYY,PR_OC_MONTHYEAR) AS A "
                    + "LEFT JOIN "
                    + "(SELECT OC_MONTH_DATE,OC_MONTH,COUNT(PIECE_NO) AS SP_P FROM PRODUCTION.SPILLOVER_RESCHEDULING_DETAIL "
                    + "WHERE CUR_PIECE_STAGE  IN ('IN STOCK','BSR') "
                    //                    + "AND RE_SCH_MONTH_DATE = '2022-01-31'  AND DOC_MONTH =11 "
                    + "AND RE_SCH_MONTH = '" + cmbMonthYear.getSelectedItem().toString().trim() + "' "
                    + "AND DOC_MONTH=MONTH(CURDATE()) AND DOC_YEAR=YEAR(CURDATE()) "
                    + "GROUP BY OC_MONTH_DATE,OC_MONTH) AS B "
                    + "ON OC_MONTH_DATE = PR_OC_LAST_DDMMYY "
                    + "UNION ALL "
                    + "SELECT '9999-12-31','Total Sales Plan ',SUM(PR_P),'','Total Spillover ',SUM(SP_P) FROM "
                    + "(SELECT PR_OC_LAST_DDMMYY, PR_OC_MONTHYEAR,PR_P, COALESCE(OC_MONTH_DATE,''), COALESCE(OC_MONTH,''), COALESCE(SP_P,0) AS SP_P  FROM "
                    + "(SELECT PR_OC_LAST_DDMMYY,PR_OC_MONTHYEAR,COUNT(PR_PIECE_NO) AS PR_P FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                    //                    + "WHERE PR_CURRENT_SCH_LAST_DDMMYY = '2022-01-31' "
                    + "WHERE PR_CURRENT_SCH_MONTH = '" + cmbMonthYear.getSelectedItem().toString().trim() + "' "
                    + "AND PR_PIECE_STAGE IN ('IN STOCK','BSR') AND COALESCE(PR_DELINK,'') != 'OBSOLETE' "
                    + "GROUP BY PR_OC_LAST_DDMMYY,PR_OC_MONTHYEAR) AS A "
                    + "LEFT JOIN "
                    + "(SELECT OC_MONTH_DATE,OC_MONTH,COUNT(PIECE_NO) AS SP_P FROM PRODUCTION.SPILLOVER_RESCHEDULING_DETAIL WHERE CUR_PIECE_STAGE  IN ('IN STOCK','BSR') "
                    //                    + "AND RE_SCH_MONTH_DATE = '2022-01-31'  AND DOC_MONTH =11 "
                    + "AND RE_SCH_MONTH = '" + cmbMonthYear.getSelectedItem().toString().trim() + "' "
                    + "AND DOC_MONTH=MONTH(CURDATE()) AND DOC_YEAR=YEAR(CURDATE()) "
                    + "GROUP BY OC_MONTH_DATE,OC_MONTH) AS B "
                    + "ON OC_MONTH_DATE = PR_OC_LAST_DDMMYY) AS M "
                    + "ORDER BY PR_OC_LAST_DDMMYY ";//,PR_OC_MONTHYEAR

//            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModel_Sch_Month.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
//            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModel_Sch_Month.addRow(rowData);
                    rs.next();
                }
            }
            DataModel_Sch_Month.TableReadOnly(true);
            Table_Sch_Month.getColumnModel().getColumn(0).setMinWidth(0);
            Table_Sch_Month.getColumnModel().getColumn(0).setMaxWidth(0);
            Table_Sch_Month.getColumnModel().getColumn(3).setMinWidth(0);
            Table_Sch_Month.getColumnModel().getColumn(3).setMaxWidth(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
