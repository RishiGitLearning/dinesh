/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Reports;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.FeltInvReport.clsFeltSalesInvoice;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsVoucher;
import EITLERP.ReportRegister;
import EITLERP.data;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Dharmendra
 */
public class frmOverDueOutStanding extends javax.swing.JApplet {

    /**
     * Initializes the frmOverDueOutStanding
     */
    private int EditMode = 0;
    private boolean DoNotEvaluate = false;
    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter exprt = new EITLERP.FeltSales.Reports.clsExcelExporter();

    @Override
    public void init() {
        /* Create and display the applet */
        initComponents();
        file1.show(false);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        txtdt.setText(EITLERPGLOBAL.getCurrentDate());
        FormatGrid();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        txtdt = new javax.swing.JTextField();
        cmdview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdWhStkExporttoExcel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        file1 = new javax.swing.JFileChooser();

        getContentPane().setLayout(null);

        jLabel2.setText("As on Date");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 40, 80, 30);

        txtdt.setEditable(false);
        getContentPane().add(txtdt);
        txtdt.setBounds(110, 40, 160, 30);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmdview);
        cmdview.setBounds(290, 40, 120, 30);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 970, 410);

        cmdWhStkExporttoExcel.setText("Export to Excel");
        cmdWhStkExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWhStkExporttoExcelActionPerformed(evt);
            }
        });
        getContentPane().add(cmdWhStkExporttoExcel);
        cmdWhStkExporttoExcel.setBounds(810, 40, 150, 30);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Felt Sales OverDue OutStanding Report");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(2, 4, 460, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 1, 980, 30);
        getContentPane().add(file1);
        file1.setBounds(510, 50, 220, 420);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        GenerateReport();
    }//GEN-LAST:event_cmdviewActionPerformed

    private void cmdWhStkExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWhStkExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exprt.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "OverDue OutStanding");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdWhStkExporttoExcelActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (Table.getSelectedColumn() == 6 || Table.getSelectedColumn() == 7) {
                double a10 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 10));
                double a6 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 6));
                if (a10 - a6 > 0) {
                    Table.setValueAt("0.00", Table.getSelectedRow(), 11);
                } else {
                    Table.setValueAt(String.valueOf(a6 - a10), Table.getSelectedRow(), 11);
                }

                double a11 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 11));
                double a8 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 8));
                if (a11 > 0 && a8 > 0) {
                    Table.setValueAt("NOT CLEAR", Table.getSelectedRow(), 12);
                } else if (a11 == 0 && a8 > 0) {
                    Table.setValueAt("PARTIALLY CLEAR", Table.getSelectedRow(), 12);
                } else if (a8 == 0 && a11 > 0) {
                    Table.setValueAt("PARTIALLY CLEAR", Table.getSelectedRow(), 12);
                } else {
                    Table.setValueAt("CLEAR", Table.getSelectedRow(), 12);
                }
            }
        }
    }//GEN-LAST:event_TableKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdWhStkExporttoExcel;
    private javax.swing.JButton cmdview;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtdt;
    // End of variables declaration//GEN-END:variables

    private void GenerateReport() {
        FormatGrid();

        try {
            String str = "SELECT * FROM (SELECT PARTY_CODE,PARTY_NAME,CHARGE_CODE,AMOUNT_LIMIT FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010 "
//                    + "AND COALESCE(PARTY_CLOSE_IND,0)=0 "
                    + "AND CHARGE_CODE NOT IN (7,9)) AS PM LEFT JOIN (SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D WHERE H.GROUP_CODE=D.GROUP_CODE AND H.APPROVED=1 AND H.CANCELED=0) AS GM ON PM.PARTY_CODE=GM.GROUP_PARTY_CODE ORDER BY GROUP_CODE,PARTY_CODE";
            System.out.println(str);

            ResultSet rsTmp = data.getResult(str);
            rsTmp.first();
            int Counter = 0;
            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    DecimalFormat df = new DecimalFormat("###.##");

                    Object[] rowData = new Object[20];
                    rowData[0] = Counter;
                    rowData[1] = UtilFunctions.getString(rsTmp, "GROUP_CODE", "");
                    rowData[2] = UtilFunctions.getString(rsTmp, "GROUP_DESC", "");
                    rowData[3] = UtilFunctions.getString(rsTmp, "PARTY_CODE", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "PARTY_NAME", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "CHARGE_CODE", "");
                    rowData[6] = 0.00;

                    double osAmt = PartyOutStanding("210010", rsTmp.getString("PARTY_CODE"));
                    rowData[7] = df.format(osAmt);

                    double dueOSAmt = PartyOverDue("210010", rsTmp.getString("PARTY_CODE"));
                    rowData[8] = df.format(dueOSAmt);

                    rowData[9] = df.format(UtilFunctions.getDouble(rsTmp, "AMOUNT_LIMIT", 0.00));

                    rowData[10] = df.format(UtilFunctions.getDouble(rsTmp, "AMOUNT_LIMIT", 0.00) - osAmt); //Space Available;//=I4-G4
                    rowData[11] = 0; //Enhancement Required;//=IF((J3-F3)>0, 0, (F3-J3))
                    rowData[12] = ""; //Clearance Status;//=IF(AND(K3>0,H3>0), "NOT CLEAR", IF(AND(K3=0, H3>0), "PARTIALLY CLEAR", IF(AND(H3=0, K3>0), "PARTIALLY CLEAR", "CLEAR") ) )

                    rowData[13] = EITLERPGLOBAL.getCurrentDateTimeDB();

                    DataModel.addRow(rowData);
                    Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
                    Table.requestFocus();

                    rsTmp.next();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGrid() {
        try {
            // objRow=objReportData.newRow();
            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo");
            DataModel.addColumn("Group Code");
            DataModel.addColumn("Group Name");
            DataModel.addColumn("Party Code");
            DataModel.addColumn("Party Name");
            DataModel.addColumn("Payment Terms");
            DataModel.addColumn("Dispatch Plan For Current Month");
            DataModel.addColumn("Outstanding");
            DataModel.addColumn("Overdue");
            DataModel.addColumn("Critical Limit");
            DataModel.addColumn("Space Available");
            DataModel.addColumn("Enhancement Required");
            DataModel.addColumn("Clearance Status");
            DataModel.addColumn("Run DateTime");

            for (int j = 0; j < Table.getColumnCount(); j++) {
                if (j != 6) {
                    DataModel.SetReadOnly(j);
                }
            }
        } catch (Exception e) {

        }
    }

    private double PartyOutStanding(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            if (MainCode.equals("210010")) {
                InvoiceType = 2;
                BookCode = " AND BOOK_CODE IN ('09') "; //,'18'
                //ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            }
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE,A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_BAL_TR (MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT) " + SQL);

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) { //&& clsVoucher.getVoucherType(VoucherNo)!=FinanceGlobal.TYPE_DEBIT_NOTE
                        rsInvoice.next();
                        continue;
                    }

                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
//                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")  && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1")) { Closed on 29/08/2020 as requested by Mr. Motiani from Felt Sales Dept
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4") ) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    private double PartyOverDue(String MainCode, String PartyCode) {
        String SQL = "", FromDate = "", ToDate = "", DueDate = "", InvoiceNo = "", InvoiceDate = "", BookCode = "", ChargeCode = "";
        ResultSet rsInvoice = null;
        int InvoiceType = 0, EntryNo = 0;
        double TotalBalance = 0;
        try {
            if (MainCode.equals("210010")) {
                InvoiceType = 2;
                BookCode = " AND BOOK_CODE IN ('09') "; //,'18'
                //ChargeCode = " AND CHARGE_CODE IN ('02','08') ";
            }
            // SET LAST CLOSING DATE & TO DATE
            ToDate = EITLERPGLOBAL.getCurrentDateDB();
            FromDate = EITLERPGLOBAL.FinFromDateDB;
            SQL = "SELECT ENTRY_NO FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_DATE<='" + ToDate + "' ORDER BY ENTRY_DATE DESC";
            EntryNo = data.getIntValueFromDB(SQL, FinanceGlobal.FinURL);
            FromDate = data.getStringValueFromDB("SELECT ENTRY_DATE FROM D_FIN_DR_OPENING_OUTSTANDING_HEADER WHERE ENTRY_NO=" + EntryNo, FinanceGlobal.FinURL);
            // ------------------------------

            // GET PARTY'S INVOICE NO,INVOICE DATE USING UNION FROM OUTSTANDING DETAIL AND VOUCHER TABLES
            SQL = "(SELECT MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT FROM FINANCE.D_FIN_DR_OPENING_OUTSTANDING_DETAIL "
                    + "WHERE INVOICE_TYPE=" + InvoiceType + " AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' AND ENTRY_NO=" + EntryNo + " AND EFFECT='D' AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00') " + BookCode + " ) "
                    + "UNION ALL "
                    + "(SELECT B.MAIN_ACCOUNT_CODE,B.SUB_ACCOUNT_CODE,A.BOOK_CODE,A.VOUCHER_NO,A.VOUCHER_DATE,A.LEGACY_NO,B.INVOICE_NO,B.INVOICE_DATE,B.LINK_NO,B.AMOUNT,B.EFFECT FROM FINANCE.D_FIN_VOUCHER_HEADER A, FINANCE.D_FIN_VOUCHER_DETAIL B "
                    + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='D' AND A.APPROVED=1 AND A.CANCELLED=0 "
                    + "AND A.VOUCHER_DATE >'" + FromDate + "' AND A.VOUCHER_DATE <='" + ToDate + "' AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) " + BookCode + " ) "
                    + "ORDER BY VOUCHER_DATE ";

            data.Execute("INSERT INTO TEMP_DATABASE.TEMP_BAL_TR (MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,BOOK_CODE,VOUCHER_NO,VOUCHER_DATE,LEGACY_NO,INVOICE_NO,INVOICE_DATE,LINK_NO,AMOUNT,EFFECT) " + SQL);

            rsInvoice = data.getResult(SQL, FinanceGlobal.FinURL);
            rsInvoice.first();
            InvoiceNo = "";
            InvoiceDate = "";
            DueDate = "";
            // ---------------------------------------------------------------------

            if (rsInvoice.getRow() > 0) {
                while (!rsInvoice.isAfterLast()) {

                    String VoucherNo = UtilFunctions.getString(rsInvoice, "VOUCHER_NO", "");
                    InvoiceNo = UtilFunctions.getString(rsInvoice, "INVOICE_NO", "");
                    InvoiceDate = UtilFunctions.getString(rsInvoice, "INVOICE_DATE", "");
                    PartyCode = UtilFunctions.getString(rsInvoice, "SUB_ACCOUNT_CODE", "");
                    double DebitAmount = 0;
                    double AdjustedAmount = 0;
                    if (clsVoucher.getVoucherType(VoucherNo) != FinanceGlobal.TYPE_SALES_JOURNAL) { //&& clsVoucher.getVoucherType(VoucherNo)!=FinanceGlobal.TYPE_DEBIT_NOTE
                        rsInvoice.next();
                        continue;
                    }

                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
//                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")  && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("1")) { //Closed on 29/08/2020 as requested by Mr. Motiani from Felt Sales Dept
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4") ) {
                            rsInvoice.next();
                            continue;
                        }
                    } else if (InvoiceType == 1 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        if (!clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("2") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("5") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("8") && !clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate).startsWith("4")) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (!data.IsRecordExist("SELECT * FROM D_FIN_DEBITNOTE_RECEIPT_MAPPING WHERE DEBITNOTE_VOUCHER_NO='" + VoucherNo + "'", FinanceGlobal.FinURL)
                            && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_DEBIT_NOTE) {
                        rsInvoice.next();
                        continue;
                    }

                    if (InvoiceType == 2 && clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        DueDate = getDueDate(PartyCode, InvoiceNo, InvoiceDate);
                        if (data.getIntValueFromDB("SELECT DATEDIFF(CURDATE(),'" + DueDate + "') FROM DUAL") <= 0) {
                            rsInvoice.next();
                            continue;
                        }
                    }

                    if (clsVoucher.getVoucherType(VoucherNo) == FinanceGlobal.TYPE_SALES_JOURNAL) {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + InvoiceDate + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.INVOICE_DATE='" + InvoiceDate + "' AND B.INVOICE_NO='" + InvoiceNo + "' ";

                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    } else {
                        SQL = "SELECT SUM(AMOUNT) FROM D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + VoucherNo + "' AND EFFECT='D' "
                                + "AND MAIN_ACCOUNT_CODE='" + MainCode + "' AND SUB_ACCOUNT_CODE='" + PartyCode + "' "
                                + "AND (MATCHED_DATE>'" + ToDate + "' OR MATCHED_DATE='0000-00-00' OR MATCHED_DATE IS NULL ) ";
                        DebitAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);

                        SQL = "SELECT SUM(B.AMOUNT) FROM D_FIN_VOUCHER_DETAIL B, D_FIN_VOUCHER_HEADER A "
                                + "WHERE A.VOUCHER_NO=B.VOUCHER_NO AND A.APPROVED=1 AND A.CANCELLED=0 "
                                + "AND (B.MATCHED_DATE>'" + ToDate + "' OR B.MATCHED_DATE='0000-00-00' OR B.MATCHED_DATE IS NULL ) "
                                + "AND B.MAIN_ACCOUNT_CODE='" + MainCode + "' AND B.SUB_ACCOUNT_CODE='" + PartyCode + "' AND B.EFFECT='C' "
                                + "AND B.GRN_NO='" + VoucherNo + "' ";
                        AdjustedAmount = data.getDoubleValueFromDB(SQL, FinanceGlobal.FinURL);
                    }
                    if (DebitAmount == AdjustedAmount) {
                        rsInvoice.next();
                        continue;
                    }

                    TotalBalance = EITLERPGLOBAL.round(TotalBalance + EITLERPGLOBAL.round(DebitAmount - AdjustedAmount, 2), 2);
                    rsInvoice.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return TotalBalance;
        }
        return TotalBalance;
    }

    public static String getDueDate(String PartyCode, String InvoiceNo, String InvoiceDate) {
        String DueDate = "0000-00-00";
        String ChargeCode = clsFeltSalesInvoice.getInvoiceChargeCode(InvoiceNo, InvoiceDate);
        try {
            if (ChargeCode.startsWith("2")) {
                DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, clsFeltSalesInvoice.getCreditDays(PartyCode, "210010") + 15, "yyyy-MM-dd");
            } else if (ChargeCode.startsWith("8")) {
                DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, clsFeltSalesInvoice.getCreditDays(PartyCode, "210010") + 6, "yyyy-MM-dd");
            } else if (ChargeCode.startsWith("1")) {
                DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, clsFeltSalesInvoice.getCreditDays(PartyCode, "210010"), "yyyy-MM-dd");
            } else if (ChargeCode.startsWith("4")) {
                DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, clsFeltSalesInvoice.getCreditDays(PartyCode, "210010"), "yyyy-MM-dd");
            } else if (ChargeCode.startsWith("7")) {
                DueDate = EITLERPGLOBAL.addDaysToDate(InvoiceDate, 45, "yyyy-MM-dd");
            } else if (ChargeCode.startsWith("9")) {
                DueDate = InvoiceDate;
            }
        } catch (Exception e) {
            return DueDate;
        }
        return DueDate;
    }
}
