/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.Reports;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.PieceRegister.clsIncharge;
import EITLERP.FeltSales.common.MultiLineTableHeaderRenderer;
import EITLERP.JTextFieldHint;
import EITLERP.LOV;
import EITLERP.data;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author root
 */
public class frmFeltPotentialAnalysisData extends javax.swing.JApplet {

    private EITLTableModel DataModel = new EITLTableModel();
    public EITLERP.FeltSales.Reports.clsExcelExporter ExpToExcel = new EITLERP.FeltSales.Reports.clsExcelExporter();
    private EITLComboModel cmbInchargeModel = new EITLComboModel();

    /**
     * Initializes the applet frmFeltPotentialAnalysisData
     */
    @Override
    public void init() {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmFeltPotentialAnalysisData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmFeltPotentialAnalysisData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmFeltPotentialAnalysisData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmFeltPotentialAnalysisData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>

        /* Create and display the applet */
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        
        initComponents();
        file_ETE.setVisible(false);
        btnSave.setEnabled(false);
        btnUpdateVal.setEnabled(false);
        lblTitle.setForeground(Color.WHITE);
        InchargeCombo();
        ShowList();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnUpdateVal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbIncharge = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        btnExportToExcel = new javax.swing.JButton();
        file_ETE = new javax.swing.JFileChooser();

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Felt Potential Analysis");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdateVal.setText("UPDATE VAL");
        btnUpdateVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateValActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Table);

        jLabel1.setText("Incharge : ");

        cmbIncharge.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbIncharge.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInchargeItemStateChanged(evt);
            }
        });

        jLabel2.setText("Party : ");

        txtPartyCode = new JTextFieldHint(new JTextField(),"Press F1");
        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        btnExportToExcel.setText("Export To Excel");
        btnExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPartyCode, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnExportToExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnUpdateVal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1051, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(650, Short.MAX_VALUE)
                    .addComponent(file_ETE, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(286, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnUpdateVal)
                        .addComponent(cmbIncharge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExportToExcel)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPartyCode, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(54, Short.MAX_VALUE)
                    .addComponent(file_ETE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < Table.getRowCount(); i++) {
            String partyCode = (String) Table.getValueAt(i, 1);
            String upnNo = (String) Table.getValueAt(i, 5);
            String productGroup = (String) Table.getValueAt(i, 10);
            double pressExpQty = 0;
            if (EITLERPGLOBAL.IsNumber(Table.getValueAt(i, 21).toString())) {
                pressExpQty = Double.parseDouble((String) Table.getValueAt(i, 21));
            } else {
                pressExpQty = 0;
            }
            double hdsExpQty = 0;
            if (EITLERPGLOBAL.IsNumber(Table.getValueAt(i, 32).toString())) {
                hdsExpQty = Double.parseDouble((String) Table.getValueAt(i, 32));
            } else {
                hdsExpQty = 0;
            }
            double sdfExpQty = 0;
            if (EITLERPGLOBAL.IsNumber(Table.getValueAt(i, 43).toString())) {
                sdfExpQty = Double.parseDouble((String) Table.getValueAt(i, 43));
            } else {
                sdfExpQty = 0;
            }
//            double allExpQty = 0;
//            if (EITLERPGLOBAL.IsNumber(Table.getValueAt(i, 49).toString())) {
//                allExpQty = Double.parseDouble((String) Table.getValueAt(i, 49));
//            } else {
//                allExpQty = 0;
//            }

            if (!productGroup.equals("HDS") || !productGroup.equals("SDF")) {
                data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA SET PRESS_ASP_EXP_SHARE_QTY=" + pressExpQty + " "
                        + "WHERE PARTY_CODE='" + partyCode + "' AND UPN_NO='" + upnNo + "' ");
            }
            if (productGroup.equals("HDS")) {
                data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA SET HDS_ASP_EXP_SHARE_QTY=" + hdsExpQty + " "
                        + "WHERE PARTY_CODE='" + partyCode + "' AND UPN_NO='" + upnNo + "' ");
            }
            if (productGroup.equals("SDF")) {
                data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA SET SDF_ASP_EXP_SHARE_QTY=" + sdfExpQty + " "
                        + "WHERE PARTY_CODE='" + partyCode + "' AND UPN_NO='" + upnNo + "' ");
            }
//            if (productGroup.equals("")) {
//                data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA SET TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY=" + allExpQty + " "
//                        + "WHERE PARTY_CODE='" + partyCode + "' AND UPN_NO='" + upnNo + "' ");
//            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateValActionPerformed
        // TODO add your handling code here:
        data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
                + "SET PRESS_ASP_EXP_SHARE_VAL = COALESCE(ROUND(PRESS_CALC_WEIGHT * PRESS_ASP_EXP_SHARE_QTY * PRESS_UNIT_RATE, 2), 0) "
                + "WHERE FPA_YEAR = 2021 AND FPA_MONTH = 8 AND PRODUCT_GROUP NOT IN ('HDS','SDF','') ");

        data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
                + "SET HDS_ASP_EXP_SHARE_VAL = COALESCE(ROUND((HDS_CALC_SQMTR * HDS_ASP_EXP_SHARE_QTY * HDS_UNIT_RATE) + (((WIDTH * HDS_ASP_EXP_SHARE_QTY) * 4899) - ((WIDTH * HDS_ASP_EXP_SHARE_QTY) * (4899 * FELT_SEAM_CHARGE) / 100)), 2), 0) "
                + "WHERE FPA_YEAR = 2021 AND FPA_MONTH = 8 AND PRODUCT_GROUP IN ('HDS') ");

        data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
                + "SET SDF_ASP_EXP_SHARE_VAL = COALESCE(ROUND(SDF_CALC_SQMTR * SDF_ASP_EXP_SHARE_QTY * SDF_UNIT_RATE, 2), 0) "
                + "WHERE FPA_YEAR = 2021 AND FPA_MONTH = 8 AND PRODUCT_GROUP IN ('SDF') ");
        
//        data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA A, (SELECT FPA_YEAR,FPA_MONTH,PARTY_CODE,UPN_NO, "
//                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_QTY,0)),2) AS T_PRESS_ASP_EXP_SHARE_QTY, "
//                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_VAL,0)),2) AS T_PRESS_ASP_EXP_SHARE_VAL, "
//                + "ROUND(SUM(COALESCE(HDS_ASP_EXP_SHARE_QTY,0)),2) AS T_HDS_ASP_EXP_SHARE_QTY, "
//                + "ROUND(SUM(COALESCE(HDS_ASP_EXP_SHARE_VAL,0)),2) AS T_HDS_ASP_EXP_SHARE_VAL, "
//                + "ROUND(SUM(COALESCE(SDF_ASP_EXP_SHARE_QTY,0)),2) AS T_SDF_ASP_EXP_SHARE_QTY, "
//                + "ROUND(SUM(COALESCE(SDF_ASP_EXP_SHARE_VAL,0)),2) AS T_SDF_ASP_EXP_SHARE_VAL "
//                + "FROM PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
//                + "WHERE FPA_YEAR = 2021 AND FPA_MONTH = 8 AND PRODUCT_GROUP NOT IN ('') "
//                + "GROUP BY FPA_YEAR, FPA_MONTH, PARTY_CODE) AS B "
//                + "SET A.PRESS_ASP_EXP_SHARE_QTY = ROUND(COALESCE(B.T_PRESS_ASP_EXP_SHARE_QTY,0),2), "
//                + "A.PRESS_ASP_EXP_SHARE_VAL = ROUND(COALESCE(B.T_PRESS_ASP_EXP_SHARE_VAL,0),2), "
//                + "A.HDS_ASP_EXP_SHARE_QTY = ROUND(COALESCE(B.T_HDS_ASP_EXP_SHARE_QTY,0),2), "
//                + "A.HDS_ASP_EXP_SHARE_VAL = ROUND(COALESCE(B.T_HDS_ASP_EXP_SHARE_VAL,0),2), "
//                + "A.SDF_ASP_EXP_SHARE_QTY = ROUND(COALESCE(B.T_SDF_ASP_EXP_SHARE_QTY,0),2), "
//                + "A.SDF_ASP_EXP_SHARE_VAL = ROUND(COALESCE(B.T_SDF_ASP_EXP_SHARE_VAL,0),2) "
//                + "WHERE A.FPA_YEAR=B.FPA_YEAR AND A.FPA_MONTH=B.FPA_MONTH AND A.PARTY_CODE=B.PARTY_CODE "
//                + "AND A.FPA_YEAR = 2021 AND A.FPA_MONTH = 8 AND A.PRODUCT_GROUP IN ('') ");

//        data.Execute("UPDATE PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA A, (SELECT FPA_YEAR,FPA_MONTH,PARTY_CODE,UPN_NO, "
//                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_QTY,0)+COALESCE(HDS_ASP_EXP_SHARE_QTY,0)+COALESCE(SDF_ASP_EXP_SHARE_QTY,0)),2) AS T_TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY, "
//                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_VAL,0)+COALESCE(HDS_ASP_EXP_SHARE_VAL,0)+COALESCE(SDF_ASP_EXP_SHARE_VAL,0)),2) AS T_TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL "
//                + "FROM PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
//                + "WHERE FPA_YEAR = 2021 AND FPA_MONTH = 8 AND PRODUCT_GROUP IN ('') "
//                + "GROUP BY FPA_YEAR, FPA_MONTH, PARTY_CODE) AS B "
//                + "SET A.TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY = ROUND(COALESCE(B.T_TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY,0),2), "
//                + "TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL = ROUND(COALESCE(B.T_TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL,0),2) "
//                + "WHERE A.FPA_YEAR=B.FPA_YEAR AND A.FPA_MONTH=B.FPA_MONTH AND A.PARTY_CODE=B.PARTY_CODE "
//                + "AND A.FPA_YEAR = 2021 AND A.FPA_MONTH = 8 AND A.PRODUCT_GROUP IN ('') ");

        ShowList();
    }//GEN-LAST:event_btnUpdateValActionPerformed

    private void btnExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToExcelActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file_ETE.setVisible(true);
            int returnVal = file_ETE.showSaveDialog(this);
            if (returnVal == file_ETE.APPROVE_OPTION) {
                file = file_ETE.getSelectedFile();
            }
            file_ETE.setVisible(false);

            ExpToExcel.fillData(Table, new File(file_ETE.getSelectedFile().toString() + ".xls"), "Sheet1");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExportToExcelActionPerformed

    private void cmbInchargeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInchargeItemStateChanged
        // TODO add your handling code here:
        ShowList();
    }//GEN-LAST:event_cmbInchargeItemStateChanged

    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        if (!txtPartyCode.getText().trim().equals("")) {
            ShowList();
            btnSave.setEnabled(true);
            btnUpdateVal.setEnabled(true);
        } else {
            btnSave.setEnabled(false);
            btnUpdateVal.setEnabled(false);
        }
    }//GEN-LAST:event_txtPartyCodeFocusLost

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            String cndtn = "";
            if (!cmbIncharge.getSelectedItem().equals("ALL")) {
                cndtn = " AND INCHARGE_NAME='"+cmbIncharge.getSelectedItem().toString().trim()+"' ";
            }
            LOV aList = new LOV();
            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,PARTY_STATUS,INCHARGE_NAME FROM PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA WHERE FPA_YEAR=2021 AND FPA_MONTH=8 "+cndtn+" GROUP BY PARTY_CODE ORDER BY PARTY_CODE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton btnExportToExcel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdateVal;
    private javax.swing.JComboBox cmbIncharge;
    private javax.swing.JFileChooser file_ETE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtPartyCode;
    // End of variables declaration//GEN-END:variables

    private void InchargeCombo() {

        HashMap List = new HashMap();
        clsIncharge ObjIncharge;

        cmbIncharge.setModel(cmbInchargeModel);
        cmbInchargeModel.removeAllElements();  //Clearing previous contents

        List = clsIncharge.getIncgargeList("");

        for (int i = 1; i <= List.size(); i++) {
            ObjIncharge = (clsIncharge) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Text = (String) ObjIncharge.getAttribute("INCHARGE_NAME").getObj();
            aData.Code = (long) ObjIncharge.getAttribute("INCHARGE_CD").getVal();
            cmbInchargeModel.addElement(aData);
        }

    }

    private void ShowList() {
        String deptCnd = "";
        String cndtn = "";
        if (!cmbIncharge.getSelectedItem().equals("ALL")) {
            cndtn += " AND INCHARGE_NAME='" + cmbIncharge.getSelectedItem().toString().trim() + "' ";
        }
        if (!txtPartyCode.getText().trim().equals("")) {
            cndtn += " AND PARTY_CODE='" + txtPartyCode.getText().toString().trim() + "' ";
        }
        String sql;
        sql = "SELECT '' AS 'Sr No', PARTY_CODE AS 'Part Code', PARTY_NAME AS 'Party Name', PARTY_STATUS AS 'Party Status', INCHARGE_NAME AS 'Incharge', UPN_NO AS 'UPN No', MACHINE_NO AS 'PM', POSITION_DESC AS 'Position', MACHINE_RUN_DAYS AS 'M/c Run Days', "
                + "AVG_LIFE_DAYS AS 'Average Life (Days)', PRODUCT_GROUP AS 'Product', LENGTH AS 'Length (Mtr)', WIDTH AS 'Width (Mtr)', GSM AS 'GSM', PRESS_CALC_WEIGHT AS 'Press Calculated Wt. (Kgs)', PRESS_POTENTIAL_QTY AS 'Press Full Potential in Qty(Nos.)', PRESS_UNIT_RATE AS 'Press Unit Rate', "
                + "PRESS_POTENTIAL_VAL AS 'Press Full Potential in Val (Rs.)', PRESS_SHARE_QTY_PRE_FINYR AS 'Press Present SDML Share in Qty (Nos.)', PRESS_SHARE_PER AS 'Press SDML Share (%)', PRESS_SHARE_VAL AS 'Press SDML Share in Val (Rs.)', PRESS_ASP_EXP_SHARE_QTY AS 'Press Aspirational Expected Share in Qty. (Nos.)', PRESS_ASP_EXP_SHARE_VAL AS 'Press Aspirational Expected Share in Val (Rs.)', "
                + "PRESS_ASP_CURR_PROJ_QTY AS 'Press Current Projection in Qty (Nos)', PRESS_ASP_CURR_PROJ_VAL AS 'Press Current Projection in Val (Rs)', HDS_CALC_SQMTR AS 'HDS SQM', HDS_POTENTIAL_QTY AS 'HDS Full Potential in Qty (Nos.)', HDS_UNIT_RATE AS 'HDS Unit Rate', HDS_POTENTIAL_VAL AS ' HDS Full Potential in Val (Rs.)', HDS_SHARE_QTY_PRE_FINYR AS 'HDS Present SDML Share in Qty (Nos.)', "
                + "HDS_SHARE_PER AS 'HDS SDML Share (%)', HDS_SHARE_VAL AS 'HDS SDML Share in Val (Rs.)', HDS_ASP_EXP_SHARE_QTY AS 'HDS Aspirational Expected Share in Qty. (Nos.)', HDS_ASP_EXP_SHARE_VAL AS 'HDS Aspirational Expected Share in Val (Rs.)', HDS_ASP_CURR_PROJ_QTY AS 'HDS Current Projection in Qty (Nos)', HDS_ASP_CURR_PROJ_VAL AS 'HDS Current Projection in Val (Rs)', SDF_CALC_SQMTR AS 'SDF SQM', "
                + "SDF_POTENTIAL_QTY AS 'SDF Full Potential in Qty (Nos.)', SDF_UNIT_RATE AS 'SDF Unit Rate', SDF_POTENTIAL_VAL AS 'SDF Full Potential in Val (Rs.)', SDF_SHARE_QTY_PRE_FINYR AS 'SDF Present SDML Share in Qty (Nos.)', SDF_SHARE_PER AS 'SDF SDML Share (%)', SDF_SHARE_VAL AS 'SDF SDML Share in Val (Rs.)', SDF_ASP_EXP_SHARE_QTY AS 'SDF Aspirational Expected Share in Qty. (Nos.)', "
                + "SDF_ASP_EXP_SHARE_VAL AS 'SDF Aspirational Expected Share in Val (Rs.)', SDF_ASP_CURR_PROJ_QTY AS 'SDF Current Projection in Qty (Nos)', SDF_ASP_CURR_PROJ_VAL AS 'SDF Current Projection in Val (Rs)', TOTAL_ALL_GRP_POTENTIAL_VAL AS 'All Group Total Full Potential in  Val (Rs.)', TOTAL_ALL_GRP_SHARE_VAL AS 'All Group SDML Share in Val (Rs.)', TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY AS 'All Group Aspirational Expected Share in Qty. (Nos.)', "
                + "TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL AS 'All Group Aspirational Expected Share in Val (Rs.)', TOTAL_ALL_GRP_ASP_CURR_PROJ_QTY AS 'All Group Current Projection in Qty (Nos)', TOTAL_ALL_GRP_ASP_CURR_PROJ_VAL AS 'All Group Current Projection in Val (Rs)' FROM ("
                + ""
                + "SELECT PARTY_CODE, PARTY_NAME, PARTY_STATUS, INCHARGE_NAME, UPN_NO, MACHINE_NO, POSITION_DESC, MACHINE_RUN_DAYS, "
                + "AVG_LIFE_DAYS, PRODUCT_GROUP, LENGTH, WIDTH, GSM, PRESS_CALC_WEIGHT, PRESS_POTENTIAL_QTY, PRESS_UNIT_RATE, "
                + "PRESS_POTENTIAL_VAL, PRESS_SHARE_QTY_PRE_FINYR, PRESS_SHARE_PER, PRESS_SHARE_VAL, PRESS_ASP_EXP_SHARE_QTY, PRESS_ASP_EXP_SHARE_VAL, "
                + "PRESS_ASP_CURR_PROJ_QTY, PRESS_ASP_CURR_PROJ_VAL, HDS_CALC_SQMTR, HDS_POTENTIAL_QTY, HDS_UNIT_RATE, HDS_POTENTIAL_VAL, HDS_SHARE_QTY_PRE_FINYR, "
                + "HDS_SHARE_PER, HDS_SHARE_VAL, HDS_ASP_EXP_SHARE_QTY, HDS_ASP_EXP_SHARE_VAL, HDS_ASP_CURR_PROJ_QTY, HDS_ASP_CURR_PROJ_VAL, SDF_CALC_SQMTR, "
                + "SDF_POTENTIAL_QTY, SDF_UNIT_RATE, SDF_POTENTIAL_VAL, SDF_SHARE_QTY_PRE_FINYR, SDF_SHARE_PER, SDF_SHARE_VAL, SDF_ASP_EXP_SHARE_QTY, "
                + "SDF_ASP_EXP_SHARE_VAL, SDF_ASP_CURR_PROJ_QTY, SDF_ASP_CURR_PROJ_VAL, TOTAL_ALL_GRP_POTENTIAL_VAL, TOTAL_ALL_GRP_SHARE_VAL, TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY, "
                + "TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL, TOTAL_ALL_GRP_ASP_CURR_PROJ_QTY, TOTAL_ALL_GRP_ASP_CURR_PROJ_VAL "
                + "FROM PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
                + "WHERE FPA_YEAR=2021 AND FPA_MONTH=8 "
                + cndtn 
                + " "
                + "UNION ALL "
                + "SELECT PARTY_CODE, PARTY_NAME, PARTY_STATUS, INCHARGE_NAME, 'Z', '', 'Party\\'s Total Consumption & SDML\\'s Share', '', "
                + "'', '', '', '', '', '', ROUND(SUM(COALESCE(PRESS_POTENTIAL_QTY,0)),2), '', "
                + "ROUND(SUM(COALESCE(PRESS_POTENTIAL_VAL,0)),2), ROUND(SUM(COALESCE(PRESS_SHARE_QTY_PRE_FINYR,0)),2), '', ROUND(SUM(COALESCE(PRESS_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_QTY,0)),2), ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_VAL,0)),2), "
                + "ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_QTY,0)),2), ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_VAL,0)),2), '', ROUND(SUM(COALESCE(HDS_POTENTIAL_QTY,0)),2), '', ROUND(SUM(COALESCE(HDS_POTENTIAL_VAL,0)),2), ROUND(SUM(COALESCE(HDS_SHARE_QTY_PRE_FINYR,0)),2), "
                + "'', ROUND(SUM(COALESCE(HDS_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(HDS_ASP_EXP_SHARE_QTY,0)),2), ROUND(SUM(COALESCE(HDS_ASP_EXP_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(HDS_ASP_CURR_PROJ_QTY,0)),2), ROUND(SUM(COALESCE(HDS_ASP_CURR_PROJ_VAL,0)),2), '', "
                + "ROUND(SUM(COALESCE(SDF_POTENTIAL_QTY,0)),2), '', ROUND(SUM(COALESCE(SDF_POTENTIAL_VAL,0)),2), ROUND(SUM(COALESCE(SDF_SHARE_QTY_PRE_FINYR,0)),2), '', ROUND(SUM(COALESCE(SDF_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(SDF_ASP_EXP_SHARE_QTY,0)),2), "
                + "ROUND(SUM(COALESCE(SDF_ASP_EXP_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(SDF_ASP_CURR_PROJ_QTY,0)),2), ROUND(SUM(COALESCE(SDF_ASP_CURR_PROJ_VAL,0)),2), ROUND(SUM(COALESCE(PRESS_POTENTIAL_VAL,0)+COALESCE(HDS_POTENTIAL_VAL,0)+COALESCE(SDF_POTENTIAL_VAL,0)),2) AS TOTAL_ALL_GRP_POTENTIAL_VAL, ROUND(SUM(COALESCE(PRESS_SHARE_VAL,0)+COALESCE(HDS_SHARE_VAL,0)+COALESCE(SDF_SHARE_VAL,0)),2) AS TOTAL_ALL_GRP_SHARE_VAL, "
                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_QTY,0)+COALESCE(HDS_ASP_EXP_SHARE_QTY,0)+COALESCE(SDF_ASP_EXP_SHARE_QTY,0)),2) AS TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY, "
                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_VAL,0)+COALESCE(HDS_ASP_EXP_SHARE_VAL,0)+COALESCE(SDF_ASP_EXP_SHARE_VAL,0)),2) AS TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL, "
                + "ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_QTY,0)+COALESCE(HDS_ASP_CURR_PROJ_QTY,0)+COALESCE(SDF_ASP_CURR_PROJ_QTY,0)),2) AS TOTAL_ALL_GRP_ASP_CURR_PROJ_QTY, ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_VAL,0)+COALESCE(HDS_ASP_CURR_PROJ_VAL,0)+COALESCE(SDF_ASP_CURR_PROJ_VAL,0)),2) AS TOTAL_ALL_GRP_ASP_CURR_PROJ_VAL "
                + "FROM PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
                + "WHERE FPA_YEAR=2021 AND FPA_MONTH=8 "
                + cndtn 
                + "GROUP BY FPA_YEAR, FPA_MONTH, PARTY_CODE "
                + ""
                + "UNION ALL "
                + "SELECT 999999 AS PARTY_CODE, 'GRAND TOTAL' AS PARTY_NAME, '', 'Z', '', '', 'Z', '', "
                + "'', '', '', '', '', '', ROUND(SUM(COALESCE(PRESS_POTENTIAL_QTY,0)),2), '', "
                + "ROUND(SUM(COALESCE(PRESS_POTENTIAL_VAL,0)),2), ROUND(SUM(COALESCE(PRESS_SHARE_QTY_PRE_FINYR,0)),2), '', ROUND(SUM(COALESCE(PRESS_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_QTY,0)),2), ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_VAL,0)),2), "
                + "ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_QTY,0)),2), ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_VAL,0)),2), '', ROUND(SUM(COALESCE(HDS_POTENTIAL_QTY,0)),2), '', ROUND(SUM(COALESCE(HDS_POTENTIAL_VAL,0)),2), ROUND(SUM(COALESCE(HDS_SHARE_QTY_PRE_FINYR,0)),2), "
                + "'', ROUND(SUM(COALESCE(HDS_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(HDS_ASP_EXP_SHARE_QTY,0)),2), ROUND(SUM(COALESCE(HDS_ASP_EXP_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(HDS_ASP_CURR_PROJ_QTY,0)),2), ROUND(SUM(COALESCE(HDS_ASP_CURR_PROJ_VAL,0)),2), '', "
                + "ROUND(SUM(COALESCE(SDF_POTENTIAL_QTY,0)),2), '', ROUND(SUM(COALESCE(SDF_POTENTIAL_VAL,0)),2), ROUND(SUM(COALESCE(SDF_SHARE_QTY_PRE_FINYR,0)),2), '', ROUND(SUM(COALESCE(SDF_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(SDF_ASP_EXP_SHARE_QTY,0)),2), "
                + "ROUND(SUM(COALESCE(SDF_ASP_EXP_SHARE_VAL,0)),2), ROUND(SUM(COALESCE(SDF_ASP_CURR_PROJ_QTY,0)),2), ROUND(SUM(COALESCE(SDF_ASP_CURR_PROJ_VAL,0)),2), ROUND(SUM(COALESCE(PRESS_POTENTIAL_VAL,0)+COALESCE(HDS_POTENTIAL_VAL,0)+COALESCE(SDF_POTENTIAL_VAL,0)),2) AS TOTAL_ALL_GRP_POTENTIAL_VAL, ROUND(SUM(COALESCE(PRESS_SHARE_VAL,0)+COALESCE(HDS_SHARE_VAL,0)+COALESCE(SDF_SHARE_VAL,0)),2) AS TOTAL_ALL_GRP_SHARE_VAL, "
                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_QTY,0)+COALESCE(HDS_ASP_EXP_SHARE_QTY,0)+COALESCE(SDF_ASP_EXP_SHARE_QTY,0)),2) AS TOTAL_ALL_GRP_ASP_EXP_SHARE_QTY, "
                + "ROUND(SUM(COALESCE(PRESS_ASP_EXP_SHARE_VAL,0)+COALESCE(HDS_ASP_EXP_SHARE_VAL,0)+COALESCE(SDF_ASP_EXP_SHARE_VAL,0)),2) AS TOTAL_ALL_GRP_ASP_EXP_SHARE_VAL, "
                + "ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_QTY,0)+COALESCE(HDS_ASP_CURR_PROJ_QTY,0)+COALESCE(SDF_ASP_CURR_PROJ_QTY,0)),2) AS TOTAL_ALL_GRP_ASP_CURR_PROJ_QTY, ROUND(SUM(COALESCE(PRESS_ASP_CURR_PROJ_VAL,0)+COALESCE(HDS_ASP_CURR_PROJ_VAL,0)+COALESCE(SDF_ASP_CURR_PROJ_VAL,0)),2) AS TOTAL_ALL_GRP_ASP_CURR_PROJ_VAL "
                + "FROM PRODUCTION.FELT_POTENTIAL_ANALYSIS_DATA "
                + "WHERE FPA_YEAR=2021 AND FPA_MONTH=8 "
                + cndtn 
                + "GROUP BY FPA_YEAR, FPA_MONTH "
                + ""
                + "ORDER BY INCHARGE_NAME,PARTY_CODE,UPN_NO "
                + ") AS FPAL "
//                + "ORDER BY INCHARGE_NAME,PARTY_CODE,UPN_NO ";
//                + "ORDER BY 'Incharge','Party Code','UPN No' "
                + "";
        
//        System.out.println("Data Query :" + sql);

        Table.setEnabled(true);
        ResultSet rs = data.getResult(sql);
        try {
            rs.first();
            if (rs.getRow() > 0) {
                DataModel = new EITLTableModel();
                Table.removeAll();

                Table.setModel(DataModel);
                Table.setAutoResizeMode(0);                
                ResultSetMetaData rsInfo = rs.getMetaData();

                //Format the table from the resultset meta data
                int i = 1;
                DataModel.ClearAllReadOnly();
                DataModel.SetReadOnly(0);
                
                for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                    DataModel.addColumn(rsInfo.getColumnName(i));
                    if (i == 21 || i == 32 || i == 43) {// || i == 49

                    } else {
                        DataModel.SetReadOnly(i);
                    }
                }
                int m = 1;
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(m);
                    for (int k = 1; k < (i - 1); k++) {
                        rowData[k] = rs.getString(k + 1);
                    }
                    DataModel.addRow(rowData);
                    rs.next();
                    m++;
                }
                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 60; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 150) {
                        width = 150;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
                Table.getTableHeader().setDefaultRenderer(new MultiLineTableHeaderRenderer());
                Table.getTableHeader().setPreferredSize(new Dimension(Table.getColumnModel().getTotalColumnWidth(), 100));
//                DataModel.TableReadOnly(true);
            } else {
                for (int i = DataModel.getRowCount() - 1; i >= 0; i--) {
                    DataModel.removeRow(i);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
