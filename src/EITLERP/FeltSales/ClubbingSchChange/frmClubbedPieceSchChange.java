/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FeltSales.ClubbingSchChange;

import EITLERP.ComboData;
import EITLERP.EITLComboModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.SalesFollowup.clsValidator;
import EITLERP.Loader;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.SelectFirstFree;
import EITLERP.clsAuthority;
import EITLERP.clsDepartment;
import EITLERP.clsDocFlow;
import EITLERP.clsFirstFree;
import EITLERP.clsHierarchy;
import EITLERP.clsUser;
import EITLERP.data;
import EITLERP.frmPendingApprovals;
import TReportWriter.TReportEngine;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author
 *
 */
public class frmClubbedPieceSchChange extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModelClubbingSchMonth;
    //cmbClubbingSchMonth
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelUPN;
    //public EITLTableModel DataModelReqMonthSpclReqDate;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private int FFNo = 0;
    private final int ModuleId = 874;
    private String DOC_NO = "";
    private clsClubbedPieceSchChange objDToF;
    private EITLComboModel cmbSendToModel;
    private TReportEngine objEngine = new TReportEngine();

    String seleval = "", seltyp = "", selqlt = "", selshd = "", selpiece = "", selext = "", selinv = "", selsz = "";
    private int mlstrc;

    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
    DateFormat dateForDB = new SimpleDateFormat("yyyy-MM-dd");

//    DecimalFormat f_single = new DecimalFormat("##.0");
//    DecimalFormat f_double = new DecimalFormat("##.00");
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    public frmPendingApprovals frmPA;

    /**
     * Initializes the applet FrmobjDToF
     */
    @Override
    public void init() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(dim.width, dim.height);
        initComponents();
        GenerateCombos();
        FormatGrid();
        //GenerateComboClubbing();
        GenerateFromCombo();
        GenerateHierarchyCombo();
        SetupApproval();
        SetMenuForRights();
        DefaultSettings();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        //Cancel();
        try {
            MaskFormatter dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('_');
            dateMask.install(DFDate);

        } catch (ParseException ex) {
            System.out.println("Error on Mask : " + ex.getLocalizedMessage());
        }
        DFDate.setText(df.format(new Date()));

        objDToF = new clsClubbedPieceSchChange();
        boolean load = objDToF.LoadData();

        if (load) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while Loading Data. Error is " + objDToF.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        SetFields(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    public void DefaultSettings() {

        //String data = toString();
        Object[] rowData = new Object[15];
        rowData[0] = "1";
        DataModel.addRow(rowData);

        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        clearFields();
    }

    private void clearFields() {
        DFNo.setText("0");

        //JOptionPane.showMessageDialog(null, "Data Model size : "+DataModel.getRowCount());
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
        FormatGrid();

        FormatGridHS();

        for (int i = 0; i < DataModel.getRowCount(); i++) {
            DataModel.removeRow(i);
        }
        if (DataModel.getRowCount() > 0) {
            DataModel.removeRow(0);
        }

    }

//    private void GenerateComboClubbing() {
//    
//        cmbModelClubbingSchMonth = new EITLComboModel();
//        cmbMonthYear.removeAllItems();
//        cmbMonthYear.setModel(cmbModelClubbingSchMonth);
//        
//        
//        Date date = new Date();
//            int month = date.getMonth();
//            int year = date.getYear() + 1900;
//            String month_name = "";
//            //cmbClubbing.addElement("");
//            for (int i = 0; i < 12; i++) {
//                month = month + 1;
//
//                if (month >= 13) {
//                    month = 1;
//                    year = year + 1;
//                }
//
//                if (month == 1) {
//                    month_name = "Jan";
//                } else if (month == 2) {
//                    month_name = "Feb";
//                } else if (month == 3) {
//                    month_name = "Mar";
//                } else if (month == 4) {
//                    month_name = "Apr";
//                } else if (month == 5) {
//                    month_name = "May";
//                } else if (month == 6) {
//                    month_name = "Jun";
//                } else if (month == 7) {
//                    month_name = "Jul";
//                } else if (month == 8) {
//                    month_name = "Aug";
//                } else if (month == 9) {
//                    month_name = "Sep";
//                } else if (month == 10) {
//                    month_name = "Oct";
//                } else if (month == 11) {
//                    month_name = "Nov";
//                } else if (month == 12) {
//                    month_name = "Dec";
//                }
//                //cmbCurrSchMonthClubbing.addItem(month_name + " - " + year);
//                //cmbModelClubbingSchMonth.addElement(month_name + " - " + year);
//                addToMonthYearCombo(month_name + " - " + year);
//                //System.out.println(month_name + " - " + year);
//            }
//        
//    }
    private void addToMonthYearCombo(String MonthYear) {
        ComboData aData = new ComboData();
        aData.Text = MonthYear;
        aData.strCode = MonthYear;
        cmbModelClubbingSchMonth.addElement(aData);
    }
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {

            if (objDToF.getAttribute("APPROVED").getInt() == 1) {
                lblTitle.setBackground(Color.BLUE);
                lblTitle.setForeground(Color.WHITE);
            }

            if (objDToF.getAttribute("APPROVED").getInt() == 0) {
                lblTitle.setBackground(Color.GRAY);
                lblTitle.setForeground(Color.BLACK);
            }

            if (objDToF.getAttribute("CANCELED").getInt() == 1) {
                lblTitle.setBackground(Color.RED);
                lblTitle.setForeground(Color.BLACK);
            }
        } catch (Exception c) {

            c.printStackTrace();
        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleId)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //clsobjDToF.ChangeVoucherNo=false;
        clearFields();
        try {
            DFNo.setText(objDToF.getAttribute("DOC_NO").getString());
            lblTitle.setText("Piece Clubbing ReSchedule Change - " + objDToF.getAttribute("DOC_NO").getString());
            DFDate.setText(EITLERPGLOBAL.formatDate(objDToF.getAttribute("DOC_DATE").getString()));
            lblRevNo.setText(Integer.toString((int) objDToF.getAttribute("REVISION_NO").getVal()));
            //cmbMonthYear.setSelectedItem(objDToF.getAttribute("CURRENT_SCH_MONTH").getString());
            txtScheduleMonth.setText(objDToF.getAttribute("CURRENT_SCH_MONTH").getString());
            txtClubbingNo.setText(objDToF.getAttribute("CLUBBING_NO").getString());
            txtPartyCode.setText(objDToF.getAttribute("PARTY_CODE").getString());
            txtPartyName.setText(objDToF.getAttribute("PARTY_NAME").getString());
            txtRemark.setText(objDToF.getAttribute("REMARK").getString());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, objDToF.getAttribute("HIERARCHY_ID").getInt());

            FormatGrid();
            //Now Generate Table
            for (int i = 1; i <= objDToF.objDToFDetails.size(); i++) {
                clsClubbedPieceSchChangeDetails ObjItem = (clsClubbedPieceSchChangeDetails) objDToF.objDToFDetails.get(Integer.toString(i));

                Object[] rowData = new Object[1];
                DataModel.addRow(rowData);
                int NewRow = Table.getRowCount() - 1;
                DataModel.setValueByVariable("SR_NO", (NewRow + 1) + "", NewRow);
                
                DataModel.setValueByVariable("PIECE_NO", ObjItem.getAttribute("PIECE_NO").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_CODE", ObjItem.getAttribute("PARTY_CODE").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_NAME", ObjItem.getAttribute("PARTY_NAME").getString(), NewRow);
                DataModel.setValueByVariable("MACHINE_NO", ObjItem.getAttribute("MACHINE_NO").getString(), NewRow);
                DataModel.setValueByVariable("POSITION", ObjItem.getAttribute("POSITION").getString(), NewRow);
                DataModel.setValueByVariable("UPN", ObjItem.getAttribute("UPN").getString(), NewRow);
                DataModel.setValueByVariable("PIECE_STAGE", ObjItem.getAttribute("PIECE_STAGE").getString(), NewRow);     
                DataModel.setValueByVariable("CUR_PIECE_STAGE", ObjItem.getAttribute("CUR_PIECE_STAGE").getString(), NewRow);
                DataModel.setValueByVariable("REQUESTED_MONTH", ObjItem.getAttribute("REQUESTED_MONTH").getString(), NewRow);
                DataModel.setValueByVariable("OC_MONTH", ObjItem.getAttribute("OC_MONTH").getString(), NewRow);
                DataModel.setValueByVariable("CURR_SCH_MONTH", ObjItem.getAttribute("CURR_SCH_MONTH").getString(), NewRow);
                DataModel.setValueByVariable("PRODUCT_CODE", ObjItem.getAttribute("PRODUCT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("PRODUCT_CODE", ObjItem.getAttribute("PRODUCT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("BILL_PRODUCT_CODE", ObjItem.getAttribute("BILL_PRODUCT_CODE").getString(), NewRow);
                DataModel.setValueByVariable("PR_GROUP", ObjItem.getAttribute("PR_GROUP").getString(), NewRow);
                DataModel.setValueByVariable("STYLE", ObjItem.getAttribute("STYLE").getString(), NewRow);
                DataModel.setValueByVariable("BILL_STYLE", ObjItem.getAttribute("BILL_STYLE").getString(), NewRow);
                DataModel.setValueByVariable("LENGTH", ObjItem.getAttribute("LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("ACTUAL_LENGTH", ObjItem.getAttribute("ACTUAL_LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("BILL_LENGTH", ObjItem.getAttribute("BILL_LENGTH").getString(), NewRow);
                DataModel.setValueByVariable("WIDTH", ObjItem.getAttribute("WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("ACTUAL_WIDTH", ObjItem.getAttribute("ACTUAL_WIDTH").getString(), NewRow);
                DataModel.setValueByVariable("SQMTR", ObjItem.getAttribute("SQMTR").getString(), NewRow);
                DataModel.setValueByVariable("BILL_SQMTR", ObjItem.getAttribute("BILL_SQMTR").getString(), NewRow);
                DataModel.setValueByVariable("GSM", ObjItem.getAttribute("GSM").getString(), NewRow);
                DataModel.setValueByVariable("BILL_GSM", ObjItem.getAttribute("BILL_GSM").getString(), NewRow);
                DataModel.setValueByVariable("TENDER_GSM", ObjItem.getAttribute("TENDER_GSM").getString(), NewRow);
                DataModel.setValueByVariable("TH_WEIGHT", ObjItem.getAttribute("TH_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("TENDER_WEIGHT", ObjItem.getAttribute("TENDER_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("ACTUAL_WEIGHT", ObjItem.getAttribute("ACTUAL_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("BILL_WEIGHT", ObjItem.getAttribute("BILL_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("WEAVING_WEIGHT", ObjItem.getAttribute("WEAVING_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("NEEDLING_WEIGHT", ObjItem.getAttribute("NEEDLING_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("SEAM_WEIGHT", ObjItem.getAttribute("SEAM_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("SPLICE_WEIGHT", ObjItem.getAttribute("SPLICE_WEIGHT").getString(), NewRow);
                DataModel.setValueByVariable("WEAVING_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("WEAVING_DATE").getString()), NewRow);
                DataModel.setValueByVariable("MANDING_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("MANDING_DATE").getString()), NewRow);
                DataModel.setValueByVariable("NEEDLING_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("NEEDLING_DATE").getString()), NewRow);
                DataModel.setValueByVariable("INCHARGE", ObjItem.getAttribute("INCHARGE").getString(), NewRow);
                DataModel.setValueByVariable("PIECE_OBSOLETE", ObjItem.getAttribute("PIECE_OBSOLETE").getString(), NewRow);
                DataModel.setValueByVariable("OBSOLETE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("OBSOLETE_DATE").getString()), NewRow);
                DataModel.setValueByVariable("REQUESTED_MONTH_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("REQUESTED_MONTH_DATE").getString()), NewRow);
                DataModel.setValueByVariable("OC_MONTH_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("OC_MONTH_DATE").getString()), NewRow);
                DataModel.setValueByVariable("CURR_SCH_MONTH_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("CURR_SCH_MONTH_DATE").getString()), NewRow);
                DataModel.setValueByVariable("INVOICE_NO", ObjItem.getAttribute("INVOICE_NO").getString(), NewRow);
                DataModel.setValueByVariable("INVOICE_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("INVOICE_DATE").getString()), NewRow);
                DataModel.setValueByVariable("DATE_OF_COMMUNICATION", ObjItem.getAttribute("DATE_OF_COMMUNICATION").getString(), NewRow);
                DataModel.setValueByVariable("MODE_OF_COMMUNICATION", ObjItem.getAttribute("MODE_OF_COMMUNICATION").getString(), NewRow);
                DataModel.setValueByVariable("CONTACT_PERSON", ObjItem.getAttribute("CONTACT_PERSON").getString(), NewRow);
                DataModel.setValueByVariable("PARTY_JUSTIFICATION", ObjItem.getAttribute("PARTY_JUSTIFICATION").getString(), NewRow);
                DataModel.setValueByVariable("AREA_MANAGER_COMMENT", ObjItem.getAttribute("AREA_MANAGER_COMMENT").getString(), NewRow);
                DataModel.setValueByVariable("FINISHING_DATE", EITLERPGLOBAL.formatDate(ObjItem.getAttribute("FINISHING_DATE").getString()), NewRow);
                
            }

            //DoNotEvaluate=false;
            //UpdateTotals();
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = objDToF.getAttribute("DOC_NO").getString();
            List = clsFeltProductionApprovalFlow.getDocumentFlow(ModuleId, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];
                //JOptionPane.showMessageDialog(null, "USER ID : "+ObjFlow.getAttribute("USER_ID").getVal());
                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelApprovalStatus.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = objDToF.getHistoryList(EITLERPGLOBAL.gCompanyID + "", DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsClubbedPieceSchChange ObjHistory = (clsClubbedPieceSchChange) History.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(ObjHistory.getAttribute("MODIFIED_BY").getString()));
                rowData[2] = ObjHistory.getAttribute("MODIFIED_DATE").getString();

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjHistory.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjHistory.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
            
            //============================================================//
            //setSTATUS();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridA() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.setAutoResizeMode(TableApprovalStatus.AUTO_RESIZE_OFF);

    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7076, 70761)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7076, 70762)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7076, 70763)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7076, 70765)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            //cmdPreview.setEnabled(false);
            //cmdPrint.setEnabled(false);
        }
    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }
        //JOptionPane.showMessageDialog(null, "Approval Cmb : "+cmbHierarchy.getItemCount());
        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID));
            txtFromRemarks.setText("");
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "Hierarchy Id = "+SelHierarchyID);
        //GenerateFromCombo();
        //GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            //txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        if (clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            OpgReject.setEnabled(false);
        }
        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID)) {
            //JOptionPane.showMessageDialog(null, "Final Approver");
            OpgApprove.setEnabled(false);
        }
    }
    
    private void FormatGrid() {
        try {
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            DataModel.addColumn("SrNo"); //0 - Read Only
            DataModel.addColumn("PIECE_NO"); //1
            DataModel.addColumn("PARTY_CODE"); //1
            DataModel.addColumn("PARTY_NAME"); //1
            DataModel.addColumn("MACHINE_NO"); 
            DataModel.addColumn("POSITION"); 
            DataModel.addColumn("UPN"); 
            DataModel.addColumn("PIECE_STAGE");      
            DataModel.addColumn("CUR_PIECE_STAGE"); 
            DataModel.addColumn("REQUESTED_MONTH"); 
            DataModel.addColumn("OC_MONTH"); 
            DataModel.addColumn("CURR_SCH_MONTH"); 
            DataModel.addColumn("PRODUCT_CODE");
            DataModel.addColumn("PRODUCT_CODE"); 
            DataModel.addColumn("BILL_PRODUCT_CODE"); 
            DataModel.addColumn("PR_GROUP"); 
            DataModel.addColumn("STYLE"); 
            DataModel.addColumn("BILL_STYLE"); 
            DataModel.addColumn("LENGTH"); 
            DataModel.addColumn("ACTUAL_LENGTH");
            DataModel.addColumn("BILL_LENGTH"); 
            DataModel.addColumn("WIDTH"); 
            DataModel.addColumn("ACTUAL_WIDTH"); 
            DataModel.addColumn("SQMTR"); 
            DataModel.addColumn("BILL_SQMTR"); 
            DataModel.addColumn("GSM"); 
            DataModel.addColumn("BILL_GSM");
            DataModel.addColumn("TENDER_GSM"); 
            DataModel.addColumn("TH_WEIGHT"); 
            DataModel.addColumn("TENDER_WEIGHT"); 
            DataModel.addColumn("ACTUAL_WEIGHT");
            DataModel.addColumn("BILL_WEIGHT"); 
            DataModel.addColumn("WEAVING_WEIGHT"); 
            DataModel.addColumn("NEEDLING_WEIGHT"); 
            DataModel.addColumn("SEAM_WEIGHT");
            DataModel.addColumn("SPLICE_WEIGHT"); 
            DataModel.addColumn("WEAVING_DATE"); 
            DataModel.addColumn("MANDING_DATE");
            DataModel.addColumn("NEEDLING_DATE"); 
            DataModel.addColumn("INCHARGE"); 
            DataModel.addColumn("PIECE_OBSOLETE");
            DataModel.addColumn("OBSOLETE_DATE"); 
            DataModel.addColumn("REQUESTED_MONTH_DATE"); 
            DataModel.addColumn("OC_MONTH_DATE");
            DataModel.addColumn("CURR_SCH_MONTH_DATE");
            DataModel.addColumn("INVOICE_NO"); 
            DataModel.addColumn("INVOICE_DATE");
            DataModel.addColumn("DATE_OF_COMMUNICATION");
            DataModel.addColumn("MODE_OF_COMMUNICATION"); 
            DataModel.addColumn("CONTACT_PERSON"); 
            DataModel.addColumn("PARTY_JUSTIFICATION");
            DataModel.addColumn("AREA_MANAGER_COMMENT");
            DataModel.addColumn("FINISHING_DATE"); 
            
            DataModel.SetVariable(0,"SrNo"); //0 - Read Only
            DataModel.SetVariable(1,"PIECE_NO"); //1
            DataModel.SetVariable(2,"PARTY_CODE"); //1
            DataModel.SetVariable(3,"PARTY_NAME"); //1
            DataModel.SetVariable(4,"MACHINE_NO"); 
            DataModel.SetVariable(5,"POSITION"); 
            DataModel.SetVariable(6,"UPN"); 
            DataModel.SetVariable(7,"PIECE_STAGE");      
            DataModel.SetVariable(8,"CUR_PIECE_STAGE"); 
            DataModel.SetVariable(9,"REQUESTED_MONTH"); 
            DataModel.SetVariable(10,"OC_MONTH"); 
            DataModel.SetVariable(11,"CURR_SCH_MONTH"); 
            DataModel.SetVariable(12,"PRODUCT_CODE");
            DataModel.SetVariable(13,"PRODUCT_CODE"); 
            DataModel.SetVariable(14,"BILL_PRODUCT_CODE"); 
            DataModel.SetVariable(15,"PR_GROUP"); 
            DataModel.SetVariable(16,"STYLE"); 
            DataModel.SetVariable(17,"BILL_STYLE"); 
            DataModel.SetVariable(18,"LENGTH"); 
            DataModel.SetVariable(19,"ACTUAL_LENGTH");
            DataModel.SetVariable(20,"BILL_LENGTH"); 
            DataModel.SetVariable(21,"WIDTH"); 
            DataModel.SetVariable(22,"ACTUAL_WIDTH"); 
            DataModel.SetVariable(23,"SQMTR"); 
            DataModel.SetVariable(24,"BILL_SQMTR"); 
            DataModel.SetVariable(25,"GSM"); 
            DataModel.SetVariable(26,"BILL_GSM");
            DataModel.SetVariable(27,"TENDER_GSM"); 
            DataModel.SetVariable(28,"TH_WEIGHT"); 
            DataModel.SetVariable(29,"TENDER_WEIGHT"); 
            DataModel.SetVariable(30,"ACTUAL_WEIGHT");
            DataModel.SetVariable(31,"BILL_WEIGHT"); 
            DataModel.SetVariable(32,"WEAVING_WEIGHT"); 
            DataModel.SetVariable(33,"NEEDLING_WEIGHT"); 
            DataModel.SetVariable(34,"SEAM_WEIGHT");
            DataModel.SetVariable(35,"SPLICE_WEIGHT"); 
            DataModel.SetVariable(36,"WEAVING_DATE"); 
            DataModel.SetVariable(37,"MANDING_DATE");
            DataModel.SetVariable(38,"NEEDLING_DATE"); 
            DataModel.SetVariable(39,"INCHARGE"); 
            DataModel.SetVariable(40,"PIECE_OBSOLETE");
            DataModel.SetVariable(41,"OBSOLETE_DATE"); 
            DataModel.SetVariable(42,"REQUESTED_MONTH_DATE"); 
            DataModel.SetVariable(43,"OC_MONTH_DATE");
            DataModel.SetVariable(44,"CURR_SCH_MONTH_DATE");
            DataModel.SetVariable(45,"INVOICE_NO"); 
            DataModel.SetVariable(46,"INVOICE_DATE");
            DataModel.SetVariable(47,"DATE_OF_COMMUNICATION");
            DataModel.SetVariable(48,"MODE_OF_COMMUNICATION"); 
            DataModel.SetVariable(49,"CONTACT_PERSON"); 
            DataModel.SetVariable(50,"PARTY_JUSTIFICATION");
            DataModel.SetVariable(51,"AREA_MANAGER_COMMENT");
            DataModel.SetVariable(52,"FINISHING_DATE"); 
            
            
//            DataModel.SetVariable(0, "SR_NO"); //0 - Read Only
//            DataModel.SetVariable(1, "CLUBBING_NO"); //1
//            DataModel.SetVariable(2, "RE_SCH_MONTH"); //1
//            DataModel.SetVariable(3, "PIECES"); //1
//            DataModel.SetVariable(4, "PARTY_CODE"); //1
//            DataModel.SetVariable(5, "PARTY_NAME"); //1
//            DataModel.SetVariable(6, "UPDATE_RE_SCH_MONTH"); 
//            DataModel.SetVariable(7, "DATE_OF_COMMUNICATION"); 
//            DataModel.SetVariable(8, "OC_MONTH"); 
//            DataModel.SetVariable(9, "CURR_SCH_MONTH");
//            DataModel.SetVariable(10, "INCHARGE"); //7

            
            
            Table.getColumnModel().getColumn(0).setMinWidth(20);
            Table.getColumnModel().getColumn(1).setMinWidth(140);
            
            for(int i=0;i<52;i++)
            {
                Table.getColumnModel().getColumn(i).setMinWidth(100);
            }
            

//            TableColumn dateColumn = Table.getColumnModel().getColumn(DataModel.getColFromVariable("UPDATE_RE_SCH_MONTH"));
//
//            JComboBox monthbox = new JComboBox();
//            String month_name = "";
//            Date date = new Date();
//            int month = date.getMonth();
//            int year = date.getYear() + 1900;
//            monthbox.addItem("");
//            for (int i = 0; i < 12; i++) {
//                month = month + 1;
//
//                if (month >= 13) {
//                    month = 1;
//                    year = year + 1;
//                }
//
//                if (month == 1) {
//                    month_name = "Jan";
//                } else if (month == 2) {
//                    month_name = "Feb";
//                } else if (month == 3) {
//                    month_name = "Mar";
//                } else if (month == 4) {
//                    month_name = "Apr";
//                } else if (month == 5) {
//                    month_name = "May";
//                } else if (month == 6) {
//                    month_name = "Jun";
//                } else if (month == 7) {
//                    month_name = "Jul";
//                } else if (month == 8) {
//                    month_name = "Aug";
//                } else if (month == 9) {
//                    month_name = "Sep";
//                } else if (month == 10) {
//                    month_name = "Oct";
//                } else if (month == 11) {
//                    month_name = "Nov";
//                } else if (month == 12) {
//                    month_name = "Dec";
//                }
//                monthbox.addItem(month_name + " - " + year);
//            }
//
//            dateColumn.setCellEditor(new DefaultCellEditor(monthbox));

            
            

                for(int i=0;i<=52;i++)
                {
                    DataModel.SetReadOnly(i);
                }
         
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void FormatGridHS() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(20);
        tcm.getColumn(1).setPreferredWidth(120);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(80);
        tcm.getColumn(4).setPreferredWidth(80);
        tcm.getColumn(5).setPreferredWidth(100);
        TableUpdateHistory.setAutoResizeMode(TableUpdateHistory.AUTO_RESIZE_OFF);
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "")) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + (ModuleId));
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId);
            }
        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DOC_NO + "");
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableColumnModel tcm = TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(150);
        tcm.getColumn(5).setPreferredWidth(150);
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("FROM_IP");

//        TableColumnModel tcm = TableUpdateHistory.getColumnModel();
//        tcm.getColumn(0).setPreferredWidth(10);
//        tcm.getColumn(2).setPreferredWidth(50);
//        tcm.getColumn(3).setPreferredWidth(20);
//        tcm.getColumn(4).setPreferredWidth(80);
//        tcm.getColumn(5).setPreferredWidth(70);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        DFNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        DFDate = new javax.swing.JFormattedTextField();
        lblRevNo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        UPNTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblUPN = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtClubbingNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        txtPartyCode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();
        txtScheduleMonth = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        StatusPanel = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        Tab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel2.setText("Doc Date");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 80, 20);

        jLabel3.setText("Doc  No");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(320, 10, 80, 20);

        DFNo.setEditable(false);
        DFNo.setBackground(new java.awt.Color(254, 242, 230));
        DFNo.setText("PD000001");
        DFNo.setEnabled(false);
        jPanel1.add(DFNo);
        DFNo.setBounds(380, 10, 200, 20);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.getTableHeader().setReorderingAllowed(false);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableFocusLost(evt);
            }
        });
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                TableCaretPositionChanged(evt);
            }
        });
        Table.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                TableAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 90, 920, 350);

        DFDate.setEditable(false);
        jPanel1.add(DFDate);
        DFDate.setBounds(90, 10, 200, 20);

        lblRevNo.setText("...");
        jPanel1.add(lblRevNo);
        lblRevNo.setBounds(280, 10, 34, 30);

        UPNTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        UPNTable.setSelectionBackground(new java.awt.Color(208, 220, 234));
        UPNTable.setSelectionForeground(new java.awt.Color(231, 16, 16));
        UPNTable.getTableHeader().setReorderingAllowed(false);
        UPNTable.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                UPNTableAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        UPNTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UPNTableFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                UPNTableFocusLost(evt);
            }
        });
        UPNTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UPNTableMouseClicked(evt);
            }
        });
        UPNTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                UPNTableCaretPositionChanged(evt);
            }
        });
        UPNTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UPNTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                UPNTableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(UPNTable);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(940, 60, 350, 380);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Production/Stock Pieces of Selected UPN");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(940, 10, 350, 30);

        lblUPN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(lblUPN);
        lblUPN.setBounds(940, 30, 350, 30);
        jPanel1.add(jPanel4);
        jPanel4.setBounds(190, -30, 10, 10);

        jLabel4.setText("Clubbing No");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(590, 10, 100, 20);
        jPanel1.add(txtClubbingNo);
        txtClubbingNo.setBounds(680, 10, 160, 20);

        jLabel5.setText("Party Code");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 40, 90, 20);
        jPanel1.add(txtPartyName);
        txtPartyName.setBounds(180, 40, 290, 20);
        jPanel1.add(txtPartyCode);
        txtPartyCode.setBounds(90, 40, 90, 20);

        jLabel6.setText("Current Schedule Month");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(480, 40, 170, 20);

        jLabel7.setText("Remark");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(10, 70, 70, 20);
        jPanel1.add(txtRemark);
        txtRemark.setBounds(90, 67, 750, 20);
        jPanel1.add(txtScheduleMonth);
        txtScheduleMonth.setBounds(680, 40, 160, 20);

        Tab.addTab("Details", jPanel1);

        jPanel2.setLayout(null);

        Tab2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 20);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 37);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 20);

        txtFrom.setBackground(new java.awt.Color(246, 238, 238));
        txtFrom.setForeground(new java.awt.Color(11, 7, 7));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 37);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 20);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 37);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 20);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 24);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 20);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 37);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 20);

        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 37);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 30);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 30);

        jPanel2.add(Tab2);
        Tab2.setBounds(10, 0, 760, 460);

        Tab.addTab("Approval", jPanel2);

        jPanel3.setLayout(null);

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StatusPanel.setLayout(null);

        jLabel60.setText("Document Approval Status");
        StatusPanel.add(jLabel60);
        jLabel60.setBounds(12, 10, 242, 20);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        StatusPanel.add(jScrollPane2);
        jScrollPane2.setBounds(0, 40, 694, 120);

        jLabel19.setText("Document Update History");
        StatusPanel.add(jLabel19);
        jLabel19.setBounds(10, 170, 182, 20);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableUpdateHistory);

        StatusPanel.add(jScrollPane6);
        jScrollPane6.setBounds(10, 190, 540, 130);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdViewHistory);
        cmdViewHistory.setBounds(570, 170, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdNormalView);
        cmdNormalView.setBounds(570, 200, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        StatusPanel.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(570, 230, 132, 24);

        txtAuditRemarks.setEnabled(false);
        StatusPanel.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(570, 260, 129, 37);

        jButton4.setText("Next >>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton4);
        jButton4.setBounds(660, 290, 100, 30);

        jButton5.setText("<<Previous");
        jButton5.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StatusPanel.add(jButton5);
        jButton5.setBounds(560, 290, 100, 30);

        jPanel3.add(StatusPanel);
        StatusPanel.setBounds(10, 0, 790, 380);

        Tab.addTab("Status", jPanel3);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 940, 480);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 940, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("Piece Clubbing Schedule Change");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 940, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 560, 1310, 30);
        getContentPane().add(jPanel5);
        jPanel5.setBounds(210, 50, 10, 10);
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        DOC_NO = DFNo.getText();
        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);

        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {

                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    //JOptionPane.showMessageDialog(null, "Module Id :"+ModuleId+", DOC No : "+sorder_no+", User Id : "+ObjUser.getAttribute("USER_ID").getInt()+", New user Id "+SDMLERPGLOBAL.gNewUserID);
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(ModuleId, DOC_NO + "", ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                    // JOptionPane.showMessageDialog(null, "IncludeUser = "+IncludeUser);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if ((ObjUser.getAttribute("USER_ID").getInt()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(ModuleId, DOC_NO + "");
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();

    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        ReportShow();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void TabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabMouseClicked

      
       
    }//GEN-LAST:event_TabMouseClicked

    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        objDToF.HistoryView = false;
        objDToF.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        String DocNo = DFNo.getText();
        objDToF.ShowHistory(DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained

    }//GEN-LAST:event_Tab2FocusGained

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed

    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed

    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained

    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained

    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained

    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged

    }//GEN-LAST:event_OpgHoldItemStateChanged

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained

    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged

    }//GEN-LAST:event_OpgRejectItemStateChanged

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained

    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged

    }//GEN-LAST:event_OpgFinalItemStateChanged

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged

    }//GEN-LAST:event_OpgApproveItemStateChanged

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked

        if (!OpgApprove.isEnabled()) {
            return;
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        //JOptionPane.showMessageDialog(null, "SelHierarchyId : "+SelHierarchyID);

        //cmbSendTo.setEnabled(true);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(ModuleId, DOC_NO + "")) {
                cmbSendTo.setEnabled(true);
                txtToRemarks.setEnabled(true);
                txtFromRemarks.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }
        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }

        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(true);
        OpgHold.setSelected(false);
        txtToRemarks.setEnabled(false);
        if (!OpgApprove.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgApprove.setEnabled(false);
            OpgApprove.setSelected(false);
        }

        if (clsHierarchy.IsCreator((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgApprove.setEnabled(true);
            OpgReject.setEnabled(false);
            OpgReject.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // if (evt.getKeyCode() == 112 || evt.getKeyCode() == 10) {
//        if (Table.getSelectedColumn() == 1) {
//            searchkey search = new searchkey();
//            search.SQL = "SELECT PR_PIECE_NO,PR_PARTY_CODE,PR_MACHINE_NO,PR_POSITION_NO,PR_UPN,PR_BILL_LENGTH,PR_BILL_WIDTH,PR_BILL_GSM,PR_BILL_WEIGHT,PR_BILL_STYLE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_STAGE='DIVERTED_FNSG_STOCK'";
//            search.ReturnCol = 1;
//            search.ShowReturnCol = true;
//            if (search.ShowRSLOV()) {
//                 
//            }
//        }

    }//GEN-LAST:event_TableKeyPressed

    private void TableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_TableAncestorMoved

    private void TableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TableCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCaretPositionChanged

    private void TableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusLost
        // TODO add your handling code here:if(Table.getSelectedColumn() == 1)
        lblStatus.setText("");
    }//GEN-LAST:event_TableFocusLost

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained
        // TODO add your handling code here:
//        if (Table.getSelectedColumn() == 1) {
//            lblStatus.setText("Press F1 for selection Machine No and Position No");
//        } else {
//            lblStatus.setText("");
//        }
    }//GEN-LAST:event_TableFocusGained

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.EDIT) {
            UPNDisplayData();
        }
        
//        if(evt.getClickCount()==2)
//        {
//            AppletFrame aFrame = new AppletFrame("Felt Piece Rescheduling Details");
//            aFrame.startAppletEx("EITLERP.FeltSales.SpilloverRescheduling_New.frmPieceReschedulingDetails_New", "Felt Piece Rescheduling Details");
//            frmPieceReschedulingDetails_New ObjItem = (frmPieceReschedulingDetails_New) aFrame.ObjApplet;
//
//            String PieceNo = DataModel.getValueByVariable("PIECE_NO", Table.getSelectedRow());
//            
//            ObjItem.requestFocus();
//            ObjItem.Doc_No=DFNo.getText();
//            ObjItem.FindByPieceNo(PieceNo);
//        }
    }//GEN-LAST:event_TableMouseClicked

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased


    }//GEN-LAST:event_TableKeyReleased

    private void UPNTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UPNTableMouseClicked
        // TODO add your handling code here:
//        if(evt.getClickCount()==2)
//        {
//            AppletFrame aFrame = new AppletFrame("Felt Req Month & Special Req Date");
//            aFrame.startAppletEx("EITLERP.FeltSales.SpilloverRescheduling.frmReqMonth_SPCLReqDate", "Felt Req Month & Special Req Date");
//            frmReqMonth_SPCLReqDate ObjItem = (frmReqMonth_SPCLReqDate) aFrame.ObjApplet;
//
//            String PieceNo = UPNTable.getValueAt(UPNTable.getSelectedRow(), 1).toString();
//            
//            ObjItem.requestFocus();
//            ObjItem.Doc_No=DFNo.getText();
//            ObjItem.FindByPieceNo(PieceNo);
//        }
    }//GEN-LAST:event_UPNTableMouseClicked

    private void UPNTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UPNTableFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_UPNTableFocusGained

    private void UPNTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UPNTableFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_UPNTableFocusLost

    private void UPNTableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_UPNTableCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_UPNTableCaretPositionChanged

    private void UPNTableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_UPNTableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_UPNTableAncestorMoved

    private void UPNTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UPNTableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_UPNTableKeyPressed

    private void UPNTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UPNTableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_UPNTableKeyReleased
    private void ReportShow() {

    }

    private void MoveFirst() {
        objDToF.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        objDToF.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        objDToF.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        objDToF.MoveLast();
        DisplayData();
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        clearFields();

        EditMode = EITLERPGLOBAL.ADD;
        DisableToolbar();
        SetFields(true);
        SetupApproval();
        lblTitle.setBackground(new Color(0, 102, 153));
        lblTitle.setForeground(Color.WHITE);

        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = ModuleId;
        aList.FirstFreeNo = 386;

        DFDate.setText(df.format(new Date()));
        FFNo = aList.FirstFreeNo;
        DFNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        lblTitle.setText("In Stock Spillover - " + DFNo.getText());

    }

//    private void AddPieces() {
//        try {
//
//            //DataModel.setValueByVariable("SR_NO", ObjItem.getAttribute("SR_NO").getString(), NewRow);
//            ResultSet rsTmp;
//            String strSQL = "";
//            strSQL = "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A "
//                    + " WHERE PR_PIECE_STAGE='DIVERTED_FNSG_STOCK' AND PR_PIECE_NO NOT IN (SELECT PIECE_NO FROM PRODUCTION.SPILLOVER_RESCHEDULING_HEADER H, "
//                    + "PRODUCTION.SPILLOVER_RESCHEDULING_DETAIL D "
//                    + "WHERE H.APPROVED=0 AND H.CANCELED=0 AND H.DOC_NO=D.DOC_NO)";
//            System.out.println("Query..." + strSQL);
//            rsTmp = data.getResult(strSQL);
//            rsTmp.first();
//            System.out.println("Row no." + rsTmp.getRow());
//            if (rsTmp.getRow() > 0) {
//                while (!rsTmp.isAfterLast()) {
//                    Object[] rowData = new Object[1];
//                    DataModel.addRow(rowData);
//                    int NewRow = Table.getRowCount() - 1;
//                    DataModel.setValueByVariable("SR_NO", Table.getRowCount() + "", NewRow);
//                    DataModel.setValueByVariable("SELECT", false, NewRow);
//                    DataModel.setValueByVariable("PIECE_NO", rsTmp.getString("PR_PIECE_NO"), NewRow);
//                    DataModel.setValueByVariable("PIECE_NO", rsTmp.getString("PR_PIECE_NO"), NewRow);
//                    DataModel.setValueByVariable("PARTY_CODE", rsTmp.getString("PR_PARTY_CODE"), NewRow);
//                    String PartyName = data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER where PARTY_CODE=" + rsTmp.getString("PR_PARTY_CODE"));
//                    DataModel.setValueByVariable("PARTY_NAME", PartyName, NewRow);
//                    DataModel.setValueByVariable("MACHINE_NO", rsTmp.getString("PR_MACHINE_NO"), NewRow);
//                    DataModel.setValueByVariable("POSITION", rsTmp.getString("PR_POSITION_NO"), NewRow);
//                    DataModel.setValueByVariable("UPN", rsTmp.getString("PR_UPN"), NewRow);
//                    DataModel.setValueByVariable("REQUESTED_MONTH", rsTmp.getString("PR_REQUESTED_MONTH"), NewRow);
//                    DataModel.setValueByVariable("OC_MONTH", rsTmp.getString("PR_OC_MONTHYEAR"), NewRow);
//                    DataModel.setValueByVariable("CURR_SCH_MONTH", rsTmp.getString("PR_CURRENT_SCH_MONTH"), NewRow);
//                    DataModel.setValueByVariable("PRODUCT_CODE", rsTmp.getString("PR_PRODUCT_CODE"), NewRow);
//                    DataModel.setValueByVariable("BILL_PRODUCT_CODE", rsTmp.getString("PR_BILL_PRODUCT_CODE"), NewRow);
//                    DataModel.setValueByVariable("PR_GROUP", rsTmp.getString("PR_GROUP"), NewRow);
//                    DataModel.setValueByVariable("STYLE", rsTmp.getString("PR_STYLE"), NewRow);
//                    DataModel.setValueByVariable("BILL_STYLE", rsTmp.getString("PR_BILL_STYLE"), NewRow);
//                    DataModel.setValueByVariable("LENGTH", rsTmp.getString("PR_LENGTH"), NewRow);
//                    DataModel.setValueByVariable("ACTUAL_LENGTH", rsTmp.getString("PR_ACTUAL_LENGTH"), NewRow);
//                    DataModel.setValueByVariable("BILL_LENGTH", rsTmp.getString("PR_BILL_LENGTH"), NewRow);
//                    DataModel.setValueByVariable("WIDTH", rsTmp.getString("PR_WIDTH"), NewRow);
//                    DataModel.setValueByVariable("ACTUAL_WIDTH", rsTmp.getString("PR_ACTUAL_WIDTH"), NewRow);
//                    DataModel.setValueByVariable("SQMTR", rsTmp.getString("PR_SQMTR"), NewRow);
//                    DataModel.setValueByVariable("BILL_SQMTR", rsTmp.getString("PR_BILL_SQMTR"), NewRow);
//                    DataModel.setValueByVariable("GSM", rsTmp.getString("PR_GSM"), NewRow);
//                    DataModel.setValueByVariable("BILL_GSM", rsTmp.getString("PR_BILL_GSM"), NewRow);
//                    DataModel.setValueByVariable("TENDER_GSM", rsTmp.getString("PR_TENDER_GSM"), NewRow);
//                    DataModel.setValueByVariable("TH_WEIGHT", rsTmp.getString("PR_THORITICAL_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("TENDER_WEIGHT", rsTmp.getString("PR_TENDER_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("ACTUAL_WEIGHT", rsTmp.getString("PR_ACTUAL_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("BILL_WEIGHT", rsTmp.getString("PR_BILL_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("WEAVING_WEIGHT", rsTmp.getString("PR_WEAVING_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("NEEDLING_WEIGHT", rsTmp.getString("PR_NEEDLING_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("SEAM_WEIGHT", rsTmp.getString("PR_SEAM_WEIGHT"), NewRow);
//                    DataModel.setValueByVariable("SPLICE_WEIGHT", rsTmp.getString("PR_SPLICE_WIEGHT"), NewRow);
//                    DataModel.setValueByVariable("WEAVING_DATE", rsTmp.getString("PR_WVG_DATE"), NewRow);
//                    DataModel.setValueByVariable("MANDING_DATE", rsTmp.getString("PR_MND_DATE"), NewRow);
//                    DataModel.setValueByVariable("NEEDLING_DATE", rsTmp.getString("PR_NDL_DATE"), NewRow);
//                    DataModel.setValueByVariable("INCHARGE", rsTmp.getString("PR_INCHARGE"), NewRow);
//                    DataModel.setValueByVariable("PIECE_STAGE", rsTmp.getString("PR_PIECE_STAGE"), NewRow);
//                    DataModel.setValueByVariable("PIECE_OBSOLETE", rsTmp.getString("PR_DELINK"), NewRow);
//                    DataModel.setValueByVariable("OBSOLETE_DATE", rsTmp.getString("PR_OBSOLETE_DATE"), NewRow);
//                    rsTmp.next();
//                }
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.FeltSales.ClubbingSchChange.frmFindClubbedPieceSchChange", true);
        frmFindClubbedPieceSchChange ObjFindobjDToF = (frmFindClubbedPieceSchChange) ObjLoader.getObj();

        if (ObjFindobjDToF.Cancelled == false) {
            if (!objDToF.Filter(ObjFindobjDToF.stringFindQuery)) {
                JOptionPane.showMessageDialog(this, "No records found.", "Find Piece Clubbing Schedule Change", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void FindEx(int pCompanyID, String AmendID) {
        objDToF.Filter(" DOC_NO='" + AmendID + "'");
        objDToF.MoveFirst();
        DisplayData();
    }

    // find rate update by doc no
    public void Find(String docNo) {
        objDToF.Filter(" DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        objDToF.Filter(" DOC_NO IN (SELECT DISTINCT S.DOC_NO FROM PRODUCTION.SPILLOVER_RESCHEDULING_HEADER S, PRODUCTION.FELT_PROD_DOC_DATA D WHERE S.DOC_NO=D.DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=" + ModuleId + " AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void Save() {

        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Data not correct");
            return;
        }
        String RescheduleMonth = txtScheduleMonth.getText();
        
        for (int i = 0; i <= Table.getRowCount() - 1; i++) {
            
            String PIECE_NO = DataModel.getValueByVariable("PIECE_NO", i);
            
            String Piece_OC_Month = data.getStringValueFromDB("SELECT PR_OC_MONTHYEAR FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='"+PIECE_NO+"'");
            
            if(!clsValidator.isCurrentSchMonthValid(RescheduleMonth, Piece_OC_Month))
            {
                JOptionPane.showMessageDialog(this, "Current Sch Month '"+RescheduleMonth+"' is not valid, Because OC Month '"+Piece_OC_Month+"' is not valid for PieceNo "+PIECE_NO);
                return;
            }
        }
        
        SetData();

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //objDToF.LoadData();
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (objDToF.Insert()) {
                SelectFirstFree aList = new SelectFirstFree();
                aList.ModuleID = ModuleId;
                aList.FirstFreeNo = 386;
                FFNo = aList.FirstFreeNo;
                clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
                EditMode = 0;

                if (OpgFinal.isSelected()) {

                }

                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + objDToF.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (objDToF.Update()) {
                if (OpgFinal.isSelected()) {

                    try{
                        
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                    
                    
                }
                EditMode = 0;
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + objDToF.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private String LastDayOfReqMonth(String Req_Month) {
        int Year = Integer.parseInt(Req_Month.substring(6));
        int Month = 0;
        if (Req_Month.contains("Jan")) {
            Month = 1;
        } else if (Req_Month.contains("Feb")) {
            Month = 2;
        } else if (Req_Month.contains("Mar")) {
            Month = 3;
        } else if (Req_Month.contains("Apr")) {
            Month = 4;
        } else if (Req_Month.contains("May")) {
            Month = 5;
        } else if (Req_Month.contains("Jun")) {
            Month = 6;
        } else if (Req_Month.contains("Jul")) {
            Month = 7;
        } else if (Req_Month.contains("Aug")) {
            Month = 8;
        } else if (Req_Month.contains("Sep")) {
            Month = 9;
        } else if (Req_Month.contains("Oct")) {
            Month = 10;
        } else if (Req_Month.contains("Nov")) {
            Month = 11;
        } else if (Req_Month.contains("Dec")) {
            Month = 12;
        }

        Calendar cal = new GregorianCalendar(Year, Month, 0);
        Date date = cal.getTime();
        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        //System.out.println("Date : " + sdf.format(date));
        return sdf.format(date);
    }
    private String getMonthName(int month) {
        if (month == 1) {
            return "Jan";
        } else if (month == 2) {
            return "Feb";
        } else if (month == 3) {
            return "Mar";
        } else if (month == 4) {
            return "Apr";
        } else if (month == 5) {
            return "May";
        } else if (month == 6) {
            return "Jun";
        } else if (month == 7) {
            return "Jul";
        } else if (month == 8) {
            return "Aug";
        } else if (month == 9) {
            return "Sep";
        } else if (month == 10) {
            return "Oct";
        } else if (month == 11) {
            return "Nov";
        } else if (month == 12) {
            return "Dec";
        } else {
            return "";
        }
    }
    private void Cancel() {

        EditMode = 0;
        DisplayData();
        EnableToolbar();
        SetMenuForRights();
        SetFields(false);

    }

    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void Edit() {

        String productionDocumentNo = (String) objDToF.getAttribute("DOC_NO").getObj();
        if (objDToF.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            DisableToolbar();

            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            SetupApproval();
            //ReasonResetReadonly();
            //cmbOrderReason.setEnabled(false);
//            if (clsFeltProductionApprovalFlow.IsCreator(ModuleId, productionDocumentNo)) {
            SetFields(true);

//            } else {
//                EnableApproval();
//                DataModel.SetReadOnly(1);
//            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
//        if (objDToF.CanDelete(DFNo.getText() + "", DFDate.getText(), EITLERPGLOBAL.gNewUserID)) {
//            DisplayData();
//        } else {
//            JOptionPane.showMessageDialog(this, objDToF.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
//        }
    }

    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=" + ModuleId + " ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(ModuleId, DFNo.getText() + "");
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        SetFields(true);
        //========== Setting Up Header Fields ================//
        String FieldName = "";
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

    }

    private void SetFields(boolean pStat) {
        DFDate.setEnabled(pStat);
        DFNo.setEnabled(pStat);

        txtScheduleMonth.setEnabled(false);
        txtClubbingNo.setEnabled(false);
        txtPartyCode.setEnabled(false);
        txtPartyName.setEnabled(false);
        txtRemark.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        //Table.setEnabled(pStat);
        //JOptionPane.showMessageDialog(null, "Dept Id :"+EITLERPGLOBAL.gUserDeptID);

        DataModel.ClearAllReadOnly();

        
        if (EditMode == EITLERPGLOBAL.EDIT) {
            DataModel.SetReadOnly(0);
            //DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            //DataModel.SetReadOnly(5);
            //DataModel.SetReadOnly(6);
            //DataModel.SetReadOnly(7);
            //DataModel.SetReadOnly(8);
            //DataModel.SetReadOnly(9);
            //DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);
            DataModel.SetReadOnly(17);
            DataModel.SetReadOnly(18);
            DataModel.SetReadOnly(19);
            DataModel.SetReadOnly(20);
            DataModel.SetReadOnly(21);
            DataModel.SetReadOnly(22);
            DataModel.SetReadOnly(23);
            DataModel.SetReadOnly(24);
            DataModel.SetReadOnly(25);
            DataModel.SetReadOnly(26);
            DataModel.SetReadOnly(27);
            DataModel.SetReadOnly(28);
            DataModel.SetReadOnly(29);
            DataModel.SetReadOnly(30);
            DataModel.SetReadOnly(31);
            DataModel.SetReadOnly(32);
            DataModel.SetReadOnly(33);
            DataModel.SetReadOnly(34);
            DataModel.SetReadOnly(35);
            DataModel.SetReadOnly(36);
            DataModel.SetReadOnly(37);
            DataModel.SetReadOnly(38);
            DataModel.SetReadOnly(39);
            DataModel.SetReadOnly(40);
        }
        else
        {
            for(int i=0;i<=40;i++)
            {
                DataModel.SetReadOnly(i);
            }
        }
        SetupApproval();
    }

    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetData() {

        objDToF.setAttribute("DOC_NO", DFNo.getText());
        objDToF.setAttribute("DOC_DATE", DFDate.getText());
        
        objDToF.setAttribute("CLUBBING_NO", txtClubbingNo.getText());
        objDToF.setAttribute("PARTY_CODE", txtPartyCode.getText());
        objDToF.setAttribute("PARTY_NAME", txtPartyName.getText());
        objDToF.setAttribute("CURRENT_SCH_MONTH", txtScheduleMonth.getText());
        objDToF.setAttribute("REMARK", txtRemark.getText());
        
        try {
            objDToF.objDToFDetails.clear();

            for (int i = 0; i <= Table.getRowCount() - 1; i++) {

                clsClubbedPieceSchChangeDetails objDetail = new clsClubbedPieceSchChangeDetails();
                objDetail.setAttribute("DOC_NO", DFNo.getText());
                objDetail.setAttribute("SR_NO", DataModel.getValueByVariable("SRNO", i));
                
                objDetail.setAttribute("PIECE_NO", DataModel.getValueByVariable("PIECE_NO", i)); 
                objDetail.setAttribute("PARTY_CODE", DataModel.getValueByVariable("PARTY_CODE", i)); 
                objDetail.setAttribute("PARTY_NAME", DataModel.getValueByVariable("PARTY_NAME", i)); 
                objDetail.setAttribute("MACHINE_NO", DataModel.getValueByVariable("MACHINE_NO", i)); 
                objDetail.setAttribute("POSITION", DataModel.getValueByVariable("POSITION", i)); 
                objDetail.setAttribute("UPN", DataModel.getValueByVariable("UPN", i)); 
                objDetail.setAttribute("PIECE_STAGE", DataModel.getValueByVariable("PIECE_STAGE", i));      
                objDetail.setAttribute("CUR_PIECE_STAGE", DataModel.getValueByVariable("CUR_PIECE_STAGE", i)); 
                objDetail.setAttribute("REQUESTED_MONTH", DataModel.getValueByVariable("REQUESTED_MONTH", i)); 
                objDetail.setAttribute("OC_MONTH", DataModel.getValueByVariable("OC_MONTH", i)); 
                objDetail.setAttribute("CURR_SCH_MONTH", DataModel.getValueByVariable("CURR_SCH_MONTH", i)); 
                objDetail.setAttribute("PRODUCT_CODE", DataModel.getValueByVariable("PRODUCT_CODE", i));
                objDetail.setAttribute("PRODUCT_CODE", DataModel.getValueByVariable("PRODUCT_CODE", i)); 
                objDetail.setAttribute("BILL_PRODUCT_CODE", DataModel.getValueByVariable("BILL_PRODUCT_CODE", i)); 
                objDetail.setAttribute("PR_GROUP", DataModel.getValueByVariable("PR_GROUP", i)); 
                objDetail.setAttribute("STYLE", DataModel.getValueByVariable("STYLE", i)); 
                objDetail.setAttribute("BILL_STYLE", DataModel.getValueByVariable("BILL_STYLE", i)); 
                objDetail.setAttribute("LENGTH", DataModel.getValueByVariable("LENGTH", i)); 
                objDetail.setAttribute("ACTUAL_LENGTH", DataModel.getValueByVariable("ACTUAL_LENGTH", i));
                objDetail.setAttribute("BILL_LENGTH", DataModel.getValueByVariable("BILL_LENGTH", i)); 
                objDetail.setAttribute("WIDTH", DataModel.getValueByVariable("WIDTH", i)); 
                objDetail.setAttribute("ACTUAL_WIDTH", DataModel.getValueByVariable("ACTUAL_WIDTH", i)); 
                objDetail.setAttribute("SQMTR", DataModel.getValueByVariable("SQMTR", i)); 
                objDetail.setAttribute("BILL_SQMTR", DataModel.getValueByVariable("BILL_SQMTR", i)); 
                objDetail.setAttribute("GSM", DataModel.getValueByVariable("GSM", i)); 
                objDetail.setAttribute("BILL_GSM", DataModel.getValueByVariable("BILL_GSM", i));
                objDetail.setAttribute("TENDER_GSM", DataModel.getValueByVariable("TENDER_GSM", i)); 
                objDetail.setAttribute("TH_WEIGHT", DataModel.getValueByVariable("TH_WEIGHT", i)); 
                objDetail.setAttribute("TENDER_WEIGHT", DataModel.getValueByVariable("TENDER_WEIGHT", i)); 
                objDetail.setAttribute("ACTUAL_WEIGHT", DataModel.getValueByVariable("ACTUAL_WEIGHT", i));
                objDetail.setAttribute("BILL_WEIGHT", DataModel.getValueByVariable("BILL_WEIGHT", i)); 
                objDetail.setAttribute("WEAVING_WEIGHT", DataModel.getValueByVariable("WEAVING_WEIGHT", i)); 
                objDetail.setAttribute("NEEDLING_WEIGHT", DataModel.getValueByVariable("NEEDLING_WEIGHT", i)); 
                objDetail.setAttribute("SEAM_WEIGHT", DataModel.getValueByVariable("SEAM_WEIGHT", i));
                objDetail.setAttribute("SPLICE_WEIGHT", DataModel.getValueByVariable("SPLICE_WEIGHT", i)); 
                objDetail.setAttribute("WEAVING_DATE", DataModel.getValueByVariable("WEAVING_DATE", i)); 
                objDetail.setAttribute("MANDING_DATE", DataModel.getValueByVariable("MANDING_DATE", i));
                objDetail.setAttribute("NEEDLING_DATE", DataModel.getValueByVariable("NEEDLING_DATE", i)); 
                objDetail.setAttribute("INCHARGE", DataModel.getValueByVariable("INCHARGE", i)); 
                objDetail.setAttribute("PIECE_OBSOLETE", DataModel.getValueByVariable("PIECE_OBSOLETE", i));
                objDetail.setAttribute("OBSOLETE_DATE", DataModel.getValueByVariable("OBSOLETE_DATE", i)); 
                objDetail.setAttribute("REQUESTED_MONTH_DATE", DataModel.getValueByVariable("REQUESTED_MONTH_DATE", i)); 
                objDetail.setAttribute("OC_MONTH_DATE", DataModel.getValueByVariable("OC_MONTH_DATE", i));
                objDetail.setAttribute("CURR_SCH_MONTH_DATE", DataModel.getValueByVariable("CURR_SCH_MONTH_DATE", i));
                objDetail.setAttribute("INVOICE_NO", DataModel.getValueByVariable("INVOICE_NO", i)); 
                objDetail.setAttribute("INVOICE_DATE", DataModel.getValueByVariable("INVOICE_DATE", i));
                objDetail.setAttribute("DATE_OF_COMMUNICATION", DataModel.getValueByVariable("DATE_OF_COMMUNICATION", i));
                objDetail.setAttribute("MODE_OF_COMMUNICATION", DataModel.getValueByVariable("MODE_OF_COMMUNICATION", i)); 
                objDetail.setAttribute("CONTACT_PERSON", DataModel.getValueByVariable("CONTACT_PERSON", i)); 
                objDetail.setAttribute("PARTY_JUSTIFICATION", DataModel.getValueByVariable("PARTY_JUSTIFICATION", i));
                objDetail.setAttribute("AREA_MANAGER_COMMENT", DataModel.getValueByVariable("AREA_MANAGER_COMMENT", i));
                objDetail.setAttribute("FINISHING_DATE", DataModel.getValueByVariable("FINISHING_DATE", i)); 
                
                if(EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("DATE_OF_COMMUNICATION", i)).equals(""))
                {
                    objDetail.setAttribute("DATE_OF_COMMUNICATION","0000-00-00");
                }
                else
                {
                    objDetail.setAttribute("DATE_OF_COMMUNICATION",EITLERPGLOBAL.formatDateDB(DataModel.getValueByVariable("DATE_OF_COMMUNICATION", i)));
                }
                
                

                objDToF.objDToFDetails.put(Integer.toString(objDToF.objDToFDetails.size() + 1), objDetail);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DOC_NO = DFNo.getText();
        objDToF.setAttribute("DOC_NO", DFNo.getText());
        objDToF.setAttribute("DOC_DATE", DFDate.getText());
        objDToF.setAttribute("MODULE_ID", ModuleId);
        objDToF.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);

        //----- Update Approval Specific Fields -----------//
        objDToF.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        objDToF.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        objDToF.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        objDToF.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            objDToF.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            objDToF.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            objDToF.setAttribute("APPROVAL_STATUS", "R");
            objDToF.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            objDToF.setAttribute("APPROVAL_STATUS", "H");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            objDToF.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            objDToF.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            objDToF.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            objDToF.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            objDToF.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
            objDToF.setAttribute("UPDATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField DFDate;
    private javax.swing.JTextField DFNo;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JTable UPNTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUPN;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtClubbingNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtRemark;
    private javax.swing.JTextField txtScheduleMonth;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void UPNDisplayData() {
        
        String sql = "";
        ResultSet rs;
        DataModelUPN = new EITLTableModel();
        UPNTable.removeAll();
        UPNTable.setModel(DataModelUPN);
        UPNTable.setAutoResizeMode(UPNTable.AUTO_RESIZE_OFF);
        try {
            String sUPN = DataModel.getValueByVariable("UPN", Table.getSelectedRow());
            lblUPN.setText(sUPN.trim());

            sql = "SELECT PR_CURRENT_SCH_MONTH AS 'Curr.Sch.Month',PR_PIECE_NO AS 'Piece No',PR_PIECE_STAGE AS 'Piece Stage',PR_REQUESTED_MONTH AS 'Req.Month',PR_OC_MONTHYEAR AS 'OC.Month' "
                    + "FROM (SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  WHERE PR_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5')  "
                    + "AND PR_PIECE_STAGE IN ('BOOKING','PLANNING','WEAVING','SPLICING','MENDING','NEEDLING','SEAMING','FINISHING','SPIRALLING',"
                    //+ "'ASSEMBLY','IN STOCK','BSR','INVOICED','EXP-INVOICE')  AND PR_UPN = '"+sUPN+"' AND PR_CURRENT_SCH_LAST_DDMMYY>=CURDATE() ) AS PR LEFT JOIN  (SELECT PARTY_CODE,PARTY_NAME "
                    //+ "'ASSEMBLY','IN STOCK','BSR','INVOICED','EXP-INVOICE')  AND PR_UPN = '"+sUPN+"' AND PR_CURRENT_SCH_LAST_DDMMYY>='2021-01-01' ) AS PR LEFT JOIN  (SELECT PARTY_CODE,PARTY_NAME "
                    + "'ASSEMBLY','IN STOCK','BSR')  AND PR_UPN = '"+sUPN+"' ) AS PR LEFT JOIN  (SELECT PARTY_CODE,PARTY_NAME "
		    + "FROM DINESHMILLS.D_SAL_PARTY_MASTER  WHERE MAIN_ACCOUNT_CODE='210010' AND APPROVED=1 AND CANCELLED=0) AS PM  "
                    + "ON PR.PR_PARTY_CODE=PM.PARTY_CODE  LEFT JOIN  (SELECT H.GROUP_CODE,H.GROUP_DESC,D.PARTY_CODE AS GROUP_PARTY_CODE  "
                    + "FROM PRODUCTION.FELT_GROUP_MASTER_HEADER H,PRODUCTION.FELT_GROUP_MASTER_DETAIL D  WHERE H.GROUP_CODE=D.GROUP_CODE  "
                    + "AND H.APPROVED=1 AND H.CANCELED=0) AS GM  ON PR.PR_PARTY_CODE=GM.GROUP_PARTY_CODE LEFT JOIN  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER  WHERE APPROVED=1 AND CANCELED=0 "
                    + "ORDER BY DOC_NO DESC) AS QM  ON PR.PR_PRODUCT_CODE=QM.PRODUCT_CODE LEFT JOIN  (SELECT * FROM PRODUCTION.FELT_MACHINE_POSITION_MST) AS MP  "
                    + "ON PR.PR_POSITION_NO=MP.POSITION_NO LEFT JOIN  (SELECT * FROM PRODUCTION.FELT_INCHARGE) AS IM  ON PR.PR_INCHARGE=IM.INCHARGE_CD ";

            System.out.println(sql);
            rs = data.getResult(sql);
            ResultSetMetaData rsInfo = rs.getMetaData();

            //Format the table from the resultset meta data
            int i = 1;
            for (i = 1; i <= rsInfo.getColumnCount(); i++) {
                DataModelUPN.addColumn(rsInfo.getColumnName(i));
            }
            rs.first();
            System.out.println("Row no." + rs.getRow());
            if (rs.getRow() > 0) {
                while (!rs.isAfterLast()) {
                    Object[] rowData = new Object[100];
                    for (int m = 1; m < i; m++) {
                        rowData[m - 1] = rs.getString(m);
                    }
                    DataModelUPN.addRow(rowData);
                    rs.next();
                }
            }
            DataModelUPN.TableReadOnly(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
