/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmItem.class HEIGHT=445 WIDTH=640></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.text.*;
import javax.swing.text.*;


public class frmItemAmend extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsItemAmend ObjItemAmend;
    
    private String SelWareHouseID="";
    private String SelTaxCodeType="";
    private int SelHierarchyID=0;
    private int lnFromID=0;
    
    // ------------- Various ComboBox Models --------------------
    private EITLComboModel cmbTypeModel;
    private EITLComboModel cmbCategoryModel;
    private EITLComboModel cmbWareHouseModel;
    private EITLComboModel cmbLocationModel;
    private EITLComboModel cmbStdDescModel;
    private EITLComboModel cmbMakeModel;
    private EITLComboModel cmbSizeModel;
    private EITLComboModel cmbUnitModel;
    private EITLComboModel cmbChapterModel;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbABCModel;
    private EITLComboModel cmbXYZModel;
    private EITLComboModel cmbVENModel;
    private EITLComboModel cmbFSNModel;
    private EITLComboModel cmbMFModel;
    private EITLComboModel cmbSuppModel;
    private EITLComboModel cmbEDApprovalModel;
    private EITLComboModel cmbUserModel;
    private EITLComboModel cmbTaxCodeModel;
    
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelRD;
    
    private EITLTableCellRenderer Paint=new EITLTableCellRenderer();
    //-----------------------------------------------------------
    
    private EITLTableModel DataModelHS;
    
    public frmPendingApprovals frmPA;
    
    
    /** Creates new form frmTemplate */
    public frmItemAmend() {
        
        System.gc();
        setSize(640,480);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        //--- Create instance of Item Object --
        ObjItemAmend=new clsItemAmend();
        
        GenerateCombos();
        SetNumberFormats();
        
        if(ObjItemAmend.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjItemAmend.MoveLast();
            DisplayData();
            //------- Set the menu for User rights ----- //
            SetMenuForRights();
        }
        else {
            JOptionPane.showMessageDialog(null,"Error loading item data. Error is "+ObjItemAmend.LastError);
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtItemID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbGroupCode = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtSearchKey = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbWareHouse = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        chkBlocked = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox();
        cmdNext1 = new javax.swing.JButton();
        txtLocationID = new javax.swing.JTextField();
        lblLocationName = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        cmbEDApproval = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        lblRevNo = new javax.swing.JLabel();
        cmdItemNameBig = new javax.swing.JButton();
        chkOneTime = new javax.swing.JCheckBox();
        jLabel38 = new javax.swing.JLabel();
        txtAmendID = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        txtAmendDate = new javax.swing.JTextField();
        txtAmendReason = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        chkCancelled = new javax.swing.JCheckBox();
        Tab2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cmbStdDesc = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmbSize = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        cmbMake = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmbXYZ = new javax.swing.JComboBox();
        cmbMF = new javax.swing.JComboBox();
        cmbABC = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        cmbVEN = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        cmbFSN = new javax.swing.JComboBox();
        cmdNext2 = new javax.swing.JButton();
        cmdBack2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        chkMaintainStock = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtMinQty = new javax.swing.JFormattedTextField();
        txtMaxQty = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        cmbUnit = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        txtRate = new javax.swing.JFormattedTextField();
        jLabel22 = new javax.swing.JLabel();
        txtQ1Rate = new javax.swing.JFormattedTextField();
        jLabel23 = new javax.swing.JLabel();
        txtQ2Rate = new javax.swing.JFormattedTextField();
        txtQ3Rate = new javax.swing.JFormattedTextField();
        jLabel24 = new javax.swing.JLabel();
        txtQ4Rate = new javax.swing.JFormattedTextField();
        jLabel25 = new javax.swing.JLabel();
        cmdNext3 = new javax.swing.JButton();
        cmdBack3 = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        txtToleranceLimit = new javax.swing.JFormattedTextField();
        Tab4 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JFormattedTextField();
        jLabel28 = new javax.swing.JLabel();
        txtRebate = new javax.swing.JFormattedTextField();
        chkExciseApplicable = new javax.swing.JCheckBox();
        jLabel29 = new javax.swing.JLabel();
        txtExcise = new javax.swing.JFormattedTextField();
        jLabel30 = new javax.swing.JLabel();
        cmbChapter = new javax.swing.JComboBox();
        chkTaxable = new javax.swing.JCheckBox();
        chkCaptive = new javax.swing.JCheckBox();
        cmdNext4 = new javax.swing.JButton();
        cmdBack4 = new javax.swing.JButton();
        txtHSNSACCode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        cmbTaxCodeType = new javax.swing.JComboBox();
        PanelRD = new javax.swing.JPanel();
        chkRND = new javax.swing.JCheckBox();
        lblSpecify = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        PanelRD2 = new javax.swing.JScrollPane();
        TableRD = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        Tab5 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        cmdBack5 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        Tab6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jLabel42 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FormKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        jButton1.setText("Show Original");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        ToolBar.add(jButton1);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        Tab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TabFocusGained(evt);
            }
        });

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Item Code :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(5, 68, 105, 16);

        txtItemID.setName("ITEM_ID"); // NOI18N
        txtItemID.setNextFocusableComponent(txtName);
        txtItemID.setEnabled(false);
        txtItemID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtItemIDFocusGained(evt);
            }
        });
        Tab1.add(txtItemID);
        txtItemID.setBounds(115, 64, 110, 28);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Name :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(5, 96, 105, 16);

        txtName.setName("ITEM_DESCRIPTION"); // NOI18N
        txtName.setNextFocusableComponent(cmbCategory);
        txtName.setEnabled(false);
        txtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNameFocusGained(evt);
            }
        });
        Tab1.add(txtName);
        txtName.setBounds(115, 94, 448, 28);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Type :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(5, 134, 105, 16);

        cmbGroupCode.setName("GROUP_CODE"); // NOI18N
        cmbGroupCode.setNextFocusableComponent(txtSearchKey);
        cmbGroupCode.setEnabled(false);
        cmbGroupCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGroupCodeItemStateChanged(evt);
            }
        });
        cmbGroupCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbGroupCodeFocusGained(evt);
            }
        });
        Tab1.add(cmbGroupCode);
        cmbGroupCode.setBounds(115, 130, 172, 28);

        jLabel5.setText("Search Key :");
        Tab1.add(jLabel5);
        jLabel5.setBounds(295, 131, 75, 16);

        txtSearchKey.setName("SEARCH_KEY"); // NOI18N
        txtSearchKey.setNextFocusableComponent(chkOneTime);
        txtSearchKey.setEnabled(false);
        txtSearchKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchKeyFocusGained(evt);
            }
        });
        Tab1.add(txtSearchKey);
        txtSearchKey.setBounds(375, 129, 94, 22);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Ware House :");
        Tab1.add(jLabel6);
        jLabel6.setBounds(5, 223, 105, 16);

        cmbWareHouse.setName("WAREHOSUE_ID"); // NOI18N
        cmbWareHouse.setNextFocusableComponent(txtLocationID);
        cmbWareHouse.setEnabled(false);
        cmbWareHouse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbWareHouseItemStateChanged(evt);
            }
        });
        cmbWareHouse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbWareHouseFocusGained(evt);
            }
        });
        Tab1.add(cmbWareHouse);
        cmbWareHouse.setBounds(115, 220, 290, 28);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Location :");
        Tab1.add(jLabel7);
        jLabel7.setBounds(5, 256, 105, 16);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Category :");
        Tab1.add(jLabel9);
        jLabel9.setBounds(5, 170, 105, 16);

        cmbCategory.setName("CATEGORY_ID"); // NOI18N
        cmbCategory.setNextFocusableComponent(cmbGroupCode);
        cmbCategory.setEnabled(false);
        cmbCategory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCategoryFocusGained(evt);
            }
        });
        Tab1.add(cmbCategory);
        cmbCategory.setBounds(115, 165, 172, 28);

        chkBlocked.setText("Blocked");
        chkBlocked.setName("BLOCKED"); // NOI18N
        chkBlocked.setEnabled(false);
        chkBlocked.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkBlockedFocusGained(evt);
            }
        });
        Tab1.add(chkBlocked);
        chkBlocked.setBounds(514, 5, 94, 23);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Supplier :");
        Tab1.add(jLabel8);
        jLabel8.setBounds(5, 287, 105, 16);

        cmbSupplier.setEditable(true);
        cmbSupplier.setName("SUPP_ID"); // NOI18N
        cmbSupplier.setNextFocusableComponent(cmbEDApproval);
        cmbSupplier.setEnabled(false);
        cmbSupplier.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSupplierFocusGained(evt);
            }
        });
        Tab1.add(cmbSupplier);
        cmbSupplier.setBounds(115, 284, 288, 28);

        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(505, 318, 104, 28);

        txtLocationID.setName("LOCATION_ID"); // NOI18N
        txtLocationID.setNextFocusableComponent(cmbSupplier);
        txtLocationID.setEnabled(false);
        txtLocationID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLocationIDKeyPressed(evt);
            }
        });
        Tab1.add(txtLocationID);
        txtLocationID.setBounds(115, 253, 86, 21);

        lblLocationName.setText("...");
        Tab1.add(lblLocationName);
        lblLocationName.setBounds(184, 249, 195, 18);

        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel43.setText("Approval of");
        Tab1.add(jLabel43);
        jLabel43.setBounds(24, 321, 85, 16);

        cmbEDApproval.setNextFocusableComponent(cmdNext1);
        cmbEDApproval.setEnabled(false);
        Tab1.add(cmbEDApproval);
        cmbEDApproval.setBounds(116, 318, 96, 28);

        jLabel44.setText("required to raise the indent");
        Tab1.add(jLabel44);
        jLabel44.setBounds(220, 322, 212, 16);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(240, 11, 20, 16);

        cmdItemNameBig.setText("...");
        cmdItemNameBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdItemNameBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdItemNameBig);
        cmdItemNameBig.setBounds(568, 93, 40, 21);

        chkOneTime.setText("One Time Purchase Item");
        chkOneTime.setName("ONETIME"); // NOI18N
        chkOneTime.setNextFocusableComponent(cmbWareHouse);
        chkOneTime.setEnabled(false);
        Tab1.add(chkOneTime);
        chkOneTime.setBounds(115, 189, 285, 23);

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel38.setText("Updation ID :");
        Tab1.add(jLabel38);
        jLabel38.setBounds(5, 10, 105, 16);

        txtAmendID.setName("SUPPLIER_CODE"); // NOI18N
        txtAmendID.setEnabled(false);
        Tab1.add(txtAmendID);
        txtAmendID.setBounds(115, 8, 120, 28);

        jLabel39.setText("Date :");
        Tab1.add(jLabel39);
        jLabel39.setBounds(281, 11, 39, 16);

        txtAmendDate.setName("DUMMY_SUPPLIER_CODE"); // NOI18N
        txtAmendDate.setEnabled(false);
        Tab1.add(txtAmendDate);
        txtAmendDate.setBounds(326, 8, 110, 28);

        txtAmendReason.setName("SUPP_NAME"); // NOI18N
        txtAmendReason.setEnabled(false);
        Tab1.add(txtAmendReason);
        txtAmendReason.setBounds(115, 36, 281, 28);

        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel45.setText("Update Reason :");
        Tab1.add(jLabel45);
        jLabel45.setBounds(5, 39, 105, 16);

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        Tab1.add(jButton2);
        jButton2.setBounds(400, 36, 31, 20);

        chkCancelled.setText("Cancelled");
        chkCancelled.setName("BLOCKED"); // NOI18N
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(514, 32, 94, 23);

        Tab.addTab("Item Information", null, Tab1, "");

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Std.  Description :");
        Tab2.add(jLabel10);
        jLabel10.setBounds(5, 16, 115, 16);

        cmbStdDesc.setEditable(true);
        cmbStdDesc.setName("DESC"); // NOI18N
        cmbStdDesc.setNextFocusableComponent(cmbMake);
        cmbStdDesc.setEnabled(false);
        cmbStdDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbStdDescFocusGained(evt);
            }
        });
        Tab2.add(cmbStdDesc);
        cmbStdDesc.setBounds(130, 14, 286, 28);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("MF Category :");
        Tab2.add(jLabel11);
        jLabel11.setBounds(5, 248, 115, 16);

        cmbSize.setEditable(true);
        cmbSize.setName("SIZE"); // NOI18N
        cmbSize.setNextFocusableComponent(cmbABC);
        cmbSize.setEnabled(false);
        cmbSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSizeFocusGained(evt);
            }
        });
        Tab2.add(cmbSize);
        cmbSize.setBounds(130, 78, 130, 28);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Make :");
        Tab2.add(jLabel12);
        jLabel12.setBounds(5, 50, 115, 16);

        cmbMake.setEditable(true);
        cmbMake.setName("MAKE"); // NOI18N
        cmbMake.setNextFocusableComponent(cmbSize);
        cmbMake.setEnabled(false);
        cmbMake.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbMakeFocusGained(evt);
            }
        });
        Tab2.add(cmbMake);
        cmbMake.setBounds(130, 46, 130, 28);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Size :");
        Tab2.add(jLabel13);
        jLabel13.setBounds(5, 82, 115, 16);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("ABC Category :");
        Tab2.add(jLabel14);
        jLabel14.setBounds(5, 114, 115, 16);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("XYZ Category :");
        Tab2.add(jLabel15);
        jLabel15.setBounds(5, 146, 115, 16);

        cmbXYZ.setName("XYZ"); // NOI18N
        cmbXYZ.setNextFocusableComponent(cmbVEN);
        cmbXYZ.setEnabled(false);
        cmbXYZ.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbXYZFocusGained(evt);
            }
        });
        Tab2.add(cmbXYZ);
        cmbXYZ.setBounds(130, 142, 56, 28);

        cmbMF.setName("MF"); // NOI18N
        cmbMF.setNextFocusableComponent(cmdNext2);
        cmbMF.setEnabled(false);
        cmbMF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbMFFocusGained(evt);
            }
        });
        Tab2.add(cmbMF);
        cmbMF.setBounds(130, 244, 56, 28);

        cmbABC.setNextFocusableComponent(cmbXYZ);
        cmbABC.setEnabled(false);
        cmbABC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbABCFocusGained(evt);
            }
        });
        Tab2.add(cmbABC);
        cmbABC.setBounds(130, 110, 56, 28);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("VEN Category :");
        Tab2.add(jLabel16);
        jLabel16.setBounds(5, 180, 115, 16);

        cmbVEN.setName("VEN"); // NOI18N
        cmbVEN.setNextFocusableComponent(cmbFSN);
        cmbVEN.setEnabled(false);
        cmbVEN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbVENFocusGained(evt);
            }
        });
        Tab2.add(cmbVEN);
        cmbVEN.setBounds(130, 176, 56, 28);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("FSN Category :");
        Tab2.add(jLabel17);
        jLabel17.setBounds(5, 214, 115, 16);

        cmbFSN.setName("FSN"); // NOI18N
        cmbFSN.setNextFocusableComponent(cmbMF);
        cmbFSN.setEnabled(false);
        cmbFSN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbFSNFocusGained(evt);
            }
        });
        Tab2.add(cmbFSN);
        cmbFSN.setBounds(130, 210, 56, 28);

        cmdNext2.setText("Next >>");
        cmdNext2.setNextFocusableComponent(cmdBack2);
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNext2);
        cmdNext2.setBounds(502, 320, 94, 28);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdNext2);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(412, 320, 90, 28);

        Tab.addTab("Analysis", null, Tab2, "");

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });
        Tab3.setLayout(null);

        chkMaintainStock.setText("Maintain Stock");
        chkMaintainStock.setName("MAINTAIN_STOCK"); // NOI18N
        chkMaintainStock.setNextFocusableComponent(txtMinQty);
        chkMaintainStock.setEnabled(false);
        chkMaintainStock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkMaintainStockFocusGained(evt);
            }
        });
        Tab3.add(chkMaintainStock);
        chkMaintainStock.setBounds(16, 12, 126, 23);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Maximum Qty. :");
        Tab3.add(jLabel18);
        jLabel18.setBounds(5, 86, 105, 16);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Minimum Qty. :");
        Tab3.add(jLabel19);
        jLabel19.setBounds(5, 52, 105, 16);

        txtMinQty.setName("MIN_QTY"); // NOI18N
        txtMinQty.setNextFocusableComponent(txtMaxQty);
        txtMinQty.setEnabled(false);
        txtMinQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMinQtyFocusGained(evt);
            }
        });
        Tab3.add(txtMinQty);
        txtMinQty.setBounds(116, 50, 122, 28);

        txtMaxQty.setName("MAX_QTY"); // NOI18N
        txtMaxQty.setNextFocusableComponent(cmbUnit);
        txtMaxQty.setEnabled(false);
        txtMaxQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMaxQtyFocusGained(evt);
            }
        });
        Tab3.add(txtMaxQty);
        txtMaxQty.setBounds(116, 84, 119, 28);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Unit :");
        Tab3.add(jLabel20);
        jLabel20.setBounds(5, 124, 105, 16);

        cmbUnit.setName("UNIT"); // NOI18N
        cmbUnit.setNextFocusableComponent(txtRate);
        cmbUnit.setEnabled(false);
        cmbUnit.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbUnitFocusGained(evt);
            }
        });
        Tab3.add(cmbUnit);
        cmbUnit.setBounds(116, 120, 118, 28);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Rate :");
        Tab3.add(jLabel21);
        jLabel21.setBounds(5, 160, 105, 16);

        txtRate.setName("UNIT_RATE"); // NOI18N
        txtRate.setNextFocusableComponent(txtToleranceLimit);
        txtRate.setEnabled(false);
        txtRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRateFocusGained(evt);
            }
        });
        Tab3.add(txtRate);
        txtRate.setBounds(116, 156, 119, 28);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Qtr.1 Rate :");
        Tab3.add(jLabel22);
        jLabel22.setBounds(350, 52, 75, 16);

        txtQ1Rate.setName("QTR1_RATE"); // NOI18N
        txtQ1Rate.setNextFocusableComponent(txtQ2Rate);
        txtQ1Rate.setEnabled(false);
        txtQ1Rate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQ1RateFocusGained(evt);
            }
        });
        Tab3.add(txtQ1Rate);
        txtQ1Rate.setBounds(435, 50, 119, 28);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Qtr.2 Rate :");
        Tab3.add(jLabel23);
        jLabel23.setBounds(350, 79, 75, 16);

        txtQ2Rate.setName("QTR2_RATE"); // NOI18N
        txtQ2Rate.setNextFocusableComponent(txtQ3Rate);
        txtQ2Rate.setEnabled(false);
        txtQ2Rate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQ2RateFocusGained(evt);
            }
        });
        Tab3.add(txtQ2Rate);
        txtQ2Rate.setBounds(435, 76, 119, 28);

        txtQ3Rate.setName("QTR3_RATE"); // NOI18N
        txtQ3Rate.setNextFocusableComponent(txtQ4Rate);
        txtQ3Rate.setEnabled(false);
        txtQ3Rate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQ3RateFocusGained(evt);
            }
        });
        Tab3.add(txtQ3Rate);
        txtQ3Rate.setBounds(435, 102, 119, 28);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Qtr.3 Rate :");
        Tab3.add(jLabel24);
        jLabel24.setBounds(350, 104, 75, 16);

        txtQ4Rate.setName("QTR4_RATE"); // NOI18N
        txtQ4Rate.setNextFocusableComponent(cmdNext3);
        txtQ4Rate.setEnabled(false);
        txtQ4Rate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQ4RateFocusGained(evt);
            }
        });
        Tab3.add(txtQ4Rate);
        txtQ4Rate.setBounds(435, 130, 119, 28);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Qtr.4 Rate :");
        Tab3.add(jLabel25);
        jLabel25.setBounds(350, 132, 75, 16);

        cmdNext3.setText("Next >>");
        cmdNext3.setNextFocusableComponent(cmdBack3);
        cmdNext3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext3ActionPerformed(evt);
            }
        });
        Tab3.add(cmdNext3);
        cmdNext3.setBounds(502, 320, 94, 28);

        cmdBack3.setText("<< Back");
        cmdBack3.setNextFocusableComponent(cmdNext3);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBack3);
        cmdBack3.setBounds(412, 320, 90, 28);

        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37.setText("Tolerance Limit :");
        Tab3.add(jLabel37);
        jLabel37.setBounds(5, 193, 105, 16);

        txtToleranceLimit.setName("TOLERANCE_LIMIT"); // NOI18N
        txtToleranceLimit.setNextFocusableComponent(txtQ1Rate);
        txtToleranceLimit.setEnabled(false);
        Tab3.add(txtToleranceLimit);
        txtToleranceLimit.setBounds(117, 191, 119, 28);

        Tab.addTab("Stock & Rate", null, Tab3, "");

        Tab4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab4FocusGained(evt);
            }
        });
        Tab4.setLayout(null);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel27.setText("Discount :");
        Tab4.add(jLabel27);
        jLabel27.setBounds(5, 12, 70, 16);

        txtDiscount.setName("DNP"); // NOI18N
        txtDiscount.setNextFocusableComponent(txtRebate);
        txtDiscount.setEnabled(false);
        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDiscountFocusGained(evt);
            }
        });
        Tab4.add(txtDiscount);
        txtDiscount.setBounds(80, 12, 112, 28);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel28.setText("Rebate :");
        Tab4.add(jLabel28);
        jLabel28.setBounds(5, 40, 70, 16);

        txtRebate.setEnabled(false);
        txtRebate.setName("REBATE"); // NOI18N
        txtRebate.setNextFocusableComponent(chkExciseApplicable);
        txtRebate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRebateFocusGained(evt);
            }
        });
        Tab4.add(txtRebate);
        txtRebate.setBounds(80, 38, 112, 28);

        chkExciseApplicable.setText("Excise Applicable");
        chkExciseApplicable.setName("EXCISE_APPLICABLE"); // NOI18N
        chkExciseApplicable.setNextFocusableComponent(txtExcise);
        chkExciseApplicable.setEnabled(false);
        chkExciseApplicable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkExciseApplicableFocusGained(evt);
            }
        });
        Tab4.add(chkExciseApplicable);
        chkExciseApplicable.setBounds(18, 84, 170, 23);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel29.setText("Excise :");
        Tab4.add(jLabel29);
        jLabel29.setBounds(5, 118, 70, 16);

        txtExcise.setName("EXCISE"); // NOI18N
        txtExcise.setNextFocusableComponent(cmbChapter);
        txtExcise.setEnabled(false);
        txtExcise.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtExciseFocusGained(evt);
            }
        });
        Tab4.add(txtExcise);
        txtExcise.setBounds(80, 116, 112, 28);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel30.setText("Chapter :");
        Tab4.add(jLabel30);
        jLabel30.setBounds(5, 148, 70, 16);

        cmbChapter.setEnabled(false);
        cmbChapter.setName("CHAPTER_NO"); // NOI18N
        cmbChapter.setNextFocusableComponent(chkTaxable);
        cmbChapter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbChapterFocusGained(evt);
            }
        });
        Tab4.add(cmbChapter);
        cmbChapter.setBounds(80, 146, 154, 28);

        chkTaxable.setText("Taxable");
        chkTaxable.setName("TAXABLE"); // NOI18N
        chkTaxable.setNextFocusableComponent(chkCaptive);
        chkTaxable.setEnabled(false);
        chkTaxable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkTaxableFocusGained(evt);
            }
        });
        Tab4.add(chkTaxable);
        chkTaxable.setBounds(18, 196, 170, 23);

        chkCaptive.setText("Captive Consumable");
        chkCaptive.setName("CAPTIVE_CONSUMABLE"); // NOI18N
        chkCaptive.setNextFocusableComponent(cmdNext4);
        chkCaptive.setEnabled(false);
        chkCaptive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCaptiveFocusGained(evt);
            }
        });
        Tab4.add(chkCaptive);
        chkCaptive.setBounds(18, 228, 170, 23);

        cmdNext4.setText("Next >>");
        cmdNext4.setNextFocusableComponent(cmdBack4);
        cmdNext4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext4ActionPerformed(evt);
            }
        });
        Tab4.add(cmdNext4);
        cmdNext4.setBounds(502, 320, 94, 28);

        cmdBack4.setText("<< Back");
        cmdBack4.setNextFocusableComponent(cmdNext4);
        cmdBack4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack4ActionPerformed(evt);
            }
        });
        Tab4.add(cmdBack4);
        cmdBack4.setBounds(412, 320, 90, 28);

        txtHSNSACCode.setEnabled(false);
        Tab4.add(txtHSNSACCode);
        txtHSNSACCode.setBounds(390, 40, 90, 28);

        jLabel1.setText("HSN/SAC Code:");
        Tab4.add(jLabel1);
        jLabel1.setBounds(270, 40, 110, 20);

        jLabel40.setText("Tax Code Type:");
        Tab4.add(jLabel40);
        jLabel40.setBounds(267, 10, 110, 20);

        cmbTaxCodeType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbTaxCodeType.setEnabled(false);
        Tab4.add(cmbTaxCodeType);
        cmbTaxCodeType.setBounds(390, 10, 81, 28);

        Tab.addTab("Tax Details", null, Tab4, "");

        PanelRD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PanelRD.setLayout(null);

        chkRND.setText("R&D Approval Required ");
        chkRND.setEnabled(false);
        chkRND.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkRNDItemStateChanged(evt);
            }
        });
        PanelRD.add(chkRND);
        chkRND.setBounds(13, 14, 237, 23);

        lblSpecify.setText("Specify the approvers of R&D Department below");
        PanelRD.add(lblSpecify);
        lblSpecify.setBounds(10, 55, 350, 16);

        lblUser.setText("User");
        PanelRD.add(lblUser);
        lblUser.setBounds(16, 100, 45, 16);

        cmbUser.setEnabled(false);
        PanelRD.add(cmbUser);
        cmbUser.setBounds(68, 95, 292, 28);

        TableRD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        PanelRD2.setViewportView(TableRD);

        PanelRD.add(PanelRD2);
        PanelRD2.setBounds(16, 145, 350, 171);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        PanelRD.add(cmdAdd);
        cmdAdd.setBounds(376, 146, 101, 28);

        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        PanelRD.add(cmdRemove);
        cmdRemove.setBounds(377, 191, 99, 28);

        Tab.addTab("R&D", PanelRD);

        Tab5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab5FocusGained(evt);
            }
        });
        Tab5.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab5.add(jLabel31);
        jLabel31.setBounds(5, 18, 85, 16);

        cmbHierarchy.setFocusCycleRoot(true);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab5.add(cmbHierarchy);
        cmbHierarchy.setBounds(95, 14, 184, 28);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab5.add(jLabel32);
        jLabel32.setBounds(5, 52, 85, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgApproveActionPerformed(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 170, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgFinalActionPerformed(evt);
            }
        });
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgRejectActionPerformed(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgHoldActionPerformed(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab5.add(jPanel6);
        jPanel6.setBounds(95, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab5.add(jLabel33);
        jLabel33.setBounds(5, 228, 85, 16);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab5.add(cmbSendTo);
        cmbSendTo.setBounds(95, 224, 184, 28);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab5.add(jLabel34);
        jLabel34.setBounds(5, 264, 85, 16);

        txtToRemarks.setNextFocusableComponent(cmdBack5);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab5.add(txtToRemarks);
        txtToRemarks.setBounds(95, 260, 516, 28);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab5.add(txtFromRemarks);
        txtFromRemarks.setBounds(95, 78, 463, 28);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab5.add(jLabel35);
        jLabel35.setBounds(5, 82, 85, 16);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab5.add(jLabel36);
        jLabel36.setBounds(5, 116, 85, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab5.add(txtFrom);
        txtFrom.setBounds(95, 50, 182, 28);

        cmdBack5.setText("<< Back");
        cmdBack5.setNextFocusableComponent(cmbHierarchy);
        cmdBack5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack5ActionPerformed(evt);
            }
        });
        Tab5.add(cmdBack5);
        cmdBack5.setBounds(490, 320, 110, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab5.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(565, 78, 40, 21);

        Tab.addTab("Approval", Tab5);

        Tab6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab6.setLayout(null);

        jLabel26.setText("Document Approval Status :");
        Tab6.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 16);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableA);

        Tab6.add(jScrollPane1);
        jScrollPane1.setBounds(12, 40, 594, 144);

        jLabel42.setText("Document Update History :");
        Tab6.add(jLabel42);
        jLabel42.setBounds(14, 194, 182, 16);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Tab6.add(jScrollPane3);
        jScrollPane3.setBounds(14, 210, 447, 129);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        Tab6.add(cmdViewHistory);
        cmdViewHistory.setBounds(470, 211, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        Tab6.add(cmdNormalView);
        cmdNormalView.setBounds(470, 244, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        Tab6.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(470, 277, 132, 24);

        txtAuditRemarks.setEnabled(false);
        Tab6.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(470, 316, 129, 28);

        Tab.addTab("Status", Tab6);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 620, 377);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" ITEM MASTER UPDATION");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 650, 25);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 449, 616, 22);
    }// </editor-fold>//GEN-END:initComponents
    
    private void cmbGroupCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGroupCodeItemStateChanged
        // TODO add your handling code here:
        HashMap List = new HashMap();
        if(EITLERPGLOBAL.getComboCode(cmbGroupCode)!=0) {
            int groupCode = EITLERPGLOBAL.getComboCode(cmbGroupCode)-1;
            if(groupCode==1 || groupCode==3) {
                cmbCategoryModel=new EITLComboModel();
                cmbCategory.removeAllItems();
                cmbCategory.setModel(cmbCategoryModel);
                
                List=clsItemCategory.getCategoryListEx(groupCode);
                for(int i=1;i<=List.size();i++) {
                    clsItemCategory ObjCategory=(clsItemCategory) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjCategory.getAttribute("CATEGORY_ID").getVal();
                    aData.Text=(String)ObjCategory.getAttribute("CATEGORY_DESC").getObj();
                    cmbCategoryModel.addElement(aData);
                }
            } else if(groupCode==2) {
                cmbCategoryModel=new EITLComboModel();
                cmbCategory.removeAllItems();
                cmbCategory.setModel(cmbCategoryModel);
                
                List=clsItemCategory.getCategoryListEx(groupCode);
                for(int i=1;i<=List.size();i++) {
                    clsItemCategory ObjCategory=(clsItemCategory) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjCategory.getAttribute("CATEGORY_ID").getVal();
                    aData.Text=(String)ObjCategory.getAttribute("CATEGORY_DESC").getObj();
                    cmbCategoryModel.addElement(aData);
                }
            }
        } else {
            int groupCode = EITLERPGLOBAL.getComboCode(cmbGroupCode)-1;
            cmbCategoryModel=new EITLComboModel();
            cmbCategory.removeAllItems();
            cmbCategory.setModel(cmbCategoryModel);
            
            List=clsItemCategory.getCategoryListEx(groupCode);
            for(int i=1;i<=List.size();i++) {
                clsItemCategory ObjCategory=(clsItemCategory) List.get(Integer.toString(i));
                ComboData aData=new ComboData();
                aData.Code=(int) ObjCategory.getAttribute("CATEGORY_ID").getVal();
                aData.Text=(String)ObjCategory.getAttribute("CATEGORY_DESC").getObj();
                cmbCategoryModel.addElement(aData);
            }
        }
    }//GEN-LAST:event_cmbGroupCodeItemStateChanged
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            
            String ItemCode=txtItemID.getText();
            AppletFrame aFrame=new AppletFrame("Item");
            aFrame.startAppletEx("EITLERP.frmItem","Item");
            frmItem ObjItem=(frmItem) aFrame.ObjApplet;
            ObjItem.FindEx((int)EITLERPGLOBAL.gCompanyID,ItemCode);
        }
        
        catch(Exception e){
            
            System.out.println("Following Error"+e.getMessage());
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,51,txtItemID.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
        
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtAmendReason;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void chkRNDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkRNDItemStateChanged
        // TODO add your handling code here:
        lblSpecify.setVisible(chkRND.isSelected());
        lblUser.setVisible(chkRND.isSelected());
        cmbUser.setVisible(chkRND.isSelected());
        TableRD.setVisible(chkRND.isSelected());
        cmdAdd.setVisible(chkRND.isSelected());
        cmdRemove.setVisible(chkRND.isSelected());
        PanelRD2.setVisible(chkRND.isSelected());
    }//GEN-LAST:event_chkRNDItemStateChanged
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        try {
            DataModelRD.removeRow(TableRD.getSelectedRow());
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        
        int SelUserID=EITLERPGLOBAL.getComboCode(cmbUser);
        
        //Find out the duplicates
        for(int i=0;i<TableRD.getRowCount();i++) {
            int UserID= Integer.parseInt((String)TableRD.getValueAt(i, 2));
            
            if(UserID==SelUserID) {
                JOptionPane.showMessageDialog(null,"User already exist");
                return;
            }
        }
        
        Object[] rowData=new Object[3];
        rowData[0]=Integer.toString(TableRD.getRowCount()+1);
        rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,SelUserID);
        rowData[2]=Integer.toString(SelUserID);
        DataModelRD.addRow(rowData);
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdItemNameBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdItemNameBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtName;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdItemNameBigActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjItemAmend.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveFirst();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtItemID.getText();
        ObjItemAmend.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveFirst();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void txtLocationIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLocationIDKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT LOCATION_ID,LOCATION_NAME FROM D_INV_LOCATION_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY LOCATION_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtLocationID.setText(aList.ReturnVal);
                lblLocationName.setText(clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID,txtLocationID.getText()));
            }
        }
        
    }//GEN-LAST:event_txtLocationIDKeyPressed
    
    private void Tab5FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab5FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab5FocusGained
    
    private void Tab4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab4FocusGained
        // TODO add your handling code here:
        txtDiscount.requestFocus();
    }//GEN-LAST:event_Tab4FocusGained
    
    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        chkMaintainStock.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained
    
    private void cmdBack5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack5ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(3);
    }//GEN-LAST:event_cmdBack5ActionPerformed
    
    private void cmdBack4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack4ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdBack4ActionPerformed
    
    private void cmdNext4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext4ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(4);
    }//GEN-LAST:event_cmdNext4ActionPerformed
    
    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed
    
    private void cmdNext3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(3);
    }//GEN-LAST:event_cmdNext3ActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbStdDesc.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtItemID.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void TabFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TabFocusGained
        // TODO add your handling code here:
        
        if(Tab.getSelectedIndex()==0) {
            txtItemID.requestFocus();
        }
        
        if(Tab.getSelectedIndex()==1) {
            cmbStdDesc.requestFocus();
        }
    }//GEN-LAST:event_TabFocusGained
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter your remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document is to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void chkCaptiveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCaptiveFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify whether this item is captive consumable");
    }//GEN-LAST:event_chkCaptiveFocusGained
    
    private void chkTaxableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkTaxableFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify whether this item is taxable");
    }//GEN-LAST:event_chkTaxableFocusGained
    
    private void cmbChapterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbChapterFocusGained
        // TODO add your handling code here:
        ShowMessage("Select, under which chapter excise is applicable");
    }//GEN-LAST:event_cmbChapterFocusGained
    
    private void txtExciseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtExciseFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter percentage of excise applicable on this item");
    }//GEN-LAST:event_txtExciseFocusGained
    
    private void chkExciseApplicableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkExciseApplicableFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify whether excise is applicable on this item");
    }//GEN-LAST:event_chkExciseApplicableFocusGained
    
    private void txtRebateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRebateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter default Rebate for this item (if any)");
    }//GEN-LAST:event_txtRebateFocusGained
    
    private void txtDiscountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter default discount for this item (if any)");
    }//GEN-LAST:event_txtDiscountFocusGained
    
    private void txtQ4RateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQ4RateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Quarter4 Rate of this item.");
    }//GEN-LAST:event_txtQ4RateFocusGained
    
    private void txtQ3RateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQ3RateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Quarter3 Rate of this item.");
    }//GEN-LAST:event_txtQ3RateFocusGained
    
    private void txtQ2RateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQ2RateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Quarter2 Rate of this item.");
    }//GEN-LAST:event_txtQ2RateFocusGained
    
    private void txtQ1RateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQ1RateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Quarter1 Rate of this item.");
    }//GEN-LAST:event_txtQ1RateFocusGained
    
    private void txtRateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Rate for this item");
    }//GEN-LAST:event_txtRateFocusGained
    
    private void cmbUnitFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbUnitFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the unit, in which system will keep stock of this item");
    }//GEN-LAST:event_cmbUnitFocusGained
    
    private void txtMaxQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaxQtyFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Max. Stock level. Enter 0 if you don't want to maintain");
    }//GEN-LAST:event_txtMaxQtyFocusGained
    
    private void txtMinQtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMinQtyFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Min. Stock level. Enter 0 if you don't want to maintain");
    }//GEN-LAST:event_txtMinQtyFocusGained
    
    private void chkMaintainStockFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkMaintainStockFocusGained
        // TODO add your handling code here:
        ShowMessage("Turn this checkbox 'On' to maintain the stock of this item");
    }//GEN-LAST:event_chkMaintainStockFocusGained
    
    private void cmbMFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbMFFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the type of item (M/F)");
    }//GEN-LAST:event_cmbMFFocusGained
    
    private void cmbFSNFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbFSNFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the type of item (F/S/N)");
    }//GEN-LAST:event_cmbFSNFocusGained
    
    private void cmbVENFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbVENFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the type of item (V/E/N)");
    }//GEN-LAST:event_cmbVENFocusGained
    
    private void cmbXYZFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbXYZFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the type of item (X/Y/Z)");
    }//GEN-LAST:event_cmbXYZFocusGained
    
    private void cmbABCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbABCFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the type of item (A/B/C)");
    }//GEN-LAST:event_cmbABCFocusGained
    
    private void cmbSizeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSizeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the size for this item");
    }//GEN-LAST:event_cmbSizeFocusGained
    
    private void cmbMakeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbMakeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the Make for this item");
    }//GEN-LAST:event_cmbMakeFocusGained
    
    private void cmbStdDescFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbStdDescFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the Standard Description/Generic name for this item");
    }//GEN-LAST:event_cmbStdDescFocusGained
    
    private void cmbSupplierFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSupplierFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the default supplier for this item");
    }//GEN-LAST:event_cmbSupplierFocusGained
    
    private void chkBlockedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkBlockedFocusGained
        // TODO add your handling code here:
        ShowMessage("Turn this checkbox 'On' to stop the use of item in system");
    }//GEN-LAST:event_chkBlockedFocusGained
    
    private void cmbWareHouseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbWareHouseFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the warehouse of item");
        SelWareHouseID=EITLERPGLOBAL.getCombostrCode(cmbWareHouse);
        GenerateLocationCombo();
    }//GEN-LAST:event_cmbWareHouseFocusGained
    
    private void txtSearchKeyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchKeyFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the search key for this item");
    }//GEN-LAST:event_txtSearchKeyFocusGained
    
    private void cmbGroupCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbGroupCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the Group code");
    }//GEN-LAST:event_cmbGroupCodeFocusGained
    
    private void cmbCategoryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCategoryFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the Item Category. If it is blank- do entry in Item Category Master");
    }//GEN-LAST:event_cmbCategoryFocusGained
    
    private void txtNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNameFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter name of Item");
    }//GEN-LAST:event_txtNameFocusGained
    
    private void txtItemIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Item Code. (Upto 10 Characters)");
    }//GEN-LAST:event_txtItemIDFocusGained
    
    private void FormKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FormKeyPressed
        // TODO add your handling code here:
        
        //Ctrl+A - Add Record
        if(evt.getKeyCode()==65&&evt.getModifiersEx()==128) {
            if(cmdNew.isEnabled()) {
                Add();
            }
        }
        
        //Ctrl+E - EDIT Record
        if(evt.getKeyCode()==69&&evt.getModifiersEx()==128) {
            if(cmdEdit.isEnabled()) {
                Edit();
            }
        }
        
        //Ctrl+D - DELETE Record
        if(evt.getKeyCode()==68&&evt.getModifiersEx()==128) {
            if(cmdDelete.isEnabled()) {
                Delete();
            }
        }
        
        //Ctrl+S - Save Record
        if(evt.getKeyCode()==83&&evt.getModifiersEx()==128) {
            if(cmdSave.isEnabled()) {
                Save();
            }
        }
        
        //Ctrl+Z - Cancel Record
        if(evt.getKeyCode()==90&&evt.getModifiersEx()==128) {
            if(cmdCancel.isEnabled()) {
                Cancel();
            }
        }
        
        
        //Ctrl+F - First Record
        if(evt.getKeyCode()==70&&evt.getModifiersEx()==128) {
            if(cmdTop.isEnabled()) {
                MoveFirst();
            }
        }
        
        //Ctrl+B - Previous Record
        if(evt.getKeyCode()==66&&evt.getModifiersEx()==128) {
            if(cmdBack.isEnabled()) {
                MovePrevious();
            }
        }
        
        //Ctrl+N - Next Record
        if(evt.getKeyCode()==78&&evt.getModifiersEx()==128) {
            if(cmdNext.isEnabled()) {
                MoveNext();
            }
        }
        
        //Ctrl+L - Last Record
        if(evt.getKeyCode()==76&&evt.getModifiersEx()==128) {
            if(cmdLast.isEnabled()) {
                MoveLast();
            }
        }
        
        //Ctrl+V - Preview Report
        if(evt.getKeyCode()==86&&evt.getModifiersEx()==128) {
            if(cmdPreview.isEnabled()) {
                //Preview Code
            }
        }
        
        //Ctrl+P - Print Report
        if(evt.getKeyCode()==86&&evt.getModifiersEx()==128) {
            if(cmdPrint.isEnabled()) {
                //Print Code
            }
        }
        
        //Ctrl+X - Exit Form
        if(evt.getKeyCode()==88&&evt.getModifiersEx()==128) {
            if(cmdExit.isEnabled()) {
                ObjItemAmend.Close();
                ((JFrame)getParent().getParent().getParent().getParent()).dispose();
            }
        }
        
        //F3 - Find Record
        if(evt.getKeyCode()==114&&evt.getModifiersEx()==0) {
            if(cmdFilter.isEnabled()) {
                Find();
            }
        }
        
        
    }//GEN-LAST:event_FormKeyPressed
    
    private void OpgHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgHoldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldActionPerformed
    
    private void OpgRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgRejectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectActionPerformed
    
    private void OpgFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgFinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalActionPerformed
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgApproveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveActionPerformed
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
        ;
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjItemAmend.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmbWareHouseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbWareHouseItemStateChanged
        // TODO add your handling code here:
        if(EditMode!=0) {
            SelWareHouseID=EITLERPGLOBAL.getCombostrCode(cmbWareHouse);
            GenerateLocationCombo();
        }
    }//GEN-LAST:event_cmbWareHouseItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel PanelRD;
    private javax.swing.JScrollPane PanelRD2;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JPanel Tab4;
    private javax.swing.JPanel Tab5;
    private javax.swing.JPanel Tab6;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableRD;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JCheckBox chkBlocked;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JCheckBox chkCaptive;
    private javax.swing.JCheckBox chkExciseApplicable;
    private javax.swing.JCheckBox chkMaintainStock;
    private javax.swing.JCheckBox chkOneTime;
    private javax.swing.JCheckBox chkRND;
    private javax.swing.JCheckBox chkTaxable;
    private javax.swing.JComboBox cmbABC;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbChapter;
    private javax.swing.JComboBox cmbEDApproval;
    private javax.swing.JComboBox cmbFSN;
    private javax.swing.JComboBox cmbGroupCode;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbMF;
    private javax.swing.JComboBox cmbMake;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbSize;
    private javax.swing.JComboBox cmbStdDesc;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JComboBox cmbTaxCodeType;
    private javax.swing.JComboBox cmbUnit;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JComboBox cmbVEN;
    private javax.swing.JComboBox cmbWareHouse;
    private javax.swing.JComboBox cmbXYZ;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdBack4;
    private javax.swing.JButton cmdBack5;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdItemNameBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNext3;
    private javax.swing.JButton cmdNext4;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblLocationName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblSpecify;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTextField txtAmendDate;
    private javax.swing.JTextField txtAmendID;
    private javax.swing.JTextField txtAmendReason;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JFormattedTextField txtDiscount;
    private javax.swing.JFormattedTextField txtExcise;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtHSNSACCode;
    private javax.swing.JTextField txtItemID;
    private javax.swing.JTextField txtLocationID;
    private javax.swing.JFormattedTextField txtMaxQty;
    private javax.swing.JFormattedTextField txtMinQty;
    private javax.swing.JTextField txtName;
    private javax.swing.JFormattedTextField txtQ1Rate;
    private javax.swing.JFormattedTextField txtQ2Rate;
    private javax.swing.JFormattedTextField txtQ3Rate;
    private javax.swing.JFormattedTextField txtQ4Rate;
    private javax.swing.JFormattedTextField txtRate;
    private javax.swing.JFormattedTextField txtRebate;
    private javax.swing.JTextField txtSearchKey;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JFormattedTextField txtToleranceLimit;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
        
        //--- Set menu for rights -- //
        SetMenuForRights();
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void ClearFields() {
        chkCancelled.setSelected(false);
        txtAmendDate.setText("");
        txtAmendID.setText("0");
        txtAmendReason.setText("");
        txtItemID.setText("");
        txtName.setText("");
        txtSearchKey.setText("");
        txtToRemarks.setText("");
        chkBlocked.setSelected(false);
        chkMaintainStock.setSelected(true);
        chkOneTime.setSelected(false);
        txtMinQty.setText("0.00");
        txtMaxQty.setText("0.00");
        txtRate.setText("0.00");
        txtQ1Rate.setText("0.00");
        txtQ2Rate.setText("0.00");
        txtQ3Rate.setText("0.00");
        txtQ4Rate.setText("0.00");
        txtDiscount.setText("0.00");
        txtRebate.setText("0.00");
        
        cmbTaxCodeType.setSelectedIndex(0); 
        txtHSNSACCode.setText("");
        chkExciseApplicable.setSelected(false);
        txtExcise.setText("0.00");
        chkCaptive.setSelected(false);
        txtLocationID.setText("");
        lblLocationName.setText("");
        
        
        chkRND.setSelected(false);
        lblSpecify.setVisible(chkRND.isSelected());
        lblUser.setVisible(chkRND.isSelected());
        cmbUser.setVisible(chkRND.isSelected());
        TableRD.setVisible(chkRND.isSelected());
        cmdAdd.setVisible(chkRND.isSelected());
        cmdRemove.setVisible(chkRND.isSelected());
        PanelRD2.setVisible(chkRND.isSelected());
        
        FormatGridA();
        FormatGridHS();
        FormatGridRD();
        
        cmbABC.setSelectedIndex(0);
        cmbXYZ.setSelectedIndex(0);
        cmbFSN.setSelectedIndex(0);
        cmbVEN.setSelectedIndex(0);
        cmbMF.setSelectedIndex(0);
        
    }
    
    private void SetFields(boolean pStat) {
        txtAmendDate.setEnabled(pStat);
        txtAmendReason.setEnabled(pStat);
        //txtItemID.setEnabled(pStat);
        txtName.setEnabled(pStat);
        cmbCategory.setEnabled(pStat);
        cmbGroupCode.setEnabled(pStat);
        txtSearchKey.setEnabled(pStat);
        cmbWareHouse.setEnabled(pStat);
        txtLocationID.setEnabled(pStat);
        cmbSupplier.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        cmbStdDesc.setEnabled(pStat);
        cmbMake.setEnabled(pStat);
        cmbSize.setEnabled(pStat);
        cmbABC.setEnabled(pStat);
        cmbXYZ.setEnabled(pStat);
        cmbVEN.setEnabled(pStat);
        cmbFSN.setEnabled(pStat);
        cmbMF.setEnabled(pStat);
        chkMaintainStock.setEnabled(pStat);
        txtMinQty.setEnabled(pStat);
        txtMaxQty.setEnabled(pStat);
        cmbUnit.setEnabled(pStat);
        txtRate.setEnabled(pStat);
        txtToleranceLimit.setEnabled(pStat);
        txtQ1Rate.setEnabled(pStat);
        txtQ2Rate.setEnabled(pStat);
        txtQ3Rate.setEnabled(pStat);
        txtQ4Rate.setEnabled(pStat);
        txtDiscount.setEnabled(pStat);
        txtRebate.setEnabled(pStat);
        
        cmbTaxCodeType.setEnabled(pStat);                
        txtHSNSACCode.setEnabled(pStat);
        
        chkExciseApplicable.setEnabled(pStat);
        txtExcise.setEnabled(pStat);
        cmbChapter.setEnabled(pStat);
        chkTaxable.setEnabled(pStat);
        chkCaptive.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        txtFrom.setEnabled(pStat);
        txtFromRemarks.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        cmbEDApproval.setEnabled(pStat);
        chkOneTime.setEnabled(pStat);
        chkBlocked.setEnabled(pStat);//New Modification 14/04/2015
        
        chkRND.setEnabled(pStat);
        cmbUser.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        
        //Check that user has Block Rights
        //New Modification 14/04/2015 start
        /*
        if(pStat) {
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,156)) {
                chkBlocked.setEnabled(true);
            }
        }
        */
        //New Modification 14/04/2015 end
        SetupApproval();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjItemAmend.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjItemAmend.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjItemAmend.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                if(ObjItemAmend.getAttribute("CATEGORY_ID").getVal()==13) {
                    lblTitle.setBackground(Color.ORANGE);
                }
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=51;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ShowMessage("...");
        ClearFields();
        txtAmendID.setText(Long.toString((long)ObjItemAmend.getAttribute("AMEND_ID").getVal()));
        txtAmendDate.setText(EITLERPGLOBAL.formatDate((String)ObjItemAmend.getAttribute("AMEND_DATE").getObj()));
        txtAmendReason.setText((String)ObjItemAmend.getAttribute("AMEND_REASON").getObj());
        
        txtItemID.setText((String)ObjItemAmend.getAttribute("ITEM_ID").getObj());
        
        if(ObjItemAmend.getAttribute("CATEGORY_ID").getVal()==13) {
            lblTitle.setText("ITEM MASTER UPDATION -"+txtItemID.getText() + " - STM ITEM");
        } else {
            lblTitle.setText("ITEM MASTER UPDATION -"+txtItemID.getText());
        }
        
        
        
        txtName.setText((String)ObjItemAmend.getAttribute("ITEM_DESCRIPTION").getObj());
        EITLERPGLOBAL.setComboIndex(cmbGroupCode,(int)ObjItemAmend.getAttribute("GROUP_CODE").getVal());
        txtSearchKey.setText((String)ObjItemAmend.getAttribute("SEARCH_KEY").getObj());
        EITLERPGLOBAL.setComboIndex(cmbWareHouse,(String)ObjItemAmend.getAttribute("WAREHOUSE_ID").getObj());
        SelWareHouseID=EITLERPGLOBAL.getCombostrCode(cmbWareHouse);
        
        txtLocationID.setText((String)ObjItemAmend.getAttribute("LOCATION_ID").getObj());
        lblLocationName.setText(clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID,txtLocationID.getText()));
        
        EITLERPGLOBAL.setComboIndex(cmbCategory,(int)ObjItemAmend.getAttribute("CATEGORY_ID").getVal());
        EITLERPGLOBAL.setComboIndex(cmbStdDesc,(int)ObjItemAmend.getAttribute("DESC").getVal());
        EITLERPGLOBAL.setComboIndex(cmbMake,(int)ObjItemAmend.getAttribute("MAKE").getVal());
        EITLERPGLOBAL.setComboIndex(cmbSize,(int)ObjItemAmend.getAttribute("SIZE").getVal());
        EITLERPGLOBAL.setComboIndex(cmbABC,(String)ObjItemAmend.getAttribute("ABC").getObj());
        EITLERPGLOBAL.setComboIndex(cmbXYZ,(String)ObjItemAmend.getAttribute("XYZ").getObj());
        EITLERPGLOBAL.setComboIndex(cmbVEN,(String)ObjItemAmend.getAttribute("VEN").getObj());
        EITLERPGLOBAL.setComboIndex(cmbFSN,(String)ObjItemAmend.getAttribute("FSN").getObj());
        EITLERPGLOBAL.setComboIndex(cmbMF,(String)ObjItemAmend.getAttribute("MF").getObj());
        EITLERPGLOBAL.setComboIndex(cmbEDApproval,(String)ObjItemAmend.getAttribute("SPECIAL_APPROVAL").getObj());
        
        lblRevNo.setText(Integer.toString((int)ObjItemAmend.getAttribute("REVISION_NO").getVal()));
        
        chkOneTime.setSelected(ObjItemAmend.getAttribute("ONETIME").getBool());
        chkCancelled.setSelected(ObjItemAmend.getAttribute("CANCELLED").getBool());
        chkBlocked.setSelected(ObjItemAmend.getAttribute("BLOCKED").getBool());
        
        if((boolean)ObjItemAmend.getAttribute("MAINTAIN_STOCK").getBool()) {
            chkMaintainStock.setSelected(true);
        }
        else {
            chkMaintainStock.setSelected(false);
        }
        
        txtMinQty.setText(Double.toString(ObjItemAmend.getAttribute("MIN_QTY").getVal()));
        txtMaxQty.setText(Double.toString(ObjItemAmend.getAttribute("MAX_QTY").getVal()));
        txtToleranceLimit.setText(Double.toString(ObjItemAmend.getAttribute("TOLERANCE_LIMIT").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbUnit,(int)ObjItemAmend.getAttribute("UNIT").getVal());
        txtRate.setText(Double.toString(ObjItemAmend.getAttribute("UNIT_RATE").getVal()));
        txtQ1Rate.setText(Double.toString(ObjItemAmend.getAttribute("QTR1_RATE").getVal()));
        txtQ2Rate.setText(Double.toString(ObjItemAmend.getAttribute("QTR2_RATE").getVal()));
        txtQ3Rate.setText(Double.toString(ObjItemAmend.getAttribute("QTR3_RATE").getVal()));
        txtQ4Rate.setText(Double.toString(ObjItemAmend.getAttribute("QTR4_RATE").getVal()));
        
        txtDiscount.setText(Double.toString(ObjItemAmend.getAttribute("DNP").getVal()));
        txtRebate.setText(Double.toString(ObjItemAmend.getAttribute("REBATE").getVal()));
                
        
        EITLERPGLOBAL.setComboIndex(cmbTaxCodeType,(String)ObjItemAmend.getAttribute("TAX_CODE_TYPE").getObj());
        SelTaxCodeType=EITLERPGLOBAL.getCombostrCode(cmbTaxCodeType);        
        txtHSNSACCode.setText((String)ObjItemAmend.getAttribute("HSN_SAC_CODE").getObj());
        
        
        if((boolean)ObjItemAmend.getAttribute("EXCISE_APPLICABLE").getBool()) {
            chkExciseApplicable.setSelected(true);
        }
        else {
            chkExciseApplicable.setSelected(false);
        }
        
        txtExcise.setText(Double.toString(ObjItemAmend.getAttribute("EXCISE").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbChapter,(int)ObjItemAmend.getAttribute("CHAPTER_NO").getVal());
        
        if((boolean)ObjItemAmend.getAttribute("TAXABLE").getBool()) {
            chkTaxable.setSelected(true);
        }
        else {
            chkTaxable.setSelected(false);
        }
        
        if((boolean)ObjItemAmend.getAttribute("CAPTIVE_CONSUMABLE").getBool()) {
            chkCaptive.setSelected(true);
        }
        else {
            chkCaptive.setSelected(false);
        }
        
        EITLERPGLOBAL.setComboIndex(cmbSupplier, (int)ObjItemAmend.getAttribute("SUPPLIER_ID").getVal());
        
        
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int)ObjItemAmend.getAttribute("ITEM_HIERARCHY_ID").getVal());
        
        
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal());
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 51, DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        //============================================================//
        
        
        //Showing Audit Trial History
        FormatGridHS();
        DocNo=Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal());
        
        HashMap History=clsItemAmend.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsItem ObjHistory=(clsItem)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //============================================================//
        
        FormatGridRD();
        chkRND.setSelected(ObjItemAmend.getAttribute("RND_APPROVAL").getBool());
        lblSpecify.setVisible(chkRND.isSelected());
        lblUser.setVisible(chkRND.isSelected());
        cmbUser.setVisible(chkRND.isSelected());
        TableRD.setVisible(chkRND.isSelected());
        cmdAdd.setVisible(chkRND.isSelected());
        cmdRemove.setVisible(chkRND.isSelected());
        PanelRD2.setVisible(chkRND.isSelected());
        
        if(chkRND.isSelected()) {
            for(int i=1;i<=ObjItemAmend.colRNDApprovers.size();i++) {
                clsItemRNDApprover ObjApprover=(clsItemRNDApprover)ObjItemAmend.colRNDApprovers.get(Integer.toString(i));
                
                Object[] rowData=new Object[3];
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjApprover.getAttribute("USER_ID").getVal());
                rowData[2]=Integer.toString((int)ObjApprover.getAttribute("USER_ID").getVal());
                DataModelRD.addRow(rowData);
            }
        }
        
        ShowMessage("Ready");
    }
    
    
    
    private void DisplayItemData(clsItem pItem) {
        
        ShowMessage("...");
        ClearFields();
        
        txtItemID.setText((String)pItem.getAttribute("ITEM_ID").getObj());
        txtName.setText((String)pItem.getAttribute("ITEM_DESCRIPTION").getObj());
        EITLERPGLOBAL.setComboIndex(cmbGroupCode,(int)pItem.getAttribute("GROUP_CODE").getVal());
        txtSearchKey.setText((String)pItem.getAttribute("SEARCH_KEY").getObj());
        EITLERPGLOBAL.setComboIndex(cmbWareHouse,(String)pItem.getAttribute("WAREHOUSE_ID").getObj());
        SelWareHouseID=EITLERPGLOBAL.getCombostrCode(cmbWareHouse);
        
        txtLocationID.setText((String)pItem.getAttribute("LOCATION_ID").getObj());
        lblLocationName.setText(clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID,txtLocationID.getText()));
        
        EITLERPGLOBAL.setComboIndex(cmbCategory,(int)pItem.getAttribute("CATEGORY_ID").getVal());
        EITLERPGLOBAL.setComboIndex(cmbStdDesc,(int)pItem.getAttribute("DESC").getVal());
        EITLERPGLOBAL.setComboIndex(cmbMake,(int)pItem.getAttribute("MAKE").getVal());
        EITLERPGLOBAL.setComboIndex(cmbSize,(int)pItem.getAttribute("SIZE").getVal());
        EITLERPGLOBAL.setComboIndex(cmbABC,(String)pItem.getAttribute("ABC").getObj());
        EITLERPGLOBAL.setComboIndex(cmbXYZ,(String)pItem.getAttribute("XYZ").getObj());
        EITLERPGLOBAL.setComboIndex(cmbVEN,(String)pItem.getAttribute("VEN").getObj());
        EITLERPGLOBAL.setComboIndex(cmbFSN,(String)pItem.getAttribute("FSN").getObj());
        EITLERPGLOBAL.setComboIndex(cmbMF,(String)pItem.getAttribute("MF").getObj());
        EITLERPGLOBAL.setComboIndex(cmbEDApproval,(String)pItem.getAttribute("SPECIAL_APPROVAL").getObj());
        
        lblRevNo.setText(Integer.toString((int)pItem.getAttribute("REVISION_NO").getVal()));
        
        chkOneTime.setSelected(pItem.getAttribute("ONETIME").getBool());
        
        if((boolean)pItem.getAttribute("MAINTAIN_STOCK").getBool()) {
            chkMaintainStock.setSelected(true);
        }
        else {
            chkMaintainStock.setSelected(false);
        }
        
        txtMinQty.setText(Double.toString(pItem.getAttribute("MIN_QTY").getVal()));
        txtMaxQty.setText(Double.toString(pItem.getAttribute("MAX_QTY").getVal()));
        txtToleranceLimit.setText(Double.toString(pItem.getAttribute("TOLERANCE_LIMIT").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbUnit,(int)pItem.getAttribute("UNIT").getVal());
        txtRate.setText(Double.toString(pItem.getAttribute("UNIT_RATE").getVal()));
        txtQ1Rate.setText(Double.toString(pItem.getAttribute("QTR1_RATE").getVal()));
        txtQ2Rate.setText(Double.toString(pItem.getAttribute("QTR2_RATE").getVal()));
        txtQ3Rate.setText(Double.toString(pItem.getAttribute("QTR3_RATE").getVal()));
        txtQ4Rate.setText(Double.toString(pItem.getAttribute("QTR4_RATE").getVal()));
        
        txtDiscount.setText(Double.toString(pItem.getAttribute("DNP").getVal()));
        txtRebate.setText(Double.toString(pItem.getAttribute("REBATE").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbTaxCodeType,(String)pItem.getAttribute("TAX_CODE_TYPE").getObj());
        SelTaxCodeType=EITLERPGLOBAL.getCombostrCode(cmbTaxCodeType);
        txtHSNSACCode.setText((String)pItem.getAttribute("HSN_SAC_CODE").getObj());
        
        if((boolean)pItem.getAttribute("EXCISE_APPLICABLE").getBool()) {
            chkExciseApplicable.setSelected(true);
        }
        else {
            chkExciseApplicable.setSelected(false);
        }
        
        txtExcise.setText(Double.toString(pItem.getAttribute("EXCISE").getVal()));
        
        EITLERPGLOBAL.setComboIndex(cmbChapter,(int)pItem.getAttribute("CHAPTER_NO").getVal());
        
        if((boolean)pItem.getAttribute("TAXABLE").getBool()) {
            chkTaxable.setSelected(true);
        }
        else {
            chkTaxable.setSelected(false);
        }
        
        if((boolean)pItem.getAttribute("CAPTIVE_CONSUMABLE").getBool()) {
            chkCaptive.setSelected(true);
        }
        else {
            chkCaptive.setSelected(false);
        }
        
        EITLERPGLOBAL.setComboIndex(cmbSupplier, (int)pItem.getAttribute("SUPPLIER_ID").getVal());
        
        txtToRemarks.setText("");
        SetupApproval();
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int)pItem.getAttribute("ITEM_HIERARCHY_ID").getVal());
        
        
        
        FormatGridRD();
        chkRND.setSelected(pItem.getAttribute("RND_APPROVAL").getBool());
        lblSpecify.setVisible(chkRND.isSelected());
        lblUser.setVisible(chkRND.isSelected());
        cmbUser.setVisible(chkRND.isSelected());
        TableRD.setVisible(chkRND.isSelected());
        cmdAdd.setVisible(chkRND.isSelected());
        cmdRemove.setVisible(chkRND.isSelected());
        PanelRD2.setVisible(chkRND.isSelected());
        
        if(chkRND.isSelected()) {
            for(int i=1;i<=pItem.colRNDApprovers.size();i++) {
                clsItemRNDApprover ObjApprover=(clsItemRNDApprover)pItem.colRNDApprovers.get(Integer.toString(i));
                
                Object[] rowData=new Object[3];
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjApprover.getAttribute("USER_ID").getVal());
                rowData[2]=Integer.toString((int)ObjApprover.getAttribute("USER_ID").getVal());
                DataModelRD.addRow(rowData);
            }
        }
        
        ShowMessage("Ready");
    }
    //Sets data to the Class Object
    private void SetData() {
        ObjItemAmend.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjItemAmend.setAttribute("ITEM_ID",txtItemID.getText());
        ObjItemAmend.setAttribute("ITEM_DESCRIPTION",txtName.getText());
        
        ObjItemAmend.setAttribute("AMEND_DATE",EITLERPGLOBAL.formatDateDB(txtAmendDate.getText()));
        ObjItemAmend.setAttribute("AMEND_REASON",txtAmendReason.getText());
        
        ObjItemAmend.setAttribute("GROUP_CODE",EITLERPGLOBAL.getComboCode(cmbGroupCode));
        ObjItemAmend.setAttribute("SEARCH_KEY",txtSearchKey.getText());
        ObjItemAmend.setAttribute("WAREHOUSE_ID",EITLERPGLOBAL.getCombostrCode(cmbWareHouse));
        ObjItemAmend.setAttribute("LOCATION_ID",txtLocationID.getText());
        ObjItemAmend.setAttribute("CATEGORY_ID",EITLERPGLOBAL.getComboCode(cmbCategory));
        ObjItemAmend.setAttribute("DESC",EITLERPGLOBAL.getComboCode(cmbStdDesc));
        ObjItemAmend.setAttribute("MAKE",EITLERPGLOBAL.getComboCode(cmbMake));
        ObjItemAmend.setAttribute("SIZE",EITLERPGLOBAL.getComboCode(cmbSize));
        ObjItemAmend.setAttribute("ABC",EITLERPGLOBAL.getCombostrCode(cmbABC));
        ObjItemAmend.setAttribute("XYZ",EITLERPGLOBAL.getCombostrCode(cmbXYZ));
        ObjItemAmend.setAttribute("VEN",EITLERPGLOBAL.getCombostrCode(cmbVEN));
        ObjItemAmend.setAttribute("FSN",EITLERPGLOBAL.getCombostrCode(cmbFSN));
        ObjItemAmend.setAttribute("MF",EITLERPGLOBAL.getCombostrCode(cmbMF));
        ObjItemAmend.setAttribute("SPECIAL_APPROVAL",EITLERPGLOBAL.getCombostrCode(cmbEDApproval));
        ObjItemAmend.setAttribute("ONETIME",chkOneTime.isSelected());
        ObjItemAmend.setAttribute("RND_APPROVAL",chkRND.isSelected());
        
        if(chkMaintainStock.isSelected()) {
            ObjItemAmend.setAttribute("MAINTAIN_STOCK",true);
        }
        else {
            ObjItemAmend.setAttribute("MAINTAIN_STOCK",false);
        }
        
        if(chkBlocked.isSelected()) {
            ObjItemAmend.setAttribute("BLOCKED",true);
        }
        else {
            ObjItemAmend.setAttribute("BLOCKED",false);
        }
        
        ObjItemAmend.setAttribute("MIN_QTY",Double.parseDouble(txtMinQty.getText()));
        ObjItemAmend.setAttribute("MAX_QTY",Double.parseDouble(txtMaxQty.getText()));
        ObjItemAmend.setAttribute("TOLERANCE_LIMIT",Double.parseDouble(txtToleranceLimit.getText()));
        
        ObjItemAmend.setAttribute("UNIT",EITLERPGLOBAL.getComboCode(cmbUnit));
        ObjItemAmend.setAttribute("UNIT_RATE",Double.parseDouble(txtRate.getText()));
        ObjItemAmend.setAttribute("QTR1_RATE",Double.parseDouble(txtQ1Rate.getText()));
        ObjItemAmend.setAttribute("QTR2_RATE",Double.parseDouble(txtQ2Rate.getText()));
        ObjItemAmend.setAttribute("QTR3_RATE",Double.parseDouble(txtQ3Rate.getText()));
        ObjItemAmend.setAttribute("QTR4_RATE",Double.parseDouble(txtQ4Rate.getText()));
        
        ObjItemAmend.setAttribute("DNP",Double.parseDouble(txtDiscount.getText()));
        ObjItemAmend.setAttribute("REBATE",Double.parseDouble(txtRebate.getText()));
        
        
        ObjItemAmend.setAttribute("TAX_CODE_TYPE",EITLERPGLOBAL.getCombostrCode(cmbTaxCodeType));
        ObjItemAmend.setAttribute("HSN_SAC_CODE",txtHSNSACCode.getText());
        
        if(chkExciseApplicable.isSelected()) {
            ObjItemAmend.setAttribute("EXCISE_APPLICABLE",true);
        }
        else {
            ObjItemAmend.setAttribute("EXCISE_APPLICABLE",false);
        }
        
        ObjItemAmend.setAttribute("EXCISE",Double.parseDouble(txtExcise.getText()));
        ObjItemAmend.setAttribute("CHAPTER_NO",EITLERPGLOBAL.getComboCode(cmbChapter));
        
        if(chkTaxable.isSelected()) {
            ObjItemAmend.setAttribute("TAXABLE",true);
        }
        else {
            ObjItemAmend.setAttribute("TAXABLE",false);
        }
        
        if(chkCaptive.isSelected()) {
            ObjItemAmend.setAttribute("CAPTIVE_CONSUMABLE",true);
        }
        else {
            ObjItemAmend.setAttribute("CAPTIVE_CONSUMABLE",false);
        }
        
        ObjItemAmend.setAttribute("SUPPLIER_ID",EITLERPGLOBAL.getComboCode(cmbSupplier));
        ObjItemAmend.setAttribute("ITEM_HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        
        
        //========= Set RND Approvers ============//
        ObjItemAmend.colRNDApprovers.clear();
        
        if(chkRND.isSelected()) {
            for(int i=0;i<TableRD.getRowCount();i++) {
                clsItemRNDApprover ObjApprover=new clsItemRNDApprover();
                
                int UserID=Integer.parseInt((String)TableRD.getValueAt(i, 2));
                
                ObjApprover.setAttribute("USER_ID",UserID);
                
                ObjItemAmend.colRNDApprovers.put(Integer.toString(ObjItemAmend.colRNDApprovers.size()+1),ObjApprover);
            }
        }
        //========================================//
        
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjItemAmend.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjItemAmend.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjItemAmend.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjItemAmend.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //----- Update Approval Specific Fields -----------//
        ObjItemAmend.setAttribute("ITEM_HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjItemAmend.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjItemAmend.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjItemAmend.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjItemAmend.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjItemAmend.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjItemAmend.setAttribute("APPROVAL_STATUS","R");
            ObjItemAmend.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjItemAmend.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
    }
    
    private void SetupApproval() {
        
        if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(true);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 51,Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal()));
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,51,FromUserID,Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal()));
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //Give Special Final Approval Rights to Mr. K.P.Shah in case of One time item.
        String ItemID=txtItemID.getText().trim();
        
        if(clsItem.IsOneTime(EITLERPGLOBAL.gCompanyID, ItemID)) {
            OpgFinal.setEnabled(true);
        }
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
        
    }
    
    
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,941)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,152)) {
        cmdEdit.setEnabled(true);
        //}
        //else {
        //cmdEdit.setEnabled(false);
        //}
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,943)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,944)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        
        //----- Generate cmbType ------- //
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        
        clsUser ObjUser=new clsUser();
        
        List=ObjUser.getList(strCondition);
        
        for(int i=1;i<=List.size();i++) {
            clsUser ObjPara=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int)ObjPara.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjPara.getAttribute("USER_NAME").getObj();
            aData.strCode="";
            cmbUserModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbTypeModel=new EITLComboModel();
        cmbGroupCode.removeAllItems();
        cmbGroupCode.setModel(cmbTypeModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='ITEM_TYPE'";
        ComboData aData=new ComboData();
        aData.Code=0;
        aData.Text="";
        aData.strCode="";
        cmbTypeModel.addElement(aData);
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTypeModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbCategoryModel=new EITLComboModel();
        cmbCategory.removeAllItems();
        cmbCategory.setModel(cmbCategoryModel);
        aData=new ComboData();
        aData.Code=0;
        aData.Text="";
        aData.strCode="";
        cmbCategoryModel.addElement(aData);
        List=clsItemCategory.getCategoryList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            clsItemCategory ObjCategory=(clsItemCategory) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjCategory.getAttribute("CATEGORY_ID").getVal();
            aData.Text=(String)ObjCategory.getAttribute("CATEGORY_DESC").getObj();
            cmbCategoryModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbWareHouse ------- //
        cmbWareHouseModel=new EITLComboModel();
        cmbWareHouse.removeAllItems();
        cmbWareHouse.setModel(cmbWareHouseModel);
        
        List=clsWarehouse.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            clsWarehouse ObjWareHouse=(clsWarehouse) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.strCode=(String)ObjWareHouse.getAttribute("WAREHOUSE_ID").getObj();
            aData.Text=(String)ObjWareHouse.getAttribute("WAREHOUSE_NAME").getObj();
            cmbWareHouseModel.addElement(aData);
        }
        //------------------------------ //
        
        //----- Generate cmbType ------- //
        cmbSuppModel=new EITLComboModel();
        cmbSupplier.removeAllItems();
        cmbSupplier.setModel(cmbSuppModel);
        
        List=clsSupplier.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            clsSupplier ObjSupplier=(clsSupplier) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjSupplier.getAttribute("SUPP_ID").getVal();
            aData.Text=(String)ObjSupplier.getAttribute("SUPP_NAME").getObj();
            cmbSuppModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbStdDescModel =new EITLComboModel();
        cmbStdDesc.removeAllItems();
        cmbStdDesc.setModel(cmbStdDescModel);
        
        List=clsParameter.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='ITEM_DESC'");
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            cmbStdDescModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbMakeModel =new EITLComboModel();
        cmbMake.removeAllItems();
        cmbMake.setModel(cmbMakeModel);
        
        List=clsParameter.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='ITEM_MAKE'");
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            cmbMakeModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbSizeModel =new EITLComboModel();
        cmbSize.removeAllItems();
        cmbSize.setModel(cmbSizeModel);
        
        List=clsParameter.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='ITEM_SIZE'");
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            cmbSizeModel.addElement(aData);
        }
        //------------------------------ //
        
        //----- Generate cmbType ------- //
        cmbUnitModel =new EITLComboModel();
        cmbUnit.removeAllItems();
        cmbUnit.setModel(cmbUnitModel);
        
        List=clsParameter.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='UNIT'");
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            cmbUnitModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbChapterModel=new EITLComboModel();
        cmbChapter.removeAllItems();
        cmbChapter.setModel(cmbChapterModel);
        
        List=clsParameter.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='CHAPTER'");
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            cmbChapterModel.addElement(aData);
        }
        //------------------------------ //
        
        
        
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=51 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=51 ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        // --------------- Analysis Combo Boxes ----------- //
        cmbEDApprovalModel=new EITLComboModel();
        cmbEDApproval.removeAllItems();
        cmbEDApproval.setModel(cmbEDApprovalModel);
        
        aData=new ComboData();
        aData.strCode="A";
        aData.Text="Audit";
        cmbEDApprovalModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="E";
        aData.Text="E. D.";
        cmbEDApprovalModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="M";
        aData.Text="M.D.";
        cmbEDApprovalModel.addElement(aData);
        //------------------------------------------------- //
        
        // --------------- Analysis Combo Boxes ----------- //
        cmbABCModel=new EITLComboModel();
        cmbABC.removeAllItems();
        cmbABC.setModel(cmbABCModel);
        
        aData=new ComboData();
        aData.strCode=" ";
        aData.Text=" ";
        cmbABCModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="A";
        aData.Text="A";
        cmbABCModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="B";
        aData.Text="B";
        cmbABCModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="C";
        aData.Text="C";
        cmbABCModel.addElement(aData);
        //------------------------------------------------- //
        
        // --------------- Analysis Combo Boxes ----------- //
        cmbXYZModel=new EITLComboModel();
        cmbXYZ.removeAllItems();
        cmbXYZ.setModel(cmbXYZModel);
        
        aData=new ComboData();
        aData.strCode=" ";
        aData.Text=" ";
        cmbXYZModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="X";
        aData.Text="X";
        cmbXYZModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="Y";
        aData.Text="Y";
        cmbXYZModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="Z";
        aData.Text="Z";
        cmbXYZModel.addElement(aData);
        //------------------------------------------------- //
        
        
        // --------------- Analysis Combo Boxes ----------- //
        cmbVENModel=new EITLComboModel();
        cmbVEN.removeAllItems();
        cmbVEN.setModel(cmbVENModel);
        
        aData=new ComboData();
        aData.strCode=" ";
        aData.Text=" ";
        cmbVENModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="V";
        aData.Text="V";
        cmbVENModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="E";
        aData.Text="E";
        cmbVENModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="N";
        aData.Text="N";
        cmbVENModel.addElement(aData);
        //------------------------------------------------- //
        
        
        // --------------- Analysis Combo Boxes ----------- //
        cmbFSNModel=new EITLComboModel();
        cmbFSN.removeAllItems();
        cmbFSN.setModel(cmbFSNModel);
        
        aData=new ComboData();
        aData.strCode=" ";
        aData.Text=" ";
        cmbFSNModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="F";
        aData.Text="F";
        cmbFSNModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="S";
        aData.Text="S";
        cmbFSNModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="N";
        aData.Text="N";
        cmbFSNModel.addElement(aData);
        //------------------------------------------------- //
        
        // --------------- Analysis Combo Boxes ----------- //
        cmbMFModel=new EITLComboModel();
        cmbMF.removeAllItems();
        cmbMF.setModel(cmbMFModel);
        
        aData=new ComboData();
        aData.strCode=" ";
        aData.Text=" ";
        cmbMFModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="M";
        aData.Text="M";
        cmbMFModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="F";
        aData.Text="F";
        cmbMFModel.addElement(aData);
        //------------------------------------------------- //
        
         // --------------- Tax Code Type Combo Box ----------- //
        cmbTaxCodeModel=new EITLComboModel();
        cmbTaxCodeType.removeAllItems();
        cmbTaxCodeType.setModel(cmbTaxCodeModel);
        
        aData=new ComboData();
        aData.strCode="HSN";
        aData.Text="HSN";
        cmbTaxCodeModel.addElement(aData);
        aData=new ComboData();
        aData.strCode="SAC";
        aData.Text="SAC";
        cmbTaxCodeModel.addElement(aData);
        cmbTaxCodeType.setSelectedIndex(0);
        //------------------------------------------------- //
    }
    
    
    private void GenerateLocationCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 51,Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal()));
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
        
    }
    
    
    private void MoveFirst() {
        ObjItemAmend.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjItemAmend.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjItemAmend.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjItemAmend.MoveLast();
        DisplayData();
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        String ItemID="";
        LOV aList=new LOV();
        String Condition = "";
        if (EITLERPGLOBAL.gNewUserID!=6) {
            Condition=" AND ITEM_ID NOT LIKE 'RM%' AND CATEGORY_ID<>13 ";
        }
        aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" "+Condition+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
        aList.ReturnCol=1;
        aList.ShowReturnCol=true;
        aList.DefaultSearchOn=1;
        
        if(aList.ShowLOV()) {
            ItemID=aList.ReturnVal;
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SetupApproval();
            
            lblTitle.setText("ITEM MASTER UPDATION -"+txtItemID.getText());
            lblTitle.setBackground(Color.BLUE);
            
            clsItem ObjItem=(clsItem)clsItem.getObjectEx(EITLERPGLOBAL.gCompanyID, ItemID);
            
            DisplayItemData(ObjItem);
            
            txtAmendDate.setText(EITLERPGLOBAL.getCurrentDate());
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select Item ");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal());
        if(ObjItemAmend.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            
            if(ApprovalFlow.IsCreator(51,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,152)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            DisableToolbar();
            txtName.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
        
        
    }
    
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(ObjItemAmend.CanDelete((int)EITLERPGLOBAL.gCompanyID,(String)ObjItemAmend.getAttribute("ITEM_ID").getObj(),(int)EITLERPGLOBAL.gNewUserID)) {
            if(ObjItemAmend.Delete()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is"+ObjItemAmend.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved item or waiting approval for other user");
        }
    }
    
    private void Save() {
        // --------- Form Level Validations ------------ //
        if(txtAmendDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter updation date");
            return;
        }
        
        if(txtAmendReason.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter update reason");
            return;
        }
        
        if(!EITLERPGLOBAL.isDate(txtAmendDate.getText())) {
            JOptionPane.showMessageDialog(null,"Please enter valid updation date");
            return;
        }
        
        if(txtItemID.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Item Code");
            return;
        }
        
        if(txtName.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter item name");
            return;
        }
        
        if(cmbCategory.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select item category. If there is no item in list, do the entry in Parameter master");
            return;
        }
        
        if(cmbGroupCode.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select type of item. If there is no item in list, do the entry in Parameter master");
            return;
        }
        
        if(cmbWareHouse.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select ware house. If there is no item in list, do the entry in Ware house master");
            return;
        }
        
        if(txtLocationID.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please select Location. If there is no item in the list, do the entry in Location Master");
            return;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return;
        }
        
        //==========================================================//
        if(EditMode==EITLERPGLOBAL.ADD) {
            int AmendCount=clsItemAmend.getUnderApprovalCount(EITLERPGLOBAL.gCompanyID,txtItemID.getText());
            if(AmendCount>0) {
                JOptionPane.showMessageDialog(null,"One amendment of this item is already under approval. Cannot create another amendment");
                return;
            }
        }
        //=========================================================//
        
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjItemAmend.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving item. Error is"+ObjItemAmend.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjItemAmend.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving item. Error is"+ObjItemAmend.LastError);
                return;
            }
        }
        
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
        //Notify Pending Approval Form about the save
        frmPA.RefreshView();
        
        ShowMessage("Ready");
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    
    public void FindEx(int pCompanyID,int pItemAmendID) {
        ObjItemAmend.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND AMEND_ID="+pItemAmendID);
        ObjItemAmend.MoveFirst();
        DisplayData();
    }
    
    public void FindWaiting() {
        //ObjItemAmend.Filter("SELECT D_INV_ITEM_MASTER_AMEND.* FROM D_INV_ITEM_MASTER_AMEND,D_COM_DOC_DATA WHERE D_INV_ITEM_MASTER_AMEND.AMEND_ID=D_COM_DOC_DATA.DOC_NO AND D_INV_ITEM_MASTER_AMEND.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_ITEM_MASTER_AMEND.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=51");
        ObjItemAmend.Filter(" WHERE AMEND_ID IN (SELECT D_INV_ITEM_MASTER_AMEND.AMEND_ID FROM D_INV_ITEM_MASTER_AMEND,D_COM_DOC_DATA WHERE D_INV_ITEM_MASTER_AMEND.AMEND_ID=D_COM_DOC_DATA.DOC_NO AND D_INV_ITEM_MASTER_AMEND.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_ITEM_MASTER_AMEND.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=51)");
        ObjItemAmend.MoveFirst();
        DisplayData();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.frmItemFind",true);
        frmItemFind ObjReturn= (frmItemFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjItemAmend.Filter(ObjReturn.strQuery)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void SetNumberFormats() {
        DecimalFormat decimalFormat=new DecimalFormat("0.00");
        NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
        ObjFormater.setAllowsInvalid(false);
        txtMinQty.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));
        
        NumberFormatter ObjFormater2=new NumberFormatter(decimalFormat);
        ObjFormater2.setAllowsInvalid(false);
        txtMaxQty.setFormatterFactory(new DefaultFormatterFactory(ObjFormater2));
        
        NumberFormatter ObjFormater3=new NumberFormatter(decimalFormat);
        ObjFormater3.setAllowsInvalid(false);
        txtRate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater3));
        
        NumberFormatter ObjFormater4=new NumberFormatter(decimalFormat);
        ObjFormater4.setAllowsInvalid(false);
        txtQ1Rate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater4));
        
        NumberFormatter ObjFormater5=new NumberFormatter(decimalFormat);
        ObjFormater5.setAllowsInvalid(false);
        txtQ2Rate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater5));
        
        NumberFormatter ObjFormater6=new NumberFormatter(decimalFormat);
        ObjFormater6.setAllowsInvalid(false);
        txtQ3Rate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater6));
        
        NumberFormatter ObjFormater7=new NumberFormatter(decimalFormat);
        ObjFormater7.setAllowsInvalid(false);
        txtQ4Rate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater7));
        
        NumberFormatter ObjFormater8=new NumberFormatter(decimalFormat);
        ObjFormater8.setAllowsInvalid(false);
        txtDiscount.setFormatterFactory(new DefaultFormatterFactory(ObjFormater8));
        
        NumberFormatter ObjFormater9=new NumberFormatter(decimalFormat);
        ObjFormater9.setAllowsInvalid(false);
        txtRebate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater9));
        
        
        NumberFormatter ObjFormater10=new NumberFormatter(decimalFormat);
        ObjFormater10.setAllowsInvalid(false);
        txtToleranceLimit.setFormatterFactory(new DefaultFormatterFactory(ObjFormater10));
        
        txtFrom.setEditable(false);
        txtFromRemarks.setEditable(false);
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        TableA.getColumnModel().getColumn(0).setCellRenderer(Paint);
        Paint.setColor(1,1,Color.CYAN);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        
        for(int i=0;i<Tab2.getComponentCount()-1;i++) {
            if(Tab2.getComponent(i).getName()!=null) {
                
                FieldName=Tab2.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab2.getComponent(i).setEnabled(true);
                }
                
            }
        }
        
        for(int i=0;i<Tab3.getComponentCount()-1;i++) {
            if(Tab3.getComponent(i).getName()!=null) {
                
                FieldName=Tab3.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab3.getComponent(i).setEnabled(true);
                }
                
            }
        }
        
        
        for(int i=0;i<Tab4.getComponentCount()-1;i++) {
            if(Tab4.getComponent(i).getName()!=null) {
                
                FieldName=Tab4.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab4.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    private void FormatGridRD() {
        DataModelRD=new EITLTableModel();
        
        TableRD.removeAll();
        TableRD.setModel(DataModelRD);
        
        //Set the table Readonly
        DataModelRD.TableReadOnly(true);
        
        //Add the columns
        DataModelRD.addColumn("Sr.");
        DataModelRD.addColumn("User");
        DataModelRD.addColumn("User ID");
        
        TableRD.setAutoResizeMode(TableRD.AUTO_RESIZE_OFF);
        TableRD.getColumnModel().getColumn(2).setMaxWidth(0);
        
    }
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 51, Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal()), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 51,Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal()), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,51,Integer.toString((int)ObjItemAmend.getAttribute("AMEND_ID").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    
}
