/*
 * frmDocumentFlow.java
 *
 * Created on April 28, 2004, 12:02 PM
 */

package EITLERP;

 
/*<APPLET CODE=frmDocumentFlow.class HEIGHT=400 WIDTH=640></APPLET>*/

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.util.*;
import EITLERP.Stores.*;
import EITLERP.Purchase.*;
import java.sql.*;
import java.net.*;

/**
 *
 * @author  nrpithva
 */
public class frmDocumentFlow extends javax.swing.JApplet {
    
    private int SelModule=0;
    private int SelDeptID=0;
    private String withDocNo="";
    private EITLTableModel DataModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbModuleModel=new EITLComboModel();
    private EITLComboModel cmbDeptModel=new EITLComboModel();
    private int DrillDownLevel=0;
    private boolean DrillDown=false;
    private String headCondition="",lineCondition="";
    
    
    //----- Drill Down Levels -----//
    // 0 - Departmentwise Pending Documents
    // 1 - Documentwise Approval Status
    //----------------------------//
    
    /** Initializes the applet frmPendingApprovals */
    public void init() {
        System.gc(); //Garbage Collect
        setSize(670,530);
        initComponents();
        GenerateCombo();
        FormatGrid();
        cmdDrillDown.setVisible(false);
        cmdShowDoc.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        cmdShow = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        cmbModule = new javax.swing.JComboBox();
        chkDept = new javax.swing.JCheckBox();
        cmdDrillDown = new javax.swing.JButton();
        lblModule = new javax.swing.JLabel();
        chkDate = new javax.swing.JCheckBox();
        txtFromDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        chkApproved = new javax.swing.JCheckBox();
        lblStatus = new javax.swing.JLabel();
        chkExecuted = new javax.swing.JCheckBox();
        Tab = new javax.swing.JTabbedPane();
        DocPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdShowApproval = new javax.swing.JButton();
        cmdShowDoc = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocType = new javax.swing.JLabel();
        lblDocNo = new javax.swing.JLabel();
        lblDocDate = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        
        getContentPane().setLayout(null);
        
        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText(" DOCUMENT FLOW INFORMATION");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-2, 0, 650, 25);
        
        jLabel3.setText("Select Module ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(12, 89, 94, 15);
        
        cmbDept.setNextFocusableComponent(cmdShow);
        cmbDept.setEnabled(false);
        getContentPane().add(cmbDept);
        cmbDept.setBounds(105, 123, 216, 24);
        
        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 250, 642, 4);
        
        cmdShow.setText("Show ");
        cmdShow.setNextFocusableComponent(Table);
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdShow);
        cmdShow.setBounds(392, 214, 96, 25);
        
        jLabel4.setText("Document No.");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(8, 162, 99, 15);
        
        getContentPane().add(txtDocNo);
        txtDocNo.setBounds(106, 160, 133, 23);
        
        cmbModule.setNextFocusableComponent(cmdShow);
        getContentPane().add(cmbModule);
        cmbModule.setBounds(105, 87, 216, 24);
        
        chkDept.setText("Dept.");
        chkDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkDeptItemStateChanged(evt);
            }
        });
        
        getContentPane().add(chkDept);
        chkDept.setBounds(12, 123, 69, 23);
        
        cmdDrillDown.setText("Drill Down");
        cmdDrillDown.setNextFocusableComponent(Table);
        cmdDrillDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDrillDownActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdDrillDown);
        cmdDrillDown.setBounds(500, 212, 138, 25);
        
        lblModule.setFont(new java.awt.Font("Dialog", 1, 18));
        lblModule.setForeground(new java.awt.Color(51, 51, 255));
        getContentPane().add(lblModule);
        lblModule.setBounds(4, 29, 509, 22);
        
        chkDate.setText("From Date");
        chkDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkDateItemStateChanged(evt);
            }
        });
        
        getContentPane().add(chkDate);
        chkDate.setBounds(7, 197, 98, 23);
        
        txtFromDate.setEnabled(false);
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(105, 198, 105, 24);
        
        jLabel2.setText("To");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(218, 202, 23, 15);
        
        txtToDate.setEnabled(false);
        getContentPane().add(txtToDate);
        txtToDate.setBounds(242, 198, 105, 23);
        
        chkApproved.setText("Only Approved Documents");
        getContentPane().add(chkApproved);
        chkApproved.setBounds(366, 88, 195, 23);
        
        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(9, 500, 650, 22);
        
        chkExecuted.setSelected(true);
        chkExecuted.setText("Include Executed Documents");
        getContentPane().add(chkExecuted);
        chkExecuted.setBounds(366, 119, 250, 23);
        
        DocPanel.setLayout(null);
        
        DocPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Table.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        
        jScrollPane1.setViewportView(Table);
        
        DocPanel.add(jScrollPane1);
        jScrollPane1.setBounds(4, 4, 468, 196);
        
        cmdShowApproval.setText("Show Approval");
        cmdShowApproval.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cmdShowApproval.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        cmdShowApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowApprovalActionPerformed(evt);
            }
        });
        
        DocPanel.add(cmdShowApproval);
        cmdShowApproval.setBounds(477, 5, 150, 26);
        
        cmdShowDoc.setText("Open Document");
        DocPanel.add(cmdShowDoc);
        cmdShowDoc.setBounds(479, 36, 147, 25);
        
        Tab.addTab("Documents", DocPanel);
        
        jPanel3.setLayout(null);
        
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        TableA.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        jScrollPane2.setViewportView(TableA);
        
        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(160, 4, 468, 196);
        
        lblDocType.setText("Document Type");
        jPanel3.add(lblDocType);
        lblDocType.setBounds(8, 8, 144, 15);
        
        lblDocNo.setText("Document No.");
        jPanel3.add(lblDocNo);
        lblDocNo.setBounds(9, 36, 144, 15);
        
        lblDocDate.setText("Document Date");
        jPanel3.add(lblDocDate);
        lblDocDate.setBounds(10, 61, 144, 15);
        
        Tab.addTab("Approval Flow", jPanel3);
        
        getContentPane().add(Tab);
        Tab.setBounds(13, 259, 638, 232);
        
        jPanel4.setBackground(new java.awt.Color(255, 255, 204));
        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(5, 75, 642, 4);
        
    }//GEN-END:initComponents

    private void cmdShowApprovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowApprovalActionPerformed
        // TODO add your handling code here:
        ShowApproval();
    }//GEN-LAST:event_cmdShowApprovalActionPerformed
    
    private void chkDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkDateItemStateChanged
        // TODO add your handling code here:
        txtFromDate.setEnabled(chkDate.isSelected());
        txtToDate.setEnabled(chkDate.isSelected());
    }//GEN-LAST:event_chkDateItemStateChanged
    
    private void cmdDrillDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDrillDownActionPerformed
        // TODO add your handling code here:
        
        DrillDown();
    }//GEN-LAST:event_cmdDrillDownActionPerformed
    
    private void chkDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkDeptItemStateChanged
        // TODO add your handling code here:
        cmbDept.setEnabled(chkDept.isSelected());
    }//GEN-LAST:event_chkDeptItemStateChanged
    
    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()==2) {
            DrillDown();
        }
    }//GEN-LAST:event_TableMouseClicked
    
    
    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        DrillDown=false;
        SelModule=EITLERPGLOBAL.getComboCode(cmbModule);
        GenerateGrid();
    }//GEN-LAST:event_cmdShowActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DocPanel;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JCheckBox chkApproved;
    private javax.swing.JCheckBox chkDate;
    private javax.swing.JCheckBox chkDept;
    private javax.swing.JCheckBox chkExecuted;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JButton cmdDrillDown;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdShowApproval;
    private javax.swing.JButton cmdShowDoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDocDate;
    private javax.swing.JLabel lblDocNo;
    private javax.swing.JLabel lblDocType;
    private javax.swing.JLabel lblModule;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGrid() {
        //Each Module will have different Table Model
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        Table.setModel(DataModel);
        
        //Set the table Readonly
        DataModel.TableReadOnly(true);
        
        //Add Columns
        DataModel.addColumn("Document No.");
        DataModel.addColumn("Document Date");
        DataModel.addColumn("Department");
        DataModel.addColumn("Approved");
        DataModel.addColumn("Executed");
        
        //Now hide the column 1
        TableColumnModel ColModel=Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
    }
    
    
    private void GenerateGridDept() {
        
        DrillDownLevel=0;
        
        HashMap List=new HashMap();
        
        FormatGrid();
        
        List=ApprovalFlow.getDocumentList(EITLERPGLOBAL.gCompanyID, SelModule, SelDeptID);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            
            Object[] rowData=new Object[2];
            rowData[0]=(String)ObjFlow.getAttribute("DOC_NO").getObj();
            rowData[1]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("DOC_DATE").getObj());
            
            DataModel.addRow(rowData);
        }
    }
    
    
    private void DrillDown() {
        withDocNo="";
        
        DrillDown=true;
        
        SelModule=EITLERPGLOBAL.getComboCode(cmbModule);
        
        if(!txtDocNo.getText().trim().equals("")) {
            withDocNo=txtDocNo.getText();
        }
        else {
            
            if(Table.getRowCount()>0&&Table.getSelectedRow()>=0) {
                withDocNo=(String)Table.getValueAt(Table.getSelectedRow(), 0);
            }
            else {
                JOptionPane.showMessageDialog(null,"Please select the document from the table first");
                return;
            }
            
            txtDocNo.setText(withDocNo);
        }
        
        if(SelModule==2) {
            SelModule=3;
            GenerateGrid();
            return;
        }
        
        
        if(SelModule==3) {
            SelModule=21;
            GenerateGrid();
            return;
        }
        
        if(SelModule>=21&&SelModule<=27) {
            SelModule=5;
            GenerateGrid();
            return;
        }
        
        if(SelModule==5||SelModule==6) {
            SelModule=7;
            GenerateGrid();
            return;
        }
        
        
    }
    
    private void GenerateGrid() {
        
        if(SelModule==2) {
            GeneratePRGrid();
        }
        
        if(SelModule==3) {
            GenerateIndentGrid();
        }
        
        if(SelModule>=21&&SelModule<=27) {
            GeneratePOGrid();
        }
        
        if(SelModule==5||SelModule==6) {
            GenerateMIRGrid();
        }
        
        if(SelModule==7||SelModule==8) {
            GenerateGRNGrid();
        }
        
        
    }
    
    private void GenerateGridDoc() {
        
        DrillDownLevel=1;
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=txtDocNo.getText();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID,SelModule, DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModel.addRow(rowData);
        }
        //============================================================//
    }
    
    private void GenerateCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbModuleModel=new EITLComboModel();
        cmbModule.removeAllItems();
        cmbModule.setModel(cmbModuleModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID IN (2,3,5,6,7,8,21,22,23,24,25,26,27) ORDER BY MODULE_ID";
        
        List=clsModules.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
            //Check that Module Access Rights are given
            int ModuleID=(int)ObjModules.getAttribute("MODULE_ID").getVal();
            int MenuID=clsMenu.getMenuIDFromModule(EITLERPGLOBAL.gCompanyID, ModuleID);
            
            //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,MenuID)) {
                ComboData aData=new ComboData();
                aData.Text=(String) ObjModules.getAttribute("MODULE_DESC").getObj();
                aData.Code=(int) ObjModules.getAttribute("MODULE_ID").getVal();
                cmbModuleModel.addElement(aData);
            //}
        }
        //----------------------------------///
        
        
        //----- Generate cmbType ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        
        List=clsDepartment.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            aData.strCode="";
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
    }
    
    
    private void GeneratePRGrid() {
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp=null,rsExe=null;
        String strSQL="";
        
        SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
        
        Tab.setTitleAt(0, "PR Documents");
        
        lblModule.setText("Purchase Requisitons");
        
        try {
            tmpConn=data.getConn();
            stTmp=tmpConn.createStatement();
            
            headCondition="";
            lineCondition="";
            
            //Building Header Condition
            if(chkDept.isSelected()) {
                headCondition=headCondition+" AND DEST_DEPT_ID="+SelDeptID;
            }
            
            if(chkDate.isSelected()) {
                if(!txtFromDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND REQ_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND REQ_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
            }
            
            if(chkApproved.isSelected()) {
                headCondition=headCondition+" AND APPROVED=1";
            }
            
            if(!chkExecuted.isSelected()) {
                lineCondition=lineCondition+" AND INDENT_QTY<REQ_QTY ";
            }
            
            strSQL="SELECT * FROM D_INV_REQ_HEADER WHERE REQ_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND REQ_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELED=0 AND REQ_NO IN (SELECT REQ_NO FROM D_INV_REQ_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+lineCondition+") "+headCondition;
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            FormatGrid();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[5];
                    rowData[0]=rsTmp.getString("REQ_NO");
                    rowData[1]=EITLERPGLOBAL.formatDate(rsTmp.getString("REQ_DATE"));
                    
                    String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("DEST_DEPT_ID"));
                    
                    rowData[2]=DeptName;
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                    }
                    
                    rsExe=data.getResult("SELECT REQ_NO FROM D_INV_REQ_DETAIL WHERE REQ_NO='"+rsTmp.getString("REQ_NO")+"' AND INDENT_QTY>0");
                    rsExe.first();
                    if(rsExe.getRow()>0) {
                        rowData[4]="Y";
                    }
                    
                    DataModel.addRow(rowData);
                    rsTmp.next();
                    
                }
                
                lblStatus.setText(Table.getRowCount()+" Documents Found");
            }
            else {
                lblStatus.setText("No Documents Found");
            }
            
            EITLERPGLOBAL.setComboIndex(cmbModule,2);
            
        //tmpConn.close();
        stTmp.close();
        rsTmp.close();
        rsExe.close();
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void GenerateIndentGrid() {
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp=null,rsExe=null;
        String strSQL="";
        
        
        SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
        
        headCondition="";
        lineCondition="";
        
        lblModule.setText("Indent");
        Tab.setTitleAt(0, "Indent Documents");
        
        try {
            tmpConn=data.getConn();
            stTmp=tmpConn.createStatement();
            
            if(chkDept.isSelected()) {
                headCondition=headCondition+" AND FOR_DEPT_ID="+SelDeptID;
            }
            
            if(chkDate.isSelected()) {
                if(!txtFromDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND INDENT_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND INDENT_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
            }
            
            if(chkApproved.isSelected()) {
                headCondition=headCondition+" AND APPROVED=1";
            }
            
            if(!chkExecuted.isSelected()) {
                lineCondition=lineCondition+" AND PO_QTY<QTY ";
            }
            
            if(!withDocNo.trim().equals("")) {
                lineCondition=lineCondition+" AND MR_NO='"+withDocNo.trim()+"' ";
            }
        
            if(!txtDocNo.getText().trim().equals("")&&(!DrillDown))
            {
               headCondition=headCondition+" AND INDENT_NO='"+txtDocNo.getText()+"' ";  
            }
            
            strSQL="SELECT * FROM D_INV_INDENT_HEADER WHERE INDENT_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND INDENT_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELED=0 AND INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+lineCondition+") "+headCondition;
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            FormatGrid();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[5];
                    rowData[0]=rsTmp.getString("INDENT_NO");
                    rowData[1]=EITLERPGLOBAL.formatDate(rsTmp.getString("INDENT_DATE"));
                    
                    String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("FOR_DEPT_ID"));
                    
                    rowData[2]=DeptName;
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                    }
                    
                    rsExe=data.getResult("SELECT INDENT_NO FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+rsTmp.getString("INDENT_NO")+"' AND PO_QTY>0");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        rowData[4]="Y";
                    }
                    
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                
                lblStatus.setText(Table.getRowCount()+" Documents Found");
            }
            else {
                lblStatus.setText("No Documents Found");
            }
            
            withDocNo="";
            txtDocNo.setText("");
            
            
            EITLERPGLOBAL.setComboIndex(cmbModule,3);
            
        //tmpConn.close();
        stTmp.close();
        rsTmp.close();
        rsExe.close();
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    
    private void GeneratePOGrid() {
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp=null,rsDept=null,rsExe=null;
        String strSQL="";
        
        SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
        
        headCondition="";
        lineCondition="";
        
        lblModule.setText("Purchase Order");
        
        Tab.setTitleAt(0, "PO Documents");
        
        try {
            tmpConn=data.getConn();
            stTmp=tmpConn.createStatement();
            
            if(chkDept.isSelected()) {
                lineCondition=lineCondition+" AND DEPT_ID="+SelDeptID;
            }
            
            if(chkDate.isSelected()) {
                if(!txtFromDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND PO_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND PO_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
            }
            
            if(chkApproved.isSelected()) {
                headCondition=headCondition+" AND APPROVED=1";
            }
            
            if(!chkExecuted.isSelected()) {
                lineCondition=lineCondition+" AND RECD_QTY<QTY ";
            }
            
            if(!withDocNo.trim().equals("")) {
                lineCondition=lineCondition+" AND INDENT_NO='"+withDocNo.trim()+"' ";
            }
            else {
                headCondition=headCondition+" AND PO_TYPE="+(SelModule-20)+" ";
            }
            
            if(!txtDocNo.getText().trim().equals("")&&(!DrillDown))
            {
                headCondition=headCondition+" AND PO_NO='"+txtDocNo.getText()+"' ";
            }
            
            strSQL="SELECT * FROM D_PUR_PO_HEADER WHERE PO_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND PO_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED=0 AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" "+lineCondition+") "+headCondition;
            
            System.out.println(strSQL);
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            FormatGrid();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[5];
                    rowData[0]=rsTmp.getString("PO_NO");
                    rowData[1]=EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE"));
                    
                    String DeptName="";
                    
                    rsDept=data.getResult("SELECT DEPT_ID FROM D_PUR_PO_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+rsTmp.getString("PO_NO")+"' AND PO_TYPE="+rsTmp.getInt("PO_TYPE"));
                    rsDept.first();
                    if(rsDept.getRow()>0) {
                        DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsDept.getInt("DEPT_ID"));
                    }
                    
                    rowData[2]=DeptName;
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                    }
                    
                    rsExe=data.getResult("SELECT PO_NO FROM D_PUR_PO_DETAIL WHERE PO_NO='"+rsTmp.getString("PO_NO")+"' AND RECD_QTY>0");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        rowData[4]="Y";
                    }
                    
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                
                lblStatus.setText(Table.getRowCount()+" Documents Found");
            }
            else {
                lblStatus.setText("No Documents Found");
            }
            
            withDocNo="";
            txtDocNo.setText("");
            EITLERPGLOBAL.setComboIndex(cmbModule,21);

        //tmpConn.close();
        stTmp.close();
        rsTmp.close();
        rsExe.close();
        rsDept.close();
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void GenerateMIRGrid() {
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp=null,rsDept=null,rsExe=null;
        String strSQL="";
        
        
        SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
        
        lineCondition="";
        headCondition="";
        
        lblModule.setText("MIR");
        Tab.setTitleAt(0, "MIR Documents");
        
        try {
            tmpConn=data.getConn();
            stTmp=tmpConn.createStatement();
            
            if(chkDept.isSelected()) {
                lineCondition=lineCondition+" AND DEPT_ID="+SelDeptID;
            }
            
            if(chkDate.isSelected()) {
                if(!txtFromDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND MIR_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND MIR_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
            }
            
            if(chkApproved.isSelected()) {
                headCondition=headCondition+" AND APPROVED=1";
            }
            
            if(!chkExecuted.isSelected()) {
                lineCondition=lineCondition+" AND GRN_RECD_QTY<QTY ";
            }
            
            if(!withDocNo.trim().equals("")) {
                lineCondition=lineCondition+" AND PO_NO='"+withDocNo.trim()+"' ";
            }
            
            if(!txtDocNo.getText().trim().equals("")&&(!DrillDown))
            {
               headCondition=headCondition+" AND MIR_NO='"+txtDocNo.getText()+"' "; 
            }
            
            strSQL="SELECT * FROM D_INV_MIR_HEADER WHERE MIR_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND MIR_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED=0 AND MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" "+lineCondition+") "+headCondition;
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            FormatGrid();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[5];
                    rowData[0]=rsTmp.getString("MIR_NO");
                    rowData[1]=EITLERPGLOBAL.formatDate(rsTmp.getString("MIR_DATE"));
                    
                    String DeptName="";
                    
                    rsDept=data.getResult("SELECT DEPT_ID FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+rsTmp.getString("MIR_NO")+"' AND MIR_TYPE="+rsTmp.getInt("MIR_TYPE"));
                    rsDept.first();
                    if(rsDept.getRow()>0) {
                        DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsDept.getInt("DEPT_ID"));
                    }
                    
                    rowData[2]=DeptName;
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                    }
                    
                    rsExe=data.getResult("SELECT MIR_NO FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+rsTmp.getString("MIR_NO")+"' AND GRN_RECD_QTY>0");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        rowData[4]="Y";
                    }
                    
                    
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                
                lblStatus.setText(Table.getRowCount()+" Documents Found");
            }
            else {
                lblStatus.setText("No Documents Found");
            }
            
            withDocNo="";
            txtDocNo.setText("");
            
            EITLERPGLOBAL.setComboIndex(cmbModule,5);

        //tmpConn.close();
        stTmp.close();
        rsTmp.close();
        rsDept.close();
        rsExe.close();
            
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void GenerateGRNGrid() {
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp=null,rsDept=null;
        String strSQL="";
        
        
        SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
        
        lblModule.setText("GRN");
        Tab.setTitleAt(0, "GRN Documents");
        
        try {
            tmpConn=data.getConn();
            stTmp=tmpConn.createStatement();
            
            
            if(chkDept.isSelected()) {
                lineCondition=lineCondition+" AND DEPT_ID="+SelDeptID;
            }
            
            if(chkDate.isSelected()) {
                if(!txtFromDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
                }
                
                if(!txtToDate.getText().trim().equals("")) {
                    headCondition=headCondition+" AND GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
                }
            }
            
            if(chkApproved.isSelected()) {
                headCondition=headCondition+" AND APPROVED=1";
            }
            
            
            if(!withDocNo.trim().equals("")) {
                lineCondition=lineCondition+" AND MIR_NO='"+withDocNo.trim()+"' ";
            }
            
            if(!txtDocNo.getText().trim().equals("")&&(!DrillDown))
            {
               headCondition=headCondition+" AND GRN_NO='"+txtDocNo.getText()+"' "; 
            }
            
            strSQL="SELECT * FROM D_INV_GRN_HEADER WHERE GRN_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND GRN_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED=0 AND GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" "+lineCondition+") "+headCondition;
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            FormatGrid();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[4];
                    rowData[0]=rsTmp.getString("GRN_NO");
                    rowData[1]=EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE"));
                    
                    String DeptName="";
                    
                    rsDept=data.getResult("SELECT DEPT_ID FROM D_INV_GRN_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND GRN_NO='"+rsTmp.getString("GRN_NO")+"' AND GRN_TYPE="+rsTmp.getInt("GRN_TYPE"));
                    rsDept.first();
                    if(rsDept.getRow()>0) {
                        DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsDept.getInt("DEPT_ID"));
                    }
                    
                    rowData[2]=DeptName;
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                    }
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                
                lblStatus.setText(Table.getRowCount()+" Documents Found");
            }
            else {
                lblStatus.setText("No Documents Found");
            }
            
            withDocNo="";
            txtDocNo.setText("");
            EITLERPGLOBAL.setComboIndex(cmbModule,7);

        //tmpConn.close();
        stTmp.close();
        rsTmp.close();
        rsDept.close();
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void ShowApproval() {
        
      ResultSet rsTmp;
      
        try {
            
            String DocNo="",DocDate="";
            int theModuleID=0,selectedModule=0;
            
            if(Table.getSelectedRow()<0) {
                JOptionPane.showMessageDialog(null,"Please select the document");
                return;
            }
            
            
            DocNo=(String)Table.getValueAt(Table.getSelectedRow(), 0);
            DocDate=(String)Table.getValueAt(Table.getSelectedRow(), 1);
            
            lblDocNo.setText(DocNo);
            lblDocDate.setText(DocDate);
            
            selectedModule=EITLERPGLOBAL.getComboCode(cmbModule);
            
            
            theModuleID=EITLERPGLOBAL.getComboCode(cmbModule);
            
            if(theModuleID==2)
            {
              lblDocType.setText("PR");  
            }
            
            if(theModuleID==3)
            {
              lblDocType.setText("Indent");  
            }
            
            
            if(selectedModule>=21&&selectedModule<=27) {
                lblDocType.setText("P.O.");
                rsTmp=data.getResult("SELECT PO_TYPE FROM D_PUR_PO_HEADER WHERE PO_NO='"+DocNo+"'");
                rsTmp.first();
                
                if(rsTmp.getRow()>0)
                {
                  theModuleID=20+rsTmp.getInt("PO_TYPE");  
                }
            }
            
            if(selectedModule==5||selectedModule==6) {
                lblDocType.setText("MIR");
                rsTmp=data.getResult("SELECT MIR_TYPE FROM D_INV_MIR_HEADER WHERE MIR_NO='"+DocNo+"'");
                rsTmp.first();
                
                if(rsTmp.getRow()>0)
                {
                  theModuleID=4+rsTmp.getInt("MIR_TYPE");  
                }
            }
            
            if(selectedModule==7||selectedModule==8) {
                lblDocType.setText("GRN");
                
                rsTmp=data.getResult("SELECT GRN_TYPE FROM D_INV_GRN_HEADER WHERE GRN_NO='"+DocNo+"'");
                rsTmp.first();
                
                if(rsTmp.getRow()>0)
                {
                  theModuleID=6+rsTmp.getInt("GRN_TYPE");  
                }
            }

            
            
            
            
            
            FormatGridA();
            HashMap List=new HashMap();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, theModuleID, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            Tab.setSelectedIndex(1);
            
        }
        catch(Exception e) {
            
        }
    }
    
}
