 /*
  * frmMenuMaster.java
  *
  * Created on April 7, 2004, 3:10 PM
  */

package EITLERP;

/**
 *
 * @author  nitin
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.util.HashMap;

public class frmMenuMaster extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsMenuMaster ObjMenuMaster;
    private clsMenuFunction ObjMenuFunction;
    private EITLComboModel cmbModuleModel;
    private EITLComboModel cmbMenuTypeModel;
        
    /** Creates new form frmTemplate */
    public frmMenuMaster() {
        System.gc();
        setSize(610,410);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        
        GenerateCombo();
        
        ObjMenuMaster=new clsMenuMaster();
        ObjMenuFunction = new clsMenuFunction();
        SetMenuForRights();
        
        if(ObjMenuMaster.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjMenuMaster.MoveLast();
            DisplayData();
        }
        else {
            JOptionPane.showMessageDialog(this,"Error occured while loading data. Error is "+ObjMenuMaster.LastError);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtMenuID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMenuCaption = new javax.swing.JTextField();
        txtClassName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbModule = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtParentID = new javax.swing.JTextField();
        cmbMenuType = new javax.swing.JComboBox();
        chkAccess = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        chkAddRecord = new javax.swing.JCheckBox();
        chkEditRecord = new javax.swing.JCheckBox();
        chkDeleteRecord = new javax.swing.JCheckBox();
        chkPrintRecord = new javax.swing.JCheckBox();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        setName("");
        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 600, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" MENU MASTER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 600, 25);

        jLabel1.setText("Menu ID");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 80, 85, 20);

        txtMenuID.setEnabled(false);
        txtMenuID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMenuIDFocusGained(evt);
            }
        });
        txtMenuID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMenuIDKeyPressed(evt);
            }
        });

        getContentPane().add(txtMenuID);
        txtMenuID.setBounds(100, 80, 100, 21);

        jLabel3.setText("Menu Caption");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 210, 90, 20);

        txtMenuCaption.setNextFocusableComponent(txtClassName);
        txtMenuCaption.setEnabled(false);
        getContentPane().add(txtMenuCaption);
        txtMenuCaption.setBounds(100, 210, 240, 21);

        txtClassName.setEnabled(false);
        getContentPane().add(txtClassName);
        txtClassName.setBounds(100, 240, 450, 21);

        jLabel4.setText("Class Name");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 240, 80, 20);

        jLabel8.setText("Module Name");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 175, 86, 20);

        cmbModule.setEnabled(false);
        getContentPane().add(cmbModule);
        cmbModule.setBounds(100, 175, 240, 24);

        jLabel9.setText("Menu Type");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(10, 110, 86, 20);

        jLabel11.setText("Parent ID");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(10, 143, 85, 20);

        txtParentID.setEnabled(false);
        txtParentID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtParentIDFocusGained(evt);
            }
        });
        txtParentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtParentIDKeyPressed(evt);
            }
        });

        getContentPane().add(txtParentID);
        txtParentID.setBounds(100, 143, 100, 21);

        cmbMenuType.setEnabled(false);
        cmbMenuType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbMenuTypeFocusGained(evt);
            }
        });

        getContentPane().add(cmbMenuType);
        cmbMenuType.setBounds(100, 110, 100, 24);

        chkAccess.setText("Access");
        chkAccess.setNextFocusableComponent(chkAddRecord);
        chkAccess.setEnabled(false);
        getContentPane().add(chkAccess);
        chkAccess.setBounds(30, 300, 70, 23);

        jLabel2.setText("MENU FUNCTION");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 280, 110, 15);

        chkAddRecord.setText("Add Record");
        chkAddRecord.setNextFocusableComponent(chkEditRecord);
        chkAddRecord.setEnabled(false);
        getContentPane().add(chkAddRecord);
        chkAddRecord.setBounds(110, 300, 100, 23);

        chkEditRecord.setText("Edit Record");
        chkEditRecord.setNextFocusableComponent(chkDeleteRecord);
        chkEditRecord.setEnabled(false);
        getContentPane().add(chkEditRecord);
        chkEditRecord.setBounds(220, 300, 100, 23);

        chkDeleteRecord.setText("Delete Record");
        chkDeleteRecord.setNextFocusableComponent(chkPrintRecord);
        chkDeleteRecord.setEnabled(false);
        getContentPane().add(chkDeleteRecord);
        chkDeleteRecord.setBounds(330, 300, 120, 23);

        chkPrintRecord.setText("Print Record");
        chkPrintRecord.setNextFocusableComponent(chkAccess);
        chkPrintRecord.setEnabled(false);
        getContentPane().add(chkPrintRecord);
        chkPrintRecord.setBounds(450, 300, 100, 23);

        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(20, 340, 530, 20);

    }//GEN-END:initComponents

    private void cmbMenuTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbMenuTypeFocusGained
        lblStatus.setText("P - Form. M - Main Menu");
    }//GEN-LAST:event_cmbMenuTypeFocusGained

    private void txtMenuIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMenuIDFocusGained
        lblStatus.setText("Press F1 to select menu Id.");
    }//GEN-LAST:event_txtMenuIDFocusGained

    private void txtParentIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtParentIDFocusGained
        lblStatus.setText("Press F1 to select Parent Id.");
    }//GEN-LAST:event_txtParentIDFocusGained

    private void txtMenuIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMenuIDKeyPressed
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            aList.SQL="SELECT MENU_ID,PARENT_ID,MENU_CAPTION FROM `D_COM_MENU_MASTER` WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY MENU_ID";
            aList.ReturnCol=1;
            aList.SecondCol=2; //to get Second Value
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtMenuID.setText(Integer.toString(Integer.parseInt(aList.ReturnVal)+1));
                txtParentID.setText(aList.SecondVal);
            }
        }
    }//GEN-LAST:event_txtMenuIDKeyPressed
    
    private void txtParentIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtParentIDKeyPressed
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            aList.SQL="SELECT MENU_ID,PARENT_ID,MENU_CAPTION FROM `D_COM_MENU_MASTER` WHERE MENU_TYPE = 'M' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY MENU_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtParentID.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtParentIDKeyPressed
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjMenuMaster.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // if(JOptionPane.showConfirmDialog(this,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
        //   Delete();
        // }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAccess;
    private javax.swing.JCheckBox chkAddRecord;
    private javax.swing.JCheckBox chkDeleteRecord;
    private javax.swing.JCheckBox chkEditRecord;
    private javax.swing.JCheckBox chkPrintRecord;
    private javax.swing.JComboBox cmbMenuType;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtClassName;
    private javax.swing.JTextField txtMenuCaption;
    private javax.swing.JTextField txtMenuID;
    private javax.swing.JTextField txtParentID;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
        
    private void SetFields(boolean pStat) {        
        txtMenuID.setEnabled(pStat);
        txtMenuCaption.setEnabled(pStat);
        cmbModule.setEnabled(pStat);
        cmbMenuType.setEnabled(pStat);
        txtParentID.setEnabled(pStat);
        txtClassName.setEnabled(pStat);
        chkAccess.setEnabled(pStat);
        chkEditRecord.setEnabled(pStat);
        chkAddRecord.setEnabled(pStat);
        chkPrintRecord.setEnabled(pStat);
        chkDeleteRecord.setEnabled(pStat);        
    }
    
    private void ClearFields() {
        txtMenuCaption.setText("");
        txtClassName.setText("");
        txtMenuID.setText("");
        txtParentID.setText("");
        
        chkAccess.setSelected(false);
        chkAddRecord.setSelected(false);
        chkDeleteRecord.setSelected(false);
        chkEditRecord.setSelected(false);
        chkPrintRecord.setSelected(false);
    }
    
    //Display data on the Screen
    private void DisplayData() {
        ClearFields();
        txtMenuID.setText(Integer.toString(ObjMenuMaster.getAttribute("MENU_ID").getInt()));
        EITLERPGLOBAL.setComboIndex(cmbMenuType,ObjMenuMaster.getAttribute("MENU_TYPE").getString());
        txtParentID.setText(Integer.toString(ObjMenuMaster.getAttribute("PARENT_ID").getInt()));
        EITLERPGLOBAL.setComboIndex(cmbModule,ObjMenuMaster.getAttribute("MODULE_ID").getInt());
        txtMenuCaption.setText(ObjMenuMaster.getAttribute("MENU_CAPTION").getString());
        txtClassName.setText(ObjMenuMaster.getAttribute("CLASS_NAME").getString());
        
        for(int i=1 ;i<=ObjMenuMaster.colMenufun.size();i++) {
            clsMenuFunction ObjFunction=(clsMenuFunction)ObjMenuMaster.colMenufun.get(Integer.toString(i));
                        
            if(ObjFunction.getAttribute("FUNCTION_NAME").getString().trim().equals("Access Module")) {
                chkAccess.setSelected(true);
            }else if(ObjFunction.getAttribute("FUNCTION_NAME").getString().trim().equals("Add Record")) {
                chkAddRecord.setSelected(true);
            }else if(ObjFunction.getAttribute("FUNCTION_NAME").getString().trim().equals("Edit Record")) {
                chkEditRecord.setSelected(true);
            }else if(ObjFunction.getAttribute("FUNCTION_NAME").getString().trim().equals("Delete Record")) {
                chkDeleteRecord.setSelected(true);
            }else if(ObjFunction.getAttribute("FUNCTION_NAME").getString().trim().equals("Print Record")) {
                chkPrintRecord.setSelected(true);
            }
        }
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjMenuMaster.setAttribute("MENU_ID",Integer.parseInt(txtMenuID.getText().trim()));
        ObjMenuMaster.setAttribute("PARENT_ID",Integer.parseInt(txtParentID.getText().trim()));
        ObjMenuMaster.setAttribute("MODULE_ID",EITLERPGLOBAL.getComboCode(cmbModule));
        ObjMenuMaster.setAttribute("MENU_TYPE",EITLERPGLOBAL.getCombostrCode(cmbMenuType));
        ObjMenuMaster.setAttribute("MENU_CAPTION",txtMenuCaption.getText());
        ObjMenuMaster.setAttribute("CLASS_NAME",txtClassName.getText());
        ObjMenuMaster.setAttribute("PACKAGE","");
        ObjMenuMaster.setAttribute("ACCESS_TYPE","");
        ObjMenuMaster.setAttribute("CHANGED",true);
        ObjMenuMaster.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        
        ObjMenuMaster.colMenufun.clear();
        if(chkAccess.isSelected()) {
            clsMenuFunction ObjMenuFun=new clsMenuFunction();
            ObjMenuFun.setAttribute("SR_NO",1);
            ObjMenuFun.setAttribute("FUNCTION_ID",Integer.parseInt(txtMenuID.getText()));
            ObjMenuFun.setAttribute("FUNCTION_NAME","Access Module");
            ObjMenuFun.setAttribute("CHANGED",true);
            ObjMenuFun.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            ObjMenuMaster.colMenufun.put(Integer.toString(ObjMenuMaster.colMenufun.size()+1),ObjMenuFun);
        }
        
        if(chkAddRecord.isSelected()) {
            clsMenuFunction ObjMenuFun=new clsMenuFunction();
            ObjMenuFun.setAttribute("SR_NO",2);
            ObjMenuFun.setAttribute("FUNCTION_ID",Integer.parseInt(txtMenuID.getText()+"1"));
            ObjMenuFun.setAttribute("FUNCTION_NAME","Add Record");
            ObjMenuFun.setAttribute("CHANGED",true);
            ObjMenuFun.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            ObjMenuMaster.colMenufun.put(Integer.toString(ObjMenuMaster.colMenufun.size()+1),ObjMenuFun);
        }
        
        if(chkEditRecord.isSelected()) {
            clsMenuFunction ObjMenuFun=new clsMenuFunction();
            ObjMenuFun.setAttribute("SR_NO",3);
            ObjMenuFun.setAttribute("FUNCTION_ID",Integer.parseInt(txtMenuID.getText()+"2"));
            ObjMenuFun.setAttribute("FUNCTION_NAME","Edit Record");
            ObjMenuFun.setAttribute("CHANGED",true);
            ObjMenuFun.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            ObjMenuMaster.colMenufun.put(Integer.toString(ObjMenuMaster.colMenufun.size()+1),ObjMenuFun);
        }
        
        if(chkDeleteRecord.isSelected()) {
            clsMenuFunction ObjMenuFun=new clsMenuFunction();
            ObjMenuFun.setAttribute("SR_NO",4);
            ObjMenuFun.setAttribute("FUNCTION_ID",Integer.parseInt(txtMenuID.getText()+"3"));
            ObjMenuFun.setAttribute("FUNCTION_NAME","Delete Record");
            ObjMenuFun.setAttribute("CHANGED",true);
            ObjMenuFun.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            ObjMenuMaster.colMenufun.put(Integer.toString(ObjMenuMaster.colMenufun.size()+1),ObjMenuFun);
        }
        
        if(chkPrintRecord.isSelected()) {
            clsMenuFunction ObjMenuFun=new clsMenuFunction();
            ObjMenuFun.setAttribute("SR_NO",5);
            ObjMenuFun.setAttribute("FUNCTION_ID",Integer.parseInt(txtMenuID.getText()+"5"));
            ObjMenuFun.setAttribute("FUNCTION_NAME","Print Record");
            ObjMenuFun.setAttribute("CHANGED",true);
            ObjMenuFun.setAttribute("CHANGED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            ObjMenuMaster.colMenufun.put(Integer.toString(ObjMenuMaster.colMenufun.size()+1),ObjMenuFun);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,12081)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,12082)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,12083)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
    }
    
    private void Add() {
        //txtMenuID.setEnabled(true);
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        /*
        String menuId = data.getStringValueFromDB("SELECT COALESCE(MAX(MENU_ID),0)+1 AS MENU_ID FROM D_COM_MENU_MASTER WHERE MENU_ID NOT LIKE '40%' AND MENU_ID NOT LIKE '999%' ORDER BY MENU_ID DESC");        
        txtMenuID.setText(menuId);
        lblTitle.setText("MENU ID  - "+menuId);
        */
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Edit() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.EDIT;
        SetFields(true);
        DisableToolbar();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Delete() {
        if(ObjMenuMaster.Delete()) {
            MoveLast();
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        SetData();
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjMenuMaster.Insert()) {
                MoveLast();
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjMenuMaster.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjMenuMaster.Update()) {
                //Nothing to do
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjMenuMaster.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        txtMenuID.setEnabled(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        //txtMenuID.setEnabled(false);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.frmMenuMasterFind",true);
        frmMenuMasterFind ObjMenuMasterFind= (frmMenuMasterFind) ObjLoader.getObj();
        
        if(ObjMenuMasterFind.Cancelled==false) {
            if(!ObjMenuMaster.Filter(ObjMenuMasterFind.stringFindQuery)) {
                JOptionPane.showMessageDialog(this,"No records found.");
            }
            MoveFirst();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMenuMaster.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMenuMaster.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMenuMaster.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMenuMaster.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,int pDocNo) {
        ObjMenuMaster.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND EMPLOYEE_ID="+pDocNo);
        ObjMenuMaster.MoveFirst();
        DisplayData();
    }
            
    private void GenerateCombo() {
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbModuleModel=new EITLComboModel();
        cmbModule.removeAllItems();
        cmbModule.setModel(cmbModuleModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ORDER BY MODULE_DESC";
        
        List=clsModules.getList(strCondition);
        
        ComboData bData=new ComboData();
        bData.Text="Not Applicable";
        bData.Code=0;
        cmbModuleModel.addElement(bData);
        
        for(int i=1;i<=List.size();i++) {
            clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Text=(String) ObjModules.getAttribute("MODULE_DESC").getObj();
            aData.Code=(long) ObjModules.getAttribute("MODULE_ID").getLong();
            cmbModuleModel.addElement(aData);
        }
        
        //-------Main Code Type --------//
        cmbMenuTypeModel=new EITLComboModel();
        cmbMenuType.removeAllItems();
        cmbMenuType.setModel(cmbMenuTypeModel);
        
        ComboData aData=new ComboData();
        aData=new ComboData();
        aData.strCode="M";
        aData.Text="M";
        cmbMenuTypeModel.addElement(aData);
        
        
        aData=new ComboData();
        aData.strCode="P";
        aData.Text="P";
        cmbMenuTypeModel.addElement(aData);
    }
    
    private boolean Validate() {
        if(txtMenuID.getText().toString().equals("")) {
            JOptionPane.showMessageDialog(this,"Please Enter Menu ID...");
            return false;
        }
        
        if(txtMenuCaption.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please enter Menu Caption");
            return false;
        }
        
        if(txtParentID.getText().toString().equals("")) {
            JOptionPane.showMessageDialog(this,"Please Enter Parent ID...");
            return false;
        }
        /*
        if(txtClassName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please enter Class name");
            return false;
        }*/
        return true ;
    }
    
}
