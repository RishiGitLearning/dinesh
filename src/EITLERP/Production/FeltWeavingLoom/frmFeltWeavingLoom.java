/*
 * frmFeltWeavingLoom.java
 *
 * Created on Jan 30, 2015, 11:09 AM
 */
package EITLERP.Production.FeltWeavingLoom;

/**
 *
 * @author Dhaval Rahevar
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Purchase.*;
import EITLERP.Utils.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.net.*;
import java.io.*;
import EITLERP.Finance.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.util.*;
import java.lang.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import javax.swing.*;
//import java.awt.*;
import java.io.*;
import EITLERP.*;
import java.io.File;
import java.net.URL;
import java.text.DecimalFormat;
import javax.swing.table.*;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.Production.FeltWarping.frmFeltWarping;

public class frmFeltWeavingLoom extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public int DeptID = EITLERPGLOBAL.gUserDeptID;
    public String finalapproved = "";
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;
    public int ShiftNo1;

    private clsFeltWeavingLoom ObjFeltWvgLoomEff;

    private clsExcelExporter exp = new clsExcelExporter();
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbShiftNoModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;

    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltWeavingLoom
     */
    public void init() {
        System.gc();
        setSize(1000, 750);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjFeltWvgLoomEff = new clsFeltWeavingLoom();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateShiftNoCombo();
        FormatGrid();
        if (ObjFeltWvgLoomEff.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Error occured while Loading Data. Error is " + ObjFeltWvgLoomEff.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItem1stShift = new javax.swing.JMenuItem();
        jMenuItem2ndShift = new javax.swing.JMenuItem();
        jMenuItem3rdShift = new javax.swing.JMenuItem();
        jPopupMenuDoc = new javax.swing.JPopupMenu();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtWeavingDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtWvgProdNo = new javax.swing.JTextField();
        lblRev1No = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbShiftNo = new javax.swing.JComboBox();
        txtShiftNo = new javax.swing.JTextField();
        txtShiftname = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jMenuItem1stShift.setText("First Shift (7:00 AM To 3:30 PM)");
        jMenuItem1stShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1stShiftActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItem1stShift);

        jMenuItem2ndShift.setText("Second Shift ( 3:30 PM to 12:00 AM)");
        jMenuItem2ndShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ndShiftActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItem2ndShift);

        jMenuItem3rdShift.setText("Third Shift 12:AM to 7:00 AM");
        jMenuItem3rdShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3rdShiftActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItem3rdShift);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT WEAVING LOOM WISE PRODUCTION EFFICIENCY ENTRY FORM - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1000, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Weaving Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 130, 17);

        txtWeavingDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtWeavingDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtWeavingDate.setEnabled(false);
        txtWeavingDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeavingDateActionPerformed(evt);
            }
        });
        txtWeavingDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtWeavingDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWeavingDateFocusLost(evt);
            }
        });
        Tab1.add(txtWeavingDate);
        txtWeavingDate.setBounds(170, 10, 102, 27);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TableMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(11, 80, 970, 330);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(6, 70, 770, 6);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(870, 420, 90, 29);

        jLabel5.setText("Weaving Production No");
        Tab1.add(jLabel5);
        jLabel5.setBounds(10, 42, 160, 17);

        txtWvgProdNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtWvgProdNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtWvgProdNo.setEnabled(false);
        txtWvgProdNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWvgProdNoActionPerformed(evt);
            }
        });
        Tab1.add(txtWvgProdNo);
        txtWvgProdNo.setBounds(170, 40, 160, 27);

        lblRev1No.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRev1No.setText("...");
        Tab1.add(lblRev1No);
        lblRev1No.setBounds(290, 10, 30, 18);

        jLabel12.setText("Shift");
        Tab1.add(jLabel12);
        jLabel12.setBounds(340, 50, 40, 17);

        cmbShiftNo.setBackground(new java.awt.Color(255, 255, 255));
        cmbShiftNo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbShiftNo.setEnabled(false);
        cmbShiftNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShiftNoItemStateChanged(evt);
            }
        });
        cmbShiftNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShiftNoActionPerformed(evt);
            }
        });
        Tab1.add(cmbShiftNo);
        cmbShiftNo.setBounds(380, 40, 250, 25);

        txtShiftNo.setEnabled(false);
        txtShiftNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShiftNoActionPerformed(evt);
            }
        });
        Tab1.add(txtShiftNo);
        txtShiftNo.setBounds(370, 10, 69, 27);

        txtShiftname.setEnabled(false);
        Tab1.add(txtShiftname);
        txtShiftname.setBounds(460, 10, 160, 27);

        jButton1.setText("Export to Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Tab1.add(jButton1);
        jButton1.setBounds(720, 420, 130, 29);

        Tab.addTab("Order Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(600, 220, 630, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 17);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 29);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 33);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 1000, 490);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 560, 1010, 20);

        jLabel2.setText("Abbreviation : CR = Cloth Repair, SR = Shuttle Repair , TR = Temple Repair, PR = Pick Repair , WR = Warp End Repair ,BG = Beam Gaiting");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 590, 990, 17);

        jLabel4.setText(" Th.Picks = Theoritical Picks, Ac.Picks = Actual Picks, NoPwr = No Power, NoWVR = No Weaver, Ch.Time = Change Time, ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 610, 990, 17);
    }// </editor-fold>//GEN-END:initComponents

    private void txtWeavingDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeavingDateFocusLost
        WeavingProductionNo();      // TODO add your handling code here:
    }//GEN-LAST:event_txtWeavingDateFocusLost

    private void jMenuItem3rdShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3rdShiftActionPerformed
        cmbShiftNo.setEnabled(false);
        txtWeavingDate.setEnabled(true);
        EITLERPGLOBAL.setComboIndex(cmbShiftNo, 3);
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        txtWvgProdNo.setText("");
        txtWeavingDate.requestFocus();
        lblTitle.setText(" FELT WEAVING LOOM WISE PRODUCTION EFFICIENCY ENTRY FORM - " + txtWvgProdNo.getText());
        lblTitle.setBackground(Color.BLUE);
        String productionDate, productionDocumentNo;
        lblStatus.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        int Shift = cmbShiftNo.getSelectedIndex();
        txtShiftNo.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        txtShiftname.setText((String) cmbShiftNo.getSelectedItem());
        ShiftNo1 = Shift;

        AddAllLoom();
        theopicks();
    }//GEN-LAST:event_jMenuItem3rdShiftActionPerformed

    private void jMenuItem2ndShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ndShiftActionPerformed
        cmbShiftNo.setEnabled(false);
        txtWeavingDate.setEnabled(true);
        EITLERPGLOBAL.setComboIndex(cmbShiftNo, 2);
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        txtWvgProdNo.setText("");
        txtWeavingDate.requestFocus();
        lblTitle.setText(" FELT WEAVING LOOM WISE PRODUCTION EFFICIENCY ENTRY FORM - " + txtWvgProdNo.getText());
        lblTitle.setBackground(Color.BLUE);
        String productionDate, productionDocumentNo;
        lblStatus.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        int Shift = cmbShiftNo.getSelectedIndex();
        txtShiftNo.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        txtShiftname.setText((String) cmbShiftNo.getSelectedItem());
        ShiftNo1 = Shift;

        AddAllLoom();
        theopicks();
    }//GEN-LAST:event_jMenuItem2ndShiftActionPerformed

    private void jMenuItem1stShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1stShiftActionPerformed
        cmbShiftNo.setEnabled(false);
        txtWeavingDate.setEnabled(true);
        EITLERPGLOBAL.setComboIndex(cmbShiftNo, 1);
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        txtWvgProdNo.setText("");
        txtWeavingDate.requestFocus();
        lblTitle.setText(" FELT WEAVING LOOM WISE PRODUCTION EFFICIENCY ENTRY FORM - " + txtWvgProdNo.getText());
        lblTitle.setBackground(Color.BLUE);
        String productionDate, productionDocumentNo;
        lblStatus.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        int Shift = cmbShiftNo.getSelectedIndex();
        txtShiftNo.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        txtShiftname.setText((String) cmbShiftNo.getSelectedItem());
        ShiftNo1 = Shift;
        AddAllLoom();
        theopicks();
    }//GEN-LAST:event_jMenuItem1stShiftActionPerformed

    private void TableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseExited
        calculaterepair();
    }//GEN-LAST:event_TableMouseExited

    private void TableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseReleased
        calculaterepair();
    }//GEN-LAST:event_TableMouseReleased

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed for RPM
        {
            if (Table.getSelectedColumn() == 2) {
                LOV aList = new LOV();
                String mparacd = "";
                mparacd = ((String) Table.getValueAt(Table.getSelectedRow(), 1));
                aList.SQL = "SELECT DISTINCT(PARA_EXT1) FROM  PRODUCTION.FELT_PARAMETER_MASTER  WHERE PARA_ID='LOOMRPM' AND PARA_CODE=" + mparacd + "";

                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 2);
                }
            }
        }
        if (evt.getKeyCode() == 112) //F1 Key pressed for Group
        {
            if (Table.getSelectedColumn() == 5) {
                LOV aList = new LOV();
                //aList.SQL="SELECT DISTINCT (GRUP) FROM PRODUCTION.FELT_RATE_MASTER";
                String mparacd = "";
                mparacd = ((String) Table.getValueAt(Table.getSelectedRow(), 1));
                aList.SQL = "SELECT PARA_DESC FROM  PRODUCTION.FELT_PARAMETER_MASTER  WHERE PARA_ID='LOOMRPM' AND PARA_CODE=" + mparacd + "";

                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;
                if (aList.ShowLOV()) {
                    Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 5);
                }
            }
        }
        calculaterepair();
    }//GEN-LAST:event_TableKeyPressed

    private void txtWeavingDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeavingDateActionPerformed

    }//GEN-LAST:event_txtWeavingDateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            exp.fillData(Table, new File("/root/Desktop/WeavingLoom.xls"));
            //exp.fillData(TableI,new File("C://ProductionProcess.xls"));
            exp.fillData(Table, new File("D://WeavingLoom.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + //"'C: \\ result.xls' successfully", "Message",
                    "'/root/Desktop/WeavingLoom.xls' successfully in Linux PC or 'D://WeavingLoom.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtWvgProdNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWvgProdNoActionPerformed

    }//GEN-LAST:event_txtWvgProdNoActionPerformed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained

    }//GEN-LAST:event_TableFocusGained

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        calculaterepair();
        double macpi = 0;
        String m_acpi = "";
        m_acpi = ((String) Table.getValueAt(Table.getSelectedRow(), 7));
        if (m_acpi.equals("")) {
            macpi = 0;
        } else {
            macpi = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 7));
        }

        double mtcpi = 0;
        String m_tcpi = "";
        m_tcpi = ((String) Table.getValueAt(Table.getSelectedRow(), 6));
        if (m_tcpi.equals("")) {
            mtcpi = 0;
        } else {
            mtcpi = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 6));
        }
        if (macpi > mtcpi) {
            lblStatus.setText("Not More than Therical Pic...");
            JOptionPane.showMessageDialog(new JFrame(), "Not More than Therical Pic...", "Error", JOptionPane.ERROR_MESSAGE);

        }
        /*  double mshrt=0;
         String m_shrt="";
         m_shrt=((String)Table.getValueAt(Table.getSelectedRow(), 20));
         if(m_shrt.equals("")){
         mshrt=0;
         }
         else{
         mshrt = Double.parseDouble((String)Table.getValueAt(Table.getSelectedRow(), 20));
         }
         if(mshrt<0){
         lblStatus.setText("Correct the all Loss Time Shortfall value is always in Plus ");
         JOptionPane.showMessageDialog(new JFrame(),"Correct the all Loss Time Shortfall value is always in Plus " , "Error",JOptionPane.ERROR_MESSAGE);
         
         }*/

        double mlosstot = 0;
        String m_losstot = "";
        m_losstot = ((String) Table.getValueAt(Table.getSelectedRow(), 65));
        if (m_tcpi.equals("")) {
            mtcpi = 0;
        } else {
            mtcpi = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 65));
        }

        double mshift = 0;
        String m_shift = txtShiftNo.getText().trim();
        if (m_shift.equals("1") || m_shift.equals("2")) {
            mshift = 480;
        }
        if (m_shift.equals("3")) {
            mshift = 390;
        }

        if (mshift < mtcpi) {
            lblStatus.setText("Time Entry is not more then a Shift time,Correct first...");
            JOptionPane.showMessageDialog(new JFrame(), "Time Entry is not more then a Shift time,Correct first", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            lblStatus.setText("Ready...");
        }

        double mwvgtime = 0;
        String m_wvgtime = "";
        m_wvgtime = ((String) Table.getValueAt(Table.getSelectedRow(), 18));
        if (m_wvgtime.equals("")) {
            mtcpi = 0;
        } else {
            mwvgtime = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 18));
        }

        if ((mshift * 1.25) < (mtcpi + mwvgtime)) {
            lblStatus.setText("Time Entry is not more then a Shift time,Correct first...");
            JOptionPane.showMessageDialog(new JFrame(), "Time Entry is not more then a Shift time,Correct first", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            lblStatus.setText("Ready...");
        }

        double mnowrp = 0;
        String m_nowrp = "";
        m_nowrp = ((String) Table.getValueAt(Table.getSelectedRow(), 9));
        if (m_nowrp.equals("")) {
            mnowrp = 0;
        } else {
            mnowrp = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 9));
        }
        double mnoweft = 0;
        String m_noweft = "";
        m_noweft = ((String) Table.getValueAt(Table.getSelectedRow(), 10));
        if (m_noweft.equals("")) {
            mnoweft = 0;
        } else {
            mnoweft = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 10));
        }

        double mnopwr = 0;
        String m_nopwr = "";
        m_nopwr = ((String) Table.getValueAt(Table.getSelectedRow(), 11));
        if (m_nopwr.equals("")) {
            mnopwr = 0;
        } else {
            mnopwr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 11));
        }

        double mnoair = 0;
        String m_noair = "";
        m_noair = ((String) Table.getValueAt(Table.getSelectedRow(), 12));
        if (m_noair.equals("")) {
            mnoair = 0;
        } else {
            mnoair = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 12));
        }

        double mbg = 0;
        String m_bg = "";
        m_bg = ((String) Table.getValueAt(Table.getSelectedRow(), 13));
        if (m_bg.equals("")) {
            mbg = 0;
        } else {
            mbg = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 13));
        }

        double mnowvr = 0;
        String m_nowvr = "";
        m_nowvr = ((String) Table.getValueAt(Table.getSelectedRow(), 14));
        if (m_nowvr.equals("")) {
            mnowvr = 0;
        } else {
            mnowvr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 14));
        }

        double mnobeam = 0;
        String m_nobeam = "";
        m_nobeam = ((String) Table.getValueAt(Table.getSelectedRow(), 15));
        if (m_nobeam.equals("")) {
            mnobeam = 0;
        } else {
            mnobeam = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 15));
        }

        double mchtm = 0;
        String m_chtm = "";
        m_chtm = ((String) Table.getValueAt(Table.getSelectedRow(), 16));
        if (m_chtm.equals("")) {
            mchtm = 0;
        } else {
            mchtm = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 16));
        }

        double mothr = 0;
        String m_othr = "";
        m_othr = ((String) Table.getValueAt(Table.getSelectedRow(), 17));
        if (m_othr.equals("")) {
            mothr = 0;
        } else {
            mothr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 17));
        }

        double mtot = 0;
        mtot = mnowrp + mnoweft + mnopwr + mnoair + mbg + mnowvr + mnobeam + mchtm + mothr;
        Table.setValueAt(Double.toString(mtot), Table.getSelectedRow(), 64);

        if (mtot > (mshift)) {
            JOptionPane.showMessageDialog(new JFrame(), "Not More than " + mshift + " Mins...", "Error", JOptionPane.ERROR_MESSAGE);
        }

        theopicks();
    }//GEN-LAST:event_TableKeyReleased

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        calculaterepair();

    }//GEN-LAST:event_TableMouseClicked

    private void txtShiftNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShiftNoActionPerformed

    }//GEN-LAST:event_txtShiftNoActionPerformed

    private void cmbShiftNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShiftNoItemStateChanged
        String productionDate, productionDocumentNo;
        lblStatus.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        int Shift = cmbShiftNo.getSelectedIndex();
        txtShiftNo.setText(Integer.toString(cmbShiftNo.getSelectedIndex()));
        txtShiftname.setText((String) cmbShiftNo.getSelectedItem());
        ShiftNo1 = Shift;
        theopicks();
    }//GEN-LAST:event_cmbShiftNoItemStateChanged

    private void cmbShiftNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShiftNoActionPerformed

    }//GEN-LAST:event_cmbShiftNoActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        try {
            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltWeaving.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&PROD_DATE=" + EITLERPGLOBAL.formatDateDB(txtWeavingDate.getText()));
            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "File error " + e.getMessage(), "FILE ERROR", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltWvgLoomEff.HistoryView = false;
        ObjFeltWvgLoomEff.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltWvgLoomEff.ShowHistory(EITLERPGLOBAL.formatDateDB(txtWeavingDate.getText()), txtWvgProdNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtWeavingDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtWeavingDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeavingDateFocusGained
        ShowMessage("Enter Updation Date");
    }//GEN-LAST:event_txtWeavingDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        finalapproved = "NO";
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "NO";
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "YES";
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(723, txtWvgProdNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltWvgLoomEff.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltWeavingLoom.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed

        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    private void addloom() {

    }

    private void addtablerow() {

    }
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbShiftNo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem1stShift;
    private javax.swing.JMenuItem jMenuItem2ndShift;
    private javax.swing.JMenuItem jMenuItem3rdShift;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JPopupMenu jPopupMenuDoc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRev1No;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtShiftNo;
    private javax.swing.JTextField txtShiftname;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtWeavingDate;
    private javax.swing.JTextField txtWvgProdNo;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtWeavingDate.setText(EITLERPGLOBAL.getCurrentDate());

        txtWvgProdNo.setText("");
        txtShiftNo.setText("");
        txtShiftname.setText("");

        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 723)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltWvgLoomEff.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

            }
            //============================================//
            //
            String WeavingDate = EITLERPGLOBAL.formatDate(ObjFeltWvgLoomEff.getAttribute("WLO_WEAVING_DATE").getString());
            String WvgProductionNo = ObjFeltWvgLoomEff.getAttribute("WLO_WVGPROD_NO").getString();
            lblTitle.setText("FELT WEAVING LOOM WISE PRODUCTION EFFICIENCY ENTRY FORM - " + WvgProductionNo);
            lblRev1No.setText(Integer.toString((int) ObjFeltWvgLoomEff.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltWvgLoomEff.getAttribute("HIERARCHY_ID").getVal());

            DoNotEvaluate = true;

            FormatGrid();
            txtWeavingDate.setText(WeavingDate);
            txtWvgProdNo.setText(WvgProductionNo);

            txtShiftNo.setText(ObjFeltWvgLoomEff.getAttribute("WLO_SHIFT").getString());
            EITLERPGLOBAL.setComboIndex(cmbShiftNo, Integer.parseInt(ObjFeltWvgLoomEff.getAttribute("WLO_SHIFT").getString()));
            EITLERPGLOBAL.setComboIndex(cmbShiftNo, Integer.parseInt(txtShiftNo.getText()));

            //Now Generate Table
            for (int i = 1; i <= ObjFeltWvgLoomEff.hmFeltWvgLoomEffDetails.size(); i++) {
                clsFeltWeavingLoomDetails ObjFeltWvgLoomEffDetails = (clsFeltWeavingLoomDetails) ObjFeltWvgLoomEff.hmFeltWvgLoomEffDetails.get(Integer.toString(i));

                Object[] rowData = new Object[70];
                rowData[0] = Integer.toString(i);
                rowData[1] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOOM_NO").getString();
                rowData[2] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_RPM").getString();
                rowData[3] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_NO").getString();
                rowData[4] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_READ_SPACE").getString();
                rowData[5] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_GROUP").getString();
                rowData[6] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_THEORITICAL_PICS").getString();
                rowData[7] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_ACTUAL_PICS").getString();
                rowData[8] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TARGATEDEFF").getString();
                rowData[9] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_NOWARP_TIME").getString();
                rowData[10] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_NOWEFT").getString();
                rowData[11] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_NOPOWER_TIME").getString();
                rowData[12] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_NOAIR").getString();
                rowData[13] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_BEAMGAITING_TIME").getString();
                rowData[14] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_NOWEAVER_TIME").getString();
                rowData[15] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_BEAM_NO").getString();
                rowData[16] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CHANGE_TIME").getString();
                rowData[17] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_OTHER").getString();
                rowData[18] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WEAVING_TIME").getString();
                rowData[19] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LESS").getString();
                rowData[20] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_SHORT").getString();
                rowData[21] = ObjFeltWvgLoomEffDetails.getAttribute("SUPER_NO").getString();
                rowData[22] = ObjFeltWvgLoomEffDetails.getAttribute("NAME_SUPER").getString();
                rowData[23] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WEAVER_CARDNO").getString();
                rowData[24] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_REMARKS").getString();
                rowData[25] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR_TIME").getString();
                rowData[26] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_SHUTTLE_REPAIR_TIME").getString();
                rowData[27] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR_TIME").getString();
                rowData[28] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_END_REPAIR_TIME").getString();
                rowData[29] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TEMPLE_REPAIR_TIME").getString();

                rowData[30] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOOM_NO").getString();
                rowData[31] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR1").getString();
                rowData[32] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR2").getString();
                rowData[33] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR3").getString();
                rowData[34] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR4").getString();
                rowData[35] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR5").getString();
                rowData[36] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_CLOTH_REPAIR6").getString();

                rowData[37] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOOM_NO").getString();
                rowData[38] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_SHUTTLE_REPAIR1").getString();
                rowData[39] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_SHUTTLE_REPAIR2").getString();
                rowData[40] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_SHUTTLE_REPAIR3").getString();
                rowData[41] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_SHUTTLE_REPAIR4").getString();

                rowData[42] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOOM_NO").getString();
                rowData[43] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR1").getString();
                rowData[44] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR2").getString();
                rowData[45] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR3").getString();
                rowData[46] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR4").getString();
                rowData[47] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR5").getString();
                rowData[48] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR6").getString();
                rowData[49] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR7").getString();
                rowData[50] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_PICKING_REPAIR8").getString();

                rowData[51] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOOM_NO").getString();
                rowData[52] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_END_REPAIR1").getString();
                rowData[53] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_END_REPAIR2").getString();
                rowData[54] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_END_REPAIR3").getString();
                rowData[55] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_END_REPAIR4").getString();
                rowData[56] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_WARP_END_REPAIR5").getString();

                rowData[57] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOOM_NO").getString();
                rowData[58] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TEMPLE_REPAIR1").getString();
                rowData[59] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TEMPLE_REPAIR2").getString();
                rowData[60] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TEMPLE_REPAIR3").getString();
                rowData[61] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TEMPLE_REPAIR4").getString();
                rowData[62] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_TEMPLE_REPAIR5").getString();

                rowData[63] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_MISC_TIME").getString();
                rowData[64] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOSS_TIME").getString();
                rowData[65] = ObjFeltWvgLoomEffDetails.getAttribute("WLO_LOSS_TOTAL").getString();
                DataModel.addRow(rowData);

            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(723, WvgProductionNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString()) + ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10, 19);
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString()) + ObjFlow.getAttribute("ACTION_DATE").getString().substring(10, 19);
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            //            HashMap hmApprovalHistory=clsFeltWeavingLoom.getHistoryList(ObjFeltWvgLoomEff.getAttribute("WLO_WVGPROD_NO").getString(), txtWvgProdNo.getText());
            HashMap hmApprovalHistory = clsFeltWeavingLoom.getHistoryList(WeavingDate, WvgProductionNo);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltWeavingLoom ObjFeltWvgLoomEff = (clsFeltWeavingLoom) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];
                rowData[0] = Integer.toString((int) ObjFeltWvgLoomEff.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFeltWvgLoomEff.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltWvgLoomEff.getAttribute("ENTRY_DATE").getString()) + ObjFeltWvgLoomEff.getAttribute("ENTRY_DATE").getString().substring(10, 19);
                String ApprovalStatus = "";
                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltWvgLoomEff.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltWvgLoomEff.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltWvgLoomEff.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;

    }

    private void FormatGrid() {
        try {

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            //Add Columns to it
            DataModel.addColumn("Sr.");
            DataModel.addColumn("Loom");
            DataModel.addColumn("RPM");
            DataModel.addColumn("Warp Beam");
            DataModel.addColumn("Read Space");
            DataModel.addColumn("Group");
            DataModel.addColumn("TH.Pics");
            DataModel.addColumn("AC.Pics");
            DataModel.addColumn("Targated EFf");
            DataModel.addColumn("NoWarp");
            DataModel.addColumn("NoWeft");
            DataModel.addColumn("NoPwr");
            DataModel.addColumn("NoAir");
            DataModel.addColumn("BG");
            DataModel.addColumn("No WVR");
            DataModel.addColumn("No Beam");
            DataModel.addColumn("Ch.Time");
            DataModel.addColumn("Other");
            DataModel.addColumn("WVGTime");
            DataModel.addColumn("Less Prod.");
            DataModel.addColumn("Shortfall");
            //DataModel.addColumn("Supervisor No");
            DataModel.addColumn("Supervisor");
            DataModel.addColumn("Name");
            DataModel.addColumn("WvrNo");
            DataModel.addColumn("Remark");
            DataModel.addColumn("CRTotal");
            DataModel.addColumn("SRTotal");
            DataModel.addColumn("PRTotal");
            DataModel.addColumn("WRTotal");
            DataModel.addColumn("TRTotal");

            DataModel.addColumn("Loom");
            DataModel.addColumn("CR1");
            DataModel.addColumn("CR2");
            DataModel.addColumn("CR3");
            DataModel.addColumn("CR4");
            DataModel.addColumn("CR5");
            DataModel.addColumn("CR6");

            DataModel.addColumn("Loom");
            DataModel.addColumn("SR1");
            DataModel.addColumn("SR2");
            DataModel.addColumn("SR3");
            DataModel.addColumn("SR4");

            DataModel.addColumn("Loom");
            DataModel.addColumn("PR1");
            DataModel.addColumn("PR2");
            DataModel.addColumn("PR3");
            DataModel.addColumn("PR4");
            DataModel.addColumn("PR5");
            DataModel.addColumn("PR6");
            DataModel.addColumn("PR7");
            DataModel.addColumn("PR8");

            DataModel.addColumn("Loom");
            DataModel.addColumn("WR1");
            DataModel.addColumn("WR2");
            DataModel.addColumn("WR3");
            DataModel.addColumn("WR4");
            DataModel.addColumn("WR5");

            DataModel.addColumn("Loom");
            DataModel.addColumn("TR1");
            DataModel.addColumn("TR2");
            DataModel.addColumn("TR3");
            DataModel.addColumn("TR4");
            DataModel.addColumn("TR5");

            DataModel.addColumn("Misc.");
            DataModel.addColumn("Loss Time");
            DataModel.addColumn("Total Loss");

            DataModel.SetReadOnly(0);

            // 
            //ReasonResetReadonly();
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(17);
            DataModel.SetReadOnly(18);
            DataModel.SetReadOnly(20);
            DataModel.SetReadOnly(25);
            DataModel.SetReadOnly(26);
            DataModel.SetReadOnly(27);
            DataModel.SetReadOnly(28);
            DataModel.SetReadOnly(29);
            DataModel.SetReadOnly(30);
            DataModel.SetReadOnly(37);
            DataModel.SetReadOnly(42);
            DataModel.SetReadOnly(51);
            DataModel.SetReadOnly(57);
            DataModel.SetReadOnly(64);
            DataModel.SetReadOnly(65);

            Table.getColumnModel().getColumn(0).setMaxWidth(30);

            Table.getColumnModel().getColumn(1).setMaxWidth(40);
            Table.getColumnModel().getColumn(2).setMaxWidth(50);
            Table.getColumnModel().getColumn(3).setMaxWidth(80);
            Table.getColumnModel().getColumn(4).setMaxWidth(100);
            Table.getColumnModel().getColumn(5).setMaxWidth(100);
            Table.getColumnModel().getColumn(6).setMaxWidth(100);
            Table.getColumnModel().getColumn(7).setMaxWidth(150);
            Table.getColumnModel().getColumn(8).setMaxWidth(200);
            Table.getColumnModel().getColumn(9).setMaxWidth(100);
            Table.getColumnModel().getColumn(10).setMaxWidth(100);
            Table.getColumnModel().getColumn(11).setMaxWidth(100);
            Table.getColumnModel().getColumn(12).setMaxWidth(100);
            Table.getColumnModel().getColumn(13).setMaxWidth(100);
            Table.getColumnModel().getColumn(14).setMaxWidth(150);
            Table.getColumnModel().getColumn(15).setMaxWidth(150);
            Table.getColumnModel().getColumn(16).setMaxWidth(150);
            Table.getColumnModel().getColumn(17).setMaxWidth(150);
            Table.getColumnModel().getColumn(18).setMaxWidth(200);
            Table.getColumnModel().getColumn(19).setMaxWidth(150);
            Table.getColumnModel().getColumn(20).setMaxWidth(200);
            Table.getColumnModel().getColumn(21).setMinWidth(100);
            Table.getColumnModel().getColumn(21).setWidth(70);
            Table.getColumnModel().getColumn(22).setWidth(100);
            Table.getColumnModel().getColumn(22).setMaxWidth(150);
            Table.getColumnModel().getColumn(23).setMaxWidth(200);
            Table.getColumnModel().getColumn(24).setMaxWidth(400);
            Table.getColumnModel().getColumn(24).setMinWidth(300);
            Table.getColumnModel().getColumn(25).setMaxWidth(100);
            Table.getColumnModel().getColumn(26).setMaxWidth(100);
            Table.getColumnModel().getColumn(27).setMaxWidth(100);
            Table.getColumnModel().getColumn(28).setMaxWidth(100);
            Table.getColumnModel().getColumn(29).setMaxWidth(100);
            Table.getColumnModel().getColumn(30).setMaxWidth(50);
            Table.getColumnModel().getColumn(31).setMaxWidth(70);
            Table.getColumnModel().getColumn(32).setMaxWidth(70);
            Table.getColumnModel().getColumn(33).setMaxWidth(70);
            Table.getColumnModel().getColumn(34).setMaxWidth(70);
            Table.getColumnModel().getColumn(35).setMaxWidth(70);
            Table.getColumnModel().getColumn(36).setMaxWidth(70);
            Table.getColumnModel().getColumn(37).setMaxWidth(50);
            Table.getColumnModel().getColumn(38).setMaxWidth(70);
            Table.getColumnModel().getColumn(39).setMaxWidth(70);
            Table.getColumnModel().getColumn(40).setMaxWidth(70);
            Table.getColumnModel().getColumn(41).setMaxWidth(70);
            Table.getColumnModel().getColumn(42).setMaxWidth(50);
            Table.getColumnModel().getColumn(43).setMaxWidth(70);
            Table.getColumnModel().getColumn(44).setMaxWidth(70);
            Table.getColumnModel().getColumn(45).setMaxWidth(70);
            Table.getColumnModel().getColumn(46).setMaxWidth(70);
            Table.getColumnModel().getColumn(48).setMaxWidth(70);
            Table.getColumnModel().getColumn(49).setMaxWidth(70);
            Table.getColumnModel().getColumn(50).setMaxWidth(70);
            Table.getColumnModel().getColumn(51).setMaxWidth(50);
            Table.getColumnModel().getColumn(52).setMaxWidth(70);
            Table.getColumnModel().getColumn(53).setMaxWidth(70);
            Table.getColumnModel().getColumn(54).setMaxWidth(70);
            Table.getColumnModel().getColumn(55).setMaxWidth(70);
            Table.getColumnModel().getColumn(56).setMaxWidth(70);
            Table.getColumnModel().getColumn(57).setMaxWidth(50);
            Table.getColumnModel().getColumn(58).setMaxWidth(70);
            Table.getColumnModel().getColumn(59).setMaxWidth(70);
            Table.getColumnModel().getColumn(60).setMaxWidth(70);
            Table.getColumnModel().getColumn(61).setMaxWidth(70);
            Table.getColumnModel().getColumn(62).setMaxWidth(70);
            Table.getColumnModel().getColumn(63).setMaxWidth(100);
            Table.getColumnModel().getColumn(64).setMaxWidth(100);
            Table.getColumnModel().getColumn(65).setMaxWidth(100);
            if (EditMode != 0) {
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                        new ListSelectionListener() {
                            public void valueChanged(ListSelectionEvent e) {
                                int column = Table.getSelectedColumn();
                                String strVar = DataModel.getVariable(column);
                                //=============== Cell Editing Routine =======================//
                                Table.editCellAt(Table.getSelectedRow(), column);
                                if (Table.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) Table.getEditorComponent()).selectAll();
                                }
                                //============= Cell Editing Routine Ended =================//
                            }
                        });

                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();

                            //=========== Cell Update Prevention Check ===========//
                            String curValue = ((String) Table.getValueAt(row, column)).trim();
                            if (curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if (DoNotEvaluate) {
                                return;
                            }

                        }
                    }
                }
                );

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=723 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=723 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box

    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(723, ObjFeltWvgLoomEff.getAttribute("WLO_WVGPROD_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(723, txtWvgProdNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(723, txtWvgProdNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }
        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(723, txtWvgProdNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }
    //Generates User Name Combo Box

    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(723, ObjFeltWvgLoomEff.getAttribute("WLO_WVGPROD_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(723, FromUserID, ObjFeltWvgLoomEff.getAttribute("WLO_WVGPROD_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(723, txtWvgProdNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        //7034 replace with 6076
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6076, 60761)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6076, 60762)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6076, 60763)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6076, 60765)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        jPopupMenu.show(cmdNew, 0, 35);
    }

    private void Edit() {

        String productionDocumentNo = (String) ObjFeltWvgLoomEff.getAttribute("WLO_WVGPROD_NO").getObj();
        if (ObjFeltWvgLoomEff.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();

            if (clsFeltProductionApprovalFlow.IsCreator(clsFeltWeavingLoom.ModuleID, productionDocumentNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7034, 70342)) {
                SetFields(true);
                txtWeavingDate.setEnabled(false);

            } else {

                EnableApproval();
            }
            DisableToolbar();

        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. \n It is either approved/rejected or waiting approval for other user");

        }
    }

    private void Delete() {
        if (ObjFeltWvgLoomEff.CanDelete(txtWvgProdNo.getText(), txtWeavingDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, ObjFeltWvgLoomEff.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String WeavingDate, ShiftNo;
        int i = 0, j = 0;
        String WvgProductionNo = "", LOOM_NOString = "", LOOM_NOString1 = "", RPMString = "", WARP_NOString = "", NOWEFTString = "";
        String GROUPString = "", THEORITICAL_PICSString = "", ACTUAL_PICSString = "", NOWARP_TIMEString = "", NOPOWER_TIMEString = "";
        String BEAMGAITING_TIMEString = "", NOWEAVER_TIMEString = "", NOBEAMString = "";
        String CLOTH_REPAIR_TIMEString = "", SHUTTLE_REPAIR_TIMEString = "";
        String PICKING_REPAIR_TIMEString = "", WARP_END_REPAIR_TIMEString = "", OTHERString = "", TEMPLE_REPAIR_TIMEString = "";
        String CHANGE_TIMEString = "", WEAVING_TIMEString = "", WEAVER_CARDNOString = "", REMARKSString = "";//CLOTH_REPAIR_TCRString = "";
        String CLOTH_REPAIR1String = "", CLOTH_REPAIR2String = "", CLOTH_REPAIR3String = "", CLOTH_REPAIR4String = "";
        String CLOTH_REPAIR5String = "", CLOTH_REPAIR6String = "", SHUTTLE_REPAIR1String = "";//,SHUTTLE_REPAIR_TSRString = ""
        String SHUTTLE_REPAIR2String = "", SHUTTLE_REPAIR3String = "", SHUTTLE_REPAIR4String = "";//PICKING_REPAIR_TPRString = "";
        String PICKING_REPAIR1String = "", PICKING_REPAIR2String = "", PICKING_REPAIR3String = "", PICKING_REPAIR4String = "";
        String PICKING_REPAIR5String = "", PICKING_REPAIR6String = "", PICKING_REPAIR7String = "", PICKING_REPAIR8String = "";
        String WARP_END_REPAIR1String = "", WARP_END_REPAIR2String = "", WARP_END_REPAIR3String = "";//NO_WEFTString="",WARP_END_REPAIR_TWRString = "";
        String WARP_END_REPAIR4String = "", WARP_END_REPAIR5String = "", TEMPLE_REPAIR1String = "";//,TEMPLE_REPAIR_TTRString = ""
        String TEMPLE_REPAIR2String = "", TEMPLE_REPAIR3String = "", TEMPLE_REPAIR4String = "", TEMPLE_REPAIR5String = "", READ_SPACEString = "";
        String MISC_TIMEString = "", TARGATEDEFFString = "", SUPER_NOString = "", NAME_SUPERString = "", NOAIRString = "", LESSString = "", SHORTString = "", LOSSString = "", LOSSSTString = "";

        //        int DeptID =  EITLERPGLOBAL.gUserDeptID;
        WeavingDate = txtWeavingDate.getText().trim();
        WvgProductionNo = txtWvgProdNo.getText().trim();
        ShiftNo = Integer.toString(cmbShiftNo.getSelectedIndex());

        //Form level validations
        if (WeavingDate.equals("") || !EITLERPGLOBAL.isDate(WeavingDate)) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Enter Valid UpdationDate.", "Wrong Updation Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Production Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date WVG_Date = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(WeavingDate));
        /*if((WVG_Date.after(FinFromDate)||WVG_Date.compareTo(FinFromDate)==0)&&(WVG_Date.before(FinToDate)||WVG_Date.compareTo(FinToDate)==0)) {
         //Within the year
         }else {
         JOptionPane.showMessageDialog(frmFeltWeavingLoom.this,"Updation Date is Not Within Financial Year.","FINANCIAL YEAR ERROR",JOptionPane.ERROR_MESSAGE);
         return;
         }        
         */
        if (WVG_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Updation Date Must be Before or the Same Date as Today.", "Wrong Production Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Enter Loom No Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            WeavingProductionNo();
        }

        try {
            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Loom No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            ObjFeltWvgLoomEff.hmFeltWvgLoomEffDetails.clear();

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                //  Validation before Saving
                j++;
                LOOM_NOString = ((String) Table.getValueAt(i, 1)).trim();
                j++;
                RPMString = ((String) Table.getValueAt(i, 2)).trim();
                j++;
                WARP_NOString = ((String) Table.getValueAt(i, 3)).trim();
                j++;
                READ_SPACEString = ((String) Table.getValueAt(i, 4)).trim();
                j++;
                GROUPString = ((String) Table.getValueAt(i, 5)).trim();
                j++;
                THEORITICAL_PICSString = ((String) Table.getValueAt(i, 6)).trim();
                j++;
                ACTUAL_PICSString = ((String) Table.getValueAt(i, 7)).trim();
                j++;
                TARGATEDEFFString = ((String) Table.getValueAt(i, 8)).trim();
                j++;
                NOWARP_TIMEString = ((String) Table.getValueAt(i, 9)).trim();
                j++;
                NOWEFTString = ((String) Table.getValueAt(i, 10)).trim();
                j++;
                NOPOWER_TIMEString = ((String) Table.getValueAt(i, 11)).trim();
                j++;
                NOAIRString = ((String) Table.getValueAt(i, 12)).trim();
                j++;
                BEAMGAITING_TIMEString = ((String) Table.getValueAt(i, 13)).trim();
                j++;
                NOWEAVER_TIMEString = ((String) Table.getValueAt(i, 14)).trim();
                j++;
                NOBEAMString = ((String) Table.getValueAt(i, 15)).trim();
                j++;
                CHANGE_TIMEString = ((String) Table.getValueAt(i, 16)).trim();
                j++;
                OTHERString = ((String) Table.getValueAt(i, 17)).trim();
                j++;
                WEAVING_TIMEString = ((String) Table.getValueAt(i, 18)).trim();
                j++;
                LESSString = ((String) Table.getValueAt(i, 19)).trim();
                j++;
                SHORTString = ((String) Table.getValueAt(i, 20)).trim();
                j++;
                SUPER_NOString = ((String) Table.getValueAt(i, 21)).trim();
                j++;
                NAME_SUPERString = ((String) Table.getValueAt(i, 22)).trim();
                j++;
                WEAVER_CARDNOString = ((String) Table.getValueAt(i, 23)).trim();
                j++;
                REMARKSString = ((String) Table.getValueAt(i, 24)).trim();
                j++;
                CLOTH_REPAIR_TIMEString = ((String) Table.getValueAt(i, 25)).trim();
                j++;
                SHUTTLE_REPAIR_TIMEString = ((String) Table.getValueAt(i, 26)).trim();
                j++;
                PICKING_REPAIR_TIMEString = ((String) Table.getValueAt(i, 27)).trim();
                j++;
                WARP_END_REPAIR_TIMEString = ((String) Table.getValueAt(i, 28)).trim();
                j++;
                TEMPLE_REPAIR_TIMEString = ((String) Table.getValueAt(i, 29)).trim();
                j = 0;
                LOOM_NOString1 = ((String) Table.getValueAt(i, 30)).trim();
                j++;
                CLOTH_REPAIR1String = ((String) Table.getValueAt(i, 31)).trim();
                j++;
                CLOTH_REPAIR2String = ((String) Table.getValueAt(i, 32)).trim();
                j++;
                CLOTH_REPAIR3String = ((String) Table.getValueAt(i, 33)).trim();
                j++;
                CLOTH_REPAIR4String = ((String) Table.getValueAt(i, 34)).trim();
                j++;
                CLOTH_REPAIR5String = ((String) Table.getValueAt(i, 35)).trim();
                j++;
                CLOTH_REPAIR6String = ((String) Table.getValueAt(i, 36)).trim();
                j++;
                LOOM_NOString1 = ((String) Table.getValueAt(i, 37)).trim();
                j++;
                SHUTTLE_REPAIR1String = ((String) Table.getValueAt(i, 38)).trim();
                j++;
                SHUTTLE_REPAIR2String = ((String) Table.getValueAt(i, 39)).trim();
                j++;
                SHUTTLE_REPAIR3String = ((String) Table.getValueAt(i, 40)).trim();
                j++;
                SHUTTLE_REPAIR4String = ((String) Table.getValueAt(i, 41)).trim();
                j++;
                LOOM_NOString1 = ((String) Table.getValueAt(i, 42)).trim();
                j++;
                PICKING_REPAIR1String = ((String) Table.getValueAt(i, 43)).trim();
                j++;
                PICKING_REPAIR2String = ((String) Table.getValueAt(i, 44)).trim();
                j++;
                PICKING_REPAIR3String = ((String) Table.getValueAt(i, 45)).trim();
                j++;
                PICKING_REPAIR4String = ((String) Table.getValueAt(i, 46)).trim();
                j++;
                PICKING_REPAIR5String = ((String) Table.getValueAt(i, 47)).trim();
                j++;
                PICKING_REPAIR6String = ((String) Table.getValueAt(i, 48)).trim();
                j++;
                PICKING_REPAIR7String = ((String) Table.getValueAt(i, 49)).trim();
                j++;
                PICKING_REPAIR8String = ((String) Table.getValueAt(i, 50)).trim();
                j++;
                LOOM_NOString1 = ((String) Table.getValueAt(i, 51)).trim();
                j++;
                WARP_END_REPAIR1String = ((String) Table.getValueAt(i, 52)).trim();
                j++;
                WARP_END_REPAIR2String = ((String) Table.getValueAt(i, 53)).trim();
                j++;
                WARP_END_REPAIR3String = ((String) Table.getValueAt(i, 54)).trim();
                j++;
                WARP_END_REPAIR4String = ((String) Table.getValueAt(i, 55)).trim();
                j++;
                WARP_END_REPAIR5String = ((String) Table.getValueAt(i, 56)).trim();
                j++;
                LOOM_NOString1 = ((String) Table.getValueAt(i, 57)).trim();
                j++;
                TEMPLE_REPAIR1String = ((String) Table.getValueAt(i, 58)).trim();
                j++;
                TEMPLE_REPAIR2String = ((String) Table.getValueAt(i, 59)).trim();
                j++;
                TEMPLE_REPAIR3String = ((String) Table.getValueAt(i, 60)).trim();
                j++;
                TEMPLE_REPAIR4String = ((String) Table.getValueAt(i, 61)).trim();
                j++;
                TEMPLE_REPAIR5String = ((String) Table.getValueAt(i, 62)).trim();
                j++;
                MISC_TIMEString = ((String) Table.getValueAt(i, 63)).trim();
                j++;
                LOSSString = ((String) Table.getValueAt(i, 64)).trim();
                j++;
                LOSSSTString = ((String) Table.getValueAt(i, 65)).trim();

                clsFeltWeavingLoomDetails ObjFeltWvgLoomEffDetails = new clsFeltWeavingLoomDetails();

                ObjFeltWvgLoomEffDetails.setAttribute("WLO_LOOM_NO", LOOM_NOString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_RPM", RPMString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_NO", WARP_NOString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_READ_SPACE", READ_SPACEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_GROUP", GROUPString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_THEORITICAL_PICS", THEORITICAL_PICSString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_ACTUAL_PICS", ACTUAL_PICSString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TARGATEDEFF", TARGATEDEFFString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_NOWARP_TIME", NOWARP_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_NOWEFT", NOWEFTString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_NOPOWER_TIME", NOPOWER_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_NOAIR", NOAIRString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_BEAMGAITING_TIME", BEAMGAITING_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_NOWEAVER_TIME", NOWEAVER_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_BEAM_NO", NOBEAMString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CHANGE_TIME", CHANGE_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_OTHER", OTHERString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WEAVING_TIME", WEAVING_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_LESS", OTHERString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_SHORT", OTHERString);
                ObjFeltWvgLoomEffDetails.setAttribute("SUPER_NO", SUPER_NOString);
                ObjFeltWvgLoomEffDetails.setAttribute("NAME_SUPER", NAME_SUPERString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WEAVER_CARDNO", WEAVER_CARDNOString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_REMARKS", REMARKSString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR_TIME", CLOTH_REPAIR_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_SHUTTLE_REPAIR_TIME", SHUTTLE_REPAIR_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR_TIME", PICKING_REPAIR_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_END_REPAIR_TIME", WARP_END_REPAIR_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TEMPLE_REPAIR_TIME", TEMPLE_REPAIR_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR1", CLOTH_REPAIR1String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR2", CLOTH_REPAIR2String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR3", CLOTH_REPAIR3String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR4", CLOTH_REPAIR4String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR5", CLOTH_REPAIR5String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_CLOTH_REPAIR6", CLOTH_REPAIR6String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_SHUTTLE_REPAIR1", SHUTTLE_REPAIR1String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_SHUTTLE_REPAIR2", SHUTTLE_REPAIR2String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_SHUTTLE_REPAIR3", SHUTTLE_REPAIR3String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_SHUTTLE_REPAIR4", SHUTTLE_REPAIR4String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR1", PICKING_REPAIR1String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR2", PICKING_REPAIR2String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR3", PICKING_REPAIR3String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR4", PICKING_REPAIR4String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR5", PICKING_REPAIR5String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR6", PICKING_REPAIR6String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR7", PICKING_REPAIR7String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_PICKING_REPAIR8", PICKING_REPAIR8String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_END_REPAIR1", WARP_END_REPAIR1String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_END_REPAIR2", WARP_END_REPAIR2String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_END_REPAIR3", WARP_END_REPAIR3String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_END_REPAIR4", WARP_END_REPAIR4String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_WARP_END_REPAIR5", WARP_END_REPAIR5String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TEMPLE_REPAIR1", TEMPLE_REPAIR1String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TEMPLE_REPAIR2", TEMPLE_REPAIR2String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TEMPLE_REPAIR3", TEMPLE_REPAIR3String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TEMPLE_REPAIR4", TEMPLE_REPAIR4String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_TEMPLE_REPAIR5", TEMPLE_REPAIR5String);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_MISC_TIME", MISC_TIMEString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_LOSS_TIME", LOSSString);
                ObjFeltWvgLoomEffDetails.setAttribute("WLO_LOSS_TOTAL", LOSSSTString);
                ObjFeltWvgLoomEff.hmFeltWvgLoomEffDetails.put(Integer.toString(ObjFeltWvgLoomEff.hmFeltWvgLoomEffDetails.size() + 1), ObjFeltWvgLoomEffDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltWvgLoomEff.setAttribute("WLO_WEAVING_DATE", WeavingDate);
        ObjFeltWvgLoomEff.setAttribute("WLO_WVGPROD_NO", WvgProductionNo);
        ObjFeltWvgLoomEff.setAttribute("WLO_SHIFT", ShiftNo);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltWvgLoomEff.Insert()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Error occured while saving. Error is " + ObjFeltWvgLoomEff.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltWvgLoomEff.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Error occured while saving editing. Error is " + ObjFeltWvgLoomEff.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        // cmbShiftNo.setEnabled(false);
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        String WeavingDate, ShiftNo;
        int i = 0, j = 0;
        String WvgProductionNo = "", LOOM_NOString = "", LOOM_NOString1 = "", RPMString = "", WARP_NOString = "", NOWEFTString = "";
        String GROUPString = "", THEORITICAL_PICSString = "", ACTUAL_PICSString = "", NOWARP_TIMEString = "", NOPOWER_TIMEString = "";
        String BEAMGAITING_TIMEString = "", NOWEAVER_TIMEString = "", NOBEAMString = "";
        String CLOTH_REPAIR_TIMEString = "", SHUTTLE_REPAIR_TIMEString = "";
        String PICKING_REPAIR_TIMEString = "", WARP_END_REPAIR_TIMEString = "", OTHERString = "", TEMPLE_REPAIR_TIMEString = "";
        String CHANGE_TIMEString = "", WEAVING_TIMEString = "", WEAVER_CARDNOString = "", REMARKSString = "";//CLOTH_REPAIR_TCRString = "";
        String CLOTH_REPAIR1String = "", CLOTH_REPAIR2String = "", CLOTH_REPAIR3String = "", CLOTH_REPAIR4String = "";
        String CLOTH_REPAIR5String = "", CLOTH_REPAIR6String = "", SHUTTLE_REPAIR1String = "";//,SHUTTLE_REPAIR_TSRString = ""
        String SHUTTLE_REPAIR2String = "", SHUTTLE_REPAIR3String = "", SHUTTLE_REPAIR4String = "";//PICKING_REPAIR_TPRString = "";
        String PICKING_REPAIR1String = "", PICKING_REPAIR2String = "", PICKING_REPAIR3String = "", PICKING_REPAIR4String = "";
        String PICKING_REPAIR5String = "", PICKING_REPAIR6String = "", PICKING_REPAIR7String = "", PICKING_REPAIR8String = "";
        String WARP_END_REPAIR1String = "", WARP_END_REPAIR2String = "", WARP_END_REPAIR3String = "";//NO_WEFTString="";WARP_END_REPAIR_TWRString = "",
        String WARP_END_REPAIR4String = "", WARP_END_REPAIR5String = "", TEMPLE_REPAIR1String = "";//,TEMPLE_REPAIR_TTRString = ""
        String TEMPLE_REPAIR2String = "", TEMPLE_REPAIR3String = "", TEMPLE_REPAIR4String = "", TEMPLE_REPAIR5String = "", READ_SPACEString = "";

        String MISC_TIMEString = "", TARGATEDEFFString = "", SUPER_NOString = "", NAME_SUPERString = "", NOAIRString = "", LESSString = "", SHORTString = "", LOSSString = "", LOSSTString = "";

        //        int DeptID =  EITLERPGLOBAL.gUserDeptID;
        WeavingDate = txtWeavingDate.getText().trim();
        WvgProductionNo = txtWvgProdNo.getText().trim();
        ShiftNo = Integer.toString(cmbShiftNo.getSelectedIndex());

        //set data for insert/update
        ObjFeltWvgLoomEff.setAttribute("WLO_WEAVING_DATE", WeavingDate);
        ObjFeltWvgLoomEff.setAttribute("WLO_WVGPROD_NO", WvgProductionNo);
        ObjFeltWvgLoomEff.setAttribute("WLO_SHIFT", ShiftNo);

        //-------- Update Approval Specific Fields -----------//
        ObjFeltWvgLoomEff.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltWvgLoomEff.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltWvgLoomEff.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltWvgLoomEff.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        //    ObjFeltWvgLoomEff.setAttribute("UPDATED_BY",EITLERPGLOBAL.getComboCode(cmbUserName));
        ObjFeltWvgLoomEff.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltWvgLoomEff.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltWvgLoomEff.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltWvgLoomEff.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltWvgLoomEff.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltWvgLoomEff.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltWvgLoomEff.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltWvgLoomEff.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjFeltWvgLoomEff.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjFeltWvgLoomEff.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        //    cmbShiftNo.setEnabled(false);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Production.FeltWeavingLoom.frmFindFeltWeavingLoom", true);
        frmFindFeltWeavingLoom ObjFeltFindWvgLoomEff = (frmFindFeltWeavingLoom) ObjLoader.getObj();

        System.out.println(ObjFeltFindWvgLoomEff.Cancelled);
        if (ObjFeltFindWvgLoomEff.Cancelled == false) {
            if (!ObjFeltWvgLoomEff.Filter(ObjFeltFindWvgLoomEff.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, " No records found.", "Find Felt Weaving Effency Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    public void Find(String docNo) {
        //    ObjFeltWvgLoomEff.Filter("AND WLO_WVGPROD_NO='"+docNo+"'");
        ObjFeltWvgLoomEff.Filter(" WLO_WVGPROD_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindWaiting() {
        //ObjSalesParty.Filter(" WHERE PARTY_CODE IN (SELECT D_SAL_PARTY_MASTER.PARTY_CODE FROM D_SAL_PARTY_MASTER,D_COM_DOC_DATA WHERE D_SAL_PARTY_MASTER.PARTY_CODE=D_COM_DOC_DATA.DOC_NO AND D_SAL_PARTY_MASTER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_SAL_PARTY_MASTER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsmachinesurvey.ModuleID+")");
        ObjFeltWvgLoomEff.Filter(" WLO_WVGPROD_NO IN (SELECT DOC_NO FROM PRODUCTION.FELT_PROD_DOC_DATA WHERE PRODUCTION.FELT_PROD_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W'AND MODULE_ID=723)");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String pPartyCode) {

        //public void FindEx(int pCompanyID,String pPartyCode,String Maincode) {
        //ObjSalesParty.Filter(" WHERE PARTY_CD='"+pPartyCode+"' AND PIECE_NO='"+pPieceNo+"'");
        ObjFeltWvgLoomEff.Filter(" WLO_WVGPROD_NO='" + pPartyCode + "'");
        ObjFeltWvgLoomEff.MoveFirst();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltWvgLoomEff.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltWvgLoomEff.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltWvgLoomEff.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltWvgLoomEff.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        TableColumnModel ColModel = TableApprovalStatus.getColumnModel();
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");

        TableApprovalStatus.getColumnModel().getColumn(0).setMaxWidth(100);
        TableApprovalStatus.getColumnModel().getColumn(1).setMinWidth(100);
        TableApprovalStatus.getColumnModel().getColumn(2).setMinWidth(100);
        TableApprovalStatus.getColumnModel().getColumn(3).setMinWidth(100);
        TableApprovalStatus.getColumnModel().getColumn(5).setMinWidth(100);
        TableApprovalStatus.getColumnModel().getColumn(4).setMinWidth(100);

    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        TableColumnModel ColModel = TableUpdateHistory.getColumnModel();
        //TableUpdateHistory.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");

        TableUpdateHistory.getColumnModel().getColumn(0).setMaxWidth(150);
        TableUpdateHistory.getColumnModel().getColumn(3).setMaxWidth(100);

    }

    private void GenerateShiftNoCombo() {
        HashMap List = new HashMap();
        //----- Generate SHIFT  Combo ------- //

        cmbShiftNoModel = new EITLComboModel();
        cmbShiftNo.removeAllItems();
        cmbShiftNo.setModel(cmbShiftNoModel);

        try {
            ComboData combodata = new ComboData();
            combodata.Code = 0;
            combodata.Text = "Select Shift Code";

            cmbShiftNoModel.addElement(combodata);
            ResultSet rs = data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='SHIFT' ORDER BY PARA_CODE+0");
            while (!rs.isAfterLast()) {
                combodata = new ComboData();
                combodata.Code = rs.getLong("PARA_CODE");
                combodata.Text = rs.getString("PARA_DESC");
                cmbShiftNoModel.addElement(combodata);
                rs.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void AddAllLoom() {

        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;

        try {
            tmpConn = data.getConn();
            stTmp = tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            //rsTmp=stTmp.executeQuery("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='LOOM'");
            rsTmp = stTmp.executeQuery("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='LOOM' AND PARA_REMARKS='0' ORDER BY PARA_CODE");

            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {

                    Object[] rowData = new Object[68];
                    rowData[0] = Integer.toString(Table.getRowCount() + 1);
                    rowData[1] = "";
                    rowData[2] = "0";
                    rowData[3] = "";
                    rowData[4] = "";
                    rowData[5] = "";
                    rowData[6] = "";
                    rowData[7] = "";
                    rowData[8] = "0";
                    rowData[9] = "";
                    rowData[10] = "";
                    rowData[11] = "";
                    rowData[12] = "";
                    rowData[13] = "";
                    rowData[13] = "";
                    rowData[14] = "";
                    rowData[15] = "";
                    rowData[16] = "";
                    rowData[17] = "";
                    rowData[18] = "";
                    rowData[19] = "";
                    rowData[20] = "";
                    rowData[21] = "";
                    rowData[22] = "";
                    rowData[23] = "";
                    rowData[24] = "";
                    rowData[25] = "";
                    rowData[26] = "";
                    rowData[27] = "";
                    rowData[28] = "";
                    rowData[29] = "";
                    rowData[30] = "";
                    rowData[31] = "";
                    rowData[32] = "";
                    rowData[33] = "";
                    rowData[34] = "";
                    rowData[35] = "";
                    rowData[36] = "";
                    rowData[37] = "";
                    rowData[38] = "";
                    rowData[39] = "";
                    rowData[40] = "";
                    rowData[41] = "";
                    rowData[42] = "";
                    rowData[43] = "";
                    rowData[44] = "";
                    rowData[45] = "";
                    rowData[46] = "";
                    rowData[47] = "";
                    rowData[48] = "";
                    rowData[49] = "";
                    rowData[50] = "";
                    rowData[51] = "";
                    rowData[52] = "";
                    rowData[53] = "";
                    rowData[54] = "";
                    rowData[55] = "";
                    rowData[56] = "";
                    rowData[57] = "";
                    rowData[58] = "";
                    rowData[59] = "";
                    rowData[60] = "";
                    rowData[61] = "";
                    rowData[62] = "";
                    rowData[63] = "";
                    rowData[64] = "";
                    rowData[65] = "";
                    rowData[1] = rsTmp.getString("PARA_CODE");
                    // rowData[2]=rsTmp.getString("PARA_DESC");
                    rowData[30] = rsTmp.getString("PARA_CODE");
                    rowData[37] = rsTmp.getString("PARA_CODE");
                    rowData[42] = rsTmp.getString("PARA_CODE");
                    rowData[51] = rsTmp.getString("PARA_CODE");
                    rowData[57] = rsTmp.getString("PARA_CODE");
                    rowData[25] = "0.0";
                    rowData[26] = "0.0";
                    rowData[27] = "0.0";
                    rowData[28] = "0.0";
                    rowData[29] = "0.0";
                    rowData[3] = "0";
                    rowData[4] = "0";
                    rowData[8] = "0";
                    rowData[9] = "0";
                    rowData[10] = "0";
                    rowData[11] = "0";
                    rowData[12] = "0";
                    rowData[13] = "0";
                    rowData[14] = "0";
                    rowData[15] = "0";
                    rowData[16] = "0";
                    rowData[19] = "0";
                    //rowData[21]="No.";
                    //rowData[22]="Name";
                    rowData[63] = "0";
                    rowData[64] = "0";
                    rowData[65] = "0";

                    DataModel.addRow(rowData);
                    Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
                    Table.requestFocus();
                    theopicks();
                    rsTmp.next();
                }

            }
            //tmpConn.close();
            stTmp.close();
            rsTmp.close();

        } catch (Exception e) {

        }

    }

    private void calculaterepair() {
        double macpi = 0;
        String m_acpi = "";
        m_acpi = ((String) Table.getValueAt(Table.getSelectedRow(), 7));
        if (m_acpi.equals("")) {
            macpi = 0;
        } else {
            macpi = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 7));
        }

        double mtcpi = 0;
        String m_tcpi = "";
        m_tcpi = ((String) Table.getValueAt(Table.getSelectedRow(), 6));
        if (m_tcpi.equals("")) {
            mtcpi = 0;
        } else {
            mtcpi = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 6));
        }
        if (macpi > mtcpi) {
            lblStatus.setText("Not More than Therical Pic...");
        } else {
            lblStatus.setText("Ready...");
        }

        /* double mlosstot=0;
         String m_losstot="";
         m_losstot=((String)Table.getValueAt(Table.getSelectedRow(), 65));
         if(m_tcpi.equals("")){
         mtcpi=0;
         }
         else{
         mtcpi = Double.parseDouble((String)Table.getValueAt(Table.getSelectedRow(), 65));
         }
         */
        double rpm = 0;
        String r_rpm = "";
        r_rpm = ((String) Table.getValueAt(Table.getSelectedRow(), 2));
        if (r_rpm.equals("")) {
            rpm = 0;
        } else {
            rpm = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2));
        }
        double trf = 0;
        String t_trf = "";
        t_trf = ((String) Table.getValueAt(Table.getSelectedRow(), 8));
        if (t_trf.equals("")) {
            trf = 0;
        } else {
            trf = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 8));
        }

        System.out.println("CPI :" + macpi);
        System.out.println("RPM :" + rpm);
        System.out.println("trf :" + trf);
        double Newtreff = 0.0;
        try {
            Newtreff = ((macpi / rpm / 60) / (trf / 100));

            //  Table.setValueAt(Double.toString(EITLERPGLOBAL.round(Newtreff,0)), Table.getSelectedRow(), 18);
            Table.setValueAt(Double.toString(EITLERPGLOBAL.doublevalue(Newtreff, 2)), Table.getSelectedRow(), 18);
        } catch (Exception e) {

        }

        String mparacd = "";
        String mparadesc = "";
        String mrpm = "";

        mparacd = ((String) Table.getValueAt(Table.getSelectedRow(), 1));
        mparadesc = ((String) Table.getValueAt(Table.getSelectedRow(), 5));
        mrpm = ((String) Table.getValueAt(Table.getSelectedRow(), 2));

        try {
            String sql = "SELECT PARA_EXT2 FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='LOOMRPM'";
            if (!mparacd.equals("")) {
                sql = sql + " AND PARA_CODE=" + mparacd + "";
            }
            if (!mparadesc.equals("")) {
                sql = sql + " AND PARA_DESC='" + mparadesc + "'";
            }
            if (!mrpm.equals("")) {
                sql = sql + " AND PARA_EXT1=" + mrpm + "";
            }

            //ResultSet rs=data.getResult("SELECT PARA_EXT2 FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='LOOMRPM' AND PARA_CODE="+mparacd+" AND PARA_DESC='"+mparadesc+"' AND PARA_EXT1="+mrpm+"");
            ResultSet rs = data.getResult(sql);
            rs.first();
            if (rs.getRow() > 0 && !mparadesc.equalsIgnoreCase("")) {
                Table.setValueAt(rs.getString("PARA_EXT2").toString(), Table.getSelectedRow(), 8);

            }
        } catch (Exception e) {
        }

        double mcloth1 = 0;
        String mclt1 = "";
        mclt1 = ((String) Table.getValueAt(Table.getSelectedRow(), 31));
        if (mclt1.equals("")) {
            mcloth1 = 0;
        } else {
            mcloth1 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 31));
        }

        double mcloth2 = 0;
        String mclt2 = "";
        mclt2 = ((String) Table.getValueAt(Table.getSelectedRow(), 32));
        if (mclt2.equals("")) {
            mcloth2 = 0;
        } else {
            mcloth2 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 32));
        }

        double mcloth3 = 0;
        String mclt3 = "";
        mclt3 = ((String) Table.getValueAt(Table.getSelectedRow(), 33));
        if (mclt3.equals("")) {
            mcloth3 = 0;
        } else {
            mcloth3 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 33));
        }

        double mcloth4 = 0;
        String mclt4 = "";
        mclt4 = ((String) Table.getValueAt(Table.getSelectedRow(), 34));
        if (mclt4.equals("")) {
            mcloth4 = 0;
        } else {
            mcloth4 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 34));
        }

        double mcloth5 = 0;
        String mclt5 = "";
        mclt5 = ((String) Table.getValueAt(Table.getSelectedRow(), 35));
        if (mclt5.equals("")) {
            mcloth5 = 0;
        } else {
            mcloth5 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 35));
        }

        double mcloth6 = 0;
        String mclt6 = "";
        mclt6 = ((String) Table.getValueAt(Table.getSelectedRow(), 36));
        if (mclt6.equals("")) {
            mcloth6 = 0;
        } else {
            mcloth6 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 36));
        }

        double NewClothRpr = (mcloth1 + mcloth2 + mcloth3 + mcloth4 + mcloth5 + mcloth6);
        Table.setValueAt(Double.toString(NewClothRpr), Table.getSelectedRow(), 25);

        double mshuttle1 = 0;
        String mshu1 = "";
        mshu1 = ((String) Table.getValueAt(Table.getSelectedRow(), 38));
        if (mshu1.equals("")) {
            mshuttle1 = 0;
        } else {
            mshuttle1 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 38));
        }

        double mshuttle2 = 0;
        String mshu2 = "";
        mshu2 = ((String) Table.getValueAt(Table.getSelectedRow(), 39));
        if (mshu2.equals("")) {
            mshuttle2 = 0;
        } else {
            mshuttle2 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 39));
        }

        double mshuttle3 = 0;
        String mshu3 = "";
        mshu2 = ((String) Table.getValueAt(Table.getSelectedRow(), 40));
        if (mshu2.equals("")) {
            mshuttle3 = 0;
        } else {
            mshuttle3 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 40));
        }

        double mshuttle4 = 0;
        String mshu4 = "";
        mshu4 = ((String) Table.getValueAt(Table.getSelectedRow(), 41));
        if (mshu4.equals("")) {
            mshuttle4 = 0;
        } else {
            mshuttle4 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 41));
        }

        double NewShuttleRpr = (mshuttle1 + mshuttle2 + mshuttle3 + mshuttle4);
        Table.setValueAt(Double.toString(NewShuttleRpr), Table.getSelectedRow(), 26);

        double mpicking1 = 0;
        String mpick1 = "";
        mpick1 = ((String) Table.getValueAt(Table.getSelectedRow(), 43));
        if (mpick1.equals("")) {
            mpicking1 = 0;
        } else {
            mpicking1 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 43));
        }
        double mpicking2 = 0;
        String mpick2 = "";
        mpick2 = ((String) Table.getValueAt(Table.getSelectedRow(), 44));
        if (mpick2.equals("")) {
            mpicking2 = 0;
        } else {
            mpicking2 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 44));
        }
        double mpicking3 = 0;
        String mpick3 = "";
        mpick3 = ((String) Table.getValueAt(Table.getSelectedRow(), 45));
        if (mpick3.equals("")) {
            mpicking3 = 0;
        } else {
            mpicking3 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 45));
        }
        double mpicking4 = 0;
        String mpick4 = "";
        mpick4 = ((String) Table.getValueAt(Table.getSelectedRow(), 46));
        if (mpick4.equals("")) {
            mpicking4 = 0;
        } else {
            mpicking4 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 46));
        }
        double mpicking5 = 0;
        String mpick5 = "";
        mpick5 = ((String) Table.getValueAt(Table.getSelectedRow(), 47));
        if (mpick5.equals("")) {
            mpicking5 = 0;
        } else {
            mpicking5 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 47));
        }
        double mpicking6 = 0;
        String mpick6 = "";
        mpick6 = ((String) Table.getValueAt(Table.getSelectedRow(), 48));
        if (mpick6.equals("")) {
            mpicking6 = 0;
        } else {
            mpicking6 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 48));
        }
        double mpicking7 = 0;
        String mpick7 = "";
        mpick7 = ((String) Table.getValueAt(Table.getSelectedRow(), 49));
        if (mpick7.equals("")) {
            mpicking7 = 0;
        } else {
            mpicking7 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 49));
        }
        double mpicking8 = 0;
        String mpick8 = "";
        mpick8 = ((String) Table.getValueAt(Table.getSelectedRow(), 50));
        if (mpick8.equals("")) {
            mpicking8 = 0;
        } else {
            mpicking8 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 50));
        }
        double NewPickingRpr = (mpicking1 + mpicking2 + mpicking3 + mpicking4 + mpicking5 + mpicking6 + mpicking7 + mpicking8);
        Table.setValueAt(Double.toString(NewPickingRpr), Table.getSelectedRow(), 27);

        double mwarp1 = 0;
        String mwar1 = "";
        mwar1 = ((String) Table.getValueAt(Table.getSelectedRow(), 52));
        if (mwar1.equals("")) {
            mwarp1 = 0;
        } else {
            mwarp1 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 52));
        }

        double mwarp2 = 0;
        String mwar2 = "";
        mwar2 = ((String) Table.getValueAt(Table.getSelectedRow(), 53));
        if (mwar2.equals("")) {
            mwarp2 = 0;
        } else {
            mwarp2 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 53));
        }
        double mwarp3 = 0;
        String mwar3 = "";
        mwar3 = ((String) Table.getValueAt(Table.getSelectedRow(), 54));
        if (mwar3.equals("")) {
            mwarp3 = 0;
        } else {
            mwarp3 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 54));
        }
        double mwarp4 = 0;
        String mwar4 = "";
        mwar4 = ((String) Table.getValueAt(Table.getSelectedRow(), 55));
        if (mwar4.equals("")) {
            mwarp4 = 0;
        } else {
            mwarp4 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 55));
        }
        double mwarp5 = 0;
        String mwar5 = "";
        mwar5 = ((String) Table.getValueAt(Table.getSelectedRow(), 56));
        if (mwar5.equals("")) {
            mwarp5 = 0;
        } else {
            mwarp5 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 56));
        }
        double NewWarpRpr = (mwarp1 + mwarp2 + mwarp3 + mwarp4 + mwarp5);
        Table.setValueAt(Double.toString(NewWarpRpr), Table.getSelectedRow(), 28);

        double mtemple1 = 0;
        String mtem1 = "";
        mtem1 = ((String) Table.getValueAt(Table.getSelectedRow(), 58));
        if (mtem1.equals("")) {
            mtemple1 = 0;
        } else {
            mtemple1 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 58));
        }
        double mtemple2 = 0;
        String mtem2 = "";
        mtem2 = ((String) Table.getValueAt(Table.getSelectedRow(), 59));
        if (mtem2.equals("")) {
            mtemple2 = 0;
        } else {
            mtemple2 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 59));
        }
        double mtemple3 = 0;
        String mtem3 = "";
        mtem3 = ((String) Table.getValueAt(Table.getSelectedRow(), 60));
        if (mtem3.equals("")) {
            mtemple3 = 0;
        } else {
            mtemple3 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 60));
        }
        double mtemple4 = 0;
        String mtem4 = "";
        mtem4 = ((String) Table.getValueAt(Table.getSelectedRow(), 61));

        if (mtem4.equals("")) {
            mtemple4 = 0;
        } else {
            mtemple4 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 61));
        }
        double mtemple5 = 0;
        String mtem5 = "";
        mtem5 = ((String) Table.getValueAt(Table.getSelectedRow(), 62));
        if (mtem5.equals("")) {
            mtemple5 = 0;
        } else {
            mtemple5 = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 62));
        }
        double NewTempleRpr = (mtemple1 + mtemple2 + mtemple3 + mtemple4 + mtemple5);
        Table.setValueAt(Double.toString(NewTempleRpr), Table.getSelectedRow(), 29);

        double mtotcr = 0;
        String mtot_cr = "";
        mtot_cr = ((String) Table.getValueAt(Table.getSelectedRow(), 25));
        if (mtot_cr.equals("")) {
            mtotcr = 0;
        } else {
            mtotcr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 25));
        }
        double mtotsr = 0;
        String mtot_sr = "";
        mtot_sr = ((String) Table.getValueAt(Table.getSelectedRow(), 26));
        if (mtot_sr.equals("")) {
            mtotsr = 0;
        } else {
            mtotsr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 26));
        }
        double mtotpr = 0;
        String mtot_pr = "";
        mtot_pr = ((String) Table.getValueAt(Table.getSelectedRow(), 27));
        if (mtot_pr.equals("")) {
            mtotpr = 0;
        } else {
            mtotpr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 27));
        }
        double mtotwr = 0;
        String mtot_wr = "";
        mtot_wr = ((String) Table.getValueAt(Table.getSelectedRow(), 28));
        if (mtot_wr.equals("")) {
            mtotwr = 0;
        } else {
            mtotwr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 28));
        }
        double mtottr = 0;
        String mtot_tr = "";
        mtot_tr = ((String) Table.getValueAt(Table.getSelectedRow(), 29));
        if (mtot_tr.equals("")) {
            mtottr = 0;
        } else {
            mtottr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 29));
        }
        double mtotmi = 0;
        String mtot_mi = "";
        mtot_mi = ((String) Table.getValueAt(Table.getSelectedRow(), 63));
        if (mtot_mi.equals("")) {
            mtotmi = 0;
        } else {
            mtotmi = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 63));
        }
        double NewtOther = (mtotcr + mtotsr + mtotpr + mtotwr + mtottr + mtotmi);
        Table.setValueAt(Double.toString(NewtOther), Table.getSelectedRow(), 17);

        double mshift = 0;
        String m_shift = txtShiftNo.getText().trim();
        if (m_shift.equals("1") || m_shift.equals("2")) {
            mshift = 8;
        }
        if (m_shift.equals("3")) {
            mshift = 6.5;
        }

        if (mshift < mtcpi) {
            lblStatus.setText("Not More than Therical Pic...");
        } else {
            lblStatus.setText("Ready...");
        }

        double mnowrap = 0.0;
        String m_nowrap = "";
        m_nowrap = ((String) Table.getValueAt(Table.getSelectedRow(), 9));
        if (m_nowrap.equals("")) {
            mnowrap = 0;
        } else {
            mnowrap = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 9));
        }

        double mnoweft = 0.0;
        String m_noweft = "";
        m_noweft = ((String) Table.getValueAt(Table.getSelectedRow(), 10));
        if (m_noweft.equals("")) {
            mnoweft = 0;
        } else {
            mnoweft = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 10));
        }

        double mnopwr = 0.0;
        String m_nopwr = "";
        m_nopwr = ((String) Table.getValueAt(Table.getSelectedRow(), 11));
        if (m_nopwr.equals("")) {
            mnopwr = 0;
        } else {
            mnopwr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 11));
        }

        double mnoair = 0.0;
        String m_noair = "";
        m_noair = ((String) Table.getValueAt(Table.getSelectedRow(), 12));
        if (m_noair.equals("")) {
            mnoair = 0;
        } else {
            mnoair = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 12));
        }

        double mnobg = 0.0;
        String m_nobg = "";
        m_nobg = ((String) Table.getValueAt(Table.getSelectedRow(), 13));
        if (m_nobg.equals("")) {
            mnobg = 0;
        } else {
            mnobg = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 13));
        }

        double mnowvr = 0.0;
        String m_nowvr = "";
        m_nowvr = ((String) Table.getValueAt(Table.getSelectedRow(), 14));
        if (m_nowvr.equals("")) {
            mnowvr = 0;
        } else {
            mnowvr = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 14));
        }

        double mnobeam = 0.0;
        String m_nobeam = "";
        m_nobeam = ((String) Table.getValueAt(Table.getSelectedRow(), 15));
        if (m_nobeam.equals("")) {
            mnobeam = 0;
        } else {
            mnobeam = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 15));
        }

        double mchtm = 0.0;
        String m_chtm = "";
        m_chtm = ((String) Table.getValueAt(Table.getSelectedRow(), 16));
        if (m_chtm.equals("")) {
            mchtm = 0;
        } else {
            mchtm = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 16));
        }

        double mother = 0.0;
        String m_other = "";
        m_other = ((String) Table.getValueAt(Table.getSelectedRow(), 17));
        if (m_other.equals("")) {
            mother = 0;
        } else {
            mother = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 17));
        }

        double losstm = 0.0;
        losstm = mnowrap + mnoweft + mnopwr + mnoair + mnobg + mnowvr + mnobeam + mchtm + mother;
        Table.setValueAt(Double.toString(losstm), Table.getSelectedRow(), 64);

        double mwgtm = 0.0;
        String m_wgtm = "";
        m_wgtm = ((String) Table.getValueAt(Table.getSelectedRow(), 18));
        if (m_wgtm.equals("")) {
            mwgtm = 0;
        } else {
            mwgtm = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 18));
        }
        double mshort = 0.0;
        String m_short = "";
        m_short = ((String) Table.getValueAt(Table.getSelectedRow(), 20));
        if (m_short.equals("")) {
            mshort = 0;
        } else {
            mshort = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 20));
        }
        double toloss = 0.0;
        toloss = mwgtm + mshort;
        Table.setValueAt(Double.toString(toloss), Table.getSelectedRow(), 65);

        double mlostm = 0.0;
        String m_losstm = "";
        m_losstm = ((String) Table.getValueAt(Table.getSelectedRow(), 64));
        if (m_losstm.equals("")) {
            mlostm = 0;
        } else {
            mlostm = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 64));
        }
        double mvgtm = 0.0;
        String m_vgtm = "";
        m_vgtm = ((String) Table.getValueAt(Table.getSelectedRow(), 18));
        if (m_vgtm.equals("")) {
            mvgtm = 0;
        } else {
            mvgtm = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 18));
        }
        double shortfl = 0.0;
        shortfl = mshift - mlostm - mvgtm;
        Table.setValueAt(Double.toString(shortfl), Table.getSelectedRow(), 20);

    }

    private void theopicks() {

        double thopic = 0;
        if (ShiftNo1 == 0) {

            thopic = 0;
        }
        if (ShiftNo1 == 1) {

            thopic = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2)) * 480;
            Table.setValueAt(Double.toString(thopic), Table.getSelectedRow(), 6);
        }
        if (ShiftNo1 == 2) {
            thopic = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2)) * 480;
            Table.setValueAt(Double.toString(thopic), Table.getSelectedRow(), 6);
        }
        if (ShiftNo1 == 3) {
            thopic = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2)) * 390;
            Table.setValueAt(Double.toString(thopic), Table.getSelectedRow(), 6);
        }

        if (ShiftNo1 == 1) {

            thopic = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2)) * 480;
            Table.setValueAt(Double.toString(thopic), Table.getSelectedRow(), 65);

            if (ShiftNo1 == 2) {
                thopic = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2)) * 480;
                Table.setValueAt(Double.toString(thopic), Table.getSelectedRow(), 65);
            }
            if (ShiftNo1 == 3) {
                thopic = Double.parseDouble((String) Table.getValueAt(Table.getSelectedRow(), 2)) * 390;
                Table.setValueAt(Double.toString(thopic), Table.getSelectedRow(), 65);
            }

        }
    }

    private void WeavingProductionNo() {
        String productionDate, productionDocumentNo;
        productionDate = txtWeavingDate.getText().trim();

        //Form level validations
        if (productionDate.equals("") || !EITLERPGLOBAL.isDate(productionDate)) {
            JOptionPane.showMessageDialog(this, "Enter Valid ShiftWise Weaving  Date", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Production Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date ProductionDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(productionDate));
        if ((ProductionDate.after(FinFromDate) || ProductionDate.compareTo(FinFromDate) == 0) && (ProductionDate.before(FinToDate) || ProductionDate.compareTo(FinToDate) == 0)) {
            //Within the year
        } else {
            JOptionPane.showMessageDialog(this, "ShiftWise Weaving  Date is Not Within Financial Year.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ProductionDate.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(this, "ShiftWise Weaving  Date Must be Before or the Same Date as Today.", "Wrong Production Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Generating Document No
        productionDocumentNo = "FSW" + ShiftNo1 + productionDate.substring(6, 10) + productionDate.substring(3, 5) + productionDate.substring(0, 2);
        txtWvgProdNo.setText(productionDocumentNo);
        if (EditMode == EITLERPGLOBAL.EDIT) {
            productionDocumentNo = ObjFeltWvgLoomEff.getAttribute("PRODUCTION_DOCUMENT_NO").getString();
        }

        // CHECK Document No already exist in database?
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltWvgLoomEff.checkProductionDocumentNoInDB(productionDocumentNo)) {

                JOptionPane.showMessageDialog(frmFeltWeavingLoom.this, "Production Date " + productionDate + " is Already Exists", "Production Date Already Exists", JOptionPane.ERROR_MESSAGE);
                txtWeavingDate.setEnabled(true);
                txtWeavingDate.setText("");
                txtWvgProdNo.setText(productionDocumentNo);
                return;
            }
        }

        if (productionDocumentNo.equals("")) {
            JOptionPane.showMessageDialog(this, "Enter Document No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Enter WeavingLoomwise Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        txtWvgProdNo.setText(productionDocumentNo);
    }

}
