/*
 * frmFeltYearEndDisc.java
 *
 * Created on March 12, 2013, 3:10 PM
 */
package EITLERP.Production.YearEndDiscountForm2;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import EITLERP.*;
import java.net.URL;
import java.sql.*;
import EITLERP.Finance.UtilFunctions;
import TReportWriter.*;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.FeltSales.common.JavaMail;
import static EITLERP.Production.FeltCreditNote.clsFeltCNAutoPosting.*;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import java.io.File;
import EITLERP.Sales.frmSalesInvoice;
import java.util.*;

public class frmFeltYearEndDisc2 extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelModule = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public int DeptID = EITLERPGLOBAL.gUserDeptID;
    public String finalapproved = "";
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;
    private clsFeltYearEndDisc2 ObjFeltYearEndDisc;
    //private clsExcelExporter exp = new clsExcelExporter();
    private TReportEngine objEngine = new TReportEngine();
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbOrderReasonModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableCellRenderer RowFormat = new EITLTableCellRenderer();
    public frmPendingApprovals frmPA;
    public int cnt = 0;
    public String[] a;
    public String[] b;
    public String[] p;
    public String[] q;
    private clsExcelExporter exp = new clsExcelExporter();

    /**
     * Creates new form frmFeltYearEndDisc
     */
    public void init() {
        System.gc();
        setSize(830, 590);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();

        ObjFeltYearEndDisc = new clsFeltYearEndDisc2();

        CheckCNPrint();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
//        GenerateCreditNoteCombo();
        FormatGrid();

        // cmbOrderReason.setEnabled(false);
        if (ObjFeltYearEndDisc.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Error occured while Loading Data. Error is " + ObjFeltYearEndDisc.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemWarping = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        mnuShow = new javax.swing.JPopupMenu();
        ShowInv = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtCnDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtCnID = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtfromdate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txttodate = new javax.swing.JTextField();
        cmbShow = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnCNSumm = new javax.swing.JButton();
        btnCNDetail = new javax.swing.JButton();
        btnCNDraft = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemWarping.setText("Warping Report");
        jMenuItemWarping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWarpingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWarping);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        ShowInv.setText("Show Invoice");
        ShowInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowInvActionPerformed(evt);
            }
        });
        mnuShow.add(ShowInv);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("YEAR END DISCOUNT ENTRY FORM - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Year End Disc Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 130, 17);

        txtCnDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtCnDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCnDate.setEnabled(false);
        txtCnDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCnDateFocusGained(evt);
            }
        });
        Tab1.add(txtCnDate);
        txtCnDate.setBounds(140, 10, 102, 27);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 140, 760, 240);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(570, 430, 90, 29);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 120, 770, 6);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(680, 430, 90, 29);

        jLabel5.setText("Year End Disc  ID");
        Tab1.add(jLabel5);
        jLabel5.setBounds(10, 42, 110, 17);

        txtCnID.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtCnID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCnID.setEnabled(false);
        Tab1.add(txtCnID);
        txtCnID.setBounds(140, 40, 102, 27);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(260, 10, 20, 18);

        jLabel1.setText("Period : ");
        Tab1.add(jLabel1);
        jLabel1.setBounds(10, 70, 50, 17);

        jLabel2.setText("From :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(10, 90, 50, 17);

        txtfromdate.setEnabled(false);
        Tab1.add(txtfromdate);
        txtfromdate.setBounds(60, 90, 130, 27);

        jLabel4.setText("To :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(200, 90, 30, 17);

        txttodate.setEnabled(false);
        Tab1.add(txttodate);
        txttodate.setBounds(230, 90, 140, 27);

        cmbShow.setText("Show Data");
        cmbShow.setEnabled(false);
        cmbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShowActionPerformed(evt);
            }
        });
        Tab1.add(cmbShow);
        cmbShow.setBounds(390, 90, 120, 29);

        jButton1.setText("Export To Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Tab1.add(jButton1);
        jButton1.setBounds(100, 430, 160, 29);

        jLabel6.setForeground(java.awt.Color.red);
        jLabel6.setText("PRESS ENTER/TAB AFTER EDITING TABLE  RECORDS");
        Tab1.add(jLabel6);
        jLabel6.setBounds(420, 50, 350, 17);

        jLabel7.setForeground(java.awt.Color.red);
        jLabel7.setText("Note :-");
        Tab1.add(jLabel7);
        jLabel7.setBounds(370, 50, 50, 17);

        btnCNSumm.setText("CN SUMMARY");
        btnCNSumm.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnCNSumm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCNSummActionPerformed(evt);
            }
        });
        Tab1.add(btnCNSumm);
        btnCNSumm.setBounds(20, 390, 190, 30);

        btnCNDetail.setText("CN DETAIL");
        btnCNDetail.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnCNDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCNDetailActionPerformed(evt);
            }
        });
        Tab1.add(btnCNDetail);
        btnCNDetail.setBounds(270, 390, 190, 30);

        btnCNDraft.setText("CN DRAFT ");
        btnCNDraft.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnCNDraft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCNDraftActionPerformed(evt);
            }
        });
        Tab1.add(btnCNDraft);
        btnCNDraft.setBounds(540, 390, 190, 30);

        Tab.addTab("Year End Disc  Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 17);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 29);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 33);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 510);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 790, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            exp.fillData(Table, new File("/root/Desktop/YREDIS2.xls"));
            exp.fillData(Table, new File("D://YREDIS2.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/YREDIS2.xls' successfully in Linux PC or 'D://YREDIS2.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }         // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ShowInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowInvActionPerformed
        try {
            //String InvoiceNo=DataModel.getValueByVariable("CN_INVOICE_NO", Table.getSelectedRow());
            String InvoiceNo = DataModel.getValueAt(Table.getSelectedRow(), 2).toString();
            //String InvoiceDate=DataModel.getValueByVariable("CN_INVOICE_DATE", Table.getSelectedRow());
            String InvoiceDate = EITLERPGLOBAL.formatDateDB(DataModel.getValueAt(Table.getSelectedRow(), 3).toString());
            String PartyCode = DataModel.getValueAt(Table.getSelectedRow(), 4).toString();
            AppletFrame aFrame = new AppletFrame("Sales Invoice");
            aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice", "Sales Invoice");
            frmSalesInvoice ObjDoc = (frmSalesInvoice) aFrame.ObjApplet;
            //int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
            ObjDoc.FindEx1(PartyCode, InvoiceNo, InvoiceDate);

        } catch (Exception e) {

        }           // TODO add your handling code here:
    }//GEN-LAST:event_ShowInvActionPerformed

    private void cmbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShowActionPerformed
        FormatGrid();
        GenerateData();

        a = new String[Table.getRowCount()];
        b = new String[Table.getRowCount()];
        for (int i = 0; i < a.length; i++) {
            a[i] = (String) Table.getValueAt(i, 7);
            b[i] = (String) Table.getValueAt(i, 11);
//            System.out.println("Array List " + a[i]);
        }

        //cmbShow.setEnabled(false);        // TODO add your handling code here:
    }//GEN-LAST:event_cmbShowActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                if (Table.getSelectedColumn() == 7) {
                    LOV aList = new LOV();

                    String strSQL = "SELECT PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='YEAR_END_DISCOUNT'";
                    aList.SQL = strSQL;
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    //aList.DefaultSearchOn=2;
                    aList.DefaultSearchOn = 1;

                    if (aList.ShowLOV()) {
                        if (Table.getCellEditor() != null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 5);
                    }
                }
            }
        }


    }//GEN-LAST:event_TableKeyPressed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        String ab = (String) Table.getValueAt(Table.getSelectedRow(), 7);
        String bb = (String) Table.getValueAt(Table.getSelectedRow(), 11);

        if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_TAB || evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_LEFT) {
            if (!ab.equals(a[Table.getSelectedRow()]) && bb.equals(b[Table.getSelectedRow()])) {
                JOptionPane.showMessageDialog(null, "Enter Remarks2");
//            if(bb.equals(b[Table.getSelectedRow()]))
//                cmdSave.enable(false);
//            else
//                cmdSave.enable(true);
            } else {

            }
        }
//        check();
//        if(cnt==1){
//            cmdSave.setEnabled(false);
//        }
//        else{
//            cmdSave.setEnabled(true);
//        }
    }//GEN-LAST:event_TableKeyReleased

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        //   ReasonResetReadonly() ;       // TODO add your handling code here:
    }//GEN-LAST:event_TableMouseClicked

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed

    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed

    }//GEN-LAST:event_jMenuItemWarpingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed

    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltYearEndDisc.HistoryView = false;
        ObjFeltYearEndDisc.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltYearEndDisc.ShowHistory(EITLERPGLOBAL.formatDateDB(txtCnDate.getText()), txtCnID.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtCnDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtCnDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCnDateFocusGained
        ShowMessage("Enter Updation Date");
    }//GEN-LAST:event_txtCnDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        finalapproved = "NO";
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "NO";
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "YES";
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        finalapproved = "NO";
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(738, txtCnID.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltYearEndDisc.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        //  Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltYearEndDisc2.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void btnCNSummActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCNSummActionPerformed
        String Title = "", strSQL = "";

        String frmyr = txtfromdate.getText().substring(8, 10);
        String toyr = txttodate.getText().substring(8, 10);

        Title = "PARTY WISE YEAR END CREDIT NOTE SUMMARY STATEMENT";
        strSQL = "SELECT CNH_SUB_ACCOUNT_CODE,CNH_PARTY_NAME,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_INVOICE_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('YEAREND" + frmyr + toyr + "') AND CNH_TYPE='YEAREND' ORDER BY CNH_SUB_ACCOUNT_CODE";

        PrintCNSummary(Title, strSQL);
    }//GEN-LAST:event_btnCNSummActionPerformed

    private void btnCNDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCNDetailActionPerformed
        // TODO add your handling code here:
        String Title = "", strSQL = "";
        String fileName = "/EITLERP/Production/FeltCreditNote/CreditNoteYEDetail.jrxml";

        String frmyr = txtfromdate.getText().substring(8, 10);
        String toyr = txttodate.getText().substring(8, 10);

        Title = "PARTY WISE YEAR END CREDIT NOTE DETAIL STATEMENT";
        strSQL = "SELECT CND_SUB_ACCOUNT_CODE,CND_MAIN_ACCOUNT_NAME,CND_INVOICE_NO,CND_RC_VOUCHER_NO AS CND_QUALITY,CND_INVOICE_DATE,CND_INVOICE_AMOUNT,CND_PERCENT,CND_CREDIT_AMOUNT,CND_EXT2,CND_EXT3,CND_EXT4 FROM PRODUCTION.D_CREDIT_NOTE_DETAIL WHERE CND_TYPE='YEAREND' AND CND_YEAR_MON_ID LIKE ('YEAREND" + frmyr + toyr + "') ORDER BY CND_SUB_ACCOUNT_CODE,CND_INVOICE_NO";

        PrintCNDetail(Title, strSQL, fileName);
    }//GEN-LAST:event_btnCNDetailActionPerformed

    private void btnCNDraftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCNDraftActionPerformed
        String strSQL = "";

        String frmyr = txtfromdate.getText().substring(8, 10);
        String toyr = txttodate.getText().substring(8, 10);

        strSQL = "SELECT CNH_ID,CNH_NO,CNH_TYPE,CNH_EFFECT,CNH_MAIN_ACCOUNT_CODE,CNH_MAIN_CODE,CNH_SUB_ACCOUNT_CODE,CNH_CITY,CNH_PARTY_NAME,CNH_REASON_CODE,CNH_BOOK_CODE,CNH_PERCENT,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_LINK_NO,CNH_YEAR_MON_ID,CNH_INTERVAL_CAPTION,CNH_INVOICE_AMOUNT,CNH_DRAFT_CR_NOTE_NO,CNH_DRAFT_CR_NOTE_DATE,CNH_EXT11,CNH_FIN_VOUCHER_NO,CNH_REMARKS FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('YEAREND" + frmyr + toyr + "') AND CNH_TYPE='YEAREND' ORDER BY CNH_SUB_ACCOUNT_CODE";

        PrintCNDraft(strSQL);
    }//GEN-LAST:event_btnCNDraftActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JMenuItem ShowInv;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnCNDetail;
    private javax.swing.JButton btnCNDraft;
    private javax.swing.JButton btnCNSumm;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmbShow;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWarping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPopupMenu mnuShow;
    private javax.swing.JTextField txtCnDate;
    private javax.swing.JTextField txtCnID;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtfromdate;
    private javax.swing.JTextField txttodate;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {
        txtCnDate.setEnabled(pStat);
        txtfromdate.setEnabled(pStat);
        txttodate.setEnabled(pStat);
        cmbShow.setEnabled(pStat);
        //  cmbReport.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtCnDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtfromdate.setText("");
        txttodate.setText("");
        // txtFormNo.setText("");
        txtCnID.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 738)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }

        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltYearEndDisc.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

            }
            //============================================//

            String AmendDate = EITLERPGLOBAL.formatDate(ObjFeltYearEndDisc.getAttribute("FORM2_YEAR_END_DATE").getString());
            String AmendID = ObjFeltYearEndDisc.getAttribute("FORM2_YEAR_END_ID").getString();
            String CNFromDate = EITLERPGLOBAL.formatDate(ObjFeltYearEndDisc.getAttribute("FORM2_FROM_DATE").getString());
            String CNToDate = EITLERPGLOBAL.formatDate(ObjFeltYearEndDisc.getAttribute("FORM2_TO_DATE").getString());

            lblTitle.setText(" FELT YEAR END DISCOUNT ENTRY FORM - " + AmendID);
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltYearEndDisc.getAttribute("HIERARCHY_ID").getVal());

            DoNotEvaluate = true;

            //FormatGrid();
            txtCnDate.setText(AmendDate);
            txtCnID.setText(AmendID);
            txtfromdate.setText(CNFromDate);
            txttodate.setText(CNToDate);

            //txtamendreasoncode.setText(ObjFeltYearEndDisc.getAttribute("CN_TYPE").getString());
            // EITLERPGLOBAL.setComboIndex(cmbOrderReason,Integer.parseInt(ObjFeltYearEndDisc.getAttribute("CN_TYPE").getString()));
            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjFeltYearEndDisc.hmFeltCreditNoteDetails.size(); i++) {
                clsFeltYearEndDiscDetails2 ObjFeltYearEndDiscDetails = (clsFeltYearEndDiscDetails2) ObjFeltYearEndDisc.hmFeltCreditNoteDetails.get(Integer.toString(i));

                Object[] rowData = new Object[18];

                //rowData[0]=ObjFeltYearEndDiscDetails.getAttribute("SR_NO").getString();
                rowData[0] = String.valueOf(i);
                rowData[1] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_MAIN_PARTY_CODE").getString();
                rowData[2] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_PARTY_CODE").getString();
                rowData[3] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_PARTY_NAME").getString();
                rowData[4] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_PRODUCT_CODE").getString();
                rowData[5] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_TURN_OVER").getString();
                rowData[6] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_TARGET_ACHIV").getString();
                rowData[7] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_PERCENT").getString();
                rowData[8] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_SEAM_PERCENT").getString();
                rowData[9] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_YES_NO").getString();
                rowData[10] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_REMARKS1").getString();
                rowData[11] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_YEAR_END_REMARKS2").getString();
                rowData[12] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_EFFECTIVE_FROM").getString();
                rowData[13] = ObjFeltYearEndDiscDetails.getAttribute("FORM2_EFFECTIVE_TO").getString();

                DataModel.addRow(rowData);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(738, AmendID);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();

            HashMap hmApprovalHistory = clsFeltYearEndDisc2.getHistoryList(AmendDate, AmendID);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltYearEndDisc2 ObjFeltYearEndDisc = (clsFeltYearEndDisc2) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjFeltYearEndDisc.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFeltYearEndDisc.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltYearEndDisc.getAttribute("ENTRY_DATE").getString());

                String ApprovalStatus = "";

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltYearEndDisc.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltYearEndDisc.getAttribute("REJECTED_REMARKS").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        CheckCNPrint();

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

            //Add Columns to it
            DataModel.addColumn("Sr. No."); //0
            DataModel.addColumn("Group Party Code");//1
            DataModel.addColumn("Party Code");//2
            DataModel.addColumn("Party Name");//3
            DataModel.addColumn("Product Code");//4
            DataModel.addColumn("Target(Lakhs)");//5
            DataModel.addColumn("Achieved Turn Over");//6
            DataModel.addColumn("Percentage");//7
            DataModel.addColumn("Seam Percentage");//8
            DataModel.addColumn("Yes/No");//9
            DataModel.addColumn("Remarks1");//10
            DataModel.addColumn("Remarks2");//11
            DataModel.addColumn("Effective From");
            DataModel.addColumn("Effective To");

            DataModel.SetVariable(0, "");    //1
            DataModel.SetVariable(1, "FORM2_YEAR_END_MAIN_PARTY_CODE");    //2
            DataModel.SetVariable(2, "FORM2_YEAR_END_PARTY_CODE");    //2
            DataModel.SetVariable(3, "FORM2_YEAR_END_PARTY_NAME");    //3
            DataModel.SetVariable(4, "FORM2_YEAR_END_PRODUCT_CODE");    //4
            DataModel.SetVariable(5, "FORM2_YEAR_END_TURN_OVER");    //4
            DataModel.SetVariable(6, "FORM2_YEAR_END_TARGET_ACHIV");    //5
            DataModel.SetVariable(7, "FORM2_YEAR_END_PERCENT");    //6
            DataModel.SetVariable(8, "FORM2_YEAR_END_SEAM_PERCENT");    //6
            DataModel.SetVariable(9, "FORM2_YEAR_END_YES_NO");    //6
            DataModel.SetVariable(10, "FORM2_YEAR_END_REAMRKS");    //6
            DataModel.SetVariable(12, "FORM2_EFFECTIVE_FROM");    //6
            DataModel.SetVariable(13, "FORM2_EFFECTIVE_TO");    //6

            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);

            if (EditMode != 0) {
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                        new ListSelectionListener() {
                            public void valueChanged(ListSelectionEvent e) {
                                int column = Table.getSelectedColumn();
                                String strVar = DataModel.getVariable(column);
                                //=============== Cell Editing Routine =======================//
                                Table.editCellAt(Table.getSelectedRow(), column);
                                if (Table.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) Table.getEditorComponent()).selectAll();
                                }
                                //============= Cell Editing Routine Ended =================//
                            }
                        });

                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();

                            //=========== Cell Update Prevention Check ===========//
                            String curValue = ((String) Table.getValueAt(row, column)).trim();
                            if (curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if (DoNotEvaluate) {
                                return;
                            }

                            //EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())
                            //if(column==1){
                            // String PartyCode=((String)Table.getValueAt(row,1)).trim();
                            //Table.setValueAt(ObjFeltYearEndDisc.getPartyName(PartyCode), row, 2);
                            //Table.setValueAt(ObjFeltYearEndDisc.getTrunOver(PartyCode), row, 3);
                            //Table.setValueAt(ObjFeltYearEndDisc.getTargetAchiv(PartyCode), row, 3);
                            //}
                        }
                    }
                });

            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=738 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=738 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(738, ObjFeltYearEndDisc.getAttribute("FORM2_YEAR_END_ID").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(738, txtCnID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(738, txtCnID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(738, txtCnID.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void SetupApproval() {

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(738, ObjFeltYearEndDisc.getAttribute("FORM2_YEAR_END_ID").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(738, FromUserID, ObjFeltYearEndDisc.getAttribute("FORM2_YEAR_END_ID").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(738, txtCnID.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8036, 80361)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8036, 80362)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8036, 80363)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8036, 80364)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 738;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SetupApproval();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            //Display newly generated document no.
            txtCnID.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 738, FFNo, false));
            txtCnDate.requestFocus();
            lblTitle.setText("FELT YEAR END DISCOUNT APPROVAL FORM - " + txtCnID.getText());
            System.out.println(txtCnID.getText());
            lblTitle.setBackground(Color.BLUE);

            btnCNSumm.setVisible(false);
            btnCNDetail.setVisible(false);
            btnCNDraft.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {

        String productionDocumentNo = (String) ObjFeltYearEndDisc.getAttribute("FORM2_YEAR_END_ID").getObj();
        if (ObjFeltYearEndDisc.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            //ReasonResetReadonly();
            // cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(738, productionDocumentNo)) {
                SetFields(true);

            } else {

                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltYearEndDisc.CanDelete(txtCnID.getText(), txtCnDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, ObjFeltYearEndDisc.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {

//        for (int z=0;z<Table.getRowCount();z++){
//            
//        String ab=(String)Table.getValueAt(z,6);
//        String bb=(String)Table.getValueAt(z,9);
//        
//        if (ab.equals(a[z]) && bb.equals(b[z])){
//            System.out.println("correct row "+z);
//        }       
//        else if (!ab.equals(a[z]) && !bb.equals(b[z])){
//            System.out.println("correct row "+z);
//            System.out.println("do save");
////            JOptionPane.showMessageDialog(null,"Enter Remarks2");
////            Table.changeSelection(z,9,true,true);
//        }
//        else if (!ab.equals(a[z]) && bb.equals(b[z])){
//            System.out.println("error");
//            JOptionPane.showMessageDialog(null,"Error");
//        }
//        else {
//            System.out.println("end");
//             JOptionPane.showMessageDialog(null,"End");
//        }
//            
//        }
        String YearID, YearDate, YrFromDate, YrToDate, YearNo;

        int i = 0, j = 0;
        String YearNoString = "", YearPartyCodeString = "", YearPartynameString = "", SrNoString = "", YearMainPartyCodeString = "";
        String YearTrunOvrString = "", YearEndDTrgString = "", YearRemarksString = "", YearYesNoString = "", PercentString = "";
        String YearRemarks2String = "", YearEndProductString = "", SeamPercentString = "", EffectFrom = "", EffectTo = "";

        //        int DeptID =  EITLERPGLOBAL.gUserDeptID;
        YearDate = txtCnDate.getText().trim();
        YearID = txtCnID.getText().trim();
        YrFromDate = txtfromdate.getText().trim();
        YrToDate = txttodate.getText().trim();

        //Form level validations
        if (YearDate.equals("") || !EITLERPGLOBAL.isDate(YearDate)) {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Enter Valid UpdationDate.", "Wrong Updation Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Production Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date Year_Date = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(YearDate));
        if ((Year_Date.after(FinFromDate) || Year_Date.compareTo(FinFromDate) == 0) && (Year_Date.before(FinToDate) || Year_Date.compareTo(FinToDate) == 0)) {
            //Within the year
        } else {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Updation Date is Not Within Financial Year.", "FINANCIAL YEAR ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (Year_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Updation Date Must be Before or the Same Date as Today.", "Wrong Production Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            return;
        }

        try {

            ObjFeltYearEndDisc.hmFeltCreditNoteDetails.clear();

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                //j++;
                // SrNoString=((String)Table.getValueAt(i,0)).trim();
                j++;
                YearMainPartyCodeString = ((String) Table.getValueAt(i, 1)).trim();
                j++;
                YearPartyCodeString = ((String) Table.getValueAt(i, 2)).trim();
                j++;
                YearPartynameString = ((String) Table.getValueAt(i, 3)).trim();
                j++;
                YearEndProductString = ((String) Table.getValueAt(i, 4)).trim();
                j++;
                YearTrunOvrString = ((String) Table.getValueAt(i, 5)).trim();
                j++;
                YearEndDTrgString = ((String) Table.getValueAt(i, 6)).trim();
                j++;
                PercentString = ((String) Table.getValueAt(i, 7)).trim();
                j++;
                SeamPercentString = ((String) Table.getValueAt(i, 8)).trim();
                j++;
                YearYesNoString = ((String) Table.getValueAt(i, 9)).trim();
                j++;
                YearRemarksString = ((String) Table.getValueAt(i, 10)).trim();
                j++;
                YearRemarks2String = ((String) Table.getValueAt(i, 11)).trim();
                j++;
                EffectFrom = ((String) Table.getValueAt(i, 12)).trim();
                j++;
                EffectTo = ((String) Table.getValueAt(i, 13)).trim();

                clsFeltYearEndDiscDetails2 ObjFeltYearEndDiscDetails = new clsFeltYearEndDiscDetails2();

                //ObjFeltYearEndDiscDetails.setAttribute("SR_NO",SrNoString);//0
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_MAIN_PARTY_CODE", YearMainPartyCodeString);//1
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_PARTY_CODE", YearPartyCodeString);//1
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_PARTY_NAME", YearPartynameString);//2
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_PRODUCT_CODE", YearEndProductString);//3
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_TURN_OVER", YearTrunOvrString);//4
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_TARGET_ACHIV", YearEndDTrgString);//5
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_PERCENT", PercentString);//6
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_SEAM_PERCENT", SeamPercentString);//6
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_YES_NO", YearYesNoString);//7
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_REMARKS1", YearRemarksString);//8
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_YEAR_END_REMARKS2", YearRemarks2String);//9
                ObjFeltYearEndDiscDetails.setAttribute("FORM2_EFFECTIVE_FROM", EffectFrom);//8
                if (((String) Table.getValueAt(i, 13)).equalsIgnoreCase("")) {
                    ObjFeltYearEndDiscDetails.setAttribute("FORM2_EFFECTIVE_TO", null);//9
                } else {
                    ObjFeltYearEndDiscDetails.setAttribute("FORM2_EFFECTIVE_TO", EffectTo);//9
                }
                ObjFeltYearEndDisc.hmFeltCreditNoteDetails.put(Integer.toString(ObjFeltYearEndDisc.hmFeltCreditNoteDetails.size() + 1), ObjFeltYearEndDiscDetails);

            }
        } catch (Exception e) {

        };

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltYearEndDisc.setAttribute("FORM2_YEAR_END_DATE", YearDate);
        ObjFeltYearEndDisc.setAttribute("FORM2_YEAR_END_ID", YearID);
        ObjFeltYearEndDisc.setAttribute("FORM2_FROM_DATE", YrFromDate);
        ObjFeltYearEndDisc.setAttribute("FORM2_TO_DATE", YrToDate);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltYearEndDisc.Insert()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Error occured while saving. Error is " + ObjFeltYearEndDisc.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltYearEndDisc.Update()) {
                DisplayData();
                
                String query="SELECT USER_ID FROM D_COM_HIERARCHY H,D_COM_HIERARCHY_RIGHTS HR WHERE H.HIERARCHY_ID=HR.HIERARCHY_ID AND MODULE_ID=738 AND HR.HIERARCHY_ID="+EITLERPGLOBAL.getComboCode(cmbHierarchy)+" AND SR_NO=2";
                int AreaIncharge=data.getIntValueFromDB(query);
                if ((AreaIncharge==EITLERPGLOBAL.gNewUserID) && (OpgApprove.isSelected())) {                
                    try {                        
                        String DOC_NO = txtCnID.getText();
                        String DOC_DATE = txtCnDate.getText();
                        String Party_Code = "";

                        //String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        String responce = JavaMail.sendNotificationMailOfDetail(738, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                
                if (OpgFinal.isSelected()) {
                    try {                        
                        String DOC_NO = txtCnID.getText();
                        String DOC_DATE = txtCnDate.getText();
                        String Party_Code = "";

                        //String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        String responce = JavaMail.sendNotificationMailOfDetail(738, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), false);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(frmFeltYearEndDisc2.this, "Error occured while saving editing. Error is " + ObjFeltYearEndDisc.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        //cmbOrderReason.setEnabled(false);
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //Sets data to the Details Class Object
    private void SetData() {

        //-------- Update Approval Specific Fields -----------//
        ObjFeltYearEndDisc.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltYearEndDisc.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltYearEndDisc.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltYearEndDisc.setAttribute("REJECTED_REMARKS", txtToRemarks.getText().trim());
        ObjFeltYearEndDisc.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        if (OpgApprove.isSelected()) {
            ObjFeltYearEndDisc.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltYearEndDisc.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltYearEndDisc.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltYearEndDisc.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltYearEndDisc.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltYearEndDisc.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltYearEndDisc.setAttribute("CREATED_BY", (int) ObjFeltYearEndDisc.getAttribute("CREATED_BY").getVal());
            ObjFeltYearEndDisc.setAttribute("CREATED_DATE", ObjFeltYearEndDisc.getAttribute("CREATED_DATE").getString());
            ObjFeltYearEndDisc.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        //cmbOrderReason.setEnabled(false);
    }

    // find details by production date
    public void Find(String AmendID) {
        ObjFeltYearEndDisc.Filter(" FORM2_YEAR_END_ID='" + AmendID + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String pPartyCode) {
        ObjFeltYearEndDisc.Filter(" FORM2_YEAR_END_ID='" + pPartyCode + "'");
        ObjFeltYearEndDisc.MoveLast();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {

        ObjFeltYearEndDisc.Filter(" FORM2_YEAR_END_ID IN (SELECT  PRODUCTION.FELT_CN_TEMP_HEADER.FORM2_YEAR_END_ID FROM  PRODUCTION.FELT_CN_TEMP_HEADER,PRODUCTION.FELT_PROD_DOC_DATA WHERE  PRODUCTION.FELT_CN_TEMP_HEADER.FORM2_YEAR_END_ID=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND PRODUCTION.FELT_PROD_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W' AND MODULE_ID=738");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltYearEndDisc.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltYearEndDisc.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltYearEndDisc.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltYearEndDisc.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        Table.setEnabled(true);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }

//    private void GenerateCreditNoteCombo(){
//        
//        HashMap hmAmendList=new HashMap();
//        
//        cmbOrderReasonModel=new EITLComboModel();
//        cmbOrderReason.removeAllItems();
//        cmbOrderReason.setModel(cmbOrderReasonModel);
//        
//        hmAmendList = clsFeltYearEndDisc.getCreditNoteList();
//        for(int i=1;i<=hmAmendList.size();i++) {
//            cmbOrderReasonModel.addElement((ComboData)hmAmendList.get(new Integer(i)));
//        }
//    }
    private void ReasonReadOnly() {
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(5);

    }

    private boolean Validate() {
        //Form level validations

        if (txtfromdate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter from date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtfromdate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txttodate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter To date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txttodate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }

    private void GenerateData() {
        try {

            String strSQL = "";

            //strSQL="SELECT YEAR_END_PARTY_CODE,YEAR_END_PARTY_NAME,YEAR_END_TURN_OVER,YEAR_END_TARGET_ACHIV,YEAR_END_YES_NO,YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL WHERE YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"'";
           // strSQL="SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_NAME,A.YEAR_END_TURN_OVER,A.YEAR_END_TARGET_ACHIV,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,B.YRED_DISC_PER,B.PRODUCT_CODE FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_RATE_DISC_MASTER B WHERE YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND A.YEAR_END_PARTY_CODE=B.PARTY_CODE AND A.YEAR_END_YES_NO='YES' ORDER BY PRODUCT_CODE,YEAR_END_PARTY_CODE";
            //strSQL="SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_NAME,A.YEAR_END_TURN_OVER,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,B.YRED_DISC_PER,B.PRODUCT_CODE,SUM(C.TOTAL_NET_AMOUNT) FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_RATE_DISC_MASTER B,PRODUCTION.FELT_INVOICE_DATA C WHERE '"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND A.YEAR_END_PARTY_CODE=B.PARTY_CODE AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND A.YEAR_END_YES_NO='YES' AND B.YRED_DISC_PER!=0 GROUP BY B.PRODUCT_CODE";
            //strSQL="SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_RATE_DISC_MASTER D,PRODUCTION.FELT_INVOICE_DATA C WHERE A.YEAR_END_PARTY_CODE=D.PARTY_CODE AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND A.YEAR_END_YES_NO='YES' AND D.YRED_DISC_PER!=0 AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO ORDER BY D.PARTY_CODE,C.QUALITY_NO";
            //strSQL="SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_RATE_DISC_MASTER D,PRODUCTION.FELT_INVOICE_DATA C WHERE A.YEAR_END_PARTY_CODE=D.PARTY_CODE AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND A.YEAR_END_YES_NO='YES' AND D.YRED_DISC_PER!=0 AND C.INVOICE_DATE>='2014-01-01' AND C.INVOICE_DATE<='2016-03-31' GROUP BY D.PARTY_CODE,C.QUALITY_NO ORDER BY D.PARTY_CODE,C.QUALITY_NO";
            //strSQL="SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_RATE_DISC_MASTER D,PRODUCTION.FELT_INVOICE_DATA C WHERE A.YEAR_END_PARTY_CODE=D.PARTY_CODE AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND A.APPROVED=1 AND A.CANCELED=0 AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO ORDER BY D.PARTY_CODE,C.QUALITY_NO";
            //strSQL="(SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_CODE AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER D,PRODUCTION.FELT_INVOICE_DATA C  WHERE A.YEAR_END_PARTY_CODE =D.PARTY_CODE AND A.YEAR_END_ID =B.YEAR_END_ID AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND A.YEAR_END_PARTY_CODE NOT IN (SELECT GROUP_MAIN_PARTY FROM FINANCE.D_FIN_PARTY_GROUPING_DETAIL WHERE INVOICE_TYPE=2) AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND B.APPROVED=1 AND B.CANCELED=0 AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO) UNION ALL (SELECT A.YEAR_END_PARTY_CODE,P.GROUP_SUB_PARTY AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER D,PRODUCTION.FELT_INVOICE_DATA C,FINANCE.D_FIN_PARTY_GROUPING_DETAIL P WHERE A.YEAR_END_PARTY_CODE=P.GROUP_MAIN_PARTY AND A.YEAR_END_ID=B.YEAR_END_ID AND P.GROUP_SUB_PARTY=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND P.GROUP_SUB_PARTY=D.PARTY_CODE AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND B.APPROVED=1 AND B.CANCELED=0 AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO) ";
            //strSQL="SELECT * FROM ((SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_CODE AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_INVOICE_DATA C  WHERE A.YEAR_END_PARTY_CODE =D.PARTY_CODE AND A.YEAR_END_ID =B.YEAR_END_ID AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND A.YEAR_END_PARTY_CODE NOT IN (SELECT GROUP_MAIN_PARTY FROM FINANCE.D_FIN_PARTY_GROUPING_DETAIL WHERE INVOICE_TYPE=2) AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0 AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO) UNION ALL (SELECT A.YEAR_END_PARTY_CODE,P.GROUP_SUB_PARTY AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_INVOICE_DATA C,FINANCE.D_FIN_PARTY_GROUPING_DETAIL P WHERE A.YEAR_END_PARTY_CODE=P.GROUP_MAIN_PARTY AND A.YEAR_END_ID=B.YEAR_END_ID AND P.GROUP_SUB_PARTY=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND P.GROUP_SUB_PARTY=D.PARTY_CODE AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0 AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO)) DUM ORDER BY YEAR_END_PARTY_CODE,SUB_PARTY ";
		//Comment on 27-Apr-18
            //strSQL="SELECT * FROM ((SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_CODE AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_INVOICE_DATA C  WHERE A.YEAR_END_PARTY_CODE =D.PARTY_CODE AND A.YEAR_END_ID =B.YEAR_END_ID AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND C.PARTY_CODE=D.PARTY_CODE AND A.YEAR_END_PARTY_CODE NOT IN (SELECT GROUP_MAIN_PARTY FROM FINANCE.D_FIN_PARTY_GROUPING_DETAIL WHERE INVOICE_TYPE=2) AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0 AND D.EFFECTIVE_FROM>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND (D.EFFECTIVE_TO<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' OR D.EFFECTIVE_TO IS NULL) AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO) UNION ALL (SELECT A.YEAR_END_PARTY_CODE,P.GROUP_SUB_PARTY AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO  FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_INVOICE_DATA C,FINANCE.D_FIN_PARTY_GROUPING_DETAIL P WHERE A.YEAR_END_PARTY_CODE=P.GROUP_MAIN_PARTY AND A.YEAR_END_ID=B.YEAR_END_ID AND P.GROUP_SUB_PARTY=C.PARTY_CODE AND C.QUALITY_NO=D.PRODUCT_CODE AND C.PARTY_CODE=D.PARTY_CODE AND P.GROUP_SUB_PARTY=D.PARTY_CODE AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0 AND D.EFFECTIVE_FROM>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND (D.EFFECTIVE_TO IS NULL OR D.EFFECTIVE_TO<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"') AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' GROUP BY D.PARTY_CODE,C.QUALITY_NO,D.EFFECTIVE_FROM,D.EFFECTIVE_TO)) DUM ORDER BY YEAR_END_PARTY_CODE,SUB_PARTY,EFFECTIVE_FROM ";
            //gparty group table changed from FINANCE.D_FIN_PARTY_GROUPING_DETAIL to PRODUCTION.FELT_GROUP_MASTER_DETAIL
//	    strSQL = "SELECT * FROM ((SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_CODE AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_INVOICE_DATA C  WHERE A.YEAR_END_PARTY_CODE =D.PARTY_CODE AND A.YEAR_END_ID =B.YEAR_END_ID  AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND SUBSTRING(C.QUALITY_NO,1,6)=D.PRODUCT_CODE  AND C.PARTY_CODE=D.PARTY_CODE AND  A.YEAR_END_PARTY_CODE NOT IN  (SELECT PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL) AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0  AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0  AND D.EFFECTIVE_FROM>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"'  AND D.EFFECTIVE_TO<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"' AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"'  AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"'  AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"'  AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"'  GROUP BY D.PARTY_CODE,SUBSTRING(C.QUALITY_NO,1,6),D.EFFECTIVE_FROM,D.EFFECTIVE_TO)   UNION ALL (SELECT A.YEAR_END_PARTY_CODE,P.PARTY_CODE AS SUB_PARTY, A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET, SUM(C.TOTAL_NET_AMOUNT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE, A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO    FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A, PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B, PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, PRODUCTION.FELT_INVOICE_DATA C,  PRODUCTION.FELT_GROUP_MASTER_DETAIL P   WHERE A.YEAR_END_PARTY_CODE=P.GROUP_CODE  AND A.YEAR_END_ID=B.YEAR_END_ID AND P.PARTY_CODE=C.PARTY_CODE  AND SUBSTRING(C.QUALITY_NO,1,6)=D.PRODUCT_CODE AND C.PARTY_CODE=D.PARTY_CODE  AND P.PARTY_CODE=D.PARTY_CODE AND UPPER(A.YEAR_END_YES_NO)='YES'  AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1  AND B.CANCELED=0 AND D.EFFECTIVE_FROM>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"'  AND  D.EFFECTIVE_TO<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"'  AND A.YEAR_FROM_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"'  AND A.YEAR_TO_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"'  AND C.INVOICE_DATE>='"+ EITLERPGLOBAL.formatDateDB(txtfromdate.getText())+"' AND C.INVOICE_DATE<='"+ EITLERPGLOBAL.formatDateDB(txttodate.getText())+"'  GROUP BY D.PARTY_CODE,SUBSTRING(C.QUALITY_NO,1,6),D.EFFECTIVE_FROM,D.EFFECTIVE_TO)) DUM  ORDER BY YEAR_END_PARTY_CODE,SUB_PARTY,EFFECTIVE_FROM";
            
	    //strSQL = "SELECT * FROM ((SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_CODE AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.INVOICE_AMT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER C  WHERE A.YEAR_END_PARTY_CODE =D.PARTY_CODE AND A.YEAR_END_ID =B.YEAR_END_ID  AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND SUBSTRING(C.PRODUCT_CODE,1,6)=D.PRODUCT_CODE  AND C.PARTY_CODE=D.PARTY_CODE AND  A.YEAR_END_PARTY_CODE NOT IN  (SELECT PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL) AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0  AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0  AND C.APPROVED=1 AND C.CANCELLED=0 AND D.EFFECTIVE_FROM>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND D.EFFECTIVE_TO<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND A.YEAR_FROM_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND A.YEAR_TO_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  AND C.INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND C.INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  GROUP BY D.PARTY_CODE,SUBSTRING(C.PRODUCT_CODE,1,6),D.EFFECTIVE_FROM,D.EFFECTIVE_TO)   UNION ALL (SELECT A.YEAR_END_PARTY_CODE,P.PARTY_CODE AS SUB_PARTY, A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET, SUM(C.INVOICE_AMT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE, A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO    FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A, PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B, PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, PRODUCTION.FELT_SAL_INVOICE_HEADER C,  PRODUCTION.FELT_GROUP_MASTER_DETAIL P   WHERE A.YEAR_END_PARTY_CODE=P.GROUP_CODE  AND A.YEAR_END_ID=B.YEAR_END_ID AND P.PARTY_CODE=C.PARTY_CODE  AND SUBSTRING(C.PRODUCT_CODE,1,6)=D.PRODUCT_CODE AND C.PARTY_CODE=D.PARTY_CODE  AND P.PARTY_CODE=D.PARTY_CODE AND UPPER(A.YEAR_END_YES_NO)='YES'  AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1  AND B.CANCELED=0 AND C.APPROVED=1 AND C.CANCELLED=0 AND D.EFFECTIVE_FROM>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND  D.EFFECTIVE_TO<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  AND A.YEAR_FROM_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND A.YEAR_TO_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  AND C.INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND C.INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  GROUP BY D.PARTY_CODE,SUBSTRING(C.PRODUCT_CODE,1,6),D.EFFECTIVE_FROM,D.EFFECTIVE_TO)) DUM  ORDER BY YEAR_END_PARTY_CODE,SUB_PARTY,EFFECTIVE_FROM";
            
	    strSQL = "SELECT * FROM ((SELECT A.YEAR_END_PARTY_CODE,A.YEAR_END_PARTY_CODE AS SUB_PARTY,A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET,SUM(C.INVOICE_AMT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE,A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A,PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B,PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D,PRODUCTION.FELT_SAL_INVOICE_HEADER C  WHERE A.YEAR_END_PARTY_CODE =D.PARTY_CODE AND A.YEAR_END_ID =B.YEAR_END_ID  AND A.YEAR_END_PARTY_CODE=C.PARTY_CODE AND SUBSTRING(C.PRODUCT_CODE,1,6)=D.PRODUCT_CODE  AND C.PARTY_CODE=D.PARTY_CODE AND  A.YEAR_END_PARTY_CODE NOT IN  (SELECT PARTY_CODE FROM PRODUCTION.FELT_GROUP_MASTER_DETAIL) AND UPPER(A.YEAR_END_YES_NO)='YES' AND D.YRED_DISC_PER!=0  AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1 AND B.CANCELED=0  AND C.APPROVED=1 AND C.CANCELLED=0 AND D.EFFECTIVE_FROM>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND D.EFFECTIVE_TO<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND A.YEAR_FROM_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND A.YEAR_TO_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  AND C.INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND C.INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  GROUP BY D.PARTY_CODE,SUBSTRING(C.PRODUCT_CODE,1,6),D.EFFECTIVE_FROM,D.EFFECTIVE_TO)   UNION ALL (SELECT A.YEAR_END_PARTY_CODE,P.PARTY_CODE AS SUB_PARTY, A.YEAR_END_PARTY_NAME,D.PRODUCT_CODE,D.TURN_OVER_TARGET, SUM(C.INVOICE_AMT) AS TOTAL_NET_AMOUNT,D.YRED_DISC_PER,D.YRED_SEAM_VALUE, A.YEAR_END_YES_NO,A.YEAR_END_REMARKS,D.EFFECTIVE_FROM,D.EFFECTIVE_TO    FROM PRODUCTION.FELT_YEAR_END_DISCOUNT_DETAIL A, PRODUCTION.FELT_YEAR_END_DISCOUNT_HEADER B, PRODUCTION.FELT_RATE_DISC_MASTER_DETAIL D, PRODUCTION.FELT_SAL_INVOICE_HEADER C,  PRODUCTION.FELT_GROUP_MASTER_DETAIL P   WHERE A.YEAR_END_PARTY_CODE=P.GROUP_CODE  AND A.YEAR_END_ID=B.YEAR_END_ID AND P.PARTY_CODE=C.PARTY_CODE  AND SUBSTRING(C.PRODUCT_CODE,1,6)=D.PRODUCT_CODE AND (P.GROUP_CODE=D.GROUP_CODE OR P.PARTY_CODE=D.PARTY_CODE)  AND UPPER(A.YEAR_END_YES_NO)='YES'  AND D.YRED_DISC_PER!=0 AND D.APPROVED=1 AND D.CANCELED=0 AND B.APPROVED=1  AND B.CANCELED=0 AND C.APPROVED=1 AND C.CANCELLED=0 AND D.EFFECTIVE_FROM>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND  D.EFFECTIVE_TO<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  AND A.YEAR_FROM_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "'  AND A.YEAR_TO_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  AND C.INVOICE_DATE>='" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND C.INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "'  GROUP BY P.PARTY_CODE,SUBSTRING(C.PRODUCT_CODE,1,6),D.EFFECTIVE_FROM,D.EFFECTIVE_TO)) DUM  ORDER BY YEAR_END_PARTY_CODE,SUB_PARTY,EFFECTIVE_FROM";
            System.out.println(strSQL);

            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    // objRow=objReportData.newRow();
                    Object[] rowData = new Object[15];

                    rowData[0] = Integer.toString(Table.getRowCount() + 1);
                    rowData[1] = UtilFunctions.getString(rsTmp, "YEAR_END_PARTY_CODE", "");
                    rowData[2] = UtilFunctions.getString(rsTmp, "SUB_PARTY", "");
//                    rowData[3] = UtilFunctions.getString(rsTmp, "YEAR_END_PARTY_NAME", "");
                    rowData[3] = clsSales_Party.getPartyName(2, UtilFunctions.getString(rsTmp, "SUB_PARTY", ""));
                    rowData[4] = UtilFunctions.getString(rsTmp, "PRODUCT_CODE", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "TURN_OVER_TARGET", "");
                    rowData[6] = UtilFunctions.getString(rsTmp, "TOTAL_NET_AMOUNT", "");
                    rowData[7] = UtilFunctions.getString(rsTmp, "YRED_DISC_PER", "");
                    rowData[8] = UtilFunctions.getString(rsTmp, "YRED_SEAM_VALUE", "");
                    rowData[9] = UtilFunctions.getString(rsTmp, "YEAR_END_YES_NO", "");
                    rowData[10] = UtilFunctions.getString(rsTmp, "YEAR_END_REMARKS", "");
                    rowData[11] = "";
                    rowData[12] = UtilFunctions.getString(rsTmp, "EFFECTIVE_FROM", "");
                    rowData[13] = UtilFunctions.getString(rsTmp, "EFFECTIVE_TO", "");

                    DataModel.addRow(rowData);
                    rsTmp.next();

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void check() {

        p = new String[Table.getRowCount()];
        q = new String[Table.getRowCount()];
        for (int i = 0; i < p.length; i++) {
            p[i] = (String) Table.getValueAt(i, 7);
            q[i] = (String) Table.getValueAt(i, 11);
            System.out.println("Array List " + p[i]);
        }

        for (int i = 0; i < p.length; i++) {
            if (!p[i].equals(a[i]) && q[i].equals(b[i])) {
                System.out.println("error " + p[i]);
                cnt = 1;
                break;
            }
            if (!p[i].equals(a[i]) && !q[i].equals(b[i])) {
                System.out.println("error 2 " + p[i]);
                cnt = 0;
            }
        }
//        if(cnt==1){
//            cmdSave.setEnabled(false);
//        }
//        else{
//            cmdSave.setEnabled(true);
//        }

    }

    private void CheckCNPrint() {

        String frmyr = "", toyr = "";
        
        if (!txtfromdate.getText().equalsIgnoreCase("")) {
            frmyr = txtfromdate.getText().substring(8, 10);
            toyr = txttodate.getText().substring(8, 10);
        }

        if (data.IsRecordExist("SELECT DISTINCT CNH_YEAR_MON_ID FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('YEAREND" + frmyr + toyr + "')")) {
            btnCNSumm.setVisible(true);
            btnCNDetail.setVisible(true);
            btnCNDraft.setVisible(true);
        } else {
            btnCNSumm.setVisible(false);
            btnCNDetail.setVisible(false);
            btnCNDraft.setVisible(false);
        }
    }
}
