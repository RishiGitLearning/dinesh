/*
 * frmGenerateCN.java
 *
 * Created on July 26, 2016, 3:39 PM
 */

package EITLERP.Production.FeltCNGenForm;

import java.util.HashMap;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.*;
import java.sql.SQLException;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;



import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.data;
import EITLERP.ComboData;
import EITLERP.clsUser;



/**
 *
 * @author  root
 */
public class frmGenerateCN extends javax.swing.JApplet {
    
    private EITLComboModel schemeNameModel;
    private EITLTableModel DataModelH;
    private EITLTableModel DataModelD;
    private EITLTableModel DataModelEx;
    private EITLTableModel DataModelDoc;
    
    /** Initializes the applet frmGenerateCN */
    public void init() {
        initComponents();
        setSize(650, 400);
        HeaderGrid();
        DetailGrid();
        DetailExGrid();
        DocGrid();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        btnShow = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnExecute = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableHeader = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableDetail = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableEx = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableDoc = new javax.swing.JTable();

        getContentPane().setLayout(null);

        btnShow.setText("Show Data");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        getContentPane().add(btnShow);
        btnShow.setBounds(20, 40, 130, 25);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("Credit Note Generate Form");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 0, 680, 25);

        btnExecute.setText("Execute Data");
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        getContentPane().add(btnExecute);
        btnExecute.setBounds(20, 330, 140, 30);

        TableHeader.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableHeader);

        jTabbedPane1.addTab("Header", jScrollPane1);

        TableDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableDetail);

        jTabbedPane1.addTab("Detail", jScrollPane2);

        TableEx.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableEx);

        jTabbedPane1.addTab("Detail_Ex", jScrollPane3);

        TableDoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableDoc);

        jTabbedPane1.addTab("Doc Data", jScrollPane4);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 80, 540, 240);

    }//GEN-END:initComponents

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        // TODO add your handling code here:
        int conf = JOptionPane.showConfirmDialog(null,"Do You Want to EXECUTE this DATA.");
        
        if(conf == 0){
            int fconf = JOptionPane.showConfirmDialog(null,"Are You Definitly Sure to EXECUTE this DATA.");
            
            if(fconf == 0){
                try{
                    Connection conn=data.getConn();
                    Statement stmt=conn.createStatement();
                    
                    String sqlH = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_HEADER";
                    stmt.execute(sqlH);
                    
                    String sqlD = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL";
                    stmt.execute(sqlD);
                    
                    String sqlE = "INSERT INTO FINANCE.D_FIN_VOUCHER_DETAIL_EX SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL_EX";
                    stmt.execute(sqlE);
                    
                    String sqlDoc = "INSERT INTO DINESHMILLS.D_COM_DOC_DATA SELECT * FROM TEMP_DATABASE.L_COM_DOC_DATA";
                    stmt.execute(sqlDoc);
                }
                catch(Exception e){e.printStackTrace();}
            }
            else{
                JOptionPane.showMessageDialog(null,"ERROR : Execution Fail.");
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"ERROR : Data couldn't execute.");
        }
    }//GEN-LAST:event_btnExecuteActionPerformed
    
    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        // TODO add your handling code here:
        HeaderData();
        DetailData();
        DetailExData();
        DocData();
    }//GEN-LAST:event_btnShowActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableDetail;
    private javax.swing.JTable TableDoc;
    private javax.swing.JTable TableEx;
    private javax.swing.JTable TableHeader;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnShow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables
    
    private void HeaderGrid(){
        DataModelH=new EITLTableModel();
        TableHeader.removeAll();
        TableHeader.setModel(DataModelH);
        TableColumnModel ColModelH=TableHeader.getColumnModel();
        TableHeader.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        try{
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_HEADER");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            
            //Format the table from the resultset meta data
            for(int i=1;i<=rsInfo.getColumnCount();i++) {
                DataModelH.addColumn(rsInfo.getColumnName(i));
            }
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            for(int r=1;r<rsInfo.getColumnCount();r++){
                TableHeader.getColumnModel().getColumn(r).setMinWidth(50);
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }        
    }
    
    private void DetailGrid(){
        DataModelD=new EITLTableModel();
        TableDetail.removeAll();
        TableDetail.setModel(DataModelD);
        TableColumnModel ColModelD=TableDetail.getColumnModel();
        TableDetail.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        try{
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            
            //Format the table from the resultset meta data
            for(int i=1;i<=rsInfo.getColumnCount();i++) {
                DataModelD.addColumn(rsInfo.getColumnName(i));
            }
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            for(int r=1;r<rsInfo.getColumnCount();r++){
                TableDetail.getColumnModel().getColumn(r).setMinWidth(50);
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }        
    }
    
    private void DetailExGrid(){
        DataModelEx=new EITLTableModel();
        TableEx.removeAll();
        TableEx.setModel(DataModelEx);
        TableColumnModel ColModelEx=TableEx.getColumnModel();
        TableEx.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        try{
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL_EX");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            
            //Format the table from the resultset meta data
            for(int i=1;i<=rsInfo.getColumnCount();i++) {
                DataModelEx.addColumn(rsInfo.getColumnName(i));
            }
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            for(int r=1;r<rsInfo.getColumnCount();r++){
                TableEx.getColumnModel().getColumn(r).setMinWidth(50);
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }        
    }
    
    private void DocGrid(){
        DataModelDoc=new EITLTableModel();
        TableDoc.removeAll();
        TableDoc.setModel(DataModelDoc);
        TableColumnModel ColModelDoc=TableDoc.getColumnModel();
        TableDoc.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        try{
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_COM_DOC_DATA");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            
            //Format the table from the resultset meta data
            for(int i=1;i<=rsInfo.getColumnCount();i++) {
                DataModelDoc.addColumn(rsInfo.getColumnName(i));
            }
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            for(int r=1;r<rsInfo.getColumnCount();r++){
                TableDoc.getColumnModel().getColumn(r).setMinWidth(50);
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }        
    }
    
    private void HeaderData() {
        
        String strSQL=null;
        ResultSet rsTmp=null;
        try {
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_HEADER");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            strSQL="SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_HEADER ORDER BY VOUCHER_NO";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                Object[] rowData=new Object[50];
                for(int d=0;d<rsInfo.getColumnCount();d++){
                    rowData[d]=rsTmp.getString(d+1);
                }
               
                DataModelH.addRow(rowData);
                rsTmp.next();
            }            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void DetailData() {
        
        String strSQL=null;
        ResultSet rsTmp=null;
        try {
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            strSQL="SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL ORDER BY VOUCHER_NO";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                Object[] rowData=new Object[50];
                for(int d=0;d<rsInfo.getColumnCount();d++){
                    rowData[d]=rsTmp.getString(d+1);
                }
               
                DataModelD.addRow(rowData);
                rsTmp.next();
            }            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void DetailExData() {
        
        String strSQL=null;
        ResultSet rsTmp=null;
        try {
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL_EX");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            strSQL="SELECT * FROM TEMP_DATABASE.L_FIN_VOUCHER_DETAIL_EX ORDER BY VOUCHER_NO";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                Object[] rowData=new Object[50];
                for(int d=0;d<rsInfo.getColumnCount();d++){
                    rowData[d]=rsTmp.getString(d+1);
                }
               
                DataModelEx.addRow(rowData);
                rsTmp.next();
            }            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void DocData() {
        
        String strSQL=null;
        ResultSet rsTmp=null;
        try {
            Connection Conn=data.getConn();
            Statement stmt=Conn.createStatement();
            ResultSet rsData=stmt.executeQuery("SELECT * FROM TEMP_DATABASE.L_COM_DOC_DATA");
            ResultSetMetaData rsInfo=rsData.getMetaData(); 
            //System.out.println("Count Col = "+rsInfo.getColumnCount());
            
            strSQL="SELECT * FROM TEMP_DATABASE.L_COM_DOC_DATA ORDER BY DOC_NO";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                Object[] rowData=new Object[50];
                for(int d=0;d<rsInfo.getColumnCount();d++){
                    rowData[d]=rsTmp.getString(d+1);
                }
               
                DataModelDoc.addRow(rowData);
                rsTmp.next();
            }            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
}
