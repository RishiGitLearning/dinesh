/*
 * frmFeltCreditNote.java
 *
 * Created on March 12, 2013, 3:10 PM
 */
package EITLERP.Production.FeltCreditNote;

/**
 *
 * @author
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import EITLERP.*;
import java.net.URL;
import java.sql.*;
import EITLERP.Finance.UtilFunctions;
import TReportWriter.*;
import EITLERP.data;
import EITLERP.LOV;
import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import java.io.File;
import EITLERP.Sales.frmSalesInvoice;
import EITLERP.FeltSales.SalesReturns.*;
import static EITLERP.Production.FeltCreditNote.clsFeltCNAutoPosting.*;

public class frmFeltCreditNote extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelModule = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    public int DeptID = EITLERPGLOBAL.gUserDeptID;
    public String finalapproved = "";
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;
    private clsFeltCreditNote ObjFeltCreditNote;
    private clsExcelExporter exp = new clsExcelExporter();
    private TReportEngine objEngine = new TReportEngine();
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbOrderReasonModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableCellRenderer RowFormat = new EITLTableCellRenderer();
    public frmPendingApprovals frmPA;
    public double total_r6;

    /**
     * Creates new form frmFeltCreditNote
     */
    public void init() {
        System.gc();
        setSize(830, 590);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();

        ObjFeltCreditNote = new clsFeltCreditNote();

        CheckCNPrint();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateCreditNoteCombo();
        FormatGrid();
        cmbOrderReason.setEnabled(false);
        if (ObjFeltCreditNote.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Error occured while Loading Data. Error is " + ObjFeltCreditNote.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemWarping = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        mnuShow = new javax.swing.JPopupMenu();
        ShowInv = new javax.swing.JMenuItem();
        ShowSRGR = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtCnDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtCnID = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbOrderReason = new javax.swing.JComboBox();
        txtamendreasoncode = new javax.swing.JTextField();
        txtamendreasonname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtfromdate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txttodate = new javax.swing.JTextField();
        cmbReport = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cmbShow = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnCNSumm = new javax.swing.JButton();
        btnCNDetail = new javax.swing.JButton();
        btnCNDraft = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemWarping.setText("Warping Report");
        jMenuItemWarping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWarpingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWarping);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        ShowInv.setText("Show Invoice");
        ShowInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowInvActionPerformed(evt);
            }
        });
        mnuShow.add(ShowInv);

        ShowSRGR.setText("Show SR/GR");
        ShowSRGR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowSRGRActionPerformed(evt);
            }
        });
        mnuShow.add(ShowSRGR);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT CREDIT NOTE ENTRY FORM - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Crdit Note Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 130, 17);

        txtCnDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtCnDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCnDate.setEnabled(false);
        txtCnDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCnDateFocusGained(evt);
            }
        });
        Tab1.add(txtCnDate);
        txtCnDate.setBounds(140, 10, 102, 27);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TableFocusGained(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 140, 750, 220);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setEnabled(false);
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(460, 370, 90, 29);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(560, 370, 90, 29);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 130, 770, 6);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 370, 90, 29);

        jLabel5.setText("Credit Note  ID");
        Tab1.add(jLabel5);
        jLabel5.setBounds(10, 42, 110, 17);

        txtCnID.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtCnID.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCnID.setEnabled(false);
        Tab1.add(txtCnID);
        txtCnID.setBounds(140, 40, 102, 27);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(260, 10, 20, 18);

        jLabel12.setText("Credit Note Type");
        Tab1.add(jLabel12);
        jLabel12.setBounds(340, 50, 130, 17);

        cmbOrderReason.setBackground(new java.awt.Color(255, 255, 255));
        cmbOrderReason.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbOrderReason.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOrderReasonItemStateChanged(evt);
            }
        });
        cmbOrderReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderReasonActionPerformed(evt);
            }
        });
        Tab1.add(cmbOrderReason);
        cmbOrderReason.setBounds(480, 40, 250, 25);

        txtamendreasoncode.setEnabled(false);
        txtamendreasoncode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtamendreasoncodeActionPerformed(evt);
            }
        });
        Tab1.add(txtamendreasoncode);
        txtamendreasoncode.setBounds(370, 10, 69, 27);

        txtamendreasonname.setEnabled(false);
        Tab1.add(txtamendreasonname);
        txtamendreasonname.setBounds(460, 10, 160, 27);

        jLabel1.setText("Period : ");
        Tab1.add(jLabel1);
        jLabel1.setBounds(10, 70, 50, 17);

        jLabel2.setText("From :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(10, 90, 50, 17);

        txtfromdate.setEnabled(false);
        Tab1.add(txtfromdate);
        txtfromdate.setBounds(60, 90, 130, 27);

        jLabel4.setText("To :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(200, 90, 30, 17);

        txttodate.setEnabled(false);
        Tab1.add(txttodate);
        txttodate.setBounds(230, 90, 140, 27);

        cmbReport.setText("Repot Show");
        cmbReport.setEnabled(false);
        cmbReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbReportActionPerformed(evt);
            }
        });
        Tab1.add(cmbReport);
        cmbReport.setBounds(180, 370, 130, 29);

        jButton1.setText("Export To Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Tab1.add(jButton1);
        jButton1.setBounds(10, 370, 160, 29);

        cmbShow.setText("Show Data");
        cmbShow.setEnabled(false);
        cmbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShowActionPerformed(evt);
            }
        });
        Tab1.add(cmbShow);
        cmbShow.setBounds(390, 90, 120, 29);

        jButton2.setText("Show Doc");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        Tab1.add(jButton2);
        jButton2.setBounds(330, 370, 120, 29);

        btnCNSumm.setText("CN SUMMARY");
        btnCNSumm.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnCNSumm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCNSummActionPerformed(evt);
            }
        });
        Tab1.add(btnCNSumm);
        btnCNSumm.setBounds(30, 410, 190, 33);

        btnCNDetail.setText("CN DETAIL");
        btnCNDetail.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnCNDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCNDetailActionPerformed(evt);
            }
        });
        Tab1.add(btnCNDetail);
        btnCNDetail.setBounds(280, 410, 190, 33);

        btnCNDraft.setText("CN DRAFT ");
        btnCNDraft.setMargin(new java.awt.Insets(2, 7, 2, 7));
        btnCNDraft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCNDraftActionPerformed(evt);
            }
        });
        Tab1.add(btnCNDraft);
        btnCNDraft.setBounds(540, 410, 190, 33);

        Tab.addTab("Credit Note Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 17);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 29);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 33);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 500);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 790, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void ShowInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowInvActionPerformed
        try {
            //String InvoiceNo=DataModel.getValueByVariable("CN_INVOICE_NO", Table.getSelectedRow());
            String InvoiceNo = DataModel.getValueAt(Table.getSelectedRow(), 2).toString();
            //String InvoiceDate=DataModel.getValueByVariable("CN_INVOICE_DATE", Table.getSelectedRow());
            String InvoiceDate = EITLERPGLOBAL.formatDateDB(DataModel.getValueAt(Table.getSelectedRow(), 3).toString());
            String PartyCode = DataModel.getValueAt(Table.getSelectedRow(), 4).toString();
            AppletFrame aFrame = new AppletFrame("Sales Invoice");
            aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice", "Sales Invoice");
            frmSalesInvoice ObjDoc = (frmSalesInvoice) aFrame.ObjApplet;
            //int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
            ObjDoc.FindEx1(PartyCode, InvoiceNo, InvoiceDate);

        } catch (Exception e) {

        }           // TODO add your handling code here:
    }//GEN-LAST:event_ShowInvActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        mnuShow.show(Tab1, jButton2.getX(), jButton2.getY() + jButton2.getHeight());

//        try {
//            //String InvoiceNo=DataModel.getValueByVariable("CN_INVOICE_NO", Table.getSelectedRow());
//            String InvoiceNo=DataModel.getValueAt(Table.getSelectedRow(),2).toString(); 
//            //String InvoiceDate=DataModel.getValueByVariable("CN_INVOICE_DATE", Table.getSelectedRow());
//            String InvoiceDate=EITLERPGLOBAL.formatDateDB(DataModel.getValueAt(Table.getSelectedRow(),3).toString()); 
//            String PartyCode=DataModel.getValueAt(Table.getSelectedRow(),4).toString(); 
//            AppletFrame aFrame=new AppletFrame("Sales Invoice");
//            aFrame.startAppletEx("EITLERP.Sales.frmSalesInvoice","Sales Invoice");
//            frmSalesInvoice ObjDoc=(frmSalesInvoice) aFrame.ObjApplet; 
//            //int CompanyID=UtilFunctions.CInt(DataModel.getValueByVariable("REF_COMPANY_ID", Table.getSelectedRow()));
//            ObjDoc.FindEx1(PartyCode,InvoiceNo,InvoiceDate); 
//            
//        }
//        catch(Exception e) {
//                
//        }         // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShowActionPerformed
        FormatGrid();
        GenerateData();
        cmbShow.setEnabled(false);        // TODO add your handling code here:
    }//GEN-LAST:event_cmbShowActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            exp.fillData(Table, new File("/root/Desktop/OEM.xls"));
            exp.fillData(Table, new File("D://OEM.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/OEM.xls' successfully in Linux PC or 'D://OEM.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }             // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbReportActionPerformed
        ReportShow();        // TODO add your handling code here:
    }//GEN-LAST:event_cmbReportActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
//            if (cmbOrderReason.getSelectedItem().equals("GOODS RETURN")) {
//
//                if (evt.getKeyCode() == 112) //F1 Key pressed
//                {
//
//                    if (Table.getSelectedColumn() == 2) {
//                        LOV aList = new LOV();
//
//                        //String strSQL = "SELECT PIECE_NO,INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_INVOICE_DATA WHERE PIECE_NO='"+ Table.getValueAt(Table.getSelectedRow(), 1) +"'";
//                        String strSQL = "SELECT D.PIECE_NO,H.INVOICE_NO,H.INVOICE_DATE,H.PARTY_CODE,H.PARTY_NAME FROM PRODUCTION.FELT_SAL_INVOICE_HEADER H, PRODUCTION.FELT_SAL_INVOICE_DETAIL D WHERE H.INVOICE_NO=D.INVOICE_NO AND H.INVOICE_DATE=SUBSTRING(D.INVOICE_DATE,1,10) AND D.PIECE_NO='" + Table.getValueAt(Table.getSelectedRow(), 1) + "' AND H.APPROVED=1 AND H.CANCELLED=0";
//                        aList.SQL = strSQL;
//                        aList.ReturnCol = 2;
//                        aList.ShowReturnCol = true;
//                        //aList.DefaultSearchOn=2;
//                        aList.DefaultSearchOn = 1;
//
//                        if (aList.ShowLOV()) {
//                            if (Table.getCellEditor() != null) {
//                                Table.getCellEditor().stopCellEditing();
//                            }
//                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 2);
//                        }
//                    }
//                }
//            }

            //F1 Key pressed
            if (evt.getKeyCode() == 112) {
                if (cmbOrderReason.getSelectedItem().equals("GOODS RETURN")) {
                    if (Table.getSelectedColumn() == 1) {
                        LOV aList = new LOV();
                        String strSQL = "SELECT D.PIECE_NO,D.INVOICE_NO,D.INVOICE_DATE,D.PARTY_CODE,D.PARTY_NAME FROM PRODUCTION.FELT_SALES_RETURNS_HEADER H, PRODUCTION.FELT_SALES_RETURNS_DETAIL D WHERE H.DOC_NO=D.DOC_NO AND H.APPROVED=1 AND H.CANCELED=0 AND D.PIECE_NO NOT IN ( SELECT D.CN_INV_PIECE_NO FROM PRODUCTION.FELT_CN_TEMP_HEADER H, PRODUCTION.FELT_CN_TEMP_DETAIL D WHERE H.CN_ID=D.CN_ID AND H.CN_DATE=D.CN_DATE AND H.CN_TYPE=7 AND H.CANCELED=0) ";
                        aList.SQL = strSQL;
                        aList.ReturnCol = 1;
                        aList.ShowReturnCol = true;
                        aList.DefaultSearchOn = 1;

                        if (aList.ShowLOV()) {
                            if (Table.getCellEditor() != null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_TableKeyPressed

    private void TableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableFocusGained

    }//GEN-LAST:event_TableFocusGained

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased

        double grossvalue = 0, yearenddisc = 0;
        try {
            grossvalue = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 9).toString());
            yearenddisc = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 11).toString());
        } catch (Exception e) {

        }
        if (yearenddisc > 0) {
            Table.setValueAt(String.valueOf(grossvalue * yearenddisc / 100), Table.getSelectedRow(), 12);
        }

        /*
         double grossvaluer=0,unders=0;
         try{
         grossvaluer=Double.parseDouble(Table.getValueAt(Table.getSelectedRow(),9).toString());
         unders=Double.parseDouble(Table.getValueAt(Table.getSelectedRow(),13).toString());
         }
         catch(Exception e){
      
         }
      
         Table.setValueAt(String.valueOf(grossvalue*unders/100), Table.getSelectedRow(), 14);
         */
        double grossvaluerj = 0, discbill = 0, yerdiscrs = 0, unadj = 0;
        try {
            grossvaluerj = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 9).toString());
            discbill = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 10).toString());
            yerdiscrs = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 12).toString());

        } catch (Exception e) {

        }
        try {
            unadj = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 14).toString());

        } catch (Exception e) {

        }

        Table.setValueAt(String.valueOf(grossvaluerj - discbill - yerdiscrs - unadj), Table.getSelectedRow(), 18);

        double net = 0, oemdisc = 0;
        try {
            net = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 18).toString());
            oemdisc = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 19).toString());
        } catch (Exception e) {

        }
        if (net > 0) {
            Table.setValueAt(String.valueOf(net * oemdisc), Table.getSelectedRow(), 20);
        }

        double oemdisc1 = 0;
        try {

            oemdisc1 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 19).toString());
        } catch (Exception e) {

        }
        if (net > 0) {
            Table.setValueAt(String.valueOf(EITLERPGLOBAL.round(oemdisc1 / 100, 2)), Table.getSelectedRow(), 22);
        }

        double oemdisc2 = 0, oemdisc3 = 0;
        try {

            oemdisc3 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 18).toString());
            oemdisc2 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 22).toString());
        } catch (Exception e) {

        }
        if (net > 0) {
            Table.setValueAt(String.valueOf(oemdisc3 * oemdisc2), Table.getSelectedRow(), 20);
        }
        double m1 = 0, m2 = 0;
        try {
            m1 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 15).toString());
        } catch (Exception e) {
            m1 = 0;
        }

        try {
            m2 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 42).toString());
        } catch (Exception e) {
            m2 = 0;
        }

        if (m2 > m1) {
            JOptionPane.showMessageDialog(this, "Not Valid", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        double r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0;
        //JOptionPane.showMessageDialog(null ,"Data = "+Table.getValueAt(Table.getSelectedRow(),15).toString());
        if (Table.getValueAt(Table.getSelectedRow(), 15).equals("")) {
            r1 = 0;
        } else {
            r1 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 15) + "");
        }
        if (Table.getValueAt(Table.getSelectedRow(), 36).equals("")) {
            r2 = 0;
        } else {
            r2 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 36) + "");
        }

        if (Table.getValueAt(Table.getSelectedRow(), 38).equals("")) {
            r3 = 0;
        } else {
            r3 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 38) + "");
        }
        if (Table.getValueAt(Table.getSelectedRow(), 39).equals("")) {
            r4 = 0;
        } else {
            r4 = Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 39) + "");
        }

        r5 = (r2 + r3 + r4);
        r6 = (r1 - r5);
        total_r6 = r6;
        //Table.setValueAt(r6+"", Table.getSelectedRow(), 40);
        if (Table.getSelectedColumn() == 40) {

            if (r6 < Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 40).toString())) {
                JOptionPane.showMessageDialog(null, "Not Valid Amopunt");
                Table.setValueAt("", Table.getSelectedRow(), 40);
            }
        }
        if (Table.getSelectedColumn() == 41) {
            //JOptionPane.showMessageDialog(null,"Come for Test 40 Col");
            if (r6 < Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 41).toString())) {
                JOptionPane.showMessageDialog(null, "Not Valid Amopunt");
                Table.setValueAt("", Table.getSelectedRow(), 41);
            }
        }
        if (Table.getSelectedColumn() == 42) {
            //JOptionPane.showMessageDialog(null,"Come for Test 40 Col");
            if (r6 < Double.parseDouble(Table.getValueAt(Table.getSelectedRow(), 42).toString())) {
                JOptionPane.showMessageDialog(null, "Not Valid Amopunt");
                Table.setValueAt("", Table.getSelectedRow(), 42);
            }
        }

    }//GEN-LAST:event_TableKeyReleased

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        //   ReasonResetReadonly() ;       // TODO add your handling code here:
    }//GEN-LAST:event_TableMouseClicked

    private void txtamendreasoncodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtamendreasoncodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtamendreasoncodeActionPerformed

    private void cmbOrderReasonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOrderReasonItemStateChanged
        lblStatus.setText(Integer.toString(cmbOrderReason.getSelectedIndex()));
        int AmdReason = cmbOrderReason.getSelectedIndex();
        txtamendreasoncode.setText(Integer.toString(cmbOrderReason.getSelectedIndex()));
        txtamendreasonname.setText((String) cmbOrderReason.getSelectedItem());

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("F6")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 183;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;

                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(false);
                    cmbShow.setEnabled(true);
                    cmbReport.setEnabled(false);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("Delay F6")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 184;

                    EditMode = EITLERPGLOBAL.ADD;

                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(false);
                    cmbShow.setEnabled(true);
                    cmbReport.setEnabled(false);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("OEM")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 185;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(true);
                    cmbShow.setEnabled(false);
                    cmbReport.setEnabled(true);
                    FormatGrid();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("YEAR END DISCOUNT")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 186;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(true);
                    cmbShow.setEnabled(false);
                    cmbReport.setEnabled(false);
                    FormatGrid();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("PRICE DIFFERENCE")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 187;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));

                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(true);
                    cmbShow.setEnabled(false);
                    cmbReport.setEnabled(false);
                    FormatGrid();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("COMPENSATION")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 192;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));

                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(true);
                    cmbShow.setEnabled(false);
                    cmbReport.setEnabled(false);
                    FormatGrid();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("GOODS RETURN")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 193;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));

                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(true);
                    cmbShow.setEnabled(false);
                    cmbReport.setEnabled(false);
                    FormatGrid();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("INSURANCE CLAIM")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 194;

                    EditMode = EITLERPGLOBAL.ADD;
                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));

                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(true);
                    cmbShow.setEnabled(false);
                    cmbReport.setEnabled(false);
                    FormatGrid();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        //23-05-2020
        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("DELAY F6 HALF")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 345;

                    EditMode = EITLERPGLOBAL.ADD;

                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(false);
                    cmbShow.setEnabled(true);
                    cmbReport.setEnabled(false);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ////
        
        //05-04-2021
        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("SPECIAL PDC")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 373;

                    EditMode = EITLERPGLOBAL.ADD;

                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(false);
                    cmbShow.setEnabled(true);
                    cmbReport.setEnabled(false);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ////
        
        //07-04-2021
        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (cmbOrderReason.getSelectedItem().toString().equalsIgnoreCase("SDF CASH 09 NOT ELIGIBLE")) {

                    SelectFirstFree aList = new SelectFirstFree();
                    aList.ModuleID = 735;
                    aList.FirstFreeNo = 374;

                    EditMode = EITLERPGLOBAL.ADD;

                    SelPrefix = aList.Prefix; //Selected Prefix;
                    SelSuffix = aList.Suffix;
                    FFNo = aList.FirstFreeNo;
                    SetupApproval();
                    //Display newly generated document no.
                    txtCnID.setText(clsFeltCreditNote.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 735, FFNo, false));
                    lblTitle.setText("FELT CREDIT NOTE FORM - " + txtCnID.getText());
                    lblTitle.setBackground(Color.BLUE);
                    cmdAdd.setEnabled(false);
                    cmbShow.setEnabled(true);
                    cmbReport.setEnabled(false);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ////


    }//GEN-LAST:event_cmbOrderReasonItemStateChanged

    private void cmbOrderReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderReasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbOrderReasonActionPerformed

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed

    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed

    }//GEN-LAST:event_jMenuItemWarpingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed

    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltCreditNote.HistoryView = false;
        ObjFeltCreditNote.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltCreditNote.ShowHistory(EITLERPGLOBAL.formatDateDB(txtCnDate.getText()), txtCnID.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtCnDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtCnDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCnDateFocusGained
        ShowMessage("Enter Updation Date");
    }//GEN-LAST:event_txtCnDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        finalapproved = "NO";
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "NO";
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        finalapproved = "YES";
        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        finalapproved = "NO";
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(735, txtCnID.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltCreditNote.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        //  Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltCreditNote.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        Object[] rowData = new Object[50];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        rowData[7] = "";
        rowData[8] = "";
        rowData[9] = "";
        rowData[10] = "";
        rowData[11] = "";
        rowData[12] = "";
        rowData[13] = "";
        rowData[14] = "";
        rowData[15] = "";
        rowData[16] = "";
        rowData[17] = "";
        rowData[18] = "";
        rowData[19] = "5.00";
        rowData[20] = "";
        rowData[21] = "";
        rowData[22] = "";
        rowData[23] = "";
        rowData[24] = "";
        rowData[25] = "";
        rowData[26] = "";
        rowData[27] = "";
        rowData[28] = "";
        rowData[29] = "";
        rowData[30] = "";
        rowData[31] = "";
        rowData[32] = "";
        rowData[33] = "";
        rowData[34] = "";
        rowData[35] = "";
        rowData[36] = "";
        rowData[37] = "";
        rowData[38] = "";
        rowData[39] = "";
        rowData[40] = "";
        rowData[41] = "";
        rowData[42] = "";
        rowData[43] = "";
        rowData[44] = "";
        rowData[45] = "";

        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void btnCNSummActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCNSummActionPerformed
        String Title = "", strSQL = "";

        if (txtCnID.getText().startsWith("GR")) {
            Title = "PARTY WISE GOODS RETURN CREDIT NOTE SUMMARY STATEMENT";
            strSQL = "SELECT CNH_SUB_ACCOUNT_CODE,CNH_PARTY_NAME,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_INVOICE_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='GOODSRTN' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("CM")) {
            Title = "PARTY WISE COMPENSATION CREDIT NOTE SUMMARY STATEMENT";
            strSQL = "SELECT CNH_SUB_ACCOUNT_CODE,CNH_PARTY_NAME,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_INVOICE_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='COMP' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("OM")) {
            Title = "PARTY WISE OEM CREDIT NOTE SUMMARY STATEMENT";
            strSQL = "SELECT CNH_SUB_ACCOUNT_CODE,CNH_PARTY_NAME,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_INVOICE_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='OEM' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("IC")) {
            Title = "PARTY WISE INSURANCE CLAIM CREDIT NOTE SUMMARY STATEMENT";
            strSQL = "SELECT CNH_SUB_ACCOUNT_CODE,CNH_PARTY_NAME,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_INVOICE_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='INSCLAIM' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }

        PrintCNSummary(Title, strSQL);
    }//GEN-LAST:event_btnCNSummActionPerformed

    private void btnCNDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCNDetailActionPerformed
        // TODO add your handling code here:
        String Title = "", strSQL = "";
        String fileName = "/EITLERP/Production/FeltCreditNote/CreditNoteDetail.jrxml";

        if (txtCnID.getText().startsWith("GR")) {
            Title = "PARTY WISE GOODS RETURN CREDIT NOTE DETAIL STATEMENT";
            strSQL = "SELECT CND_SUB_ACCOUNT_CODE,CND_MAIN_ACCOUNT_NAME,CND_INVOICE_NO,CND_QUALITY,CND_INVOICE_DATE,CND_INVOICE_AMOUNT,0 AS CND_PERCENT,CND_CREDIT_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_DETAIL WHERE CND_TYPE='GOODSRTN' AND CND_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') ORDER BY CND_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("CM")) {
            Title = "PARTY WISE COMPENSATION CREDIT NOTE DETAIL STATEMENT";
            strSQL = "SELECT CND_SUB_ACCOUNT_CODE,CND_MAIN_ACCOUNT_NAME,CND_INVOICE_NO,CND_QUALITY,CND_INVOICE_DATE,CND_INVOICE_AMOUNT,0 AS CND_PERCENT,CND_CREDIT_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_DETAIL WHERE CND_TYPE='COMP' AND CND_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') ORDER BY CND_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("OM")) {
            Title = "PARTY WISE OEM CREDIT NOTE DETAIL STATEMENT";
            strSQL = "SELECT CND_SUB_ACCOUNT_CODE,CND_MAIN_ACCOUNT_NAME,CND_INVOICE_NO,CND_QUALITY,CND_INVOICE_DATE,CND_INVOICE_AMOUNT,0 AS CND_PERCENT,CND_CREDIT_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_DETAIL WHERE CND_TYPE='OEM' AND CND_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') ORDER BY CND_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("IC")) {
            Title = "PARTY WISE INSURANCE CLAIM CREDIT NOTE DETAIL STATEMENT";
            strSQL = "SELECT CND_SUB_ACCOUNT_CODE,CND_MAIN_ACCOUNT_NAME,CND_INVOICE_NO,CND_QUALITY,CND_INVOICE_DATE,CND_INVOICE_AMOUNT,0 AS CND_PERCENT,CND_CREDIT_AMOUNT FROM PRODUCTION.D_CREDIT_NOTE_DETAIL WHERE CND_TYPE='INSCLAIM' AND CND_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') ORDER BY CND_SUB_ACCOUNT_CODE";
        }

        PrintCNDetail(Title, strSQL, fileName);
    }//GEN-LAST:event_btnCNDetailActionPerformed

    private void btnCNDraftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCNDraftActionPerformed
        String strSQL = "";

        if (txtCnID.getText().startsWith("GR")) {
            strSQL = "SELECT CNH_ID,CNH_NO,CNH_TYPE,CNH_EFFECT,CNH_MAIN_ACCOUNT_CODE,CNH_MAIN_CODE,CNH_SUB_ACCOUNT_CODE,CNH_CITY,CNH_PARTY_NAME,CNH_REASON_CODE,CNH_BOOK_CODE,CNH_PERCENT,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_LINK_NO,CNH_YEAR_MON_ID,CNH_INTERVAL_CAPTION,CNH_INVOICE_AMOUNT,CNH_DRAFT_CR_NOTE_NO,CNH_DRAFT_CR_NOTE_DATE,CNH_EXT11,CNH_FIN_VOUCHER_NO,CNH_REMARKS FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='GOODSRTN' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("CM")) {
            strSQL = "SELECT CNH_ID,CNH_NO,CNH_TYPE,CNH_EFFECT,CNH_MAIN_ACCOUNT_CODE,CNH_MAIN_CODE,CNH_SUB_ACCOUNT_CODE,CNH_CITY,CNH_PARTY_NAME,CNH_REASON_CODE,CNH_BOOK_CODE,CNH_PERCENT,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_LINK_NO,CNH_YEAR_MON_ID,CNH_INTERVAL_CAPTION,CNH_INVOICE_AMOUNT,CNH_DRAFT_CR_NOTE_NO,CNH_DRAFT_CR_NOTE_DATE,CNH_EXT11,CNH_FIN_VOUCHER_NO,CNH_REMARKS FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='COMP' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("OM")) {
            strSQL = "SELECT CNH_ID,CNH_NO,CNH_TYPE,CNH_EFFECT,CNH_MAIN_ACCOUNT_CODE,CNH_MAIN_CODE,CNH_SUB_ACCOUNT_CODE,CNH_CITY,CNH_PARTY_NAME,CNH_REASON_CODE,CNH_BOOK_CODE,CNH_PERCENT,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_LINK_NO,CNH_YEAR_MON_ID,CNH_INTERVAL_CAPTION,CNH_INVOICE_AMOUNT,CNH_DRAFT_CR_NOTE_DATE,CNH_DRAFT_CR_NOTE_NO,CNH_EXT11,CNH_REMARKS,CNH_FIN_VOUCHER_NO FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='OEM' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }
        if (txtCnID.getText().startsWith("IC")) {
            strSQL = "SELECT CNH_ID,CNH_NO,CNH_TYPE,CNH_EFFECT,CNH_MAIN_ACCOUNT_CODE,CNH_MAIN_CODE,CNH_SUB_ACCOUNT_CODE,CNH_CITY,CNH_PARTY_NAME,CNH_REASON_CODE,CNH_BOOK_CODE,CNH_PERCENT,ROUND(CNH_CREDIT_AMOUNT,0) AS CNH_CREDIT_AMOUNT,CNH_LINK_NO,CNH_YEAR_MON_ID,CNH_INTERVAL_CAPTION,CNH_INVOICE_AMOUNT,CNH_DRAFT_CR_NOTE_NO,CNH_DRAFT_CR_NOTE_DATE,CNH_EXT11,CNH_REMARKS,CNH_FIN_VOUCHER_NO FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%') AND CNH_TYPE='INSCLAIM' ORDER BY CNH_SUB_ACCOUNT_CODE";
        }

        PrintCNDraft(strSQL);
    }//GEN-LAST:event_btnCNDraftActionPerformed

    private void ShowSRGRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowSRGRActionPerformed
        // TODO add your handling code here:
        if (txtamendreasoncode.getText().matches("7")) {
            if (Table.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Select Piece Detail to Show Document");
            } else {
                try {
                    String DocNo = DataModel.getValueAt(Table.getSelectedRow(), 44).toString();
                    AppletFrame aFrame = new AppletFrame("Felt Sales Return");
                    aFrame.startAppletEx("EITLERP.FeltSales.SalesReturns.frmFeltSalesReturns", "Felt Sales Return");
                    frmFeltSalesReturns ObjDoc = (frmFeltSalesReturns) aFrame.ObjApplet;
                    ObjDoc.FindEx((int) EITLERPGLOBAL.gCompanyID, DocNo);
                } catch (Exception e) {

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select Type Goods Return to Show Document");
        }
    }//GEN-LAST:event_ShowSRGRActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JMenuItem ShowInv;
    private javax.swing.JMenuItem ShowSRGR;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton btnCNDetail;
    private javax.swing.JButton btnCNDraft;
    private javax.swing.JButton btnCNSumm;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbOrderReason;
    private javax.swing.JButton cmbReport;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmbShow;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWarping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPopupMenu mnuShow;
    private javax.swing.JTextField txtCnDate;
    private javax.swing.JTextField txtCnID;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtamendreasoncode;
    private javax.swing.JTextField txtamendreasonname;
    private javax.swing.JTextField txtfromdate;
    private javax.swing.JTextField txttodate;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {
        txtCnDate.setEnabled(pStat);
        txtfromdate.setEnabled(pStat);
        txttodate.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmbShow.setEnabled(pStat);
        cmbReport.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtCnDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtfromdate.setText("");
        txttodate.setText("");
        // txtFormNo.setText("");
        txtCnID.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 735)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }

        //=========== Title Bar Color Indication ===============//
        try {
//            if (EditMode == 0) {
//                if (ObjFeltCreditNote.getAttribute("APPROVED").getInt() == 1) {
//                    lblTitle.setBackground(Color.BLUE);
//                } else {
//                    lblTitle.setBackground(Color.GRAY);
//                }
//
//            }
            if (EditMode == 0) {
                if (ObjFeltCreditNote.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                    lblTitle.setForeground(Color.WHITE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjFeltCreditNote.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//

            String AmendDate = EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getAttribute("CN_DATE").getString());
            String AmendID = ObjFeltCreditNote.getAttribute("CN_ID").getString();
            String AmendReasoncode = ObjFeltCreditNote.getAttribute("CN_TYPE").getString();
            String CNFromDate = EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getAttribute("CN_FROM_DATE").getString());
            String CNToDate = EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getAttribute("CN_TO_DATE").getString());

            lblTitle.setText("FELT CREDIT NOTE FORM - " + AmendID);
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltCreditNote.getAttribute("HIERARCHY_ID").getVal());

            DoNotEvaluate = true;

            //FormatGrid();
            txtCnDate.setText(AmendDate);
            txtCnID.setText(AmendID);
            txtfromdate.setText(CNFromDate);
            txttodate.setText(CNToDate);

            txtamendreasoncode.setText(ObjFeltCreditNote.getAttribute("CN_TYPE").getString());
            EITLERPGLOBAL.setComboIndex(cmbOrderReason, Integer.parseInt(ObjFeltCreditNote.getAttribute("CN_TYPE").getString()));
            FormatGrid();

            //Now Generate Table
            for (int i = 1; i <= ObjFeltCreditNote.hmFeltCreditNoteDetails.size(); i++) {
                clsFeltCreditNoteDetails ObjFeltCreditNoteDetails = (clsFeltCreditNoteDetails) ObjFeltCreditNote.hmFeltCreditNoteDetails.get(Integer.toString(i));

                Object[] rowData = new Object[50];

                rowData[0] = ObjFeltCreditNoteDetails.getAttribute("SR_NO").getString();
                rowData[1] = ObjFeltCreditNoteDetails.getAttribute("CN_INV_PIECE_NO").getString();
                rowData[2] = ObjFeltCreditNoteDetails.getAttribute("CN_INVOICE_NO").getString();
                rowData[3] = EITLERPGLOBAL.formatDate(ObjFeltCreditNoteDetails.getAttribute("CN_INVOICE_DATE").getString());
                rowData[4] = ObjFeltCreditNoteDetails.getAttribute("CN_PARTY_CODE").getString();
                rowData[5] = ObjFeltCreditNoteDetails.getAttribute("CN_PARTY_NAME").getString();
                rowData[6] = ObjFeltCreditNoteDetails.getAttribute("CN_INV_PRODUCT_CODE").getString();
                rowData[7] = ObjFeltCreditNoteDetails.getAttribute("CN_PRODUCT_GRUP").getString();
                rowData[8] = ObjFeltCreditNoteDetails.getAttribute("CN_INV_WI_SQMTR").getString();
                rowData[9] = ObjFeltCreditNoteDetails.getAttribute("CN_GROSS_VALUE").getString();
                rowData[10] = ObjFeltCreditNoteDetails.getAttribute("CN_DISC_BILL").getString();
                rowData[11] = ObjFeltCreditNoteDetails.getAttribute("CN_YEAR_END_DISC").getString();
                rowData[12] = ObjFeltCreditNoteDetails.getAttribute("CN_YEAR_END_DISC_RS").getString();
                rowData[13] = ObjFeltCreditNoteDetails.getAttribute("CN_UNADJUSTED_DISC").getString();
                rowData[14] = ObjFeltCreditNoteDetails.getAttribute("CN_UNADJUSTED_RS").getString();
                rowData[15] = ObjFeltCreditNoteDetails.getAttribute("CN_INVOICE_AMT").getString();
                rowData[16] = ObjFeltCreditNoteDetails.getAttribute("CN_RATE").getString();
                rowData[17] = ObjFeltCreditNoteDetails.getAttribute("CN_BASIC_VALUE").getString();
                rowData[18] = ObjFeltCreditNoteDetails.getAttribute("CN_NET_BASIC").getString();
                rowData[19] = ObjFeltCreditNoteDetails.getAttribute("CN_OEM").getString();
                rowData[20] = ObjFeltCreditNoteDetails.getAttribute("CN_OEM_VALUE").getString();
                rowData[21] = ObjFeltCreditNoteDetails.getAttribute("CN_RECD_AMT").getString();
                rowData[22] = ObjFeltCreditNoteDetails.getAttribute("CN_EXT1").getString();
                rowData[23] = ObjFeltCreditNoteDetails.getAttribute("CN_EXT2").getString();
                rowData[24] = ObjFeltCreditNoteDetails.getAttribute("CN_EXT3").getString();
                rowData[25] = ObjFeltCreditNoteDetails.getAttribute("TOTAL_NET_AMOUNT").getString();
                rowData[26] = ObjFeltCreditNoteDetails.getAttribute("VALUE_DATE").getString();
                rowData[27] = ObjFeltCreditNoteDetails.getAttribute("AMOUNT").getString();
                rowData[28] = ObjFeltCreditNoteDetails.getAttribute("VOUCHER").getString();
                rowData[29] = ObjFeltCreditNoteDetails.getAttribute("F6").getString();
                rowData[30] = ObjFeltCreditNoteDetails.getAttribute("SALES_REMARKS").getString();
                rowData[31] = ObjFeltCreditNoteDetails.getAttribute("AUDIT_REMARKS").getString();
                rowData[32] = ObjFeltCreditNoteDetails.getAttribute("INSURANCE").getString();
                rowData[33] = ObjFeltCreditNoteDetails.getAttribute("CST").getString();
                rowData[34] = ObjFeltCreditNoteDetails.getAttribute("EXCISE_DUTY").getString();
                rowData[35] = ObjFeltCreditNoteDetails.getAttribute("COM_YEAR_DISC").getString();
                rowData[36] = ObjFeltCreditNoteDetails.getAttribute("COM_YEAR_AMT").getString();
                rowData[37] = ObjFeltCreditNoteDetails.getAttribute("COM_UDJ_DISC").getString();
                rowData[38] = ObjFeltCreditNoteDetails.getAttribute("COM_UDJ_AMT").getString();
                rowData[39] = ObjFeltCreditNoteDetails.getAttribute("COM_OEM_AMT").getString();
                rowData[40] = ObjFeltCreditNoteDetails.getAttribute("COMPENSATION_AMT").getString();
                rowData[41] = ObjFeltCreditNoteDetails.getAttribute("GOODS_RETURN_AMT").getString();
                rowData[42] = ObjFeltCreditNoteDetails.getAttribute("INSURANCE_CLAIM_AMT").getString();
                rowData[43] = ObjFeltCreditNoteDetails.getAttribute("DAYS1").getString();

                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                rowData[44] = ObjFeltCreditNote.getSalesReturnDoc(ObjFeltCreditNoteDetails.getAttribute("CN_INV_PIECE_NO").getString());
                rowData[45] = EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getSalesReturnDate(ObjFeltCreditNoteDetails.getAttribute("CN_INV_PIECE_NO").getString()));

                DataModel.addRow(rowData);
            }

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(735, AmendID);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[8];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString()) + ObjFlow.getAttribute("ACTION_DATE").getString().substring(10, 19);
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();

            HashMap hmApprovalHistory = clsFeltCreditNote.getHistoryList(AmendDate, AmendID);
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltCreditNote ObjFeltCreditNote = (clsFeltCreditNote) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjFeltCreditNote.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFeltCreditNote.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getAttribute("ENTRY_DATE").getString());

                String ApprovalStatus = "";

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltCreditNote.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltCreditNote.getAttribute("REJECTED_REMARKS").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;

        CheckCNPrint();
    }

    private void FormatGrid() {
        try {
            cmdAdd.requestFocus();

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

            //Add Columns to it
            DataModel.addColumn("Sr. No."); //0
            DataModel.addColumn("Piece No");//1
            DataModel.addColumn("Invoice No");//2
            DataModel.addColumn("Invoice Date");///3
            DataModel.addColumn("Party Code");//4
            DataModel.addColumn("Party Name");//5
            DataModel.addColumn("Product Code");//6
            DataModel.addColumn("Product Group");//7
            DataModel.addColumn("Wight Sq Mtr");//8
            DataModel.addColumn("Basic/Gross Value ");//9
            DataModel.addColumn("Disc In Bill ");//10
            DataModel.addColumn("Year End Dis. % (Of Gross Basic)");//11
            DataModel.addColumn("Year End Dis. % (Rs)");//12
            DataModel.addColumn("Unadjusted Disc. In Bill % ");//13
            DataModel.addColumn("Unadjusted Disc. If Any ");//14
            DataModel.addColumn("Invoice Amount");//15
            DataModel.addColumn("Rate");//16
            DataModel.addColumn("Basic Value");//17
            DataModel.addColumn("Net Basic");//18
            DataModel.addColumn("OEM Disc 5%");//19
            DataModel.addColumn("OEM Disc 5% Value");//20
            DataModel.addColumn("Recd Amount");//21
            DataModel.addColumn("Ext1");//22
            DataModel.addColumn("Ext2");//23
            DataModel.addColumn("Ext3");//24
            DataModel.addColumn("Total Net Amount");//25
            DataModel.addColumn("Value Date");//26
            DataModel.addColumn("Amount");//27
            DataModel.addColumn("Voucher");//28
            DataModel.addColumn("F6");//29
            DataModel.addColumn("Sales Remarks");//30
            DataModel.addColumn("Audit Remarks");//31
            DataModel.addColumn("Insurance");//32
            DataModel.addColumn("CST");//33
            DataModel.addColumn("Excise");//34
            DataModel.addColumn("Year End Dis%");//35
            DataModel.addColumn("Year End Dis Rs");//36
            DataModel.addColumn("Undjested Dis%");//37
            DataModel.addColumn("Undjested Dis Rs");//38
            DataModel.addColumn("Oem Dis Rs");//39
            DataModel.addColumn("Compensation Amount");//40
            DataModel.addColumn("Goods Return Amount");//41
            DataModel.addColumn("Insurance Claim Amount");//42
            DataModel.addColumn("Days");//43

            //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
            DataModel.addColumn("Doc No of Sales/Goods Return");//44
            DataModel.addColumn("Date of Sales/Goods Return");//45

            DataModel.SetReadOnly(0);
            // DataModel.SetReadOnly(2);
            // DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(14);
            DataModel.SetReadOnly(15);
            DataModel.SetReadOnly(16);
            DataModel.SetReadOnly(17);
            DataModel.SetReadOnly(18);
            DataModel.SetReadOnly(19);
            DataModel.SetReadOnly(21);
            DataModel.SetReadOnly(24);
            DataModel.SetReadOnly(25);
            DataModel.SetReadOnly(26);
            DataModel.SetReadOnly(27);
            DataModel.SetReadOnly(28);
            DataModel.SetReadOnly(29);
            //DataModel.SetReadOnly(30);
            // DataModel.SetReadOnly(31);
            DataModel.SetReadOnly(32);
            DataModel.SetReadOnly(33);
            DataModel.SetReadOnly(34);
            DataModel.SetReadOnly(35);
            DataModel.SetReadOnly(36);
            DataModel.SetReadOnly(37);
            DataModel.SetReadOnly(38);
            DataModel.SetReadOnly(39);

            //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
            if (txtamendreasoncode.getText().matches("7")) {
                DataModel.SetReadOnly(1);
                DataModel.SetReadOnly(2);
                DataModel.SetReadOnly(3);
            }
            DataModel.SetReadOnly(44);
            DataModel.SetReadOnly(45);

            // ReasonResetReadonly();
            if (txtamendreasoncode.getText().matches("1") || txtamendreasoncode.getText().matches("2") || txtamendreasoncode.getText().matches("10") || txtamendreasoncode.getText().matches("11") || txtamendreasoncode.getText().matches("12")) {//23-05-2020//05-04-2021//07-04-2021
                Table.getColumnModel().getColumn(1).setMinWidth(0);
                Table.getColumnModel().getColumn(1).setMaxWidth(0);
                Table.getColumnModel().getColumn(6).setMinWidth(0);
                Table.getColumnModel().getColumn(6).setMaxWidth(0);
                Table.getColumnModel().getColumn(7).setMinWidth(0);
                Table.getColumnModel().getColumn(7).setMaxWidth(0);
                Table.getColumnModel().getColumn(8).setMinWidth(0);
                Table.getColumnModel().getColumn(8).setMaxWidth(0);
                Table.getColumnModel().getColumn(9).setMinWidth(0);
                Table.getColumnModel().getColumn(9).setMaxWidth(0);
                Table.getColumnModel().getColumn(10).setMinWidth(0);
                Table.getColumnModel().getColumn(10).setMaxWidth(0);
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
                Table.getColumnModel().getColumn(13).setMinWidth(0);
                Table.getColumnModel().getColumn(13).setMaxWidth(0);
                Table.getColumnModel().getColumn(14).setMinWidth(0);
                Table.getColumnModel().getColumn(14).setMaxWidth(0);
                Table.getColumnModel().getColumn(15).setMinWidth(0);
                Table.getColumnModel().getColumn(15).setMaxWidth(0);
                Table.getColumnModel().getColumn(16).setMinWidth(0);
                Table.getColumnModel().getColumn(16).setMaxWidth(0);
                Table.getColumnModel().getColumn(17).setMinWidth(0);
                Table.getColumnModel().getColumn(17).setMaxWidth(0);
                Table.getColumnModel().getColumn(18).setMinWidth(0);
                Table.getColumnModel().getColumn(18).setMaxWidth(0);
                Table.getColumnModel().getColumn(19).setMinWidth(0);
                Table.getColumnModel().getColumn(19).setMaxWidth(0);
                Table.getColumnModel().getColumn(20).setMinWidth(0);
                Table.getColumnModel().getColumn(20).setMaxWidth(0);
                Table.getColumnModel().getColumn(21).setMinWidth(0);
                Table.getColumnModel().getColumn(21).setMaxWidth(0);
                Table.getColumnModel().getColumn(22).setMinWidth(0);
                Table.getColumnModel().getColumn(22).setMaxWidth(0);
                Table.getColumnModel().getColumn(23).setMinWidth(0);
                Table.getColumnModel().getColumn(23).setMaxWidth(0);
                Table.getColumnModel().getColumn(24).setMinWidth(0);
                Table.getColumnModel().getColumn(24).setMaxWidth(0);
                Table.getColumnModel().getColumn(32).setMinWidth(0);
                Table.getColumnModel().getColumn(32).setMaxWidth(0);
                Table.getColumnModel().getColumn(33).setMinWidth(0);
                Table.getColumnModel().getColumn(33).setMaxWidth(0);
                Table.getColumnModel().getColumn(34).setMinWidth(0);
                Table.getColumnModel().getColumn(34).setMaxWidth(0);
                Table.getColumnModel().getColumn(35).setMinWidth(0);
                Table.getColumnModel().getColumn(35).setMaxWidth(0);
                Table.getColumnModel().getColumn(36).setMinWidth(0);
                Table.getColumnModel().getColumn(36).setMaxWidth(0);
                Table.getColumnModel().getColumn(37).setMinWidth(0);
                Table.getColumnModel().getColumn(37).setMaxWidth(0);
                Table.getColumnModel().getColumn(38).setMinWidth(0);
                Table.getColumnModel().getColumn(38).setMaxWidth(0);
                Table.getColumnModel().getColumn(39).setMinWidth(0);
                Table.getColumnModel().getColumn(39).setMaxWidth(0);
                Table.getColumnModel().getColumn(40).setMinWidth(0);
                Table.getColumnModel().getColumn(40).setMaxWidth(0);
                Table.getColumnModel().getColumn(41).setMinWidth(0);
                Table.getColumnModel().getColumn(41).setMaxWidth(0);
                Table.getColumnModel().getColumn(42).setMinWidth(0);
                Table.getColumnModel().getColumn(42).setMaxWidth(0);
                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                Table.getColumnModel().getColumn(44).setMinWidth(0);
                Table.getColumnModel().getColumn(44).setMaxWidth(0);
                Table.getColumnModel().getColumn(45).setMinWidth(0);
                Table.getColumnModel().getColumn(45).setMaxWidth(0);
            }

            if (txtamendreasoncode.getText().matches("3") || txtamendreasoncode.getText().matches("4") || txtamendreasoncode.getText().matches("5")) {

                Table.getColumnModel().getColumn(21).setMinWidth(0);
                Table.getColumnModel().getColumn(21).setMaxWidth(0);
                Table.getColumnModel().getColumn(22).setMinWidth(0);
                Table.getColumnModel().getColumn(22).setMaxWidth(0);
                Table.getColumnModel().getColumn(23).setMinWidth(0);
                Table.getColumnModel().getColumn(23).setMaxWidth(0);
                Table.getColumnModel().getColumn(24).setMinWidth(0);
                Table.getColumnModel().getColumn(24).setMaxWidth(0);
                Table.getColumnModel().getColumn(25).setMinWidth(0);
                Table.getColumnModel().getColumn(25).setMaxWidth(0);
                Table.getColumnModel().getColumn(26).setMinWidth(0);
                Table.getColumnModel().getColumn(26).setMaxWidth(0);
                Table.getColumnModel().getColumn(27).setMinWidth(0);
                Table.getColumnModel().getColumn(27).setMaxWidth(0);
                Table.getColumnModel().getColumn(28).setMinWidth(0);
                Table.getColumnModel().getColumn(28).setMaxWidth(0);
                Table.getColumnModel().getColumn(29).setMinWidth(0);
                Table.getColumnModel().getColumn(29).setMaxWidth(0);
                Table.getColumnModel().getColumn(30).setMinWidth(0);
                Table.getColumnModel().getColumn(30).setMaxWidth(0);
                Table.getColumnModel().getColumn(31).setMinWidth(0);
                Table.getColumnModel().getColumn(31).setMaxWidth(0);
                Table.getColumnModel().getColumn(32).setMinWidth(0);
                Table.getColumnModel().getColumn(32).setMaxWidth(0);
                Table.getColumnModel().getColumn(33).setMinWidth(0);
                Table.getColumnModel().getColumn(33).setMaxWidth(0);
                Table.getColumnModel().getColumn(34).setMinWidth(0);
                Table.getColumnModel().getColumn(34).setMaxWidth(0);
                Table.getColumnModel().getColumn(35).setMinWidth(0);
                Table.getColumnModel().getColumn(35).setMaxWidth(0);
                Table.getColumnModel().getColumn(36).setMinWidth(0);
                Table.getColumnModel().getColumn(36).setMaxWidth(0);
                Table.getColumnModel().getColumn(37).setMinWidth(0);
                Table.getColumnModel().getColumn(37).setMaxWidth(0);
                Table.getColumnModel().getColumn(38).setMinWidth(0);
                Table.getColumnModel().getColumn(38).setMaxWidth(0);
                Table.getColumnModel().getColumn(39).setMinWidth(0);
                Table.getColumnModel().getColumn(39).setMaxWidth(0);
                Table.getColumnModel().getColumn(40).setMinWidth(0);
                Table.getColumnModel().getColumn(40).setMaxWidth(0);
                Table.getColumnModel().getColumn(41).setMinWidth(0);
                Table.getColumnModel().getColumn(41).setMaxWidth(0);
                Table.getColumnModel().getColumn(42).setMinWidth(0);
                Table.getColumnModel().getColumn(42).setMaxWidth(0);
                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                Table.getColumnModel().getColumn(44).setMinWidth(0);
                Table.getColumnModel().getColumn(44).setMaxWidth(0);
                Table.getColumnModel().getColumn(45).setMinWidth(0);
                Table.getColumnModel().getColumn(45).setMaxWidth(0);

            }

            if (txtamendreasoncode.getText().matches("6")) {

                //Table.getColumnModel().getColumn(11).setMinWidth(0);
                //Table.getColumnModel().getColumn(11).setMaxWidth(0);
                // Table.getColumnModel().getColumn(12).setMinWidth(0);
                // Table.getColumnModel().getColumn(12).setMaxWidth(0);
                // Table.getColumnModel().getColumn(13).setMinWidth(0);
                // Table.getColumnModel().getColumn(13).setMaxWidth(0);
                // Table.getColumnModel().getColumn(14).setMinWidth(0);
                // Table.getColumnModel().getColumn(14).setMaxWidth(0);
                Table.getColumnModel().getColumn(17).setMinWidth(0);
                Table.getColumnModel().getColumn(17).setMaxWidth(0);
                Table.getColumnModel().getColumn(18).setMinWidth(0);
                Table.getColumnModel().getColumn(18).setMaxWidth(0);
                Table.getColumnModel().getColumn(19).setMinWidth(0);
                Table.getColumnModel().getColumn(19).setMaxWidth(0);
                Table.getColumnModel().getColumn(20).setMinWidth(0);
                Table.getColumnModel().getColumn(20).setMaxWidth(0);
                Table.getColumnModel().getColumn(21).setMinWidth(0);
                Table.getColumnModel().getColumn(21).setMaxWidth(0);
                Table.getColumnModel().getColumn(22).setMinWidth(0);
                Table.getColumnModel().getColumn(22).setMaxWidth(0);
                Table.getColumnModel().getColumn(23).setMinWidth(0);
                Table.getColumnModel().getColumn(23).setMaxWidth(0);
                Table.getColumnModel().getColumn(24).setMinWidth(0);
                Table.getColumnModel().getColumn(24).setMaxWidth(0);
                Table.getColumnModel().getColumn(25).setMinWidth(0);
                Table.getColumnModel().getColumn(25).setMaxWidth(0);
                Table.getColumnModel().getColumn(26).setMinWidth(0);
                Table.getColumnModel().getColumn(26).setMaxWidth(0);
                Table.getColumnModel().getColumn(27).setMinWidth(0);
                Table.getColumnModel().getColumn(27).setMaxWidth(0);
                Table.getColumnModel().getColumn(28).setMinWidth(0);
                Table.getColumnModel().getColumn(28).setMaxWidth(0);
                Table.getColumnModel().getColumn(29).setMinWidth(0);
                Table.getColumnModel().getColumn(29).setMaxWidth(0);
                Table.getColumnModel().getColumn(30).setMinWidth(0);
                Table.getColumnModel().getColumn(30).setMaxWidth(0);
                Table.getColumnModel().getColumn(31).setMinWidth(0);
                Table.getColumnModel().getColumn(31).setMaxWidth(0);
                Table.getColumnModel().getColumn(35).setMinWidth(0);
                Table.getColumnModel().getColumn(35).setMaxWidth(0);
                Table.getColumnModel().getColumn(36).setMinWidth(0);
                Table.getColumnModel().getColumn(36).setMaxWidth(0);
                Table.getColumnModel().getColumn(37).setMinWidth(0);
                Table.getColumnModel().getColumn(37).setMaxWidth(0);
                Table.getColumnModel().getColumn(38).setMinWidth(0);
                Table.getColumnModel().getColumn(38).setMaxWidth(0);
                Table.getColumnModel().getColumn(41).setMinWidth(0);
                Table.getColumnModel().getColumn(41).setMaxWidth(0);
                Table.getColumnModel().getColumn(42).setMinWidth(0);
                Table.getColumnModel().getColumn(42).setMaxWidth(0);
                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                Table.getColumnModel().getColumn(44).setMinWidth(0);
                Table.getColumnModel().getColumn(44).setMaxWidth(0);
                Table.getColumnModel().getColumn(45).setMinWidth(0);
                Table.getColumnModel().getColumn(45).setMaxWidth(0);
            }
            if (txtamendreasoncode.getText().matches("7")) {
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
                Table.getColumnModel().getColumn(13).setMinWidth(0);
                Table.getColumnModel().getColumn(13).setMaxWidth(0);
                Table.getColumnModel().getColumn(14).setMinWidth(0);
                Table.getColumnModel().getColumn(14).setMaxWidth(0);
                //  Table.getColumnModel().getColumn(15).setMinWidth(0);
                //  Table.getColumnModel().getColumn(15).setMaxWidth(0);
                Table.getColumnModel().getColumn(17).setMinWidth(0);
                Table.getColumnModel().getColumn(17).setMaxWidth(0);
                Table.getColumnModel().getColumn(18).setMinWidth(0);
                Table.getColumnModel().getColumn(18).setMaxWidth(0);
                Table.getColumnModel().getColumn(19).setMinWidth(0);
                Table.getColumnModel().getColumn(19).setMaxWidth(0);
                Table.getColumnModel().getColumn(20).setMinWidth(0);
                Table.getColumnModel().getColumn(20).setMaxWidth(0);
                Table.getColumnModel().getColumn(21).setMinWidth(0);
                Table.getColumnModel().getColumn(21).setMaxWidth(0);
                Table.getColumnModel().getColumn(22).setMinWidth(0);
                Table.getColumnModel().getColumn(22).setMaxWidth(0);
                Table.getColumnModel().getColumn(23).setMinWidth(0);
                Table.getColumnModel().getColumn(23).setMaxWidth(0);
                Table.getColumnModel().getColumn(24).setMinWidth(0);
                Table.getColumnModel().getColumn(24).setMaxWidth(0);
                Table.getColumnModel().getColumn(25).setMinWidth(0);
                Table.getColumnModel().getColumn(25).setMaxWidth(0);
                Table.getColumnModel().getColumn(26).setMinWidth(0);
                Table.getColumnModel().getColumn(26).setMaxWidth(0);
                Table.getColumnModel().getColumn(27).setMinWidth(0);
                Table.getColumnModel().getColumn(27).setMaxWidth(0);
                Table.getColumnModel().getColumn(28).setMinWidth(0);
                Table.getColumnModel().getColumn(28).setMaxWidth(0);
                Table.getColumnModel().getColumn(29).setMinWidth(0);
                Table.getColumnModel().getColumn(29).setMaxWidth(0);
                Table.getColumnModel().getColumn(30).setMinWidth(0);
                Table.getColumnModel().getColumn(30).setMaxWidth(0);

                Table.getColumnModel().getColumn(40).setMinWidth(0);
                Table.getColumnModel().getColumn(40).setMaxWidth(0);
                Table.getColumnModel().getColumn(42).setMinWidth(0);
                Table.getColumnModel().getColumn(42).setMaxWidth(0);
                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                Table.getColumnModel().getColumn(44).setMinWidth(100);
                Table.getColumnModel().getColumn(44).setMaxWidth(150);
                Table.getColumnModel().getColumn(45).setMinWidth(100);
                Table.getColumnModel().getColumn(45).setMaxWidth(150);
            }
            if (txtamendreasoncode.getText().matches("8")) {
                Table.getColumnModel().getColumn(11).setMinWidth(0);
                Table.getColumnModel().getColumn(11).setMaxWidth(0);
                Table.getColumnModel().getColumn(12).setMinWidth(0);
                Table.getColumnModel().getColumn(12).setMaxWidth(0);
                Table.getColumnModel().getColumn(13).setMinWidth(0);
                Table.getColumnModel().getColumn(13).setMaxWidth(0);
                Table.getColumnModel().getColumn(14).setMinWidth(0);
                Table.getColumnModel().getColumn(14).setMaxWidth(0);
                //Table.getColumnModel().getColumn(15).setMinWidth(0);
                /// Table.getColumnModel().getColumn(15).setMaxWidth(0);
                Table.getColumnModel().getColumn(17).setMinWidth(0);
                Table.getColumnModel().getColumn(17).setMaxWidth(0);
                Table.getColumnModel().getColumn(18).setMinWidth(0);
                Table.getColumnModel().getColumn(18).setMaxWidth(0);
                Table.getColumnModel().getColumn(19).setMinWidth(0);
                Table.getColumnModel().getColumn(19).setMaxWidth(0);
                Table.getColumnModel().getColumn(20).setMinWidth(0);
                Table.getColumnModel().getColumn(20).setMaxWidth(0);
                Table.getColumnModel().getColumn(21).setMinWidth(0);
                Table.getColumnModel().getColumn(21).setMaxWidth(0);
                Table.getColumnModel().getColumn(22).setMinWidth(0);
                Table.getColumnModel().getColumn(22).setMaxWidth(0);
                Table.getColumnModel().getColumn(23).setMinWidth(0);
                Table.getColumnModel().getColumn(23).setMaxWidth(0);
                Table.getColumnModel().getColumn(24).setMinWidth(0);
                Table.getColumnModel().getColumn(24).setMaxWidth(0);
                Table.getColumnModel().getColumn(25).setMinWidth(0);
                Table.getColumnModel().getColumn(25).setMaxWidth(0);
                Table.getColumnModel().getColumn(26).setMinWidth(0);
                Table.getColumnModel().getColumn(26).setMaxWidth(0);
                Table.getColumnModel().getColumn(27).setMinWidth(0);
                Table.getColumnModel().getColumn(27).setMaxWidth(0);
                Table.getColumnModel().getColumn(28).setMinWidth(0);
                Table.getColumnModel().getColumn(28).setMaxWidth(0);
                Table.getColumnModel().getColumn(29).setMinWidth(0);
                Table.getColumnModel().getColumn(29).setMaxWidth(0);
                Table.getColumnModel().getColumn(30).setMinWidth(0);
                Table.getColumnModel().getColumn(30).setMaxWidth(0);

                Table.getColumnModel().getColumn(40).setMinWidth(0);
                Table.getColumnModel().getColumn(40).setMaxWidth(0);
                Table.getColumnModel().getColumn(41).setMinWidth(0);
                Table.getColumnModel().getColumn(41).setMaxWidth(0);
                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                Table.getColumnModel().getColumn(44).setMinWidth(0);
                Table.getColumnModel().getColumn(44).setMaxWidth(0);
                Table.getColumnModel().getColumn(45).setMinWidth(0);
                Table.getColumnModel().getColumn(45).setMaxWidth(0);
            }

            if (EditMode != 0) {
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                        new ListSelectionListener() {
                            public void valueChanged(ListSelectionEvent e) {
                                int column = Table.getSelectedColumn();
                                String strVar = DataModel.getVariable(column);
                                //=============== Cell Editing Routine =======================//
                                Table.editCellAt(Table.getSelectedRow(), column);
                                if (Table.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) Table.getEditorComponent()).selectAll();
                                }
                                //============= Cell Editing Routine Ended =================//
                            }
                        });

                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();

                            //=========== Cell Update Prevention Check ===========//
                            String curValue = ((String) Table.getValueAt(row, column)).trim();
                            if (curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if (DoNotEvaluate) {
                                return;
                            }

                            //EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())
                            if (column == 1) {
//                                if(cmbOrderReason.getSelectedItem().equals("GOODS RETURN")){
//                                    if(column==2){
//                                        JOptionPane.showMessageDialog(null,"correct");
//                                    }
//                                }
//                                else{
                                String PieceNo = ((String) Table.getValueAt(row, 1)).trim();
                                Table.setValueAt(ObjFeltCreditNote.getInvoiceNo(PieceNo), row, 2);
                                Table.setValueAt(EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 3);
                                Table.setValueAt(ObjFeltCreditNote.getPartyCode(PieceNo), row, 4);
                                Table.setValueAt(ObjFeltCreditNote.getPartyName(PieceNo), row, 5);
                                Table.setValueAt(ObjFeltCreditNote.getProductCode(PieceNo), row, 6);
                                //Table.setValueAt(ObjFeltCreditNote.getProductGroup(ObjFeltCreditNote.getProductCode(PieceNo)), row, 7);
                                Table.setValueAt(ObjFeltCreditNote.getProductGroup(PieceNo), row, 7);
                                Table.setValueAt(ObjFeltCreditNote.getKGS(PieceNo), row, 8);
                                Table.setValueAt(ObjFeltCreditNote.getBasicValue(PieceNo), row, 9);
                                Table.setValueAt(ObjFeltCreditNote.getDisInBill(PieceNo), row, 10);
                                Table.setValueAt(ObjFeltCreditNote.getyearEndDisc(ObjFeltCreditNote.getPartyCode(PieceNo), ObjFeltCreditNote.getProductCode(PieceNo), ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 11);
                                Table.setValueAt(ObjFeltCreditNote.getUndjectedDisc(PieceNo), row, 13);
                                Table.setValueAt(ObjFeltCreditNote.getUndjectedDiscrs(PieceNo), row, 14);
                                Table.setValueAt(ObjFeltCreditNote.getInvoiceAmount(PieceNo), row, 15);
                                Table.setValueAt(ObjFeltCreditNote.getInsuranceRs(PieceNo), row, 32);
                                Table.setValueAt(ObjFeltCreditNote.getCST(PieceNo), row, 33);
                                Table.setValueAt(ObjFeltCreditNote.getExc(PieceNo), row, 34);
//                                Table.setValueAt(ObjFeltCreditNote.getYearEndd(PieceNo), row, 35);
                                Table.setValueAt(ObjFeltCreditNote.getYearEndd(ObjFeltCreditNote.getInvoiceNo(PieceNo), ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 35);
//                                Table.setValueAt(ObjFeltCreditNote.getYearEndDiscRs(PieceNo), row, 36);
                                Table.setValueAt(ObjFeltCreditNote.getYearEndDiscRs(ObjFeltCreditNote.getInvoiceNo(PieceNo), ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 36);
//                                Table.setValueAt(ObjFeltCreditNote.getUndjested(PieceNo), row, 37);
                                Table.setValueAt(ObjFeltCreditNote.getUndjested(ObjFeltCreditNote.getInvoiceNo(PieceNo), ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 37);
//                                Table.setValueAt(ObjFeltCreditNote.getUndjestediscRs(PieceNo), row, 38);
                                Table.setValueAt(ObjFeltCreditNote.getUndjestediscRs(ObjFeltCreditNote.getInvoiceNo(PieceNo), ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 38);
//                                Table.setValueAt(ObjFeltCreditNote.getOemDiscRs(PieceNo), row, 39);
                                Table.setValueAt(ObjFeltCreditNote.getOemDiscRs(ObjFeltCreditNote.getInvoiceNo(PieceNo), ObjFeltCreditNote.getInvoiceDate(PieceNo)), row, 39);

                                //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
                                if (txtamendreasoncode.getText().matches("7")) {
                                    Table.setValueAt(ObjFeltCreditNote.getSalesReturnDoc(PieceNo), row, 44);
                                    Table.setValueAt(EITLERPGLOBAL.formatDate(ObjFeltCreditNote.getSalesReturnDate(PieceNo)), row, 45);
                                }
//                                }
                            }

////                            if(column==2){
////                                    if(cmbOrderReason.getSelectedItem().equals("GOODS RETURN")){
////                                        //JOptionPane.showMessageDialog(null,"correct");
////                                        System.out.println("---------------------------1-------------------------------");
////                                    }
////                            }
                        }
                    }
                });

            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=735  AND D_COM_HIERARCHY.HIERARCHY_ID>3714");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=735 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(735, ObjFeltCreditNote.getAttribute("CN_ID").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(735, txtCnID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(735, txtCnID.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(735, txtCnID.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void SetupApproval() {

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(735, ObjFeltCreditNote.getAttribute("CN_ID").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(735, FromUserID, ObjFeltCreditNote.getAttribute("CN_ID").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(735, txtCnID.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8028, 80281)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8028, 80282)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8028, 80283)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8028, 80284)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;

        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }

        cmbOrderReason.setEnabled(true);

        EditMode = EITLERPGLOBAL.ADD;

        SetFields(true);
        DisableToolbar();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateCreditNoteCombo();
        ClearFields();
        SetupApproval();
        lblTitle.setBackground(Color.BLUE);
        txtCnDate.requestFocus();

        btnCNSumm.setVisible(false);
        btnCNDetail.setVisible(false);
        btnCNDraft.setVisible(false);
    }

    private void Edit() {

        String productionDocumentNo = (String) ObjFeltCreditNote.getAttribute("CN_ID").getObj();
        if (ObjFeltCreditNote.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;

            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            //ReasonResetReadonly();
            cmbOrderReason.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(735, productionDocumentNo)) {
                SetFields(true);

            } else {

                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltCreditNote.CanDelete(txtCnID.getText(), txtCnDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, ObjFeltCreditNote.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {

        String CnDate, CnFromDate, CnToDate, productionDocumentNo, CnType;

        int i = 0, j = 0;
        String PieceNo = "", CnID = "", PartyCode = "", Productcode = "", Partyname = "", progrupString = "";
        String SrNoString = "", InvoiceNoString = "", Invoice_DateString = "", SqrmtrString = "", InvoiceAmtString = "", groupString = "", excString = "";
        String RateString = "", YearEndDiscString = "", BasicValueString = "", UndjDiscString = "", OemDiscString = "", totalnetamtString = "", valuedateString = "", amountString = "", voucherString = "", f6String = "", salesString = "", auditString = "";
        String GrossValueString = "", DiscBillString = "", YearDiscRsString = "", UndjDiscRsString = "", OEMString = "", NetBasicString = "", RecdAmtString = "", Ext1String = "", Ext2String = "", Ext3String = "";
        String Cn_Type = "", CompString = "", GraString = "", insString = "", cstString = "", yearString = "", udjString = "", oemAString = "", udjdString = "", yeardString = "", unsclString = "", Days1String = "";

        //        int DeptID =  EITLERPGLOBAL.gUserDeptID;
        CnDate = txtCnDate.getText().trim();
        CnID = txtCnID.getText().trim();
        Cn_Type = Integer.toString(cmbOrderReason.getSelectedIndex());
        CnFromDate = txtfromdate.getText().trim();
        CnToDate = txttodate.getText().trim();

//        //Form level validations
//        if(CnDate.equals("") || !EITLERPGLOBAL.isDate(CnDate)) {
//            JOptionPane.showMessageDialog(frmFeltCreditNote.this,"Enter Valid UpdationDate.","Wrong Updation Date",JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//        
//        // check Production Date is Within Financial Year?
//        java.sql.Date FinFromDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
//        java.sql.Date FinToDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
//        java.sql.Date Cn_Date=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(CnDate));
//        if((Cn_Date.after(FinFromDate)||Cn_Date.compareTo(FinFromDate)==0)&&(Cn_Date.before(FinToDate)||Cn_Date.compareTo(FinToDate)==0)) {
//            //Within the year
//        }else {
//            JOptionPane.showMessageDialog(frmFeltCreditNote.this,"Updation Date is Not Within Financial Year.","FINANCIAL YEAR ERROR",JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//        
//        if(Cn_Date.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB()))>0) {
//            JOptionPane.showMessageDialog(frmFeltCreditNote.this,"Updation Date Must be Before or the Same Date as Today.","Wrong Production Date",JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            // JOptionPane.showMessageDialog(frmFeltCreditNote.this,"Enter Piece Updation Details Before Saving.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {

            ObjFeltCreditNote.hmFeltCreditNoteDetails.clear();

            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {

                // Piece no Validation before Saving
                j++;
                SrNoString = ((String) Table.getValueAt(i, 0)).trim();
                j++;
                PieceNo = ((String) Table.getValueAt(i, 1)).trim();
                j++;
                InvoiceNoString = ((String) Table.getValueAt(i, 2)).trim().toUpperCase();
                j++;
                Invoice_DateString = ((String) Table.getValueAt(i, 3)).trim();
                j++;
                PartyCode = ((String) Table.getValueAt(i, 4)).trim();
                j++;
                Partyname = ((String) Table.getValueAt(i, 5)).trim();
                j++;
                Productcode = ((String) Table.getValueAt(i, 6)).trim();
                j++;
                progrupString = ((String) Table.getValueAt(i, 7)).trim();
                j++;
                SqrmtrString = ((String) Table.getValueAt(i, 8)).trim();
                j++;
                GrossValueString = ((String) Table.getValueAt(i, 9)).trim();
                j++;
                DiscBillString = ((String) Table.getValueAt(i, 10)).trim();
                j++;
                YearEndDiscString = ((String) Table.getValueAt(i, 11)).trim();
                j++;
                YearDiscRsString = ((String) Table.getValueAt(i, 12)).trim();
                j++;
                UndjDiscString = ((String) Table.getValueAt(i, 13)).trim();
                j++;
                UndjDiscRsString = ((String) Table.getValueAt(i, 14)).trim();
                j++;
                InvoiceAmtString = ((String) Table.getValueAt(i, 15)).trim();
                j++;
                RateString = ((String) Table.getValueAt(i, 16)).trim();
                j++;
                BasicValueString = ((String) Table.getValueAt(i, 17)).trim();
                j++;
                NetBasicString = ((String) Table.getValueAt(i, 18)).trim();
                j++;
                OemDiscString = ((String) Table.getValueAt(i, 19)).trim();
                j++;
                OEMString = ((String) Table.getValueAt(i, 20)).trim();
                j++;
                RecdAmtString = ((String) Table.getValueAt(i, 21)).trim();
                j++;
                Ext1String = ((String) Table.getValueAt(i, 22)).trim();
                j++;
                Ext2String = ((String) Table.getValueAt(i, 23)).trim();
                j++;
                Ext3String = ((String) Table.getValueAt(i, 24)).trim();
                j++;
                totalnetamtString = ((String) Table.getValueAt(i, 25)).trim();
                j++;
                valuedateString = ((String) Table.getValueAt(i, 26)).trim();
                j++;
                amountString = ((String) Table.getValueAt(i, 27)).trim();
                j++;
                voucherString = ((String) Table.getValueAt(i, 28)).trim();
                j++;
                f6String = ((String) Table.getValueAt(i, 29)).trim();
                j++;
                salesString = ((String) Table.getValueAt(i, 30)).trim();
                j++;
                auditString = ((String) Table.getValueAt(i, 31)).trim();
                j++;
                insString = ((String) Table.getValueAt(i, 32)).trim();
                j++;
                cstString = ((String) Table.getValueAt(i, 33)).trim();
                j++;
                excString = ((String) Table.getValueAt(i, 34)).trim();
                j++;
                yeardString = ((String) Table.getValueAt(i, 35)).trim();
                j++;
                yearString = ((String) Table.getValueAt(i, 36)).trim();
                j++;
                udjdString = ((String) Table.getValueAt(i, 37)).trim();
                j++;
                udjString = ((String) Table.getValueAt(i, 38)).trim();
                j++;
                oemAString = ((String) Table.getValueAt(i, 39)).trim();
                j++;
                CompString = ((String) Table.getValueAt(i, 40)).trim();
                j++;
                GraString = ((String) Table.getValueAt(i, 41)).trim();
                j++;
                unsclString = ((String) Table.getValueAt(i, 42)).trim();
                j++;
                Days1String = ((String) Table.getValueAt(i, 43)).trim();

                if (Cn_Type.equals("6") && CompString.equals("")) {
                    JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Please Enter Compensation Amount.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (Cn_Type.equals("7") && GraString.equals("")) {
                    JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Please Enter GoodsReturn Amount.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (Cn_Type.equals("8") && unsclString.equals("")) {
                    JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Please Enter Insurance Amount.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                clsFeltCreditNoteDetails ObjFeltCreditNoteDetails = new clsFeltCreditNoteDetails();

                ObjFeltCreditNoteDetails.setAttribute("SR_NO", SrNoString);//0
                ObjFeltCreditNoteDetails.setAttribute("CN_INV_PIECE_NO", PieceNo);//1
                ObjFeltCreditNoteDetails.setAttribute("CN_INVOICE_NO", InvoiceNoString);//2
                ObjFeltCreditNoteDetails.setAttribute("CN_INVOICE_DATE", EITLERPGLOBAL.formatDateDB(Invoice_DateString));//3
                ObjFeltCreditNoteDetails.setAttribute("CN_PARTY_CODE", PartyCode);//4
                ObjFeltCreditNoteDetails.setAttribute("CN_PARTY_NAME", Partyname);///5
                ObjFeltCreditNoteDetails.setAttribute("CN_INV_PRODUCT_CODE", Productcode);//6
                ObjFeltCreditNoteDetails.setAttribute("CN_PRODUCT_GRUP", progrupString);//7
                ObjFeltCreditNoteDetails.setAttribute("CN_INV_WI_SQMTR", SqrmtrString);//8
                ObjFeltCreditNoteDetails.setAttribute("CN_GROSS_VALUE", GrossValueString);//9
                ObjFeltCreditNoteDetails.setAttribute("CN_DISC_BILL", DiscBillString);//10
                ObjFeltCreditNoteDetails.setAttribute("CN_YEAR_END_DISC", YearEndDiscString);//10
                ObjFeltCreditNoteDetails.setAttribute("CN_YEAR_END_DISC_RS", YearDiscRsString);//11
                ObjFeltCreditNoteDetails.setAttribute("CN_UNADJUSTED_DISC", UndjDiscString);//12
                ObjFeltCreditNoteDetails.setAttribute("CN_UNADJUSTED_RS", UndjDiscRsString);//13
                ObjFeltCreditNoteDetails.setAttribute("CN_INVOICE_AMT", InvoiceAmtString);//14
                ObjFeltCreditNoteDetails.setAttribute("CN_RATE", RateString);//15
                ObjFeltCreditNoteDetails.setAttribute("CN_BASIC_VALUE", BasicValueString);//16
                ObjFeltCreditNoteDetails.setAttribute("CN_NET_BASIC", NetBasicString);//17
                ObjFeltCreditNoteDetails.setAttribute("CN_OEM", OemDiscString);//18
                ObjFeltCreditNoteDetails.setAttribute("CN_OEM_VALUE", OEMString);//19
                ObjFeltCreditNoteDetails.setAttribute("CN_RECD_AMT", RecdAmtString);//20
                ObjFeltCreditNoteDetails.setAttribute("CN_EXT1", Ext1String);//21
                ObjFeltCreditNoteDetails.setAttribute("CN_EXT2", Ext2String);//22
                ObjFeltCreditNoteDetails.setAttribute("CN_EXT3", Ext3String);//23
                ObjFeltCreditNoteDetails.setAttribute("TOTAL_NET_AMOUNT", totalnetamtString);//24
                ObjFeltCreditNoteDetails.setAttribute("VALUE_DATE", valuedateString);//25
                ObjFeltCreditNoteDetails.setAttribute("AMOUNT", amountString);//26
                ObjFeltCreditNoteDetails.setAttribute("VOUCHER", voucherString);//27
                ObjFeltCreditNoteDetails.setAttribute("F6", f6String);//28
                ObjFeltCreditNoteDetails.setAttribute("SALES_REMARKS", salesString);//29
                ObjFeltCreditNoteDetails.setAttribute("AUDIT_REMARKS", auditString);//30
                ObjFeltCreditNoteDetails.setAttribute("INSURANCE", insString);//31
                ObjFeltCreditNoteDetails.setAttribute("CST", cstString);//32
                ObjFeltCreditNoteDetails.setAttribute("EXCISE_DUTY", excString);//33
                ObjFeltCreditNoteDetails.setAttribute("COM_YEAR_DISC", yeardString);//34
                ObjFeltCreditNoteDetails.setAttribute("COM_YEAR_AMT", yearString);//35
                ObjFeltCreditNoteDetails.setAttribute("COM_UDJ_DISC", udjdString);//36
                ObjFeltCreditNoteDetails.setAttribute("COM_UDJ_AMT", udjString);//37
                ObjFeltCreditNoteDetails.setAttribute("COM_OEM_AMT", oemAString);//38
                ObjFeltCreditNoteDetails.setAttribute("COMPENSATION_AMT", CompString);//39
                ObjFeltCreditNoteDetails.setAttribute("GOODS_RETURN_AMT", GraString);//40
                ObjFeltCreditNoteDetails.setAttribute("INSURANCE_CLAIM_AMT", unsclString);//41
                ObjFeltCreditNoteDetails.setAttribute("DAYS1", Days1String);//41

                ObjFeltCreditNote.hmFeltCreditNoteDetails.put(Integer.toString(ObjFeltCreditNote.hmFeltCreditNoteDetails.size() + 1), ObjFeltCreditNoteDetails);

            }
        } catch (Exception e) {

        };

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltCreditNote.setAttribute("CN_DATE", CnDate);
        ObjFeltCreditNote.setAttribute("CN_ID", CnID);
        ObjFeltCreditNote.setAttribute("CN_TYPE", Cn_Type);
        ObjFeltCreditNote.setAttribute("CN_FROM_DATE", CnFromDate);
        ObjFeltCreditNote.setAttribute("CN_TO_DATE", CnToDate);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltCreditNote.Insert()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Error occured while saving. Error is " + ObjFeltCreditNote.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltCreditNote.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(frmFeltCreditNote.this, "Error occured while saving editing. Error is " + ObjFeltCreditNote.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        Notification();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        cmbOrderReason.setEnabled(false);
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //Sets data to the Details Class Object
    private void SetData() {

        //-------- Update Approval Specific Fields -----------//
        ObjFeltCreditNote.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltCreditNote.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltCreditNote.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltCreditNote.setAttribute("REJECTED_REMARKS", txtToRemarks.getText().trim());
        ObjFeltCreditNote.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        if (OpgApprove.isSelected()) {
            ObjFeltCreditNote.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltCreditNote.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltCreditNote.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltCreditNote.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltCreditNote.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltCreditNote.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltCreditNote.setAttribute("CREATED_BY", (int) ObjFeltCreditNote.getAttribute("CREATED_BY").getVal());
            ObjFeltCreditNote.setAttribute("CREATED_DATE", ObjFeltCreditNote.getAttribute("CREATED_DATE").getString());
            ObjFeltCreditNote.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        cmbOrderReason.setEnabled(false);
    }

    // find details by production date
    public void Find(String AmendID) {
        ObjFeltCreditNote.Filter(" CN_ID='" + AmendID + "'");
        SetMenuForRights();
        DisplayData();
    }

    public void FindEx(int pCompanyID, String pPartyCode) {
        ObjFeltCreditNote.Filter(" CN_ID='" + pPartyCode + "'");
        //System.out.print("Party Code = "+pPartyCode);
        ObjFeltCreditNote.MoveLast();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {

        ObjFeltCreditNote.Filter(" CN_ID IN (SELECT  PRODUCTION.FELT_CN_TEMP_HEADER.CN_ID FROM  PRODUCTION.FELT_CN_TEMP_HEADER,PRODUCTION.FELT_PROD_DOC_DATA WHERE  PRODUCTION.FELT_CN_TEMP_HEADER.CN_ID=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND PRODUCTION.FELT_PROD_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W' AND MODULE_ID=735");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltCreditNote.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltCreditNote.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltCreditNote.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltCreditNote.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        Table.setEnabled(true);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }

    private void GenerateCreditNoteCombo() {

        HashMap hmAmendList = new HashMap();

        cmbOrderReasonModel = new EITLComboModel();
        cmbOrderReason.removeAllItems();
        cmbOrderReason.setModel(cmbOrderReasonModel);

        hmAmendList = clsFeltCreditNote.getCreditNoteList();
        for (int i = 1; i <= hmAmendList.size(); i++) {
            cmbOrderReasonModel.addElement((ComboData) hmAmendList.get(new Integer(i)));
        }
    }

    private void ReasonReadOnly() {
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(3);
        DataModel.SetReadOnly(4);
        DataModel.SetReadOnly(5);
        DataModel.SetReadOnly(6);
        DataModel.SetReadOnly(7);
        DataModel.SetReadOnly(8);
        DataModel.SetReadOnly(9);
        DataModel.SetReadOnly(10);
        DataModel.SetReadOnly(11);
        DataModel.SetReadOnly(12);
        DataModel.SetReadOnly(13);
        DataModel.SetReadOnly(14);
        DataModel.SetReadOnly(15);
        DataModel.SetReadOnly(16);
        DataModel.SetReadOnly(17);
        DataModel.SetReadOnly(18);
        DataModel.SetReadOnly(19);
        DataModel.SetReadOnly(20);
        DataModel.SetReadOnly(21);
        DataModel.SetReadOnly(22);
        DataModel.SetReadOnly(23);
        DataModel.SetReadOnly(24);
        DataModel.SetReadOnly(25);
        DataModel.SetReadOnly(26);
        DataModel.SetReadOnly(27);
        DataModel.SetReadOnly(28);
        DataModel.SetReadOnly(29);
        DataModel.SetReadOnly(30);
        DataModel.SetReadOnly(32);
        //Added on 15/05/2019 by GAURANG based on Change Request dated 08/05/2019
        DataModel.SetReadOnly(44);
        DataModel.SetReadOnly(45);

    }

    private boolean Validate() {
        //Form level validations

        if (txtfromdate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter from date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtfromdate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txttodate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter To date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txttodate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }

    private void ReportShow() {

        try {

            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CN_INVOICE_NO");
            objReportData.AddColumn("CN_INVOICE_DATE");
            objReportData.AddColumn("CN_PARTY_CODE");
            objReportData.AddColumn("CN_PARTY_NAME");
            objReportData.AddColumn("CN_INV_PIECE_NO");
            objReportData.AddColumn("CN_INV_PRODUCT_CODE");
            objReportData.AddColumn("CN_INV_WI_SQMTR");
            objReportData.AddColumn("CN_GROSS_VALUE");
            objReportData.AddColumn("CN_DISC_BILL");
            objReportData.AddColumn("CN_YEAR_END_DISC_RS");
            objReportData.AddColumn("CN_NET_BASIC");
            objReportData.AddColumn("CN_OEM_VALUE");
            objReportData.AddColumn("CN_UNADJUSTED_RS");
            objReportData.AddColumn("CN_OEM");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("SR_NO", "");
            objOpeningRow.setValue("INVOICE_NO", "");
            objOpeningRow.setValue("INVOICE_DATE", "");
            objOpeningRow.setValue("CN_PARTY_CODE", "");
            objOpeningRow.setValue("CN_PARTY_NAME", "");
            objOpeningRow.setValue("CN_INV_PIECE_NO", "");
            objOpeningRow.setValue("CN_INV_PRODUCT_CODE", "");
            objOpeningRow.setValue("CN_INV_WI_SQMTR", "");
            objOpeningRow.setValue("CN_GROSS_VALUE", "");
            objOpeningRow.setValue("CN_DISC_BILL", "");
            objOpeningRow.setValue("CN_YEAR_END_DISC_RS", "");
            objOpeningRow.setValue("CN_NET_BASIC", "");
            objOpeningRow.setValue("CN_OEM_VALUE", "");
            objOpeningRow.setValue("CN_UNADJUSTED_RS", "");
            objOpeningRow.setValue("CN_OEM", "");

            String strSQL = "SELECT * FROM PRODUCTION.FELT_CN_TEMP_DETAIL WHERE CN_ID='" + txtCnID.getText().trim() + "' ORDER BY SR_NO,CN_INVOICE_DATE,CN_INVOICE_NO";

            System.out.println(strSQL);
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();

                    objRow.setValue("SR_NO", UtilFunctions.getString(rsTmp, "SR_NO", ""));
                    objRow.setValue("CN_INVOICE_NO", UtilFunctions.getString(rsTmp, "CN_INVOICE_NO", ""));
                    objRow.setValue("CN_INVOICE_DATE", UtilFunctions.getString(rsTmp, "CN_INVOICE_DATE", ""));
                    objRow.setValue("CN_PARTY_CODE", UtilFunctions.getString(rsTmp, "CN_PARTY_CODE", ""));
                    objRow.setValue("CN_PARTY_NAME", UtilFunctions.getString(rsTmp, "CN_PARTY_NAME", ""));
                    objRow.setValue("CN_INV_PIECE_NO", UtilFunctions.getString(rsTmp, "CN_INV_PIECE_NO", ""));
                    objRow.setValue("CN_INV_PRODUCT_CODE", UtilFunctions.getString(rsTmp, "CN_INV_PRODUCT_CODE", ""));
                    objRow.setValue("CN_INV_WI_SQMTR", UtilFunctions.getString(rsTmp, "CN_INV_WI_SQMTR", ""));
                    objRow.setValue("CN_GROSS_VALUE", UtilFunctions.getString(rsTmp, "CN_GROSS_VALUE", ""));
                    objRow.setValue("CN_DISC_BILL", UtilFunctions.getString(rsTmp, "CN_DISC_BILL", ""));
                    objRow.setValue("CN_YEAR_END_DISC_RS", UtilFunctions.getString(rsTmp, "CN_YEAR_END_DISC_RS", ""));
                    objRow.setValue("CN_NET_BASIC", UtilFunctions.getString(rsTmp, "CN_NET_BASIC", ""));
                    objRow.setValue("CN_OEM_VALUE", UtilFunctions.getString(rsTmp, "CN_OEM_VALUE", ""));
                    objRow.setValue("CN_UNADJUSTED_RS", UtilFunctions.getString(rsTmp, "CN_UNADJUSTED_RS", ""));
                    objRow.setValue("CN_OEM", UtilFunctions.getString(rsTmp, "CN_OEM", ""));
                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;

            HashMap Parameters = new HashMap();
            Parameters.put("FROM_DATE", txtfromdate.getText().trim());
            Parameters.put("TO_DATE", txttodate.getText().trim());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptOEM.rpt", Parameters, objReportData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void GenerateData() {

        String chk = txtamendreasoncode.getText();
        String strSQL = null;
        ResultSet rsTmp = null;
        try {

            if (chk.matches("1")) {
                strSQL = "SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,VALUE_DATE,AMOUNT,VOUCHER,F6,SALES_REMARKS,AUDIT_REMARKS,DATEDIFF(VALUE_DATE,INVOICE_DATE) AS DAYS1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE F6='F' AND INVOICE_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND SUBSTRING(PAYMENT_TERM,1,1)='1' AND CONCAT(INVOICE_NO,INVOICE_DATE) NOT IN (SELECT CONCAT(CN_INVOICE_NO,SUBSTRING(CN_INVOICE_DATE,1,10)) FROM PRODUCTION.FELT_CN_TEMP_HEADER H, PRODUCTION.FELT_CN_TEMP_DETAIL D WHERE H.CN_ID=D.CN_ID AND H.CN_ID LIKE '%F6%' AND H.APPROVED=1 AND H.CANCELED=0)  ORDER BY INVOICE_NO";
            }
            if (chk.matches("2")) {
                strSQL = "SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,VALUE_DATE,AMOUNT,VOUCHER,F6,SALES_REMARKS,AUDIT_REMARKS,DATEDIFF(VALUE_DATE,INVOICE_DATE) AS DAYS1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE F6='D' AND INVOICE_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND CONCAT(INVOICE_NO,INVOICE_DATE) NOT IN (SELECT CONCAT(CN_INVOICE_NO,SUBSTRING(CN_INVOICE_DATE,1,10)) FROM PRODUCTION.FELT_CN_TEMP_HEADER H, PRODUCTION.FELT_CN_TEMP_DETAIL D WHERE H.CN_ID=D.CN_ID AND H.CN_ID LIKE '%DF%' AND H.APPROVED=1 AND H.CANCELED=0) ORDER BY INVOICE_NO";
            }
            //23-05-2020
            if (chk.matches("10")) {
                strSQL = "SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,VALUE_DATE,AMOUNT,VOUCHER,F6,SALES_REMARKS,AUDIT_REMARKS,DATEDIFF(VALUE_DATE,INVOICE_DATE) AS DAYS1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE F6='DH' AND INVOICE_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND CONCAT(INVOICE_NO,INVOICE_DATE) NOT IN (SELECT CONCAT(CN_INVOICE_NO,SUBSTRING(CN_INVOICE_DATE,1,10)) FROM PRODUCTION.FELT_CN_TEMP_HEADER H, PRODUCTION.FELT_CN_TEMP_DETAIL D WHERE H.CN_ID=D.CN_ID AND H.CN_ID LIKE '%DH%' AND H.APPROVED=1 AND H.CANCELED=0) ORDER BY INVOICE_NO";
            }
            ////
            //05-04-2021
            if (chk.matches("11")) {
                strSQL = "SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,VALUE_DATE,AMOUNT,VOUCHER,F6,SALES_REMARKS,AUDIT_REMARKS,DATEDIFF(VALUE_DATE,INVOICE_DATE) AS DAYS1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE F6='S' AND INVOICE_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND CONCAT(INVOICE_NO,INVOICE_DATE) NOT IN (SELECT CONCAT(CN_INVOICE_NO,SUBSTRING(CN_INVOICE_DATE,1,10)) FROM PRODUCTION.FELT_CN_TEMP_HEADER H, PRODUCTION.FELT_CN_TEMP_DETAIL D WHERE H.CN_ID=D.CN_ID AND H.CN_ID LIKE '%SP%' AND H.APPROVED=1 AND H.CANCELED=0) ORDER BY INVOICE_NO";
            }
            ////
            //07-04-2021
            if (chk.matches("12")) {
                strSQL = "SELECT F.INVOICE_NO,F.INVOICE_DATE,F.PARTY_CODE,F.PARTY_NAME,F.TOTAL_NET_AMOUNT,F.VALUE_DATE,F.AMOUNT,F.VOUCHER,F.F6,F.SALES_REMARKS,F.AUDIT_REMARKS,DATEDIFF(F.VALUE_DATE,F.INVOICE_DATE) AS DAYS1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL F, PRODUCTION.FELT_SAL_INVOICE_HEADER I WHERE F.INVOICE_NO=I.INVOICE_NO AND F.INVOICE_DATE=I.INVOICE_DATE AND COALESCE(F6,'')!='' AND I.PRODUCT_CODE IN (729000,729010) AND F.INVOICE_DATE>= '" + EITLERPGLOBAL.formatDateDB(txtfromdate.getText()) + "' AND F.INVOICE_DATE<='" + EITLERPGLOBAL.formatDateDB(txttodate.getText()) + "' AND CONCAT(F.INVOICE_NO,F.INVOICE_DATE) NOT IN (SELECT CONCAT(CN_INVOICE_NO,SUBSTRING(CN_INVOICE_DATE,1,10)) FROM PRODUCTION.FELT_CN_TEMP_HEADER H, PRODUCTION.FELT_CN_TEMP_DETAIL D WHERE H.CN_ID=D.CN_ID AND H.CN_ID LIKE '%SDF%' AND H.APPROVED=1 AND H.CANCELED=0) ORDER BY F.INVOICE_NO";
            }
            ////

            rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;

                    Object[] rowData = new Object[50];
                    rowData[0] = Counter + "";
                    rowData[2] = UtilFunctions.getString(rsTmp, "INVOICE_NO", "");
                    rowData[3] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "INVOICE_DATE", ""));
                    rowData[4] = UtilFunctions.getString(rsTmp, "PARTY_CODE", "");
                    rowData[5] = UtilFunctions.getString(rsTmp, "PARTY_NAME", "");
                    rowData[25] = UtilFunctions.getString(rsTmp, "TOTAL_NET_AMOUNT", "");
                    rowData[26] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "VALUE_DATE", ""));
                    rowData[27] = UtilFunctions.getString(rsTmp, "AMOUNT", "");
                    rowData[28] = UtilFunctions.getString(rsTmp, "VOUCHER", "");
                    rowData[29] = UtilFunctions.getString(rsTmp, "F6", "");
                    rowData[30] = UtilFunctions.getString(rsTmp, "SALES_REMARKS", "");
                    rowData[31] = UtilFunctions.getString(rsTmp, "AUDIT_REMARKS", "");
                    rowData[43] = UtilFunctions.getString(rsTmp, "DAYS1", "");

                    DataModel.addRow(rowData);
                    rsTmp.next();

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void CheckCNPrint() {
        if (data.IsRecordExist("SELECT DISTINCT CNH_YEAR_MON_ID FROM PRODUCTION.D_CREDIT_NOTE_HEADER WHERE CNH_YEAR_MON_ID LIKE ('%" + txtCnID.getText() + "%')")) {
            btnCNSumm.setVisible(true);
            btnCNDetail.setVisible(true);
            btnCNDraft.setVisible(true);
        } else {
            btnCNSumm.setVisible(false);
            btnCNDetail.setVisible(false);
            btnCNDraft.setVisible(false);
        }
    }

    private void Notification() {
        if (OpgApprove.isSelected() || OpgFinal.isSelected()) {
            try {

                int moduleId = 735;
                int userId = EITLERPGLOBAL.gNewUserID;
                int hierarchyId = SelHierarchyID;

                String cnNo = txtCnID.getText().trim();
                String cnDate = txtCnDate.getText().trim();
                String periodFrom = txtfromdate.getText().trim();
                String periodTo = txttodate.getText().trim();
                String cnName = txtamendreasonname.getText().trim();
                String cnReasonCd = txtamendreasoncode.getText().trim();

                System.out.println("Reason Code:" + cnReasonCd + ":");
                System.out.println("Reason Name:" + cnName + ":");

                String pSubject = "Notification : Felt Sales " + cnName + " Credit Note No : " + cnNo;
                String pMessage = "";
                String cc = "";

                if (!OpgFinal.isSelected()) {
                    pMessage = "<br>Felt Sales " + cnName + " Credit Note No : " + cnNo + " has been approve and forward by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                } else {
                    pMessage = "<br>Felt Sales " + cnName + " Credit Note No : " + cnNo + " has been final approved by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                }

                pMessage = pMessage + "<br>Credit Note No : " + cnNo + "";
                pMessage = pMessage + "<br>Credit Note Date : " + cnDate + "";
                pMessage = pMessage + "<br>Period Date : From " + periodFrom + "    To " + periodTo + "<br><br>";
                pMessage = pMessage + "<br>Credit Note Details as given below : ";

                if (cnReasonCd.equals("1") || cnReasonCd.equals("2") || cnReasonCd.equals("10") || cnReasonCd.equals("11") || cnReasonCd.equals("12")) {//23-05-2020//05-04-2021//07-04-2021
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Total Net Amount </th>"
                            + "<th align='center'> Value Date </th>"
                            + "<th align='center'> Amount </th>"
                            + "<th align='center'> Voucher </th>"
                            + "<th align='center'> F6 </th>"
                            + "<th align='center'> Sales Remark </th>"
                            + "<th align='center'> Audit Remark </th>"
                            + "<th align='center'> Days </th>"
                            + "</tr>";
                } else if (cnReasonCd.equals("3")) {
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Piece No </th>"
                            + "<th align='center'> Product Code </th>"
                            + "<th align='center'> Invoice Amount </th>"
                            + "<th align='center'> Taxable Amount </th>"
                            + "<th align='center'> Discount in Bill </th>"
                            + "<th align='center'> OEM Discount </th>"
                            + "</tr>";
                } else if (cnReasonCd.equals("3")) {
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Piece No </th>"
                            + "<th align='center'> Product Code </th>"
                            + "<th align='center'> Invoice Amount </th>"
                            + "<th align='center'> Taxable Amount </th>"
                            + "<th align='center'> Discount in Bill </th>"
                            + "<th align='center'> OEM Discount </th>"
                            + "</tr>";
                } else if (cnReasonCd.equals("4") || cnReasonCd.equals("5")) {
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Piece No </th>"
                            + "<th align='center'> Product Code </th>"
                            + "<th align='center'> Invoice Amount </th>"
                            + "<th align='center'> Taxable Amount </th>"
                            + "<th align='center'> Discount in Bill </th>"
                            + "</tr>";
                } else if (cnReasonCd.equals("6")) {
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Piece No </th>"
                            + "<th align='center'> Product Code </th>"
                            + "<th align='center'> Invoice Amount </th>"
                            + "<th align='center'> Taxable Amount </th>"
                            + "<th align='center'> Compensation Amount </th>"
                            + "</tr>";
                } else if (cnReasonCd.equals("7")) {
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Piece No </th>"
                            + "<th align='center'> Product Code </th>"
                            + "<th align='center'> Invoice Amount </th>"
                            + "<th align='center'> Taxable Amount </th>"
                            + "<th align='center'> Goods Return Amount </th>"
                            + "</tr>";
                } else if (cnReasonCd.equals("8")) {
                    pMessage = pMessage + "<table border='1'>"
                            + "<tr>"
                            + "<th align='center'> Sr No </th>"
                            + "<th align='center'> Party Code </th>"
                            + "<th align='center'> Party Name </th>"
                            + "<th align='center'> Invoice No </th>"
                            + "<th align='center'> Invoice Date </th>"
                            + "<th align='center'> Piece No </th>"
                            + "<th align='center'> Product Code </th>"
                            + "<th align='center'> Invoice Amount </th>"
                            + "<th align='center'> Taxable Amount </th>"
                            + "<th align='center'> Insurance Claim Amount </th>"
                            + "</tr>";
                }

                Connection Conn1;
                Statement stmt1;
                ResultSet rsData1;

                Conn1 = data.getConn();
                stmt1 = Conn1.createStatement();
                rsData1 = stmt1.executeQuery("SELECT * FROM  PRODUCTION.FELT_CN_TEMP_DETAIL WHERE CN_ID='" + cnNo + "'  ORDER BY CN_ID,SR_NO*1");
                rsData1.first();

                if (rsData1.getRow() > 0) {
                    while (!rsData1.isAfterLast()) {

                        if (cnReasonCd.equals("1") || cnReasonCd.equals("2") || cnReasonCd.equals("10") || cnReasonCd.equals("11") || cnReasonCd.equals("12")) {//23-05-2020//05-04-2021//07-04-2021
                            pMessage = pMessage + ""
                                    + "<tr>"
                                    + "<td align='center'> " + rsData1.getString("SR_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_NO") + " </td>"
                                    + "<td align='center'> " + EITLERPGLOBAL.formatDate(rsData1.getString("CN_INVOICE_DATE")) + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_NAME") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("TOTAL_NET_AMOUNT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("VALUE_DATE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("AMOUNT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("VOUCHER") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("F6") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("SALES_REMARKS") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("AUDIT_REMARKS") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("DAYS1") + " </td>"
                                    + "</tr>";
                        } else if (cnReasonCd.equals("3")) {
                            pMessage = pMessage + ""
                                    + "<tr>"
                                    + "<td align='center'> " + rsData1.getString("SR_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_NAME") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_NO") + " </td>"
                                    + "<td align='center'> " + EITLERPGLOBAL.formatDate(rsData1.getString("CN_INVOICE_DATE")) + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PIECE_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PRODUCT_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_AMT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_NET_BASIC") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_DISC_BILL") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_OEM_VALUE") + " </td>"
                                    + "</tr>";
                        } else if (cnReasonCd.equals("4") || cnReasonCd.equals("5")) {
                            pMessage = pMessage + ""
                                    + "<tr>"
                                    + "<td align='center'> " + rsData1.getString("SR_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_NAME") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_NO") + " </td>"
                                    + "<td align='center'> " + EITLERPGLOBAL.formatDate(rsData1.getString("CN_INVOICE_DATE")) + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PIECE_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PRODUCT_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_AMT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_NET_BASIC") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_DISC_BILL") + " </td>"
                                    + "</tr>";
                        } else if (cnReasonCd.equals("6")) {
                            pMessage = pMessage + ""
                                    + "<tr>"
                                    + "<td align='center'> " + rsData1.getString("SR_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_NAME") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_NO") + " </td>"
                                    + "<td align='center'> " + EITLERPGLOBAL.formatDate(rsData1.getString("CN_INVOICE_DATE")) + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PIECE_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PRODUCT_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_AMT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_NET_BASIC") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("COMPENSATION_AMT") + " </td>"
                                    + "</tr>";
                        } else if (cnReasonCd.equals("7")) {
                            pMessage = pMessage + ""
                                    + "<tr>"
                                    + "<td align='center'> " + rsData1.getString("SR_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_NAME") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_NO") + " </td>"
                                    + "<td align='center'> " + EITLERPGLOBAL.formatDate(rsData1.getString("CN_INVOICE_DATE")) + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PIECE_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PRODUCT_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_AMT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_NET_BASIC") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("GOODS_RETURN_AMT") + " </td>"
                                    + "</tr>";
                        } else if (cnReasonCd.equals("8")) {
                            pMessage = pMessage + ""
                                    + "<tr>"
                                    + "<td align='center'> " + rsData1.getString("SR_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_PARTY_NAME") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_NO") + " </td>"
                                    + "<td align='center'> " + EITLERPGLOBAL.formatDate(rsData1.getString("CN_INVOICE_DATE")) + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PIECE_NO") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INV_PRODUCT_CODE") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_INVOICE_AMT") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("CN_NET_BASIC") + " </td>"
                                    + "<td align='center'> " + rsData1.getString("INSURANCE_CLAIM_AMT") + " </td>"
                                    + "</tr>";
                        }

                        rsData1.next();
                    }
                }
                pMessage = pMessage + "</table>";

                pMessage = pMessage + "<br><br>All Approvers Remark as given below : ";

                pMessage += "<table border=1>";
                pMessage += "<tr><td align='center'><b> Sr.No </b></td>"
                        + "<td align='center'><b> User </b></td>"
                        + "<td align='center'><b> Date </b></td>"
                        + "<td align='center'><b> Status </b></td>"
                        + "<td align='center'><b> Remark </b></td>"
                        + "</tr>";

                HashMap hmApprovalHistory = clsFeltCreditNote.getHistoryList(cnDate, cnNo);
                for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                    pMessage += "<tr>";

                    clsFeltCreditNote ObjHistory = (clsFeltCreditNote) hmApprovalHistory.get(Integer.toString(i));
                    pMessage += "<td>" + Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal()) + "</td>";

                    pMessage += "<td>" + clsUser.getUserName(2, (int) ObjHistory.getAttribute("UPDATED_BY").getVal()) + "</td>";

                    pMessage += "<td>" + EITLERPGLOBAL.formatDate(ObjHistory.getAttribute("ENTRY_DATE").getString()) + "</td>";
                    String ApprovalStatus = "";

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                        ApprovalStatus = "Hold";
                    }

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                        ApprovalStatus = "Approved";
                    }

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                        ApprovalStatus = "Final Approved";
                    }

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                        ApprovalStatus = "Waiting";
                    }

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                        ApprovalStatus = "Rejected";
                    }

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                        ApprovalStatus = "Pending";
                    }

                    if ((ObjHistory.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                        ApprovalStatus = "Skiped";
                    }
                    pMessage += "<td>" + ApprovalStatus + "</td>";
                    pMessage += "<td>" + ObjHistory.getAttribute("REJECTED_REMARKS").getString() + "</td>";
                    pMessage += "</tr>";
                }
                pMessage += "</table>";
                pMessage += "<br>";

                HashMap hmSendToList;
                String recievers = "sdmlerp@dineshmills.com";

                pMessage = pMessage + "<br><br><br> : Email Send to : <br>";
                hmSendToList = clsHierarchy.getUserList(EITLERPGLOBAL.gCompanyID, hierarchyId, userId, true);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    int U_ID = ObjUser.getAttribute("USER_ID").getInt();

                    String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, U_ID);

                    System.out.println("USERID : " + U_ID + ", send_to : " + to);
                    if (!to.equals("")) {
                        recievers = recievers + "," + to;
                        pMessage = pMessage + "<br>" + ObjUser.getAttribute("USER_NAME").getString();
                    }
                }
                
                //recievers = recievers + ",vdshanbhag@dineshmills.com,manoj@dineshmills.com,atulshah@dineshmills.com,soumen@dineshmills.com";
                //Remove manoj@dineshmills.com by Dharmendra on 17-05-2019
                recievers = recievers + ",vdshanbhag@dineshmills.com,atulshah@dineshmills.com,soumen@dineshmills.com";
                cc = "aditya@dineshmills.com";

                pMessage = pMessage + "<br>vdshanbhag@dineshmills.com";
                //Remove manoj@dineshmills.com by Dharmendra on 17-05-2019
                //pMessage = pMessage + "<br>manoj@dineshmills.com";
                pMessage = pMessage + "<br>atulshah@dineshmills.com";
                pMessage = pMessage + "<br>soumen@dineshmills.com";

                pMessage = pMessage + "<br><br>**** This is an auto-generated email, please do not reply ****";// For Live
//                pMessage = pMessage + "<br><br>**** This is an auto-generated email from TEST SERVER, please do not reply ****"; //For Test

                System.out.println("Recivers : " + recievers);
                System.out.println("pSubject : " + pSubject);
                System.out.println("pMessage : " + pMessage);

                String responce = MailNotification.sendNotificationMail(moduleId, pSubject, pMessage, recievers, cc, hierarchyId);
                System.out.println("Send Mail Responce : " + responce);

            } catch (Exception e) {
                System.out.println("Error on Mail: " + e.getMessage());
            }
        }
    }

}
