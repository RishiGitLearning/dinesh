/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.Production.FeltCreditNote;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.FeltSales.Perfomainvoice.clsProforma;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsPartyMaster;
import EITLERP.Finance.clsVoucher;
import EITLERP.Sales.clsSalesInvoice;
import EITLERP.data;
import EITLERP.*;
import EITLERP.Finance.clsAccount;
//import TReportWriter.TReportEngine;
import TReportWriter.*;
import TReportWriter.SimpleDataProvider.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author root
 */
public class frmFeltCNSummaryList extends javax.swing.JApplet {

    private clsExcel_Exporter exp = new clsExcel_Exporter();
    private EITLTableModel DataModel;

    /**
     * Initializes the applet frmFeltInvPro
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmFeltInvPro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the applet */
//        try {
//            java.awt.EventQueue.invokeAndWait(new Runnable() {
//                public void run() {
//                    initComponents();
//                }
//            });
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
        setSize(666, 480);
        initComponents();
        file1.show(false);
        lblTitle.setForeground(Color.WHITE);
        jPanel2.setVisible(true);
        getDept();

        FormatGrid();
        GenerateData();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnProcess = new javax.swing.JButton();
        chkSelectAll = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        btnxls = new javax.swing.JButton();
        file1 = new javax.swing.JFileChooser();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("FELT CREDIT NOTE SUMMARY LIST");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 650, 25);

        jPanel2.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 640, 330);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 60, 640, 330);

        btnProcess.setText("Final Approve");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        getContentPane().add(btnProcess);
        btnProcess.setBounds(450, 400, 170, 30);

        chkSelectAll.setText("Select All");
        chkSelectAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkSelectAllMouseClicked(evt);
            }
        });
        getContentPane().add(chkSelectAll);
        chkSelectAll.setBounds(10, 33, 180, 23);

        jButton1.setText("Show CN Doc");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(250, 400, 160, 30);

        btnxls.setText("Excel To Export");
        btnxls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnxlsActionPerformed(evt);
            }
        });
        getContentPane().add(btnxls);
        btnxls.setBounds(40, 400, 170, 30);

        file1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file1ActionPerformed(evt);
            }
        });
        getContentPane().add(file1);
        file1.setBounds(260, 20, 220, 360);
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        String VoucherNo = "";
        String strSQL = "";
        String LoginId = data.getStringValueFromDB("SELECT LOGIN_ID FROM D_COM_USER_MASTER WHERE COMPANY_ID=" + Integer.toString(EITLERPGLOBAL.gCompanyID) + " AND USER_ID=" + EITLERPGLOBAL.gUserID);
        int cnt = 0;

        for (int i = 0; i < Table.getRowCount(); i++) {
            if (Table.getValueAt(i, 0).equals(true)) {
                cnt++;
            }
        }

        if (cnt == 0) {
            JOptionPane.showMessageDialog(this, "Please Select any Voucher for Final Approve.");
        } else {
            int conf = JOptionPane.showConfirmDialog(this, "Do You Want to Final Approve this Document.");
            if (conf == 0) {
                int fconf = JOptionPane.showConfirmDialog(this, "Are You Sure.");
                if (fconf == 0) {
                    for (int i = 0; i < Table.getRowCount(); i++) {
                        if (Table.getValueAt(i, 0).equals(true)) {
                            VoucherNo = Table.getValueAt(i, 2).toString();
                            //Set Approved Flag in Table Specified
                            strSQL = "UPDATE FINANCE.D_FIN_VOUCHER_HEADER SET APPROVED=1,APPROVED_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "',MODIFIED_BY='" + LoginId + "', MODIFIED_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "',CHANGED=1,CHANGED_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "' WHERE VOUCHER_NO='" + VoucherNo + "' AND COMPANY_ID=" + Integer.toString(EITLERPGLOBAL.gCompanyID);
                            System.out.println("Header Updation : " + strSQL);
                            data.Execute(strSQL);

                            //Insert Header History for User
                            strSQL = "INSERT INTO FINANCE.D_FIN_VOUCHER_HEADER_H (COMPANY_ID, REVISION_NO, UPDATED_BY, ENTRY_DATE, APPROVAL_STATUS, APPROVER_REMARKS, VOUCHER_NO, BOOK_CODE, CHEQUE_NO, CHEQUE_DATE, REALIZATION_DATE, CUSTOMER_BANK, BANK_NAME, ST_CATEGORY, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, REJECTED_REMARKS, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, HIERARCHY_ID, CHANGED, CHANGED_DATE, CANCELLED, REMARKS, VOUCHER_DATE, CHEQUE_AMOUNT, VOUCHER_TYPE, PAYMENT_MODE, LEGACY_NO, LEGACY_DATE, LINK_NO, EMP_NAME, REASON_CODE, EXCLUDE_IN_ADJ) "
                                    + "(SELECT COMPANY_ID, (REVISION_NO+1) AS REVISION_NO, '" + LoginId + "', '" + EITLERPGLOBAL.getCurrentDateDB() + "', 'F', '', VOUCHER_NO, BOOK_CODE, '', '0000-00-00', '0000-00-00', CUSTOMER_BANK, BANK_NAME, ST_CATEGORY, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, REJECTED_REMARKS, CREATED_BY, CREATED_DATE, '" + LoginId + "', '" + EITLERPGLOBAL.getCurrentDateDB() + "', HIERARCHY_ID, 1, '" + EITLERPGLOBAL.getCurrentDateDB() + "', CANCELLED, REMARKS, VOUCHER_DATE, CHEQUE_AMOUNT, VOUCHER_TYPE, PAYMENT_MODE, LEGACY_NO, LEGACY_DATE, LINK_NO, EMP_NAME, REASON_CODE, EXCLUDE_IN_ADJ FROM FINANCE.D_FIN_VOUCHER_HEADER_H WHERE VOUCHER_NO='" + VoucherNo + "' ORDER BY REVISION_NO DESC LIMIT 1) ";
                            System.out.println("Header History Insertion : " + strSQL);
                            data.Execute(strSQL);

                            //Set the A Flag for From User ID
                            strSQL = "UPDATE DINESHMILLS.D_COM_DOC_DATA SET STATUS='F',ACTION_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "',CHANGED=1,CHANGED_DATE='" + EITLERPGLOBAL.getCurrentDateDB() + "' WHERE COMPANY_ID=" + Integer.toString(EITLERPGLOBAL.gCompanyID) + " AND DOC_NO='" + VoucherNo + "' AND USER_ID=" + EITLERPGLOBAL.gNewUserID;
                            System.out.println("Doc Updation : " + strSQL);
                            data.Execute(strSQL);
                        }
                    }
                    btnProcess.setVisible(false);
                    FormatGrid();
                    GenerateData();
                } else {
                    JOptionPane.showMessageDialog(this, "Documents has not been Final Approve.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Documents has not been Final Approve.");
            }
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void chkSelectAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkSelectAllMouseClicked
        // TODO add your handling code here:
        if (chkSelectAll.isSelected()) {
            for (int c = 0; c < Table.getRowCount(); c++) {
                Table.getModel().setValueAt(true, c, 0);
            }
        } else {
            for (int c = 0; c < Table.getRowCount(); c++) {
                Table.getModel().setValueAt(false, c, 0);
            }
        }
    }//GEN-LAST:event_chkSelectAllMouseClicked

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        int chkCount = 0;
        for (int a = 0; a < Table.getRowCount(); a++) {
            if (Table.getValueAt(a, 0).equals(true)) {
                chkCount++;
            }
        }
        if (chkCount == Table.getRowCount()) {
            chkSelectAll.setSelected(true);
        } else {
            chkSelectAll.setSelected(false);
        }
    }//GEN-LAST:event_TableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (Table.getRowCount() > 0 && Table.getSelectedRow() >= 0) {
            String VoucherNo = (String) Table.getValueAt(Table.getSelectedRow(), 2);
            clsVoucher.OpenVoucher(VoucherNo, new frmPendingApprovals());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnxlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnxlsActionPerformed
        // TODO add your handling code here:
        try {
            File file = null;
            file1.setVisible(true);
            int returnVal = file1.showSaveDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "Credit Note Summary List");

            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file.toString() + " successfully ...", "Message",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnxlsActionPerformed

    private void file1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_file1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnxls;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkSelectAll;
    private javax.swing.JFileChooser file1;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables

    private void FormatGrid() {
        try {

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            Table.setAutoResizeMode(0);

            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            //Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModel.addColumn("Select"); //0 - Read Only
            DataModel.addColumn("Sr No"); //
            DataModel.addColumn("Voucher No"); //
            DataModel.addColumn("Voucher Date"); //
            DataModel.addColumn("Main Account Code");
//            DataModel.addColumn("Main Account Name");
            DataModel.addColumn("Sub Account Code"); //
            DataModel.addColumn("Sub Account Name"); //
            DataModel.addColumn("Amount");
            DataModel.addColumn("Remark");

            Renderer.setCustomComponent(0, "CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

            for (int j = 1; j < Table.getColumnCount(); j++) {
                DataModel.SetReadOnly(j);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void GenerateData() {
        String strSQL = "";
        try {

            strSQL += "SELECT VOUCHER_NO,VOUCHER_DATE,RH,MAC,SAB,SUM(AMT) AS TAMT FROM ( "
                    + "SELECT H.VOUCHER_NO,H.VOUCHER_DATE,H.REMARKS AS RH,D.REMARKS AS RD, "
                    + "MAX(COALESCE(CASE WHEN  EFFECT ='C' THEN MAIN_ACCOUNT_CODE END,0)) AS MAC, "
                    + "MAX(COALESCE(CASE WHEN SUB_ACCOUNT_CODE !='' THEN SUB_ACCOUNT_CODE END,0)) AS SAB, "
                    + "SUM(COALESCE(CASE WHEN  EFFECT ='C'THEN AMOUNT END,0)) AS AMT, "
                    + "MAX(COALESCE(CASE WHEN  INVOICE_NO !='' THEN INVOICE_NO END,0)) AS INVOICE_NO, "
                    + "MAX(COALESCE(CASE WHEN  INVOICE_NO !='' THEN INVOICE_DATE END,0)) AS INVOICE_DATE "
                    + "FROM FINANCE.D_FIN_VOUCHER_HEADER H, FINANCE.D_FIN_VOUCHER_DETAIL D "
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO "
                    + "AND EFFECT='C' "
                    + "AND H.VOUCHER_NO IN ( SELECT DISTINCT H.VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_HEADER H, FINANCE.D_FIN_VOUCHER_DETAIL D, DINESHMILLS.D_COM_DOC_DATA C "
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO AND H.VOUCHER_NO=C.DOC_NO AND C.USER_ID=243 AND C.STATUS='W' "
                    + "AND H.APPROVED =0 AND H.CANCELLED =0 "
                    + "AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('CN','FE')  AND BOOK_CODE IN (14,17,7) "
                    + "AND MAIN_ACCOUNT_CODE IN (210010) ) "
                    + "GROUP BY H.VOUCHER_NO ,H.VOUCHER_DATE,H.REMARKS,D.REMARKS ) AS M "
                    + "GROUP BY VOUCHER_NO "
                    + "ORDER BY VOUCHER_DATE,VOUCHER_NO";

//            System.out.println(strSQL);
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();
            int Counter = 0;
            double tAmt = 0;
            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    Object[] rowData = new Object[20];

                    rowData[1] = Counter;
                    rowData[2] = UtilFunctions.getString(rsTmp, "VOUCHER_NO", "");
                    rowData[3] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "VOUCHER_DATE", ""));
                    rowData[4] = UtilFunctions.getString(rsTmp, "MAC", "");
//                    String MainAccountName = clsAccount.getAccountName(UtilFunctions.getString(rsTmp, "MAC", ""), "");
//                    rowData[4] = MainAccountName;
                    rowData[5] = UtilFunctions.getString(rsTmp, "SAB", "");
                    String PartyName = clsPartyMaster.getAccountName(UtilFunctions.getString(rsTmp, "MAC", ""), UtilFunctions.getString(rsTmp, "SAB", ""));
                    rowData[6] = PartyName;
                    rowData[7] = UtilFunctions.getDouble(rsTmp, "TAMT", 0);
                    tAmt += UtilFunctions.getDouble(rsTmp, "TAMT", 0);
                    rowData[8] = UtilFunctions.getString(rsTmp, "RH", "");
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
                Object[] rowData = new Object[20];
                rowData[1] = "";
                rowData[2] = "";
                rowData[3] = "";
                rowData[4] = "";
                rowData[5] = "";
                rowData[6] = "TOTAL : ";
                rowData[7] = tAmt;
                rowData[8] = "";
                DataModel.addRow(rowData);

                final TableColumnModel columnModel = Table.getColumnModel();
                for (int column = 0; column < Table.getColumnCount(); column++) {
                    int width = 100; // Min width
                    for (int row = 0; row < Table.getRowCount(); row++) {
                        TableCellRenderer renderer = Table.getCellRenderer(row, column);
                        Component comp = Table.prepareRenderer(renderer, row, column);
                        width = Math.max(comp.getPreferredSize().width + 1, width);
                    }
                    if (width > 300) {
                        width = 300;
                    }
                    columnModel.getColumn(column).setPreferredWidth(width);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void getDept() {
        if (EITLERPGLOBAL.gUserID == 243) {
            btnProcess.setEnabled(true);
            btnProcess.setVisible(true);
        } else {
            btnProcess.setEnabled(false);
            btnProcess.setVisible(false);
        }
    }
}
