/*
 *
 * Created on June 14, 2004, 3:00 PM
 */
package EITLERP.Production;

import EITLERP.Production.ReportUI.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import java.lang.*;
import javax.swing.text.*;
import EITLERP.Finance.*;
import java.sql.*;
import java.lang.String;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;
import java.math.*;

import EITLERP.Stores.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import EITLERP.Purchase.*;
import java.math.BigDecimal;

//import EITLERP.Purchase.frmSendMail;
public class frmTLcut extends javax.swing.JApplet {

    private int EditMode = 0;

    private clsTLcut ObjTLcut;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;

    private EITLTableModel DataModelDesc;
    private EITLTableModel DataModelDiscount;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelHS;
    private EITLTableModel DataModelOtherpartyDiscount;

    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer Paint = new EITLTableCellRenderer();

    private EITLTableModel DataModelD;
    private EITLTableModel DataModelO;
    private EITLTableModel DataModelSC;
    private EITLTableModel DataModelMainCode;

    private HashMap colVariables = new HashMap();
    private HashMap colVariables_H = new HashMap();
    //clsColumn ObjColumn=new clsColumn();

    private boolean Updating = false;
    private boolean Updating_H = false;
    private boolean DoNotEvaluate = false;

    private EITLComboModel cmbPriorityModel;

    private boolean HistoryView = false;
    private String theDocNo = "";
    public frmPendingApprovals frmPA;
    private int charge09index = 0;
    private EITLTableCellRenderer Rend = new EITLTableCellRenderer();
    private clsExcel_Exporter exp = new clsExcel_Exporter();
    String cellLastValue = "";

    /**
     * Creates new form frmSalesParty
     */
    public frmTLcut() {
        System.gc();
        setSize(800, 700);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ExporttoExcelFileChooser.show(false);

        ObjTLcut = new clsTLcut();

        if (ObjTLcut.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjTLcut.MoveLast();
            DisplayData();

        } else {
            JOptionPane.showMessageDialog(null, "Error occured while loading data.   Error is " + ObjTLcut.LastError);
        }

        DataModelDesc.TableReadOnly(true);
        DataModelD.TableReadOnly(true);
        SetFields(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtdocno = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtdt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtfile = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtqlt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtshd = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtlenfrom = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtlento = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Pieces = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectedpieces = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        ExporttoExcelFileChooser = new javax.swing.JFileChooser();
        cmdselect = new javax.swing.JButton();
        ExportData = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmdview = new javax.swing.JButton();
        cmdclear = new javax.swing.JButton();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText(" Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save Record");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel Record");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("TL CUT PIECE[S]");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 800, 25);

        lblStatus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(0, 0, 255));
        lblStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(20, 640, 610, 20);

        jLabel1.setText("Document No.");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 80, 80, 20);

        txtdocno.setEditable(false);
        getContentPane().add(txtdocno);
        txtdocno.setBounds(90, 80, 90, 20);

        jLabel2.setText("Date:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(200, 80, 40, 20);

        txtdt.setEditable(false);
        getContentPane().add(txtdt);
        txtdt.setBounds(260, 80, 100, 20);

        jLabel3.setText("File Name :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(380, 80, 70, 20);
        getContentPane().add(txtfile);
        txtfile.setBounds(460, 80, 100, 20);

        jLabel6.setText("Quality Code :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 110, 80, 20);
        getContentPane().add(txtqlt);
        txtqlt.setBounds(90, 110, 90, 20);

        jLabel7.setText("Shade");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(200, 110, 40, 14);
        getContentPane().add(txtshd);
        txtshd.setBounds(260, 110, 70, 20);

        jLabel8.setText("Length From :");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 140, 80, 20);
        getContentPane().add(txtlenfrom);
        txtlenfrom.setBounds(90, 140, 90, 20);

        jLabel9.setText("Length To :");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(190, 140, 70, 20);
        getContentPane().add(txtlento);
        txtlento.setBounds(260, 140, 90, 20);

        Pieces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(Pieces);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 180, 720, 130);

        selectedpieces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        selectedpieces.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                selectedpiecesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(selectedpieces);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 350, 720, 130);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("SELECTED PIECE[S]");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(300, 330, 160, 17);
        getContentPane().add(ExporttoExcelFileChooser);
        ExporttoExcelFileChooser.setBounds(190, 210, 340, 260);

        cmdselect.setText("SELECT");
        cmdselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdselectActionPerformed(evt);
            }
        });
        getContentPane().add(cmdselect);
        cmdselect.setBounds(590, 310, 130, 30);

        ExportData.setText("EXPORT TO EXCEL");
        ExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportDataActionPerformed(evt);
            }
        });
        getContentPane().add(ExportData);
        ExportData.setBounds(580, 480, 150, 30);

        jLabel5.setText("Select Piece and Press F2 for Delete...");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 480, 250, 14);

        cmdview.setText("View");
        cmdview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdviewActionPerformed(evt);
            }
        });
        getContentPane().add(cmdview);
        cmdview.setBounds(450, 133, 130, 30);

        cmdclear.setText("Clear");
        cmdclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdclearActionPerformed(evt);
            }
        });
        getContentPane().add(cmdclear);
        cmdclear.setBounds(590, 133, 100, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        //ObjColumn.Close();
        ObjTLcut.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void ExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportDataActionPerformed
        // TODO add your handling code here:
        try {
            File file;
            ExporttoExcelFileChooser.show(true);
            ExporttoExcelFileChooser.setDialogTitle("Enter Excel File Name");
            ExporttoExcelFileChooser.setFileSelectionMode(JFileChooser.APPROVE_OPTION);
            int returnVal = ExporttoExcelFileChooser.showSaveDialog(frmTLcut.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = ExporttoExcelFileChooser.getSelectedFile();
                exp.fillData(selectedpieces, new File(file + ".xls"), "TL PIECES");
                JOptionPane.showMessageDialog(null, " Excel File Saved at : " + file + ".xls", "Message", JOptionPane.INFORMATION_MESSAGE);
            }
            ExporttoExcelFileChooser.show(false);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportDataActionPerformed

    private void cmdviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdviewActionPerformed
        // TODO add your handling code here:
        String sql = "", condition = "";
        sql = "SELECT * FROM PRODUCTION.SUITING_PIECE_REGISTER ";
        condition = "WHERE ST_FLAG_1 IN ('F','R','S') ";
        if (txtqlt.getText().trim().length() > 0) {
            condition = condition + " AND QUALITY_ID LIKE '%" + txtqlt.getText().substring(1) + "%'";
        }
        if (txtshd.getText().trim().length() > 0) {
            condition = condition + " AND SHADE LIKE '%" + txtshd.getText() + "%'";
        }
        if (txtlenfrom.getText().trim().length() > 0) {
            condition = condition + " AND NET_MTR>=" + txtlenfrom.getText();
        }
        if (txtlento.getText().trim().length() > 0) {
            condition = condition + " AND NET_MTR<=" + txtlento.getText();
        }
        sql = sql + condition;
        System.out.println(sql);
        ResultSet rs = null;
        rs = data.getResult(sql, "jdbc:mysql://200.0.0.227:3306/PRODUCTION?zeroDateTimeBehavior=convertToNull");
        try {
            int i = 1;
            FormatGrid();
            rs.first();

            while (!rs.isAfterLast()) {
                clsTLcutItem ObjItem = (clsTLcutItem) ObjTLcut.colMRItems.get(Integer.toString(i));
                Object[] rowData = new Object[30];

                rowData[0] = Integer.toString(i);
                rowData[1] = rs.getString("QUALITY_ID");
                rowData[2] = rs.getString("SHADE");
                rowData[3] = rs.getString("PIECE_NO");
                rowData[4] = EITLERPGLOBAL.formatDate(rs.getString("RCVD_DATE"));
                rowData[5] = rs.getString("FLAG_CD");
                rowData[6] = rs.getString("RACK_NO");
                rowData[7] = rs.getString("NET_MTR");
                rowData[8] = rs.getString("BRAND");
                rowData[9] = false;
                DataModelDesc.addRow(rowData);
                rs.next();
                i++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdviewActionPerformed

    private void cmdselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdselectActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < Pieces.getRowCount(); i++) {
            if (Pieces.getValueAt(i, 9).toString().equalsIgnoreCase("true")) {
                clsTLcutItem ObjItem = (clsTLcutItem) ObjTLcut.colMRItems.get(Integer.toString(i));
                Object[] rowData = new Object[30];

                rowData[1] = Pieces.getValueAt(i, 1).toString();
                rowData[2] = Pieces.getValueAt(i, 2).toString();
                rowData[3] = Pieces.getValueAt(i, 3).toString();
                rowData[4] = (Pieces.getValueAt(i, 4).toString());
                rowData[5] = Pieces.getValueAt(i, 5).toString();
                rowData[6] = Pieces.getValueAt(i, 6).toString();
                rowData[7] = Pieces.getValueAt(i, 7).toString();
                rowData[8] = Pieces.getValueAt(i, 8).toString();

                DataModelD.addRow(rowData);
            }
        }
        UpdateSrNo();
        ClearSelectedPiece();
    }//GEN-LAST:event_cmdselectActionPerformed

    private void selectedpiecesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectedpiecesKeyPressed
        // TODO add your handling code here:
        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            if (evt.getKeyCode() == 113) {//F2 Press
                DataModelD.removeRow(selectedpieces.getSelectedRow());
            }
        }
    }//GEN-LAST:event_selectedpiecesKeyPressed

    private void cmdclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdclearActionPerformed
        // TODO add your handling code here:
        txtqlt.setText("");
        txtshd.setText("");
        txtlenfrom.setText("");
        txtlento.setText("");
    }//GEN-LAST:event_cmdclearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExportData;
    private javax.swing.JFileChooser ExporttoExcelFileChooser;
    private javax.swing.JTable Pieces;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdclear;
    private javax.swing.JButton cmdselect;
    private javax.swing.JButton cmdview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable selectedpieces;
    private javax.swing.JTextField txtdocno;
    private javax.swing.JTextField txtdt;
    private javax.swing.JTextField txtfile;
    private javax.swing.JTextField txtlenfrom;
    private javax.swing.JTextField txtlento;
    private javax.swing.JTextField txtqlt;
    private javax.swing.JTextField txtshd;
    // End of variables declaration//GEN-END:variables

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//        
        //Now Generate new document no.
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        //Display newly generated document no.
        txtdocno.setText("TL" + String.valueOf(100000 + data.getIntValueFromDB("SELECT (COALESCE(MAX(RIGHT(DOC_NO,5)),0))+1 AS TLDOC FROM PRODUCTION.TL_CUT")).substring(1));
        txtdt.setText(EITLERPGLOBAL.getCurrentDate());
        txtfile.requestFocus();
    }

    private void SetFields(boolean pStat) {
        txtdocno.setEnabled(pStat);
        txtdt.setEnabled(pStat);
        txtfile.setEnabled(pStat);
        txtqlt.setEnabled(pStat);
        txtshd.setEnabled(pStat);
        txtlenfrom.setEnabled(pStat);
        txtlento.setEnabled(pStat);
        cmdview.setEnabled(pStat);
        cmdselect.setEnabled(pStat);
    }

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);

    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void ClearFields() {
        txtfile.setText("");
        txtqlt.setText("");
        txtshd.setText("");
        txtlenfrom.setText("");
        txtlento.setText("");
        FormatGrid();
        FormatGridS();

    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        EditMode = EITLERPGLOBAL.EDIT;

        //---New Change ---//
        DisplayData();
        DisableToolbar();
        SetFields(true);
        txtfile.setEnabled(false);
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = (String) ObjTLcut.getAttribute("DOC_NO").getObj();

        if (ObjTLcut.Delete(EITLERPGLOBAL.gNewUserID)) {
            MoveLast();
        } else {
            JOptionPane.showMessageDialog(null, "Error occured while deleting.  Error is " + ObjTLcut.LastError);
        }

    }

    private void Save() {
        //Form level validations
        if (txtfile.getText().trim().length() <= 0) {
            JOptionPane.showMessageDialog(null, "Please Enter File Name...");
            return;
        }

        //Check the no. of items
        if (selectedpieces.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter some Piece[s].");
            return;
        }

        SetData();
        if (EditMode == EITLERPGLOBAL.ADD) {

            if (ObjTLcut.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving.  Error is " + ObjTLcut.LastError);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjTLcut.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving.  Error is " + ObjTLcut.LastError);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();

        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);

        EnableToolbar();

    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Production.frmTLcutFind", true);
        frmTLcutFind ObjReturn = (frmTLcutFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!ObjTLcut.Filter(ObjReturn.stringFindQuery)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveFirst();
        }
    }

    private void MoveFirst() {
        ObjTLcut.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjTLcut.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjTLcut.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjTLcut.MoveLast();
        DisplayData();
    }

    //Didplay data on the Screen
    private void DisplayData() {
        try {
            ClearFields();
            // boolean bState = false;

            txtfile.setText((String) ObjTLcut.getAttribute("FILE_NAME").getObj());
            txtdocno.setText((String) ObjTLcut.getAttribute("DOC_NO").getObj());
            txtdt.setText(EITLERPGLOBAL.formatDate((String) ObjTLcut.getAttribute("DOC_DATE").getObj()));

            DoNotEvaluate = true;
            //===================Fill up Table===================//
            FormatGrid();
            FormatGridS();
            //Now Generate Table
            for (int i = 1; i <= ObjTLcut.colMRItems.size(); i++) {

                clsTLcutItem ObjItem = (clsTLcutItem) ObjTLcut.colMRItems.get(Integer.toString(i));
                Object[] rowData = new Object[30];

                rowData[0] = Integer.toString(i);
                rowData[1] = (String) ObjItem.getAttribute("QUALITY_ID").getObj();
                rowData[2] = (String) ObjItem.getAttribute("SHADE").getObj();
                rowData[3] = (String) ObjItem.getAttribute("PIECE_NO").getObj();
                rowData[4] = (String) ObjItem.getAttribute("RCVD_DATE").getObj();
                rowData[5] = (String) ObjItem.getAttribute("FLAG_CD").getObj();
                rowData[6] = (String) ObjItem.getAttribute("RACK_NO").getObj();
                rowData[7] = Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("NET_MTR").getVal(), 2));
                rowData[8] = (String) ObjItem.getAttribute("BRAND").getObj();

                DataModelD.addRow(rowData);
            }

            DoNotEvaluate = false;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Display Data Error: " + e.getMessage());
        }
    }

    //Sets data to the Class Object
    private void SetData() {
        //Header Fields

        ObjTLcut.setAttribute("DOC_NO", txtdocno.getText());
        ObjTLcut.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtdt.getText()));
        ObjTLcut.setAttribute("FILE_NAME", txtfile.getText());

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjTLcut.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjTLcut.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjTLcut.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjTLcut.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }
        //======= Set Line part ============
        ObjTLcut.colMRItems.clear();

        for (int i = 0; i < selectedpieces.getRowCount(); i++) {
            clsTLcutItem ObjItem = new clsTLcutItem();
            //Add Only Valid Items         
            ObjItem.setAttribute("DOC_NO", txtdocno.getText());
            ObjItem.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtdt.getText()));
            ObjItem.setAttribute("FILE_NAME", txtfile.getText());
            ObjItem.setAttribute("QUALITY_ID", (String) selectedpieces.getValueAt(i, 1));
            ObjItem.setAttribute("SHADE", (String) selectedpieces.getValueAt(i, 2));
            ObjItem.setAttribute("PIECE_NO", (String) selectedpieces.getValueAt(i, 3));
            ObjItem.setAttribute("RCVD_DATE", EITLERPGLOBAL.formatDateDB(selectedpieces.getValueAt(i, 4).toString()));
            ObjItem.setAttribute("FLAG_CD", (String) selectedpieces.getValueAt(i, 5));
            ObjItem.setAttribute("RACK_NO", (String) selectedpieces.getValueAt(i, 6));
            ObjItem.setAttribute("NET_MTR", Double.parseDouble(selectedpieces.getValueAt(i, 7).toString()));
            ObjItem.setAttribute("BRAND", (String) selectedpieces.getValueAt(i, 8));

            ObjTLcut.colMRItems.put(Integer.toString(ObjTLcut.colMRItems.size() + 1), ObjItem);

        }

    }

    private void UpdateSrNo() {
        int SrCol = DataModelD.getColFromVariable("SR_NO");

        for (int i = 0; i < selectedpieces.getRowCount(); i++) {
            selectedpieces.setValueAt(Integer.toString(i + 1), i, SrCol);

        }
    }

    private void ClearSelectedPiece() {
        for (int i = 0; i < Pieces.getRowCount(); i++) {
            Pieces.setValueAt(false, i, 9);

        }
    }

    private void FormatGrid() {

        Updating = true; //Stops recursion
        try {

            DataModelDesc = new EITLTableModel();
            Pieces.removeAll();
            Pieces.setModel(DataModelDesc);
            TableColumnModel ColModel = Pieces.getColumnModel();
            Pieces.setAutoResizeMode(Pieces.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModelDesc.addColumn("Sr.");  //0 - Read Only
            DataModelDesc.addColumn("QUALITY CD"); //1
            DataModelDesc.addColumn("SHADE");//2
            DataModelDesc.addColumn("PIECE NO");//3
            DataModelDesc.addColumn("RECEIVE DATE");//4
            DataModelDesc.addColumn("FLAG CD"); //5
            DataModelDesc.addColumn("RACK NO");  //6
            DataModelDesc.addColumn("METER"); //7
            DataModelDesc.addColumn("BRAND"); //8
            DataModelDesc.addColumn("SELECT PIECE[S]"); //9

            Pieces.getColumnModel().getColumn(0).setMaxWidth(30);
            Pieces.getColumnModel().getColumn(1).setMaxWidth(80);
            Pieces.getColumnModel().getColumn(2).setMaxWidth(30);
            Pieces.getColumnModel().getColumn(3).setMaxWidth(100);
            Pieces.getColumnModel().getColumn(4).setMaxWidth(100);
            Pieces.getColumnModel().getColumn(5).setMaxWidth(40);
            Pieces.getColumnModel().getColumn(6).setMaxWidth(100);
            Pieces.getColumnModel().getColumn(7).setMaxWidth(100);
            Pieces.getColumnModel().getColumn(8).setMaxWidth(80);
            Pieces.getColumnModel().getColumn(0).setCellRenderer(Renderer);
            Pieces.getColumnModel().getColumn(9).setPreferredWidth(100);

            int ImportCol = 9;
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            aCheckBox.setVisible(true);
            aCheckBox.setEnabled(true);
            aCheckBox.setSelected(false);
            Pieces.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            Pieces.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

        } catch (Exception e) {

        }
        Updating = false;
        //Table formatting completed  

    }

    private void FormatGridS() {
        Updating = true; //Stops recursion
        try {
            DataModelD = new EITLTableModel();
            selectedpieces.removeAll();
            selectedpieces.setModel(DataModelD);

            DataModelD.addColumn("Sr.");  //0 - Read Only
            DataModelD.addColumn("QUALITY CD"); //1
            DataModelD.addColumn("SHADE");//2
            DataModelD.addColumn("PIECE NO");//3
            DataModelD.addColumn("RECEIVE DATE");//4
            DataModelD.addColumn("FLAG CD"); //5
            DataModelD.addColumn("RACK NO");  //6
            DataModelD.addColumn("METER"); //7
            DataModelD.addColumn("BRAND"); //8

            DataModelD.TableReadOnly(true);

        } catch (Exception e) {

        }
        Updating = false;
        //Table formatting completed  

    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void PreviewReport() {
        String DOCNo = txtdocno.getText().trim();
        

        Connection Conn = null;
        Statement st = null;
        ResultSet rs = null;
        try {
            Conn = data.getConn();
            st = Conn.createStatement();

            HashMap parameterMap = new HashMap();

            parameterMap.put("CURDATE", EITLERPGLOBAL.getCurrentDate() +" "+ EITLERPGLOBAL.getCurrentTime());
            parameterMap.put("DOCNO", txtdocno.getText().trim());
            parameterMap.put("FILENAME", txtfile.getText().trim());
            
            

            ReportRegister rpt = new ReportRegister(parameterMap, Conn);

            String strSQL = "SELECT DESCRIPTION,METER,ROUND((METER*100)/(SELECT COALESCE(SUM(NET_MTR)) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"'),2) AS PER FROM ( "
                    + "SELECT 'LENGTH <=6.3 MTRS' AS DESCRIPTION,COALESCE(SUM(NET_MTR),0) AS METER FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"' AND NET_MTR<=6.3 AND FLAG_CD<>'DA' "
                    + "UNION ALL "
                    + "SELECT 'LENGTH >=6.4 AND LENGTH<=7.9',COALESCE(SUM(NET_MTR),0) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"' AND NET_MTR>=6.4 AND NET_MTR<=7.9 AND FLAG_CD<>'DA' "
                    + "UNION ALL "
                    + "SELECT 'LENGTH >=8',COALESCE(SUM(NET_MTR),0) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"' AND NET_MTR>=8 AND FLAG_CD<>'DA' "
                    + "UNION ALL "
                    + "SELECT 'LENGTH <=6.3 MTRS WITH DA' AS DESCRIPTION,COALESCE(SUM(NET_MTR),0) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"' AND NET_MTR<=6.3 AND FLAG_CD='DA' "
                    + "UNION ALL "
                    + "SELECT 'LENGTH >=6.4 AND LENGTH<=7.9 WITH DA',COALESCE(SUM(NET_MTR),0) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"' AND NET_MTR>=6.4 AND NET_MTR<=7.9 AND FLAG_CD='DA' "
                    + "UNION ALL "
                    + "SELECT 'LENGTH >=8 WITH DA',COALESCE(SUM(NET_MTR),0) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"' AND NET_MTR>=8 AND FLAG_CD='DA' "
                    + "UNION ALL "
                    + "SELECT 'TOTAL',COALESCE(SUM(NET_MTR),0) FROM PRODUCTION.TL_CUT WHERE DOC_NO='"+DOCNo+"') AS D";

            rpt.setReportName("/EITLERP/Reports/TL_CUT.jrxml", 0, strSQL); //productlist is the name of my jasper file.
            rpt.callReport();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
                Conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}
