/*
 * frmClient.java
 *
 * Created on February 8, 2005, 2:30 PM
 */

package EITLERP.Production.FeltDiscRateMaster;

/**
 *
 * @author  root
 */

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import java.net.*;
import net.sf.jasperreports.engine.*;
import java.io.File;
import javax.swing.text.html.*;
import javax.swing.text.*;
import java.sql.*;



public class frmFeltSendMail extends javax.swing.JApplet {
    
    private EITLComboModel cmbModuleModel;
    private EITLListModel cmbListModel;
    private JDialog aDialog;
    public int ModuleID=0;
    public int SentBy=0;
    public String MailDocNo="";
    public String MailTo="";
    public HashMap colRecList=new HashMap();
    public String theURL="";
    public String theFile="";
    
    private EITLTableModel DataModel;
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    private HashMap emaillist=new HashMap();
    
    private JTextField currentSelection=null;
    
    
    public frmFeltSendMail() {
        setSize(410,300);
        initComponents();
        GenerateCombo();
        
        //get the list of address book
        emaillist=clsFeltAddressBook.getEMailList();
        
        refreshList("");
        theList.setVisible(false);
        txtFrom.requestFocus();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        cmdSend = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmdExit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbModule = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        EditorMessage = new javax.swing.JEditorPane();
        txtBCC = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtCC = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cmdAddressBook = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtTO = new javax.swing.JTextField();
        theList = new javax.swing.JScrollPane();
        addlist = new javax.swing.JList();

        getContentPane().setLayout(null);

        cmdSend.setText("Send");
        cmdSend.setNextFocusableComponent(cmdAddressBook);
        cmdSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSendActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSend);
        cmdSend.setBounds(464, 38, 120, 25);

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setText("SEND DOC BY EMAIL");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(7, 6, 209, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 3, 644, 26);

        jLabel2.setText("EMail Message");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 220, 103, 15);

        cmdExit.setText("Exit");
        cmdExit.setNextFocusableComponent(cmbModule);
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        getContentPane().add(cmdExit);
        cmdExit.setBounds(465, 70, 120, 25);

        jLabel3.setText("Document");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(3, 49, 71, 15);

        cmbModule.setNextFocusableComponent(txtDocNo);
        cmbModule.setEnabled(false);
        getContentPane().add(cmbModule);
        cmbModule.setBounds(83, 43, 310, 24);

        jLabel4.setText("Doc. No.");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(19, 86, 61, 15);

        txtDocNo.setNextFocusableComponent(txtFrom);
        getContentPane().add(txtDocNo);
        txtDocNo.setBounds(83, 82, 121, 22);

        jLabel5.setText("Subject");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 180, 54, 20);

        getContentPane().add(txtSubject);
        txtSubject.setBounds(86, 180, 350, 22);

        jLabel6.setText("From");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(24, 121, 54, 15);

        txtFrom.setNextFocusableComponent(txtTO);
        txtFrom.setEnabled(false);
        txtFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFromFocusGained(evt);
            }
        });

        getContentPane().add(txtFrom);
        txtFrom.setBounds(83, 118, 356, 22);

        EditorMessage.setContentType("text/html");
        EditorMessage.getDocument().putProperty("ZOOM_FACTOR", new Double(2.5));
        jScrollPane1.setViewportView(EditorMessage);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(25, 240, 490, 280);

        txtBCC.setEditable(false);
        txtBCC.setFocusable(false);
        txtBCC.setNextFocusableComponent(txtSubject);
        txtBCC.setEnabled(false);
        txtBCC.setOpaque(false);
        txtBCC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBCCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBCCFocusLost(evt);
            }
        });
        txtBCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBCCKeyReleased(evt);
            }
        });

        getContentPane().add(txtBCC);
        txtBCC.setBounds(480, 160, 100, 22);

        jLabel8.setEnabled(false);
        getContentPane().add(jLabel8);
        jLabel8.setBounds(520, 200, 54, 0);

        txtCC.setEditable(false);
        txtCC.setFocusable(false);
        txtCC.setNextFocusableComponent(txtBCC);
        txtCC.setEnabled(false);
        txtCC.setOpaque(false);
        txtCC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCCFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCCFocusLost(evt);
            }
        });
        txtCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCCKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCCKeyReleased(evt);
            }
        });

        getContentPane().add(txtCC);
        txtCC.setBounds(480, 130, 100, 22);

        getContentPane().add(jLabel9);
        jLabel9.setBounds(510, 230, 54, 0);

        cmdAddressBook.setBorderPainted(false);
        cmdAddressBook.setContentAreaFilled(false);
        cmdAddressBook.setFocusPainted(false);
        cmdAddressBook.setFocusable(false);
        cmdAddressBook.setNextFocusableComponent(cmdExit);
        cmdAddressBook.setEnabled(false);
        cmdAddressBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddressBookActionPerformed(evt);
            }
        });

        getContentPane().add(cmdAddressBook);
        cmdAddressBook.setBounds(470, 100, 110, 25);

        jLabel10.setText("TO");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(24, 153, 54, 15);

        txtTO.setNextFocusableComponent(txtCC);
        txtTO.setAutoscrolls(false);
        //txtTO = new JTextFieldHint(new JTextField(),"Search by Press F1");
        txtTO.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTOFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTOFocusLost(evt);
            }
        });
        txtTO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTOKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTOKeyReleased(evt);
            }
        });

        getContentPane().add(txtTO);
        txtTO.setBounds(83, 150, 356, 22);

        theList.setOpaque(false);
        addlist.setValueIsAdjusting(true);
        addlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addlistMouseClicked(evt);
            }
        });

        theList.setViewportView(addlist);

        getContentPane().add(theList);
        theList.setBounds(530, 320, 60, 120);

    }//GEN-END:initComponents

    private void txtTOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTOKeyPressed
   /*          if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT DISTINCT EMAIL FROM PRODUCTION.FELT_PARTY_EXTRA_INFO ORDER BY EMAIL";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            //aList.DefaultSearchOn=2;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
               txtTO.setText(aList.ReturnVal);
        }
        }
    */
    }//GEN-LAST:event_txtTOKeyPressed

    private void txtBCCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBCCFocusLost
        // TODO add your handling code here:
        theList.setVisible(false);
    }//GEN-LAST:event_txtBCCFocusLost

    private void txtTOFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTOFocusLost
       //  theList.setVisible(false);        
    }//GEN-LAST:event_txtTOFocusLost

    private void txtBCCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBCCKeyReleased
        // TODO add your handling code here:
        refreshList(fetchInitString(currentSelection));
        
        try {
            if(evt.getKeyCode()==27) //Down Arrow Key pressed
            {
                theList.setVisible(false);
            }
            
            
            if(evt.getKeyCode()==40) //Down Arrow Key pressed
            {
                addlist.setSelectedIndex(addlist.getSelectedIndex()+1);
            }
            
            if(evt.getKeyCode()==38) //Up Arrow Key pressed
            {
                addlist.setSelectedIndex(addlist.getSelectedIndex()-1);
            }
            
            if(evt.getKeyCode()==10) {
                currentSelection.setText(fetchReplaceString(currentSelection)+(String)cmbListModel.getElementAt(addlist.getSelectedIndex())+",");
                refreshList(fetchInitString(currentSelection));
                theList.setVisible(false);
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_txtBCCKeyReleased

    private void txtTOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTOKeyReleased
       /* // TODO add your handling code here:
        refreshList(fetchInitString(currentSelection));

                
        
        try {
            if(evt.getKeyCode()==27) //Down Arrow Key pressed
            {
                theList.setVisible(false);
            }
            
            if(evt.getKeyCode()==40) //Down Arrow Key pressed
            {
                addlist.setSelectedIndex(addlist.getSelectedIndex()+1);
            }
            
            if(evt.getKeyCode()==38) //Up Arrow Key pressed
            {
                addlist.setSelectedIndex(addlist.getSelectedIndex()-1);
            }
            
            if(evt.getKeyCode()==10) {
                currentSelection.setText(fetchReplaceString(currentSelection)+(String)cmbListModel.getElementAt(addlist.getSelectedIndex())+",");
                refreshList(fetchInitString(currentSelection));
                theList.setVisible(false);
            }
            
        }
        catch(Exception e) {
            
        }
        */
    }//GEN-LAST:event_txtTOKeyReleased

    private void txtCCFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCCFocusLost
        // TODO add your handling code here:
        theList.setVisible(false);
    }//GEN-LAST:event_txtCCFocusLost
    
    private void addlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addlistMouseClicked
        // TODO add your handling code here:
        try
        {
        if(evt.getClickCount()==2) {
            currentSelection.setText(fetchReplaceString(currentSelection)+(String)cmbListModel.getElementAt(addlist.getSelectedIndex())+",");
            refreshList(fetchInitString(currentSelection));
            theList.setVisible(false);
        }
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_addlistMouseClicked
    
    private void txtBCCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBCCFocusGained
        // TODO add your handling code here:
        currentSelection=txtBCC;
        theList.setLocation(txtBCC.getLocation().x, txtBCC.getLocation().y+txtBCC.getHeight());

    }//GEN-LAST:event_txtBCCFocusGained
    
    private void txtCCFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCCFocusGained
        // TODO add your handling code here:
        currentSelection=txtCC;
        theList.setLocation(txtCC.getLocation().x, txtCC.getLocation().y+txtCC.getHeight());
        
    }//GEN-LAST:event_txtCCFocusGained
    
    private void txtTOFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTOFocusGained
       /*
        currentSelection=txtTO;
        theList.setLocation(txtTO.getLocation().x, txtTO.getLocation().y+txtTO.getHeight());
        */
    }//GEN-LAST:event_txtTOFocusGained
    
    private void txtFromFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromFocusGained
        // TODO add your handling code here:
        currentSelection=txtFrom;
    }//GEN-LAST:event_txtFromFocusGained
    
    private void txtCCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCCKeyReleased
        // TODO add your handling code here:
        refreshList(fetchInitString(currentSelection));
        
        try {
            
            if(evt.getKeyCode()==27) //Down Arrow Key pressed
            {
                theList.setVisible(false);
            }
            
            
            if(evt.getKeyCode()==27) //Down Arrow Key pressed
            {
                theList.setVisible(false);
            }
            
            if(evt.getKeyCode()==40) //Down Arrow Key pressed
            {
                addlist.setSelectedIndex(addlist.getSelectedIndex()+1);
            }
            
            if(evt.getKeyCode()==38) //Up Arrow Key pressed
            {
                addlist.setSelectedIndex(addlist.getSelectedIndex()-1);
            }
            
            if(evt.getKeyCode()==10) {
                currentSelection.setText(fetchReplaceString(currentSelection)+(String)cmbListModel.getElementAt(addlist.getSelectedIndex())+",");
                refreshList(fetchInitString(currentSelection));
                theList.setVisible(false);
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtCCKeyReleased
    
    private void txtCCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCCKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtCCKeyPressed
    
    private void cmdAddressBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddressBookActionPerformed
        // TODO add your handling code here:
        try {
            AppletFrame.startApplet("EITLERP.Production.ReportUI.frmFeltAddressBook","SDML ERP");
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddressBookActionPerformed
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        try {
            aDialog.dispose();
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSendActionPerformed
        // TODO add your handling code here:
        HashMap sendList=new HashMap();
        String strEMail="";
         
        if(txtTO.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"No email messages specified. Please specify atleast one email address");
            return;
        }
        
        for(int i=0;i<=txtTO.getText().length()-1;i++) {
            if(txtTO.getText().substring(i,i+1).equals(",")) {
                if(!strEMail.trim().equals("")) {
                    sendList.put(Integer.toString(sendList.size()+1),strEMail);
                }
                strEMail="";
            }
            else {
                strEMail=strEMail+txtTO.getText().substring(i,i+1);
            }
        }
        
        //Last Element must be included
        if(!strEMail.trim().equals(""))
        {
          sendList.put(Integer.toString(sendList.size()+1),strEMail);  
        }
        
        
        try {
            //Now insert the record into doc mailer database
            clsDocMailer ObjMailer=new clsDocMailer();
            ObjMailer.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            ObjMailer.setAttribute("DOC_NO",0);
            ObjMailer.setAttribute("DOC_DATE",EITLERPGLOBAL.getCurrentDateDB());
            ObjMailer.setAttribute("MODULE_ID",ModuleID);
            ObjMailer.setAttribute("SENT_BY",SentBy);
           // ObjMailer.setAttribute("DESCRIPTION",txtMessage.getText());
            ObjMailer.setAttribute("DESCRIPTION",EditorMessage.getText());
            ObjMailer.setAttribute("FROM",txtFrom.getText());
            ObjMailer.setAttribute("SUBJECT",txtSubject.getText());
            ObjMailer.setAttribute("MAIL_DOC_NO",MailDocNo);
            ObjMailer.setAttribute("CC",txtCC.getText());
            //ObjMailer.setAttribute("BCC",txtBCC.getText());
            ObjMailer.setAttribute("BCC","felts@dineshmills.com");             
            
            for(int i=1;i<=sendList.size();i++) {
                String email=(String)sendList.get(Integer.toString(i));
                ObjMailer.colEmail.put(Integer.toString(ObjMailer.colEmail.size()+1),email);
            }
            
            long MailNo=ObjMailer.Insert();
            
            if(MailNo!=0) {
                
                //Now depending upon the module id divert to different jsp pages                
                URL MailDocument=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltDocMailer.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+MailNo+"&File="+this.theFile); //+".pdf"
                System.out.print(MailDocument);
                EITLERPGLOBAL.loginContext.showDocument(MailDocument,"_blank");
                
            }
            
        }
        catch(Exception e) {
            
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdSendActionPerformed
    
    public boolean ShowWindow() {
        try {
            GenerateCombo();
            setSize(632,570);
            
            DisplayData();
            
            Frame f=findParentFrame(this);
            aDialog=new JDialog(f,"Send EMail",false);
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(true);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
            
        }
        catch(Exception e) {
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane EditorMessage;
    private javax.swing.JList addlist;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JButton cmdAddressBook;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane theList;
    private javax.swing.JTextField txtBCC;
    private javax.swing.JTextField txtCC;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtTO;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateCombo() {
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbModuleModel=new EITLComboModel();
        cmbModule.removeAllItems();
        cmbModule.setModel(cmbModuleModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ORDER BY MODULE_ID";
        
        List=clsModules.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
            //Check that Module Access Rights are given
            int ModuleID=(int)ObjModules.getAttribute("MODULE_ID").getVal();
            int MenuID=clsMenu.getMenuIDFromModule(EITLERPGLOBAL.gCompanyID, ModuleID);
            
            ComboData aData=new ComboData();
            aData.Text=((String) ObjModules.getAttribute("MODULE_DESC").getObj());
            aData.Code=(int) ObjModules.getAttribute("MODULE_ID").getVal();
            cmbModuleModel.addElement(aData);
            
        }
        
        
        
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    
    
    private void DisplayData() {
        
                
        EITLERPGLOBAL.setComboIndex(cmbModule,ModuleID);
        //txtFrom.setText(clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, SentBy));
        txtFrom.setText("felts@dineshmills.com");
        txtDocNo.setText(MailDocNo);
        txtTO.setText(MailTo);
        String imgsrc="";
        Connection tmpConn;
        Statement stmt;
        ResultSet rsTmp;
        String Editormsg="";
        Editormsg+="<html><body>Dear    ,<br><p>We are pleased to inform you that your following felt/s have been made ready on priority.Our proforma invoice(PI) for the same is now attached herewith to enable you to arrange the payment immediately enabling despatches.</p><br><table border='1'><tr><th>PIECE NO</th><th align='center'> MACHINE NO </th><th align='center'> POSITION </th><th align='center'>SIZE(MTRS) </th><th align='center'>GSM </th><th align='center'>AMOUNT</th></tr>";
        try {
            tmpConn=data.getConn();
            stmt=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            rsTmp=stmt.executeQuery("SELECT PIECE_NO,MACHINE_NO,POSITION,GSQ,CONCAT(LNGTH,'X',WIDTH) SIZE,INV_AMT FROM PRODUCTION.FELT_PROFORMA_INVOICE_DETAIL WHERE PROFORMA_NO='"+MailDocNo+"'");
            
            while(rsTmp.next()) {
                Editormsg+="<tr>"+
                "<td>"+
                "<p>"+rsTmp.getString("PIECE_NO")+"</p>"+
                "</td>"+
                "<td>"+
                "<p>"+rsTmp.getString("MACHINE_NO")+"</p>"+
                "</td>"+
                "<td>"+
                "<p>"+rsTmp.getString("POSITION")+"</p>"+
                "</td>"+
                "<td>"+
                "<p>"+rsTmp.getString("SIZE")+"</p>"+
                "</td>"+
                "<td>"+
                "<p>"+rsTmp.getString("GSQ")+"</p>"+
                "</td>"+                
                "<td>"+
                "<p>"+rsTmp.getInt("INV_AMT")+"</p>"+
                "</td>"+                
                "</tr>";
            }            
            stmt.close();
            rsTmp.close();
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        Editormsg+="</table><p>Given here under are our bank details for your reference & doing the needful</p><table border=1><tr><td><b> (1) </b></td><td><b>ACCOUNT NAME : <font color='red'>SHRI DINESH MILLS LTD</font></b></td></tr><tr><td><b>(2)</b></td><td><b> COMPANY ADDRESS : <font color='red'>PADRA ROAD , VADODARA - 390 020 (GUJARAT )</font></b></td></tr><tr><td><b>(3)</b></td><td><b>ACCOUNT NUMBER : <font color='red'>0033-033-0000-810</font></b></td></tr><tr><td><b>(4)</b></td><td><b>TYPE OF ACCOUNT : <font color='red'>CURRENT A/C</font></b></td></tr><tr><td><b>(5)</b></td><td><b> BANK NAME : <font color='red'>HDFC BANK</font></b></td></tr><tr><td><b>(6)</b></td><td><b> BRANCH ADDRESS : <font color='red'>GROUND FLOOR, KANHA CAPITAL, R C DUTT ROAD, ALKAPURI, VADODARA - 390 007</font></b></td></tr><tr><td><b>(7)</b></td><td><b>IFSC/RTGS CODE OF BANK BRANCH : <font color='red'>HDFC0000033</font></b></td></tr><tr><td><b>(8)</b></td><td><b>MICR CODE : <font color='red'>390240002</font></b></td></tr><tr><td><b>(9)</b></td><td><b>BRANCH CODE: <font color='red'>33</font></b></td></tr></table><p>Thanks & Regards</p><img border='0' src=\'http://200.0.0.230:8080/jmx-console/dinesh/EITLERP/Images/FeltImage\' alt='' width='74' height='85'  ></img><p><font size='6' color='blue'><b>Felt sales Division</b></font></p>Office: +91 265 2960060/61/62/63/66 | Fax: +91 265 2336195 |<br>Email: <a href='mailto:felts@dineshmills.com'>felts@dineshmills.com</a> | Website: <a href='http://www.dineshmills.com'>www.dineshmills.com</a><br>P O Box-2501, Padra Road, Vadodara 390 020, Gujarat, India<br><p>The information and attachment(s) contained by this e-mail are confidential, proprietary and legally privileged data of Shri Dinesh Mills Limited that is intended for use only by the addressee. If you are not the intended recipient, you are notified that any dissemination, distribution, or copying of this e-mail is strictly prohibited and requested to delete this e-mail immediately and notify the originator. While this e-mail has been checked for all known viruses, the addressee should also scan for viruses. Internet communications cannot be guaranteed to be timely, secure, error or virus-free as information could be intercepted, corrupted, lost, destroyed, arrive late or incomplete. SHRI DINESH MILLS LTD does not accept liability for any errors or omissions</p><p><img border='0' src=\'http://200.0.0.230:8080/jmx-console/dinesh/EITLERP/Images/savetree.jpg\' alt='' width='30' height='25'></img><b>Please consider your environmental responsibility.Do not print this e-mail unless you really need to.</b></p></body></html>";
     /*  try{
          imgsrc = new File("FeltImage").toURL().toExternalForm();
          //getCodeBase().toString()+
        }
        catch(MalformedURLException ex){
            //Logger.getLogger(EntityManager.class.getName()).log(Level.SEVERE, null, ex);
        }
       */ 
        //EditorMessage.setContent("");
        EditorMessage.setContentType("text/html; charset=utf-8");
        EditorMessage.setText(Editormsg); 
        //EditorMessage.setText("<html><body>Dear    ,<br><p>We are pleased to inform you that your following felt/s have been made ready on priority.Our proforma invoice(PI) for the same is now attached herewith to enable you to arrange the payment immediately enabling despatches.</p><br><table border='1'><tr><th>PIECE NO</th><th align='center'> POSITION </th><th align='center'>SIZE(MTRS) </th><th align='center'>GSM </th><th align='center'>P/I NO & DATE </th><th align='center'>AMOUNT</th></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></table><p>Given here under are our bank details for your reference & doing the needful</p><table border=1><tr><td><b> (1) </b></td><td><b>ACCOUNT NAME : <font color='red'>SHRI DINESH MILLS LTD</font></b></td></tr><tr><td><b>(2)</b></td><td><b> COMPANY ADDRESS : <font color='red'>PADRA ROAD , VADODARA - 390 005 (GUJARAT )</font></b></td></tr><tr><td><b>(3)</b></td><td><b>ACCOUNT NUMBER : <font color='red'>0033-033-0000-810</font></b></td></tr><tr><td><b>(4)</b></td><td><b>TYPE OF ACCOUNT : <font color='red'>CURRENT A/C</font></b></td></tr><tr><td><b>(5)</b></td><td><b> BANK NAME : <font color='red'>HDFC BANK</font></b></td></tr><tr><td><b>(6)</b></td><td><b> BRANCH ADDRESS : <font color='red'>ARUN COMPLEX,36-ALKAPURI SOCIETY,R C DUTT ROAD,VADODARA - 390 005</font></b></td></tr><tr><td><b>(7)</b></td><td><b>IFSC/RTGS CODE OF BANK BRANCH : <font color='red'>HDFC0000033</font></b></td></tr><tr><td><b>(8)</b></td><td><b>MICR CODE : <font color='red'>390240002</font></b></td></tr><tr><td><b>(9)</b></td><td><b>BRANCH CODE: <font color='red'>33</font></b></td></tr></table><p>Thanks & Regards</p><img border='0' src='"+EITLERPGLOBAL.getImage("FELTIMAGE")+"' alt='' width='74' height='85'  ></img><p><font size='6' color='blue'><b>Felt sales Division</b></font></p>Office: +91 265 2960060/61/62/63/66 | Fax: +91 265 2336195 |<br>Email: <a href='mailto:felts@dineshmills.com'>felts@dineshmills.com</a> | Website: <a href='http://www.dineshmills.com'>www.dineshmills.com</a><br>P O Box-2501, Padra Road, Vadodara 390 020, Gujarat, India<br><p>The information and attachment(s) contained by this e-mail are confidential, proprietary and legally privileged data of Shri Dinesh Mills Limited that is intended for use only by the addressee. If you are not the intended recipient, you are notified that any dissemination, distribution, or copying of this e-mail is strictly prohibited and requested to delete this e-mail immediately and notify the originator. While this e-mail has been checked for all known viruses, the addressee should also scan for viruses. Internet communications cannot be guaranteed to be timely, secure, error or virus-free as information could be intercepted, corrupted, lost, destroyed, arrive late or incomplete. SHRI DINESH MILLS LTD does not accept liability for any errors or omissions</p><p><img border='0' src='"+EITLERPGLOBAL.getImage("SAVETREE")+"' alt='' width='30' height='25'></img><b>Please consider your environmental responsibility.Do not print this e-mail unless you really need to.</b></p></body></html>"); 
       /* 
        
        for(int i=1;i<=colRecList.size();i++) {
            String email=(String)colRecList.get(Integer.toString(i));

             if(txtTO.getText().trim().equals(""))
             {
             txtTO.setText(email);      
             }
             else
             {
             txtTO.setText(txtTO.getText()+","+email);  
             }
        }
        */
    }
    
    
    private void refreshList(String initString) {

        int ElementCount=0;
        
        theList.setVisible(true);
        theList.repaint();
                
        int oldSelection=0;
        oldSelection=addlist.getSelectedIndex();
        
        addlist.removeAll();
        cmbListModel = new EITLListModel();
        addlist.setModel(cmbListModel);
        cmbListModel.removeAllElements();
        
        
        for(int i=1;i<=emaillist.size();i++) {
            String email=(String)emaillist.get(Integer.toString(i));
            
            if(initString.trim().equals("")) {
                cmbListModel.addElement(email);
                ElementCount++;
            }
            else {
                if(email.startsWith(initString)) {
                    cmbListModel.addElement(email);
                    ElementCount++;
                }
            }
        }
        
        
        try {
            
            if(oldSelection<0)
            {
             oldSelection=0;   
            }
            
            if(oldSelection>ElementCount)
            {
              oldSelection=0;  
            }
            
            addlist.setSelectedIndex(oldSelection);
        }
        catch(Exception e) {
            addlist.setSelectedIndex(0);
            
        }
        
    }
    
    
    private String fetchInitString(JTextField aText) {
        
        String initString="";
        
        for(int i=aText.getText().length()-1;i>=0;i--) {
            if(aText.getText().substring(i,i+1).equals(",")) {
                return aText.getText().substring(i+1);
            }
            else {
                initString=initString+aText.getText().substring(i,i+1);
            }
        }
        
        return aText.getText();
    }
    
    
    private String fetchReplaceString(JTextField aText) {
        
        String replaceString="";
        
        for(int i=aText.getText().length()-1;i>=0;i--) {
            if(aText.getText().substring(i,i+1).equals(",")) {
                replaceString=aText.getText().substring(0,i+1);
                return replaceString;
            }
            else {
            }
        }
        
        return replaceString;
    }
    
    
}
