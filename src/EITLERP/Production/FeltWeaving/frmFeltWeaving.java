/*
 * frmFeltWeaving.java
 *
 * Created on March 12, 2013, 3:10 PM
 */
package EITLERP.Production.FeltWeaving;

/**
 *
 * @author VIVEK KUMAR
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.FeltSales.FeltWarpingBeamOrder.frmWarpingBeamOrder;
import EITLERP.FeltSales.FeltWarpingBeamOrder.frmWarpingBeamOrder2;
import EITLERP.FeltSales.FeltWarpingBeamOrder.frmWarpingBeamOrderHDS;
import EITLERP.FeltSales.Order.FrmFeltOrder;
import EITLERP.FeltSales.common.JavaMail;
import EITLERP.LOV;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.Production.FeltWarping.frmFeltWarping;
import EITLERP.data;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;

public class frmFeltWeaving extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private boolean DoNotEvaluate = false;

    private clsFeltWeaving ObjFeltWeaving;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;

    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;

    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltWeaving
     */
    public void init() {
        System.gc();
        //setSize(830, 590);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        lblTitle.setForeground(Color.WHITE);

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        DataModel = new EITLTableModel();
        ObjFeltWeaving = new clsFeltWeaving();

        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateUserNameCombo();
        cmdPrint.setEnabled(true);

        if (ObjFeltWeaving.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Error occured while Loading Data. Error is " + ObjFeltWeaving.LastError, "DATA LOADING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemWarping = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtFeltProductionDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtFormNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtProductionDocumentNo = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPreviousWeight = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDayWeight = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTotalWeight = new javax.swing.JTextField();
        txtMonthWeight = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbUserName = new javax.swing.JComboBox();
        cmdOpenDocument = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtmonthpick = new javax.swing.JTextField();
        txtmonthpickmtr = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtdaypick = new javax.swing.JTextField();
        txtdaypickmtr = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemWarping.setText("BEAM ORDER");
        jMenuItemWarping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWarpingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWarping);

        jMenuItemOrder.setText("SALES ORDER");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1150, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT PRODUCTION WEAVING DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1150, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Production Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(20, 12, 100, 16);

        txtFeltProductionDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFeltProductionDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFeltProductionDate.setEnabled(false);
        txtFeltProductionDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFeltProductionDateFocusGained(evt);
            }
        });
        Tab1.add(txtFeltProductionDate);
        txtFeltProductionDate.setBounds(125, 10, 102, 29);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(11, 110, 1100, 240);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setEnabled(false);
        cmdAdd.setMargin(new java.awt.Insets(0, 1, 0, 1));
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(680, 80, 80, 28);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setEnabled(false);
        cmdRemove.setMargin(new java.awt.Insets(0, 1, 0, 1));
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(760, 80, 80, 28);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(6, 66, 1110, 10);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(1000, 360, 110, 28);

        jLabel4.setText("Form No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(408, 12, 61, 16);

        txtFormNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFormNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFormNo.setEnabled(false);
        txtFormNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFormNoFocusGained(evt);
            }
        });
        Tab1.add(txtFormNo);
        txtFormNo.setBounds(480, 10, 102, 29);

        jLabel5.setText("Document No.");
        Tab1.add(jLabel5);
        jLabel5.setBounds(20, 42, 90, 16);

        txtProductionDocumentNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtProductionDocumentNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtProductionDocumentNo.setEnabled(false);
        Tab1.add(txtProductionDocumentNo);
        txtProductionDocumentNo.setBounds(125, 40, 102, 29);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(230, 12, 20, 18);

        jLabel6.setText("Previous Weight");
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 369, 130, 16);

        txtPreviousWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPreviousWeight.setText("0.0");
        txtPreviousWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPreviousWeight.setEnabled(false);
        Tab1.add(txtPreviousWeight);
        txtPreviousWeight.setBounds(150, 360, 80, 29);

        jLabel7.setText("Day Weight");
        Tab1.add(jLabel7);
        jLabel7.setBounds(238, 370, 100, 16);

        txtDayWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDayWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDayWeight.setEnabled(false);
        Tab1.add(txtDayWeight);
        txtDayWeight.setBounds(350, 360, 80, 29);

        jLabel8.setText("Total Weight");
        Tab1.add(jLabel8);
        jLabel8.setBounds(237, 400, 100, 16);

        txtTotalWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtTotalWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWeight.setEnabled(false);
        Tab1.add(txtTotalWeight);
        txtTotalWeight.setBounds(350, 390, 80, 29);

        txtMonthWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtMonthWeight.setText("0.0");
        txtMonthWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMonthWeight.setEnabled(false);
        Tab1.add(txtMonthWeight);
        txtMonthWeight.setBounds(150, 390, 80, 29);

        jLabel11.setText("Month Weight");
        Tab1.add(jLabel11);
        jLabel11.setBounds(10, 397, 130, 16);

        jLabel12.setText("User Name");
        Tab1.add(jLabel12);
        jLabel12.setBounds(408, 43, 67, 16);

        cmbUserName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbUserName.setEnabled(false);
        Tab1.add(cmbUserName);
        cmbUserName.setBounds(480, 40, 250, 29);

        cmdOpenDocument.setText("Open Document");
        cmdOpenDocument.setToolTipText("");
        cmdOpenDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenDocumentActionPerformed(evt);
            }
        });
        Tab1.add(cmdOpenDocument);
        cmdOpenDocument.setBounds(960, 390, 150, 28);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 255));
        jLabel9.setText("Press F1 For Piece Selection");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 80, 270, 30);

        jLabel1.setText("Month Pick Mtr");
        Tab1.add(jLabel1);
        jLabel1.setBounds(650, 400, 110, 20);

        jLabel2.setText("Day Pick Mtr");
        Tab1.add(jLabel2);
        jLabel2.setBounds(650, 360, 110, 30);

        txtmonthpick.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tab1.add(txtmonthpick);
        txtmonthpick.setBounds(530, 390, 110, 30);

        txtmonthpickmtr.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tab1.add(txtmonthpickmtr);
        txtmonthpickmtr.setBounds(770, 390, 130, 30);

        jLabel10.setText("Day Pick");
        Tab1.add(jLabel10);
        jLabel10.setBounds(440, 370, 80, 20);

        jLabel13.setText("Month Pick");
        Tab1.add(jLabel13);
        jLabel13.setBounds(440, 400, 80, 20);

        txtdaypick.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tab1.add(txtdaypick);
        txtdaypick.setBounds(530, 360, 110, 30);

        txtdaypickmtr.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tab1.add(txtdaypickmtr);
        txtdaypickmtr.setBounds(770, 360, 130, 30);

        Tab.addTab("Weaving Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 16);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 28);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 16);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 29);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 16);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 28);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 16);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 16);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 28);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 16);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 28);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 28);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 28);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 16);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 16);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 28);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 32);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 32);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 32);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 1150, 480);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 570, 1150, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed
        try {
            String docNo = data.getStringValueFromDB("SELECT PR_DOC_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO+0='" + (String) Table.getValueAt(Table.getSelectedRow(), 1) + "'");
            if (docNo.trim().length() > 0) {
                AppletFrame aFrame = new AppletFrame("Felt Sales Order");
                aFrame.startAppletEx("EITLERP.FeltSales.Order.FrmFeltOrder", "Felt Sales Order");
                FrmFeltOrder ObjItem = (FrmFeltOrder) aFrame.ObjApplet;
                ObjItem.Find(docNo);
            } else {
                JOptionPane.showMessageDialog(null, "Piece not Found in Sales Order.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItemOrderActionPerformed

    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed
        try {
            String sql, mDocNo;
            sql = "";
            sql = "SELECT DOC_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL WHERE PIECE_NO='" + Table.getValueAt(Table.getSelectedRow(), 1).toString() + "' AND INDICATOR!='DELETE'";
            mDocNo = data.getStringValueFromDB(sql);
            if (mDocNo.trim().length() > 0) {
                AppletFrame aFrame = new AppletFrame("Felt Warping Report");
                aFrame.startAppletEx("EITLERP.FeltSales.FeltWarpingBeamOrder.frmWarpingBeamOrder2", "Felt Warping Report");
                frmWarpingBeamOrder2 ObjFeltWarping = (frmWarpingBeamOrder2) aFrame.ObjApplet;
                ObjFeltWarping.FindEx(EITLERPGLOBAL.gCompanyID, mDocNo);
                aFrame.setVisible(true);
                aFrame.dispose();
            } else {
                sql = "SELECT DOC_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL WHERE PIECE_NO='" + Table.getValueAt(Table.getSelectedRow(), 1).toString() + "' AND INDICATOR!='DELETE'";
                mDocNo = data.getStringValueFromDB(sql);
                if (mDocNo.trim().length() > 0) {
                    AppletFrame aFrame = new AppletFrame("Felt Warping Report");
                    aFrame.startAppletEx("EITLERP.FeltSales.FeltWarpingBeamOrder.frmWarpingBeamOrderHDS", "Felt Warping Report");
                    frmWarpingBeamOrderHDS ObjFeltWarping = (frmWarpingBeamOrderHDS) aFrame.ObjApplet;
                    ObjFeltWarping.FindEx(EITLERPGLOBAL.gCompanyID, mDocNo);
                    aFrame.setVisible(true);
                    aFrame.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Piece not Warped...");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jMenuItemWarpingActionPerformed

    private void cmdOpenDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenDocumentActionPerformed
        if (Table.getSelectedRow() != -1) {
            jPopupMenu.show(cmdOpenDocument, 0, 25);
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Weaving Details.", "WARNING", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cmdOpenDocumentActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        new TReportWriter.TReportEngine().PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltWeaving.rpt", new HashMap(), ObjFeltWeaving.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
        EITLERPGLOBAL.PAGE_BREAK = true;
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        try {
            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltWeaving.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&PROD_DATE=" + EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "File error " + e.getMessage(), "FILE ERROR", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void txtFormNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFormNoFocusGained
        ShowMessage("Enter Form No.");
    }//GEN-LAST:event_txtFormNoFocusGained

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Select a row from Document Update History");
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltWeaving.HistoryView = false;
        ObjFeltWeaving.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltWeaving.ShowHistory(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()), txtProductionDocumentNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtFeltProductionDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtFeltProductionDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFeltProductionDateFocusGained
        ShowMessage("Enter Production Date");
    }//GEN-LAST:event_txtFeltProductionDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(707, txtProductionDocumentNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltWeaving.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(frmFeltWeaving.this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if (Table.getRowCount() > 0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        Object[] rowData = new Object[20];
        rowData[0] = Integer.toString(Table.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        rowData[7] = "";
        rowData[8] = "";
        rowData[9] = "";
        rowData[10] = "";
        rowData[11] = "";
        rowData[12] = "";
        rowData[13] = "";
        rowData[14] = "";
        rowData[15] = "";
        rowData[16] = "";

        rowData[17] = "";
        rowData[18] = "";
        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount() - 1, 1, false, false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        double daypick = 0, monthpick = 0, daypickmtr = 0, monthpickmtr = 0;

        try {
            double dayWeight = 0, totalWeight = 0, previousWeight = 0, dayTotalWeight = 0, monthWeight = 0;

            dayTotalWeight = Double.parseDouble(txtDayWeight.getText().trim());
            monthWeight = Double.parseDouble(txtMonthWeight.getText().trim());

            if (Table.getSelectedColumn() == 5) {
                for (int i = 0; i < Table.getRowCount(); i++) {
                    try {
//                    dayWeight = dayWeight + Double.parseDouble(((String) Table.getValueAt(i, 3)).trim());
                        if (Table.getValueAt(i, 4).toString().trim() != null && Table.getValueAt(i, 4).toString().trim().length() > 0) {
                            dayWeight = dayWeight + Double.parseDouble(((String) Table.getValueAt(i, 4)).trim());
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                totalWeight = monthWeight + dayWeight;

                txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeight, 2)));
                txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(totalWeight, 5)));

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
            double pick = 0, pickmtr = 0, length = 0, reedspace = 0, picksper10cms = 0;
            //if (Table.getSelectedColumn() == 8 || evt.getKeyCode() ==9 || evt.getKeyCode() == 13) {
            if (Table.getSelectedColumn() == 8) {
                picksper10cms = Double.parseDouble(Table.getModel().getValueAt(Table.getSelectedRow(), 5).toString());
                reedspace = Double.parseDouble(Table.getModel().getValueAt(Table.getSelectedRow(), 6).toString());
                length = Double.parseDouble(Table.getModel().getValueAt(Table.getSelectedRow(), 7).toString());

                pick = picksper10cms * 10 * length;
                pickmtr = pick * reedspace;

                Table.setValueAt(pick, Table.getSelectedRow(), 9);
                Table.setValueAt(pickmtr, Table.getSelectedRow(), 10);

                for (int i = 0; i < Table.getRowCount(); i++) {
                    try {

                        //daypick = daypick + Double.parseDouble(((String) Table.getValueAt(i, 9)).trim());
                        //daypickmtr = daypickmtr + Double.parseDouble(((String) Table.getValueAt(i, 10)).trim());
                        daypick = daypick + pick;
                        daypickmtr = daypickmtr + pickmtr;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                txtdaypick.setText(Double.toString(EITLERPGLOBAL.round(daypick, 2)));
                txtdaypickmtr.setText(Double.toString(EITLERPGLOBAL.round(daypickmtr, 2)));
            }
        }
    }//GEN-LAST:event_TableKeyReleased

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            if ((EditMode == 1) || (EditMode == 2 && clsHierarchy.IsCreator(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gUserID))) {
                if (Table.getSelectedColumn() == 1) {
                    LOV aList = new LOV();
                    aList.SQL = "SELECT DISTINCT WIP_EXT_PIECE_NO AS PIECE_NO,WIP_PIECE_NO AS PIECE,WIP_PARTY_CODE AS PARTY_CODE,PARTY_NAME,WIP_GROUP AS \"GROUP\","
                            + "COALESCE(AMEND_WIP.PIECE_AMEND_NO,'') AS PENDING_WIP_AMEND "
                            + ",CASE WHEN PARTY_LOCK=1 THEN 'LOCKED' ELSE '' END AS PARTY_LOCK "
                            + ",CASE WHEN POSITION_LOCK_IND=1 THEN 'LOCKED' ELSE '' END AS POSITION_LOCK "
                            + " FROM PRODUCTION.FELT_WIP_PIECE_REGISTER R "
                            + " LEFT JOIN PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                            + " ON WIP_PARTY_CODE=MM_PARTY_CODE AND WIP_MACHINE_NO=MM_MACHINE_NO AND WIP_POSITION_NO=MM_MACHINE_POSITION "
                            + " LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                            + " ON R.WIP_PARTY_CODE=M.PARTY_CODE "
                            + "LEFT JOIN (SELECT PD.PIECE_NO,PH.PIECE_AMEND_NO,PH.APPROVED  FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                            + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                            + "WHERE PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO  AND COALESCE(PH.APPROVED,0)=0  AND COALESCE(PH.CANCELED,0)!=1) AS AMEND_WIP "
                            + "ON WIP_PIECE_NO=AMEND_WIP.PIECE_NO "
                            + "WHERE COALESCE(WIP_WARP_DATE,'0000-00-00')!='0000-00-00' AND "
                            + "COALESCE(WIP_WVG_DATE,'0000-00-00')='0000-00-00' AND "
                            + "COALESCE(WIP_MND_DATE,'0000-00-00')='0000-00-00' AND "
                            + "COALESCE(WIP_NDL_DATE,'0000-00-00')='0000-00-00' AND "
                            + "COALESCE(WIP_FNSG_DATE,'0000-00-00')='0000-00-00' "
                            + "AND COALESCE(WIP_REJECTED_FLAG,0)=0 AND WIP_PRIORITY_HOLD_CAN_FLAG=0 "
                            + "AND LEFT(WIP_EXT_PIECE_NO,5) IN (SELECT LEFT(PR_PIECE_NO,5) FROM PRODUCTION.FELT_SALES_PIECE_REGISTER "
                            + "WHERE COALESCE(PR_INVOICE_DATE,'0000-00-00')='0000-00-00' AND COALESCE(PR_REJECTED_FLAG,0)=0) "
                            + " AND WIP_EXT_PIECE_NO NOT IN (SELECT PROD_PIECE_NO FROM PRODUCTION.FELT_PROD_DATA "
                            + " WHERE PROD_DEPT='WEAVING' AND APPROVED=0 AND COALESCE(CANCELED,0)=0) ";

                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 1;

                    if (aList.ShowLOV()) {
                        if (!data.getStringValueFromDB("SELECT PD.PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                                + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                                + "WHERE COALESCE(PH.APPROVED,0)!=1 AND COALESCE(PH.CANCELED,0)!=1 AND "
                                + "PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO AND LEFT(PD.PIECE_NO,5)='" + aList.ReturnVal.substring(0, 5) + "' ").equalsIgnoreCase("")) {

                            String pUser = data.getStringValueFromDB("SELECT USER_NAME FROM PRODUCTION.FELT_PROD_DOC_DATA D,DINESHMILLS.D_COM_USER_MASTER U "
                                    + "WHERE D.USER_ID=U.USER_ID AND D.STATUS='W' "
                                    + "AND D.DOC_NO = (SELECT PD.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                                    + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                                    + "WHERE COALESCE(PH.APPROVED,0)!=1 AND COALESCE(PH.CANCELED,0)!=1 AND "
                                    + "PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO AND LEFT(PD.PIECE_NO,5)='" + aList.ReturnVal.substring(0, 5) + "') ");
                            JOptionPane.showMessageDialog(this, "Piece is Under Approval in WIP Piece Amend in User : " + pUser, "ERROR", JOptionPane.ERROR_MESSAGE);

//                            JOptionPane.showMessageDialog(this, "Piece is Under Approval in WIP Piece Amend", "ERROR", JOptionPane.ERROR_MESSAGE);
                        } else if (data.getIntValueFromDB("SELECT PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=(SELECT WIP_PARTY_CODE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')") == 1) {
                            JOptionPane.showMessageDialog(this, "Party is Locked...", "ERROR", JOptionPane.ERROR_MESSAGE);
                            return;
                        } else if (data.getIntValueFromDB("SELECT POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE CONCAT(TRIM(MM_PARTY_CODE),TRIM(MM_MACHINE_NO),TRIM(MM_MACHINE_POSITION))=(SELECT CONCAT(TRIM(WIP_PARTY_CODE),TRIM(WIP_MACHINE_NO),TRIM(WIP_POSITION_NO)) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')") == 1) {
                            JOptionPane.showMessageDialog(this, "Position is Locked...", "ERROR", JOptionPane.ERROR_MESSAGE);
                            return;
                        } else {
                            try {
                                Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 1);
                                String PieceNo = aList.ReturnVal;
                                String ocYearMonth = data.getStringValueFromDB("SELECT WIP_OC_MONTHYEAR FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + PieceNo + "'");
                                Table.setValueAt(ocYearMonth, Table.getSelectedRow(), 12);
                                String sql = "SELECT * FROM PRODUCTION.FELT_WIP_PIECE_REGISTER  "
                                        + "WHERE WIP_EXT_PIECE_NO='" + PieceNo + "' ";
                                System.out.println("Piece Selection query:" + sql);
                                ResultSet trs = data.getResult(sql);
                                trs.first();
                                if (trs.getRow() > 0) {
                                    Table.setValueAt(trs.getString("WIP_PARTY_CODE"), Table.getSelectedRow(), 2);
                                    //Table.setValueAt(trs.getString("THEORICAL_PICKS_10_CM"), Table.getSelectedRow(), 4);
                                    //Table.setValueAt(trs.getString("READ_SPACE"), Table.getSelectedRow(), 5);
                                    //Table.setValueAt(trs.getString("LENGTH"), Table.getSelectedRow(), 6);
                                    //Table.setValueAt(trs.getInt("LOOM_NO"), Table.getSelectedRow(), 7);
//                                    Table.changeSelection(Table.getSelectedRow(), 3, false, false);
//                                    Table.setValueAt(trs.getString("WIP_THORITICAL_WEIGHT"), Table.getSelectedRow(), 3);
                                    //CHANGE ON 30/06/2020 BY DHARMENDRA 
//                                    Table.setValueAt(trs.getString("WIP_PRODUCT_CODE"), Table.getSelectedRow(), 13);
//                                    Table.setValueAt(trs.getString("WIP_GROUP"), Table.getSelectedRow(), 14);
//                                    Table.setValueAt(trs.getString("WIP_GSM"), Table.getSelectedRow(), 15);
//                                    Table.setValueAt(trs.getString("WIP_STYLE"), Table.getSelectedRow(), 16);
                                    Table.setValueAt(data.getStringValueFromDB("SELECT BEAM_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL WHERE PIECE_NO ='" + PieceNo + "' AND INDICATOR!='DELETE' UNION ALL SELECT BEAM_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL WHERE PIECE_NO ='" + PieceNo + "' AND INDICATOR!='DELETE'"), Table.getSelectedRow(), 14);   //13
                                    Table.setValueAt(trs.getString("WIP_PRODUCT_CODE"), Table.getSelectedRow(), 16);  //15
                                    Table.setValueAt(trs.getString("WIP_GROUP"), Table.getSelectedRow(), 17);  //16
                                    Table.setValueAt(trs.getString("WIP_GSM"), Table.getSelectedRow(), 18);  //17
                                    Table.setValueAt(trs.getString("WIP_STYLE"), Table.getSelectedRow(), 19); //18
                                    Table.changeSelection(Table.getSelectedRow(), 3, false, false);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_TableKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbUserName;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdOpenDocument;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWarping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDayWeight;
    private javax.swing.JTextField txtFeltProductionDate;
    private javax.swing.JTextField txtFormNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMonthWeight;
    private javax.swing.JTextField txtPreviousWeight;
    private javax.swing.JTextField txtProductionDocumentNo;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalWeight;
    private javax.swing.JTextField txtdaypick;
    private javax.swing.JTextField txtdaypickmtr;
    private javax.swing.JTextField txtmonthpick;
    private javax.swing.JTextField txtmonthpickmtr;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {
        txtFeltProductionDate.setEnabled(pStat);
        txtFormNo.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        cmbUserName.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtFeltProductionDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtFormNo.setText("");
        txtProductionDocumentNo.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        txtPreviousWeight.setText(txtMonthWeight.getText());
        txtDayWeight.setText("0.00");
        txtTotalWeight.setText(txtMonthWeight.getText());

        txtdaypick.setText("0.00");
        txtdaypickmtr.setText("0.00");
        txtmonthpick.setText("0.00");
        txtmonthpickmtr.setText("0.00");

        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 707)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltWeaving.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }

                /*if(ObjFeltWeaving.getAttribute("CANCELED").getInt()==1) {
                 lblTitle.setBackground(Color.RED);
                 }*/
            }
            //============================================//

            String productionDate = EITLERPGLOBAL.formatDate(ObjFeltWeaving.getAttribute("PRODUCTION_DATE").getString());
            String documentNo = ObjFeltWeaving.getAttribute("PRODUCTION_DOCUMENT_NO").getString();
            lblTitle.setText(" FELT PRODUCTION WEAVING DETAILS - " + productionDate);
            lblRevNo.setText(Integer.toString((int) ObjFeltWeaving.getAttribute("REVISION_NO").getVal()));
            txtMonthWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltWeaving.getAttribute("TOTAL_WEIGHT").getVal(), 2)));
            txtPreviousWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltWeaving.getAttribute("PREVIOUS_WEIGHT").getVal(), 2)));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltWeaving.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate = true;

            //txtmonthpick.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltWeaving.getAttribute("TOTAL_PICK").getVal(), 2)));
            //txtmonthpickmtr.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltWeaving.getAttribute("TOTAL_PICKMTR").getVal(), 2)));
            double totalpick = ObjFeltWeaving.getAttribute("TOTAL_PICK").getVal();

            txtmonthpick.setText(EITLERPGLOBAL.formatNumber(totalpick));
            txtmonthpickmtr.setText(EITLERPGLOBAL.formatNumber(ObjFeltWeaving.getAttribute("TOTAL_PICKMTR").getVal()));

            //txtmonthpick.setText(Long.toString(ObjFeltWeaving.getAttribute("TOTAL_PICK").getLong()));
            //txtmonthpickmtr.setText(Long.toString(ObjFeltWeaving.getAttribute("TOTAL_PICKMTR").getLong()));
            FormatGrid();
            txtFeltProductionDate.setText(productionDate);
            txtProductionDocumentNo.setText(documentNo);
            txtFormNo.setText(ObjFeltWeaving.getAttribute("PRODUCTION_FORM_NO").getString());

            //Now Generate Table
            for (int i = 1; i <= ObjFeltWeaving.hmFeltWeavingDetails.size(); i++) {
                clsFeltWeavingDetails ObjFeltWeavingDetails = (clsFeltWeavingDetails) ObjFeltWeaving.hmFeltWeavingDetails.get(Integer.toString(i));

                Object[] rowData = new Object[24];
                rowData[0] = Integer.toString(i);
                String PieceNo = ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString();
                rowData[1] = ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString();
                rowData[2] = ObjFeltWeavingDetails.getAttribute("PRODUCTION_PARTY_CODE").getString();
//                String THWeight = data.getStringValueFromDB("SELECT WIP_THORITICAL_WEIGHT FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "' ");
//                rowData[3] = THWeight;
                rowData[3] = Double.toString(EITLERPGLOBAL.round(ObjFeltWeavingDetails.getAttribute("THORITICAL_WEIGHT").getVal(), 2));
                rowData[4] = Double.toString(EITLERPGLOBAL.round(ObjFeltWeavingDetails.getAttribute("WEIGHT").getVal(), 2));
                rowData[5] = ObjFeltWeavingDetails.getAttribute("PICKS_PER_10CMS").getString();
                rowData[6] = Double.toString(EITLERPGLOBAL.round(ObjFeltWeavingDetails.getAttribute("REED_SPACE").getVal(), 2));
                rowData[7] = Double.toString(EITLERPGLOBAL.round(ObjFeltWeavingDetails.getAttribute("LENGTH").getVal(), 2));
                rowData[8] = Integer.toString((int) ObjFeltWeavingDetails.getAttribute("LOOM_NO").getVal());

                rowData[9] = Double.toString(EITLERPGLOBAL.round(ObjFeltWeavingDetails.getAttribute("PICK").getVal(), 2));
                rowData[10] = Double.toString(EITLERPGLOBAL.round(ObjFeltWeavingDetails.getAttribute("PICKMTR").getVal(), 2));

                rowData[11] = ObjFeltWeavingDetails.getAttribute("REMARKS").getString();

                String ocYearMonth = data.getStringValueFromDB("SELECT WIP_OC_MONTHYEAR FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + PieceNo + "'");
                rowData[12] = ocYearMonth;

                rowData[13] = EITLERPGLOBAL.formatDate(ObjFeltWeavingDetails.getAttribute("WEAVE_DATE").getString()); //12
                rowData[14] = ObjFeltWeavingDetails.getAttribute("WARP_NO").getString();  //13
                rowData[15] = ObjFeltWeavingDetails.getAttribute("WEAVE_DIFF_DAYS").getString();  //14

                rowData[16] = data.getStringValueFromDB("SELECT WIP_PRODUCT_CODE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");  //15
                rowData[17] = data.getStringValueFromDB("SELECT WIP_GROUP FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");  //16
                rowData[18] = data.getStringValueFromDB("SELECT WIP_GSM FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");  //17
                rowData[19] = data.getStringValueFromDB("SELECT WIP_STYLE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + ObjFeltWeavingDetails.getAttribute("PRODUCTION_PIECE_NO").getString() + "'");  //18

                DataModel.addRow(rowData);
            }

            //set day weight and total weight in text boxes
            double dayWeight = 0, previousWeight = 0, daypick = 0, daypickmtr = 0;
            for (int i = 0; i < Table.getRowCount(); i++) {
//                if (Table.getValueAt(i, 3) != null) {
                if (Table.getValueAt(i, 4) != null) {
//                    dayWeight = dayWeight + Double.parseDouble((String) Table.getValueAt(i, 3));
                    dayWeight = dayWeight + Double.parseDouble((String) Table.getValueAt(i, 4));
                }

                if (Table.getValueAt(i, 9) != null) {

                    daypick = daypick + Double.parseDouble((String) Table.getValueAt(i, 9));
                }
                if (Table.getValueAt(i, 10) != null) {

                    daypickmtr = daypickmtr + Double.parseDouble((String) Table.getValueAt(i, 10));
                }
            }
            previousWeight = Double.parseDouble(txtPreviousWeight.getText());

            txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeight, 2)));
            txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(previousWeight + dayWeight, 2)));

            txtdaypick.setText(Double.toString(EITLERPGLOBAL.round(daypick, 2)));
            txtdaypickmtr.setText(Double.toString(EITLERPGLOBAL.round(daypickmtr, 2)));
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(707, documentNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString()) + ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10, 19);
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString()) + ObjFlow.getAttribute("ACTION_DATE").getString().substring(10, 19);
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltWeaving.getHistoryList(ObjFeltWeaving.getAttribute("PRODUCTION_DATE").getString(), txtProductionDocumentNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltWeaving ObjFeltWeaving = (clsFeltWeaving) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[6];

                rowData[0] = Integer.toString((int) ObjFeltWeaving.getAttribute("REVISION_NO").getVal());
                rowData[1] = FeltUser.getUserName((int) ObjFeltWeaving.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltWeaving.getAttribute("ENTRY_DATE").getString()) + ObjFeltWeaving.getAttribute("ENTRY_DATE").getString().substring(10, 19);

                String ApprovalStatus = "";

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltWeaving.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltWeaving.getAttribute("APPROVER_REMARKS").getString();
                rowData[5] = ObjFeltWeaving.getAttribute("FROM_IP").getString();

                DataModelUpdateHistory.addRow(rowData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        DoNotEvaluate = false;
    }

    private void FormatGrid() {
        try {
            cmdAdd.requestFocus();

            DataModel = new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModel);
            TableColumnModel ColModel = Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            //Add Columns to it
            DataModel.addColumn("Sr. No.");
            DataModel.addColumn("Piece No");
            DataModel.addColumn("Party Code");
            DataModel.addColumn("TH Weight");
            DataModel.addColumn("ACT Weight");
            DataModel.addColumn("Picks/10CMS");
            DataModel.addColumn("Reed Space");
            DataModel.addColumn("Length");
            DataModel.addColumn("Loom No");

            DataModel.addColumn("Pick");
            DataModel.addColumn("Pick Mtr");

            DataModel.addColumn("Remarks");

            DataModel.addColumn("OC MnthYr");

            DataModel.addColumn("Weave_Date");
            DataModel.addColumn("Warp_No");
            DataModel.addColumn("Weave_diff_days");

            DataModel.addColumn("Product Code");
            DataModel.addColumn("Group");
            DataModel.addColumn("GSM");
            DataModel.addColumn("Style");

            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);

            DataModel.SetReadOnly(14);  //13
            DataModel.SetReadOnly(15);  //14
            DataModel.SetReadOnly(16);  //15
            DataModel.SetReadOnly(17);  //16

            Table.getColumnModel().getColumn(0).setMaxWidth(45);

//            DataModel.SetReadOnly(3);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=707 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=707 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(707, ObjFeltWeaving.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(707, txtProductionDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(707, txtProductionDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(707, txtProductionDocumentNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void GenerateUserNameCombo() {
        HashMap hmUserNameList = new HashMap();

        cmbUserNameModel = new EITLComboModel();
        cmbUserName.removeAllItems();
        cmbUserName.setModel(cmbUserNameModel);

        hmUserNameList = ObjFeltWeaving.getUserNameList(EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gNewUserID, "WEAVING");
        for (int i = 1; i <= hmUserNameList.size(); i++) {
            cmbUserNameModel.addElement((ComboData) hmUserNameList.get(new Integer(i)));
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/

        // select hold for default approval
        OpgHold.setSelected(true);

        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(707, ObjFeltWeaving.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(707, FromUserID, ObjFeltWeaving.getAttribute("PRODUCTION_DOCUMENT_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(707, txtProductionDocumentNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6071, 60711)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6071, 60712)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6071, 60713)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6071, 60714)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        lblTitle.setBackground(Color.GRAY);
    }

    private void Edit() {
        String productionDocumentNo = (String) ObjFeltWeaving.getAttribute("PRODUCTION_DOCUMENT_NO").getObj();
        if (ObjFeltWeaving.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            GenerateUserNameCombo();

            if (clsFeltProductionApprovalFlow.IsCreator(707, productionDocumentNo)) {
                SetFields(true);
                txtFeltProductionDate.setEnabled(false);
                txtFormNo.setEnabled(false);
            } else {
                cmbUserName.setEnabled(true);
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "EDITING ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltWeaving.CanDelete(txtProductionDocumentNo.getText(), txtFeltProductionDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, ObjFeltWeaving.LastError, "DELETION ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        //recheck pick and pickmeter
        for (int rownum = 0; rownum <= Table.getRowCount() - 1; rownum++) {
            double picksper10cms1 = Double.parseDouble(Table.getModel().getValueAt(rownum, 5).toString());
            double reedspace1 = Double.parseDouble(Table.getModel().getValueAt(rownum, 6).toString());
            double length1 = Double.parseDouble(Table.getModel().getValueAt(rownum, 7).toString());

            double pick1 = picksper10cms1 * 10 * length1;
            double pickmtr1 = pick1 * reedspace1;

            Table.setValueAt(pick1, rownum, 9);
            Table.setValueAt(pickmtr1, rownum, 10);
        }

        String productionDate, productionDocumentNo;
        float weight = 0, reedSpace = 0, length = 0, THweight = 0, pick = 0, pickmtr = 0;
        int loomNo = 0, i = 0, j = 0, weave_diff_days = 0;
        String pieceNo = "", formNo = "", partyCode = "", remarks = "", warp_no = "", weave_date = "";
        String weightString = "", reedSpaceString = "", lengthString = "", picksPer10CMS = "", loomNoString = "", THweightString = "";
        productionDate = txtFeltProductionDate.getText().trim();
        formNo = txtFormNo.getText().trim();

        //Form level validations
        if (productionDate.equals("") || !EITLERPGLOBAL.isDate(productionDate)) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Valid Production Date.", "Wrong Production Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // check Production Date is Within Financial Year?
        java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date ProductionDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(productionDate));
        if ((ProductionDate.after(FinFromDate) || ProductionDate.compareTo(FinFromDate) == 0) && (ProductionDate.before(FinToDate) || ProductionDate.compareTo(FinToDate) == 0)) {
            //Within the year
        } else {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Production Date is Not Within Financial Year.", "FINANCIAL YEAR ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ProductionDate.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Production Date Must be Before or the Same Date as Today.", "Wrong Production Date", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // creating document no
        productionDocumentNo = "FW" + productionDate.substring(6, 10) + productionDate.substring(3, 5) + productionDate.substring(0, 2);
        // CHECK Production Weaving Date already exist in database?
        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltWeaving.checkProductionDateInDB(EITLERPGLOBAL.formatDateDB(productionDate))) {
                JOptionPane.showMessageDialog(frmFeltWeaving.this, "Production Date " + productionDate + " Already Exists.", "Production Date Exists ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (formNo.equals("") || formNo.equals(null)) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Form No.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // user name selection validation
        if (EITLERPGLOBAL.getComboCode(cmbUserName) == 0) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Select Your User Name", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (productionDocumentNo.equals("")) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Document No", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Check the no. of items in table
        if (Table.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Weaving Details Before Saving.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // check duplicate piece no in table
            for (int k = 0; k <= Table.getRowCount() - 1; k++) {
                for (int l = k; l <= Table.getRowCount() - 1; l++) {
                    if (l != k && ((String) Table.getValueAt(k, 1)).trim().equals(((String) Table.getValueAt(l, 1)).trim())) {
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row " + (k + 1) + " and " + (l + 1), "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }

            ObjFeltWeaving.hmFeltWeavingDetails.clear();
            //Check the entered details in Table.
            for (i = 0; i <= Table.getRowCount() - 1; i++) {
                j++;
                pieceNo = ((String) Table.getValueAt(i, 1)).trim().toUpperCase();
                if (pieceNo.equals("") || pieceNo.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Piece No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
                partyCode = ((String) Table.getValueAt(i, 2)).trim();
                if (partyCode.equals("") || partyCode.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Party Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
//                weightString = ((String) Table.getValueAt(i, 3)).trim();
                THweightString = ((String) Table.getValueAt(i, 3)).trim();
                if (THweightString.equals("") || THweightString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Thoritical Weight of Felt.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    THweight = Float.parseFloat(THweightString);
                }

                j++;
//                weightString = ((String) Table.getValueAt(i, 3)).trim();
                weightString = ((String) Table.getValueAt(i, 4)).trim();
                if (weightString.equals("") || weightString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Weight of Felt.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    weight = Float.parseFloat(weightString);
                }

                j++;
//                picksPer10CMS = ((String) Table.getValueAt(i, 4)).trim();
                picksPer10CMS = ((String) Table.getValueAt(i, 5)).trim();
                if (picksPer10CMS.equals("") || picksPer10CMS.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Pics Per 10 CMS", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                j++;
//                reedSpaceString = ((String) Table.getValueAt(i, 5)).trim();
                reedSpaceString = ((String) Table.getValueAt(i, 6)).trim();
                if (reedSpaceString.equals("") || reedSpaceString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Reed Space.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    reedSpace = Float.parseFloat(reedSpaceString);
                }

                j++;
//                lengthString = ((String) Table.getValueAt(i, 6)).trim();
                lengthString = ((String) Table.getValueAt(i, 7)).trim();
                if (lengthString.equals("") || lengthString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Length of Felt.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    length = Float.parseFloat(lengthString);
                }

                j++;
//                loomNoString = Table.getValueAt(i, 7).toString().trim();
                loomNoString = Table.getValueAt(i, 8).toString().trim();
                if (loomNoString.equals("") || loomNoString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Loom No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    loomNo = Integer.parseInt(loomNoString);
                }

                // j=0;
                j++;
                pick = Float.parseFloat(Table.getValueAt(i, 9).toString().trim());
                j++;
                pickmtr = Float.parseFloat(Table.getValueAt(i, 10).toString().trim());
                j++;
//                remarks = ((String) Table.getValueAt(i, 8)).trim();
                remarks = ((String) Table.getValueAt(i, 11)).trim();  //9

                j++;
//                weave_date = ((String) Table.getValueAt(i, 9)).trim();
                weave_date = ((String) Table.getValueAt(i, 13)).trim();//12//10

                j = 0;
//                warp_no = ((String) Table.getValueAt(i, 10)).trim();
                warp_no = ((String) Table.getValueAt(i, 14)).trim(); //13//11

                if (!OpgReject.isSelected()) {
                    //check Piece No is exist in Piece Register Amendment(WIP) is Pending ??
                    String IsAmendPending = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_HEADER PH,PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_DETAIL PD "
                            + "WHERE PD.PIECE_NO='" + pieceNo + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                    if (!IsAmendPending.equals("")) {
                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + pieceNo + " with DOC No : " + IsAmendPending + ". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    }

                    String IsAmendPending2 = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP PD WHERE PD.PIECE_NO='" + (pieceNo) + "' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                    if (!IsAmendPending2.equals("")) {
                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No " + (pieceNo) + " with DOC No : " + IsAmendPending2 + ". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    }

                    String IsDelinkPending = data.getStringValueFromDB("select A.PIECE_AMEND_NO from PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_DELINK A,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_DELINK B WHERE A.APPROVED=0 AND A.CANCELED!=1 AND B.PIECE_NO='" + pieceNo + "' AND A.PIECE_AMEND_NO=B.PIECE_AMEND_NO");
                    if (!IsDelinkPending.equals("")) {
                        JOptionPane.showMessageDialog(null, "DELINK Approval is Pending for Piece No " + (pieceNo) + " with DOC No : " + IsDelinkPending + ". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    }
                }

                // check piece no is already weaved?
                if (EditMode == EITLERPGLOBAL.ADD) {
                    if (ObjFeltWeaving.checkPieceNoInDB(pieceNo)) {
                        JOptionPane.showMessageDialog(frmFeltWeaving.this, "Piece No." + pieceNo + " Is Already Weaved.", " Piece No Already Exists", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                // check piece no is already weaved?
                if (EditMode == EITLERPGLOBAL.EDIT) {
                    if (ObjFeltWeaving.checkPieceNoInDB(pieceNo, productionDate)) {
                        JOptionPane.showMessageDialog(frmFeltWeaving.this, "Piece No." + pieceNo + " Is Already Weaved.", " Piece No Already Exists", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                String machineNo = data.getStringValueFromDB("SELECT WIP_MACHINE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER  WHERE WIP_EXT_PIECE_NO='" + pieceNo + "' ");
                String positionNo = data.getStringValueFromDB("SELECT WIP_POSITION_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER  WHERE WIP_EXT_PIECE_NO='" + pieceNo + "' ");

                if (data.IsRecordExist("SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CLOSE_IND=1 AND PARTY_CODE='" + partyCode + "' ")) {
                    JOptionPane.showMessageDialog(null, "Party closed in Party Master.");
                    return;
                } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_HEADER WHERE MACHINE_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' ")) {
                    JOptionPane.showMessageDialog(null, "Party Machine closed in Machine Master at Row : " + (i + 1));
                    return;
                } else if (data.IsRecordExist("SELECT * FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE POSITION_CLOSE_IND=1 AND MM_PARTY_CODE='" + partyCode + "' AND MM_MACHINE_NO='" + machineNo + "' AND MM_MACHINE_POSITION='" + positionNo + "' ")) {
                    JOptionPane.showMessageDialog(null, "Party Machine Position closed in Machine Master at Row : " + (i + 1));
                    return;
                }

                clsFeltWeavingDetails ObjFeltWeavingDetails = new clsFeltWeavingDetails();

                ObjFeltWeavingDetails.setAttribute("PRODUCTION_PIECE_NO", pieceNo);
                ObjFeltWeavingDetails.setAttribute("PRODUCTION_PARTY_CODE", partyCode);
                ObjFeltWeavingDetails.setAttribute("THORITICAL_WEIGHT", THweight);
                ObjFeltWeavingDetails.setAttribute("WEIGHT", weight);
                ObjFeltWeavingDetails.setAttribute("PICKS_PER_10CMS", picksPer10CMS);
                ObjFeltWeavingDetails.setAttribute("REED_SPACE", reedSpace);
                ObjFeltWeavingDetails.setAttribute("LENGTH", length);
                ObjFeltWeavingDetails.setAttribute("LOOM_NO", loomNo);
                ObjFeltWeavingDetails.setAttribute("REMARKS", remarks);
                ObjFeltWeavingDetails.setAttribute("WEAVE_DATE", weave_date);
                ObjFeltWeavingDetails.setAttribute("WARP_NO", warp_no);
                ObjFeltWeavingDetails.setAttribute("WEAVE_DIFF_DAYS", weave_diff_days);

                ObjFeltWeavingDetails.setAttribute("PICK", pick);
                ObjFeltWeavingDetails.setAttribute("PICKMTR", pickmtr);

                ObjFeltWeaving.hmFeltWeavingDetails.put(Integer.toString(ObjFeltWeaving.hmFeltWeavingDetails.size() + 1), ObjFeltWeavingDetails);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter Correct Details at Row " + (i + 1) + " and Column " + (j + 1) + ". Error is " + nfe.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            j = 0;
            nfe.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(frmFeltWeaving.this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltWeaving.setAttribute("PRODUCTION_DATE", productionDate);
        ObjFeltWeaving.setAttribute("PRODUCTION_DOCUMENT_NO", productionDocumentNo);
        ObjFeltWeaving.setAttribute("PRODUCTION_FORM_NO", formNo);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltWeaving.Insert()) {
                DisplayData();

                if (OpgFinal.isSelected()) {
                    try {
                        String DOC_NO = txtProductionDocumentNo.getText();
                        String DOC_DATE = txtFeltProductionDate.getText();
                        String Party_Code = "";

                        //String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        String responce = JavaMail.sendNotificationMailOfDetail(707, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), false);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            } else {
                JOptionPane.showMessageDialog(frmFeltWeaving.this, "Error occured while saving. Error is " + ObjFeltWeaving.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltWeaving.Update()) {
                DisplayData();

                if (OpgFinal.isSelected()) {
                    try {
                        String DOC_NO = txtProductionDocumentNo.getText();
                        String DOC_DATE = txtFeltProductionDate.getText();
                        String Party_Code = "";

                        //String responce = JavaMail.sendFinalApprovalMail(603, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), true);
                        String responce = JavaMail.sendNotificationMailOfDetail(707, DOC_NO, DOC_DATE, Party_Code, EITLERPGLOBAL.gNewUserID, EITLERPGLOBAL.getComboCode(cmbHierarchy), false);
                        System.out.println("Send Mail Responce : " + responce);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                }
            } else {
                JOptionPane.showMessageDialog(frmFeltWeaving.this, "Error occured while saving editing. Error is " + ObjFeltWeaving.LastError, "SAVING ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjFeltWeaving.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltWeaving.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltWeaving.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltWeaving.setAttribute("FROM_REMARKS", txtToRemarks.getText().trim());
        ObjFeltWeaving.setAttribute("UPDATED_BY", EITLERPGLOBAL.getComboCode(cmbUserName));
        //ObjFeltWeaving.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if (OpgApprove.isSelected()) {
            ObjFeltWeaving.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltWeaving.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltWeaving.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltWeaving.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltWeaving.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltWeaving.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltWeaving.setAttribute("CREATED_BY", (int) ObjFeltWeaving.getAttribute("CREATED_BY").getVal());
            ObjFeltWeaving.setAttribute("CREATED_DATE", ObjFeltWeaving.getAttribute("CREATED_DATE").getString());
            ObjFeltWeaving.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Production.FeltWeaving.frmFindFeltWeaving", true);
        frmFindFeltWeaving ObjFindFeltWeaving = (frmFindFeltWeaving) ObjLoader.getObj();

        if (ObjFindFeltWeaving.Cancelled == false) {
            if (!ObjFeltWeaving.Filter(ObjFindFeltWeaving.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltWeaving.this, " No records found.", "Find Felt Weaving Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by production date
    public void Find(String prodDate) {
        ObjFeltWeaving.Filter("AND PROD_DATE='" + prodDate + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find details by piece no.
    public void Find(String pieceNo, String prodDate) {
        
        //ObjFeltWeaving.Filter("AND PROD_PIECE_NO+0='" + pieceNo + "'");
        ObjFeltWeaving.Filter("AND PROD_PIECE_NO='" + pieceNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltWeaving.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=707 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltWeaving.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltWeaving.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltWeaving.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltWeaving.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);

        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        DataModelUpdateHistory.addColumn("From Ip");
    }

}
