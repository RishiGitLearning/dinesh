/*
 * frmFeltRejection.java
 *
 * Created on May 23, 2013, 3:09 PM
 */
package EITLERP.Production.FeltRejection;

/**
 *
 * @author VIVEK KUMAR
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.*;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTextField;

public class frmFeltRejection extends javax.swing.JApplet {

    private int EditMode = 0;
    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromUserId = 0;
    private int createdBy = 0;
    private int approvalSequence = 0;
    private char feltDept = ' ';
    private String createdDate = "";
    private boolean rejected = false;
    public boolean PENDING_DOCUMENT = false; //for refresh pending document module
    private int FFNo = 0; //First Free No.

    private clsFeltRejection ObjFeltRejection;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;

    public frmPendingApprovals frmPA;

    /**
     * Creates new form frmFeltProductionWeaving
     */
    public void init() {
        System.gc();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        if (scrwidth > 1000) {
            scrwidth = 1000;
        }

        setSize(scrwidth, scrheight - 50);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        txtDept.setVisible(false);
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.addItem("NEEDLING");
        txtDeptCmb.addItem("FINISHING");
        ObjFeltRejection = new clsFeltRejection();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateUserNameCombo();
        cmbUserName.setVisible(false);
        txtpiecestage.setVisible(false);
        jLabel20.setVisible(false);
        txtPieceNo.setEnabled(false);
        txtRejOrgFrom.setEnabled(false);

        lblTitle.setForeground(Color.WHITE);
        if (ObjFeltRejection.LoadData()) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while loading data. Error is " + ObjFeltRejection.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemPlanning = new javax.swing.JMenuItem();
        jMenuItemBeamOrder = new javax.swing.JMenuItem();
        jMenuItemBeamOrderHDS = new javax.swing.JMenuItem();
        jMenuItemWeaving = new javax.swing.JMenuItem();
        jMenuItemMending = new javax.swing.JMenuItem();
        jMenuItemSeaming = new javax.swing.JMenuItem();
        jMenuItemNeedling = new javax.swing.JMenuItem();
        jMenuItemFinishing = new javax.swing.JMenuItem();
        jMenuItemHeatSetting = new javax.swing.JMenuItem();
        jMenuItemMarking = new javax.swing.JMenuItem();
        jMenuItemSplicing = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRejectionDate = new javax.swing.JTextField();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtFormNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDocumentNo = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtActualWeight = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDept = new javax.swing.JTextField();
        txtStyle = new javax.swing.JTextField();
        txtGroup = new javax.swing.JTextField();
        txtMfgSize = new javax.swing.JTextField();
        txtActualSize = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtmfgWeight = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtGSM = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtRejectionReason = new javax.swing.JTextField();
        cmdRejectionReasonBig = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtSynPercent = new javax.swing.JTextField();
        txtPartyCode = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtDeptComment = new javax.swing.JTextField();
        txtAction = new javax.swing.JTextField();
        cmdDeptCommentBig = new javax.swing.JButton();
        cmdActionBig = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cmbUserName = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtAdjWeight = new javax.swing.JTextField();
        txtAdjGSM = new javax.swing.JTextField();
        txtAdjWidth = new javax.swing.JTextField();
        txtAdjLength = new javax.swing.JTextField();
        txtMfggsm = new javax.swing.JTextField();
        txtActualgsm = new javax.swing.JTextField();
        txtMfgwidth = new javax.swing.JTextField();
        txtActualwidth = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtPieceNo1 = new javax.swing.JTextField();
        txtPieceNo = new javax.swing.JTextField();
        notprocess = new javax.swing.JCheckBox();
        txtDeptCmb = new javax.swing.JComboBox();
        txtpiecestage = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtBaseGSM = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtWeave = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtWebGSM = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtCFM = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtPPType = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txtRejectionLocation = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        cmbObsoleteUPNStatus = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        txtLoomNo = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        txtScrapReason = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        txtUnMappedReason = new javax.swing.JTextField();
        cmdUnMappedReason = new javax.swing.JButton();
        cmdScrapReason = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtRejOrgFrom = new javax.swing.JTextField();
        lblRejOrgFrom = new javax.swing.JLabel();
        lblRejOrgFrom1 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemPlanning.setText("PLANNING");
        jMenuItemPlanning.setToolTipText("");
        jMenuItemPlanning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPlanningActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemPlanning);

        jMenuItemBeamOrder.setText("BEAM ORDER");
        jMenuItemBeamOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBeamOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemBeamOrder);

        jMenuItemBeamOrderHDS.setText("BEAM ORDER[HDS]");
        jMenuItemBeamOrderHDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBeamOrderHDSActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemBeamOrderHDS);

        jMenuItemWeaving.setText("WEAVING");
        jMenuItemWeaving.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWeavingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWeaving);

        jMenuItemMending.setText("MENDING");
        jMenuItemMending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMendingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemMending);

        jMenuItemSeaming.setText("SEAMING");
        jMenuItemSeaming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSeamingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemSeaming);

        jMenuItemNeedling.setText("NEEDLING");
        jMenuItemNeedling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNeedlingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemNeedling);

        jMenuItemFinishing.setText("FINISHING");
        jMenuItemFinishing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFinishingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemFinishing);

        jMenuItemHeatSetting.setText("HEATSETTING");
        jMenuItemHeatSetting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHeatSettingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemHeatSetting);

        jMenuItemMarking.setText("MARKING");
        jMenuItemMarking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMarkingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemMarking);

        jMenuItemSplicing.setText("SPLICING");
        jMenuItemSplicing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSplicingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemSplicing);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 1000, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT REJECTION DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 1000, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Rejection Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(13, 12, 110, 20);

        txtRejectionDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtRejectionDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRejectionDate.setEnabled(false);
        txtRejectionDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRejectionDateFocusGained(evt);
            }
        });
        Tab1.add(txtRejectionDate);
        txtRejectionDate.setBounds(125, 10, 93, 21);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(650, 410, 102, 25);

        jLabel4.setText("Form No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(13, 42, 110, 20);

        txtFormNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFormNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFormNo.setEnabled(false);
        txtFormNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFormNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFormNoFocusLost(evt);
            }
        });
        Tab1.add(txtFormNo);
        txtFormNo.setBounds(125, 40, 93, 21);

        jLabel5.setText("Document No.");
        Tab1.add(jLabel5);
        jLabel5.setBounds(270, 10, 120, 20);

        txtDocumentNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDocumentNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDocumentNo.setEnabled(false);
        Tab1.add(txtDocumentNo);
        txtDocumentNo.setBounds(390, 10, 160, 21);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(220, 12, 20, 18);

        jLabel12.setText("Department");
        Tab1.add(jLabel12);
        jLabel12.setBounds(270, 40, 120, 20);

        txtActualWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtActualWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtActualWeight.setEnabled(false);
        txtActualWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtActualWeightFocusLost(evt);
            }
        });
        Tab1.add(txtActualWeight);
        txtActualWeight.setBounds(340, 180, 70, 21);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("ADJUSTABLE ");
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 210, 90, 20);

        txtDept.setEditable(false);
        txtDept.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDept.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDept.setEnabled(false);
        Tab1.add(txtDept);
        txtDept.setBounds(390, 40, 160, 21);

        txtStyle.setEditable(false);
        txtStyle.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtStyle.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtStyle.setEnabled(false);
        Tab1.add(txtStyle);
        txtStyle.setBounds(620, 40, 126, 21);

        txtGroup.setEditable(false);
        txtGroup.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtGroup.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtGroup.setEnabled(false);
        Tab1.add(txtGroup);
        txtGroup.setBounds(390, 100, 126, 21);

        txtMfgSize.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtMfgSize.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMfgSize.setEnabled(false);
        txtMfgSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMfgSizeFocusLost(evt);
            }
        });
        Tab1.add(txtMfgSize);
        txtMfgSize.setBounds(100, 150, 70, 21);

        txtActualSize.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtActualSize.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtActualSize.setEnabled(false);
        txtActualSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtActualSizeFocusLost(evt);
            }
        });
        Tab1.add(txtActualSize);
        txtActualSize.setBounds(100, 180, 70, 21);

        jLabel7.setText("Felt No.");
        Tab1.add(jLabel7);
        jLabel7.setBounds(13, 72, 110, 20);

        jLabel13.setText("Style");
        Tab1.add(jLabel13);
        jLabel13.setBounds(570, 40, 60, 20);

        jLabel14.setText("Group");
        Tab1.add(jLabel14);
        jLabel14.setBounds(270, 100, 120, 20);

        txtmfgWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtmfgWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtmfgWeight.setEnabled(false);
        txtmfgWeight.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtmfgWeightFocusLost(evt);
            }
        });
        Tab1.add(txtmfgWeight);
        txtmfgWeight.setBounds(340, 150, 70, 21);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("BILL ");
        Tab1.add(jLabel10);
        jLabel10.setBounds(50, 180, 50, 20);

        txtGSM.setEditable(false);
        txtGSM.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtGSM.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtGSM.setEnabled(false);
        Tab1.add(txtGSM);
        txtGSM.setBounds(620, 70, 126, 21);

        jLabel15.setText("GSM");
        Tab1.add(jLabel15);
        jLabel15.setBounds(570, 70, 60, 20);

        jLabel11.setText("Rejection Reason");
        Tab1.add(jLabel11);
        jLabel11.setBounds(10, 320, 130, 20);

        txtRejectionReason.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtRejectionReason.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRejectionReason.setEnabled(false);
        Tab1.add(txtRejectionReason);
        txtRejectionReason.setBounds(140, 320, 560, 19);

        cmdRejectionReasonBig.setText("...");
        cmdRejectionReasonBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRejectionReasonBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRejectionReasonBig);
        cmdRejectionReasonBig.setBounds(700, 320, 49, 21);

        jLabel16.setText("Syn%");
        Tab1.add(jLabel16);
        jLabel16.setBounds(570, 10, 60, 20);

        txtSynPercent.setEditable(false);
        txtSynPercent.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtSynPercent.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtSynPercent.setEnabled(false);
        Tab1.add(txtSynPercent);
        txtSynPercent.setBounds(620, 10, 126, 21);

        txtPartyCode.setEditable(false);
        txtPartyCode.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPartyCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPartyCode.setEnabled(false);
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(390, 70, 160, 21);

        jLabel17.setText("Party Code");
        Tab1.add(jLabel17);
        jLabel17.setBounds(270, 70, 120, 20);

        txtDeptComment.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtDeptComment.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDeptComment.setEnabled(false);
        Tab1.add(txtDeptComment);
        txtDeptComment.setBounds(140, 350, 560, 19);

        txtAction.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAction.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAction.setEnabled(false);
        Tab1.add(txtAction);
        txtAction.setBounds(140, 380, 560, 19);

        cmdDeptCommentBig.setText("...");
        cmdDeptCommentBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeptCommentBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdDeptCommentBig);
        cmdDeptCommentBig.setBounds(700, 350, 49, 21);

        cmdActionBig.setText("...");
        cmdActionBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdActionBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdActionBig);
        cmdActionBig.setBounds(700, 380, 49, 21);

        jLabel18.setText("HOD's Comment");
        Tab1.add(jLabel18);
        jLabel18.setBounds(10, 350, 130, 20);

        jLabel19.setText("Action");
        Tab1.add(jLabel19);
        jLabel19.setBounds(10, 380, 120, 20);

        jLabel20.setText("User Name");
        Tab1.add(jLabel20);
        jLabel20.setBounds(10, 410, 110, 30);

        cmbUserName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbUserName.setEnabled(false);
        Tab1.add(cmbUserName);
        cmbUserName.setBounds(130, 410, 250, 26);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Length");
        Tab1.add(jLabel21);
        jLabel21.setBounds(100, 130, 70, 20);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Width");
        Tab1.add(jLabel22);
        jLabel22.setBounds(180, 130, 70, 20);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("GSM");
        Tab1.add(jLabel23);
        jLabel23.setBounds(260, 130, 70, 20);

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Weight");
        Tab1.add(jLabel24);
        jLabel24.setBounds(340, 130, 70, 20);

        txtAdjWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAdjWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAdjWeight.setEnabled(false);
        Tab1.add(txtAdjWeight);
        txtAdjWeight.setBounds(340, 210, 70, 21);

        txtAdjGSM.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAdjGSM.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAdjGSM.setEnabled(false);
        txtAdjGSM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAdjGSMFocusLost(evt);
            }
        });
        Tab1.add(txtAdjGSM);
        txtAdjGSM.setBounds(260, 210, 70, 21);

        txtAdjWidth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAdjWidth.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAdjWidth.setEnabled(false);
        txtAdjWidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAdjWidthFocusLost(evt);
            }
        });
        Tab1.add(txtAdjWidth);
        txtAdjWidth.setBounds(180, 210, 70, 21);

        txtAdjLength.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtAdjLength.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAdjLength.setEnabled(false);
        txtAdjLength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAdjLengthFocusLost(evt);
            }
        });
        Tab1.add(txtAdjLength);
        txtAdjLength.setBounds(100, 210, 70, 21);

        txtMfggsm.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtMfggsm.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMfggsm.setEnabled(false);
        txtMfggsm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMfggsmFocusLost(evt);
            }
        });
        Tab1.add(txtMfggsm);
        txtMfggsm.setBounds(260, 150, 70, 21);

        txtActualgsm.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtActualgsm.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtActualgsm.setEnabled(false);
        txtActualgsm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtActualgsmFocusLost(evt);
            }
        });
        Tab1.add(txtActualgsm);
        txtActualgsm.setBounds(260, 180, 70, 21);

        txtMfgwidth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtMfgwidth.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMfgwidth.setEnabled(false);
        txtMfgwidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMfgwidthFocusLost(evt);
            }
        });
        Tab1.add(txtMfgwidth);
        txtMfgwidth.setBounds(180, 150, 70, 21);

        txtActualwidth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtActualwidth.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtActualwidth.setEnabled(false);
        txtActualwidth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtActualwidthFocusLost(evt);
            }
        });
        Tab1.add(txtActualwidth);
        txtActualwidth.setBounds(180, 180, 70, 21);

        jLabel8.setText("Felt New No.");
        Tab1.add(jLabel8);
        jLabel8.setBounds(10, 100, 110, 20);

        txtPieceNo1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPieceNo1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPieceNo1.setEnabled(false);
        Tab1.add(txtPieceNo1);
        txtPieceNo1.setBounds(125, 100, 130, 21);

        txtPieceNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPieceNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPieceNo.setEnabled(false);
        txtPieceNo = new JTextFieldHint(new JTextField(),"Search by F1");
        txtPieceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPieceNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPieceNoFocusLost(evt);
            }
        });
        txtPieceNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPieceNoKeyPressed(evt);
            }
        });
        Tab1.add(txtPieceNo);
        txtPieceNo.setBounds(125, 70, 130, 21);

        notprocess.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        notprocess.setText("Not Process");
        Tab1.add(notprocess);
        notprocess.setBounds(420, 210, 130, 25);

        txtDeptCmb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDeptCmb.setEnabled(false);
        txtDeptCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeptCmbActionPerformed(evt);
            }
        });
        Tab1.add(txtDeptCmb);
        txtDeptCmb.setBounds(390, 40, 160, 26);

        txtpiecestage.setEditable(false);
        txtpiecestage.setText("Piece Stage");
        Tab1.add(txtpiecestage);
        txtpiecestage.setBounds(400, 420, 130, 20);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText("Base GSM");
        Tab1.add(jLabel25);
        jLabel25.setBounds(770, 10, 80, 20);

        txtBaseGSM.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtBaseGSM.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtBaseGSM.setEnabled(false);
        txtBaseGSM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBaseGSMFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBaseGSMFocusLost(evt);
            }
        });
        Tab1.add(txtBaseGSM);
        txtBaseGSM.setBounds(860, 10, 90, 21);

        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel27.setText("Weave");
        Tab1.add(jLabel27);
        jLabel27.setBounds(790, 70, 60, 20);

        txtWeave.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtWeave.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtWeave.setEnabled(false);
        txtWeave.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtWeaveFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWeaveFocusLost(evt);
            }
        });
        Tab1.add(txtWeave);
        txtWeave.setBounds(860, 70, 90, 21);

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel28.setText("Web GSM");
        Tab1.add(jLabel28);
        jLabel28.setBounds(770, 40, 80, 20);

        txtWebGSM.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtWebGSM.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtWebGSM.setEnabled(false);
        txtWebGSM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtWebGSMFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtWebGSMFocusLost(evt);
            }
        });
        Tab1.add(txtWebGSM);
        txtWebGSM.setBounds(860, 40, 90, 21);

        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel29.setText("CFM(Targeted)");
        Tab1.add(jLabel29);
        jLabel29.setBounds(540, 100, 110, 20);

        txtCFM.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtCFM.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCFM.setEnabled(false);
        txtCFM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCFMFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCFMFocusLost(evt);
            }
        });
        Tab1.add(txtCFM);
        txtCFM.setBounds(660, 100, 90, 21);

        jLabel30.setText("Paper Prod Type");
        Tab1.add(jLabel30);
        jLabel30.setBounds(600, 130, 130, 20);

        txtPPType.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPPType.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPPType.setEnabled(false);
        txtPPType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPPTypeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPPTypeFocusLost(evt);
            }
        });
        Tab1.add(txtPPType);
        txtPPType.setBounds(730, 130, 220, 21);

        jLabel37.setText("Rejection Location");
        Tab1.add(jLabel37);
        jLabel37.setBounds(600, 160, 140, 20);

        txtRejectionLocation.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtRejectionLocation.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRejectionLocation.setEnabled(false);
        txtRejectionLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRejectionLocationFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRejectionLocationFocusLost(evt);
            }
        });
        Tab1.add(txtRejectionLocation);
        txtRejectionLocation.setBounds(740, 160, 210, 21);

        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel38.setText("ORDER ");
        Tab1.add(jLabel38);
        jLabel38.setBounds(30, 150, 70, 20);

        jLabel39.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel39.setText("(No new piece will generated by system)");
        Tab1.add(jLabel39);
        jLabel39.setBounds(440, 230, 310, 20);

        cmbObsoleteUPNStatus.setEditable(true);
        cmbObsoleteUPNStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "MAPPED", "UNMAPPED", "SCRAP" }));
        cmbObsoleteUPNStatus.setEnabled(false);
        cmbObsoleteUPNStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbObsoleteUPNStatusItemStateChanged(evt);
            }
        });
        Tab1.add(cmbObsoleteUPNStatus);
        cmbObsoleteUPNStatus.setBounds(840, 190, 110, 24);

        jLabel49.setText("Loom No ");
        Tab1.add(jLabel49);
        jLabel49.setBounds(790, 100, 70, 20);

        txtLoomNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtLoomNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtLoomNo.setEnabled(false);
        txtLoomNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLoomNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLoomNoFocusLost(evt);
            }
        });
        Tab1.add(txtLoomNo);
        txtLoomNo.setBounds(860, 100, 90, 21);

        jLabel50.setText("Scrap Reason");
        Tab1.add(jLabel50);
        jLabel50.setBounds(10, 290, 130, 20);

        txtScrapReason.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtScrapReason.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtScrapReason.setEnabled(false);
        txtScrapReason.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtScrapReasonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtScrapReasonFocusLost(evt);
            }
        });
        Tab1.add(txtScrapReason);
        txtScrapReason.setBounds(140, 290, 560, 21);

        jLabel51.setText("UnMapped Reason");
        Tab1.add(jLabel51);
        jLabel51.setBounds(10, 260, 130, 20);

        txtUnMappedReason.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtUnMappedReason.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtUnMappedReason.setEnabled(false);
        txtUnMappedReason.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUnMappedReasonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUnMappedReasonFocusLost(evt);
            }
        });
        Tab1.add(txtUnMappedReason);
        txtUnMappedReason.setBounds(140, 260, 560, 21);

        cmdUnMappedReason.setText("...");
        cmdUnMappedReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUnMappedReasonActionPerformed(evt);
            }
        });
        Tab1.add(cmdUnMappedReason);
        cmdUnMappedReason.setBounds(700, 260, 49, 21);

        cmdScrapReason.setText("...");
        cmdScrapReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdScrapReasonActionPerformed(evt);
            }
        });
        Tab1.add(cmdScrapReason);
        cmdScrapReason.setBounds(700, 290, 49, 21);

        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel40.setText("Obsolete UPN Assign Status ");
        Tab1.add(jLabel40);
        jLabel40.setBounds(630, 190, 210, 20);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        txtRejOrgFrom.setEditable(false);
        txtRejOrgFrom.setEnabled(false);
        txtRejOrgFrom = new JTextFieldHint(new JTextField(),"Press F1");
        txtRejOrgFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRejOrgFromKeyPressed(evt);
            }
        });
        jPanel2.add(txtRejOrgFrom);
        txtRejOrgFrom.setBounds(10, 49, 150, 25);

        lblRejOrgFrom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRejOrgFrom.setText("From");
        lblRejOrgFrom.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lblRejOrgFrom.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanel2.add(lblRejOrgFrom);
        lblRejOrgFrom.setBounds(0, 20, 170, 20);

        lblRejOrgFrom1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRejOrgFrom1.setText("Rejection Originated");
        lblRejOrgFrom1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblRejOrgFrom1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel2.add(lblRejOrgFrom1);
        lblRejOrgFrom1.setBounds(0, 10, 170, 20);

        Tab1.add(jPanel2);
        jPanel2.setBounds(420, 130, 170, 80);

        Tab.addTab("Rejection Details", null, Tab1, "Felt Rejection Details");

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 42, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 40, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 72, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 70, 444, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 100, 73, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 100, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 213, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 210, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 247, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 245, 492, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(365, 303, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(536, 69, 49, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(477, 303, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 567, 130);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 161, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 178, 450, 160);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(468, 313, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(468, 214, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(468, 179, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(468, 248, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 1000, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 560, 990, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemMendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMendingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'M';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.setSelectedItem("MENDING");
        txtDept.setText("MENDING");
        txtpiecestage.setText("MENDING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemMendingActionPerformed

    private void jMenuItemFinishingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFinishingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'F';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.addItem("NEEDLING");
        txtDeptCmb.addItem("FINISHING");
        txtDeptCmb.setSelectedItem("FINISHING");
        txtDept.setText("FINISHING");
        txtpiecestage.setText("FINISHING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemFinishingActionPerformed

    private void cmdActionBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdActionBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtAction;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdActionBigActionPerformed

    private void cmdDeptCommentBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeptCommentBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtDeptComment;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdDeptCommentBigActionPerformed

    private void cmdRejectionReasonBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRejectionReasonBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtRejectionReason;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRejectionReasonBigActionPerformed

    private void jMenuItemNeedlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNeedlingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'N';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.addItem("NEEDLING");
        txtDeptCmb.setSelectedItem("NEEDLING");
        txtDept.setText("NEEDLING");
        txtpiecestage.setText("NEEDLING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemNeedlingActionPerformed

    private void jMenuItemWeavingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWeavingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'W';
//        EITLERP.SelectFirstFree aList = new EITLERP.SelectFirstFree();
//        aList.ModuleID = 764;
//        aList.FirstFreeNo = 238;
//        FFNo = aList.FirstFreeNo;
//        txtDocumentNo.setText(EITLERP.clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 764, FFNo, false));
//        lblTitle.setText("FELT REJECTION DETAILS - " + txtDocumentNo.getText());
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.setSelectedItem("WEAVING");
        txtDept.setText("WEAVING");
        txtpiecestage.setText("WEAVING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemWeavingActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        try {
            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltRejection.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&DOC_NO=" + txtDocumentNo.getText().trim());
            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "File error " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        try {
            URL reportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptFeltRejection.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&DOC_NO=" + txtDocumentNo.getText().trim());
            EITLERPGLOBAL.loginContext.showDocument(reportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "File error " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void txtFormNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFormNoFocusGained
        ShowMessage("Enter Form No.");
    }//GEN-LAST:event_txtFormNoFocusGained

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if (TableUpdateHistory.getRowCount() > 0 && TableUpdateHistory.getSelectedRow() >= 0) {
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(), 4).toString());
            bigEdit.ShowEdit();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row from Document Update History", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltRejection.HistoryView = false;
        ObjFeltRejection.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed

    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltRejection.ShowHistory(EITLERPGLOBAL.formatDateDB(txtRejectionDate.getText()), txtDocumentNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed

    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed

    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed

    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtRejectionDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void txtRejectionDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRejectionDateFocusGained
        ShowMessage("Enter Rejection Date");
    }//GEN-LAST:event_txtRejectionDateFocusGained

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if (clsFeltProductionApprovalFlow.IsOnceRejectedDoc(764, txtDocumentNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltRejection.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Are you sure want to delete this record ?", "DELETE RECORD", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
        txtFormNo.requestFocus();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void txtFormNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFormNoFocusLost
        txtPieceNo.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtFormNoFocusLost

    private void txtMfgSizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMfgSizeFocusLost
        txtActualSize.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtMfgSizeFocusLost

    private void txtActualSizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtActualSizeFocusLost
        txtmfgWeight.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtActualSizeFocusLost

    private void txtmfgWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtmfgWeightFocusLost
        txtActualWeight.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtmfgWeightFocusLost

    private void txtActualWeightFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtActualWeightFocusLost
        txtRejectionReason.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_txtActualWeightFocusLost

    private void jMenuItemBeamOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBeamOrderActionPerformed
        // TODO add your handling code here:
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'B';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.setSelectedItem("BEAM");
        txtDept.setText("BEAM");
        txtpiecestage.setText("BEAM");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemBeamOrderActionPerformed

    private void jMenuItemBeamOrderHDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBeamOrderHDSActionPerformed
        // TODO add your handling code here:
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'H';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.setSelectedItem("BEAM[HDS]");
        txtDept.setText("BEAM[HDS]");
        txtpiecestage.setText("BEAM[HDS]");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemBeamOrderHDSActionPerformed

    private void jMenuItemSeamingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSeamingActionPerformed
        // TODO add your handling code here:
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'S';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.setSelectedItem("SEAMING");
        txtDept.setText("SEAMING");
        txtpiecestage.setText("SEAMING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemSeamingActionPerformed

    private void txtMfggsmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMfggsmFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMfggsmFocusLost

    private void txtActualgsmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtActualgsmFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActualgsmFocusLost

    private void txtMfgwidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMfgwidthFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMfgwidthFocusLost

    private void txtActualwidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtActualwidthFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActualwidthFocusLost

    private void txtPieceNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPieceNoFocusGained
        // TODO add your handling code here:
        lblStatus.setText("Enter Felt No.");
    }//GEN-LAST:event_txtPieceNoFocusGained

    private void txtPieceNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPieceNoFocusLost
        // TODO add your handling code here:
        String sql = "";
        if (txtPieceNo.getText().trim().equals("") || txtPieceNo.getText().trim().equals(null)) {
            //JOptionPane.showMessageDialog(this,"Enter Piece No","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            lblStatus.setText("");
            if (txtpiecestage.getText().equalsIgnoreCase("BEAM")) {
                sql = "SELECT PIECE_NO,D.PARTY_CODE,PARTY_NAME,D.BEAM_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.PARTY_CODE=M.PARTY_CODE "
                        + "LEFT JOIN PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
                        + "ON D.DOC_NO=D.DOC_NO "
                        + "WHERE D.PIECE_NO='" + txtPieceNo.getText() + "' AND H.APPROVED=0 AND H.CANCELED=0 AND "
                        + "PIECE_NO IN (SELECT WIP_EXT_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE LENGTH(TRIM(COALESCE(WIP_OBSOLETE,'')))=0) ";

            } else if (txtpiecestage.getText().equalsIgnoreCase("BEAM[HDS]")) {
                sql = "SELECT PIECE_NO,D.PARTY_CODE,PARTY_NAME,D.BEAM_NO FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.PARTY_CODE=M.PARTY_CODE "
                        + "LEFT JOIN PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
                        + "ON D.DOC_NO=D.DOC_NO "
                        + "WHERE  D.PIECE_NO='" + txtPieceNo.getText() + "' AND H.APPROVED=0 AND H.CANCELED=0 AND "
                        + "PIECE_NO IN (SELECT WIP_EXT_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE LENGTH(TRIM(COALESCE(WIP_OBSOLETE,'')))=0) ";

            } else if (txtpiecestage.getText().equalsIgnoreCase("FINISHING")) {
                sql = "SELECT WIP_PIECE_NO AS PIECE_NO,WIP_PARTY_CODE AS PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_WIP_PIECE_REGISTER D "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.WIP_PARTY_CODE=M.PARTY_CODE "
                        + " WHERE D.WIP_PIECE_NO='" + txtPieceNo.getText() + "' AND WIP_PRIORITY_HOLD_CAN_FLAG IN ('0') "
                        + " AND WIP_PIECE_STAGE IN ('" + txtpiecestage.getText() + "') AND COALESCE(WIP_REJECTED_FLAG,0)=0 ";
            } else {
                sql = "SELECT WIP_EXT_PIECE_NO AS PIECE_NO,WIP_PARTY_CODE AS PARTY_CODE,PARTY_NAME FROM PRODUCTION.FELT_WIP_PIECE_REGISTER D "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.WIP_PARTY_CODE=M.PARTY_CODE "
                        + " WHERE D.WIP_EXT_PIECE_NO='" + txtPieceNo.getText() + "' AND WIP_PRIORITY_HOLD_CAN_FLAG IN ('0','1','2','3','4','5') "
                        + " AND WIP_PIECE_STAGE IN ('" + txtpiecestage.getText() + "','DIVERTED','MERGED')  ";

            }
            System.out.println("Piece Query :" + sql);
            if (data.IsRecordExist(sql)) {
                String PIECE_NO = txtPieceNo.getText(), newPiece = "";
                boolean newpc = true;
                newPiece = PIECE_NO.substring(0, 5) + "R";
                while (newpc) {
                    if (data.IsRecordExist("SELECT REJ_NEW_PIECE_NO FROM PRODUCTION.FELT_REJECTION WHERE REJ_NEW_PIECE_NO='" + newPiece + "' AND APPROVED=1")) {
                        newPiece = newPiece + "R";
                    } else {
                        newpc = false;
                    }
                }

                txtPieceNo1.setText(newPiece);
                if (data.getIntValueFromDB("SELECT COUNT(*) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + PIECE_NO + "' AND WIP_EXT_PIECE_NO LIKE '%AB' AND COALESCE(WIP_REJECTED_FLAG,0)=0") > 0) {
                    PIECE_NO = data.getStringValueFromDB("SELECT WIP_EXT_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + PIECE_NO + "' AND WIP_EXT_PIECE_NO LIKE '%AB' AND COALESCE(WIP_REJECTED_FLAG,0)=0");
                }
                String[] pieceDetails = ObjFeltRejection.getPieceDetails(PIECE_NO.trim());
                txtPartyCode.setText(pieceDetails[0]);
                txtGroup.setText(pieceDetails[1]);
                txtStyle.setText(pieceDetails[2]);
                txtSynPercent.setText(pieceDetails[3]);
                txtGSM.setText(pieceDetails[6]);
                txtMfgSize.setText(pieceDetails[4]);
                txtMfgwidth.setText(pieceDetails[5]);
                txtMfggsm.setText(pieceDetails[6]);
                txtmfgWeight.setText(pieceDetails[7]);
                txtActualSize.setText(pieceDetails[8]);
                txtActualwidth.setText(pieceDetails[9]);
                txtActualgsm.setText(pieceDetails[10]);
                txtActualWeight.setText(pieceDetails[11]);
                txtAdjLength.requestFocus();
            } else {
                JOptionPane.showMessageDialog(null, "Piece not Found...");
                txtPieceNo.setText("");
                txtPieceNo1.setText("");
                txtPieceNo.requestFocus();
            }

        }

    }//GEN-LAST:event_txtPieceNoFocusLost

    private void txtPieceNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPieceNoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            String sql = "";
            // aList.SQL = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE IN ('MENDING','WEAVING','NEEDLING','FINISHING') AND A.PR_DOC_NO=0 AND A.PR_PARTY_CODE=B.PARTY_CODE AND A.PR_PIECE_STAGE='"+txtDept.getText().trim()+"' ORDER BY A.PR_ORDER_DATE";
            //aList.SQL = "SELECT A.PR_PIECE_NO,A.PR_PARTY_CODE,B.PARTY_NAME,A.PR_ORDER_DATE,A.PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE A.PR_PIECE_STAGE IN ('MENDING','WEAVING','NEEDLING','FINISHING') AND A.PR_DOC_NO=0 AND A.PR_PARTY_CODE=B.PARTY_CODE ORDER BY A.PR_ORDER_DATE";
            if (txtpiecestage.getText().equalsIgnoreCase("BEAM")) {
                sql = "SELECT D.PIECE_NO,D.PARTY_CODE,PARTY_NAME,D.BEAM_NO,COALESCE(AMEND_WIP.PIECE_AMEND_NO,'') AS PENDING_WIP_AMEND "
                        + ",CASE WHEN PARTY_LOCK=1 THEN 'LOCKED' ELSE '' END AS PARTY_LOCK "
                        + ",CASE WHEN POSITION_LOCK_IND=1 THEN 'LOCKED' ELSE '' END AS POSITION_LOCK "
                        + " FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DETAIL D "
                        + " LEFT JOIN PRODUCTION.FELT_WIP_PIECE_REGISTER "
                        + " ON PIECE_NO=WIP_EXT_PIECE_NO "
                        + " LEFT JOIN PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                        + " ON PARTY_CODE=MM_PARTY_CODE AND WIP_MACHINE_NO=MM_MACHINE_NO AND WIP_POSITION_NO=MM_MACHINE_POSITION "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.PARTY_CODE=M.PARTY_CODE "
                        + "LEFT JOIN (SELECT PD.PIECE_NO,PH.PIECE_AMEND_NO,PH.APPROVED  FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                        + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                        + "WHERE PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO  AND COALESCE(PH.APPROVED,0)=0  AND COALESCE(PH.CANCELED,0)!=1) AS AMEND_WIP "
                        + "ON LEFT(D.PIECE_NO,5)=LEFT(AMEND_WIP.PIECE_NO,5) "
                        + "LEFT JOIN PRODUCTION.FELT_WARPING_BEAM_ORDER_HEADER H "
                        + "ON D.DOC_NO=D.DOC_NO "
                        + "WHERE H.APPROVED=0 AND H.CANCELED=0 AND  INDICATOR NOT IN ('DELETE') AND "
                        + "D.PIECE_NO IN (SELECT WIP_EXT_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE LENGTH(TRIM(COALESCE(WIP_OBSOLETE,'')))=0 AND COALESCE(WIP_REJECTED_FLAG,0)=0) ";

            } else if (txtpiecestage.getText().equalsIgnoreCase("BEAM[HDS]")) {
                sql = "SELECT D.PIECE_NO,D.PARTY_CODE,PARTY_NAME,D.BEAM_NO,COALESCE(AMEND_WIP.PIECE_AMEND_NO,'') AS PENDING_WIP_AMEND "
                        + ",CASE WHEN PARTY_LOCK=1 THEN 'LOCKED' ELSE '' END AS PARTY_LOCK "
                        + ",CASE WHEN POSITION_LOCK_IND=1 THEN 'LOCKED' ELSE '' END AS POSITION_LOCK "
                        + " FROM PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_DETAIL D "
                        + " LEFT JOIN PRODUCTION.FELT_WIP_PIECE_REGISTER "
                        + " ON PIECE_NO=WIP_EXT_PIECE_NO "
                        + " LEFT JOIN PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                        + " ON WIP_PARTY_CODE=MM_PARTY_CODE AND WIP_MACHINE_NO=MM_MACHINE_NO AND WIP_POSITION_NO=MM_MACHINE_POSITION "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.PARTY_CODE=M.PARTY_CODE "
                        + "LEFT JOIN (SELECT PD.PIECE_NO,PH.PIECE_AMEND_NO,PH.APPROVED  FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                        + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                        + "WHERE PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO  AND COALESCE(PH.APPROVED,0)=0  AND COALESCE(PH.CANCELED,0)!=1) AS AMEND_WIP "
                        + "ON LEFT(D.PIECE_NO,5)=LEFT(AMEND_WIP.PIECE_NO,5) "
                        + "LEFT JOIN PRODUCTION.FELT_WARPING_BEAM_ORDER_DRYER_HEADER H "
                        + "ON D.DOC_NO=D.DOC_NO "
                        + "WHERE H.APPROVED=0 AND H.CANCELED=0 AND INDICATOR NOT IN ('DELETE') AND "
                        + "D.PIECE_NO IN (SELECT WIP_EXT_PIECE_NO FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE LENGTH(TRIM(COALESCE(WIP_OBSOLETE,'')))=0 AND COALESCE(WIP_REJECTED_FLAG,0)=0) ";

            } else if (txtpiecestage.getText().equalsIgnoreCase("FINISHING")) {
                sql = "SELECT WIP_PIECE_NO AS PIECE_NO,WIP_PARTY_CODE AS PARTY_CODE,PARTY_NAME,COALESCE(AMEND_WIP.PIECE_AMEND_NO,'') AS PENDING_WIP_AMEND "
                        + ",CASE WHEN PARTY_LOCK=1 THEN 'LOCKED' ELSE '' END AS PARTY_LOCK "
                        + ",CASE WHEN POSITION_LOCK_IND=1 THEN 'LOCKED' ELSE '' END AS POSITION_LOCK "
                        + " FROM PRODUCTION.FELT_WIP_PIECE_REGISTER D "
                        + " LEFT JOIN PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                        + " ON WIP_PARTY_CODE=MM_PARTY_CODE AND WIP_MACHINE_NO=MM_MACHINE_NO AND WIP_POSITION_NO=MM_MACHINE_POSITION "
                        + "LEFT JOIN (SELECT PD.PIECE_NO,PH.PIECE_AMEND_NO,PH.APPROVED  FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                        + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                        + "WHERE PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO  AND COALESCE(PH.APPROVED,0)=0  AND COALESCE(PH.CANCELED,0)!=1) AS AMEND_WIP "
                        + "ON WIP_PIECE_NO=AMEND_WIP.PIECE_NO "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.WIP_PARTY_CODE=M.PARTY_CODE "
                        + " WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN ('0') "
                        + " AND WIP_PIECE_STAGE IN ('" + txtpiecestage.getText() + "') AND COALESCE(WIP_REJECTED_FLAG,0)=0 ";
            } else {
                sql = "SELECT WIP_EXT_PIECE_NO AS PIECE_NO,WIP_PIECE_NO AS PIECE,WIP_PARTY_CODE AS PARTY_CODE,PARTY_NAME,COALESCE(AMEND_WIP.PIECE_AMEND_NO,'') AS PENDING_WIP_AMEND "
                        + ",CASE WHEN PARTY_LOCK=1 THEN 'LOCKED' ELSE '' END AS PARTY_LOCK "
                        + ",CASE WHEN POSITION_LOCK_IND=1 THEN 'LOCKED' ELSE '' END AS POSITION_LOCK "
                        + " FROM PRODUCTION.FELT_WIP_PIECE_REGISTER D "
                        + " LEFT JOIN PRODUCTION.FELT_MACHINE_MASTER_DETAIL "
                        + " ON WIP_PARTY_CODE=MM_PARTY_CODE AND WIP_MACHINE_NO=MM_MACHINE_NO AND WIP_POSITION_NO=MM_MACHINE_POSITION "
                        + "LEFT JOIN DINESHMILLS.D_SAL_PARTY_MASTER M "
                        + "ON D.WIP_PARTY_CODE=M.PARTY_CODE "
                        + "LEFT JOIN (SELECT PD.PIECE_NO,PH.PIECE_AMEND_NO,PH.APPROVED  FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                        + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                        + "WHERE PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO  AND COALESCE(PH.APPROVED,0)=0  AND COALESCE(PH.CANCELED,0)!=1) AS AMEND_WIP "
                        + "ON WIP_PIECE_NO=AMEND_WIP.PIECE_NO "
                        + " WHERE WIP_PRIORITY_HOLD_CAN_FLAG IN ('0') "
                        + " AND WIP_PIECE_STAGE IN ('" + txtpiecestage.getText() + "') AND COALESCE(WIP_REJECTED_FLAG,0)=0 ";
            }
            aList.SQL = sql;
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;

            if (aList.ShowLOV()) {
                System.out.println("DRP:SELECT POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE CONCAT(MM_PARTY_CODE,MM_MACHINE_NO,MM_MACHINE_POSITION)=(SELECT CONCAT(WIP_PARTY_CODE,WIP_MACHINE_NO,WIP_POSITION_NO) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')");
                if (!data.getStringValueFromDB("SELECT PD.PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH, "
                        + "PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP   PD "
                        + "WHERE COALESCE(PH.APPROVED,0)!=1 AND COALESCE(PH.CANCELED,0)!=1 AND "
                        + "PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO AND LEFT(PD.PIECE_NO,5)='" + aList.ReturnVal.substring(0, 5) + "' ").equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(this, "Piece is Under Approval in WIP Piece Amend", "ERROR", JOptionPane.ERROR_MESSAGE);
                } else if (data.getIntValueFromDB("SELECT PARTY_LOCK FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE=(SELECT WIP_PARTY_CODE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')") == 1) {
                    JOptionPane.showMessageDialog(this, "Party is Locked...", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else if (data.getIntValueFromDB("SELECT POSITION_LOCK_IND FROM PRODUCTION.FELT_MACHINE_MASTER_DETAIL WHERE CONCAT(TRIM(MM_PARTY_CODE),TRIM(MM_MACHINE_NO),TRIM(MM_MACHINE_POSITION))=(SELECT CONCAT(TRIM(WIP_PARTY_CODE),TRIM(WIP_MACHINE_NO),TRIM(WIP_POSITION_NO)) FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + aList.ReturnVal + "')") == 1) {
                    JOptionPane.showMessageDialog(this, "Position is Locked...", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    txtPieceNo.setText(aList.ReturnVal);
                    txtPieceNoFocusLost(null);
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtPieceNoKeyPressed

    private void txtAdjLengthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAdjLengthFocusLost
        // TODO add your handling code here:
        calc_weight();
    }//GEN-LAST:event_txtAdjLengthFocusLost

    private void txtAdjWidthFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAdjWidthFocusLost
        // TODO add your handling code here:
        calc_weight();
    }//GEN-LAST:event_txtAdjWidthFocusLost

    private void txtAdjGSMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAdjGSMFocusLost
        // TODO add your handling code here:
        calc_weight();
    }//GEN-LAST:event_txtAdjGSMFocusLost

    private void txtDeptCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeptCmbActionPerformed
        // TODO add your handling code here:
        try {
            txtDept.setText(txtDeptCmb.getSelectedItem().toString());
            SetupApproval();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtDeptCmbActionPerformed

    private void jMenuItemPlanningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPlanningActionPerformed
        // TODO add your handling code here:
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'P';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.setSelectedItem("PLANNING");
        txtDept.setText("PLANNING");
        txtpiecestage.setText("PLANNING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemPlanningActionPerformed

    private void txtBaseGSMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBaseGSMFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBaseGSMFocusGained

    private void txtBaseGSMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBaseGSMFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBaseGSMFocusLost

    private void txtWeaveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeaveFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeaveFocusGained

    private void txtWeaveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWeaveFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeaveFocusLost

    private void txtWebGSMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWebGSMFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWebGSMFocusGained

    private void txtWebGSMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWebGSMFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWebGSMFocusLost

    private void txtCFMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCFMFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCFMFocusGained

    private void txtCFMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCFMFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCFMFocusLost

    private void txtPPTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPPTypeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPPTypeFocusGained

    private void txtPPTypeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPPTypeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPPTypeFocusLost

    private void txtRejectionLocationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRejectionLocationFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRejectionLocationFocusGained

    private void txtRejectionLocationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRejectionLocationFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRejectionLocationFocusLost

    private void txtLoomNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoomNoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLoomNoFocusGained

    private void txtLoomNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoomNoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLoomNoFocusLost

    private void cmbObsoleteUPNStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbObsoleteUPNStatusItemStateChanged
        // TODO add your handling code here:
        System.out.println("approval" + approvalSequence);
        if (approvalSequence == 4) {
            if (cmbObsoleteUPNStatus.getSelectedItem().equals("UNMAPPED")) {
                txtUnMappedReason.setEnabled(true);
            } else {
                txtUnMappedReason.setText("");
                txtUnMappedReason.setEnabled(false);
            }

            if (cmbObsoleteUPNStatus.getSelectedItem().equals("SCRAP")) {
                txtScrapReason.setEnabled(true);
            } else {
                txtScrapReason.setText("");
                txtScrapReason.setEnabled(false);
            }
        }
    }//GEN-LAST:event_cmbObsoleteUPNStatusItemStateChanged

    private void txtScrapReasonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtScrapReasonFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtScrapReasonFocusGained

    private void txtScrapReasonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtScrapReasonFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtScrapReasonFocusLost

    private void txtUnMappedReasonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUnMappedReasonFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnMappedReasonFocusGained

    private void txtUnMappedReasonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUnMappedReasonFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnMappedReasonFocusLost

    private void cmdUnMappedReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUnMappedReasonActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtUnMappedReason;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdUnMappedReasonActionPerformed

    private void cmdScrapReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdScrapReasonActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtScrapReason;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdScrapReasonActionPerformed

    private void txtRejOrgFromKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRejOrgFromKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            aList.SQL = "SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID='REJ_ORG_FROM' AND PARA_CODE  < (SELECT PARA_CODE FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_DESC='"+txtDept.getText().trim()+"')";
            aList.ReturnCol = 2;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            //aList.DefaultSearchOn=1;

            if (aList.ShowLOV()) {
                txtRejOrgFrom.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtRejOrgFromKeyPressed

    private void jMenuItemHeatSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHeatSettingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'H';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.addItem("NEEDLING");
        txtDeptCmb.addItem("FINISHING");
        txtDeptCmb.addItem("HEAT_SETTING");
        txtDeptCmb.addItem("MARKING");
        txtDeptCmb.addItem("SPLICING");
        txtDeptCmb.setSelectedItem("HEAT_SETTING");
        txtDept.setText("HEAT_SETTING");
        txtpiecestage.setText("HEAT_SETTING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemHeatSettingActionPerformed

    private void jMenuItemMarkingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMarkingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'M';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.addItem("NEEDLING");
        txtDeptCmb.addItem("FINISHING");
        txtDeptCmb.addItem("HEAT_SETTING");
        txtDeptCmb.addItem("MARKING");
        txtDeptCmb.addItem("SPLICING");
        txtDeptCmb.setSelectedItem("MARKING");
        txtDept.setText("MARKING");
        txtpiecestage.setText("MARKING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemMarkingActionPerformed

    private void jMenuItemSplicingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSplicingActionPerformed
        EditMode = EITLERPGLOBAL.ADD;
        feltDept = 'S';
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDeptCmb.removeAllItems();
        txtDeptCmb.addItem("PLANNING");
        txtDeptCmb.addItem("BEAM");
        txtDeptCmb.addItem("BEAM[HDS]");
        txtDeptCmb.addItem("WEAVING");
        txtDeptCmb.addItem("MENDING");
        txtDeptCmb.addItem("SEAMING");
        txtDeptCmb.addItem("NEEDLING");
        txtDeptCmb.addItem("FINISHING");
        txtDeptCmb.addItem("HEAT_SETTING");
        txtDeptCmb.addItem("MARKING");
        txtDeptCmb.addItem("SPLICING");
        txtDeptCmb.setSelectedItem("SPLICING");
        txtDept.setText("SPLICING");
        txtpiecestage.setText("SPLICING");
        SetupApproval();

        lblTitle.setBackground(Color.GRAY);
        txtPieceNo.setEnabled(true);
        txtRejOrgFrom.setEnabled(true);
        txtFormNo.requestFocus();
    }//GEN-LAST:event_jMenuItemSplicingActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbObsoleteUPNStatus;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbUserName;
    private javax.swing.JButton cmdActionBig;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDeptCommentBig;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRejectionReasonBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdScrapReason;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdUnMappedReason;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItemBeamOrder;
    private javax.swing.JMenuItem jMenuItemBeamOrderHDS;
    private javax.swing.JMenuItem jMenuItemFinishing;
    private javax.swing.JMenuItem jMenuItemHeatSetting;
    private javax.swing.JMenuItem jMenuItemMarking;
    private javax.swing.JMenuItem jMenuItemMending;
    private javax.swing.JMenuItem jMenuItemNeedling;
    private javax.swing.JMenuItem jMenuItemPlanning;
    private javax.swing.JMenuItem jMenuItemSeaming;
    private javax.swing.JMenuItem jMenuItemSplicing;
    private javax.swing.JMenuItem jMenuItemWeaving;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRejOrgFrom;
    private javax.swing.JLabel lblRejOrgFrom1;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JCheckBox notprocess;
    private javax.swing.JTextField txtAction;
    private javax.swing.JTextField txtActualSize;
    private javax.swing.JTextField txtActualWeight;
    private javax.swing.JTextField txtActualgsm;
    private javax.swing.JTextField txtActualwidth;
    private javax.swing.JTextField txtAdjGSM;
    private javax.swing.JTextField txtAdjLength;
    private javax.swing.JTextField txtAdjWeight;
    private javax.swing.JTextField txtAdjWidth;
    private javax.swing.JTextField txtBaseGSM;
    private javax.swing.JTextField txtCFM;
    private javax.swing.JTextField txtDept;
    private javax.swing.JComboBox txtDeptCmb;
    private javax.swing.JTextField txtDeptComment;
    private javax.swing.JTextField txtDocumentNo;
    private javax.swing.JTextField txtFormNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGSM;
    private javax.swing.JTextField txtGroup;
    private javax.swing.JTextField txtLoomNo;
    private javax.swing.JTextField txtMfgSize;
    private javax.swing.JTextField txtMfggsm;
    private javax.swing.JTextField txtMfgwidth;
    private javax.swing.JTextField txtPPType;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPieceNo;
    private javax.swing.JTextField txtPieceNo1;
    private javax.swing.JTextField txtRejOrgFrom;
    private javax.swing.JTextField txtRejectionDate;
    private javax.swing.JTextField txtRejectionLocation;
    private javax.swing.JTextField txtRejectionReason;
    private javax.swing.JTextField txtScrapReason;
    private javax.swing.JTextField txtStyle;
    private javax.swing.JTextField txtSynPercent;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtUnMappedReason;
    private javax.swing.JTextField txtWeave;
    private javax.swing.JTextField txtWebGSM;
    private javax.swing.JTextField txtmfgWeight;
    private javax.swing.JTextField txtpiecestage;
    // End of variables declaration//GEN-END:variables

    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    private void SetFields(boolean pStat) {
        txtDeptCmb.setEnabled(false);
        txtRejectionDate.setEnabled(pStat);
        txtFormNo.setEnabled(pStat);
        txtPieceNo.setEnabled(pStat);
        txtMfgSize.setEnabled(false);
        txtActualSize.setEnabled(false);
        txtmfgWeight.setEnabled(false);
        txtActualWeight.setEnabled(false);
        txtRejectionReason.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        cmbUserName.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        txtDeptComment.setEnabled(pStat);
        txtDocumentNo.setEnabled(false);
        txtDept.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtGroup.setEnabled(pStat);
        txtSynPercent.setEnabled(pStat);
        txtStyle.setEnabled(pStat);
        txtGSM.setEnabled(pStat);
        cmbUserName.setEnabled(pStat);
        notprocess.setEnabled(pStat);

        txtAdjLength.setEnabled(pStat);
        txtAdjWidth.setEnabled(pStat);
        txtAdjGSM.setEnabled(pStat);
        txtAdjWeight.setEnabled(pStat);

        txtBaseGSM.setEnabled(false);
        txtWebGSM.setEnabled(false);
        txtWeave.setEnabled(false);
        txtCFM.setEnabled(false);
        txtPPType.setEnabled(false);
        txtRejectionLocation.setEnabled(false);
        txtLoomNo.setEnabled(false);
        cmbObsoleteUPNStatus.setEnabled(false);
        txtUnMappedReason.setEnabled(false);
        txtScrapReason.setEnabled(false);
        
        txtRejOrgFrom.setEnabled(pStat);

        SetupApproval();
    }

    private void ClearFields() {
        txtRejectionDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtDocumentNo.setText("");
        txtFormNo.setText("");
        txtDept.setText("");
        txtPieceNo.setText("");
        txtPieceNo1.setText("");
        txtPartyCode.setText("");
        txtMfgSize.setText("");
        txtGroup.setText("");
        txtActualSize.setText("");
        txtStyle.setText("");
        txtmfgWeight.setText("");
        txtSynPercent.setText("");
        txtActualWeight.setText("");
        txtGSM.setText("");
        txtRejectionReason.setText("");
        txtDeptComment.setText("");
        txtAction.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");

        txtMfgSize.setText("");
        txtMfgwidth.setText("");
        txtMfggsm.setText("");
        txtmfgWeight.setText("");

        txtActualSize.setText("");
        txtActualwidth.setText("");
        txtActualgsm.setText("");
        txtActualWeight.setText("");

        txtAdjLength.setText("");
        txtAdjWidth.setText("");
        txtAdjGSM.setText("");
        txtAdjWeight.setText("");

        txtBaseGSM.setText("");
        txtWebGSM.setText("");
        txtWeave.setText("");
        txtCFM.setText("");
        txtPPType.setText("");
        txtRejectionLocation.setText("");
        txtLoomNo.setText("");
        cmbObsoleteUPNStatus.setSelectedIndex(0);
        txtUnMappedReason.setText("");
        txtScrapReason.setText("");

        txtRejOrgFrom.setText("");
        
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }

    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, 764)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        //=========== Title Bar Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjFeltRejection.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                } else {
                    lblTitle.setBackground(Color.GRAY);
                }
            }
            //============================================//

            String rejectionDate = EITLERPGLOBAL.formatDate(ObjFeltRejection.getAttribute("REJECTION_DATE").getString());
            String documentNo = ObjFeltRejection.getAttribute("REJECTION_DOCUMENT_NO").getString();
            lblTitle.setText(" FELT REJECTION DETAILS - " + rejectionDate);
            lblRevNo.setText(Integer.toString((int) ObjFeltRejection.getAttribute("REVISION_NO").getVal()));

            txtRejectionDate.setText(rejectionDate);
            txtDocumentNo.setText(documentNo);
            txtFormNo.setText(ObjFeltRejection.getAttribute("REJECTION_FORM_NO").getString());
            txtDept.setText(ObjFeltRejection.getAttribute("REJECTION_DEPARTMENT").getString());
            txtpiecestage.setText(ObjFeltRejection.getAttribute("PIECE_STAGE").getString());
            txtDeptCmb.setSelectedItem(ObjFeltRejection.getAttribute("REJECTION_DEPARTMENT").getString());
            txtPieceNo.setText(ObjFeltRejection.getAttribute("REJECTION_PIECE_NO").getString());
            txtPieceNo1.setText(ObjFeltRejection.getAttribute("REJECTION_NEW_PIECE_NO").getString());
            txtPartyCode.setText(ObjFeltRejection.getAttribute("REJECTION_PARTY_CODE").getString());
            txtStyle.setText(ObjFeltRejection.getAttribute("STYLE").getString());
            txtGroup.setText(ObjFeltRejection.getAttribute("GROUP").getString());
            txtSynPercent.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("SYN_PER").getVal(), 2)));
            txtGSM.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("GSM").getVal(), 2)));
            //txtMfgSize.setText(ObjFeltRejection.getAttribute("MFG_SIZE").getString());
            //txtActualSize.setText(ObjFeltRejection.getAttribute("ACTUAL_SIZE").getString());
            //txtmfgWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("REQUIRED_WEIGHT").getVal(), 2)));
            //txtActualWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ACTUAL_WEIGHT").getVal(), 2)));
            txtRejectionReason.setText(ObjFeltRejection.getAttribute("REASON").getString());
            txtDeptComment.setText(ObjFeltRejection.getAttribute("COMMENT").getString());
            txtAction.setText(ObjFeltRejection.getAttribute("ACTION").getString());

            if (ObjFeltRejection.getAttribute("IS_PROCESS").getInt() == 0) {
                notprocess.setSelected(true);
            } else {
                notprocess.setSelected(false);
            }

            txtMfgSize.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ORDER_LENGTH").getVal(), 2)));
            txtMfgwidth.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ORDER_WIDTH").getVal(), 2)));
            txtMfggsm.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ORDER_GSM").getVal(), 2)));
            txtmfgWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ORDER_WEIGHT").getVal(), 2)));

            txtActualSize.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("BILL_LENGTH").getVal(), 2)));
            txtActualwidth.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("BILL_WIDTH").getVal(), 2)));
            txtActualgsm.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("BILL_GSM").getVal(), 2)));
            txtActualWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("BILL_WEIGHT").getVal(), 2)));

            txtAdjLength.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ADJUSTED_LENGTH").getVal(), 2)));
            txtAdjWidth.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ADJUSTED_WIDTH").getVal(), 2)));
            txtAdjGSM.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ADJUSTED_GSM").getVal(), 2)));
            txtAdjWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("ADJUSTED_WEIGHT").getVal(), 2)));

            txtBaseGSM.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("BASE_GSM").getVal(), 2)));
            txtWebGSM.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltRejection.getAttribute("WEB_GSM").getVal(), 2)));
            txtWeave.setText(ObjFeltRejection.getAttribute("WEAVE").getString());
            txtCFM.setText(ObjFeltRejection.getAttribute("CFM_TARGETED").getString());
            txtPPType.setText(ObjFeltRejection.getAttribute("PAPER_PRODUCT_TYPE").getString());
            txtRejectionLocation.setText(ObjFeltRejection.getAttribute("REJECTION_LOCATION").getString());
            txtLoomNo.setText(ObjFeltRejection.getAttribute("LOOM_NO").getString());
            cmbObsoleteUPNStatus.setSelectedItem(ObjFeltRejection.getAttribute("OBSOLETE_UPN_ASSIGN_STATUS").getString());
            txtScrapReason.setText(ObjFeltRejection.getAttribute("SCRAP_REASON").getString());
            txtUnMappedReason.setText(ObjFeltRejection.getAttribute("UNMAPPED_REASON").getString());
            
            txtRejOrgFrom.setText(ObjFeltRejection.getAttribute("REJECTION_ORIGINATED_FROM").getString());

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjFeltRejection.getAttribute("HIERARCHY_ID").getVal());

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList = new HashMap();

            hmList = clsFeltProductionApprovalFlow.getDocumentFlow(764, documentNo);
            for (int i = 1; i <= hmList.size(); i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow = (clsDocFlow) hmList.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3] = ObjFlow.getAttribute("STATUS").getString();
                rowData[4] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString()) + ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10, 19);
                rowData[5] = EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString()) + ObjFlow.getAttribute("ACTION_DATE").getString().substring(10, 19);
                rowData[6] = ObjFlow.getAttribute("REMARKS").getString();

                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//

            // Generating Grid for Showing Rejection Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory = clsFeltRejection.getHistoryList(ObjFeltRejection.getAttribute("REJECTION_DATE").getString(), txtDocumentNo.getText());
            for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                clsFeltRejection ObjFeltRejection = (clsFeltRejection) hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjFeltRejection.getAttribute("REVISION_NO").getVal());
                //rowData[1]=clsUser.getUserName((int)ObjFeltRejection.getAttribute("UPDATED_BY").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFeltRejection.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate(ObjFeltRejection.getAttribute("ENTRY_DATE").getString()) + ObjFeltRejection.getAttribute("ENTRY_DATE").getString().substring(10, 19);

                String ApprovalStatus = "";

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus = "Hold";
                }

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = ObjFeltRejection.getAttribute("APPROVER_REMARKS").getString();

                DataModelUpdateHistory.addRow(rowData);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList = new HashMap();

        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        hmHierarchyList = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND D_COM_HIERARCHY.HIERARCHY_NAME LIKE '%" + txtDept.getText() + "'  AND MODULE_ID=764 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            hmHierarchyList = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND D_COM_HIERARCHY.HIERARCHY_NAME LIKE '%" + txtDept.getText() + "'  AND MODULE_ID=764 ");
        }
        for (int i = 1; i <= hmHierarchyList.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }

    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList = new HashMap();
        try {
            cmbSendToModel = new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if (EditMode == EITLERPGLOBAL.ADD) {
                hmSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            } else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(764, ObjFeltRejection.getAttribute("REJECTION_DOCUMENT_NO").getString());
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList = new HashMap();

        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        hmRejectedSendToList = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= hmRejectedSendToList.size(); i++) {
            clsUser ObjUser = (clsUser) hmRejectedSendToList.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = ObjUser.getAttribute("USER_NAME").getString();

            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInApproval(764, txtDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFeltProductionApprovalFlow.IncludeUserInRejection(764, txtDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }

        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = clsFeltProductionApprovalFlow.getCreator(764, txtDocumentNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    //Generates User Name Combo Box
    private void GenerateUserNameCombo() {
        HashMap hmUserNameList = new HashMap();

        cmbUserNameModel = new EITLComboModel();
        cmbUserName.removeAllItems();
        cmbUserName.setModel(cmbUserNameModel);

        hmUserNameList = ObjFeltRejection.getUserNameList(EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gNewUserID);
        for (int i = 1; i <= hmUserNameList.size(); i++) {
            cmbUserNameModel.addElement((ComboData) hmUserNameList.get(new Integer(i)));
        }
    }

    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
         if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
         cmbHierarchy.setEnabled(true);
         }else {
         cmbHierarchy.setEnabled(false);
         }*/
        OpgHold.setSelected(true);
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD || clsFeltProductionApprovalFlow.IsCreator(764, txtDocumentNo.getText())) {
            GenerateHierarchyCombo();
            lnFromUserId = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {
            int FromUserID = clsFeltProductionApprovalFlow.getFromID(764, ObjFeltRejection.getAttribute("REJECTION_DOCUMENT_NO").getString());
            lnFromUserId = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFeltProductionApprovalFlow.getFromRemarks(764, FromUserID, ObjFeltRejection.getAttribute("REJECTION_DOCUMENT_NO").getString());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();

        if (clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy and Reject Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if (clsFeltProductionApprovalFlow.IsCreator(764, txtDocumentNo.getText())) {
                OpgReject.setEnabled(false);
            }
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6089, 60891)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6089, 60892)) {
            cmdEdit.setEnabled(true);
        } else {
            cmdEdit.setEnabled(false);
        }

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6089, 60893)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6089, 60894)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {
        jPopupMenu.show(cmdNew, 0, 35);
        txtFormNo.requestFocus();
    }

    private void Edit() {
        String rejectionDocumentNo = (String) ObjFeltRejection.getAttribute("REJECTION_DOCUMENT_NO").getObj();
        if (ObjFeltRejection.IsEditable(rejectionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode = EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            GenerateUserNameCombo();

            if (clsFeltProductionApprovalFlow.IsCreator(764, rejectionDocumentNo) && clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 6089, 60892)) {
                SetFields(true);
                txtRejectionDate.setEnabled(false);
                txtFormNo.setEnabled(false);
            } else {
                cmbUserName.setEnabled(true);
                approvalSequence = ObjFeltRejection.getUserApprovalSequence(EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gNewUserID);
                if (approvalSequence == 3 || (approvalSequence == 4 && rejectionDocumentNo.contains("FRW"))) { //3
                    txtDeptComment.setEnabled(true);
                }
                if (approvalSequence == 4 || (approvalSequence == 5 && rejectionDocumentNo.contains("FRW"))) {//4
                    txtAction.setEnabled(true);
                    txtBaseGSM.setEnabled(true);
                    txtWebGSM.setEnabled(true);
                    txtWeave.setEnabled(true);
                    txtCFM.setEnabled(true);
                    txtLoomNo.setEnabled(true);
                    txtPPType.setEnabled(true);
                    txtRejectionLocation.setEnabled(true);
                    cmbObsoleteUPNStatus.setEnabled(true);
                    if (cmbObsoleteUPNStatus.getSelectedItem().equals("UNMAPPED")) {
                        txtUnMappedReason.setEnabled(true);
                    }
                    if (cmbObsoleteUPNStatus.getSelectedItem().equals("SCRAP")) {
                        txtScrapReason.setEnabled(true);
                    }
                }
                EnableApproval();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You cannot edit this record. It is either approved/rejected or waiting approval for other user", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Delete() {
        if (ObjFeltRejection.CanDelete(txtDocumentNo.getText(), txtRejectionDate.getText(), EITLERPGLOBAL.gNewUserID)) {
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, ObjFeltRejection.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void Save() {
        String rejectionDate, rejectionDocumentNo, rejectionDepartment, pieceNo, NpieceNo, formNo, partyCode, style, group, mfgSize, actualSize, reason, comment = "", action = "";
        float requiredWeight = 0, actualWeight = 0, gsm = 0, synPercent = 0;
        String actualWeightString, requiredWeightString, gsmString, synPercentString;
        double adjLength = 0, adjWidth = 0, adjGSM = 0, adjWeight = 0;
        String adjLengthString, adjWidthString, adjGSMString, adjWeightString;
        
        String rejOrgFrom = "";

        calc_weight();

        rejectionDate = txtRejectionDate.getText().trim();
        formNo = txtFormNo.getText().trim();
        rejectionDepartment = txtDept.getText().trim();

        pieceNo = txtPieceNo.getText().trim();
        NpieceNo = txtPieceNo1.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        style = txtStyle.getText().trim();
        group = txtGroup.getText().trim();
        gsmString = txtGSM.getText().trim();
        synPercentString = txtSynPercent.getText().trim();
        mfgSize = "";
        actualSize = txtActualSize.getText().trim().toUpperCase();
        requiredWeightString = "";
        actualWeightString = txtActualWeight.getText().trim();
        reason = txtRejectionReason.getText().trim();
        comment = txtDeptComment.getText().trim();

        adjLengthString = txtAdjLength.getText().trim();
        adjWidthString = txtAdjWidth.getText().trim();
        adjGSMString = txtAdjGSM.getText().trim();
        adjWeightString = txtAdjWeight.getText().trim();
        
        rejOrgFrom = txtRejOrgFrom.getText().trim();

//        action=txtAction.getText().trim();
        try {
            //Form level validations
            String dpcstg = "";
            if (txtDept.getText().equalsIgnoreCase("FINISHING")) {
                dpcstg = data.getStringValueFromDB("SELECT WIP_PIECE_STAGE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_PIECE_NO='" + txtPieceNo.getText() + "' AND WIP_PIECE_STAGE='FINISHING' ");
            } else {
                dpcstg = data.getStringValueFromDB("SELECT WIP_PIECE_STAGE FROM PRODUCTION.FELT_WIP_PIECE_REGISTER WHERE WIP_EXT_PIECE_NO='" + txtPieceNo.getText() + "'");
            }
            if (!dpcstg.equalsIgnoreCase(txtDept.getText())) {
                JOptionPane.showMessageDialog(this, "The piece has been moved to " + dpcstg + " \n So,You cannot Save this...", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (rejectionDate.equals("") || !EITLERPGLOBAL.isDate(rejectionDate)) {
                JOptionPane.showMessageDialog(this, "Enter Valid Rejection Date", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // check Rejection Date is Within Financial Year?
            java.sql.Date FinFromDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
            java.sql.Date FinToDate = java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
            java.sql.Date RejectionDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(rejectionDate));
            if ((RejectionDate.after(FinFromDate) || RejectionDate.compareTo(FinFromDate) == 0) && (RejectionDate.before(FinToDate) || RejectionDate.compareTo(FinToDate) == 0)) {
                //Within the year
            } else {
                JOptionPane.showMessageDialog(this, "Rejection Date is Not Within Financial Year.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (RejectionDate.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB())) > 0) {
                JOptionPane.showMessageDialog(this, "Rejection Date Must be Before or the Same Date as Today.", "Wrong Rejection Date", JOptionPane.ERROR_MESSAGE);
                return;
            }

            rejectionDocumentNo = ObjFeltRejection.getDocumentNo((rejectionDate.substring(6, 10) + rejectionDate.substring(3, 5) + rejectionDate.substring(0, 2)), ("FR" + feltDept));

            // in edit mode doc no ,comment, action doesn't change
            if (EditMode == EITLERPGLOBAL.EDIT) {
                rejectionDocumentNo = ObjFeltRejection.getAttribute("REJECTION_DOCUMENT_NO").getString();
                comment = ObjFeltRejection.getAttribute("COMMENT").getString();
                action = ObjFeltRejection.getAttribute("ACTION").getString();
            }

            // CHECK Rejection Document No already exist in database?
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (ObjFeltRejection.checkRejectionDocumentNoInDB(rejectionDocumentNo)) {
                    JOptionPane.showMessageDialog(frmFeltRejection.this, "Rejection Document No " + rejectionDocumentNo + " Already Exists", "Rejection Date Already Exists", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (formNo.equals("") || formNo.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Form No.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (rejectionDepartment.equals("") || rejectionDepartment.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Rejection Department", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (rejectionDocumentNo.equals("") || rejectionDocumentNo.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Document No", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (EditMode == EITLERPGLOBAL.ADD && (rejOrgFrom.equals("") || rejOrgFrom.equals(null))) {
                JOptionPane.showMessageDialog(this, "Enter Rejection Originated From", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (pieceNo.equals("") || pieceNo.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Felt No", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (partyCode.equals("") || partyCode.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Party Code.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (style.equals("") || style.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Style.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (group.equals("") || group.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Group.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (gsmString.equals("") || gsmString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter GSM.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                gsm = Float.parseFloat(gsmString);
            }

            if (synPercentString.equals("") || synPercentString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Synthetic Percent.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                synPercent = Float.parseFloat(synPercentString);
            }

            if (actualWeightString.equals("") || actualWeightString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Actual Weight.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                actualWeight = Float.parseFloat(actualWeightString);
            }

            if (reason.equals("") || reason.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Rejection Reason.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (adjLengthString.equals("") || adjLengthString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Adjusted Length.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                adjLength = Double.parseDouble(adjLengthString);
            }

            if (adjWidthString.equals("") || adjWidthString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Adjusted Width.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                adjWidth = Double.parseDouble(adjWidthString);
            }

            if (adjGSMString.equals("") || adjGSMString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Adjusted GSM.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                adjGSM = Double.parseDouble(adjGSMString);
            }

            if (adjWeightString.equals("") || adjWeightString.equals(null)) {
                JOptionPane.showMessageDialog(this, "Enter Adjusted Weight.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                adjWeight = Double.parseDouble(adjWeightString);
            }

            // user name selection validation
//            if(EITLERPGLOBAL.getComboCode(cmbUserName)==0){
//                JOptionPane.showMessageDialog(this,"Select Your User Name","ERROR",JOptionPane.ERROR_MESSAGE);
//                return;
//            }
            // check piece no is already rejected?
            if (EditMode == EITLERPGLOBAL.ADD) {
                if (ObjFeltRejection.checkPieceNoInDB(pieceNo, rejectionDepartment)) {
                    JOptionPane.showMessageDialog(frmFeltRejection.this, "Piece No." + pieceNo + "Already Rejected.", " Piece No Already Exists", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (EditMode == EITLERPGLOBAL.EDIT) {
                // check piece no is already rejected?
                if (ObjFeltRejection.checkPieceNoInDB(pieceNo, rejectionDate, rejectionDepartment)) {
                    JOptionPane.showMessageDialog(frmFeltRejection.this, "Piece No." + pieceNo + " Already Rejected.", " Piece No Already Exists", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (approvalSequence == 3 || (approvalSequence == 4 && rejectionDocumentNo.contains("FRW"))) {
                    comment = txtDeptComment.getText().trim();
                    if (comment.equals("") || comment.equals(null)) {
                        JOptionPane.showMessageDialog(this, "Enter Dept. Head's Comment.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                if (approvalSequence == 4 || (approvalSequence == 5 && rejectionDocumentNo.contains("FRW"))) {//4
                    action = txtAction.getText().trim();
                    if (action.equals("") || action.equals(null)) {
                        JOptionPane.showMessageDialog(this, "Enter Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (cmbObsoleteUPNStatus.getSelectedItem().toString().trim().equals("Select")) {
                        JOptionPane.showMessageDialog(this, "Select Obsolete UPN Status.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (cmbObsoleteUPNStatus.getSelectedItem().toString().trim().equals("UNMAPPED") && txtUnMappedReason.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(this, "Enter UnMapped Reason.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    if (cmbObsoleteUPNStatus.getSelectedItem().toString().trim().equals("SCRAP") && txtScrapReason.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(this, "Enter Scrap Reason.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                createdBy = (int) ObjFeltRejection.getAttribute("CREATED_BY").getVal();
                createdDate = ObjFeltRejection.getAttribute("CREATED_DATE").getString();
                rejected = ObjFeltRejection.getAttribute("REJECTED").getBool();
            }
            //ObjFeltRejection.clear();
            ObjFeltRejection.setAttribute("FFNO", FFNo);
            ObjFeltRejection.setAttribute("REJECTION_PIECE_NO", pieceNo);
            ObjFeltRejection.setAttribute("REJECTION_NEW_PIECE_NO", NpieceNo);
            ObjFeltRejection.setAttribute("REJECTION_PARTY_CODE", partyCode);
            ObjFeltRejection.setAttribute("REJECTION_DEPARTMENT", rejectionDepartment);
            ObjFeltRejection.setAttribute("PIECE_STAGE", txtpiecestage.getText());
            ObjFeltRejection.setAttribute("STYLE", style);
            ObjFeltRejection.setAttribute("GROUP", group);
            ObjFeltRejection.setAttribute("SYN_PER", synPercent);
            ObjFeltRejection.setAttribute("GSM", gsm);
            ObjFeltRejection.setAttribute("MFG_SIZE", mfgSize);
            ObjFeltRejection.setAttribute("ACTUAL_SIZE", actualSize);
            ObjFeltRejection.setAttribute("REQUIRED_WEIGHT", requiredWeight);
            ObjFeltRejection.setAttribute("ACTUAL_WEIGHT", actualWeight);
            ObjFeltRejection.setAttribute("REASON", reason);
            ObjFeltRejection.setAttribute("COMMENT", comment);
            ObjFeltRejection.setAttribute("ACTION", action);

            ObjFeltRejection.setAttribute("ORDER_LENGTH", Double.parseDouble(txtMfgSize.getText()));
            ObjFeltRejection.setAttribute("ORDER_WIDTH", Double.parseDouble(txtMfgwidth.getText()));
            ObjFeltRejection.setAttribute("ORDER_GSM", Double.parseDouble(txtMfggsm.getText()));
            ObjFeltRejection.setAttribute("ORDER_WEIGHT", Double.parseDouble(txtmfgWeight.getText()));

            ObjFeltRejection.setAttribute("BILL_LENGTH", Double.parseDouble(txtActualSize.getText()));
            ObjFeltRejection.setAttribute("BILL_WIDTH", Double.parseDouble(txtActualwidth.getText()));
            ObjFeltRejection.setAttribute("BILL_GSM", Double.parseDouble(txtActualgsm.getText()));
            ObjFeltRejection.setAttribute("BILL_WEIGHT", Double.parseDouble(txtActualWeight.getText()));

            ObjFeltRejection.setAttribute("ADJUSTED_LENGTH", adjLength);
            ObjFeltRejection.setAttribute("ADJUSTED_WIDTH", adjWidth);
            ObjFeltRejection.setAttribute("ADJUSTED_GSM", adjGSM);
            ObjFeltRejection.setAttribute("ADJUSTED_WEIGHT", adjWeight);

            if (txtBaseGSM.getText().equals("") || txtBaseGSM.getText().equals(null)) {
                ObjFeltRejection.setAttribute("BASE_GSM", 0);
            } else {
                ObjFeltRejection.setAttribute("BASE_GSM", Double.parseDouble(txtBaseGSM.getText()));
            }
            if (txtWebGSM.getText().equals("") || txtWebGSM.getText().equals(null)) {
                ObjFeltRejection.setAttribute("WEB_GSM", 0);
            } else {
                ObjFeltRejection.setAttribute("WEB_GSM", Double.parseDouble(txtWebGSM.getText()));
            }
//            ObjFeltRejection.setAttribute("BASE_GSM", Double.parseDouble(txtBaseGSM.getText()));
//            ObjFeltRejection.setAttribute("WEB_GSM", Double.parseDouble(txtWebGSM.getText()));
            ObjFeltRejection.setAttribute("WEAVE", txtWeave.getText().trim());
            ObjFeltRejection.setAttribute("CFM_TARGETED", txtCFM.getText().trim());
            ObjFeltRejection.setAttribute("PAPER_PRODUCT_TYPE", txtPPType.getText().trim());
            ObjFeltRejection.setAttribute("REJECTION_LOCATION", txtRejectionLocation.getText().trim());
            ObjFeltRejection.setAttribute("LOOM_NO", txtLoomNo.getText().trim());
            ObjFeltRejection.setAttribute("OBSOLETE_UPN_ASSIGN_STATUS", cmbObsoleteUPNStatus.getSelectedItem().toString().trim());
            ObjFeltRejection.setAttribute("SCRAP_REASON", txtScrapReason.getText().trim());
            ObjFeltRejection.setAttribute("UNMAPPED_REASON", txtUnMappedReason.getText().trim());
            
            ObjFeltRejection.setAttribute("REJECTION_ORIGINATED_FROM", rejOrgFrom);

            if (notprocess.isSelected()) {
                ObjFeltRejection.setAttribute("IS_PROCESS", 0);
            } else {
                ObjFeltRejection.setAttribute("IS_PROCESS", 1);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Enter Correct Details. Error is : " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select the hierarchy.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this, "Select the Approval Action.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the remarks for rejection", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Select the user, to whom rejected document to be send", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //set data for insert/update
        ObjFeltRejection.setAttribute("REJECTION_DATE", rejectionDate);
        ObjFeltRejection.setAttribute("REJECTION_DOCUMENT_NO", rejectionDocumentNo);
        ObjFeltRejection.setAttribute("REJECTION_FORM_NO", formNo);
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjFeltRejection.Insert()) {
                if (OpgFinal.isSelected()) {
                    Auto_Posting(rejectionDocumentNo, rejectionDate);
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + ObjFeltRejection.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjFeltRejection.Update()) {
                if (OpgFinal.isSelected()) {
                    Auto_Posting(rejectionDocumentNo, rejectionDate);
                }
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(this, "Error occured while saving editing. Error is " + ObjFeltRejection.LastError, "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

//        Notification();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        txtDeptComment.setEnabled(false);
        txtAction.setEnabled(false);
        try {
            if (PENDING_DOCUMENT) {
                frmPA.RefreshView();
                PENDING_DOCUMENT = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjFeltRejection.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltRejection.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjFeltRejection.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltRejection.setAttribute("FROM_REMARKS", txtToRemarks.getText());
        ObjFeltRejection.setAttribute("UPDATED_BY", EITLERPGLOBAL.gNewUserID);

        if (OpgApprove.isSelected()) {
            ObjFeltRejection.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjFeltRejection.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjFeltRejection.setAttribute("APPROVAL_STATUS", "R");
            ObjFeltRejection.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjFeltRejection.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjFeltRejection.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        } else {
            ObjFeltRejection.setAttribute("CREATED_BY", createdBy);
            ObjFeltRejection.setAttribute("CREATED_DATE", createdDate);
            ObjFeltRejection.setAttribute("REJECTED", rejected);
            ObjFeltRejection.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }

    private void Cancel() {
        DisplayData();
        EditMode = 0;
        SetFields(false);
        txtDeptComment.setEnabled(false);
        txtAction.setEnabled(false);
        EnableToolbar();
        SetMenuForRights();

    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Production.FeltRejection.frmFindFeltRejection", true);
        frmFindFeltRejection ObjFindFeltRejection = (frmFindFeltRejection) ObjLoader.getObj();

        if (ObjFindFeltRejection.Cancelled == false) {
            if (!ObjFeltRejection.Filter(ObjFindFeltRejection.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltRejection.this, " No records found.", "Find Felt Rejection Details", JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltRejection.Filter("AND REJ_DOC_NO='" + docNo + "'");
        SetMenuForRights();
        DisplayData();
    }

    // find all pending document
    public void FindWaiting() {
        ObjFeltRejection.Filter(" AND REJ_DOC_NO IN(SELECT DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE REJ_DOC_NO=DOC_NO AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND STATUS='W' AND MODULE_ID=764) ");
        SetMenuForRights();
        DisplayData();
    }

    private void MoveFirst() {
        ObjFeltRejection.MoveFirst();
        DisplayData();
    }

    private void MovePrevious() {
        ObjFeltRejection.MovePrevious();
        DisplayData();
    }

    private void MoveNext() {
        ObjFeltRejection.MoveNext();
        DisplayData();
    }

    private void MoveLast() {
        ObjFeltRejection.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(" " + pMessage);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
    }

    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus = new EITLTableModel();

        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);

        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);

        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }

    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory = new EITLTableModel();

        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        // TableUpdateHistory.getColumnModel().getColumn(0).setPreferredWidth(20);
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);

        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }

    private void Notification() {
        if (OpgApprove.isSelected() || OpgFinal.isSelected()) {
            try {

                int moduleId = 764;
                int userId = EITLERPGLOBAL.gNewUserID;
                int hierarchyId = SelHierarchyID;

                String docNo = txtDocumentNo.getText().trim();
                String docDate = txtRejectionDate.getText().trim();

                String pSubject = "Notification : Felt Sales Rejection No : " + docNo;
                String pMessage = "";
                String cc = "";
                String prodPcHeader = "";

                if (!OpgFinal.isSelected()) {
                    pMessage = "<br>Felt Sales Rejection No : " + docNo + " has been approve and forward by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                } else {
                    pMessage = "<br>Felt Sales Rejection No : " + docNo + " has been final approved by " + clsUser.getUserName((int) EITLERPGLOBAL.gCompanyID, userId) + ".<br><br>";
                }

                pMessage += "<table border=1>";
                pMessage += "<tr><td align='center'><b> Field Name </b></td>"
                        + "<td align='center'><b> Values </b></td>"
                        + "</tr>";
                pMessage = pMessage + "<tr><td><b>Document No </b></td>"
                        + "<td> " + docNo + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Document Date </b></td>"
                        + "<td> " + txtRejectionDate.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Form No </b></td>"
                        + "<td> " + txtFormNo.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Department </b></td>"
                        + "<td> " + txtDept.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Piece No </b></td>"
                        + "<td> " + txtPieceNo.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Party Code </b></td>"
                        + "<td> " + txtPartyCode.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Party Name </b></td>"
                        + "<td> " + clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText().trim()) + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Mfg Size </b></td>"
                        + "<td> " + txtMfgSize.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Actual Size </b></td>"
                        + "<td> " + txtActualSize.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Group </b></td>"
                        + "<td> " + txtGroup.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Synthetic % </b></td>"
                        + "<td> " + txtSynPercent.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Style </b></td>"
                        + "<td> " + txtStyle.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>GSM </b></td>"
                        + "<td> " + txtGSM.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Req Weight </b></td>"
                        + "<td> " + txtmfgWeight.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Actual Weight </b></td>"
                        + "<td> " + txtActualWeight.getText().trim() + "</td></tr>";

                pMessage = pMessage + "<tr><td><b>Adjusted Length </b></td>"
                        + "<td> " + txtAdjLength.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Adjusted Width </b></td>"
                        + "<td> " + txtAdjWidth.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Adjusted GSM </b></td>"
                        + "<td> " + txtAdjGSM.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Adjusted Weight </b></td>"
                        + "<td> " + txtAdjWeight.getText().trim() + "</td></tr>";

                pMessage = pMessage + "<tr><td><b>Rejection Reason </b></td>"
                        + "<td> " + txtRejectionReason.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>HOD's Comment </b></td>"
                        + "<td> " + txtDeptComment.getText().trim() + "</td></tr>";
                pMessage = pMessage + "<tr><td><b>Action </b></td>"
                        + "<td> " + txtAction.getText().trim() + "</td></tr>";

                pMessage += "</table>";

                pMessage = pMessage + "<br><br>All Approvers Remark as given below : ";

                pMessage += "<table border=1>";
                pMessage += "<tr><td align='center'><b> Sr.No </b></td>"
                        + "<td align='center'><b> User </b></td>"
                        + "<td align='center'><b> Date </b></td>"
                        + "<td align='center'><b> Status </b></td>"
                        + "<td align='center'><b> Remark </b></td>"
                        + "</tr>";

                HashMap hmApprovalHistory = clsFeltRejection.getHistoryList(ObjFeltRejection.getAttribute("REJECTION_DATE").getString(), txtDocumentNo.getText());
                for (int i = 1; i <= hmApprovalHistory.size(); i++) {
                    pMessage += "<tr>";

                    clsFeltRejection ObjFeltRejection = (clsFeltRejection) hmApprovalHistory.get(Integer.toString(i));
                    pMessage += "<td>" + Integer.toString((int) ObjFeltRejection.getAttribute("REVISION_NO").getVal()) + "</td>";

                    pMessage += "<td>" + clsUser.getUserName(2, (int) ObjFeltRejection.getAttribute("UPDATED_BY").getVal()) + "</td>";
                    pMessage += "<td>" + EITLERPGLOBAL.formatDate(ObjFeltRejection.getAttribute("ENTRY_DATE").getString()) + " " + ObjFeltRejection.getAttribute("ENTRY_DATE").getString().substring(10, 19) + "</td>";
                    String ApprovalStatus = "";

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                        ApprovalStatus = "Hold";
                    }

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                        ApprovalStatus = "Approved";
                    }

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                        ApprovalStatus = "Final Approved";
                    }

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                        ApprovalStatus = "Waiting";
                    }

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                        ApprovalStatus = "Rejected";
                    }

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                        ApprovalStatus = "Pending";
                    }

                    if ((ObjFeltRejection.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                        ApprovalStatus = "Skiped";
                    }
                    pMessage += "<td>" + ApprovalStatus + "</td>";
                    pMessage += "<td>" + ObjFeltRejection.getAttribute("APPROVER_REMARKS").getString() + "</td>";
                    pMessage += "</tr>";
                }
                pMessage += "</table>";
                pMessage += "<br>";

                HashMap hmSendToList;
                String recievers = "sdmlerp@dineshmills.com";

                pMessage = pMessage + "<br><br><br> : Email Send to : <br>";
                hmSendToList = clsHierarchy.getUserList(EITLERPGLOBAL.gCompanyID, hierarchyId, userId, true);
                for (int i = 1; i <= hmSendToList.size(); i++) {
                    clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                    int U_ID = ObjUser.getAttribute("USER_ID").getInt();

                    String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, U_ID);

                    System.out.println("USERID : " + U_ID + ", send_to : " + to);
                    if (!to.equals("")) {
                        recievers = recievers + "," + to;
                        pMessage = pMessage + "<br>" + ObjUser.getAttribute("USER_NAME").getString();
                    }
                }
//            recievers = recievers + ",vdshanbhag@dineshmills.com";
//                cc = "abtewary@dineshmills.com";

//                pMessage = pMessage + "<br>vdshanbhag@dineshmills.com";
//                pMessage = pMessage + "<br>abtewary@dineshmills.com";
//                pMessage = pMessage + "<br><br>**** This is an auto-generated email, please do not reply ****";// For Live
                pMessage = pMessage + "<br><br>**** This is an auto-generated email from TEST SERVER, please do not reply ****"; //For Test

                System.out.println("Recivers : " + recievers);
                System.out.println("pSubject : " + pSubject);
                System.out.println("pMessage : " + pMessage);

                String responce = MailNotification.sendNotificationMail(moduleId, pSubject, pMessage, recievers, cc, hierarchyId);
                System.out.println("Send Mail Responce : " + responce);

            } catch (Exception e) {
                System.out.println("Error on Mail: " + e.getMessage());
            }
        }
    }

    private void calc_weight() {
        double l, w, g;
        l = w = g = 0;
        try {
            l = Double.parseDouble(txtAdjLength.getText());
        } catch (Exception a) {
            l = 0;
        }
        try {
            w = Double.parseDouble(txtAdjWidth.getText());
        } catch (Exception b) {
            w = 0;
        }
        try {
            g = Double.parseDouble(txtAdjGSM.getText());
        } catch (Exception c) {
            g = 0;
        }
        txtAdjWeight.setText(String.valueOf(EITLERPGLOBAL.round((l * w * g) / 1000, 2)));
    }

    private void Auto_Posting(String rejDocNo, String rejDocDate) {
        String sql = "", pDocNo = "", pDocDate = "";

        try {

            //START OF SCRAP
            if (cmbObsoleteUPNStatus.getSelectedItem().toString().trim().equals("SCRAP")) {

                pDocNo = clsFirstFree.getNextFreeNo(2, 662, 364, true);
                pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                String pPieceNo = txtPieceNo.getText().trim();
                String pRejReason = txtScrapReason.getText().trim();

                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP "
                        + "(DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                        + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                        + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, APPROVED, APPROVED_DATE, REJECTED, REJECTED_DATE, CANCELED, "
                        + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                        + "VALUES('" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'FELT REJECTION', "
                        + "'" + rejDocNo + "', '" + EITLERPGLOBAL.formatDateDB(rejDocDate) + "', '" + pRejReason + "', "
                        + "338, '" + pDocDate + "', 0, '0000-00-00', 0, '0000-00-00', 0, '0000-00-00', 0, "
                        + "4435, 1, '" + pDocDate + "')";
                System.out.println("Insert Into Obsolete Piece Scrap :" + sql);
                data.Execute(sql);

                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_SCRAP_H "
                        + "(REVISION_NO, UPDATED_BY, ENTRY_DATE, APPROVAL_STATUS, APPROVER_REMARKS, "
                        + "DOC_NO, DOC_DATE, PIECE_NO, REF_ENTRY_FORM, "
                        + "REF_DOC_NO, REF_DOC_DATE, REF_SCRAP_REASON, "
                        + "HIERARCHY_ID, CHANGED, CHANGED_DATE) "
                        + "VALUES (1, 338, '" + pDocDate + "', 'W', '', "
                        + "'" + pDocNo + "', '" + pDocDate + "', '" + pPieceNo + "', 'FELT REJECTION', "
                        + "'" + rejDocNo + "', '" + EITLERPGLOBAL.formatDateDB(rejDocDate) + "', '" + pRejReason + "', "
                        + "4435, 1, '" + pDocDate + "')";
                System.out.println("Insert Into History of Obsolete Piece Scrap :" + sql);
                data.Execute(sql);

                sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                        + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,"
                        + "TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,"
                        + "ACTION_DATE,CHANGED,CHANGED_DATE) "
                        + "SELECT 662,'" + pDocNo + "','" + pDocDate + "',USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
                        + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'FROM FELT REJECTION',SR_NO,0,'','" + pDocDate + "',"
                        + "'0000-00-00',1,'" + pDocDate + "'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS  WHERE HIERARCHY_ID = 4435 ";
                System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                data.Execute(sql);

            }
            //END OF SCRAP

            //START OF MAPPED
            if (cmbObsoleteUPNStatus.getSelectedItem().toString().trim().equals("MAPPED")) {

                pDocNo = clsFirstFree.getNextFreeNo(2, 661, 363, true);
                pDocDate = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");

                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_HEADER "
                        + "(DOC_NO, DOC_DATE, DOCUMENT_NAME, REMARK, "
                        + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED, CHANGED_DATE, REJECTED, REJECTED_BY, "
                        + "REJECTED_DATE, APPROVED, APPROVED_BY, APPROVED_DATE, CANCELED, HIERARCHY_ID) "
                        + "VALUES('" + pDocNo + "', '" + pDocDate + "', 'FELT REJECTION', '', "
                        + "338, '" + pDocDate + "', 0, '0000-00-00', 1, '" + pDocDate + "', 0, '', "
                        + "'0000-00-00', 0, '', '0000-00-00', 0, 4439)";
                System.out.println("Insert Into Header Data :" + sql);
                data.Execute(sql);

                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_HEADER_H "
                        + "(REVISION_NO, DOC_NO, DOC_DATE, DOCUMENT_NAME, REMARK, "
                        + "CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, CHANGED, CHANGED_DATE, REJECTED, REJECTED_BY, "
                        + "REJECTED_DATE, APPROVED, APPROVED_BY, APPROVED_DATE, CANCELED, HIERARCHY_ID, "
                        + "REJECTED_REMARKS, FROM_IP, UPDATED_BY, UPDATED_DATE, APPROVAL_STATUS, ENTRY_DATE, APPROVER_REMARKS) "
                        + "VALUES(1, '" + pDocNo + "', '" + pDocDate + "', 'FELT REJECTION', '', "
                        + "338, '" + pDocDate + "', 0, '0000-00-00', 1, '" + pDocDate + "', 0, '', "
                        + "'0000-00-00', 0, '', '0000-00-00', 0, 4439, "
                        + "'', '200.0.0.227', 311, '" + pDocDate + "', 'W', '" + pDocDate + "', '')";
                System.out.println("Insert Into Header History Data :" + sql);
                data.Execute(sql);

                String pPieceNo = txtPieceNo.getText().trim();
                String pPartyCode = txtPartyCode.getText().trim();
                String pPartyName = clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, pPartyCode);
                String pPieceStage = data.getStringValueFromDB("SELECT PR_PIECE_STAGE FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pPieceNo + "' ");
                String pUPN = data.getStringValueFromDB("SELECT PR_UPN FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_PIECE_NO='" + pPieceNo + "' ");
                String pUPNStatus = "MAPPED";

                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_DETAIL "
                        + "(SR_NO, DOC_NO, PIECE_NO, PARTY_CODE, PARTY_NAME, UPN, DIVISION_POSSIBILITY, "
                        + "UPN1, UPN2, UPN3, UPN4, UPN5, UPN6, UPN7, UPN8, UPN9, UPN10, UPN11, UPN12, UPN13, UPN14, UPN15, UPN16, UPN17, UPN18, UPN19, UPN20, "
                        + "REMARK, PIECE_STAGE, UPN_ASSIGN_STATUS) "
                        + "SELECT 1, '" + pDocNo + "', PIECE_NO, PARTY_CODE, '" + pPartyName + "', '" + pUPN + "', 0, "
                        + "'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', "
                        + "'', '" + pPieceStage + "', '" + pUPNStatus + "' "
                        + "FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP "
                        + "WHERE MAPPING_DOC_NO='' AND PIECE_NO='" + pPieceNo + "' AND PARTY_CODE='" + pPartyCode + "' ";
                System.out.println("Insert Into Detail Data :" + sql);
                data.Execute(sql);

                sql = "INSERT INTO PRODUCTION.FELT_OBSOLETE_MAPPING_DETAIL_H "
                        + "(REVISION_NO, SR_NO, DOC_NO, PIECE_NO, PARTY_CODE, PARTY_NAME, UPN, DIVISION_POSSIBILITY, "
                        + "UPN1, UPN2, UPN3, UPN4, UPN5, UPN6, UPN7, UPN8, UPN9, UPN10, UPN11, UPN12, UPN13, UPN14, UPN15, UPN16, UPN17, UPN18, UPN19, UPN20, "
                        + "REMARK, UPN_ASSIGN_STATUS) "
                        + "SELECT 1, 1, '" + pDocNo + "', PIECE_NO, PARTY_CODE, '" + pPartyName + "', '" + pUPN + "', 0, "
                        + "'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', "
                        + "'', '" + pUPNStatus + "' "
                        + "FROM PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP "
                        + "WHERE MAPPING_DOC_NO='' AND PIECE_NO='" + pPieceNo + "' AND PARTY_CODE='" + pPartyCode + "' ";
                System.out.println("Insert Into Detail History Data :" + sql);
                data.Execute(sql);

                data.Execute("UPDATE PRODUCTION.OBSOLETE_MAPPED_UNMAPPED_SCRAP SET MAPPING_DOC_NO='" + pDocNo + "' "
                        + "WHERE COALESCE(MAPPING_DOC_NO,'')='' AND PIECE_NO='" + pPieceNo + "' AND PARTY_CODE='" + pPartyCode + "' ");

                sql = "INSERT INTO PRODUCTION.FELT_PROD_DOC_DATA "
                        + "(MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,"
                        + "TYPE,REMARKS,SR_NO,FROM_USER_ID,FROM_REMARKS,RECEIVED_DATE,"
                        + "ACTION_DATE,CHANGED,CHANGED_DATE) "
                        + "SELECT 661,'" + pDocNo + "','" + pDocDate + "',USER_ID,CASE WHEN CREATOR =1 THEN 'W' ELSE 'P'  END, "
                        + "CASE WHEN CREATOR =0 THEN 'A' ELSE 'C'  END,'FROM FELT REJECTION',SR_NO,0,'','" + pDocDate + "',"
                        + "'0000-00-00',1,'" + pDocDate + "'  FROM DINESHMILLS.D_COM_HIERARCHY_RIGHTS  WHERE HIERARCHY_ID = 4439 ";
                System.out.println("Insert Into Felt Prod Doc Data :" + sql);
                data.Execute(sql);
            }
            //END OF MAPPED

        } catch (Exception e) {
            System.out.println("Error while Saving : " + e.getMessage());
        }
    }
}
