/*
 * frmFeltLRUpdation.java
 *
 * Created on July 11, 2013, 12:10 PM
 */

package EITLERP.Production.FeltLRUpdation;

/**
 *
 * @author  VIVEK KUMAR
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Pattern;
import java.net.URL;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.LOV;
import EITLERP.Production.clsFeltProductionApprovalFlow;

public class frmFeltLRUpdation extends javax.swing.JApplet {
    
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    private String despatchNote="";
    private boolean Updating=false;
    private boolean HistoryView=false;
    private boolean DoNotEvaluate=false;
    
    private clsFeltLRUpdation ObjFeltLRUpdation;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;
    
    private EITLTableModel DataModelPendingLR;
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    
    /** Creates new form frmFeltLRUpdation */
    public void init() {
        System.gc();
        setSize(835,485);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        cmdEmail.setIcon(EITLERPGLOBAL.getImage("EMAIL"));
        
        DataModel=new EITLTableModel();
        ObjFeltLRUpdation=new clsFeltLRUpdation();
        
        
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        if(ObjFeltLRUpdation.LoadData()) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(this,"Error occured while Loading Data. Error is "+ObjFeltLRUpdation.LastError,"DATA LOADING ERROR",JOptionPane.ERROR_MESSAGE);
        }
        SetMenuForRights();
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdEmail = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdRemove = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        EditorMessage = new javax.swing.JEditorPane();
        cmdSend = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        txtTO = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablePendingLR = new javax.swing.JTable();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdEmail.setToolTipText("Email");
        cmdEmail.setEnabled(false);
        cmdEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEmailActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEmail);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 810, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" FELT LR & CARRIER UPDATION DETAILS - ");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 810, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        jLabel3.setText("Invoice Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(10, 12, 80, 15);

        txtInvoiceDate.setFont(new java.awt.Font("Dialog", 1, 14));
        txtInvoiceDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtInvoiceDate.setEnabled(false);
        txtInvoiceDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceDateFocusGained(evt);
            }
        });

        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(95, 10, 102, 21);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 44, 763, 240);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(7, 40, 771, 3);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(673, 290, 100, 25);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14));
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(200, 12, 20, 18);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Next Tab");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(573, 290, 90, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add New Row to Table by Press ALT+A");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(473, 290, 90, 25);

        Tab.addTab("Invoice Extra Details", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 13, 62, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 10, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 47, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14));
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 45, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 82, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 80, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 117, 73, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 115, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 227, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 225, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 262, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 260, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 290, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(730, 80, 43, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 290, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 120);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 151, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 170, 640, 140);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 285, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 200, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 170, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 230, 110, 25);

        Tab.addTab("Status", jPanel1);

        jPanel2.setLayout(null);

        EditorMessage.setContentType("text/html");
        EditorMessage.setEnabled(false);
        EditorMessage.getDocument().putProperty("ZOOM_FACTOR", new Double(2.5));
        jScrollPane4.setViewportView(EditorMessage);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(0, 74, 787, 250);

        cmdSend.setText("Send");
        cmdSend.setToolTipText("Send Mail");
        cmdSend.setEnabled(false);
        cmdSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSendActionPerformed(evt);
            }
        });

        jPanel2.add(cmdSend);
        cmdSend.setBounds(710, 38, 70, 25);

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jPanel4);
        jPanel4.setBounds(0, 70, 785, 3);

        txtTO.setToolTipText("Email Id of Party ( comma(,) separated )");
        txtTO.setAutoscrolls(false);
        txtTO.setEnabled(false);
        //txtTO = new JTextFieldHint(new JTextField(),"Search by Press F1");
        jPanel2.add(txtTO);
        txtTO.setBounds(90, 39, 610, 22);

        jLabel10.setText("To( Email Id )");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(5, 42, 85, 15);

        jLabel11.setText("Party Code");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(5, 11, 67, 15);

        txtPartyCode.setFont(new java.awt.Font("Dialog", 1, 14));
        txtPartyCode.setToolTipText("");
        txtPartyCode.setEnabled(false);
        jPanel2.add(txtPartyCode);
        txtPartyCode.setBounds(90, 9, 70, 22);

        lblPartyName.setBackground(new java.awt.Color(255, 255, 255));
        lblPartyName.setFont(new java.awt.Font("Dialog", 1, 14));
        lblPartyName.setToolTipText("PARTY NAME");
        lblPartyName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        lblPartyName.setOpaque(true);
        jPanel2.add(lblPartyName);
        lblPartyName.setBounds(170, 9, 610, 21);

        Tab.addTab("Send Mail", jPanel2);

        jPanel5.setLayout(null);

        TablePendingLR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePendingLR.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane5.setViewportView(TablePendingLR);

        jPanel5.add(jScrollPane5);
        jScrollPane5.setBounds(0, 0, 787, 325);

        Tab.addTab("Pending LR", jPanel5);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 350);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(2, 418, 790, 22);

    }//GEN-END:initComponents
    
    private void cmdEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEmailActionPerformed
        if(Table.getRowCount()>0 && Table.getSelectedRow()>=0) {
            String partyCode= Table.getValueAt(Table.getSelectedRow(), 3).toString();
            if(EITLERP.clsSales_Party.IsPartyExistEx(EITLERPGLOBAL.gCompanyID,partyCode)){
                Loader ObjLoader=new Loader(this,"EITLERP.Production.FeltLRUpdation.frmNoteFeltLRUpdation",true);
                frmNoteFeltLRUpdation ObjNoteFeltLRUpdation=(frmNoteFeltLRUpdation)ObjLoader.getObj();
                
                if(ObjNoteFeltLRUpdation.Cancelled==false) {
                    despatchNote=ObjNoteFeltLRUpdation.despatchNote;
                    txtPartyCode.setText(partyCode);
                    String partyDetails[]=ObjFeltLRUpdation.getPartyDetails(partyCode);
                    lblPartyName.setText(partyDetails[0]);
                    txtTO.setText(partyDetails[1]);
                    txtTO.setEnabled(true);
                    cmdSend.setEnabled(true);
                    EditorMessage.setEnabled(true);
                    EditorMessage.setContentType("text/html; charset=utf-8");
                    EditorMessage.setText(ObjFeltLRUpdation.createMailBody(partyCode, Table.getValueAt(Table.getSelectedRow(), 2).toString().trim(), despatchNote));
                    Tab.setSelectedIndex(3);
                }
            }else JOptionPane.showMessageDialog(this,"Party doesn't Exist.","ERROR",JOptionPane.ERROR_MESSAGE);
        }else
            JOptionPane.showMessageDialog(this,"Select a Row from LR Detail Table.","ERROR",JOptionPane.ERROR_MESSAGE);
        
    }//GEN-LAST:event_cmdEmailActionPerformed
    
    private void cmdSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSendActionPerformed
        String toEmailId=txtTO.getText().trim();
        if(toEmailId.equals("")) {
            JOptionPane.showMessageDialog(this,"No Email Address specified.","No Email Address",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Pattern rfc2822 = Pattern.compile("^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$");
        String []emailId=toEmailId.split(",");
        for(int i=0;i<emailId.length;i++) {
            if(!rfc2822.matcher(emailId[i]).matches()) {
                JOptionPane.showMessageDialog(this,"No. "+(i+1)+" Email Address is Wrong.","Incorrect Email Address",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditorMessage.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"No Text In Message Area.","Blank Message",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            long mailNo=ObjFeltLRUpdation.saveMailDetail(txtTO.getText().trim(), EditorMessage.getText());
            if(mailNo!=0) {
                URL MailDocument=new URL("http://200.0.0.223:8080/jmx-console/dinesh/EITLERP/Reports/Production/FeltLRDetailsMailer.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&DocNo="+mailNo);                
                EITLERPGLOBAL.loginContext.showDocument(MailDocument,"_blank");
            }
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"Error In Sending Mail. Error is "+e.getMessage()+" and "+ObjFeltLRUpdation.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        lblStatus.setText("Message Sent Successfully!");
        txtPartyCode.setEnabled(false);
        cmdSend.setEnabled(false);
        txtTO.setEnabled(false);
        EditorMessage.setEnabled(false);
    }//GEN-LAST:event_cmdSendActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        try {
            if(EditMode!=0) {//Only Process keys when in editing mode
                if(evt.getKeyCode()==112){ //F1 Key pressed
                    if(Table.getSelectedColumn()==1) {
                        LOV aList=new LOV();
                        aList.SQL="SELECT INVOICE_NO, PARTY_CODE FROM PRODUCTION.FELT_INVOICE_DATA WHERE INVOICE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND INVOICE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim())+"' AND INVOICE_NO NOT IN (SELECT INVOICE_NO FROM PRODUCTION.FELT_INVOICE_EXTRA_DETAIL WHERE INVOICE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND INVOICE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim())+"')";
                        aList.ReturnCol=1;
                        aList.SecondCol=2;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=1;
                        
                        if(aList.ShowLOV()) {
                            if(Table.getCellEditor()!=null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),1);
                            Table.setValueAt(txtInvoiceDate.getText().trim(), Table.getSelectedRow(),2);
                            Table.setValueAt(aList.SecondVal, Table.getSelectedRow(),3);
                            Table.setValueAt(txtInvoiceDate.getText().trim(), Table.getSelectedRow(),5);
                        }
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        String invoiceDate = txtInvoiceDate.getText().trim();
        
        if(invoiceDate.equals("") || !EITLERPGLOBAL.isDate(invoiceDate)) {
            JOptionPane.showMessageDialog(this,"Enter Valid Invoice Date.","Wrong Invoice Date",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // check Invoice Date is Within Financial Year?
        java.sql.Date FinFromDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date InvoiceDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(invoiceDate));
        if((InvoiceDate.after(FinFromDate)||InvoiceDate.compareTo(FinFromDate)==0)&&(InvoiceDate.before(FinToDate)||InvoiceDate.compareTo(FinToDate)==0)) {
            //Within the year
        }else {
            JOptionPane.showMessageDialog(this,"Invoice Date is Not Within Financial Year.","FINANCIAL YEAR ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        txtInvoiceDate.setEnabled(false);
        
        Updating=true;
        Object[] rowData=new Object[9];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="";
        rowData[6]="";
        rowData[7]="";
        rowData[8]="";
        
        DataModel.addRow(rowData);
        Updating=false;
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(this,"Select a row from Document Update History");
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltLRUpdation.HistoryView = false;
        ObjFeltLRUpdation.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed
    
    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltLRUpdation.ShowHistory(ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
    
    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtInvoiceDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtInvoiceDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceDateFocusGained
        ShowMessage("Enter Invoice Date");
    }//GEN-LAST:event_txtInvoiceDateFocusGained
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(714,ObjFeltLRUpdation.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltLRUpdation.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane EditorMessage;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TablePendingLR;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdEmail;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSend;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtTO;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
        cmdEmail.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtInvoiceDate.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
    }
    
    private void ClearFields() {
        txtInvoiceDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }
    
    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,714)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        //=========== Title Bar Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjFeltLRUpdation.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else {
                    lblTitle.setBackground(Color.GRAY);
                }
            }
            //============================================//
            
            // --- Mail Rights --
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7015,70154) && ObjFeltLRUpdation.getAttribute("APPROVED").getInt()==1) {
                cmdEmail.setEnabled(true);
            }else {
                cmdEmail.setEnabled(false);
            }
            
            String invoiceDate = EITLERPGLOBAL.formatDate(ObjFeltLRUpdation.getAttribute("INVOICE_DATE").getString());
            lblTitle.setText(" FELT LR UPDATION DETAILS - "+ invoiceDate);
            lblRevNo.setText(Integer.toString(ObjFeltLRUpdation.getAttribute("REVISION_NO").getInt()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjFeltLRUpdation.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate=true;
            
            FormatGrid();
            txtInvoiceDate.setText(invoiceDate);
            
            //Now Generate Table
            for(int i=1;i<=ObjFeltLRUpdation.hmFeltLRUpdationDetails.size();i++) {
                clsFeltLRUpdationDetails ObjFeltLRUpdationDetails=(clsFeltLRUpdationDetails)ObjFeltLRUpdation.hmFeltLRUpdationDetails.get(Integer.toString(i));
                
                Object[] rowData=new Object[9];
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjFeltLRUpdationDetails.getAttribute("INVOICE_NO").getString();
                rowData[2]=EITLERPGLOBAL.formatDate(ObjFeltLRUpdationDetails.getAttribute("INVOICE_DATE").getString());
                rowData[3]=ObjFeltLRUpdationDetails.getAttribute("PARTY_CODE").getString();
                rowData[4]=ObjFeltLRUpdationDetails.getAttribute("LR_NO").getString();
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFeltLRUpdationDetails.getAttribute("LR_DATE").getString());
                rowData[6]=ObjFeltLRUpdationDetails.getAttribute("CARRIER").getString();
                rowData[7]=Double.toString(EITLERPGLOBAL.round(ObjFeltLRUpdationDetails.getAttribute("FREIGHT").getVal(),2));
                rowData[8]=ObjFeltLRUpdationDetails.getAttribute("REMARKS").getString();
                
                DataModel.addRow(rowData);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            hmList=clsFeltProductionApprovalFlow.getDocumentFlow(714, ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmList.size();i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString())+ ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10,19);
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())+ ObjFlow.getAttribute("ACTION_DATE").getString().substring(10,19);
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            
            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsFeltLRUpdation.getHistoryList(ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsFeltLRUpdation ObjFeltLRUpdation=(clsFeltLRUpdation)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjFeltLRUpdation.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(2, ObjFeltLRUpdation.getAttribute("UPDATED_BY").getInt());
                rowData[2]=EITLERPGLOBAL.formatDate(ObjFeltLRUpdation.getAttribute("ENTRY_DATE").getString()) + ObjFeltLRUpdation.getAttribute("ENTRY_DATE").getString().substring(10,19);
                
                String ApprovalStatus="";
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjFeltLRUpdation.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjFeltLRUpdation.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
            
            // Generating Grid for Showing Pending LR Details of INVOICES
            FormatGridPendingLR();
            HashMap pendingLR=ObjFeltLRUpdation.getPendingLRData(EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim()));
            for(int i=1;i<=pendingLR.size();i++) {
                clsFeltLRUpdation ObjFeltLRUpdation=(clsFeltLRUpdation)pendingLR.get(Integer.toString(i));
                Object[] rowData=new Object[4];
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjFeltLRUpdation.getAttribute("INVOICE_NO").getString();
                rowData[2]=txtInvoiceDate.getText();
                rowData[3]=ObjFeltLRUpdation.getAttribute("PARTY_CODE").getString();
                
                DataModelPendingLR.addRow(rowData);
            }
            
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    private void FormatGrid() {
        Updating=true; //Stops recursion
        
        try {
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel columnModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Invoice No."); //1 - Read Only
            DataModel.addColumn("Invoice Date"); //2 - Read Only
            DataModel.addColumn("Party Code"); //6
            DataModel.addColumn("LR No."); //3
            DataModel.addColumn("LR Date"); //4
            DataModel.addColumn("Carrier"); //5
            DataModel.addColumn("Freight"); //7
            DataModel.addColumn("Remarks"); //8
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            
            columnModel.getColumn(0).setMinWidth(20);
            columnModel.getColumn(1).setMinWidth(90);
            columnModel.getColumn(2).setMinWidth(100);
            columnModel.getColumn(3).setMinWidth(90);
            columnModel.getColumn(4).setMinWidth(90);
            columnModel.getColumn(5).setMinWidth(100);
            columnModel.getColumn(6).setMinWidth(300);
            columnModel.getColumn(7).setMinWidth(60);
            columnModel.getColumn(8).setMinWidth(200);
            
            if(EditMode!=0){
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int column=Table.getSelectedColumn();
                        String strVar=DataModel.getVariable(column);
                        //=============== Cell Editing Routine =======================//
                        Table.editCellAt(Table.getSelectedRow(),column);
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                        //============= Cell Editing Routine Ended =================//
                    }
                });
            }
        }catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
        Updating=false;
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=714 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=714 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= clsFeltProductionApprovalFlow.getRemainingUsers(714,ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(714, ObjFeltLRUpdation.getAttribute("DOC_NO").getString(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(714, ObjFeltLRUpdation.getAttribute("DOC_NO").getString(), (int)ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
            
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(714,ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
            cmbHierarchy.setEnabled(true);
        }else {
            cmbHierarchy.setEnabled(false);
        }*/
        
        // select hold for default approval
        OpgHold.setSelected(true);
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(714,ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(714,FromUserID,ObjFeltLRUpdation.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7015,70151)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7015,70152)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7015,70153)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7015,0)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        lblTitle.setBackground(Color.GRAY);
    }
    
    private void Edit() {
        String documentNo=(String)ObjFeltLRUpdation.getAttribute("DOC_NO").getObj();
        if(ObjFeltLRUpdation.IsEditable(documentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            
            if(clsFeltProductionApprovalFlow.IsCreator(714,documentNo)) {
                SetFields(true);
                txtInvoiceDate.setEnabled(false);
            }
            else {
                EnableApproval();
            }
        }else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","EDITING ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Delete() {
        if(ObjFeltLRUpdation.CanDelete(ObjFeltLRUpdation.getAttribute("DOC_NO").getString(),EITLERPGLOBAL.gNewUserID)){
            DisplayData();
        }else {
            JOptionPane.showMessageDialog(this,ObjFeltLRUpdation.LastError,"DELETION ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Save() {
        String invoiceNo, invoiceDate, documentNo, lrNo, lrDate, carrier, partyCode="", freightString="", remarks="";
        float freight=0;
        int i=0, j=0;
        
        // creating document no
        documentNo = ObjFeltLRUpdation.getDocumentNo(txtInvoiceDate.getText().trim());
        
        if(documentNo.equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Document No","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Check the no. of items in table
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(this,"Enter LR Updation Details Before Saving.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            // check duplicate piece no in table
            for(int k=0;k<=Table.getRowCount()-1;k++) {
                for(int l=k;l<=Table.getRowCount()-1;l++){
                    if(l!=k && ((String)Table.getValueAt(k, 1)).trim().equals(((String)Table.getValueAt(l, 1)).trim()) ){
                        JOptionPane.showMessageDialog(this, "Same Invoice No at Row "+(k+1)+" and "+(l+1),"ERROR",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
            
            //Check the entered details in Table.
            for(i=0;i<=Table.getRowCount()-1;i++) {
                invoiceNo = ((String)Table.getValueAt(i, 1)).trim().toUpperCase();
                invoiceDate = ((String)Table.getValueAt(i, 2)).trim();
                partyCode = ((String)Table.getValueAt(i, 3)).trim();
                lrNo = ((String)Table.getValueAt(i, 4)).trim().toUpperCase();
                lrDate = ((String)Table.getValueAt(i, 5)).trim();
                carrier = ((String)Table.getValueAt(i, 6)).trim().toUpperCase();
                freightString = ((String)Table.getValueAt(i, 7)).trim();
                remarks = ((String)Table.getValueAt(i, 8)).trim().toUpperCase();
                
                j++;
                if(partyCode.equals("") || partyCode.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter Party Code.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(lrNo.equals("") || lrNo.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter LR No.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(lrDate.equals("") || !EITLERPGLOBAL.isDate(lrDate)){
                    JOptionPane.showMessageDialog(this,"Enter LR Date.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(carrier.equals("") || carrier.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter Carrier.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(freightString.equals("") || freightString.equals(null)) {
                    JOptionPane.showMessageDialog(this,"Enter Freight.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }else freight=Float.parseFloat(freightString);
                
                j=0;
                
                // check piece no is already weaved?
                if(EditMode==EITLERPGLOBAL.ADD) {
                    if(ObjFeltLRUpdation.checkInvoiceNoInDB(invoiceNo)) {
                        JOptionPane.showMessageDialog(this,"Invoice No."+invoiceNo+" Already Updated."," Invoice No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // check piece no is already weaved?
                if(EditMode==EITLERPGLOBAL.EDIT) {
                    if(ObjFeltLRUpdation.checkInvoiceNoInDB(invoiceNo,invoiceDate)) {
                        JOptionPane.showMessageDialog(this,"Invoice No."+invoiceNo+" Already Updated."," Invoice No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Enter Correct Details at Row "+(i+1) +" and Column "+(j+1)+". Error is "+nfe.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            j=0;
            nfe.printStackTrace();
            return;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this,"Select the hierarchy.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this,"Select the Approval Action.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter the remarks for rejection","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected()) && cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(this,"Select the user, to whom rejected document to be send","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //set data for insert/update
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltLRUpdation.Insert()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjFeltLRUpdation.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFeltLRUpdation.Update()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving editing. Error is "+ObjFeltLRUpdation.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    //Sets data to the Details Class Object
    private void SetData() {
        String invoiceNo, invoiceDate, documentNo, lrNo, lrDate, carrier, partyCode="", freightString="", remarks="";
        float freight=0;
        
        documentNo = ObjFeltLRUpdation.getDocumentNo(txtInvoiceDate.getText().trim());
        if(EditMode==EITLERPGLOBAL.EDIT) documentNo=ObjFeltLRUpdation.getAttribute("DOC_NO").getString();
        
        ObjFeltLRUpdation.setAttribute("DOC_NO",documentNo);
        
        ObjFeltLRUpdation.hmFeltLRUpdationDetails.clear();
        //Check the entered details in Table.
        for(int i=0;i<=Table.getRowCount()-1;i++) {
            invoiceNo = ((String)Table.getValueAt(i, 1)).trim().toUpperCase();
            invoiceDate = ((String)Table.getValueAt(i, 2)).trim();
            partyCode = ((String)Table.getValueAt(i, 3)).trim();
            lrNo = ((String)Table.getValueAt(i, 4)).trim().toUpperCase();
            lrDate = ((String)Table.getValueAt(i, 5)).trim();
            carrier = ((String)Table.getValueAt(i, 6)).trim().toUpperCase();
            freightString = ((String)Table.getValueAt(i, 7)).trim();
            remarks = ((String)Table.getValueAt(i, 8)).trim().toUpperCase();
            
            freight=Float.parseFloat(freightString);
            
            clsFeltLRUpdationDetails ObjFeltLRUpdationDetails = new clsFeltLRUpdationDetails();
            ObjFeltLRUpdationDetails.setAttribute("INVOICE_NO",invoiceNo);
            ObjFeltLRUpdationDetails.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDateDB(invoiceDate));
            ObjFeltLRUpdationDetails.setAttribute("PARTY_CODE",partyCode);
            ObjFeltLRUpdationDetails.setAttribute("LR_NO",lrNo);
            ObjFeltLRUpdationDetails.setAttribute("LR_DATE",EITLERPGLOBAL.formatDateDB(lrDate));
            ObjFeltLRUpdationDetails.setAttribute("CARRIER",carrier);
            ObjFeltLRUpdationDetails.setAttribute("FREIGHT",freight);
            ObjFeltLRUpdationDetails.setAttribute("REMARKS",remarks);
            
            ObjFeltLRUpdation.hmFeltLRUpdationDetails.put(Integer.toString(ObjFeltLRUpdation.hmFeltLRUpdationDetails.size()+1), ObjFeltLRUpdationDetails);
        }
        
        //-------- Update Approval Specific Fields -----------//
        ObjFeltLRUpdation.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltLRUpdation.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFeltLRUpdation.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltLRUpdation.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim());
        ObjFeltLRUpdation.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if(OpgApprove.isSelected()) {
            ObjFeltLRUpdation.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFeltLRUpdation.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFeltLRUpdation.setAttribute("APPROVAL_STATUS","R");
            ObjFeltLRUpdation.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFeltLRUpdation.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFeltLRUpdation.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
        }else {
            ObjFeltLRUpdation.setAttribute("CREATED_BY", (int)ObjFeltLRUpdation.getAttribute("CREATED_BY").getVal());
            ObjFeltLRUpdation.setAttribute("CREATED_DATE", ObjFeltLRUpdation.getAttribute("CREATED_DATE").getString());
            ObjFeltLRUpdation.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Production.FeltLRUpdation.frmFindFeltLRUpdation",true);
        frmFindFeltLRUpdation ObjFindFeltLRUpdation=(frmFindFeltLRUpdation)ObjLoader.getObj();
        
        if(ObjFindFeltLRUpdation.Cancelled==false) {
            if(!ObjFeltLRUpdation.Filter(ObjFindFeltLRUpdation.stringFindQuery)) {
                JOptionPane.showMessageDialog(this," No records found.","Find LR Updation Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        ObjFeltLRUpdation.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFeltLRUpdation.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFeltLRUpdation.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFeltLRUpdation.MoveLast();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(" "+pMessage);
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }
    
    private void FormatGridPendingLR() {
        DataModelPendingLR=new EITLTableModel();
        
        TablePendingLR.removeAll();
        TablePendingLR.setModel(DataModelPendingLR);
                
        //Set the table Readonly
        DataModelPendingLR.TableReadOnly(true);
        
        //Add the columns
        DataModelPendingLR.addColumn("Sr. No.");
        DataModelPendingLR.addColumn("Invoice No.");
        DataModelPendingLR.addColumn("Invoice Date");
        DataModelPendingLR.addColumn("Party Code");
        
        TableColumnModel columnModel = TablePendingLR.getColumnModel();
        columnModel.getColumn(0).setMinWidth(20);
        columnModel.getColumn(1).setMinWidth(90);
        columnModel.getColumn(2).setMinWidth(100);
        columnModel.getColumn(3).setMinWidth(90);
        
    }
    
}
