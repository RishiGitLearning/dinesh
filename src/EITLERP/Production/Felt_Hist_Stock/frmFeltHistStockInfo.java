/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.Production.Felt_Hist_Stock;

import EITLERP.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.sql.*;
import java.net.*;
import java.math.*;
import java.lang.*;
import java.text.DecimalFormat;
import java.lang.Double;
import java.io.File;
import EITLERP.Production.ReportUI.*;
import java.awt.Cursor;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmFeltHistStockInfo extends javax.swing.JApplet {

    String SelUserID = "";
    String strSQL = "";
    /*
     String strLengthFrom="";
     String strLengthTo="";
     String strWidthFrom="";
     String strWidthTo="";
     String strGSQFrom="";
     String strGSQTo="";
     String strDiscountPerFrom="";
     String strDiscountPerTo="";
     String strZone = "";
     String strAgreedDateFrom ="";
     String strAgreedDateTo ="";
       
     */
    String strPieceNo = "";
    String strProductCode = "";

    private clsExcelExporter exp = new clsExcelExporter();
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellPainter = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellPaint = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellPainterA = new EITLTableCellRenderer();

    private EITLTableModel DataModelStockSummary = new EITLTableModel();
    private EITLTableModel DataModelPieceWiseDetail = new EITLTableModel();
    private EITLTableModel DataModelMISWHStockSummary = new EITLTableModel();
    private EITLTableModel DataModelDespatched = new EITLTableModel();

    /*
     private EITLTableModel DataModelDiscount = new EITLTableModel();
     private EITLTableModel DataModelTarget = new EITLTableModel();
     private EITLTableModel DataModelTargetA = new EITLTableModel();
     private EITLTableModel DataModelMisc = new EITLTableModel();
     private EITLTableModel DataModelSeam = new EITLTableModel();
     private EITLTableModel DataModelSalesY = new EITLTableModel();
     private EITLTableModel DataModelSalesM = new EITLTableModel();
     private EITLTableModel DataModelDiverted = new EITLTableModel();
     private EITLTableModel DataModelAgeing = new EITLTableModel();
     private EITLTableModel DataModelMISAgeing = new EITLTableModel();
     private EITLTableModel DataModelMISAgeing1 = new EITLTableModel();
     private EITLTableModel DataModelPackedNotDespatched = new EITLTableModel();
     private EITLTableModel DataModelContacts = new EITLTableModel(); 
     private EITLTableModel DataModelHold = new EITLTableModel();
     private EITLTableModel DataModelCancelled = new EITLTableModel();
     private EITLTableModel DataModelMachine = new EITLTableModel();
     private EITLTableModel DataModelComplaint = new EITLTableModel();
     private EITLTableModel DataModelAgreedDate = new EITLTableModel();
     */
    private EITLComboModel cmbBuyerModel = new EITLComboModel();
    private EITLComboModel cmbStockSummaryModel = new EITLComboModel();
    private EITLComboModel cmbDespatchModel = new EITLComboModel();
    private EITLComboModel cmbPieceWiseDetailModel = new EITLComboModel();

    /*
     private EITLComboModel cmbDiscountModel = new EITLComboModel();
     private EITLComboModel cmbSeamModel = new EITLComboModel();
     private EITLComboModel cmbTargetModel = new EITLComboModel();
     private EITLComboModel cmbDeptModel=new EITLComboModel();
     private EITLComboModel cmbApprovalModel=new EITLComboModel();
     private EITLComboModel cmbCancelledModel=new EITLComboModel();
     private EITLComboModel cmbHoldModel=new EITLComboModel();
     **/
    private EITLComboModel cmbInchargeModel = new EITLComboModel();
    private EITLComboModel cmbLastddmmyyyyModel = new EITLComboModel();

    /*
     private EITLComboModel cmbMachineModel=new EITLComboModel();
     private EITLComboModel cmbComplaintModel=new EITLComboModel();
     private EITLComboModel cmbAgreedDateModel=new EITLComboModel();
     private EITLComboModel cmbAgreedOrderModel=new EITLComboModel();
     */
    public void init() {
        System.gc();
        setSize(1000, 750);
        initComponents();
        GenerateCombo();
        GenerateInchargeCombo();
        FormatGridStockSummary();
        FormatGridPieceWiseDetail();
        FormatGridMISWHStockSummary();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        StockSummaryPanel = new javax.swing.JPanel();
        cmdShowStockSummary = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableStockSummary = new javax.swing.JTable();
        txtrecordtotal = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        cmdStockSummaryExporttoExcel = new javax.swing.JButton();
        PieceWiseDetailPanel = new javax.swing.JPanel();
        cmdShowPieceWiseDetail = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePieceWiseDetail = new javax.swing.JTable();
        cmbPieceWiseDetail = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        txtstockkgtotal = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtrecord = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        txtstockamttotal = new javax.swing.JTextField();
        cmdPieceWiseDetailExporttoExcel = new javax.swing.JButton();
        MISWHProductwiseStockSummaryPanel = new javax.swing.JPanel();
        cmdShowMISWHStockSummary = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableMISWHStockSummary = new javax.swing.JTable();
        txtMISWHrecordtotal = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        cmdMISWHStockSummaryExporttoExcel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        txtpieceno = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtproductcode = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cmdClearAll = new javax.swing.JButton();
        cmbIncharge = new javax.swing.JComboBox();
        jLabel76 = new javax.swing.JLabel();
        txtMonthLastdate = new javax.swing.JTextField();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Felt's Historical Stock Information System  ");

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jPanel1.setLayout(null);
        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 1000, 29);

        jLabel2.setText("Party Code");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(310, 40, 80, 20);

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
        });

        StockSummaryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        StockSummaryPanel.setToolTipText("Stock Summary");
        StockSummaryPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        StockSummaryPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                StockSummaryPanelMouseEntered(evt);
            }
        });
        StockSummaryPanel.setLayout(null);

        cmdShowStockSummary.setText("Show List");
        cmdShowStockSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowStockSummaryActionPerformed(evt);
            }
        });
        StockSummaryPanel.add(cmdShowStockSummary);
        cmdShowStockSummary.setBounds(10, 10, 118, 29);

        TableStockSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableStockSummary.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableStockSummary.setMinimumSize(new java.awt.Dimension(1, 64));
        TableStockSummary.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        TableStockSummary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableStockSummaryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableStockSummary);

        StockSummaryPanel.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 960, 380);

        txtrecordtotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtrecordtotal.setEnabled(false);
        StockSummaryPanel.add(txtrecordtotal);
        txtrecordtotal.setBounds(270, 440, 69, 25);

        jLabel28.setText("Total Records");
        StockSummaryPanel.add(jLabel28);
        jLabel28.setBounds(180, 440, 90, 20);

        cmdStockSummaryExporttoExcel.setText("Export to Excel");
        cmdStockSummaryExporttoExcel.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdStockSummaryExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStockSummaryExporttoExcelActionPerformed(evt);
            }
        });
        StockSummaryPanel.add(cmdStockSummaryExporttoExcel);
        cmdStockSummaryExporttoExcel.setBounds(20, 440, 130, 31);

        jTabbedPane1.addTab("Stock Summary", StockSummaryPanel);

        PieceWiseDetailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PieceWiseDetailPanel.setToolTipText("PieceWise Detail");
        PieceWiseDetailPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        PieceWiseDetailPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PieceWiseDetailPanelMouseEntered(evt);
            }
        });
        PieceWiseDetailPanel.setLayout(null);

        cmdShowPieceWiseDetail.setText("Show List");
        cmdShowPieceWiseDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowPieceWiseDetailActionPerformed(evt);
            }
        });
        PieceWiseDetailPanel.add(cmdShowPieceWiseDetail);
        cmdShowPieceWiseDetail.setBounds(830, 10, 118, 29);

        TablePieceWiseDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePieceWiseDetail.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        TablePieceWiseDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePieceWiseDetailMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablePieceWiseDetail);

        PieceWiseDetailPanel.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 960, 380);
        PieceWiseDetailPanel.add(cmbPieceWiseDetail);
        cmbPieceWiseDetail.setBounds(700, 10, 120, 27);

        jLabel8.setText("Sort By :");
        PieceWiseDetailPanel.add(jLabel8);
        jLabel8.setBounds(630, 10, 60, 20);

        txtstockkgtotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtstockkgtotal.setEnabled(false);
        PieceWiseDetailPanel.add(txtstockkgtotal);
        txtstockkgtotal.setBounds(640, 440, 110, 25);

        jLabel15.setText("Total KG Rcvd");
        PieceWiseDetailPanel.add(jLabel15);
        jLabel15.setBounds(770, 440, 90, 20);

        txtrecord.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtrecord.setEnabled(false);
        PieceWiseDetailPanel.add(txtrecord);
        txtrecord.setBounds(100, 10, 70, 20);

        jLabel25.setText("Total Records");
        PieceWiseDetailPanel.add(jLabel25);
        jLabel25.setBounds(10, 10, 90, 20);

        jLabel33.setText("Total Sq. Mtr");
        PieceWiseDetailPanel.add(jLabel33);
        jLabel33.setBounds(530, 440, 100, 20);

        txtstockamttotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtstockamttotal.setEnabled(false);
        PieceWiseDetailPanel.add(txtstockamttotal);
        txtstockamttotal.setBounds(860, 440, 90, 25);

        cmdPieceWiseDetailExporttoExcel.setText("Export to Excel");
        cmdPieceWiseDetailExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPieceWiseDetailExporttoExcelActionPerformed(evt);
            }
        });
        PieceWiseDetailPanel.add(cmdPieceWiseDetailExporttoExcel);
        cmdPieceWiseDetailExporttoExcel.setBounds(20, 440, 130, 29);

        jTabbedPane1.addTab("PieceWise Detail", PieceWiseDetailPanel);

        MISWHProductwiseStockSummaryPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        MISWHProductwiseStockSummaryPanel.setToolTipText("Stock Summary");
        MISWHProductwiseStockSummaryPanel.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        MISWHProductwiseStockSummaryPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MISWHProductwiseStockSummaryPanelMouseEntered(evt);
            }
        });
        MISWHProductwiseStockSummaryPanel.setLayout(null);

        cmdShowMISWHStockSummary.setText("Show List");
        cmdShowMISWHStockSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowMISWHStockSummaryActionPerformed(evt);
            }
        });
        MISWHProductwiseStockSummaryPanel.add(cmdShowMISWHStockSummary);
        cmdShowMISWHStockSummary.setBounds(10, 10, 118, 29);

        TableMISWHStockSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableMISWHStockSummary.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableMISWHStockSummary.setMinimumSize(new java.awt.Dimension(1, 64));
        TableStockSummary.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        TableMISWHStockSummary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMISWHStockSummaryMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableMISWHStockSummary);

        MISWHProductwiseStockSummaryPanel.add(jScrollPane3);
        jScrollPane3.setBounds(10, 40, 960, 380);

        txtMISWHrecordtotal.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txtMISWHrecordtotal.setEnabled(false);
        MISWHProductwiseStockSummaryPanel.add(txtMISWHrecordtotal);
        txtMISWHrecordtotal.setBounds(270, 440, 69, 25);

        jLabel29.setText("Total Records");
        MISWHProductwiseStockSummaryPanel.add(jLabel29);
        jLabel29.setBounds(180, 440, 90, 20);

        cmdMISWHStockSummaryExporttoExcel.setText("Export to Excel");
        cmdMISWHStockSummaryExporttoExcel.setMargin(new java.awt.Insets(1, 7, 1, 7));
        cmdMISWHStockSummaryExporttoExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMISWHStockSummaryExporttoExcelActionPerformed(evt);
            }
        });
        MISWHProductwiseStockSummaryPanel.add(cmdMISWHStockSummaryExporttoExcel);
        cmdMISWHStockSummaryExporttoExcel.setBounds(20, 440, 130, 31);

        jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel3.setText("DWH-R - Addition Diversion");
        MISWHProductwiseStockSummaryPanel.add(jLabel3);
        jLabel3.setBounds(630, 450, 340, 17);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel4.setText("OP - Opening");
        MISWHProductwiseStockSummaryPanel.add(jLabel4);
        jLabel4.setBounds(400, 430, 220, 17);

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel5.setText("OBS - Obsolete");
        MISWHProductwiseStockSummaryPanel.add(jLabel5);
        jLabel5.setBounds(400, 470, 220, 17);

        jLabel6.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel6.setText("CL - Closing");
        MISWHProductwiseStockSummaryPanel.add(jLabel6);
        jLabel6.setBounds(400, 450, 220, 17);

        jLabel7.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel7.setText("WOBS - Without Obsolete");
        MISWHProductwiseStockSummaryPanel.add(jLabel7);
        jLabel7.setBounds(400, 490, 220, 17);

        jLabel9.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel9.setText("D-INV - Domestic Invoice");
        MISWHProductwiseStockSummaryPanel.add(jLabel9);
        jLabel9.setBounds(630, 470, 310, 17);

        jLabel11.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel11.setText("RP - Reprocess (Diversion / Division)");
        MISWHProductwiseStockSummaryPanel.add(jLabel11);
        jLabel11.setBounds(400, 510, 310, 17);

        jLabel12.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel12.setText("E-INV - Export Invoice");
        MISWHProductwiseStockSummaryPanel.add(jLabel12);
        jLabel12.setBounds(630, 490, 310, 17);

        jLabel14.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel14.setText("WH-R - Warehouse Reciept (Production)");
        MISWHProductwiseStockSummaryPanel.add(jLabel14);
        jLabel14.setBounds(630, 430, 310, 17);

        jTabbedPane1.addTab("WH Movement Report", MISWHProductwiseStockSummaryPanel);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(6, 129, 990, 590);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Pending Order Form");

        txtpartycode.setToolTipText("Press F1 key for search Party Code");
        txtpartycode = new JTextFieldHint(new JTextField(),"Search by F1");
        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(390, 40, 110, 27);

        txtpartyname.setBackground(new java.awt.Color(204, 204, 204));
        txtpartyname = new JTextFieldHint(new JTextField(),"Party Name");
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });
        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(500, 40, 400, 27);

        jLabel34.setText("Piece No");
        getContentPane().add(jLabel34);
        jLabel34.setBounds(330, 70, 60, 20);

        txtpieceno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpiecenoFocusLost(evt);
            }
        });
        getContentPane().add(txtpieceno);
        txtpieceno.setBounds(390, 70, 270, 27);

        jLabel35.setText("Product Code");
        getContentPane().add(jLabel35);
        jLabel35.setBounds(50, 70, 90, 20);

        txtproductcode.setToolTipText("Press F! key to search Product Code");
        txtproductcode = new JTextFieldHint(new JTextField(),"Search By Press F1");
        txtproductcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtproductcodeKeyPressed(evt);
            }
        });
        getContentPane().add(txtproductcode);
        txtproductcode.setBounds(140, 70, 140, 27);

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel10.setText("Multiple selection seperated by comma( e.g  001250,22154,25874)");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(330, 100, 360, 20);

        jLabel13.setText("Month Closing Date");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 40, 130, 20);

        cmdClearAll.setText("Clear All");
        cmdClearAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdClearAll.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });
        getContentPane().add(cmdClearAll);
        cmdClearAll.setBounds(820, 70, 80, 33);
        getContentPane().add(cmbIncharge);
        cmbIncharge.setBounds(140, 100, 160, 27);

        jLabel76.setText("Incharge");
        getContentPane().add(jLabel76);
        jLabel76.setBounds(70, 100, 60, 20);

        txtMonthLastdate.setToolTipText("Press F! key to search Product Code");
        txtMonthLastdate = new JTextFieldHint(new JTextField(),"Last DD/MM/YYYY");
        getContentPane().add(txtMonthLastdate);
        txtMonthLastdate.setBounds(140, 40, 110, 27);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdShowStockSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowStockSummaryActionPerformed
        txtrecordtotal.setText("0");
        //PRODUCTION PROCESS SHOW LIST
        GenerateStockSummary();
        //doProcessing();
    }//GEN-LAST:event_cmdShowStockSummaryActionPerformed

    private void TableStockSummaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableStockSummaryMouseClicked

    }//GEN-LAST:event_TableStockSummaryMouseClicked

    private void cmdStockSummaryExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStockSummaryExporttoExcelActionPerformed
        try {

            exp.fillData(TableStockSummary, new File("/root/Desktop/StockSummary.xls"));
            exp.fillData(TableStockSummary, new File("D://StockSummary.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/StockSummary.xls' successfully in Linux PC or 'D://StockSummary.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdStockSummaryExporttoExcelActionPerformed

    private void StockSummaryPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StockSummaryPanelMouseEntered
        txtpartycode.setEnabled(true);
        txtpartyname.setEnabled(true);
        txtpieceno.setEnabled(true);
        txtproductcode.setEnabled(true);
        cmbIncharge.setEnabled(true);
    }//GEN-LAST:event_StockSummaryPanelMouseEntered

    private void cmdShowPieceWiseDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowPieceWiseDetailActionPerformed
        //STOCK AVAILABLE SHOW LIST
        txtrecord.setText("0");
        txtstockkgtotal.setText("0.00");
        txtstockamttotal.setText("0.00");
        GeneratePieceWiseDetailProcess();
    }//GEN-LAST:event_cmdShowPieceWiseDetailActionPerformed

    private void TablePieceWiseDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePieceWiseDetailMouseClicked

    }//GEN-LAST:event_TablePieceWiseDetailMouseClicked

    private void cmdPieceWiseDetailExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPieceWiseDetailExporttoExcelActionPerformed
        try {
            exp.fillData(TablePieceWiseDetail, new File("/root/Desktop/PieceWiseDetail.xls"));
            exp.fillData(TablePieceWiseDetail, new File("D://PieceWiseDetail.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/PieceWiseDetail.xls' successfully in Linux PC or 'D://PieceWiseDetail.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdPieceWiseDetailExporttoExcelActionPerformed

    private void PieceWiseDetailPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PieceWiseDetailPanelMouseEntered
        txtpartycode.setEnabled(true);
        txtpartyname.setEnabled(true);
        txtpieceno.setEnabled(true);
        txtproductcode.setEnabled(true);

        cmbIncharge.setEnabled(true);
    }//GEN-LAST:event_PieceWiseDetailPanelMouseEntered

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered

    }//GEN-LAST:event_jTabbedPane1MouseEntered


    private void txtpiecenoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpiecenoFocusLost

    }//GEN-LAST:event_txtpiecenoFocusLost

    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        txtpartyname.setText("");
        txtpartycode.setText("");
        txtpieceno.setText("");
        txtproductcode.setText("");
        txtMonthLastdate.setText("");

    }//GEN-LAST:event_cmdClearAllActionPerformed

    private void txtproductcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtproductcodeKeyPressed

        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();
            //  aList.SQL = "SELECT SUBSTRING(ITEM_CODE,1,6) AS ITEM_CODE,ITEM_DESC,GRUP FROM PRODUCTION.FELT_RATE_MASTER ORDER BY ITEM_CODE ";

            aList.SQL = "SELECT PRODUCT_CODE AS ITEM_CODE,GROUP_NAME,PRODUCT_DESC FROM PRODUCTION.FELT_QLT_RATE_MASTER WHERE EFFECTIVE_TO ='0000-00-00' UNION ALL SELECT '999999','TOTAL','TOTAL'";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            if (aList.ShowLOV()) {
                txtproductcode.setText(aList.ReturnVal);
            }
        }
    }//GEN-LAST:event_txtproductcodeKeyPressed

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        try {
            if (!txtpartycode.getText().equals("")) {
                String strSQL = "";
                ResultSet rsTmp;
                strSQL = "";
                strSQL += "SELECT PARTY_NAME,ADDRESS1,ADDRESS2,DISPATCH_STATION,INSURANCE_CODE FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' AND PARTY_CODE = " + txtpartycode.getText().trim() + "";
                rsTmp = data.getResult(strSQL);
                rsTmp.first();
                txtpartyname.setText(rsTmp.getString("PARTY_NAME"));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtpartycodeFocusLost
    /**/
    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed

    }//GEN-LAST:event_txtpartynameActionPerformed

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT PARTY_CODE,PARTY_NAME,DISPATCH_STATION FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210010' ORDER BY PARTY_NAME";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;
            if (aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void cmdShowMISWHStockSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowMISWHStockSummaryActionPerformed
        // TODO add your handling code here:
        if (txtMonthLastdate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter date.");
            return;
        } else if (!EITLERPGLOBAL.isDate(txtMonthLastdate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return;
        } else {
            txtMISWHrecordtotal.setText("0");
            //PRODUCTION PROCESS SHOW LIST
            GenerateMISWHStockSummary();
            //doProcessing();
        }
    }//GEN-LAST:event_cmdShowMISWHStockSummaryActionPerformed

    private void TableMISWHStockSummaryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMISWHStockSummaryMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableMISWHStockSummaryMouseClicked

    private void cmdMISWHStockSummaryExporttoExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMISWHStockSummaryExporttoExcelActionPerformed
        // TODO add your handling code here:
        try {

            exp.fillData(TableMISWHStockSummary, new File("/root/Desktop/MISWHStockSummary.xls"));
            exp.fillData(TableMISWHStockSummary, new File("D://MISWHStockSummary.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/MISWHStockSummary.xls' successfully in Linux PC or 'D://MISWHStockSummary.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cmdMISWHStockSummaryExporttoExcelActionPerformed

    private void MISWHProductwiseStockSummaryPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MISWHProductwiseStockSummaryPanelMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_MISWHProductwiseStockSummaryPanelMouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MISWHProductwiseStockSummaryPanel;
    private javax.swing.JPanel PieceWiseDetailPanel;
    private javax.swing.JPanel StockSummaryPanel;
    private javax.swing.JTable TableMISWHStockSummary;
    private javax.swing.JTable TablePieceWiseDetail;
    private javax.swing.JTable TableStockSummary;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbIncharge;
    private javax.swing.JComboBox cmbPieceWiseDetail;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdMISWHStockSummaryExporttoExcel;
    private javax.swing.JButton cmdPieceWiseDetailExporttoExcel;
    private javax.swing.JButton cmdShowMISWHStockSummary;
    private javax.swing.JButton cmdShowPieceWiseDetail;
    private javax.swing.JButton cmdShowStockSummary;
    private javax.swing.JButton cmdStockSummaryExporttoExcel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtMISWHrecordtotal;
    private javax.swing.JTextField txtMonthLastdate;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    private javax.swing.JTextField txtpieceno;
    private javax.swing.JTextField txtproductcode;
    private javax.swing.JTextField txtrecord;
    private javax.swing.JTextField txtrecordtotal;
    private javax.swing.JTextField txtstockamttotal;
    private javax.swing.JTextField txtstockkgtotal;
    // End of variables declaration//GEN-END:variables

    private void GenerateInchargeCombo() {
        cmbInchargeModel = new EITLComboModel();
        cmbIncharge.removeAllItems();
        cmbIncharge.setModel(cmbInchargeModel);

        HashMap List = clsPriority.getInchargeList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID);

        for (int i = 1; i <= List.size(); i++) {
            clsPriority ObjDept = (clsPriority) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjDept.getAttribute("INCHARGE_CD").getVal();
            aData.Text = (String) ObjDept.getAttribute("INCHARGE_NAME").getObj();
            cmbInchargeModel.addElement(aData);
        }

    }

    private void GenerateCombo() {
        cmbBuyerModel = new EITLComboModel();
        //cmbBuyer.removeAllItems();
        //cmbBuyer.setModel(cmbBuyerModel);

        HashMap List = new HashMap();
        List = (new clsUser()).getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);

        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));

            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
            cmbBuyerModel.addElement(aData);
        }

        ComboData aData = new ComboData();

        //STOCK COMBO
        cmbPieceWiseDetailModel = new EITLComboModel();
        cmbPieceWiseDetail.removeAllItems();
        cmbPieceWiseDetail.setModel(cmbPieceWiseDetailModel);

        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "CLOSING DATE DESC";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 2;
        aData.Text = "PARTY CODE";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 3;
        aData.Text = "PARTY NAME";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 4;
        aData.Text = "INCHARGE NAME";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 5;
        aData.Text = "GROUPWISE";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 6;
        aData.Text = "PRODUCT CODE";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 7;
        aData.Text = "PIECE NO";
        cmbPieceWiseDetailModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 8;
        aData.Text = "RECIEPT_DATE";
        cmbPieceWiseDetailModel.addElement(aData);

        //INCHARGE COMBO
        cmbInchargeModel = new EITLComboModel();
        cmbIncharge.removeAllItems();
        cmbIncharge.setModel(cmbInchargeModel);
        List = clsPriority.getInchargeList("");
        for (int i = 1; i <= List.size(); i++) {
            clsPriority ObjDept = (clsPriority) List.get(Integer.toString(i));
            //ComboData aData=new ComboData();
            aData.Code = (int) ObjDept.getAttribute("INCHARGE_CD").getVal();
            aData.Text = (String) ObjDept.getAttribute("INCHARGE_NAME").getObj();
            cmbInchargeModel.addElement(aData);
        }

    }

    private void FormatGridStockSummary() {
        DataModelStockSummary = new EITLTableModel();
        TableStockSummary.removeAll();
        TableStockSummary.setModel(DataModelStockSummary);

        //  TableStockSummary.setAutoResizeMode(TableStockSummary.AUTO_RESIZE_OFF);
        DataModelStockSummary.addColumn("Sr.");
        DataModelStockSummary.addColumn("CLOSING DATE");
        DataModelStockSummary.addColumn("PRODUCT CODE");
        DataModelStockSummary.addColumn("GROUP");
        DataModelStockSummary.addColumn("COUNTSTOCK");
        DataModelStockSummary.addColumn("SQMTR STOCK");
        DataModelStockSummary.addColumn("KGS STOCK");
        DataModelStockSummary.addColumn("VALUE STOCK(IN LACS)");

        DataModelStockSummary.addColumn("COUNT BSR");
        DataModelStockSummary.addColumn("SQMTR BSR");
        DataModelStockSummary.addColumn("KGS BSR");
        DataModelStockSummary.addColumn("VALUE BSR(IN LACS)");

        DataModelStockSummary.addColumn("COUNT TOTAL ");
        DataModelStockSummary.addColumn("SQMTR TOTAL");
        DataModelStockSummary.addColumn("KGS TOTAL");
        DataModelStockSummary.addColumn("VALUE TOTAL (IN LACS)");

        DataModelStockSummary.TableReadOnly(true);
        TableStockSummary.getColumnModel().getColumn(0).setMaxWidth(30);

    }

    private void FormatGridPieceWiseDetail() {
        DataModelPieceWiseDetail = new EITLTableModel();
        TablePieceWiseDetail.removeAll();
        TablePieceWiseDetail.setModel(DataModelPieceWiseDetail);

        TablePieceWiseDetail.setAutoResizeMode(TablePieceWiseDetail.AUTO_RESIZE_OFF);
        DataModelPieceWiseDetail.addColumn("SR.");
        DataModelPieceWiseDetail.addColumn("CLOSING DATE");
        DataModelPieceWiseDetail.addColumn("PRODUCT CODE");
        DataModelPieceWiseDetail.addColumn("GROUP");
        DataModelPieceWiseDetail.addColumn("PIECE NO");
        DataModelPieceWiseDetail.addColumn("RECIEPT DATE");
        DataModelPieceWiseDetail.addColumn("LENGTH");
        DataModelPieceWiseDetail.addColumn("WIDTH");
        DataModelPieceWiseDetail.addColumn("GSM");
        DataModelPieceWiseDetail.addColumn("SQMTR");
        DataModelPieceWiseDetail.addColumn("WEIGHT");
        DataModelPieceWiseDetail.addColumn("STAGE");
        DataModelPieceWiseDetail.addColumn("PARTY CODE");
        DataModelPieceWiseDetail.addColumn("PARTY NAME");
        DataModelPieceWiseDetail.addColumn("UPN");
        DataModelPieceWiseDetail.addColumn("INCHARGE NAME");
        DataModelPieceWiseDetail.addColumn("FELT_VALUE");
        DataModelPieceWiseDetail.addColumn("OC MONTH");
        DataModelPieceWiseDetail.addColumn("CURRENT SALES MONTH");
        DataModelPieceWiseDetail.addColumn("OBSOLETE STATUS");
//        DataModelPieceWiseDetail.addColumn("OBSOLETE DATE");
//        DataModelPieceWiseDetail.addColumn("OBSOLETE REMARK");

        DataModelPieceWiseDetail.TableReadOnly(true);
        TablePieceWiseDetail.getColumnModel().getColumn(0).setMaxWidth(50);
    }

    private void GenerateStockSummary() {
        String strOrderDateFrom = "";
        String strOrderDateTo = "";
        String strMonthLastDate = "";
        try {
            FormatGridStockSummary(); //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strPieceNo = txtpieceno.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            strMonthLastDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;

            strSQL = "";
            //strSQL+="SELECT MONTH_CLOSING_DATE ,PRODUCT_CD,ITEM_DESC,GRUP,FRCNT ,ROUND(FRMTR,2) AS FRMTR,ROUND(FRKG,2) AS FRKG,ZCNT,ROUND(ZMTR,2) AS ZMTR,ROUND(ZKG,2) AS ZKG,FRZCNT,ROUND(FRZMTR,2) AS FRZMTR,ROUND(FRZKG,2) AS FRZKG FROM ((SELECT MONTH_CLOSING_DATE ,PRODUCT_CD,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R') THEN 1 END,0)) AS FRCNT  ,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R') THEN RCVD_MTR END,0)) AS FRMTR,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R') THEN RECD_KG END,0)) AS FRKG,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('Z') THEN RCVD_MTR END,0)) AS ZMTR,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('Z') THEN 1 END,0)) AS ZCNT,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('Z') THEN RECD_KG END,0)) AS ZKG,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R','Z') THEN 1 END,0)) AS FRZCNT,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R','Z') THEN RCVD_MTR END,0)) AS FRZMTR, SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R','Z') THEN RECD_KG END,0)) AS FRZKG FROM  PRODUCTION.FELT_PIECE_REGISTER_MONTHCLOSING WHERE WH_CODE = 2";
            strSQL += "SELECT MTH_CLOSING_DATE,PRODUCT_CODE,PRODUCT_GROUP,SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN 1 ELSE 0 END) AS STK_CNT,SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN SQMTR ELSE 0 END) AS STK_SQMTR,SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN WIEGHT ELSE 0 END) AS STK_WIEGHT,ROUND(SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN FELT_VALUE/100000 ELSE 0 END),2) AS STK_VALUE,SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN 1 ELSE 0 END) AS BSR_CNT,SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN SQMTR ELSE 0 END) AS BSR_SQMTR,SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN WIEGHT ELSE 0 END) AS BSR_WIEGHT,ROUND(SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN FELT_VALUE/100000 ELSE 0 END),2) AS BSR_VALUE,COUNT(PIECE_NO) AS CNT,SUM(SQMTR) AS SQMTR,SUM(WIEGHT) AS WIEGHT,ROUND(SUM(FELT_VALUE/100000),2) AS FELT_VALUE FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE >='2018-03-31' ";
            if (!txtMonthLastdate.getText().equals("")) {
                strSQL += " AND MTH_CLOSING_DATE = '" + strMonthLastDate + "' ";
            }

            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND PARTY_CODE =  " + SelUserID + " ";
            }

            int inchargeby = EITLERPGLOBAL.getComboCode(cmbIncharge);
            if (inchargeby == 0) {
                strSQL += "";
            }

            if (inchargeby == 1) {
                strSQL += " AND INCHARGE=1";
            }
            if (inchargeby == 2) {
                strSQL += " AND INCHARGE=2";
            }
            if (inchargeby == 3) {
                strSQL += " AND INCHARGE=3";
            }
            if (inchargeby == 4) {
                strSQL += " AND INCHARGE=4";
            }
            if (inchargeby == 5) {
                strSQL += " AND INCHARGE=5";
            }
            if (inchargeby == 6) {
                strSQL += " AND INCHARGE=6";
            }
            if (inchargeby == 7) {
                strSQL += " AND INCHARGE=7";
            }
            if (inchargeby == 8) {
                strSQL += " AND INCHARGE=8";
            }
            if (!txtproductcode.getText().equals("")) {
                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

            strSQL += " GROUP BY  MTH_CLOSING_DATE,PRODUCT_CODE,PRODUCT_GROUP UNION ALL SELECT * FROM (SELECT MTH_CLOSING_DATE,999999 AS PRODUCT_CODE,'TOTAL',SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN 1 ELSE 0 END) AS STK_CNT,SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN SQMTR ELSE 0 END) AS STK_SQMTR,SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN WIEGHT ELSE 0 END) AS STK_WIEGHT,ROUND(SUM(CASE WHEN PIECE_STAGE = 'IN STOCK' THEN FELT_VALUE/100000 ELSE 0 END),2) AS STK_VALUE,SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN 1 ELSE 0 END) AS BSR_CNT,SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN SQMTR ELSE 0 END) AS BSR_SQMTR,SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN WIEGHT ELSE 0 END) AS BSR_WIEGHT,ROUND(SUM(CASE WHEN PIECE_STAGE = 'BSR' THEN FELT_VALUE/100000 ELSE 0 END),2) AS BSR_VALUE,COUNT(PIECE_NO) AS CNT,SUM(SQMTR) AS SQMTR,SUM(WIEGHT) AS WIEGHT,ROUND(SUM(FELT_VALUE/100000),2) AS FELT_VALUE FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK GROUP BY  MTH_CLOSING_DATE  ) AS TTT WHERE MTH_CLOSING_DATE >='2018-03-31' ";
            // strSQL+=" GROUP BY MONTH_CLOSING_DATE ,PRODUCT_CD) UNION ALL ( SELECT MONTH_CLOSING_DATE ,'TOTAL' ,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R') THEN 1 END,0)) AS FRCNT  ,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R') THEN RCVD_MTR END,0)) AS FRMTR,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R') THEN RECD_KG END,0)) AS FRKG,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('Z') THEN RCVD_MTR END,0)) AS ZMTR,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('Z') THEN 1 END,0)) AS ZCNT,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('Z') THEN RECD_KG END,0)) AS ZKG,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R','Z') THEN 1 END,0)) AS FRZCNT,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R','Z') THEN RCVD_MTR END,0)) AS FRZMTR,SUM(COALESCE(CASE WHEN  ST_FLAG_1 IN ('F','R','Z') THEN RECD_KG END,0)) AS FRZKG FROM  PRODUCTION.FELT_PIECE_REGISTER_MONTHCLOSING WHERE WH_CODE = 2";

            if (!txtMonthLastdate.getText().equals("")) {
                strSQL += " AND MTH_CLOSING_DATE = '" + strMonthLastDate + "' ";
            }

            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND PARTY_CODE =  " + SelUserID + " ";
            }

            inchargeby = EITLERPGLOBAL.getComboCode(cmbIncharge);
            if (inchargeby == 0) {
                strSQL += "";
            }

            if (inchargeby == 1) {
                strSQL += " AND INCHARGE=1";
            }
            if (inchargeby == 2) {
                strSQL += " AND INCHARGE=2";
            }
            if (inchargeby == 3) {
                strSQL += " AND INCHARGE=3";
            }
            if (inchargeby == 4) {
                strSQL += " AND INCHARGE=4";
            }
            if (inchargeby == 5) {
                strSQL += " AND INCHARGE=5";
            }
            if (inchargeby == 6) {
                strSQL += " AND INCHARGE=6";
            }
            if (inchargeby == 7) {
                strSQL += " AND INCHARGE=7";
            }
            if (inchargeby == 8) {
                strSQL += " AND INCHARGE=8";
            }
            if (!txtproductcode.getText().equals("")) {
                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

            strSQL += " GROUP BY  MTH_CLOSING_DATE ORDER BY MTH_CLOSING_DATE,PRODUCT_CODE,PRODUCT_GROUP";
            //strSQL+=" GROUP BY MONTH_CLOSING_DATE  ) ) AS MM  LEFT JOIN  ( SELECT * FROM PRODUCTION.FELT_RATE_MASTER) AS RM ON ITEM_CODE = PRODUCT_CD ORDER BY MONTH_CLOSING_DATE ,PRODUCT_CD,ITEM_DESC,GRUP";

            System.out.println("strSQL 2 :" + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                double kgsum = 0.00;
                double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {

                    cnt++;
                    txtrecordtotal.setText(Integer.toString(cnt));

                    //     kgsum += Double.parseDouble(rsTmp.getString("CALD_WEIGHT"));
                    //   invsum += Double.parseDouble(rsTmp.getString("INVOICE_AMT"));
                    DecimalFormat df = new DecimalFormat("##.##");
                //   txtkgtotal.setText(df.format(kgsum));
                    //  txtinvtotal.setText(df.format(invsum));

                    //Object[] rowData=new Object[40];
                    Object[] rowData = new Object[16];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = EITLERPGLOBAL.formatDate(rsTmp.getString("MTH_CLOSING_DATE"));
                    rowData[2] = rsTmp.getString("PRODUCT_CODE");
                    rowData[3] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[4] = rsTmp.getString("STK_CNT");
                    rowData[5] = rsTmp.getString("STK_SQMTR");
                    rowData[6] = rsTmp.getString("STK_WIEGHT");
                    rowData[7] = rsTmp.getString("STK_VALUE");
                    rowData[8] = rsTmp.getString("BSR_CNT");
                    rowData[9] = rsTmp.getString("BSR_SQMTR");
                    rowData[10] = rsTmp.getString("BSR_WIEGHT");
                    rowData[11] = rsTmp.getString("BSR_VALUE");
                    rowData[12] = rsTmp.getString("CNT");
                    rowData[13] = rsTmp.getString("SQMTR");
                    rowData[14] = rsTmp.getString("WIEGHT");
                    rowData[15] = rsTmp.getString("FELT_VALUE");

                    DataModelStockSummary.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void GeneratePieceWiseDetailProcess() {
        String strReceivedDateFrom = "";
        String strReceivedDateTo = "";
        String strMonthLastDate = "";
        try {
            FormatGridPieceWiseDetail();  //clear existing content of table
            SelUserID = txtpartycode.getText().toString();
            strPieceNo = txtpieceno.getText().toString();
            strProductCode = txtproductcode.getText().toString();
            strMonthLastDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());

            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;

            strSQL = "";

            //strSQL+="SELECT WH_CODE,MONTH_CLOSING_DATE,PRODUCT_CD,ITEM_DESC,GRUP,PIECE_NO,RCVD_DATE,RCVD_MTR,RECD_KG, ST_FLAG_1,INCHARGE_ID,INCHARGE_NAME,DESP_PARTY,PARTY_NAME FROM (SELECT WH_CODE,MONTH_CLOSING_DATE,PRODUCT_CD,ITEM_DESC,GRUP,PIECE_NO,RCVD_DATE,ROUND(RCVD_MTR,2) AS RCVD_MTR,ROUND(RECD_KG,2) AS RECD_KG, ST_FLAG_1,INCHARGE_ID,DESP_PARTY,PARTY_NAME FROM (SELECT WH_CODE,MONTH_CLOSING_DATE,PRODUCT_CD,PIECE_NO,RCVD_DATE,RCVD_MTR,RECD_KG, ST_FLAG_1,INCHARGE_ID,DESP_PARTY,PARTY_NAME FROM (SELECT WH_CODE,MONTH_CLOSING_DATE,PRODUCT_CD,PIECE_NO,RCVD_DATE,RCVD_MTR,RECD_KG, CASE WHEN ST_FLAG_1 = 'F' THEN 'STOCK' WHEN ST_FLAG_1 = 'Z' THEN 'PACKED'  WHEN ST_FLAG_1 = 'R' THEN 'R-STOCK' WHEN ST_FLAG_1 NOT IN ('F','Z','R') THEN ST_FLAG_1  END AS ST_FLAG_1,INCHARGE_ID,DESP_PARTY FROM  PRODUCTION.FELT_PIECE_REGISTER_MONTHCLOSING WHERE WH_CODE = 2  AND ST_FLAG_1 NOT IN ('P')) AS ST LEFT JOIN (SELECT PARTY_CODE,CONCAT(PARTY_NAME,',',CITY_ID) AS PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE = 210010) AS PM ON PM.PARTY_CODE = ST.DESP_PARTY) AS SM LEFT JOIN (SELECT ITEM_CODE,ITEM_DESC,GRUP FROM PRODUCTION.FELT_RATE_MASTER) AS RM ON RM.ITEM_CODE = SM.PRODUCT_CD)  AS HM LEFT JOIN (SELECT * FROM PRODUCTION.FELT_INCHARGE ) AS IM ON IM.INCHARGE_CD  = HM.INCHARGE_ID WHERE WH_CODE = 2 ";
            strSQL += "SELECT * FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK WHERE MTH_CLOSING_DATE >='2018-03-31' ";
            if (!txtMonthLastdate.getText().equals("")) {
                strSQL += " AND MTH_CLOSING_DATE = '" + strMonthLastDate + "' ";
            }

            if (!txtpartycode.getText().equals("")) {
                strSQL += " AND PARTY_CODE =  " + SelUserID + " ";
            }

            if (!txtpieceno.getText().equals("")) {
                strSQL += " AND PIECE_NO IN (" + strPieceNo + ")  ";
            }

            int inchargeby = EITLERPGLOBAL.getComboCode(cmbIncharge);
            if (inchargeby == 0) {
                strSQL += "";
            }

            if (inchargeby == 1) {
                strSQL += " AND INCHARGE=1";
            }
            if (inchargeby == 2) {
                strSQL += " AND INCHARGE=2";
            }
            if (inchargeby == 3) {
                strSQL += " AND INCHARGE=3";
            }
            if (inchargeby == 4) {
                strSQL += " AND INCHARGE=4";
            }
            if (inchargeby == 5) {
                strSQL += " AND INCHARGE=5";
            }
            if (inchargeby == 6) {
                strSQL += " AND INCHARGE=6";
            }
            if (inchargeby == 7) {
                strSQL += " AND INCHARGE=7";
            }
            if (inchargeby == 8) {
                strSQL += " AND INCHARGE=8";
            }
            if (!txtproductcode.getText().equals("")) {
                strSQL += " AND PRODUCT_CODE IN (" + strProductCode + ") ";
            }

            int Orderby = EITLERPGLOBAL.getComboCode(cmbPieceWiseDetail);

            if (Orderby == 1) {
                strSQL += " ORDER BY MTH_CLOSING_DATE DESC";
            }

            if (Orderby == 2) {
                strSQL += " ORDER BY PARTY_CODE ";
            }
            if (Orderby == 3) {
                strSQL += " ORDER BY PARTY_NAME";
            }

            if (Orderby == 4) {
                strSQL += " ORDER BY INCHARGE_NAME  ";
            }

            if (Orderby == 5) {
                strSQL += " ORDER BY PRODUCT_GROUP ";
            }
            if (Orderby == 6) {
                strSQL += " ORDER BY PRODUCT_CODE ";
            }
            if (Orderby == 7) {
                strSQL += " ORDER BY PIECE_NO ";
            }
            if (Orderby == 8) {
                strSQL += " ORDER BY FNSG_DATE,PIECE_NO ";
            }
            
//            System.out.println("6 :- " + strSQL);
            rsTmp = data.getResult(strSQL);
            if (rsTmp.getRow() > 0) {
                int cnt = 0;
                double sum = 0.00;
                //float sum = 0;
                double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {
                    cnt++;
                    txtrecord.setText(Integer.toString(cnt));

                    sum += Double.parseDouble(rsTmp.getString("SQMTR"));
                    invsum += Double.parseDouble(rsTmp.getString("WIEGHT"));

                    DecimalFormat df = new DecimalFormat("###.##");
                    txtstockkgtotal.setText(df.format(sum));
                    txtstockamttotal.setText(df.format(invsum));

                    Object[] rowData = new Object[25];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = EITLERPGLOBAL.formatDate(rsTmp.getString("MTH_CLOSING_DATE"));
                    rowData[2] = rsTmp.getString("PRODUCT_CODE");
                    rowData[3] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[4] = rsTmp.getString("PIECE_NO");
                    rowData[5] = EITLERPGLOBAL.formatDate(rsTmp.getString("FNSG_DATE"));
                    rowData[6] = rsTmp.getString("LENGTH");
                    rowData[7] = rsTmp.getString("WIDTH");
                    rowData[8] = rsTmp.getString("GSM");
                    rowData[9] = rsTmp.getString("SQMTR");
                    rowData[10] = rsTmp.getString("WIEGHT");
                    rowData[11] = rsTmp.getString("PIECE_STAGE");
                    rowData[12] = rsTmp.getString("PARTY_CODE");
                    rowData[13] = rsTmp.getString("PARTY_NAME");
                    rowData[14] = rsTmp.getString("UPN");
                    rowData[15] = rsTmp.getString("INCHARGE_NAME");
                    rowData[16] = rsTmp.getString("FELT_VALUE");
                    rowData[17] = rsTmp.getString("OC_MONTH");
                    rowData[18] = rsTmp.getString("CURR_SALES_MONTH");
                    rowData[19] = rsTmp.getString("OBSOLETE_STATUS");
//                    rowData[20] = EITLERPGLOBAL.formatDate(rsTmp.getString("OBSOLETE_DATE"));
//                    rowData[21] = rsTmp.getString("OBSOLETE_REMARK");

                    DataModelPieceWiseDetail.addRow(rowData);
                    rsTmp.next();
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void FormatGridMISWHStockSummary() {
        DataModelMISWHStockSummary = new EITLTableModel();
        TableMISWHStockSummary.removeAll();
        TableMISWHStockSummary.setModel(DataModelMISWHStockSummary);

        //  TableStockSummary.setAutoResizeMode(TableStockSummary.AUTO_RESIZE_OFF);
        DataModelMISWHStockSummary.addColumn("Sr.");
        DataModelMISWHStockSummary.addColumn("PRODUCT CODE");
        DataModelMISWHStockSummary.addColumn("GROUP");

        DataModelMISWHStockSummary.addColumn("OPENING DATE");

        DataModelMISWHStockSummary.addColumn("OP COUNT");
        DataModelMISWHStockSummary.addColumn("OP KGS");
        DataModelMISWHStockSummary.addColumn("OP SQMTR");
        DataModelMISWHStockSummary.addColumn("OP VALUE");

        DataModelMISWHStockSummary.addColumn("OP COUNT OBS");
        DataModelMISWHStockSummary.addColumn("OP KGS OBS");
        DataModelMISWHStockSummary.addColumn("OP SQMTR OBS");
        DataModelMISWHStockSummary.addColumn("OP VALUE OBS");

        DataModelMISWHStockSummary.addColumn("OP COUNT WOBS");
        DataModelMISWHStockSummary.addColumn("OP KGS WOBS");
        DataModelMISWHStockSummary.addColumn("OP SQMTR WOBS");
        DataModelMISWHStockSummary.addColumn("OP VALUE WOBS");

        DataModelMISWHStockSummary.addColumn("WH-R COUNT");
        DataModelMISWHStockSummary.addColumn("WH-R KGS");
        DataModelMISWHStockSummary.addColumn("WH-R SQMTR");
        DataModelMISWHStockSummary.addColumn("WH-R VALUE");

        DataModelMISWHStockSummary.addColumn("DWH-R COUNT");
        DataModelMISWHStockSummary.addColumn("DWH-R KGS");
        DataModelMISWHStockSummary.addColumn("DWH-R SQMTR");
        DataModelMISWHStockSummary.addColumn("DWH-R VALUE");

        DataModelMISWHStockSummary.addColumn("D-INV COUNT");
        DataModelMISWHStockSummary.addColumn("D-INV KGS");
        DataModelMISWHStockSummary.addColumn("D-INV SQMTR");
        DataModelMISWHStockSummary.addColumn("D-INV VALUE");

        DataModelMISWHStockSummary.addColumn("RP COUNT");
        DataModelMISWHStockSummary.addColumn("RP KGS");
        DataModelMISWHStockSummary.addColumn("RP SQMTR");
        DataModelMISWHStockSummary.addColumn("RP VALUE");

        DataModelMISWHStockSummary.addColumn("E-INV COUNT");
        DataModelMISWHStockSummary.addColumn("E-INV KGS");
        DataModelMISWHStockSummary.addColumn("E-INV SQMTR");
        DataModelMISWHStockSummary.addColumn("E-INV VALUE");

        DataModelMISWHStockSummary.addColumn("CL COUNT");
        DataModelMISWHStockSummary.addColumn("CL KGS");
        DataModelMISWHStockSummary.addColumn("CL SQMTR");
        DataModelMISWHStockSummary.addColumn("CL VALUE");

        DataModelMISWHStockSummary.addColumn("CL COUNT OBS");
        DataModelMISWHStockSummary.addColumn("CL KGS OBS");
        DataModelMISWHStockSummary.addColumn("CL SQMTR OBS");
        DataModelMISWHStockSummary.addColumn("CL VALUE OBS");

        DataModelMISWHStockSummary.addColumn("CL COUNT WOBS");
        DataModelMISWHStockSummary.addColumn("CL KGS WOBS");
        DataModelMISWHStockSummary.addColumn("CL SQMTR WOBS");
        DataModelMISWHStockSummary.addColumn("CL VALUE WOBS");

        DataModelMISWHStockSummary.addColumn("CLOSING DATE");

        DataModelMISWHStockSummary.TableReadOnly(true);
        TableMISWHStockSummary.getColumnModel().getColumn(0).setMaxWidth(30);
        for (int i = 1; i < 49; i++) {
            TableMISWHStockSummary.getColumnModel().getColumn(i).setMinWidth(100);
        }

    }

    private void GenerateMISWHStockSummary() {
        String strPreviousMonthLastDate = "";
        String strMonthFirstDate = "";
        String strMonthLastDate = "";
        String strDate = "";
        String prdCode = "";
        try {
            FormatGridMISWHStockSummary(); //clear existing content of table
            strProductCode = txtproductcode.getText().toString();
            strDate = EITLERPGLOBAL.formatDateDB(txtMonthLastdate.getText());
            strMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strDate + "') FROM DUAL");
            strMonthFirstDate = data.getStringValueFromDB("SELECT SUBDATE(ADDDATE('" + strMonthLastDate + "', INTERVAL 1 DAY), INTERVAL 1 MONTH) FROM DUAL");
            strPreviousMonthLastDate = data.getStringValueFromDB("SELECT LAST_DAY('" + strMonthLastDate + "' - INTERVAL 1 MONTH) FROM DUAL");
            ResultSet rsTmp, rsBuyer, rsIndent, rsRIA;

            if (!strDate.equals(strMonthLastDate)) {
                JOptionPane.showMessageDialog(null, "Please enter last date of month.");
                return;
            }

            if (!txtproductcode.getText().equals("")) {
                prdCode = " WHERE PRODUCT_CODE IN (" + strProductCode + ") ";
            }

            strSQL = "";

            strSQL = "SELECT PG.PRODUCT_CODE,PG.PRODUCT_GROUP, "
                    + "OP_CNT,OP_KG,OP_SQMTR,OP_VALUE,  "
                    + "OP_CNT_OBS,OP_KG_OBS,OP_SQMTR_OBS,OP_VALUE_OBS,  "
                    + "OP_CNT_WOBS,OP_KG_WOBS,OP_SQMTR_WOBS,OP_VALUE_WOBS,  "
                    + "WR_CNT,WR_KG,WR_SQMTR,WR_VALUE , "
                    + "DWR_CNT,DWR_KG,DWR_SQMTR,DWR_VALUE , "
                    + "PI_CNT,PI_KG,PI_SQMTR,PI_VALUE , "
                    + "PD_CNT,PD_KG,PD_SQMTR,PD_VALUE , "
                    + "PE_CNT,PE_KG,PE_SQMTR,PE_VALUE , "
                    + "(COALESCE(OP_CNT,0) + COALESCE(WR_CNT,0) + COALESCE(DWR_CNT,0) - COALESCE(PI_CNT,0) - COALESCE(PD_CNT,0) - COALESCE(PE_CNT,0) ) AS CNT, "
                    + "(COALESCE(OP_KG,0) + COALESCE(WR_KG,0) + COALESCE(DWR_KG,0) - COALESCE(PI_KG,0) - COALESCE(PD_KG,0) - COALESCE(PE_KG,0) ) AS KG, "
                    + "(COALESCE(OP_SQMTR,0) + COALESCE(WR_SQMTR,0) + COALESCE(DWR_SQMTR,0) - COALESCE(PI_SQMTR,0) - COALESCE(PD_SQMTR,0) - COALESCE(PE_SQMTR,0) ) AS SQMTR, "
                    + "(COALESCE(OP_VALUE,0) + COALESCE(WR_VALUE,0) + COALESCE(DWR_VALUE,0) - COALESCE(PI_VALUE,0) - COALESCE(PD_VALUE,0) - COALESCE(PE_VALUE,0) ) AS FLTVALUE, "
                    + "CL_CNT,CL_KG,CL_SQMTR,CL_VALUE,  "
                    + "CL_CNT_OBS,CL_KG_OBS,CL_SQMTR_OBS,CL_VALUE_OBS,  "
                    + "CL_CNT_WOBS,CL_KG_WOBS,CL_SQMTR_WOBS,CL_VALUE_WOBS "
                    + "FROM  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_GROUP FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK " + prdCode + ")  AS PG "
                    + "LEFT JOIN  "
                    + "( "
                    + "SELECT PRODUCT_CODE,PRODUCT_GROUP, "
                    + "COUNT(PIECE_NO) AS OP_CNT, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN PIECE_NO END) AS OP_CNT_OBS, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN PIECE_NO END) AS OP_CNT_WOBS, "
                    + " "
                    + "SUM(COALESCE(SQMTR,0)) AS OP_SQMTR, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS OP_SQMTR_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS OP_SQMTR_WOBS, "
                    + " "
                    + "SUM(COALESCE(WIEGHT,0)) AS OP_KG, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS OP_KG_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS OP_KG_WOBS, "
                    + "SUM(FELT_VALUE) AS OP_VALUE , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN FELT_VALUE END,0)) AS OP_VALUE_OBS , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN FELT_VALUE END,0)) AS OP_VALUE_WOBS  "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK ,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE MTH_CLOSING_DATE = '" + strPreviousMonthLastDate + "' AND PR_PIECE_NO = PIECE_NO  "
                    + "GROUP BY PRODUCT_CODE,PRODUCT_GROUP "
                    + " "
                    + ") AS OPW "
                    + "ON PG.PRODUCT_CODE = OPW.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS WR_CNT,SUM(PR_BILL_SQMTR) AS WR_SQMTR ,SUM(PR_BILL_WEIGHT) AS WR_KG,SUM(PR_FELT_VALUE_WITH_GST) AS WR_VALUE   "
                    + "FROM ( "
                    + " "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    //                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND COALESCE(PR_DIV_NO_CHANGE_FLAG,'0') ='0' ) AS M "
                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND COALESCE(PR_DIV_NO_CHANGE_FLAG,'0') ='0' AND PR_PIECE_NO NOT LIKE ('%V%') ) AS M "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS WR "
                    + "ON PG.PRODUCT_CODE = WR.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS DWR_CNT,SUM(PR_BILL_SQMTR) AS DWR_SQMTR ,SUM(PR_BILL_WEIGHT) AS DWR_KG,SUM(PR_FELT_VALUE_WITH_GST) AS DWR_VALUE   "
                    + "FROM ( "
                    + " "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND PR_DIV_NO_CHANGE_FLAG ='1' "
                    + "UNION ALL "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND COALESCE(PR_DIV_NO_CHANGE_FLAG,'0') ='0' AND PR_PIECE_NO LIKE ('%V%') "
                    + "UNION ALL "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_DIV_NO_CHANGE_DATE >= '" + strMonthFirstDate + "' AND PR_DIV_NO_CHANGE_DATE <= '" + strMonthLastDate + "' AND PR_DIV_NO_CHANGE_FLAG ='1' AND PR_FNSG_DATE < '" + strMonthFirstDate + "') AS M "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS DWR "
                    + "ON PG.PRODUCT_CODE = DWR.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS PI_CNT,SUM(PR_BILL_SQMTR) AS PI_SQMTR ,SUM(PR_BILL_WEIGHT) AS PI_KG,SUM(PR_INVOICE_AMOUNT) AS PI_VALUE   "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_INVOICE_DATE >= '" + strMonthFirstDate + "' AND PR_INVOICE_DATE <= '" + strMonthLastDate + "' "
                    //                    + "AND PR_PIECE_STAGE = 'INVOICED' "
                    + "AND PR_PIECE_STAGE IN ('INVOICED','RETURN') "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS PI "
                    + "ON PG.PRODUCT_CODE = PI.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS PD_CNT,SUM(PR_BILL_SQMTR) AS PD_SQMTR ,SUM(PR_BILL_WEIGHT) AS PD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS PD_VALUE   "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_DIVERTED_DATE >= '" + strMonthFirstDate + "' AND PR_DIVERTED_DATE <= '" + strMonthLastDate + "' "
                    + "AND PR_PIECE_STAGE IN ('DIVERTED','DIVIDED') "
                    + "AND PR_DIV_BEFORE_STAGE = 'V' "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS PD "
                    + "ON PG.PRODUCT_CODE = PD.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN "
                    + "( "
                    + "SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS PE_CNT,SUM(PR_BILL_SQMTR) AS PE_SQMTR ,SUM(PR_BILL_WEIGHT) AS PE_KG,SUM(PR_INVOICE_AMOUNT) AS PE_VALUE   "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_INVOICE_DATE >= '" + strMonthFirstDate + "' AND PR_INVOICE_DATE<= '" + strMonthLastDate + "' "
                    + "AND PR_PIECE_STAGE = 'EXP-INVOICE' "
                    + "GROUP BY PR_BILL_PRODUCT_CODE "
                    + ") AS PE "
                    + "ON PG.PRODUCT_CODE = PE.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "( "
                    + "SELECT PRODUCT_CODE,PRODUCT_GROUP, "
                    + "COUNT(PIECE_NO) AS CL_CNT, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN PIECE_NO END) AS CL_CNT_OBS, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN PIECE_NO END) AS CL_CNT_WOBS, "
                    + " "
                    + "SUM(COALESCE(SQMTR,0)) AS CL_SQMTR, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS CL_SQMTR_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS CL_SQMTR_WOBS, "
                    + " "
                    + "SUM(COALESCE(WIEGHT,0)) AS CL_KG, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS CL_KG_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS CL_KG_WOBS, "
                    + "SUM(FELT_VALUE) AS CL_VALUE , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN FELT_VALUE END,0)) AS CL_VALUE_OBS , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN FELT_VALUE END,0)) AS CL_VALUE_WOBS  "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK ,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE MTH_CLOSING_DATE = '" + strMonthLastDate + "' AND PR_PIECE_NO = PIECE_NO  "
                    + "GROUP BY PRODUCT_CODE,PRODUCT_GROUP "
                    + " "
                    + ") AS CLW "
                    + "ON PG.PRODUCT_CODE = CLW.PRODUCT_CODE "
                    //+ "ORDER BY PG.PRODUCT_CODE "
                    + " "
                    //////////////////////////////////////////////////////////////////////////
                    + "UNION ALL "
                    + "SELECT 'TOTAL','', "
                    + "SUM(OP_CNT),SUM(OP_KG),SUM(OP_SQMTR),SUM(OP_VALUE),  "
                    + "SUM(OP_CNT_OBS),SUM(OP_KG_OBS),SUM(OP_SQMTR_OBS),SUM(OP_VALUE_OBS),  "
                    + "SUM(OP_CNT_WOBS),SUM(OP_KG_WOBS),SUM(OP_SQMTR_WOBS),SUM(OP_VALUE_WOBS),  "
                    + "SUM(WR_CNT),SUM(WR_KG),SUM(WR_SQMTR),SUM(WR_VALUE) , "
                    + "SUM(DWR_CNT),SUM(DWR_KG),SUM(DWR_SQMTR),SUM(DWR_VALUE) , "
                    + "SUM(PI_CNT),SUM(PI_KG),SUM(PI_SQMTR),SUM(PI_VALUE) , "
                    + "SUM(PD_CNT),SUM(PD_KG),SUM(PD_SQMTR),SUM(PD_VALUE) , "
                    + "SUM(PE_CNT),SUM(PE_KG),SUM(PE_SQMTR),SUM(PE_VALUE) , "
                    + "SUM(CNT),SUM(KG),SUM(SQMTR),SUM(FLTVALUE), "
                    + "SUM(CL_CNT),SUM(CL_KG),SUM(CL_SQMTR),SUM(CL_VALUE),  "
                    + "SUM(CL_CNT_OBS),SUM(CL_KG_OBS),SUM(CL_SQMTR_OBS),SUM(CL_VALUE_OBS),  "
                    + "SUM(CL_CNT_WOBS),SUM(CL_KG_WOBS),SUM(CL_SQMTR_WOBS),SUM(CL_VALUE_WOBS) "
                    + "FROM  "
                    + "( "
                    + "SELECT PG.PRODUCT_CODE,PG.PRODUCT_GROUP, "
                    + "OP_CNT,OP_KG,OP_SQMTR,OP_VALUE,  "
                    + "OP_CNT_OBS,OP_KG_OBS,OP_SQMTR_OBS,OP_VALUE_OBS,  "
                    + "OP_CNT_WOBS,OP_KG_WOBS,OP_SQMTR_WOBS,OP_VALUE_WOBS,  "
                    + "WR_CNT,WR_KG,WR_SQMTR,WR_VALUE , "
                    + "DWR_CNT,DWR_KG,DWR_SQMTR,DWR_VALUE , "
                    + "PI_CNT,PI_KG,PI_SQMTR,PI_VALUE , "
                    + "PD_CNT,PD_KG,PD_SQMTR,PD_VALUE , "
                    + "PE_CNT,PE_KG,PE_SQMTR,PE_VALUE , "
                    + "(COALESCE(OP_CNT,0) + COALESCE(WR_CNT,0) + COALESCE(DWR_CNT,0) - COALESCE(PI_CNT,0) - COALESCE(PD_CNT,0) - COALESCE(PE_CNT,0) ) AS CNT, "
                    + "(COALESCE(OP_KG,0) + COALESCE(WR_KG,0) + COALESCE(DWR_KG,0) - COALESCE(PI_KG,0) - COALESCE(PD_KG,0) - COALESCE(PE_KG,0) ) AS KG, "
                    + "(COALESCE(OP_SQMTR,0) + COALESCE(WR_SQMTR,0) + COALESCE(DWR_SQMTR,0) - COALESCE(PI_SQMTR,0) - COALESCE(PD_SQMTR,0) - COALESCE(PE_SQMTR,0) ) AS SQMTR, "
                    + "(COALESCE(OP_VALUE,0) + COALESCE(WR_VALUE,0) + COALESCE(DWR_VALUE,0) - COALESCE(PI_VALUE,0) - COALESCE(PD_VALUE,0) - COALESCE(PE_VALUE,0) ) AS FLTVALUE, "
                    + "CL_CNT,CL_KG,CL_SQMTR,CL_VALUE,  "
                    + "CL_CNT_OBS,CL_KG_OBS,CL_SQMTR_OBS,CL_VALUE_OBS,  "
                    + "CL_CNT_WOBS,CL_KG_WOBS,CL_SQMTR_WOBS,CL_VALUE_WOBS "
                    + "FROM  "
                    + "(SELECT DISTINCT PRODUCT_CODE,PRODUCT_GROUP FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK " + prdCode + ")  AS PG "
                    + "LEFT JOIN  "
                    + "( "
                    + "SELECT PRODUCT_CODE,PRODUCT_GROUP, "
                    + "COUNT(PIECE_NO) AS OP_CNT, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN PIECE_NO END) AS OP_CNT_OBS, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN PIECE_NO END) AS OP_CNT_WOBS, "
                    + " "
                    + "SUM(COALESCE(SQMTR,0)) AS OP_SQMTR, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS OP_SQMTR_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS OP_SQMTR_WOBS, "
                    + " "
                    + "SUM(COALESCE(WIEGHT,0)) AS OP_KG, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS OP_KG_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS OP_KG_WOBS, "
                    + "SUM(FELT_VALUE) AS OP_VALUE , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN FELT_VALUE END,0)) AS OP_VALUE_OBS , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN FELT_VALUE END,0)) AS OP_VALUE_WOBS  "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK ,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE MTH_CLOSING_DATE = '" + strPreviousMonthLastDate + "' AND PR_PIECE_NO = PIECE_NO  "
                    + "GROUP BY PRODUCT_CODE,PRODUCT_GROUP "
                    + " "
                    + ") AS OPW "
                    + "ON PG.PRODUCT_CODE = OPW.PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS WR_CNT,SUM(PR_BILL_SQMTR) AS WR_SQMTR ,SUM(PR_BILL_WEIGHT) AS WR_KG,SUM(PR_FELT_VALUE_WITH_GST) AS WR_VALUE   "
                    + "FROM ( "
                    + " "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    //                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND COALESCE(PR_DIV_NO_CHANGE_FLAG,'0') ='0' ) AS M "
                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND COALESCE(PR_DIV_NO_CHANGE_FLAG,'0') ='0' AND PR_PIECE_NO NOT LIKE ('%V%') ) AS M "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS WR "
                    + "ON PG.PRODUCT_CODE = WR.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS DWR_CNT,SUM(PR_BILL_SQMTR) AS DWR_SQMTR ,SUM(PR_BILL_WEIGHT) AS DWR_KG,SUM(PR_FELT_VALUE_WITH_GST) AS DWR_VALUE   "
                    + "FROM ( "
                    + " "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND PR_DIV_NO_CHANGE_FLAG ='1' "
                    + "UNION ALL "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_FNSG_DATE >= '" + strMonthFirstDate + "' AND PR_FNSG_DATE <= '" + strMonthLastDate + "' AND COALESCE(PR_DIV_NO_CHANGE_FLAG,'0') ='0' AND PR_PIECE_NO LIKE ('%V%') "
                    + "UNION ALL "
                    + "SELECT * FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_DIV_NO_CHANGE_DATE >= '" + strMonthFirstDate + "' AND PR_DIV_NO_CHANGE_DATE <= '" + strMonthLastDate + "' AND PR_DIV_NO_CHANGE_FLAG ='1' AND PR_FNSG_DATE < '" + strMonthFirstDate + "') AS M "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS DWR "
                    + "ON PG.PRODUCT_CODE = DWR.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS PI_CNT,SUM(PR_BILL_SQMTR) AS PI_SQMTR ,SUM(PR_BILL_WEIGHT) AS PI_KG,SUM(PR_INVOICE_AMOUNT) AS PI_VALUE   "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_INVOICE_DATE >= '" + strMonthFirstDate + "' AND PR_INVOICE_DATE <= '" + strMonthLastDate + "' "
                    //                    + "AND PR_PIECE_STAGE = 'INVOICED' "
                    + "AND PR_PIECE_STAGE IN ('INVOICED','RETURN') "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS PI "
                    + "ON PG.PRODUCT_CODE = PI.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN "
                    + "(SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS PD_CNT,SUM(PR_BILL_SQMTR) AS PD_SQMTR ,SUM(PR_BILL_WEIGHT) AS PD_KG,SUM(PR_FELT_VALUE_WITH_GST) AS PD_VALUE   "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_DIVERTED_DATE >= '" + strMonthFirstDate + "' AND PR_DIVERTED_DATE <= '" + strMonthLastDate + "' "
                    + "AND PR_PIECE_STAGE IN ('DIVERTED','DIVIDED') "
                    + "AND PR_DIV_BEFORE_STAGE = 'V' "
                    + "GROUP BY PR_BILL_PRODUCT_CODE) AS PD "
                    + "ON PG.PRODUCT_CODE = PD.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN "
                    + "( "
                    + "SELECT PR_BILL_PRODUCT_CODE,COUNT(PR_PIECE_NO) AS PE_CNT,SUM(PR_BILL_SQMTR) AS PE_SQMTR ,SUM(PR_BILL_WEIGHT) AS PE_KG,SUM(PR_INVOICE_AMOUNT) AS PE_VALUE   "
                    + "FROM PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE PR_INVOICE_DATE >= '" + strMonthFirstDate + "' AND PR_INVOICE_DATE<= '" + strMonthLastDate + "' "
                    + "AND PR_PIECE_STAGE = 'EXP-INVOICE' "
                    + "GROUP BY PR_BILL_PRODUCT_CODE "
                    + ") AS PE "
                    + "ON PG.PRODUCT_CODE = PE.PR_BILL_PRODUCT_CODE "
                    + "LEFT JOIN  "
                    + "( "
                    + "SELECT PRODUCT_CODE,PRODUCT_GROUP, "
                    + "COUNT(PIECE_NO) AS CL_CNT, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN PIECE_NO END) AS CL_CNT_OBS, "
                    + "COUNT(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN PIECE_NO END) AS CL_CNT_WOBS, "
                    + " "
                    + "SUM(COALESCE(SQMTR,0)) AS CL_SQMTR, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS CL_SQMTR_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN SQMTR ELSE 0 END,0)) AS CL_SQMTR_WOBS, "
                    + " "
                    + "SUM(COALESCE(WIEGHT,0)) AS CL_KG, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS CL_KG_OBS, "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN    WIEGHT ELSE 0 END,0)) AS CL_KG_WOBS, "
                    + "SUM(FELT_VALUE) AS CL_VALUE , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') = 'OBSOLETE' THEN FELT_VALUE END,0)) AS CL_VALUE_OBS , "
                    + "SUM(COALESCE(CASE WHEN COALESCE(PR_DELINK,'') != 'OBSOLETE' THEN FELT_VALUE END,0)) AS CL_VALUE_WOBS  "
                    + "FROM PRODUCTION.FELT_WH_MTH_CLOSING_PIECE_STOCK ,PRODUCTION.FELT_SALES_PIECE_REGISTER  "
                    + "WHERE MTH_CLOSING_DATE = '" + strMonthLastDate + "' AND PR_PIECE_NO = PIECE_NO  "
                    + "GROUP BY PRODUCT_CODE,PRODUCT_GROUP "
                    + " "
                    + ") AS CLW "
                    + "ON PG.PRODUCT_CODE = CLW.PRODUCT_CODE "
                    + "GROUP BY PG.PRODUCT_CODE "
                    + ") AS SUB ORDER BY PRODUCT_CODE";

            System.out.println("strSQL 2 :" + strSQL);
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                int cnt = 0;

                double kgsum = 0.00;
                double invsum = 0.00;
                while (!rsTmp.isAfterLast()) {

                    cnt++;
                    txtMISWHrecordtotal.setText(Integer.toString(cnt));

                    //     kgsum += Double.parseDouble(rsTmp.getString("CALD_WEIGHT"));
                    //   invsum += Double.parseDouble(rsTmp.getString("INVOICE_AMT"));
                    DecimalFormat df = new DecimalFormat("##.##");
                //   txtkgtotal.setText(df.format(kgsum));
                    //  txtinvtotal.setText(df.format(invsum));

                    //Object[] rowData=new Object[40];
                    Object[] rowData = new Object[100];
                    rowData[0] = Integer.toString(cnt);
                    rowData[1] = rsTmp.getString("PRODUCT_CODE");
                    rowData[2] = rsTmp.getString("PRODUCT_GROUP");
                    rowData[3] = EITLERPGLOBAL.formatDate(strMonthFirstDate);
                    rowData[4] = rsTmp.getString("OP_CNT");
                    rowData[5] = rsTmp.getString("OP_KG");
                    rowData[6] = rsTmp.getString("OP_SQMTR");
                    rowData[7] = rsTmp.getString("OP_VALUE");
                    rowData[8] = rsTmp.getString("OP_CNT_OBS");
                    rowData[9] = rsTmp.getString("OP_KG_OBS");
                    rowData[10] = rsTmp.getString("OP_SQMTR_OBS");
                    rowData[11] = rsTmp.getString("OP_VALUE_OBS");
                    rowData[12] = rsTmp.getString("OP_CNT_WOBS");
                    rowData[13] = rsTmp.getString("OP_KG_WOBS");
                    rowData[14] = rsTmp.getString("OP_SQMTR_WOBS");
                    rowData[15] = rsTmp.getString("OP_VALUE_WOBS");
                    rowData[16] = rsTmp.getString("WR_CNT");
                    rowData[17] = rsTmp.getString("WR_KG");
                    rowData[18] = rsTmp.getString("WR_SQMTR");
                    rowData[19] = rsTmp.getString("WR_VALUE");
                    rowData[20] = rsTmp.getString("DWR_CNT");
                    rowData[21] = rsTmp.getString("DWR_KG");
                    rowData[22] = rsTmp.getString("DWR_SQMTR");
                    rowData[23] = rsTmp.getString("DWR_VALUE");
                    rowData[24] = rsTmp.getString("PI_CNT");
                    rowData[25] = rsTmp.getString("PI_KG");
                    rowData[26] = rsTmp.getString("PI_SQMTR");
                    rowData[27] = rsTmp.getString("PI_VALUE");
                    rowData[28] = rsTmp.getString("PD_CNT");
                    rowData[29] = rsTmp.getString("PD_KG");
                    rowData[30] = rsTmp.getString("PD_SQMTR");
                    rowData[31] = rsTmp.getString("PD_VALUE");
                    rowData[32] = rsTmp.getString("PE_CNT");
                    rowData[33] = rsTmp.getString("PE_KG");
                    rowData[34] = rsTmp.getString("PE_SQMTR");
                    rowData[35] = rsTmp.getString("PE_VALUE");
                    rowData[36] = rsTmp.getString("CL_CNT");
                    rowData[37] = rsTmp.getString("CL_KG");
                    rowData[38] = rsTmp.getString("CL_SQMTR");
                    rowData[39] = rsTmp.getString("CL_VALUE");
                    rowData[40] = rsTmp.getString("CL_CNT_OBS");
                    rowData[41] = rsTmp.getString("CL_KG_OBS");
                    rowData[42] = rsTmp.getString("CL_SQMTR_OBS");
                    rowData[43] = rsTmp.getString("CL_VALUE_OBS");
                    rowData[44] = rsTmp.getString("CL_CNT_WOBS");
                    rowData[45] = rsTmp.getString("CL_KG_WOBS");
                    rowData[46] = rsTmp.getString("CL_SQMTR_WOBS");
                    rowData[47] = rsTmp.getString("CL_VALUE_WOBS");
                    rowData[48] = EITLERPGLOBAL.formatDate(strMonthLastDate);

                    DataModelMISWHStockSummary.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

}
