/*
 * frmFeltFinishing.java
 *
 * Created on August 22, 2013, 11:20 AM
 */

package EITLERP.Production.FeltFinishing;

/**
 *
 * @author  VIVEK KUMAR
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Production.FeltUser;
import EITLERP.Production.FeltNeedling.frmFeltNeedling;
import EITLERP.Production.FeltMending.frmFeltMending_New;
import EITLERP.Production.FeltWeaving.frmFeltWeaving;
import EITLERP.data;

public class frmFeltFinishing extends javax.swing.JApplet {
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    private boolean DoNotEvaluate=false;
    
    private clsFeltFinishing ObjFeltFinishing;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbUserNameModel;
    
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmFeltFinishing */
    public void init() {
        System.gc();
        setSize(830,590);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        DataModel=new EITLTableModel();
        ObjFeltFinishing=new clsFeltFinishing();
        
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        GenerateUserNameCombo();
        if(ObjFeltFinishing.LoadData()) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Error occured while Loading Data. Error is "+ObjFeltFinishing.LastError,"DATA LOADING ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemNeedling = new javax.swing.JMenuItem();
        jMenuItemMending = new javax.swing.JMenuItem();
        jMenuItemWeaving = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtFeltProductionDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtFormNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtProductionDocumentNo = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPreviousWeight = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDayWeight = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTotalWeight = new javax.swing.JTextField();
        txtMonthWeight = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbUserName = new javax.swing.JComboBox();
        cmdOpenDocument = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemNeedling.setText("Needling Report");
        jMenuItemNeedling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNeedlingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemNeedling);

        jMenuItemMending.setText("Mending Report");
        jMenuItemMending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMendingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemMending);

        jMenuItemWeaving.setText("Weaving Report");
        jMenuItemWeaving.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWeavingActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemWeaving);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemOrder);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" FELT PRODUCTION FINISHING DETAILS - ");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel3.setText("Production Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(20, 12, 100, 17);

        txtFeltProductionDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFeltProductionDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFeltProductionDate.setEnabled(false);
        txtFeltProductionDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFeltProductionDateFocusGained(evt);
            }
        });
        Tab1.add(txtFeltProductionDate);
        txtFeltProductionDate.setBounds(125, 10, 102, 27);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(11, 80, 760, 280);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(470, 365, 90, 29);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemove);
        cmdRemove.setBounds(575, 365, 90, 29);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(6, 70, 770, 6);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(680, 365, 90, 29);

        jLabel4.setText("Report No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(408, 12, 70, 17);

        txtFormNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFormNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFormNo.setEnabled(false);
        txtFormNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFormNoFocusGained(evt);
            }
        });
        Tab1.add(txtFormNo);
        txtFormNo.setBounds(480, 10, 102, 27);

        jLabel5.setText("Document No.");
        Tab1.add(jLabel5);
        jLabel5.setBounds(20, 42, 90, 17);

        txtProductionDocumentNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtProductionDocumentNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtProductionDocumentNo.setEnabled(false);
        Tab1.add(txtProductionDocumentNo);
        txtProductionDocumentNo.setBounds(125, 40, 102, 27);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(230, 12, 20, 18);

        jLabel6.setText("Previous Weight");
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 369, 100, 17);

        txtPreviousWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtPreviousWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPreviousWeight.setEnabled(false);
        Tab1.add(txtPreviousWeight);
        txtPreviousWeight.setBounds(113, 366, 80, 27);

        jLabel7.setText("Day Weight");
        Tab1.add(jLabel7);
        jLabel7.setBounds(216, 369, 72, 17);

        txtDayWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtDayWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDayWeight.setEnabled(false);
        Tab1.add(txtDayWeight);
        txtDayWeight.setBounds(300, 366, 100, 27);

        jLabel8.setText("Total Weight");
        Tab1.add(jLabel8);
        jLabel8.setBounds(216, 397, 78, 17);

        txtTotalWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtTotalWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWeight.setEnabled(false);
        Tab1.add(txtTotalWeight);
        txtTotalWeight.setBounds(300, 394, 100, 27);

        txtMonthWeight.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtMonthWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMonthWeight.setEnabled(false);
        Tab1.add(txtMonthWeight);
        txtMonthWeight.setBounds(113, 394, 80, 27);

        jLabel11.setText("Month Weight");
        Tab1.add(jLabel11);
        jLabel11.setBounds(10, 397, 88, 17);

        jLabel12.setText("User Name");
        Tab1.add(jLabel12);
        jLabel12.setBounds(408, 43, 67, 17);

        cmbUserName.setBackground(new java.awt.Color(255, 255, 255));
        cmbUserName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbUserName.setEnabled(false);
        Tab1.add(cmbUserName);
        cmbUserName.setBounds(480, 40, 250, 27);

        cmdOpenDocument.setText("Open Document");
        cmdOpenDocument.setToolTipText("");
        cmdOpenDocument.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdOpenDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenDocumentActionPerformed(evt);
            }
        });
        Tab1.add(cmdOpenDocument);
        cmdOpenDocument.setBounds(470, 395, 130, 33);

        Tab.addTab("Finishing Details", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 17);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 27);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 27);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 27);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 17);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 27);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 17);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 27);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 24, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 29);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 17);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 17);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 29);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });
        jPanel1.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(662, 240, 110, 33);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(662, 210, 110, 33);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 33);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 790, 450);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(2, 520, 790, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed
        
    }//GEN-LAST:event_jMenuItemOrderActionPerformed
    
    private void jMenuItemWeavingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWeavingActionPerformed
        try {
            AppletFrame aFrame=new AppletFrame("Felt Weaving Report");
            aFrame.startAppletEx("EITLERP.Production.FeltWeaving.frmFeltWeaving","Felt Weaving Report");
            frmFeltWeaving ObjFeltWeaving=(frmFeltWeaving) aFrame.ObjApplet;
            ObjFeltWeaving.Find((String)Table.getValueAt(Table.getSelectedRow(), 1), "");
        }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jMenuItemWeavingActionPerformed
    
    private void jMenuItemMendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMendingActionPerformed
        try {
            AppletFrame aFrame=new AppletFrame("Felt Mending Report");
            aFrame.startAppletEx("EITLERP.Production.FeltMending.frmFeltMending_New","Felt Mending Report");
            frmFeltMending_New ObjFeltMending=(frmFeltMending_New) aFrame.ObjApplet;
            ObjFeltMending.Find((String)Table.getValueAt(Table.getSelectedRow(), 1), "");
        }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jMenuItemMendingActionPerformed
    
    private void jMenuItemNeedlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNeedlingActionPerformed
        try {
            AppletFrame aFrame=new AppletFrame("Felt Needling Report");
            aFrame.startAppletEx("EITLERP.Production.FeltNeedling.frmFeltNeedling","Felt Needling Report");
            frmFeltNeedling ObjFeltNeedling=(frmFeltNeedling) aFrame.ObjApplet;
            ObjFeltNeedling.Find((String)Table.getValueAt(Table.getSelectedRow(), 1), "");
        }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_jMenuItemNeedlingActionPerformed
    
    private void cmdOpenDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenDocumentActionPerformed
        if(Table.getSelectedRow()!=-1) jPopupMenu.show(cmdOpenDocument, 0, 25);
        else JOptionPane.showMessageDialog(this,"Select a row from Finishing Details.","WARNING",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cmdOpenDocumentActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.rpt",new HashMap(),ObjFeltFinishing.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
        EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        try {
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltFinishing.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&PROD_DATE="+EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()));
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"File error "+e.getMessage(),"FILE ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void txtFormNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFormNoFocusGained
        ShowMessage("Enter Form No.");
    }//GEN-LAST:event_txtFormNoFocusGained
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Select a row from Document Update History");
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltFinishing.HistoryView = false;
        ObjFeltFinishing.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed
    
    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltFinishing.ShowHistory(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText()), txtProductionDocumentNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
    
    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtFeltProductionDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtFeltProductionDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFeltProductionDateFocusGained
        ShowMessage("Enter Production Date");
    }//GEN-LAST:event_txtFeltProductionDateFocusGained
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(716,txtProductionDocumentNo.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltFinishing.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(frmFeltFinishing.this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        Object[] rowData=new Object[7];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="";
        rowData[6]="";
        
        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyReleased

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyPressed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbUserName;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdOpenDocument;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItemMending;
    private javax.swing.JMenuItem jMenuItemNeedling;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWeaving;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtDayWeight;
    private javax.swing.JTextField txtFeltProductionDate;
    private javax.swing.JTextField txtFormNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtMonthWeight;
    private javax.swing.JTextField txtPreviousWeight;
    private javax.swing.JTextField txtProductionDocumentNo;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalWeight;
    // End of variables declaration//GEN-END:variables
    
    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtFeltProductionDate.setEnabled(pStat);
        txtFormNo.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        cmbUserName.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
    }
    
    private void ClearFields() {
        txtFeltProductionDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtFormNo.setText("");
        txtProductionDocumentNo.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        txtPreviousWeight.setText(txtMonthWeight.getText());
        txtDayWeight.setText("0.00");
        txtTotalWeight.setText(txtMonthWeight.getText());
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }
    
    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,716)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        //=========== Title Bar Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjFeltFinishing.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else lblTitle.setBackground(Color.GRAY);
                
                /*if(ObjFeltFinishing.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }*/
            }
            //============================================//
            
            String productionDate = EITLERPGLOBAL.formatDate(ObjFeltFinishing.getAttribute("PRODUCTION_DATE").getString());
            String documentNo= ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString();
            lblTitle.setText(" FELT PRODUCTION FINISHING DETAILS - "+ productionDate);
            lblRevNo.setText(Integer.toString((int)ObjFeltFinishing.getAttribute("REVISION_NO").getVal()));
            txtMonthWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltFinishing.getAttribute("TOTAL_WEIGHT").getVal(),2)));
            txtPreviousWeight.setText(Double.toString(EITLERPGLOBAL.round(ObjFeltFinishing.getAttribute("PREVIOUS_WEIGHT").getVal(),2)));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjFeltFinishing.getAttribute("HIERARCHY_ID").getVal());
            DoNotEvaluate=true;
            
            FormatGrid();
            txtFeltProductionDate.setText(productionDate);
            txtProductionDocumentNo.setText(documentNo);
            txtFormNo.setText(ObjFeltFinishing.getAttribute("PRODUCTION_FORM_NO").getString());
            
            //Now Generate Table
            for(int i=1;i<=ObjFeltFinishing.hmFeltFinishingDetails.size();i++) {
                clsFeltFinishingDetails ObjFeltFinishingDetails=(clsFeltFinishingDetails)ObjFeltFinishing.hmFeltFinishingDetails.get(Integer.toString(i));
                
                Object[] rowData=new Object[7];
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjFeltFinishingDetails.getAttribute("PRODUCTION_PIECE_NO").getString();
                rowData[2]=ObjFeltFinishingDetails.getAttribute("PRODUCTION_PARTY_CODE").getString();
                rowData[3]=Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("LENGTH").getVal(),2));
                rowData[4]=Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("WIDTH").getVal(),2));
                rowData[5]=Double.toString(EITLERPGLOBAL.round(ObjFeltFinishingDetails.getAttribute("WEIGHT").getVal(),2));
                rowData[6]=ObjFeltFinishingDetails.getAttribute("REMARKS").getString();
                
                DataModel.addRow(rowData);
            }
            
            //set day weight and total weight in text boxes
            double dayWeight=0, previousWeight=0;
            for(int i=0;i<Table.getRowCount();i++) {
                if(Table.getValueAt(i,3)!=null) {
                    dayWeight=dayWeight+Double.parseDouble((String)Table.getValueAt(i,3));
                }
            }
            previousWeight=Double.parseDouble(txtPreviousWeight.getText());
            
            txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeight,2)));
            txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(previousWeight+dayWeight,2)));
            
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            hmList=clsFeltProductionApprovalFlow.getDocumentFlow(716, documentNo);
            for(int i=1;i<=hmList.size();i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString())+ ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10,19);
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())+ ObjFlow.getAttribute("ACTION_DATE").getString().substring(10,19);
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            
            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsFeltFinishing.getHistoryList(ObjFeltFinishing.getAttribute("PRODUCTION_DATE").getString(), txtProductionDocumentNo.getText());
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsFeltFinishing ObjFeltFinishing=(clsFeltFinishing)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjFeltFinishing.getAttribute("REVISION_NO").getVal());
                rowData[1]=FeltUser.getUserName((int)ObjFeltFinishing.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate(ObjFeltFinishing.getAttribute("ENTRY_DATE").getString()) + ObjFeltFinishing.getAttribute("ENTRY_DATE").getString().substring(10,19);
                
                String ApprovalStatus="";
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjFeltFinishing.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjFeltFinishing.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    private void FormatGrid() {
        try {
            cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr. No.");
            DataModel.addColumn("Piece No");
            DataModel.addColumn("Party Code");
            DataModel.addColumn("Length");
            DataModel.addColumn("Width");
            DataModel.addColumn("Weight");
            DataModel.addColumn("Remarks");
            
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(2);
            
            if(EditMode!=0){
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int column=Table.getSelectedColumn();
                        String strVar=DataModel.getVariable(column);
                        //=============== Cell Editing Routine =======================//
                        Table.editCellAt(Table.getSelectedRow(),column);
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                        //============= Cell Editing Routine Ended =================//
                    }
                });
                
                //----- Install Table Model Event Listener For Displaying Party code and Group -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();
                            
                            //=========== Cell Update Prevention Check ===========//
                            String curValue=((String)Table.getValueAt(row, column)).trim();
                            if(curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if(DoNotEvaluate) {
                                return;
                            }
                            
                            if(column==1){
                                String pieceNo=((String)Table.getValueAt(row,1)).trim();
                                
                                String IsAmendPending = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_HEADER PH,PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_DETAIL PD WHERE PD.PIECE_NO='"+pieceNo+"' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                                if(IsAmendPending.equals(""))
                                {
                                        Table.setValueAt(ObjFeltFinishing.getPartyCode(pieceNo), row, 2);
                                }
                                else
                                {
                                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No "+pieceNo+" with DOC No : "+IsAmendPending+". \nThis Piece is on Hold, Please contact with Sales");
                                } 
                                
                                
                            }
                            
                            //---seting total weight to dayWeight and total Weight textbox----------------
                            double dayWeight=0,totalWeight=0, previousWeight=0, dayTotalWeight=0, monthWeight=0;
                            dayTotalWeight=Double.parseDouble(txtDayWeight.getText().trim());
                            monthWeight=Double.parseDouble(txtMonthWeight.getText().trim());
                            
                            for(int i=0;i<Table.getRowCount();i++) {
                                if(Table.getValueAt(i,3)!=null) {
                                    dayWeight=dayWeight+Double.parseDouble(((String)Table.getValueAt(i,5)).trim());
                                    totalWeight=monthWeight+dayTotalWeight;
                                }
                            }
                            
                            txtDayWeight.setText(Double.toString(EITLERPGLOBAL.round(dayWeight,2)));
                            txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(totalWeight,5)));
                            //----------------------------------------------------------------------------------
                        }
                    }
                });
            }
        }catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=716 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=716 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= clsFeltProductionApprovalFlow.getRemainingUsers(716,ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(716, txtProductionDocumentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(716, txtProductionDocumentNo.getText(), (int)ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
            
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(716,txtProductionDocumentNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    //Generates User Name Combo Box
    private void GenerateUserNameCombo() {
        HashMap hmUserNameList=new HashMap();
        
        cmbUserNameModel=new EITLComboModel();
        cmbUserName.removeAllItems();
        cmbUserName.setModel(cmbUserNameModel);
        
        hmUserNameList=ObjFeltFinishing.getUserNameList(EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gNewUserID, "FINISHING");
        for(int i=1;i<=hmUserNameList.size();i++) {
            cmbUserNameModel.addElement((ComboData)hmUserNameList.get(new Integer(i)));
        }
    }
    
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
            cmbHierarchy.setEnabled(true);
        }else {
            cmbHierarchy.setEnabled(false);
        }*/
        
        // select hold for default approval
        OpgHold.setSelected(true);
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(716,ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(716,FromUserID,ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //In Edit Mode Hierarchy and Reject Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(716, txtProductionDocumentNo.getText()) ){
                OpgReject.setEnabled(false);
            }
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7017,70171)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7017,70172)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7017,70173)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7017,70174)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        lblTitle.setBackground(Color.GRAY);
    }
    
    private void Edit() {
        String productionDocumentNo=(String)ObjFeltFinishing.getAttribute("PRODUCTION_DOCUMENT_NO").getObj();
        if(ObjFeltFinishing.IsEditable(productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            GenerateUserNameCombo();
            
            if(clsFeltProductionApprovalFlow.IsCreator(716,productionDocumentNo)) {
                SetFields(true);
                txtFeltProductionDate.setEnabled(false);
                txtFormNo.setEnabled(false);
            }
            else {
                cmbUserName.setEnabled(true);
                EnableApproval();
            }
        }
        else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","EDITING ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Delete() {
        if(ObjFeltFinishing.CanDelete(txtProductionDocumentNo.getText(),txtFeltProductionDate.getText(), EITLERPGLOBAL.gNewUserID)){
            DisplayData();
        }
        else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,ObjFeltFinishing.LastError,"DELETION ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Save() {
        String productionDate, productionDocumentNo;
        float weight=0, width=0, length=0;
        int i=0, j=0;
        String pieceNo="", formNo="", partyCode="",remarks="";
        String weightString="", widthString="", lengthString="";
        productionDate = txtFeltProductionDate.getText().trim();
        formNo = txtFormNo.getText().trim();
        
        //Form level validations
        if(productionDate.equals("") || !EITLERPGLOBAL.isDate(productionDate)) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Valid Production Date.","Wrong Production Date",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // check Production Date is Within Financial Year?
        java.sql.Date FinFromDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date ProductionDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(productionDate));
        if((ProductionDate.after(FinFromDate)||ProductionDate.compareTo(FinFromDate)==0)&&(ProductionDate.before(FinToDate)||ProductionDate.compareTo(FinToDate)==0)) {
            //Within the year
        }else {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Production Date is Not Within Financial Year.","FINANCIAL YEAR ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(ProductionDate.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB()))>0) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Production Date Must be Before or the Same Date as Today.","Wrong Production Date",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // creating document no
        productionDocumentNo = "FF"+ productionDate.substring(6,10)+ productionDate.substring(3,5)+ productionDate.substring(0,2);
        // CHECK Production Finishing Date already exist in database?
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltFinishing.checkProductionDateInDB(EITLERPGLOBAL.formatDateDB(productionDate))) {
                JOptionPane.showMessageDialog(frmFeltFinishing.this,"Production Date "+productionDate+" Already Exists.","Production Date Exists ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(formNo.equals("") || formNo.equals(null)){
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Form No.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // user name selection validation
        if(EITLERPGLOBAL.getComboCode(cmbUserName)==0){
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Select Your User Name","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(productionDocumentNo.equals("")) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Document No","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Check the no. of items in table
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Finishing Details Before Saving.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            // check duplicate piece no in table
            for(int k=0;k<=Table.getRowCount()-1;k++) {
                for(int l=k;l<=Table.getRowCount()-1;l++){
                    if(l!=k && ((String)Table.getValueAt(k, 1)).trim().equals(((String)Table.getValueAt(l, 1)).trim()) ){
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row "+(k+1)+" and "+(l+1),"ERROR",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
            
            ObjFeltFinishing.hmFeltFinishingDetails.clear();
            //Check the entered details in Table.
            for(i=0;i<=Table.getRowCount()-1;i++) {
                j++;
                pieceNo = ((String)Table.getValueAt(i, 1)).trim().toUpperCase();
                if(pieceNo.equals("") || pieceNo.equals(null)){
                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Piece No.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                String Check_dates_notSDF = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP!='SDF' AND (PR_WVG_DATE = '' OR PR_WVG_DATE = '0000-00-00') AND PR_PIECE_NO='"+pieceNo+"'");
                if(!"".equals(Check_dates_notSDF))
                {
                    JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE : "+pieceNo+" is compulsory.");
                    return;
                }

                Check_dates_notSDF = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP!='SDF' AND (PR_MND_DATE='' OR PR_MND_DATE = '0000-00-00') AND PR_PIECE_NO='"+pieceNo+"'");
                if(!"".equals(Check_dates_notSDF))
                {
                    JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE : "+pieceNo+" is compulsory.");
                    return;
                }

                Check_dates_notSDF = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP!='SDF' AND (PR_NDL_DATE='' OR PR_NDL_DATE = '0000-00-00') AND PR_PIECE_NO='"+pieceNo+"'");
                if(!"".equals(Check_dates_notSDF))
                {
                    JOptionPane.showMessageDialog(null, "Needling Date not updated, Needling Date to FINISHING for PIECE : "+pieceNo+" is compulsory.");
                    return;
                }

                String Check_dates_HDS = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP='HDS' AND (PR_WVG_DATE='' OR PR_WVG_DATE = '0000-00-00') AND PR_PIECE_NO='"+pieceNo+"'");
                if(!"".equals(Check_dates_HDS))
                {
                    JOptionPane.showMessageDialog(null, "Weaving Date not updated, Weaving Date to FINISHING for PIECE  : "+pieceNo+" (HDS) is compulsory.");
                    return;
                }

                Check_dates_HDS = data.getStringValueFromDB("SELECT PR_PIECE_NO FROM PRODUCTION.FELT_SALES_PIECE_REGISTER WHERE PR_GROUP='HDS' AND (PR_MND_DATE='' OR PR_MND_DATE = '0000-00-00') AND PR_PIECE_NO='"+pieceNo+"'");
                if(!"".equals(Check_dates_HDS))
                {
                    JOptionPane.showMessageDialog(null, "Mending Date not updated, Mending Date to FINISHING for PIECE  : "+pieceNo+" (HDS) is compulsory.");
                    return;
                }
                
                
                if(!OpgReject.isSelected())
                {
                    //check Piece No is exist in Piece Register Amendment(WIP) is Pending ??
                    String IsAmendPending = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_HEADER PH,PRODUCTION.FELT_SALES_PIECE_AMEND_APPROVAL_DETAIL PD " +
                                                                       "WHERE PD.PIECE_NO='"+pieceNo+"' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                    if(!IsAmendPending.equals(""))
                    {
                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No "+pieceNo+" with DOC No : "+IsAmendPending+". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    } 
                    
                    String IsAmendPending2 = data.getStringValueFromDB("SELECT PH.PIECE_AMEND_NO FROM PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_WIP PH,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_WIP PD WHERE PD.PIECE_NO='"+(pieceNo)+"' AND PH.APPROVED!=1 AND PH.CANCELED!=1 AND PH.PIECE_AMEND_NO=PD.PIECE_AMEND_NO");
                    if(!IsAmendPending2.equals(""))
                    {
                        JOptionPane.showMessageDialog(null, "Piece Register Amendment For WIP is Pending for Piece No "+(pieceNo)+" with DOC No : "+IsAmendPending2+". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    } 
                    
                    String IsDelinkPending = data.getStringValueFromDB("select A.PIECE_AMEND_NO from PRODUCTION.FELT_SALES_PIECE_AMENDMENT_HEADER_DELINK A,PRODUCTION.FELT_SALES_PIECE_AMENDMENT_DETAIL_DELINK B WHERE A.APPROVED=0 AND A.CANCELED!=1 AND B.PIECE_NO='"+(pieceNo+0)+"' AND A.PIECE_AMEND_NO=B.PIECE_AMEND_NO");
                    if(!IsDelinkPending.equals(""))
                    {
                        JOptionPane.showMessageDialog(null, "DELINK Approval is Pending for Piece No "+(pieceNo+0)+" with DOC No : "+IsDelinkPending+". \nThis Piece is on Hold, Please contact with Sales.");
                        return;
                    }
                }
                
                
                j++;
                partyCode = ((String)Table.getValueAt(i, 2)).trim();
                if(partyCode.equals("") || partyCode.equals(null)){
                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Party Code.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                lengthString = ((String)Table.getValueAt(i, 3)).trim();
                if(lengthString.equals("") || lengthString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Length of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }else length=Float.parseFloat(lengthString);
                
                j++;
                widthString = ((String)Table.getValueAt(i, 4)).trim();
                if(widthString.equals("") || widthString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Width of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }else width=Float.parseFloat(widthString);
                
                j++;
                weightString = ((String)Table.getValueAt(i, 5)).trim();
                if(weightString.equals("") || weightString.equals(null)) {
                    JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Weight of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }else weight=Float.parseFloat(weightString);
                
                j=0;
                remarks = ((String)Table.getValueAt(i, 6)).trim();
                
                // check piece no is already finished?
                if(EditMode==EITLERPGLOBAL.ADD) {
                    if(ObjFeltFinishing.checkPieceNoInDB(pieceNo)) {
                        JOptionPane.showMessageDialog(frmFeltFinishing.this,"Piece No."+pieceNo+" Is Already Weaved."," Piece No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // check piece no is already finished?
                if(EditMode==EITLERPGLOBAL.EDIT) {
                    if(ObjFeltFinishing.checkPieceNoInDB(pieceNo,productionDate)) {
                        JOptionPane.showMessageDialog(frmFeltFinishing.this,"Piece No."+pieceNo+" Is Already Weaved."," Piece No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                clsFeltFinishingDetails ObjFeltFinishingDetails = new clsFeltFinishingDetails();
                
                ObjFeltFinishingDetails.setAttribute("PRODUCTION_PIECE_NO",pieceNo);
                ObjFeltFinishingDetails.setAttribute("PRODUCTION_PARTY_CODE",partyCode);
                ObjFeltFinishingDetails.setAttribute("LENGTH",length);
                ObjFeltFinishingDetails.setAttribute("WIDTH",width);
                ObjFeltFinishingDetails.setAttribute("WEIGHT",weight);
                ObjFeltFinishingDetails.setAttribute("REMARKS",remarks);
                
                ObjFeltFinishing.hmFeltFinishingDetails.put(Integer.toString(ObjFeltFinishing.hmFeltFinishingDetails.size()+1), ObjFeltFinishingDetails);
            }
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter Correct Details at Row "+(i+1) +" and Column "+(j+1)+". Error is "+nfe.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            j=0;
            nfe.printStackTrace();
            return;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Select the hierarchy.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Select the Approval Action.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Enter the remarks for rejection","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected()) && cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(frmFeltFinishing.this,"Select the user, to whom rejected document to be send","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //set data for insert/update
        ObjFeltFinishing.setAttribute("PRODUCTION_DATE", productionDate);
        ObjFeltFinishing.setAttribute("PRODUCTION_DOCUMENT_NO",productionDocumentNo);
        ObjFeltFinishing.setAttribute("PRODUCTION_FORM_NO",formNo);
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltFinishing.Insert()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(frmFeltFinishing.this,"Error occured while saving. Error is "+ObjFeltFinishing.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFeltFinishing.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(frmFeltFinishing.this,"Error occured while saving editing. Error is "+ObjFeltFinishing.LastError,"SAVING ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if(PENDING_DOCUMENT){
                frmPA.RefreshView();
                PENDING_DOCUMENT=false;
            }
        }catch(Exception e){e.printStackTrace();}
    }
    
    //Sets data to the Details Class Object
    private void SetData() {
        //-------- Update Approval Specific Fields -----------//
        ObjFeltFinishing.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltFinishing.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFeltFinishing.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltFinishing.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim());
        ObjFeltFinishing.setAttribute("UPDATED_BY",EITLERPGLOBAL.getComboCode(cmbUserName));
        //ObjFeltFinishing.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if(OpgApprove.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS","R");
            ObjFeltFinishing.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFeltFinishing.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFeltFinishing.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
        }else {
            ObjFeltFinishing.setAttribute("CREATED_BY", (int)ObjFeltFinishing.getAttribute("CREATED_BY").getVal());
            ObjFeltFinishing.setAttribute("CREATED_DATE", ObjFeltFinishing.getAttribute("CREATED_DATE").getString());
            ObjFeltFinishing.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Production.FeltFinishing.frmFindFeltFinishing",true);
        frmFindFeltFinishing ObjFindFeltFinishing= (frmFindFeltFinishing)ObjLoader.getObj();
        
        if(ObjFindFeltFinishing.Cancelled==false) {
            if(!ObjFeltFinishing.Filter(ObjFindFeltFinishing.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltFinishing.this," No records found.","Find Felt Finishing Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }
    
    // find details by production date
    public void Find(String prodDate) {
        ObjFeltFinishing.Filter("AND PROD_DATE='"+prodDate+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find details by piece no.
    public void Find(String pieceNo, String prodDate) {
        ObjFeltFinishing.Filter("AND PROD_PIECE_NO+0='"+pieceNo+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find all pending document
    public void FindWaiting() {
        ObjFeltFinishing.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, PRODUCTION.FELT_PROD_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=716 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }
    
    private void MoveFirst() {
        ObjFeltFinishing.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFeltFinishing.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFeltFinishing.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFeltFinishing.MoveLast();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(" "+pMessage);
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }
    
}
