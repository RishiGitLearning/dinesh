/*
 * frmFeltRateMaster.java
 *
 * Created on September 3, 2013, 5:10 PM
 */

package EITLERP.Production.FeltRateMaster;

/**
 *
 * @author  Vivek Kumar
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.awt.Color;
import java.util.HashMap;
import javax.swing.table.TableColumnModel;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableModel;
import EITLERP.EITLComboModel;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;

public class frmFeltRateMaster extends javax.swing.JApplet {
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbChemicalTreatmentIndicatorModel;
    private EITLComboModel cmbPINIndicatormodel;
    private EITLComboModel cmbSpiralIndicatorModel;
    private EITLComboModel cmbSurchargeIndicatorModel;
    private EITLComboModel cmbSQMIndicatorModel;
    
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel=new EITLTableModel();
    
    private clsFeltRateMaster ObjFeltRateMaster;
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmFeltRateMaster */
    public void init() {
        System.gc();
        setSize(740,610);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjFeltRateMaster=new clsFeltRateMaster();
        GenerateCombos();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        
        if(ObjFeltRateMaster.LoadData()) {
            DisplayData();
        }else {
            JOptionPane.showMessageDialog(this,"Error occured while loading data. Error is "+ObjFeltRateMaster.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
        
        SetMenuForRights();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdUpdateRate = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtQualityID = new javax.swing.JTextField(7);
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtQualityDesc = new javax.swing.JTextField();
        cmbChemicalTreatmentIndicator = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbPINIndicator = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbSurchargeIndicator = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbSQMIndicator = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        cmbSpiralIndicator = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtSynPercent = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtSQMRate = new javax.swing.JTextField();
        txtWTRate = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtCharges = new javax.swing.JTextField();
        txtGroup = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdShowDoc = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        cmdBackToTab1 = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.setEnabled(false);
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.setEnabled(false);
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        cmdUpdateRate.setFont(new java.awt.Font("Dialog", 1, 10));
        cmdUpdateRate.setText("<html><center>Update <br>Rate</html>");
        cmdUpdateRate.setToolTipText("Update Rate");
        cmdUpdateRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cmdUpdateRate.setMaximumSize(new java.awt.Dimension(45, 34));
        cmdUpdateRate.setEnabled(false);
        cmdUpdateRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUpdateRateActionPerformed(evt);
            }
        });

        ToolBar.add(cmdUpdateRate);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 730, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("FELT RATE MASTER");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 730, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Document No.");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(430, 12, 90, 15);

        txtDocNo.setEnabled(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(560, 10, 110, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Quality ID");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(10, 12, 70, 15);

        txtQualityID.setEnabled(false);
        txtQualityID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQualityIDFocusGained(evt);
            }
        });

        Tab1.add(txtQualityID);
        txtQualityID.setBounds(100, 10, 104, 19);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 224, 680, 180);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(8, 220, 684, 4);

        cmdNext1.setMnemonic('X');
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(587, 411, 102, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(674, 10, 20, 18);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Quality Desc.");
        jLabel7.setToolTipText("Quality Description");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel7);
        jLabel7.setBounds(10, 42, 90, 15);

        txtQualityDesc.setToolTipText("Quality Description");
        txtQualityDesc.setEnabled(false);
        txtQualityDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQualityDescFocusGained(evt);
            }
        });

        Tab1.add(txtQualityDesc);
        txtQualityDesc.setBounds(100, 40, 290, 19);

        cmbChemicalTreatmentIndicator.setEnabled(false);
        Tab1.add(cmbChemicalTreatmentIndicator);
        cmbChemicalTreatmentIndicator.setBounds(560, 40, 130, 24);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Chemical Treatment");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel4);
        jLabel4.setBounds(430, 43, 130, 15);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("PIN Indicator");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel5);
        jLabel5.setBounds(430, 133, 80, 15);

        cmbPINIndicator.setEnabled(false);
        Tab1.add(cmbPINIndicator);
        cmbPINIndicator.setBounds(560, 130, 130, 24);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Surcharges Indicator");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(430, 73, 130, 15);

        cmbSurchargeIndicator.setEnabled(false);
        Tab1.add(cmbSurchargeIndicator);
        cmbSurchargeIndicator.setBounds(560, 70, 130, 24);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("SQM Indicator");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel9);
        jLabel9.setBounds(430, 103, 90, 15);

        cmbSQMIndicator.setEnabled(false);
        Tab1.add(cmbSQMIndicator);
        cmbSQMIndicator.setBounds(560, 100, 130, 24);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Spiral Indicator");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel10);
        jLabel10.setBounds(430, 163, 100, 15);

        cmbSpiralIndicator.setEnabled(false);
        Tab1.add(cmbSpiralIndicator);
        cmbSpiralIndicator.setBounds(560, 160, 130, 24);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Synthetic %");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel11);
        jLabel11.setBounds(10, 72, 70, 15);

        txtSynPercent.setEnabled(false);
        txtSynPercent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSynPercentFocusGained(evt);
            }
        });

        Tab1.add(txtSynPercent);
        txtSynPercent.setBounds(100, 70, 104, 19);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Sqr. Mtr. Rate");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel12);
        jLabel12.setBounds(10, 102, 90, 15);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Weight Rate");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel13);
        jLabel13.setBounds(10, 132, 80, 15);

        txtSQMRate.setEnabled(false);
        txtSQMRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSQMRateFocusGained(evt);
            }
        });

        Tab1.add(txtSQMRate);
        txtSQMRate.setBounds(100, 100, 104, 19);

        txtWTRate.setEnabled(false);
        txtWTRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtWTRateFocusGained(evt);
            }
        });

        Tab1.add(txtWTRate);
        txtWTRate.setBounds(100, 130, 104, 19);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Charges");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel14);
        jLabel14.setBounds(10, 162, 80, 15);

        txtCharges.setEnabled(false);
        txtCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtChargesFocusGained(evt);
            }
        });

        Tab1.add(txtCharges);
        txtCharges.setBounds(100, 160, 104, 19);

        txtGroup.setEnabled(false);
        txtGroup.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGroupFocusGained(evt);
            }
        });

        Tab1.add(txtGroup);
        txtGroup.setBounds(560, 190, 130, 19);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Group");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel15);
        jLabel15.setBounds(430, 192, 40, 15);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("Remarks");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel16);
        jLabel16.setBounds(10, 192, 60, 15);

        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(100, 190, 290, 19);

        cmdShowDoc.setMnemonic('X');
        cmdShowDoc.setText("Show Document");
        cmdShowDoc.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowDocActionPerformed(evt);
            }
        });

        Tab1.add(cmdShowDoc);
        cmdShowDoc.setBounds(440, 411, 130, 25);

        Tab.addTab("Rate List", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(10, 23, 66, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 20, 180, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(10, 62, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(90, 60, 180, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(10, 95, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 95, 530, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 130, 81, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(90, 130, 180, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(10, 253, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(90, 250, 180, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(10, 292, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 290, 570, 19);

        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(450, 400, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(630, 95, 33, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(570, 400, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 10, 242, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 30, 680, 170);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 220, 182, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(12, 237, 560, 190);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(580, 238, 110, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(580, 272, 110, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 2, 2, 2));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(580, 306, 110, 24);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(580, 402, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 66, 710, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 540, 710, 22);

    }//GEN-END:initComponents
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        lblStatus.setText("Enter Remarks");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtGroupFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGroupFocusGained
        lblStatus.setText("Enter Group");
    }//GEN-LAST:event_txtGroupFocusGained
    
    private void txtChargesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChargesFocusGained
        lblStatus.setText("Enter Charges");
    }//GEN-LAST:event_txtChargesFocusGained
    
    private void txtWTRateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtWTRateFocusGained
        lblStatus.setText("Enter Weight Rate");
    }//GEN-LAST:event_txtWTRateFocusGained
    
    private void txtSQMRateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSQMRateFocusGained
        lblStatus.setText("Enter Square Meter Rate");
    }//GEN-LAST:event_txtSQMRateFocusGained
    
    private void txtSynPercentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSynPercentFocusGained
        lblStatus.setText("Enter Synthetic Percentage");
    }//GEN-LAST:event_txtSynPercentFocusGained
    
    private void txtQualityDescFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQualityDescFocusGained
        lblStatus.setText("Enter Quality Description");
    }//GEN-LAST:event_txtQualityDescFocusGained
    
    private void cmdShowDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowDocActionPerformed
        if(Table.getRowCount()>0 && Table.getSelectedRow()>=0) {
            String docNo=Table.getValueAt(Table.getSelectedRow(),9).toString();
            if(!docNo.equals(null) && docNo.substring(0,3).equals("FRU"))
                try {
                    AppletFrame aFrame=new AppletFrame("Felt Rate Updation");
                    aFrame.startAppletEx("EITLERP.Production.FeltRateMaster.frmFeltRateUpdate","Felt Rate Master Updation");
                    frmFeltRateUpdate ObjFeltRateUpdate=(frmFeltRateUpdate) aFrame.ObjApplet;
                    ObjFeltRateUpdate.Find(docNo);
                }catch(Exception e){e.printStackTrace();}
        }
    }//GEN-LAST:event_cmdShowDocActionPerformed
    
    private void cmdUpdateRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUpdateRateActionPerformed
        try {
            AppletFrame aFrame=new AppletFrame("Felt Rate Updation");
            aFrame.startAppletEx("EITLERP.Production.FeltRateMaster.frmFeltRateUpdate","Felt Rate Master Updation");
            frmFeltRateUpdate ObjFeltRateUpdate=(frmFeltRateUpdate) aFrame.ObjApplet;
            ObjFeltRateUpdate.Add(txtQualityID.getText(), (true?EITLERPGLOBAL.getCombostrCode(cmbSQMIndicator).equals("1"):false));
        }catch(Exception e){e.printStackTrace();}
    }//GEN-LAST:event_cmdUpdateRateActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(this,"Select a row from Document Update History","ERROR",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        ObjFeltRateMaster.HistoryView=false;
        ObjFeltRateMaster.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        ObjFeltRateMaster.ShowHistory(txtQualityID.getText().trim());
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtQualityID.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtQualityIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQualityIDFocusGained
        lblStatus.setText("Enter the Quality ID");
    }//GEN-LAST:event_txtQualityIDFocusGained
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(713,ObjFeltRateMaster.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltRateMaster.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbChemicalTreatmentIndicator;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbPINIndicator;
    private javax.swing.JComboBox cmbSQMIndicator;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbSpiralIndicator;
    private javax.swing.JComboBox cmbSurchargeIndicator;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowDoc;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdUpdateRate;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtCharges;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGroup;
    private javax.swing.JTextField txtQualityDesc;
    private javax.swing.JTextField txtQualityID;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSQMRate;
    private javax.swing.JTextField txtSynPercent;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtWTRate;
    // End of variables declaration//GEN-END:variables
    
    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
        cmdUpdateRate.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtQualityID.setEnabled(pStat);
        txtQualityDesc.setEnabled(pStat);
        txtSynPercent.setEnabled(pStat);
        txtSQMRate.setEnabled(pStat);
        txtWTRate.setEnabled(pStat);
        txtCharges.setEnabled(pStat);
        txtGroup.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        cmbChemicalTreatmentIndicator.setEnabled(pStat);
        cmbPINIndicator.setEnabled(pStat);
        cmbSpiralIndicator.setEnabled(pStat);
        cmbSurchargeIndicator.setEnabled(pStat);
        cmbSQMIndicator.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
        
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtQualityID.setText("");
        txtQualityDesc.setText("");
        txtSynPercent.setText("");
        txtSQMRate.setText("");
        txtWTRate.setText("");
        txtCharges.setText("");
        txtGroup.setText("");
        txtRemarks.setText("");
        
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        cmbChemicalTreatmentIndicator.setSelectedIndex(0);
        cmbPINIndicator.setSelectedIndex(0);
        cmbSpiralIndicator.setSelectedIndex(0);
        cmbSurchargeIndicator.setSelectedIndex(0);
        cmbSQMIndicator.setSelectedIndex(0);
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=701;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try {
            //=========== Title Bar Color Indication ===============//
            if(EditMode==0) {
                if(ObjFeltRateMaster.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else lblTitle.setBackground(Color.GRAY);
                
                if(ObjFeltRateMaster.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//
            // --- Rate Update Rights --
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7020,70203) && ObjFeltRateMaster.getAttribute("APPROVED").getInt()==1) {
                cmdUpdateRate.setEnabled(true);
            }else {
                cmdUpdateRate.setEnabled(false);
            }
            
            ClearFields();
            
            txtQualityID.setText(ObjFeltRateMaster.getAttribute("PRODUCT_CODE").getString());
            lblTitle.setText("FELT RATE MASTER - "+txtQualityID.getText());
            lblRevNo.setText(Integer.toString((int)ObjFeltRateMaster.getAttribute("REVISION_NO").getVal()));
            txtDocNo.setText(ObjFeltRateMaster.getAttribute("DOC_NO").getString());
            txtQualityID.setText(ObjFeltRateMaster.getAttribute("PRODUCT_CODE").getString());
            txtQualityDesc.setText(ObjFeltRateMaster.getAttribute("PRODUCT_DESC").getString());
            txtSynPercent.setText(Float.toString((float)ObjFeltRateMaster.getAttribute("SYN_PER").getVal()));
            txtSQMRate.setText(Float.toString((float)ObjFeltRateMaster.getAttribute("SQM_RATE").getVal()));
            txtWTRate.setText(Float.toString((float)ObjFeltRateMaster.getAttribute("WT_RATE").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbChemicalTreatmentIndicator,ObjFeltRateMaster.getAttribute("CHEM_TRT_IND").getString());
            EITLERPGLOBAL.setComboIndex(cmbSpiralIndicator,ObjFeltRateMaster.getAttribute("SPRL_IND").getString());
            EITLERPGLOBAL.setComboIndex(cmbSurchargeIndicator,ObjFeltRateMaster.getAttribute("SUR_CHRG_IND").getString());
            EITLERPGLOBAL.setComboIndex(cmbSQMIndicator,ObjFeltRateMaster.getAttribute("SQM_IND").getString());
            EITLERPGLOBAL.setComboIndex(cmbPINIndicator,ObjFeltRateMaster.getAttribute("PIN_IND").getString());
            txtCharges.setText(Float.toString((float)ObjFeltRateMaster.getAttribute("CHARGES").getVal()));
            txtGroup.setText(ObjFeltRateMaster.getAttribute("GROUP").getString());
            txtRemarks.setText(ObjFeltRateMaster.getAttribute("REMARKS").getString());
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjFeltRateMaster.getAttribute("HIERARCHY_ID").getVal());
            
            
            FormatGrid();
            //Now Generate Table
            for(int i=1;i<=ObjFeltRateMaster.hmRateDetails.size();i++) {
                clsFeltRateMasterDetail ObjFeltRateMasterDetail=(clsFeltRateMasterDetail)ObjFeltRateMaster.hmRateDetails.get(Integer.toString(i));
                Object[] rowData=new Object[10];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjFeltRateMasterDetail.getAttribute("PRODUCT_CODE").getObj();
                rowData[2]=Float.toString((float)ObjFeltRateMasterDetail.getAttribute("SQM_RATE").getVal());
                rowData[3]=Float.toString((float)ObjFeltRateMasterDetail.getAttribute("WT_RATE").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFeltRateMasterDetail.getAttribute("RATE_FROM_DATE").getString());
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFeltRateMasterDetail.getAttribute("RATE_TO_DATE").getString());
                rowData[6]=Float.toString((float)ObjFeltRateMasterDetail.getAttribute("CHARGES").getVal());
                rowData[7]=EITLERPGLOBAL.formatDate(ObjFeltRateMasterDetail.getAttribute("CHARGES_FROM_DATE").getString());
                rowData[8]=EITLERPGLOBAL.formatDate(ObjFeltRateMasterDetail.getAttribute("CHARGES_TO_DATE").getString());
                rowData[9]=ObjFeltRateMasterDetail.getAttribute("DOC_NO").getString();
                
                DataModel.addRow(rowData);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            hmList=clsFeltProductionApprovalFlow.getDocumentFlow(701, ObjFeltRateMaster.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmList.size();i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString())+ ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10,19);
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())+ ObjFlow.getAttribute("ACTION_DATE").getString().substring(10,19);
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            
            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsFeltRateMaster.getHistoryList(ObjFeltRateMaster.getAttribute("PRODUCT_CODE").getString(), ObjFeltRateMaster.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsFeltRateMaster ObjFeltRateMaster=(clsFeltRateMaster)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjFeltRateMaster.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(2, (int)ObjFeltRateMaster.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate(ObjFeltRateMaster.getAttribute("ENTRY_DATE").getString()) + ObjFeltRateMaster.getAttribute("ENTRY_DATE").getString().substring(10,19);
                
                String ApprovalStatus="";
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjFeltRateMaster.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjFeltRateMaster.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
            //============================================================//
        }catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjFeltRateMaster.setAttribute("DOC_NO",txtDocNo.getText().trim());
        ObjFeltRateMaster.setAttribute("PRODUCT_CODE",txtQualityID.getText().trim());
        ObjFeltRateMaster.setAttribute("PRODUCT_DESC",txtQualityDesc.getText().trim().toUpperCase());
        ObjFeltRateMaster.setAttribute("SYN_PER",Float.parseFloat(txtSynPercent.getText().trim()));
        ObjFeltRateMaster.setAttribute("SQM_RATE",Float.parseFloat(txtSQMRate.getText().trim()));
        ObjFeltRateMaster.setAttribute("WT_RATE",Float.parseFloat(txtWTRate.getText().trim()));
        ObjFeltRateMaster.setAttribute("CHEM_TRT_IND",Integer.parseInt(EITLERPGLOBAL.getCombostrCode(cmbChemicalTreatmentIndicator)));
        ObjFeltRateMaster.setAttribute("PIN_IND",Integer.parseInt(EITLERPGLOBAL.getCombostrCode(cmbPINIndicator)));
        ObjFeltRateMaster.setAttribute("SPRL_IND",Integer.parseInt(EITLERPGLOBAL.getCombostrCode(cmbSpiralIndicator)));
        ObjFeltRateMaster.setAttribute("SUR_CHRG_IND",Integer.parseInt(EITLERPGLOBAL.getCombostrCode(cmbSurchargeIndicator)));
        ObjFeltRateMaster.setAttribute("SQM_IND",Integer.parseInt(EITLERPGLOBAL.getCombostrCode(cmbSQMIndicator)));
        ObjFeltRateMaster.setAttribute("CHARGES",Float.parseFloat(txtCharges.getText().trim()));
        ObjFeltRateMaster.setAttribute("GROUP",txtGroup.getText().trim().toUpperCase());
        ObjFeltRateMaster.setAttribute("REMARKS",txtRemarks.getText().trim());
        
        //----- Update Approval Specific Fields -----------//
        ObjFeltRateMaster.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltRateMaster.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFeltRateMaster.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltRateMaster.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim().toUpperCase());
        ObjFeltRateMaster.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        
        if(OpgApprove.isSelected()) {
            ObjFeltRateMaster.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFeltRateMaster.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFeltRateMaster.setAttribute("APPROVAL_STATUS","R");
            ObjFeltRateMaster.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFeltRateMaster.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFeltRateMaster.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFeltRateMaster.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjFeltRateMaster.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjFeltRateMaster.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
    }
    
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
            cmbHierarchy.setEnabled(true);
        }else {
            cmbHierarchy.setEnabled(false);
        }*/
        // select hold for default approval
        OpgHold.setSelected(true);
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(701,ObjFeltRateMaster.getAttribute("DOC_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(701,FromUserID,ObjFeltRateMaster.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //In Edit Mode Hierarchy and Reject Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(701, ObjFeltRateMaster.getAttribute("DOC_NO").getString()) ){
                OpgReject.setEnabled(false);
            }
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7020,70201)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7020,70202)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7020,0)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7020,0)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        lblTitle.setBackground(Color.GRAY);
    }
    
    private void Edit() {
        if(ObjFeltRateMaster.IsEditable(txtQualityID.getText().trim(), EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            if(clsFeltProductionApprovalFlow.IsCreator(701,ObjFeltRateMaster.getAttribute("DOC_NO").getString())) {
                SetFields(true);
            }else {
                EnableApproval();
            }
        }else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Save() {
        //Form level validations
        if(txtQualityID.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Quality ID.");
            return;
        }
        
        if(txtQualityID.getText().trim().length()!=7) {
            JOptionPane.showMessageDialog(this,"Quality ID must be of 7 character.");
            return;
        }
        
        // check if quality exists
        if(EditMode==EITLERPGLOBAL.ADD){
            if(ObjFeltRateMaster.checkQualityNo(txtQualityID.getText().trim())) {
                JOptionPane.showMessageDialog(this,"Quality No. "+ txtQualityID.getText().trim()+" already exists.");
                return;
            }
            //generating document no.
            txtDocNo.setText("FR"+ Integer.toString(EITLERPGLOBAL.FinYearFrom).substring(2)+txtQualityID.getText().trim());
        }
        
        if(txtQualityDesc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Quality Description.");
            return;
        }
        
        if(txtQualityDesc.getText().trim().length()>35) {
            JOptionPane.showMessageDialog(this,"Quality Description can not more than 35 character.");
            return;
        }
        
        try{
            if (txtSynPercent.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Enter Synthetic Percentage.");
                return;
            }else Float.parseFloat(txtSynPercent.getText().trim());
            
            if (txtSQMRate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Enter Square Meter Rate.");
                return;
            }else Float.parseFloat(txtSQMRate.getText().trim());
            
            if (txtWTRate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Enter Weight Rate.");
                return;
            }else Float.parseFloat(txtWTRate.getText().trim());
            
            if (txtCharges.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Enter Charges.");
                return;
            }else Float.parseFloat(txtCharges.getText().trim());
            
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Enter Correct Details. Error is : "+ nfe.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            nfe.printStackTrace();
            return;
        }
        
        if(cmbChemicalTreatmentIndicator.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this,"Select Chemical Treatment Indicator.");
            return;
        }
        
        if(cmbSurchargeIndicator.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this,"Select Surcharge Indicator.");
            return;
        }
        
        if(cmbPINIndicator.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this,"Select PIN Indicator.");
            return;
        }
        
        if(cmbSpiralIndicator.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this,"Select Spiral Indicator.");
            return;
        }
        
        if(cmbSQMIndicator.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this,"Select Square Metre Indicator.");
            return;
        }
        
        if(txtGroup.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Group.");
            return;
        }
        /*
        if (txtRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Remarks.");
            return;
        }
         */
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this,"Select the Hierarchy.");
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this,"Select the Approval Action.");
            return;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter the remarks for rejection");
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(this,"Select the user, to whom rejected document to be send");
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltRateMaster.Insert()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjFeltRateMaster.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFeltRateMaster.Update()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving Editing. Error is "+ObjFeltRateMaster.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if(PENDING_DOCUMENT){
                frmPA.RefreshView();
                PENDING_DOCUMENT=false;
            }
        }catch(Exception e){e.printStackTrace();}
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Production.FeltRateMaster.frmFindFeltRate",true);
        frmFindFeltRate ObjFindFeltRate= (frmFindFeltRate) ObjLoader.getObj();
        
        if(ObjFindFeltRate.Cancelled==false) {
            if(!ObjFeltRateMaster.Filter(ObjFindFeltRate.stringFindQuery)) {
                JOptionPane.showMessageDialog(this,"No records found.","Find Felt Rate",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }
    
    // find rate update by doc no
    public void Find(String docNo) {
        ObjFeltRateMaster.Filter("DOC_NO='"+docNo+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find all pending document
    public void FindWaiting() {
        ObjFeltRateMaster.Filter("DOC_NO IN (SELECT PRODUCTION.FELT_RATE_MASTER.DOC_NO FROM PRODUCTION.FELT_RATE_MASTER,PRODUCTION.FELT_PROD_DOC_DATA WHERE PRODUCTION.FELT_RATE_MASTER.DOC_NO=PRODUCTION.FELT_PROD_DOC_DATA.DOC_NO AND PRODUCTION.FELT_PROD_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND PRODUCTION.FELT_PROD_DOC_DATA.STATUS='W' AND MODULE_ID="+701+")");
        SetMenuForRights();
        DisplayData();
    }
    
    private void MoveFirst() {
        ObjFeltRateMaster.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFeltRateMaster.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFeltRateMaster.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFeltRateMaster.MoveLast();
        DisplayData();
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }else {
                DataModel.SetReadOnly(i);
            }
        }
        //=======================================================//
    }
    
    private void FormatGrid() {
        try {
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Quality ID"); //1 //Read Only
            DataModel.addColumn("Sqr. Mtr. Rate");
            DataModel.addColumn("Weight Rate");
            DataModel.addColumn("Rate From Date");
            DataModel.addColumn("Rate To Date");
            DataModel.addColumn("Charges");
            DataModel.addColumn("Charges From Date");
            DataModel.addColumn("Charges To Date");
            DataModel.addColumn("Doc No");
            
            DataModel.TableReadOnly(true);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            
            TableColumnModel tcm= Table.getColumnModel();
            tcm.getColumn(0).setPreferredWidth(20);
            tcm.getColumn(1).setPreferredWidth(80);
            tcm.getColumn(2).setPreferredWidth(100);
            tcm.getColumn(3).setPreferredWidth(90);
            tcm.getColumn(4).setPreferredWidth(110);
            tcm.getColumn(5).setPreferredWidth(100);
            tcm.getColumn(6).setPreferredWidth(90);
            tcm.getColumn(7).setPreferredWidth(130);
            tcm.getColumn(8).setPreferredWidth(110);
            tcm.getColumn(9).setMaxWidth(0);
        }
        catch(Exception e) {
            
        }
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
        
        TableColumnModel tcm= TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        
        TableColumnModel tcm= TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=701 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=701 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=ObjHierarchy.getAttribute("HIERARCHY_NAME").getString();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(701, ObjFeltRateMaster.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(701, ObjFeltRateMaster.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(701,ObjFeltRateMaster.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=ObjUser.getAttribute("USER_NAME").getString();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList = clsFeltProductionApprovalFlow.getRemainingUsers(701,ObjFeltRateMaster.getAttribute("DOC_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=ObjUser.getAttribute("USER_NAME").getString();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    // generates all combos
    private void GenerateCombos() {
        //--- Generate Chemical Treatment Combo ------//
        cmbChemicalTreatmentIndicatorModel =new EITLComboModel();
        cmbChemicalTreatmentIndicator.removeAllItems();
        cmbChemicalTreatmentIndicator.setModel(cmbChemicalTreatmentIndicatorModel);
        
        ComboData aData=new ComboData();
        aData.strCode="-1";
        aData.Text="Chemical Treatment";
        cmbChemicalTreatmentIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbChemicalTreatmentIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbChemicalTreatmentIndicatorModel.addElement(aData);
        //===============================//
        
        //--- Generate PIN Indicator Combo ------//
        cmbPINIndicatormodel =new EITLComboModel();
        cmbPINIndicator.removeAllItems();
        cmbPINIndicator.setModel(cmbPINIndicatormodel);
        
        aData=new ComboData();
        aData.strCode="-1";
        aData.Text="PIN Indicator";
        cmbPINIndicatormodel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbPINIndicatormodel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbPINIndicatormodel.addElement(aData);
        //===============================//
        
        //--- Generate Spiral Indicator Combo ------//
        cmbSpiralIndicatorModel =new EITLComboModel();
        cmbSpiralIndicator.removeAllItems();
        cmbSpiralIndicator.setModel(cmbSpiralIndicatorModel);
        
        aData=new ComboData();
        aData.strCode="-1";
        aData.Text="Spiral Indicator";
        cmbSpiralIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbSpiralIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbSpiralIndicatorModel.addElement(aData);
        //===============================//
        
        //--- Generate sur charges Indicator Combo ------//
        cmbSurchargeIndicatorModel =new EITLComboModel();
        cmbSurchargeIndicator.removeAllItems();
        cmbSurchargeIndicator.setModel(cmbSurchargeIndicatorModel);
        
        aData=new ComboData();
        aData.strCode="-1";
        aData.Text="Surcharge Indicator";
        cmbSurchargeIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbSurchargeIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbSurchargeIndicatorModel.addElement(aData);
        //===============================//
        
        //--- Generate SQM Indicator Combo ------//
        cmbSQMIndicatorModel =new EITLComboModel();
        cmbSQMIndicator.removeAllItems();
        cmbSQMIndicator.setModel(cmbSQMIndicatorModel);
        
        aData=new ComboData();
        aData.strCode="-1";
        aData.Text="SQM Indicator";
        cmbSQMIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="0";
        aData.Text="Non Applicable";
        cmbSQMIndicatorModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="1";
        aData.Text="Applicable";
        cmbSQMIndicatorModel.addElement(aData);
        //===============================//
    }
    
}
