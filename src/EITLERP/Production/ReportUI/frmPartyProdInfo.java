/*
 * frmIndentsInfo.java
 *
 * Created on July 13, 2005, 10:47 AM
 */

package EITLERP.Production.ReportUI;

import EITLERP.*;
import EITLERP.Stores.*;
import EITLERP.Purchase.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.sql.*;
import java.net.*;
import java.text.DecimalFormat;

/**
 *
 * @author  root
 */
public class frmPartyProdInfo extends javax.swing.JApplet {
    
    private EITLTableModel DataModelI=new EITLTableModel();
    private EITLTableModel DataModelU=new EITLTableModel();
    private EITLTableModel DataModelD=new EITLTableModel();
    private EITLTableModel DataModelDiscount = new EITLTableModel();
    private EITLTableModel DataModelTarget = new EITLTableModel();
    private EITLTableModel DataModelTargetA = new EITLTableModel();
    private EITLTableModel DataModelMisc = new EITLTableModel();
    private EITLTableModel DataModelSeam = new EITLTableModel();
    private EITLTableModel DataModelSalesY = new EITLTableModel();
    private EITLTableModel DataModelSalesM = new EITLTableModel();
    private EITLTableModel DataModelDiverted = new EITLTableModel();
      
    private EITLComboModel cmbBuyerModel=new EITLComboModel();
    private EITLComboModel cmbOrderModel=new EITLComboModel();
    private EITLComboModel cmbDespatchModel = new EITLComboModel();
    private EITLComboModel cmbStockModel = new EITLComboModel();
    private EITLComboModel cmbDiscountModel = new EITLComboModel();
    private EITLComboModel cmbSeamModel = new EITLComboModel();
    
    private EITLComboModel cmbDeptModel=new EITLComboModel();
    private EITLComboModel cmbApprovalModel=new EITLComboModel();
    
    /** Initializes the applet frmIndentsInfo */
    public void init() {
        setSize(1000, 650);
        initComponents();
        GenerateCombo();
        FormatGridI();
        FormatGridU();
        FormatGridD();
        FormatGridDiscount();
        FormatGridTarget();
        FormatGridTargetA();
        FormatGridMisc();
        FormatGridSeam();
        FormatGridSalesY();
        FormatGridSalesM();
        ForamtGridDiverted();
     //EITLERPGLOBAL.setComboIndex(cmbBuyer,EITLERPGLOBAL.gUserID);
        txtRIA.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        cmdShowI = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableI = new javax.swing.JTable();
        cmdOpenI = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbOrder = new javax.swing.JComboBox();
        txtRIA = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        cmdShowU = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableU = new javax.swing.JTable();
        cmdOpenU = new javax.swing.JButton();
        cmdPreviewU = new javax.swing.JButton();
        cmbStock = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        txttotal = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableDiverted = new javax.swing.JTable();
        cmdshowDiverted = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableD = new javax.swing.JTable();
        cmdshowD = new javax.swing.JButton();
        cmbDespatch = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        cmdshowS = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        TableSalesY = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        TableSalesM = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableDiscount = new javax.swing.JTable();
        cmdshowDiscount = new javax.swing.JButton();
        cmbDiscount = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableTarget = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableTargetA = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtpartycode = new javax.swing.JTextField();
        txtpartyname = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtaddress2 = new javax.swing.JTextField();
        txtaddress1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txttranscode = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtinsuranceind = new javax.swing.JTextField();
        txtchargeind = new javax.swing.JTextField();
        txtstation = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(1000, 29));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Felt's Party Cards Information System  ");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(2, 4, 360, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 990, 29);

        jLabel2.setText("Party Code");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(30, 60, 70, 15);

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        cmdShowI.setText("Show List");
        cmdShowI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowIActionPerformed(evt);
            }
        });

        jPanel2.add(cmdShowI);
        cmdShowI.setBounds(10, 10, 118, 25);

        TableI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableI.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        TableI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableIMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(TableI);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(9, 48, 920, 320);

        cmdOpenI.setText("Open Document");
        cmdOpenI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenIActionPerformed(evt);
            }
        });

        jPanel2.add(cmdOpenI);
        cmdOpenI.setBounds(360, 390, 162, 25);

        cmdPreview.setText("Preview Report");
        cmdPreview.setEnabled(false);
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        jPanel2.add(cmdPreview);
        cmdPreview.setBounds(180, 390, 162, 25);

        jLabel3.setText("Sort by");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(150, 10, 60, 30);

        jPanel2.add(cmbOrder);
        cmbOrder.setBounds(220, 14, 120, 20);

        jPanel2.add(txtRIA);
        txtRIA.setBounds(30, 390, 130, 19);

        jTabbedPane1.addTab("Production Process", jPanel2);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        cmdShowU.setText("Show List");
        cmdShowU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowUActionPerformed(evt);
            }
        });

        jPanel3.add(cmdShowU);
        cmdShowU.setBounds(10, 10, 118, 25);

        TableU.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableU.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableUMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(TableU);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(10, 40, 940, 330);

        cmdOpenU.setText("Open Document");
        cmdOpenU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenUActionPerformed(evt);
            }
        });

        jPanel3.add(cmdOpenU);
        cmdOpenU.setBounds(390, 390, 162, 25);

        cmdPreviewU.setText("Preview Report");
        cmdPreviewU.setEnabled(false);
        cmdPreviewU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewUActionPerformed(evt);
            }
        });

        jPanel3.add(cmdPreviewU);
        cmdPreviewU.setBounds(210, 390, 162, 25);

        jPanel3.add(cmbStock);
        cmbStock.setBounds(220, 10, 120, 24);

        jLabel8.setText("Sort By");
        jPanel3.add(jLabel8);
        jLabel8.setBounds(145, 5, 70, 30);

        jPanel3.add(txttotal);
        txttotal.setBounds(849, 390, 100, 19);

        jLabel4.setText("Total KG Rcvd");
        jPanel3.add(jLabel4);
        jLabel4.setBounds(745, 390, 100, 20);

        jTabbedPane1.addTab("Stock Available", jPanel3);

        jPanel4.setLayout(null);

        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        TableDiverted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableDiverted);

        jPanel4.add(jScrollPane3);
        jScrollPane3.setBounds(20, 40, 920, 400);

        cmdshowDiverted.setText("Show List");
        cmdshowDiverted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdshowDivertedActionPerformed(evt);
            }
        });

        jPanel4.add(cmdshowDiverted);
        cmdshowDiverted.setBounds(20, 10, 110, 25);

        jTabbedPane1.addTab("Diverted", jPanel4);

        jPanel5.setLayout(null);

        TableD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableDMouseClicked(evt);
            }
        });

        jScrollPane4.setViewportView(TableD);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(20, 40, 900, 370);

        cmdshowD.setText("Show List");
        cmdshowD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdshowDActionPerformed(evt);
            }
        });

        jPanel5.add(cmdshowD);
        cmdshowD.setBounds(20, 10, 110, 25);

        jPanel5.add(cmbDespatch);
        cmbDespatch.setBounds(240, 10, 110, 24);

        jLabel7.setText("Sort By");
        jPanel5.add(jLabel7);
        jLabel7.setBounds(165, 10, 60, 20);

        jTabbedPane1.addTab("Despatched", jPanel5);

        jPanel10.setLayout(null);

        cmdshowS.setText("Show List");
        cmdshowS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdshowSActionPerformed(evt);
            }
        });

        jPanel10.add(cmdshowS);
        cmdshowS.setBounds(20, 10, 120, 25);

        TableSalesY.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TableSalesY);

        jPanel10.add(jScrollPane9);
        jScrollPane9.setBounds(20, 70, 930, 170);

        TableSalesM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(TableSalesM);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(20, 280, 930, 220);

        jLabel11.setText("Yearly Sales");
        jPanel10.add(jLabel11);
        jLabel11.setBounds(20, 40, 320, 20);

        jLabel12.setText("Monthwise Yearly Sales");
        jPanel10.add(jLabel12);
        jLabel12.setBounds(20, 250, 380, 20);

        jTabbedPane1.addTab("Sales", jPanel10);

        jPanel7.setLayout(null);

        TableDiscount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDiscount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableDiscountMouseClicked(evt);
            }
        });

        jScrollPane5.setViewportView(TableDiscount);

        jPanel7.add(jScrollPane5);
        jScrollPane5.setBounds(20, 40, 910, 370);

        cmdshowDiscount.setText("Show List");
        cmdshowDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdshowDiscountActionPerformed(evt);
            }
        });

        jPanel7.add(cmdshowDiscount);
        cmdshowDiscount.setBounds(20, 10, 110, 25);

        jPanel7.add(cmbDiscount);
        cmbDiscount.setBounds(260, 10, 160, 24);

        jLabel9.setText("Sort By");
        jPanel7.add(jLabel9);
        jLabel9.setBounds(180, 10, 60, 20);

        jTabbedPane1.addTab("Discount", jPanel7);

        jPanel8.setLayout(null);

        jButton2.setText("Show List");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel8.add(jButton2);
        jButton2.setBounds(20, 10, 110, 25);

        TableTarget.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableTarget.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableTargetMouseClicked(evt);
            }
        });

        jScrollPane6.setViewportView(TableTarget);

        jPanel8.add(jScrollPane6);
        jScrollPane6.setBounds(20, 70, 910, 160);

        TableTargetA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TableTargetA);

        jPanel8.add(jScrollPane7);
        jScrollPane7.setBounds(20, 280, 910, 210);

        jLabel16.setText("Sales Target");
        jPanel8.add(jLabel16);
        jLabel16.setBounds(20, 40, 400, 15);

        jLabel17.setText("Sales Review ");
        jPanel8.add(jLabel17);
        jLabel17.setBounds(20, 250, 420, 15);

        jTabbedPane1.addTab("Target Data", jPanel8);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(6, 129, 960, 530);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Pending Order Form");

        txtpartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpartycodeFocusLost(evt);
            }
        });
        txtpartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtpartycodeKeyPressed(evt);
            }
        });

        getContentPane().add(txtpartycode);
        txtpartycode.setBounds(120, 60, 110, 19);

        txtpartyname.setBackground(new java.awt.Color(204, 204, 204));
        txtpartyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpartynameActionPerformed(evt);
            }
        });

        getContentPane().add(txtpartyname);
        txtpartyname.setBounds(230, 60, 450, 19);

        jLabel6.setText("Press F1  key for Search Party Code");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(30, 35, 230, 15);

        jLabel10.setText("Address");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(30, 80, 70, 20);

        txtaddress2.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtaddress2);
        txtaddress2.setBounds(340, 80, 240, 19);

        txtaddress1.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtaddress1);
        txtaddress1.setBounds(120, 80, 220, 19);

        jLabel13.setText("Charge Ind. ");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(30, 100, 80, 15);

        jLabel14.setText("Transporter Code");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(220, 100, 110, 15);

        txttranscode.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txttranscode);
        txttranscode.setBounds(340, 100, 100, 19);

        jLabel15.setText("Insurance Ind.");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(500, 100, 90, 15);

        txtinsuranceind.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtinsuranceind);
        txtinsuranceind.setBounds(600, 100, 80, 19);

        txtchargeind.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtchargeind);
        txtchargeind.setBounds(120, 100, 80, 19);

        txtstation.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(txtstation);
        txtstation.setBounds(580, 80, 100, 19);

        jButton1.setText("Reset");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(740, 90, 68, 25);

    }//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        txtpartyname.setText("");
        txtpartycode.setText("");
        txtaddress1.setText("");
        txtaddress2.setText("");   
        txtchargeind.setText("");
        txtstation.setText("");   
        txttranscode.setText("");
        txtinsuranceind.setText("");
        txttotal.setText("");
    }//GEN-LAST:event_jButton1MouseClicked

    private void txtpartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpartycodeFocusLost
        // TODO add your handling code here:
         try{
            if(!txtpartycode.getText().equals("")){
                String strSQL="";
                ResultSet rsTmp;
                strSQL= "";
                strSQL+="SELECT NAME,AD1,AD2,STATION,CHG_IND_2,TRANS_CD,INS_IND FROM PRODUCTION.FELT_PARTY_MASTER WHERE PARTY_CODE = "+txtpartycode.getText().trim()+"";
                rsTmp=data.getResult(strSQL);
                rsTmp.first();
                txtpartyname.setText(rsTmp.getString("NAME"));
                txtaddress1.setText(rsTmp.getString("AD1"));
                txtaddress2.setText(rsTmp.getString("AD2"));
                txtstation.setText(rsTmp.getString("STATION"));
                txtchargeind.setText(rsTmp.getString("CHG_IND_2"));
                txttranscode.setText(rsTmp.getString("TRANS_CD"));
                txtinsuranceind.setText(rsTmp.getString("INS_IND"));                
            }
            
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_txtpartycodeFocusLost

    private void cmdshowDivertedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdshowDivertedActionPerformed
        // TODO add your handling code here:
        GenerateDivertedDetail();
    }//GEN-LAST:event_cmdshowDivertedActionPerformed

    private void cmdshowSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdshowSActionPerformed
        // TODO add your handling code here:
        GenerateSalesDetailY();
        GenerateSalesDetailM();
    }//GEN-LAST:event_cmdshowSActionPerformed

    private void TableDiscountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableDiscountMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()>=2) {
            if(TableDiscount.getRowCount()>0) {
                txtRIA.setText((String)TableDiscount.getValueAt(TableDiscount.getSelectedRow(), 2));
                BigEdit bigEdit=new BigEdit();
                bigEdit.theText=txtRIA;
                bigEdit.ShowEdit();
            }
        }
    }//GEN-LAST:event_TableDiscountMouseClicked

    private void TableTargetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableTargetMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()>=2) {
            if(TableTarget.getRowCount()>0) {
                txtRIA.setText((String)TableTarget.getValueAt(TableTarget.getSelectedRow(), 7));
                BigEdit bigEdit=new BigEdit();
                bigEdit.theText=txtRIA;
                bigEdit.ShowEdit();
            }
        }
    }//GEN-LAST:event_TableTargetMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        GenerateTargetDetail();
        GenerateTargetDetailA();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TableDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableDMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()>=2) {
            if(TableD.getRowCount()>0) {
                txtRIA.setText((String)TableD.getValueAt(TableD.getSelectedRow(), 7));
                BigEdit bigEdit=new BigEdit();
                bigEdit.theText=txtRIA;
                bigEdit.ShowEdit();
            }
        }
    }//GEN-LAST:event_TableDMouseClicked

    private void cmdshowDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdshowDiscountActionPerformed
        // TODO add your handling code here:
        //show Discount Detail
        GenerateDiscountDetail();
    }//GEN-LAST:event_cmdshowDiscountActionPerformed

    private void TableUMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableUMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()>=2) {
            if(TableU.getRowCount()>0) {
                txtRIA.setText((String)TableU.getValueAt(TableU.getSelectedRow(), 1));
                BigEdit bigEdit=new BigEdit();
                bigEdit.theText=txtRIA;
                bigEdit.ShowEdit();
            }
        }
    }//GEN-LAST:event_TableUMouseClicked

    private void cmdshowDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdshowDActionPerformed
        // TODO add your handling code here:
        //Generate despatch table from invoice table
        GenerateInvoice();
    }//GEN-LAST:event_cmdshowDActionPerformed

    private void txtpartynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpartynameActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtpartynameActionPerformed

    private void txtpartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpartycodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT PARTY_CODE,NAME FROM PRODUCTION.FELT_PARTY_MASTER ORDER BY NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtpartycode.setText(aList.ReturnVal);
                txtpartyname.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
                
        }
        }
    }//GEN-LAST:event_txtpartycodeKeyPressed
                
    private void cmdPreviewUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewUActionPerformed
     // TODO add your handling code here:
     //int BuyerID=EITLERPGLOBAL.getComboCode(cmbBuyer);
  // int BuyerID=EITLERPGLOBAL.getComboCode(cmbBuyer);
   //String BuyerName=(String)cmbBuyer.getSelectedItem();
        String strOrderby="";
        ResultSet rsIndent,rsTmp;
        
        int Orderby=EITLERPGLOBAL.getComboCode(cmbOrder);
        
        
        
        if(Orderby==1) {
            strOrderby=" ORDER BY INDENT_NO,INDENT_DATE ";
        }
        
        if(Orderby==2) {
            strOrderby=" ORDER BY INDENT_NO,APPROVED_DATE ";
        }
        
        if(Orderby==3) {
            strOrderby=" ORDER BY INDENT_NO ";
        }
        
        try {
            //Update the Indents for reference document //
            for(int i=0;i<=TableI.getRowCount()-1;i++) {
                String IndentNo=(String)TableI.getValueAt(i, 2);
                String RefDoc=(String)TableI.getValueAt(i, 7);
                
                rsIndent=data.getResult("SELECT * FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                rsIndent.first();
                
                if(rsIndent.getRow()>0) {
                    while(!rsIndent.isAfterLast()) {
                        int SrNo=rsIndent.getInt("SR_NO");
                        
                        RefDoc="";
                        
                        if(IndentNo.equals("022870")) {
                            int a=0;
                        }
                        
                        //====Inquiries ======//
                        rsTmp=data.getResult("SELECT DISTINCT(INQUIRY_NO) FROM D_PUR_INQUIRY_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND INDENT_SRNO="+SrNo);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            RefDoc="Inquiries : ";
                            
                            while(!rsTmp.isAfterLast()) {
                                RefDoc+=rsTmp.getString("INQUIRY_NO")+",";
                                rsTmp.next();
                            }
                        }
                        //====================//
                        
                        //========== RIA ==============//
                        String RIA=clsRateApproval.getRIANo(EITLERPGLOBAL.gCompanyID,IndentNo,SrNo);
                        
                        if(!RIA.trim().equals("")) {
                            RefDoc+=" RIA : "+RIA;
                        }
                        //============================//
                        
                        
                        //==========POs========//
                        rsTmp=data.getResult("SELECT DISTINCT(PO_NO) FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND INDENT_SR_NO="+SrNo);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            RefDoc+=" PO : ";
                            
                            while(!rsTmp.isAfterLast()) {
                                RefDoc+=rsTmp.getString("PO_NO")+",";
                                rsTmp.next();
                            }
                        }
                        //======================//
                        
                        
                        data.Execute("UPDATE D_INV_INDENT_DETAIL SET REF_DOC='"+RefDoc+"' WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND SR_NO="+SrNo);
                        
                        rsIndent.next();
                    }
                }
                          
                
            }
        }
        catch(Exception e) {
            
        }
        
        try {
            //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptPendingIndents2.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&BUYER="+BuyerID+"&BUYER_NAME="+BuyerName+"&ORDERBY="+strOrderby);
           // EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
  
    }//GEN-LAST:event_cmdPreviewUActionPerformed
    
    /**
     *
     */    
    private void TableIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableIMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()>=2) {
            if(TableI.getRowCount()>0) {
            txtRIA.setText((String)TableI.getValueAt(TableI.getSelectedRow(), 6));
                BigEdit bigEdit=new BigEdit();
                bigEdit.theText=txtRIA;
                bigEdit.ShowEdit();
            }
        }
    }//GEN-LAST:event_TableIMouseClicked
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
     //int BuyerID=EITLERPGLOBAL.getComboCode(cmbBuyer);
      // String BuyerName=(String)cmbBuyer.getSelectedItem();
        String strOrderby="";
        ResultSet rsIndent,rsTmp;
        
        int Orderby=EITLERPGLOBAL.getComboCode(cmbOrder);
        
        
        
        if(Orderby==1) {
            strOrderby=" ORDER BY INDENT_NO,INDENT_DATE ";
        }
        
        if(Orderby==2) {
            strOrderby=" ORDER BY INDENT_NO,APPROVED_DATE ";
        }
        
        if(Orderby==3) {
            strOrderby=" ORDER BY INDENT_NO ";
        }
        
        try {
            //Update the Indents for reference document //
            for(int i=0;i<=TableI.getRowCount()-1;i++) {
                String IndentNo=(String)TableI.getValueAt(i, 2);
                String RefDoc=(String)TableI.getValueAt(i, 7);
                
                rsIndent=data.getResult("SELECT * FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                rsIndent.first();
                
                if(rsIndent.getRow()>0) {
                    while(!rsIndent.isAfterLast()) {
                        int SrNo=rsIndent.getInt("SR_NO");
                        
                        RefDoc="";
                        
                        if(IndentNo.equals("022870")) {
                            int a=0;
                        }
                        
                        //====Inquiries ======//
                        rsTmp=data.getResult("SELECT DISTINCT(INQUIRY_NO) FROM D_PUR_INQUIRY_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND INDENT_SRNO="+SrNo);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            RefDoc="Inquiries : ";
                            
                            while(!rsTmp.isAfterLast()) {
                                RefDoc+=rsTmp.getString("INQUIRY_NO")+",";
                                rsTmp.next();
                            }
                        }
                        //====================//
                        
                        //========== RIA ==============//
                        String RIA=clsRateApproval.getRIANo(EITLERPGLOBAL.gCompanyID,IndentNo,SrNo);
                        
                        if(!RIA.trim().equals("")) {
                            RefDoc+=" RIA : "+RIA;
                        }
                        //============================//
                        
                        
                        //==========POs========//
                        rsTmp=data.getResult("SELECT DISTINCT(PO_NO) FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND INDENT_SR_NO="+SrNo);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            RefDoc+=" PO : ";
                            
                            while(!rsTmp.isAfterLast()) {
                                RefDoc+=rsTmp.getString("PO_NO")+",";
                                rsTmp.next();
                            }
                        }
                        //======================//
                        
                        
                        data.Execute("UPDATE D_INV_INDENT_DETAIL SET REF_DOC='"+RefDoc+"' WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND SR_NO="+SrNo);
                        
                        rsIndent.next();
                    }
                }              
            }
        }
        catch(Exception e) {
            
        }
        
        
        try {
            //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptPendingIndents.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&BUYER="+BuyerID+"&BUYER_NAME="+BuyerName+"&ORDERBY="+strOrderby);
           // EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
   
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdOpenUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenUActionPerformed
        // TODO add your handling code here:
       try {
         /* String DocNo=(String)TableU.getValueAt(TableU.getSelectedRow(), 2);
            AppletFrame aFrame=new AppletFrame("Indent");
            aFrame.startAppletEx("EITLERP.Stores.FrmIndent","Indent");
            FrmIndent ObjDoc=(FrmIndent) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo); 
          */  
         String PieceNo =(String)TableU.getValueAt(TableU.getSelectedRow(), 1);
         String PartyCode = txtpartycode.getText().toString();        
         System.out.println(PartyCode);
         System.out.println(PieceNo);
         AppletFrame aFrame = new AppletFrame("ORDER");
         //aFrame.startAppletEx("EITLERP.Production.ReportUI.frmOrder","ORDER");
         aFrame.startAppletEx("EITLERP.Production.ReportUI.frmfeltOrder","Order");
         frmfeltOrder ObjDoc1=(frmfeltOrder) aFrame.ObjApplet;
         //frmOrder ObjDoc = (frmOrder) aFrame.ObjApplet;       
         //ObjDoc.FindEx(PartyCode,PieceNo);
         //ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,PieceNo);
         ObjDoc1.FindEx((int)EITLERPGLOBAL.gCompanyID,PartyCode,PieceNo);
                  
        }
        catch(Exception e) {
            
        } 
    }//GEN-LAST:event_cmdOpenUActionPerformed
    
    private void cmdShowUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowUActionPerformed
        // TODO add your handling code here:
        //STOCK AVAILABLE SHOW LIST
        GenerateUnapprovedIndents();
    }//GEN-LAST:event_cmdShowUActionPerformed
    
    private void cmdOpenIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenIActionPerformed
        // TODO add your handling code here:
  try{
         String PieceNo =(String)TableI.getValueAt(TableI.getSelectedRow(), 6);
         String PartyCode = txtpartycode.getText().toString();        
         System.out.println(PartyCode);
         System.out.println(PieceNo);
         //String a = "test";
         //System.out.println(a); 
         //System.out.println(PieceNo); 
         //System.out.println(PartyCode);
         AppletFrame aFrame = new AppletFrame("ORDER");
         //aFrame.startAppletEx("EITLERP.Production.ReportUI.frmOrder","ORDER");
         aFrame.startAppletEx("EITLERP.Production.ReportUI.frmfeltOrder","Order");
         frmfeltOrder ObjDoc=(frmfeltOrder) aFrame.ObjApplet;
         //frmOrder ObjDoc = (frmOrder) aFrame.ObjApplet;       
         //ObjDoc.FindEx(PartyCode,PieceNo);
         //ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,PieceNo);
         ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,PartyCode,PieceNo);
         
      }
  /* try {
            String DocNo=(String)TableI.getValueAt(TableI.getSelectedRow(), 2);
            AppletFrame aFrame=new AppletFrame("Indent");
            aFrame.startAppletEx("EITLERP.Stores.FrmIndent","Indent");
            FrmIndent ObjDoc=(FrmIndent) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);            
      }*/
        catch(Exception e) {
                 
        } 
    }//GEN-LAST:event_cmdOpenIActionPerformed
    
    private void cmdShowIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowIActionPerformed
        // TODO add your handling code here:
        //PRODUCTION PROCESS SHOW LIST
        GeneratePendingIndents(); 
    }//GEN-LAST:event_cmdShowIActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableD;
    private javax.swing.JTable TableDiscount;
    private javax.swing.JTable TableDiverted;
    private javax.swing.JTable TableI;
    private javax.swing.JTable TableSalesM;
    private javax.swing.JTable TableSalesY;
    private javax.swing.JTable TableTarget;
    private javax.swing.JTable TableTargetA;
    private javax.swing.JTable TableU;
    private javax.swing.JComboBox cmbDespatch;
    private javax.swing.JComboBox cmbDiscount;
    private javax.swing.JComboBox cmbOrder;
    private javax.swing.JComboBox cmbStock;
    private javax.swing.JButton cmdOpenI;
    private javax.swing.JButton cmdOpenU;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewU;
    private javax.swing.JButton cmdShowI;
    private javax.swing.JButton cmdShowU;
    private javax.swing.JButton cmdshowD;
    private javax.swing.JButton cmdshowDiscount;
    private javax.swing.JButton cmdshowDiverted;
    private javax.swing.JButton cmdshowS;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtRIA;
    private javax.swing.JTextField txtaddress1;
    private javax.swing.JTextField txtaddress2;
    private javax.swing.JTextField txtchargeind;
    private javax.swing.JTextField txtinsuranceind;
    private javax.swing.JTextField txtpartycode;
    private javax.swing.JTextField txtpartyname;
    private javax.swing.JTextField txtstation;
    private javax.swing.JTextField txttotal;
    private javax.swing.JTextField txttranscode;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateCombo() {
      cmbBuyerModel=new EITLComboModel();
        //cmbBuyer.removeAllItems();
        //cmbBuyer.setModel(cmbBuyerModel);
        
        HashMap List=new HashMap();
        List=(new clsUser()).getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser)List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int)ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            cmbBuyerModel.addElement(aData);
        }
        //PRODUCTION PROCESS COMBO
        cmbOrderModel=new EITLComboModel();
        cmbOrder.removeAllItems();
        cmbOrder.setModel(cmbOrderModel);
        ComboData aData=new ComboData();
        aData.Code=1;
        aData.Text = "Ref No";
        cmbOrderModel.addElement(aData);
       
        aData=new ComboData();
        aData.Code=2;
        aData.Text = "Conf No";
        cmbOrderModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text = "Machine No";
        cmbOrderModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code=4;
        aData.Text ="Position";
        cmbOrderModel.addElement(aData);
        
         aData = new ComboData();
        aData.Code=5;
        aData.Text ="Order Date";
        cmbOrderModel.addElement(aData);
        
         aData = new ComboData();
        aData.Code=6;
        aData.Text ="Piece No";
        cmbOrderModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code=7;
        aData.Text="Priority";
        cmbOrderModel.addElement(aData);
       
        //STOCK COMBO
        cmbStockModel = new EITLComboModel();
        cmbStock.removeAllItems();
        cmbStock.setModel(cmbStockModel);
        
        aData = new ComboData();
        aData.Code=1;
        aData.Text ="Received Date";
        cmbStockModel.addElement(aData);
        
        aData = new ComboData();
        aData.Code=2;
        aData.Text ="Priority";
        cmbStockModel.addElement(aData);
        
        //DESPATCH COMBO
        cmbDespatchModel = new EITLComboModel();
        cmbDespatch.removeAllItems();
        cmbDespatch.setModel(cmbDespatchModel);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text = "Invoice Date";
        cmbDespatchModel.addElement(aData);
        
        //DISCOUNT COMBO
        cmbDiscountModel = new EITLComboModel();
        cmbDiscount.removeAllItems();
        cmbDiscount.setModel(cmbDiscountModel);
        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "Memo Date";
        cmbDiscountModel.addElement(aData);
        
        //SEAM COMBO
        cmbSeamModel = new EITLComboModel();
       // cmbSeam.removeAllItems();
        //cmbSeam.setModel(cmbSeamModel);
        aData = new ComboData();
        aData.Code = 1;
        aData.Text = "Piece No";
        cmbSeamModel.addElement(aData);
        
        
        //
        cmbApprovalModel=new EITLComboModel();
   //     cmbApproval.removeAllItems();
   //     cmbApproval.setModel(cmbApprovalModel);
        
        aData=new ComboData();
        aData.Code=1;
        aData.Text="Approved Indents";
        cmbApprovalModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=0;
        aData.Text="UnApproved Indents";
        cmbApprovalModel.addElement(aData);
        
        
        cmbDeptModel=new EITLComboModel();
 //       cmbDept.removeAllItems();
    //    cmbDept.setModel(cmbDeptModel);
       
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String) ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbDeptModel.addElement(aData);
        }       
    }
    
    
    private void FormatGridI() {
     DataModelI=new EITLTableModel();
        TableI.removeAll();
      TableI.setModel(DataModelI);
        
        TableI.setAutoResizeMode(TableI.AUTO_RESIZE_OFF);
     
        DataModelI.addColumn("Sr.");
        DataModelI.addColumn("Priority");
        DataModelI.addColumn("Ref No");
        DataModelI.addColumn("Conf No");
        DataModelI.addColumn("Machine No");
        DataModelI.addColumn("Position");    
        DataModelI.addColumn("Piece No");
        DataModelI.addColumn("Party Code");
        DataModelI.addColumn("Order Date");
        DataModelI.addColumn("Product Code");
        DataModelI.addColumn("Item");
        DataModelI.addColumn("Style");
        DataModelI.addColumn("Length");
        DataModelI.addColumn("Width");
        DataModelI.addColumn("Weight");
        DataModelI.addColumn("Rate");
        DataModelI.addColumn("Delivery Date");
        DataModelI.addColumn("Comm Date");
        DataModelI.addColumn("INS IND");
        DataModelI.addColumn("Bas Amt");
        DataModelI.addColumn("Memo Date");
        DataModelI.addColumn("Discount Per");
        DataModelI.addColumn("Dis Amt");
        DataModelI.addColumn("Dis Bas Amt");
        DataModelI.addColumn("Excise");
        DataModelI.addColumn("Seam Charge");
        DataModelI.addColumn("Insacc Amt");
        DataModelI.addColumn("Inv Amt");
        
        DataModelI.TableReadOnly(true);       
    }
    
    
    private void FormatGridU() {
       DataModelU=new EITLTableModel();
        TableU.removeAll();
        TableU.setModel(DataModelU);
        
        TableU.setAutoResizeMode(TableI.AUTO_RESIZE_OFF);
        DataModelU.addColumn("Sr.");
        DataModelU.addColumn("Prioriy");
        DataModelU.addColumn("Piece No");
        DataModelU.addColumn("Order Date");
        DataModelU.addColumn("Rcvd Date");
        DataModelU.addColumn("Deliv Date ");
        DataModelU.addColumn("Comm Mtr");
        DataModelU.addColumn("Product Code");
        DataModelU.addColumn("Item");
        DataModelU.addColumn("Style");
        DataModelU.addColumn("Mtrs Order");
        DataModelU.addColumn("Mtrs Rcvd");
        DataModelU.addColumn("Width Order");
        DataModelU.addColumn("Width Rcvd");
        DataModelU.addColumn("Kg Calc");
        DataModelU.addColumn("Kg Rcvd");
        DataModelU.addColumn("Rate");
        DataModelU.addColumn("Bas Amt");
        DataModelU.addColumn("Memo Date");
        DataModelU.addColumn("Disc Per");
        DataModelU.addColumn("Disc Amt");
        DataModelU.addColumn("Disc BasAmt");
        DataModelU.addColumn("Excise");
        DataModelU.addColumn("Seam Chg");
        DataModelU.addColumn("Inscc Amt");
        DataModelU.addColumn("Inv Amt");
        DataModelU.addColumn("Ref No");
        DataModelU.addColumn("Conf No");
        DataModelU.addColumn("Machine No");
        DataModelU.addColumn("Position");
        DataModelU.addColumn("Party Code");
        DataModelU.addColumn("Ins Ind");
        DataModelU.TableReadOnly(true); 
        
    }
    
    private void FormatGridD() {
       DataModelD=new EITLTableModel();
        TableD.removeAll();
        TableD.setModel(DataModelD);
        
        TableD.setAutoResizeMode(TableI.AUTO_RESIZE_OFF);
        DataModelD.addColumn("Sr.");
        DataModelD.addColumn("Invoice No");
        DataModelD.addColumn("Invoice Date");
        DataModelD.addColumn("Quality No");
        DataModelD.addColumn("Piece No");
        DataModelD.addColumn("Lenght");
        DataModelD.addColumn("Width");
        DataModelD.addColumn("Order Detail");
        DataModelD.addColumn("Order Date");
        DataModelD.addColumn("Total Gross");
        DataModelD.addColumn("Total Net Amt");
        DataModelD.addColumn("Gross Square Mtr");
        DataModelD.addColumn("Gross Kg");
        DataModelD.addColumn("Gross Amt");
        DataModelD.addColumn("Net Amt");
        
        DataModelD.TableReadOnly(true); 
        
    }
    
     private void FormatGridDiscount(){
        DataModelDiscount =new EITLTableModel();
        TableDiscount.removeAll();
        TableDiscount.setModel(DataModelDiscount);
        
        TableDiscount.setAutoResizeMode(TableDiscount.AUTO_RESIZE_OFF);
        DataModelDiscount.addColumn("Sr.");
        DataModelDiscount.addColumn("Piece No");
        DataModelDiscount.addColumn("Discount Per");
        DataModelDiscount.addColumn("Memo Date");
        DataModelDiscount.TableReadOnly(true); 
         
     }
    
     private void FormatGridTarget(){
        DataModelTarget =new EITLTableModel();
        TableTarget.removeAll();
        TableTarget.setModel(DataModelTarget);
        
        TableTarget.setAutoResizeMode(TableTarget.AUTO_RESIZE_OFF);
        DataModelTarget.addColumn("Sr.");
        DataModelTarget.addColumn("TGT FY Yr");
        DataModelTarget.addColumn("TGT From Date");
        DataModelTarget.addColumn("TGT To Date");
        DataModelTarget.addColumn("TGT QTR 1");
        DataModelTarget.addColumn("TGT QTR 2");
        DataModelTarget.addColumn("TGT QTR 3");
        DataModelTarget.addColumn("TGT QTR 4");
        DataModelTarget.addColumn("Total TGT");
        DataModelTarget.TableReadOnly(true); 
     }
     
     private void FormatGridTargetA(){
        DataModelTargetA =new EITLTableModel();
        TableTargetA.removeAll();
        TableTargetA.setModel(DataModelTargetA);
        
        TableTargetA.setAutoResizeMode(TableTargetA.AUTO_RESIZE_OFF);
        DataModelTargetA.addColumn("Sr.");
        DataModelTargetA.addColumn("Zone");
        DataModelTargetA.addColumn("Party Code");
        DataModelTargetA.addColumn("Name");
        DataModelTargetA.addColumn("Sales 2011-12");
        DataModelTargetA.addColumn("Sales 2012-13");
        DataModelTargetA.addColumn("Sales 12-13 Q1");
        DataModelTargetA.addColumn("Sales 12-13 Q2");
        DataModelTargetA.addColumn("Sales 12-13 Q3");
        DataModelTargetA.addColumn("Sales 12-13 Q4");
        DataModelTargetA.addColumn("Stock");
        DataModelTargetA.addColumn("Pending");
        DataModelTargetA.addColumn("Total");
        DataModelTargetA.addColumn("Target");
        DataModelTargetA.addColumn("% Achieved");
        DataModelTargetA.addColumn("Sale %");
        DataModelTargetA.addColumn("% Q1");
        DataModelTargetA.addColumn("% Q2");
        DataModelTargetA.addColumn("% Q1Q2");
        DataModelTargetA.addColumn("% Q3");
        DataModelTargetA.addColumn("% Q1Q2Q3");
        DataModelTargetA.addColumn("% Q4");
        DataModelTargetA.TableReadOnly(true); 
     }
     
     
       
     private void FormatGridMisc(){
         DataModelMisc = new EITLTableModel();
      //   TableMisc.removeAll();
       //  TableMisc.setModel(DataModelMisc);
         
       // TableMisc.setAutoResizeMode(TableMisc.AUTO_RESIZE_OFF);
        DataModelMisc.addColumn("Sr.");
        DataModelMisc.addColumn("Piece No");
        DataModelMisc.addColumn("Type");
        DataModelMisc.addColumn("Entry Date");
        DataModelMisc.addColumn("Expected Date");
        DataModelMisc.addColumn("Item Code");
        DataModelMisc.TableReadOnly(true); 
     }
     
     
     private void FormatGridSeam(){
         
         DataModelSeam = new EITLTableModel();
   //      TableSeam.removeAll();
    //     TableSeam.setModel(DataModelSeam);
         
     //   TableSeam.setAutoResizeMode(TableSeam.AUTO_RESIZE_OFF);
        DataModelSeam.addColumn("Sr.");
        DataModelSeam.addColumn("Item Code");
        DataModelSeam.addColumn("Piece No");
        DataModelSeam.addColumn("Seam Charge");
        DataModelSeam.TableReadOnly(true);
         
     }
     
     private void FormatGridSalesY(){
       DataModelSalesY = new EITLTableModel();
       TableSalesY.removeAll();
       TableSalesY.setModel(DataModelSalesY);
         
        TableSalesY.setAutoResizeMode(TableSalesY.AUTO_RESIZE_OFF);
        DataModelSalesY.addColumn("Sr.");
        DataModelSalesY.addColumn("Party Code");
        DataModelSalesY.addColumn("Fin Year");
        DataModelSalesY.addColumn("Total(lacs)");
        DataModelSalesY.TableReadOnly(true);
                  
     }
     
     private void FormatGridSalesM(){
       DataModelSalesM = new EITLTableModel();
       TableSalesM.removeAll();
       TableSalesM.setModel(DataModelSalesM);
         
        TableSalesM.setAutoResizeMode(TableSalesM.AUTO_RESIZE_OFF);
        DataModelSalesM.addColumn("Sr.");
        DataModelSalesM.addColumn("Party Code");
        DataModelSalesM.addColumn("Fin Year");
        DataModelSalesM.addColumn("Apr");
        DataModelSalesM.addColumn("May");
        DataModelSalesM.addColumn("Jun");
        DataModelSalesM.addColumn("Jul");
        DataModelSalesM.addColumn("Aug");
        DataModelSalesM.addColumn("Sep");
        DataModelSalesM.addColumn("Oct");
        DataModelSalesM.addColumn("Nov");
        DataModelSalesM.addColumn("Dec");
         DataModelSalesM.addColumn("Jan");
        DataModelSalesM.addColumn("Feb");
        DataModelSalesM.addColumn("Mar");
        DataModelSalesM.addColumn("Total");      
        DataModelSalesM.TableReadOnly(true);
     }
     
     private void ForamtGridDiverted(){
         
      DataModelDiverted=new EITLTableModel();
      TableDiverted.removeAll();
      TableDiverted.setModel(DataModelDiverted);
        
      TableDiverted.setAutoResizeMode(TableDiverted.AUTO_RESIZE_OFF);
     
        DataModelDiverted.addColumn("Sr.");
        DataModelDiverted.addColumn("Piece No");
        DataModelDiverted.addColumn("Party Original");
        DataModelDiverted.addColumn("Name Original");
        DataModelDiverted.addColumn("Party Invoiced");    
        DataModelDiverted.addColumn("Name Diverted");
        DataModelDiverted.addColumn("Product Code");
        DataModelDiverted.addColumn("Item");
        DataModelDiverted.addColumn("Style");
        DataModelDiverted.addColumn("Order Date");
        DataModelDiverted.addColumn("Delivery Date");
        DataModelDiverted.addColumn("Comm Date");
        DataModelDiverted.addColumn("Rcvd Date");
        DataModelDiverted.addColumn("Mtrs Order");
        DataModelDiverted.addColumn("Mtrs Rcvd");
        DataModelDiverted.addColumn("Width Order");
        DataModelDiverted.addColumn("Width Rcvd");
        
        
        DataModelDiverted.addColumn("Weight Rcvd");
        DataModelDiverted.addColumn("Weight Invoiced");
        DataModelDiverted.addColumn("Rate");
        DataModelDiverted.addColumn("Pack Date");
        DataModelDiverted.addColumn("Bale No");
        DataModelDiverted.addColumn("Memo Date");
        DataModelDiverted.addColumn("Disc Per");
        DataModelDiverted.addColumn("Invoice No");
        DataModelDiverted.addColumn("Invoice Date");
        DataModelDiverted.addColumn("Total Gross");
        DataModelDiverted.addColumn("Trd Discount");
        DataModelDiverted.addColumn("Invoice Amount");
        DataModelDiverted.addColumn("Ref No");
        DataModelDiverted.addColumn("Conf No");
        DataModelDiverted.addColumn("Machine No");
        DataModelDiverted.addColumn("Position");
        
        
        DataModelDiverted.TableReadOnly(true);  
         
     }
     
     
    private void GeneratePendingIndents() {
      String SelUserID="";
      String strSQL="";
        try{
          FormatGridI(); //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          //rsTmp=data.getResult("SELECT PIECE_NO FROM FELT_ORDER_MASTER WHERE PARTY_CD="+SelUserID+"");
        strSQL="";
        //strSQL+="SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,(SQM_RATE+WT_RATE) AS RATE,DELIV_DATE ,COMM_DATE, INS_IND,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,ROUND(EXCISE,2) AS EXCISE,WPSC AS SEAM_CHG,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  +(CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END) ,2) AS INV_AMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE    FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,MEMO_DATE,DELIV_DATE ,COMM_DATE,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE,CASE WHEN SQM_IND =1 THEN LNGTH * WIDTH*SQM_RATE WHEN SQM_IND =0 THEN WEIGHT * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN WEIGHT*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN WIDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN WIDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC FROM PRODUCTION.FELT_ORDER_MASTER,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER WHERE PRODUCT_CODE*10 = ITEM_CODE AND PARTY_CD = "+SelUserID+" AND PARTY_CD = PARTY_CODE AND PROD_IND_A IN ('') ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C";
        strSQL+="SELECT CASE WHEN PRIORITY=1 THEN 'LOW' WHEN PRIORITY=2 THEN 'MEDIUM' WHEN PRIORITY=3 THEN 'HIGH' END AS PRIOR,REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,(SQM_RATE+WT_RATE) AS RATE,DELIV_DATE ,COMM_DATE, INS_IND,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,ROUND(EXCISE,2) AS EXCISE,WPSC AS SEAM_CHG,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  +(CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END) ,2) AS INV_AMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE,PRIORITY FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,MEMO_DATE,DELIV_DATE ,COMM_DATE,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT,PRIORITY FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE,CASE WHEN SQM_IND =1 THEN LNGTH * WIDTH*SQM_RATE WHEN SQM_IND =0 THEN WEIGHT * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN WEIGHT*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN WIDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN WIDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC,PRIORITY FROM PRODUCTION.FELT_ORDER_MASTER,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER WHERE PRODUCT_CODE*10 = ITEM_CODE AND PARTY_CD = "+SelUserID+" AND PARTY_CD = PARTY_CODE AND PROD_IND_A IN ('') ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C";
        //strSQL+="SELECT CASE WHEN PRIORITY=1 THEN 'LOW' WHEN PRIORITY=2 THEN 'MEDIUM' WHEN PRIORITY=3 THEN 'HIGH' END AS PRIORITY,REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,(SQM_RATE+WT_RATE) AS RATE,DELIV_DATE ,COMM_DATE, INS_IND,BAS_AMT,MEMO_DATE,DISC_PER,DISAMT,DISBASAMT,ROUND(EXCISE,2) AS EXCISE,WPSC AS SEAM_CHG,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  +(CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END) ,2) AS INV_AMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,MEMO_DATE,DELIV_DATE ,COMM_DATE,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE,CASE WHEN SQM_IND =1 THEN LNGTH * WIDTH*SQM_RATE WHEN SQM_IND =0 THEN WEIGHT * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN WEIGHT*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN WIDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN WIDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC FROM PRODUCTION.FELT_ORDER_MASTER,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER WHERE PRODUCT_CODE*10 = ITEM_CODE AND PARTY_CD = "+SelUserID+" AND PARTY_CD = PARTY_CODE AND PROD_IND_A IN ('') ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C"; 
        int Orderby=EITLERPGLOBAL.getComboCode(cmbOrder);
            
            if(Orderby==1) {
                strSQL=strSQL+" ORDER BY REF_NO ";
            }
            
            if(Orderby==2) {
                strSQL=strSQL+" ORDER BY CONF_NO ";
            }
            
            if(Orderby==3) {
                strSQL=strSQL+" ORDER BY MACHINE_NO ";
            }
         
            if(Orderby==4){
                strSQL=strSQL+" ORDER BY POSITION ";
            }
         
         if(Orderby==5){
                strSQL=strSQL+" ORDER BY ORDER_DATE DESC ";
            }
         
         if(Orderby==6){
                strSQL=strSQL+" ORDER BY PIECE_NO ";
            }
        if(Orderby==7){
                strSQL=strSQL+" ORDER BY PRIORITY DESC ";
            }
         
    
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                   cnt++; 
                    
                 Object[] rowData=new Object[28];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("PRIOR");
                    rowData[2]=rsTmp.getString("REF_NO");
                    rowData[3]=rsTmp.getString("CONF_NO");
                    rowData[4]=rsTmp.getString("MACHINE_NO");
                    rowData[5]=rsTmp.getString("POSITION");
                    rowData[6]=rsTmp.getString("PIECE_NO");
                    rowData[7]=rsTmp.getString("PARTY_CD");
                    rowData[8]=EITLERPGLOBAL.formatDate(rsTmp.getString("ORDER_DATE"));
                    rowData[9]=rsTmp.getString("PRODUCT_CODE");
                    rowData[10]=rsTmp.getString("ITEM");
                    rowData[11]=rsTmp.getString("STYLE");
                    rowData[12]=rsTmp.getString("LNGTH");
                    rowData[13]=rsTmp.getString("WIDTH");
                    rowData[14]=rsTmp.getString("WEIGHT");
                    rowData[15]=rsTmp.getString("RATE");
                    rowData[16]=EITLERPGLOBAL.formatDate(rsTmp.getString("DELIV_DATE"));
                    rowData[17]=EITLERPGLOBAL.formatDate(rsTmp.getString("COMM_DATE"));
                    rowData[18]=rsTmp.getString("INS_IND");
                    rowData[19]=rsTmp.getString("BAS_AMT");
                    rowData[20]=EITLERPGLOBAL.formatDate(rsTmp.getString("MEMO_DATE"));
                    rowData[21]=rsTmp.getString("DISC_PER");
                    rowData[22]=rsTmp.getString("DISAMT");
                    rowData[23]=rsTmp.getString("DISBASAMT");
                    rowData[24]=rsTmp.getString("EXCISE");
                    rowData[25]=rsTmp.getString("SEAM_CHG");
                    rowData[26]=rsTmp.getString("INSACC_AMT");
                    rowData[27]=rsTmp.getString("INV_AMT");
                    //rowData[3]=rsTmp.getString("ORDER_DATE");
                    //rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("ORDER_DATE"));
                    //rowData[10]=rsTmp.getString("GSQ");
                    //rowData[7]=rsTmp.getString("BALNK");
                    DataModelI.addRow(rowData);
              //   System.out.println("rsTmp.getString('PIECE_NO')");
                    rsTmp.next();
                }
         }
       }
      catch(Exception e){
         e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage()); 
      }
   
        
     /*   
     int DeptID=0;
        int SelUserID=0;
        String strSQL="";
        String strRIA="";
        
        try {
            
            FormatGridI(); //clear existing content of table
            SelUserID=EITLERPGLOBAL.getComboCode(cmbBuyer);
            
            //Check if this user is HOD of the department
            ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
            //rsTmp=data.getResult("SELECT CREATED_BY,INDENT_NO,INDENT_DATE,FOR_DEPT_ID FROM D_INV_INDENT_HEADER WHERE APPROVED=1 AND CANCELED=0 AND INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_DETAIL WHERE PO_QTY<QTY) AND FOR_DEPT_ID IN (SELECT DEPT_ID FROM D_COM_DEPT_BUYERS WHERE BUYER="+SelUserID+")");
            
            //New Logic with Item Code
            strSQL="";
            
            //Old Original Query
            strSQL=strSQL+" SELECT A.INDENT_NO,A.INDENT_DATE AS INDENT_DATE,A.FOR_DEPT_ID,A.CREATED_BY,A.APPROVED_DATE AS APPROVED_DATE FROM ";
            strSQL=strSQL+" D_INV_INDENT_HEADER A, ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL B ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=B.INDENT_NO AND ";
            strSQL=strSQL+" A.APPROVED=1 AND ";
            strSQL=strSQL+" A.CANCELED=0 AND ";
            strSQL=strSQL+" A.FOR_DEPT_ID IN (SELECT DEPT_ID FROM D_COM_DEPT_BUYERS WHERE BUYER="+SelUserID+")  AND ";
            strSQL=strSQL+" B.PO_QTY<B.QTY AND ";
            
            strSQL=strSQL+" A.INDENT_NO NOT IN ( ";
            strSQL=strSQL+" SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO FROM ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=1 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER<>"+SelUserID+" AND ";
            strSQL=strSQL+" B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C, ";
            strSQL=strSQL+" D_INV_ITEM_MASTER D ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=1 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER<>"+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_CLASS<>'' AND ";
            strSQL=strSQL+" A.ITEM_CODE=D.ITEM_ID AND D.CANCELLED=0 AND ";
            strSQL=strSQL+" D.ABC=B.ITEM_CLASS ) ";
            
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY,C.APPROVED_DATE AS APPROVED_DATE FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=1 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER="+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY,C.APPROVED_DATE AS APPROVED_DATE FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C, ";
            strSQL=strSQL+" D_INV_ITEM_MASTER D ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=1 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER="+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_CLASS<>'' AND ";
            strSQL=strSQL+" A.ITEM_CODE=D.ITEM_ID AND D.CANCELLED=0 AND ";
            strSQL=strSQL+" D.ABC=B.ITEM_CLASS  ";

            
            /*strSQL=strSQL+" SELECT A.INDENT_NO,A.INDENT_DATE AS INDENT_DATE,A.FOR_DEPT_ID,A.CREATED_BY,A.APPROVED_DATE AS APPROVED_DATE FROM ";
            strSQL=strSQL+" D_INV_INDENT_HEADER A, ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL B ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=B.INDENT_NO AND ";
            strSQL=strSQL+" A.APPROVED=1 AND ";
            strSQL=strSQL+" A.CANCELED=0 AND ";
            strSQL=strSQL+" A.FOR_DEPT_ID IN (SELECT DEPT_ID FROM D_COM_DEPT_BUYERS WHERE BUYER="+SelUserID+")  AND ";
            strSQL=strSQL+" B.PO_QTY<B.QTY ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY,C.APPROVED_DATE AS APPROVED_DATE FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=1 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER="+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY,C.APPROVED_DATE AS APPROVED_DATE FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C, ";
            strSQL=strSQL+" D_INV_ITEM_MASTER D ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=1 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER="+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_CLASS<>'' AND ";
            strSQL=strSQL+" A.ITEM_CODE=D.ITEM_ID AND ";
            strSQL=strSQL+" D.ABC=B.ITEM_CLASS  ";
            
            int Orderby=EITLERPGLOBAL.getComboCode(cmbOrder);
            
            if(Orderby==1) {
                strSQL=strSQL+" ORDER BY INDENT_DATE ";
            }
            
            if(Orderby==2) {
                strSQL=strSQL+" ORDER BY APPROVED_DATE ";
            }
            
            if(Orderby==3) {
                strSQL=strSQL+" ORDER BY INDENT_NO ";
            }
            
            System.out.println(strSQL);
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++;
                    
                    String BuyerName="";
                    /*rsBuyer=data.getResult("SELECT BUYER FROM D_COM_DEPT_BUYERS WHERE DEPT_ID="+rsTmp.getInt("FOR_DEPT_ID")+" AND BUYER<>"+EITLERPGLOBAL.gUserID);
                    rsBuyer.first();
                     
                    BuyerName=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID);
                     
                    if(rsBuyer.getRow()>0) {
                        BuyerName=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsBuyer.getInt("BUYER"));
                    }
                    
                    BuyerName=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,SelUserID);
                    
                    Object[] rowData=new Object[8];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=BuyerName;
                    rowData[2]=rsTmp.getString("INDENT_NO");
                    rowData[3]=EITLERPGLOBAL.formatDate(rsTmp.getString("INDENT_DATE"));
                    rowData[4]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("FOR_DEPT_ID"));
                    
                    
                    rsIndent=data.getResult("SELECT APPROVED_DATE,MODIFIED_BY FROM D_INV_INDENT_HEADER WHERE INDENT_NO='"+rsTmp.getString("INDENT_NO")+"'");
                    rsIndent.first();
                    
                    if(rsIndent.getRow()>0) {
                        rowData[5]=EITLERPGLOBAL.formatDate(rsIndent.getString("APPROVED_DATE"));
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsIndent.getInt("MODIFIED_BY"));
                    }
                    else {
                        rowData[5]="";
                        rowData[6]="";
                    }
                    
                    
                    HashMap lstRIA=new HashMap();
                    
                    String strRefDoc="";
                    
                    strRIA="";
                    
                    
                    //=========== INQUIRIES =========//
                    lstRIA.clear();
                    
                    String IndentNo=rsTmp.getString("INDENT_NO");
                    rsRIA=data.getResult("SELECT DISTINCT(INQUIRY_NO) AS INQUIRY_NO FROM D_PUR_INQUIRY_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                    rsRIA.first();
                    
                    if(rsRIA.getRow()>0) {
                        while(!rsRIA.isAfterLast()) {
                            
                            String InquiryNo=rsRIA.getString("INQUIRY_NO");
                            
                            lstRIA.put(InquiryNo,InquiryNo);
                            
                            rsRIA.next();
                        }
                    }
                    
                    Iterator iRIA=lstRIA.keySet().iterator();
                    
                    
                    while(iRIA.hasNext()) {
                        strRIA=strRIA+(String)iRIA.next()+",";
                    }
                    
                    if(!strRIA.trim().equals("")) {
                        strRefDoc="Inquiries : "+strRIA;
                    }
                    
                    
                    
                    // ================ RIAs ==================//
                    strRIA="";
                    
                    lstRIA.clear();
                    
                    rsRIA=data.getResult("SELECT SR_NO FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                    rsRIA.first();
                    
                    if(rsRIA.getRow()>0) {
                        while(!rsRIA.isAfterLast()) {
                            int SrNo=rsRIA.getInt("SR_NO");
                            
                            String RIANo=clsIndent.getRIANo(EITLERPGLOBAL.gCompanyID, IndentNo, SrNo);
                            
                            if(!RIANo.trim().equals("")) {
                                lstRIA.put(RIANo,RIANo);
                            }
                            
                            rsRIA.next();
                        }
                    }
                    
                    
                    
                    iRIA=lstRIA.keySet().iterator();
                    
                    while(iRIA.hasNext()) {
                        strRIA=strRIA+(String)iRIA.next()+",";
                    }
                    
                    if(!strRIA.trim().equals("")) {
                        strRefDoc+="\n"+"RIAs : "+strRIA;
                    }
                    
                    
                    
                    //=========== POs =========//
                    strRIA="";
                    
                    lstRIA.clear();
                    
                    rsRIA=data.getResult("SELECT DISTINCT(PO_NO) AS PO_NO FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                    rsRIA.first();
                    
                    if(rsRIA.getRow()>0) {
                        while(!rsRIA.isAfterLast()) {
                            
                            String PONo=rsRIA.getString("PO_NO");
                            
                            lstRIA.put(PONo,PONo);
                            
                            rsRIA.next();
                        }
                    }
                    
                    iRIA=lstRIA.keySet().iterator();
                    
                    
                    while(iRIA.hasNext()) {
                        strRIA=strRIA+(String)iRIA.next()+",";
                    }
                    
                    if(!strRIA.trim().equals("")) {
                        strRefDoc+="\n"+"POs : "+strRIA;
                    }
                    //==============================================//
                    
                    
                    
                    
                    rowData[7]=strRefDoc;
                    
                    DataModelI.addRow(rowData);
                    
                    rsTmp.next();
                }
            }
            
            
        }
        catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,e.getMessage());
        } 
        */
    }
    
    private void GenerateUnapprovedIndents() {
      String SelUserID="";
      String strSQL="";
      try{
           FormatGridU();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          //rsTmp=data.getResult("SELECT PIECE_NO FROM FELT_ORDER_MASTER WHERE PARTY_CD="+SelUserID+"");
        strSQL= "";
        //strSQL+="SELECT PRODUCT_CD,ORDER_CD,PIECE_NO,RCVD_DATE,RCVD_MTR,RECD_KG,RECD_WDTH,INWARD_NO,BALE_NO FROM ";
        //strSQL+="PRODUCTION.FELT_PIECE_REGISTER WHERE ";
        //strSQL+=" WH_CD != 2 AND PARTY_CODE = "+SelUserID+"";
        
        //strSQL="SELECT PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE ,COMM_DATE, PRODUCT_CODE,ITEM,STYLE,LNGTH AS MTRS_ORDER,RCVD_MTR AS MTRS_RCVD ,WIDTH AS WIDTH_ORDER,RECD_WDTH AS WIDTH_RCVD,WEIGHT AS KG_CALC,RECD_KG AS KG_RCVD,(SQM_RATE+WT_RATE) AS RATE,ROUND(BAS_AMT,2) AS BAS_AMT,MEMO_DATE,DISC_PER,ROUND(DISAMT,0) AS DISAMT,ROUND(DISBASAMT,0) AS DISBASAMT,ROUND(EXCISE,2) AS EXCISE,ROUND(WPSC,2) AS SEAM_CHG,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0)WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  +(CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END) ,2) AS INV_AMT,REF_NO,CONF_NO,MACHINE_NO,POSITION,PARTY_CD,INS_IND FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,((DISBASAMT+COALESCE(WPSC,0)) *.12+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,MEMO_DATE,DELIV_DATE ,COMM_DATE,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE,CASE WHEN SQM_IND =1 THEN RCVD_MTR * RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT, CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN  RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN  RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC, ST_FLAG_1 FROM PRODUCTION.FELT_PIECE_REGISTER A,PRODUCTION.FELT_ORDER_MASTER B,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER D WHERE PRODUCT_CODE*10 = ITEM_CODE AND ( A.WH_CD =0  OR (A.WH_CD =2 AND ST_FLAG_1 !='P')) AND A.ORDER_NO = B.PIECE_NO  AND B.PARTY_CD = "+SelUserID+"  AND B.PARTY_CD = D.PARTY_CODE ) AS A  LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(SUBSTRING(M.PIECE_NO,2,5),M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C";
        strSQL="SELECT CASE WHEN PRIORITY=1 THEN 'LOW' WHEN PRIORITY=2 THEN 'MEDIUM' WHEN PRIORITY=3 THEN 'HIGH' END AS PRIOR,PIECE_NO,ORDER_DATE,RCVD_DATE,DELIV_DATE ,COMM_DATE, PRODUCT_CODE,ITEM,STYLE,LNGTH AS MTRS_ORDER,RCVD_MTR AS MTRS_RCVD ,WIDTH AS WIDTH_ORDER,RECD_WDTH AS WIDTH_RCVD,WEIGHT AS KG_CALC,RECD_KG AS KG_RCVD,(SQM_RATE+WT_RATE) AS RATE,ROUND(BAS_AMT,2) AS BAS_AMT,MEMO_DATE,DISC_PER,ROUND(DISAMT,0) AS DISAMT,ROUND(DISBASAMT,0) AS DISBASAMT,ROUND(EXCISE,2) AS EXCISE,ROUND(WPSC,2) AS SEAM_CHG,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0)WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT,ROUND((DISBASAMT+EXCISE+WPSC)  +(CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END) ,2) AS INV_AMT,REF_NO,CONF_NO,MACHINE_NO,POSITION,PARTY_CD,INS_IND FROM (SELECT PRIORITY,REF_NO,CONF_NO,MACHINE_NO,POSITION,PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC,DISC_PER,MEMO_DATE,DISAMT,BAS_AMT,DELIV_DATE ,COMM_DATE ,((DISBASAMT+COALESCE(WPSC,0)) *.12+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT PRIORITY,REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,ITEM,STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,MEMO_DATE,DELIV_DATE ,COMM_DATE,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,(BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISAMT,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT PRIORITY,REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,RCVD_DATE,LNGTH,RCVD_MTR,WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE,CASE WHEN SQM_IND =1 THEN RCVD_MTR * RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT, CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+CASE WHEN PIN_IND=1 THEN  RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN  RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC, ST_FLAG_1 FROM PRODUCTION.FELT_PIECE_REGISTER A,PRODUCTION.FELT_ORDER_MASTER B,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER D WHERE PRODUCT_CODE*10 = ITEM_CODE AND ( A.WH_CD =0  OR (A.WH_CD =2 AND ST_FLAG_1 !='P')) AND A.ORDER_NO = B.PIECE_NO  AND B.PARTY_CD = "+SelUserID+"  AND B.PARTY_CD = D.PARTY_CODE ) AS A  LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(SUBSTRING(M.PIECE_NO,2,5),M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C";
        
        int Orderby=EITLERPGLOBAL.getComboCode(cmbStock);
         if(Orderby==1) {
                strSQL=strSQL+" ORDER BY RCVD_DATE DESC";
            }
        if(Orderby==2){
            strSQL=strSQL+" ORDER BY PRIORITY DESC";
        }
               
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         //rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                double sum = 0.00;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                    sum += Double.parseDouble(rsTmp.getString("KG_RCVD")); 
                  //txttotal.setText(Double.toString(Math.round(sum)));
                  //txttotal.setText(Double.toString(sum));
                   DecimalFormat df = new DecimalFormat("#.##");
                   txttotal.setText(df.format(sum)); 
                    
                 Object[] rowData=new Object[32];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("PRIOR");
                    rowData[2]=rsTmp.getString("PIECE_NO");
                    rowData[3]=EITLERPGLOBAL.formatDate(rsTmp.getString("ORDER_DATE"));
                    rowData[4]=EITLERPGLOBAL.formatDate(rsTmp.getString("RCVD_DATE"));
                    rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("DELIV_DATE"));
                    //rowData[3]=rsTmp.getString("ORDER_DATE");
                    rowData[6]=EITLERPGLOBAL.formatDate(rsTmp.getString("COMM_DATE"));
                    rowData[7]=rsTmp.getString("PRODUCT_CODE");
                    rowData[8]=rsTmp.getString("ITEM");
                    rowData[9]=rsTmp.getString("STYLE");
                    rowData[10]=rsTmp.getString("MTRS_ORDER");
                    rowData[11]=rsTmp.getString("MTRS_RCVD");
                    rowData[12]=rsTmp.getString("WIDTH_ORDER");
                    rowData[13]=rsTmp.getString("WIDTH_RCVD");
                    rowData[14]=rsTmp.getString("KG_CALC");
                    rowData[15]=rsTmp.getString("KG_RCVD");
                    rowData[16]=rsTmp.getString("RATE");
                    rowData[17]=rsTmp.getString("BAS_AMT");
                    rowData[18]=rsTmp.getString("MEMO_DATE");
                    rowData[19]=rsTmp.getString("DISC_PER");
                    rowData[20]=rsTmp.getString("DISAMT");
                    rowData[21]=rsTmp.getString("DISBASAMT");
                    rowData[22]=rsTmp.getString("EXCISE");
                    rowData[23]=rsTmp.getString("SEAM_CHG");
                    rowData[24]=rsTmp.getString("INSACC_AMT");
                    rowData[25]=rsTmp.getString("INV_AMT");
                    rowData[26]=rsTmp.getString("REF_NO");
                    rowData[27]=rsTmp.getString("CONF_NO");
                    rowData[28]=rsTmp.getString("MACHINE_NO");
                    rowData[29]=rsTmp.getString("POSITION");
                    rowData[30]=rsTmp.getString("PARTY_CD");
                    rowData[31]=rsTmp.getString("INS_IND");
                    DataModelU.addRow(rowData);
              //   System.out.println("rsTmp.getString('PIECE_NO')");
                    rsTmp.next();
                }
         }
        
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }
        
    /*     int DeptID=0;
        int SelUserID=0;
        String strSQL="";
        
        try {
            
            FormatGridU(); //clear existing content of table
            SelUserID=EITLERPGLOBAL.getComboCode(cmbBuyer);
            
            //Check if this user is HOD of the department
            ResultSet rsTmp,rsBuyer;
            //rsTmp=data.getResult("SELECT INDENT_NO,INDENT_DATE,FOR_DEPT_ID FROM D_INV_INDENT_HEADER WHERE APPROVED=0 AND CANCELED=0 AND FOR_DEPT_ID IN (SELECT DEPT_ID FROM D_COM_DEPT_BUYERS WHERE BUYER="+SelUserID+")");
            //rsTmp.first();
            
            strSQL="";
            
            strSQL=strSQL+" SELECT A.INDENT_NO,A.INDENT_DATE AS INDENT_DATE,A.FOR_DEPT_ID,A.CREATED_BY FROM ";
            strSQL=strSQL+" D_INV_INDENT_HEADER A, ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL B ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=B.INDENT_NO AND ";
            strSQL=strSQL+" A.APPROVED=0 AND ";
            strSQL=strSQL+" A.CANCELED=0 AND ";
            strSQL=strSQL+" A.FOR_DEPT_ID IN (SELECT DEPT_ID FROM D_COM_DEPT_BUYERS WHERE BUYER="+SelUserID+")  AND ";
            strSQL=strSQL+" A.INDENT_NO NOT IN ( ";
            strSQL=strSQL+" SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO FROM ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=0 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" A.PO_QTY<QTY AND ";
            strSQL=strSQL+" B.BUYER<>"+SelUserID+" AND ";
            strSQL=strSQL+" B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C, ";
            strSQL=strSQL+" D_INV_ITEM_MASTER D ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=0 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" B.BUYER<>"+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_CLASS<>'' AND ";
            strSQL=strSQL+" A.ITEM_CODE=D.ITEM_ID AND D.CANCELLED=0 AND ";
            strSQL=strSQL+" D.ABC=B.ITEM_CLASS ) ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(C.INDENT_NO)  AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=0 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" B.BUYER="+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_ID=SUBSTRING(A.ITEM_CODE,1,LENGTH(B.ITEM_ID)) ";
            strSQL=strSQL+" UNION ";
            strSQL=strSQL+" SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO,C.INDENT_DATE AS INDENT_DATE,C.FOR_DEPT_ID,C.CREATED_BY FROM  ";
            strSQL=strSQL+" D_INV_INDENT_DETAIL A, ";
            strSQL=strSQL+" D_COM_BUYER_ITEMS B, ";
            strSQL=strSQL+" D_INV_INDENT_HEADER C, ";
            strSQL=strSQL+" D_INV_ITEM_MASTER D ";
            strSQL=strSQL+" WHERE ";
            strSQL=strSQL+" A.INDENT_NO=C.INDENT_NO AND ";
            strSQL=strSQL+" C.APPROVED=0 AND C.CANCELED=0 AND ";
            strSQL=strSQL+" B.BUYER="+SelUserID+" AND  ";
            strSQL=strSQL+" B.ITEM_CLASS<>'' AND ";
            strSQL=strSQL+" A.ITEM_CODE=D.ITEM_ID AND D.CANCELLED=0 AND ";
            strSQL=strSQL+" D.ABC=B.ITEM_CLASS  ";
            strSQL=strSQL+" ORDER BY INDENT_DATE ";
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            
            if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++;
                    
                    String BuyerName="";
                    
                    /*rsBuyer=data.getResult("SELECT BUYER FROM D_COM_DEPT_BUYERS WHERE DEPT_ID="+rsTmp.getInt("FOR_DEPT_ID")+" AND BUYER<>"+EITLERPGLOBAL.gUserID);
                    rsBuyer.first();
                    BuyerName=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID);
                     
                    if(rsBuyer.getRow()>0) {
                        BuyerName=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsBuyer.getInt("BUYER"));
                    }
                    
                    BuyerName=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,SelUserID);
                    
                    Object[] rowData=new Object[7];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=BuyerName;
                    rowData[2]=rsTmp.getString("INDENT_NO");
                    rowData[3]=EITLERPGLOBAL.formatDate(rsTmp.getString("INDENT_DATE"));
                    rowData[4]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("FOR_DEPT_ID"));
                    rowData[5]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 3, rsTmp.getString("INDENT_NO")));
                    rowData[6]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 3, rsTmp.getString("INDENT_NO")));
                    
                    
                    DataModelU.addRow(rowData);
                    
                    rsTmp.next();
                }
            }
       }
        catch(Exception e) {
            
        }*/
    }
    
    private void GenerateInvoice(){
      String SelUserID="";
      String strSQL="";
      try{
          FormatGridD();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          //rsTmp=data.getResult("SELECT PIECE_NO FROM FELT_ORDER_MASTER WHERE PARTY_CD="+SelUserID+"");
        strSQL= "";
        strSQL+= "SELECT INVOICE_NO,INVOICE_DATE,QUALITY_NO,PIECE_NO,LENGTH,WIDTH,ORDER_DETAIL,ORDER_DATE,TOTAL_GROSS,TOTAL_NET_AMOUNT,GROSS_SQ_MTR,GROSS_KG,GROSS_AMOUNT,NET_AMOUNT FROM PRODUCTION.FELT_INVOICE_DATA ";
        strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
        
        int Orderby=EITLERPGLOBAL.getComboCode(cmbDespatch);
            
        if(Orderby==1) {
                strSQL=strSQL+" ORDER BY INVOICE_DATE DESC ";
        }
        
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[14];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("INVOICE_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[3]=rsTmp.getString("QUALITY_NO");
                    rowData[4]=rsTmp.getString("PIECE_NO");
                    rowData[5]=rsTmp.getString("LENGTH");
                    rowData[6]=rsTmp.getString("WIDTH");
                    rowData[7]=rsTmp.getString("ORDER_DETAIL");
                    rowData[8]=EITLERPGLOBAL.formatDate(rsTmp.getString("ORDER_DATE"));
                    rowData[9]=rsTmp.getString("TOTAL_NET_AMOUNT");
                    rowData[10]=rsTmp.getString("GROSS_SQ_MTR");
                    rowData[11]=rsTmp.getString("GROSS_KG");
                    rowData[12]=rsTmp.getString("GROSS_AMOUNT");
                    rowData[13]=rsTmp.getString("NET_AMOUNT");
                    DataModelD.addRow(rowData);
              //   System.out.println("rsTmp.getString('PIECE_NO')");
                    rsTmp.next();
                }
         }
        
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }
  }   
    private void GenerateDiscountDetail(){
      String SelUserID="";
      String strSQL="";
      try{
          FormatGridDiscount();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          //rsTmp=data.getResult("SELECT PIECE_NO FROM FELT_ORDER_MASTER WHERE PARTY_CD="+SelUserID+"");
        strSQL= "";
        strSQL+= "SELECT PIECE_NO,DISC_PER,MEMO_DATE FROM PRODUCTION.FELT_DISCOUNT_MEMO ";
        strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
        
        int Orderby=EITLERPGLOBAL.getComboCode(cmbDiscount);
            
            if(Orderby==1) {
                strSQL=strSQL+" ORDER BY MEMO_DATE DESC";
            }
        
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[4];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("PIECE_NO");
                    rowData[2]=rsTmp.getString("DISC_PER");
                    rowData[3]=EITLERPGLOBAL.formatDate(rsTmp.getString("MEMO_DATE"));
                                      
                    DataModelDiscount.addRow(rowData);
                    rsTmp.next();
                }
         }
        
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }
               
    }
    
    private void GenerateTargetDetail(){
        
      String SelUserID="";
      String strSQL="";
      try{
          FormatGridTarget();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          
        strSQL= "";
        strSQL+= "SELECT TGT_FY_YR,TGT_FROM_DATE,TGT_TO_DATE,TGT_QTR_1,TGT_QTR_2,TGT_QTR_3,TGT_QTR_4,TOTAL_TGT FROM PRODUCTION.FELT_TARGET_DATA ";
        strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
        
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[9];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("TGT_FY_YR");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("TGT_FROM_DATE"));
                    rowData[3]=EITLERPGLOBAL.formatDate(rsTmp.getString("TGT_TO_DATE"));                  
                    rowData[4]=rsTmp.getString("TGT_QTR_1");
                    rowData[5]=rsTmp.getString("TGT_QTR_2");
                    rowData[6]=rsTmp.getString("TGT_QTR_3");
                    rowData[7]=rsTmp.getString("TGT_QTR_4");
                    rowData[8]=rsTmp.getString("TOTAL_TGT");
                    DataModelTarget.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }
        
    }   
    
    private void GenerateMiscDetail(){
      String SelUserID="";
      String strSQL="";
      try{
          FormatGridMisc();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          strSQL= "";
        strSQL+= "SELECT PIECE_NO,TYPE,ENTRY_DATE,EXPECTED_DATE,ITEM_CODE FROM PRODUCTION.FELT_MISC_DATA ";
        strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
        
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[6];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("PIECE_NO");
                    rowData[2]=rsTmp.getString("TYPE");
                    rowData[3]=EITLERPGLOBAL.formatDate(rsTmp.getString("ENTRY_DATE"));                  
                    rowData[4]=EITLERPGLOBAL.formatDate(rsTmp.getString("EXPECTED_DATE"));
                    rowData[5]=rsTmp.getString("ITEM_CODE");
                    DataModelMisc.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }            
    }
    
    private void GenerateSeamDetail(){
     String SelUserID="";
     String strSQL="";
      try{
          FormatGridMisc();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          strSQL= "";
        strSQL+= "SELECT ITEM_CODE,PIECE_NO,SEAM_CHG FROM PRODUCTION.FELT_SEAM_DATA ";
        strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
        
   /*      int Orderby=EITLERPGLOBAL.getComboCode(cmbSeam);
            
            if(Orderby==1) {
                strSQL=strSQL+" ORDER BY PIECE_NO ";
            }
     */   
        
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[4];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("ITEM_CODE");
                    rowData[2]=rsTmp.getString("PIECE_NO");
                    rowData[3]=rsTmp.getString("SEAM_CHG");                  
                    DataModelSeam.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }    
        
    }
    
    private void GenerateSalesDetailY(){
     String SelUserID="";
     String strSQL="";
      try{
          FormatGridSalesY();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          strSQL= "";
        strSQL+= "SELECT PARTY_CODE,FINYR,SUM(TOTAL_NET_AMOUNT) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA ";
        strSQL+= "WHERE PARTY_CODE = "+SelUserID+" AND FINYR != '2007-2008' ";
        strSQL+= "GROUP BY PARTY_CODE,FINYR ";
        strSQL+= "ORDER BY FINYR DESC"; 
               
        System.out.println(strSQL);
        rsTmp=data.getResult(strSQL);
        rsTmp.first();
        if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[4];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[2]=rsTmp.getString("FINYR");
                    rowData[3]=rsTmp.getString("TOTAL");                  
                    DataModelSalesY.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }        
    }
    
    private void  GenerateSalesDetailM(){
     String SelUserID="";
     String strSQL="";
     try{
        FormatGridSalesM();  //clear existing content of table
        SelUserID = txtpartycode.getText().toString();
        ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
        strSQL= "";
        //strSQL+= "SELECT PARTY_CODE,EXTRACT(YEAR FROM INVOICE_DATE) As YEAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC,";
        //strSQL+= " SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12) THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA ";
        //strSQL+= "WHERE PARTY_CODE = "+SelUserID+"";
        //strSQL+= "GROUP BY PARTY_CODE,EXTRACT(YEAR FROM INVOICE_DATE)";
        //strSQL+="SELECT PARTY_CODE ,EXTRACT(YEAR FROM INVOICE_DATE) AS YEAR ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC1 ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12)  THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA WHERE PARTY_CODE = "+SelUserID+" GROUP BY PARTY_CODE,EXTRACT(YEAR FROM INVOICE_DATE)";    
        strSQL+="SELECT PARTY_CODE ,FINYR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =4  THEN TOTAL_NET_AMOUNT END) AS APR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =5  THEN TOTAL_NET_AMOUNT END) AS MAY,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =6  THEN TOTAL_NET_AMOUNT END) AS JUN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =7  THEN TOTAL_NET_AMOUNT END) AS JUL,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =8  THEN TOTAL_NET_AMOUNT END) AS AUG,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =9  THEN TOTAL_NET_AMOUNT END) AS SEP,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =10  THEN TOTAL_NET_AMOUNT END) AS OCT,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =11  THEN TOTAL_NET_AMOUNT END) AS NOV,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =12  THEN TOTAL_NET_AMOUNT END) AS DEC1 ,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =1  THEN TOTAL_NET_AMOUNT END) AS JAN,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =2  THEN TOTAL_NET_AMOUNT END) AS FEB,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) =3  THEN TOTAL_NET_AMOUNT END) AS MAR,SUM(CASE WHEN EXTRACT(MONTH FROM INVOICE_DATE) IN (1,2,3,4,5,6,7,8,9,10,11,12)  THEN TOTAL_NET_AMOUNT END) AS TOTAL FROM PRODUCTION.FELT_INVOICE_DATA WHERE PARTY_CODE = "+SelUserID+" AND FINYR != '2007-2008' GROUP BY PARTY_CODE,FINYR ORDER BY FINYR DESC";
        System.out.println(strSQL);
        rsTmp=data.getResult(strSQL);
        rsTmp.first();
        if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[16];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("PARTY_CODE");
                    rowData[2]=rsTmp.getString("FINYR");
                    rowData[3]=rsTmp.getString("APR");
                    rowData[4]=rsTmp.getString("MAY");
                    rowData[5]=rsTmp.getString("JUN");
                    rowData[6]=rsTmp.getString("JUL");                  
                    rowData[7]=rsTmp.getString("AUG");                  
                    rowData[8]=rsTmp.getString("SEP");                  
                    rowData[9]=rsTmp.getString("OCT");                  
                    rowData[10]=rsTmp.getString("NOV");                  
                    rowData[11]=rsTmp.getString("DEC1");                  
                    rowData[12]=rsTmp.getString("JAN");
                    rowData[13]=rsTmp.getString("FEB");
                    rowData[14]=rsTmp.getString("MAR");
                    rowData[15]=rsTmp.getString("TOTAL");
                    DataModelSalesM.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }     
    }  
    
    private void GenerateDivertedDetail(){
     String SelUserID="";
     String strSQL="";
      try{
          ForamtGridDiverted();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          strSQL= "";
        strSQL+= "SELECT A.PIECE_NO,PARTY_CD AS PARTY_ORIGINAL,NAME AS NAME_ORIGINAL,DESP_PARTY AS PARTY_INVOICED, PARTY_NAME AS NAME_DIVERTED,PRODUCT_CODE,ITEM,STYLE,ORDER_DATE,DELIV_DATE ,COMM_DATE,RCVD_DATE,LNGTH AS MTRS_ORDER,RCVD_MTR AS MTRS_RCVD ,WIDTH AS WIDTH_ORDER,RECD_WDTH AS WIDTH_RCVD,RECD_KG AS WIEGHT_RCVD,GROSS_KG AS WIEGHT_INVOICED,RATE,PACK_DATE,A.BALE_NO,MEMO_DATE,COALESCE(DISC_PER,0) AS DISC_PER,INVOICE_NO,INVOICE_DATE,TOTAL_GROSS,TRD_DISCOUNT,INVOICE_AMOUNT,REF_NO,CONF_NO,MACHINE_NO,POSITION FROM( SELECT REF_NO,CONF_NO,MACHINE_NO,POSITION,A.PIECE_NO,PARTY_CD,B.ORDER_DATE,PRODUCT_CODE,H.GRUP AS ITEM,REPLACE(BALNK,' ','') AS STYLE,RCVD_DATE,LNGTH,RCVD_MTR,B.WIDTH,RECD_WDTH,WEIGHT,RECD_KG,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DELIV_DATE ,COMM_DATE ,I.INVOICE_NO,I.INVOICE_DATE,INVOICE_AMOUNT,TOTAL_NET_AMOUNT,I.RATE,GROSS_SQ_MTR,GROSS_KG,TRD_DISCOUNT,TOTAL_GROSS,PACK_DATE,A.BALE_NO,A.DESP_PARTY,PARTY_NAME,NAME FROM PRODUCTION.FELT_PIECE_REGISTER A,PRODUCTION.FELT_ORDER_MASTER B,PRODUCTION.FELT_RATE_MASTER H,PRODUCTION.FELT_PARTY_MASTER D,PRODUCTION.FELT_INVOICE_DATA I WHERE PRODUCT_CODE*10 = ITEM_CODE AND A.INVOICE_NO = I.INVOICE_NO AND A.INVOICE_DATE = I.INVOICE_DATE AND A.ORDER_NO = I.PIECE_NO AND A.ORDER_NO = B.PIECE_NO AND ( B.PARTY_CD = "+SelUserID+" OR A.DESP_PARTY = "+SelUserID+") AND A.DESP_PARTY != A.PARTY_CODE AND B.PARTY_CD = D.PARTY_CODE) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(SUBSTRING(M.PIECE_NO,2,5),M.PIECE_EXT)AND PARTY_CD =PARTY_CODE";
                      
        System.out.println(strSQL);
        rsTmp=data.getResult(strSQL);
        rsTmp.first();
        if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                 Object[] rowData=new Object[33];
                    rowData[0]=Integer.toString(cnt);
                   rowData[1]=rsTmp.getString("PIECE_NO");
                    rowData[2]=rsTmp.getString("PARTY_ORIGINAL");
                    rowData[3]=rsTmp.getString("NAME_ORIGINAL");
                    rowData[4]=rsTmp.getString("PARTY_INVOICED");
                    rowData[5]=rsTmp.getString("NAME_DIVERTED");
                    rowData[6]=rsTmp.getString("PRODUCT_CODE");
                    rowData[7]=rsTmp.getString("ITEM");
                    rowData[8]=rsTmp.getString("STYLE");
                    rowData[9]=EITLERPGLOBAL.formatDate(rsTmp.getString("ORDER_DATE"));
                    rowData[10]=EITLERPGLOBAL.formatDate(rsTmp.getString("DELIV_DATE"));                  
                    rowData[11]=EITLERPGLOBAL.formatDate(rsTmp.getString("COMM_DATE"));                  
                    rowData[12]=EITLERPGLOBAL.formatDate(rsTmp.getString("RCVD_DATE"));                  
                    rowData[13]=rsTmp.getString("MTRS_ORDER");                  
                    rowData[14]=rsTmp.getString("MTRS_RCVD");                  
                    rowData[15]=rsTmp.getString("WIDTH_ORDER");                  
                    rowData[16]=rsTmp.getString("WIDTH_RCVD");
                    rowData[17]=rsTmp.getString("WIEGHT_RCVD");
                    rowData[18]=rsTmp.getString("WIEGHT_INVOICED");                  
                    rowData[19]=rsTmp.getString("RATE");                  
                    rowData[20]=EITLERPGLOBAL.formatDate(rsTmp.getString("PACK_DATE"));                  
                    rowData[21]=rsTmp.getString("BALE_NO");                  
                    rowData[22]=EITLERPGLOBAL.formatDate(rsTmp.getString("MEMO_DATE"));                  
                    rowData[23]=rsTmp.getString("DISC_PER");                  
                    rowData[24]=rsTmp.getString("INVOICE_NO");
                    rowData[25]=EITLERPGLOBAL.formatDate(rsTmp.getString("INVOICE_DATE"));
                    rowData[26]=rsTmp.getString("TOTAL_GROSS");                  
                    rowData[27]=rsTmp.getString("TRD_DISCOUNT");                  
                    rowData[28]=rsTmp.getString("INVOICE_AMOUNT");                  
                    rowData[29]=rsTmp.getString("REF_NO");                  
                    rowData[30]=rsTmp.getString("CONF_NO");                  
                    rowData[31]=rsTmp.getString("MACHINE_NO");                  
                    rowData[32]=rsTmp.getString("POSITION");
                    DataModelDiverted.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }        
    }
    
    private void GenerateTargetDetailA(){
      String SelUserID="";
      String strSQL="";
      try{
          FormatGridTargetA();  //clear existing content of table
          SelUserID = txtpartycode.getText().toString();
          ResultSet rsTmp,rsBuyer,rsIndent,rsRIA;
          
        strSQL+="";
        //strSQL+="SELECT ZONE,PARTY_CODE,NAME,COALESCE(ROUND(S1112/100000,2)) AS S1112,COALESCE(ROUND(S1213/100000,2)) S1213,COALESCE(ROUND(STOCK/100000,2)) AS STOCK,COALESCE(ROUND(PENDING/100000,2)) AS PENDING,COALESCE(ROUND((S1213+ STOCK + PENDING)/100000,2)) AS TOTAL ,COALESCE(ROUND(TARGET/100000,2)) AS TARGET, COALESCE(ROUND((((S1213+ STOCK + PENDING)-TARGET )/TARGET) *100,1),0) AS PER FROM (SELECT ZONE,B1.PARTY_CODE,NAME,S1112,S1213,TARGET,STOCK,COALESCE(PENDING_ORDER,0) AS PENDING FROM (SELECT ZONE,A1.PARTY_CODE,NAME,S1112,S1213,COALESCE(TOTAL_TGT,0) AS TARGET,COALESCE(STOCKORDER,0) AS STOCK FROM (SELECT ZONE,PM.PARTY_CODE,NAME,COALESCE(S1112,0) AS S1112,COALESCE(S1213,0) AS S1213 FROM (SELECT ZONE,PARTY_CODE,NAME FROM PRODUCTION.FELT_PARTY_MASTER ) AS PM LEFT JOIN (SELECT PARTY_CODE,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2011-04-01' AND INVOICE_DATE <='2012-03-31' THEN TOTAL_NET_AMOUNT  END,0)) AS S1112,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2012-04-01' AND FELT_INVOICE_DATA.INVOICE_DATE <=NOW() THEN TOTAL_NET_AMOUNT  END,0)) AS S1213 FROM PRODUCTION.FELT_INVOICE_DATA   WHERE  PARTY_CODE = "+SelUserID+" GROUP BY PARTY_CODE) AS INV ON INV.PARTY_CODE = PM.PARTY_CODE) AS A1 LEFT JOIN (SELECT * FROM PRODUCTION.FELT_TARGET_DATA WHERE TGT_FROM_DATE  >='2011-04-01' AND TGT_TO_DATE <='2012-03-31'   AND  PARTY_CODE = "+SelUserID+" ) AS A2 ON A1.PARTY_CODE = A2.PARTY_CODE LEFT JOIN (SELECT PARTY_CD,ROUND(SUM(INV_AMT),2) AS STOCKORDER  FROM (SELECT PIECE_NO,PARTY_CD,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,EXCISE,WPSC,DISBASAMT,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT, (DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END)  AS INV_AMT FROM (SELECT PIECE_NO,PARTY_CD,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,DISBASAMT,WPSC, ((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT A.PIECE_NO,PARTY_CD,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT PIECE_NO,E.PARTY_CODE AS PARTY_CD,PRODUCT_CD AS PRODUCT_CODE,RCVD_MTR AS LNGTH,RECD_WDTH AS WIDTH,RECD_KG AS WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,CASE WHEN SQM_IND =1 THEN RCVD_MTR *RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+ CASE WHEN PIN_IND=1 THEN RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC FROM PRODUCTION.FELT_PIECE_REGISTER E,PRODUCTION.FELT_RATE_MASTER F,PRODUCTION.FELT_PARTY_MASTER G WHERE E.PRODUCT_CD = F.ITEM_CODE  AND  E.PARTY_CODE = "+SelUserID+" AND E.WH_CD !=2 AND E.PARTY_CODE = G.PARTY_CODE ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C ) AS D GROUP BY PARTY_CD ) AS A3 ON A1.PARTY_CODE=A3.PARTY_CD ) AS B1 LEFT JOIN (SELECT PARTY_CD,ROUND(SUM(INV_AMT),2) AS PENDING_ORDER  FROM (SELECT PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND, EXCISE,WPSC,DISBASAMT, CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT, (DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END)  AS INV_AMT FROM (SELECT PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC, ((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND, BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER, BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND, CASE WHEN SQM_IND =1 THEN LNGTH * WIDTH*SQM_RATE WHEN SQM_IND =0 THEN WEIGHT * WT_RATE END AS BAS_AMT, CASE WHEN CHEM_TRT_IN=1 THEN WEIGHT*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+ CASE WHEN PIN_IND=1 THEN WIDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+ CASE WHEN SPR_IND=1 THEN WIDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC FROM PRODUCTION.FELT_ORDER_MASTER,PRODUCTION.FELT_RATE_MASTER,PRODUCTION.FELT_PARTY_MASTER WHERE PRODUCT_CODE*10 = ITEM_CODE  AND  PARTY_CODE = "+SelUserID+" AND PARTY_CD = PARTY_CODE AND PROD_IND_A IN ('') ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO   WHERE  PARTY_CODE = "+SelUserID+") AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C ) AS D GROUP BY PARTY_CD  ) AS C1 ON B1.PARTY_CODE = C1.PARTY_CD) AS TARGET WHERE (S1213+TARGET+STOCK+PENDING) !=0 ORDER BY ZONE,TARGET DESC,NAME"; 
       strSQL+="SELECT ZONE,PARTY_CODE,NAME,COALESCE(ROUND(S1112/100000,2)) AS S1112,COALESCE(ROUND(S1213/100000,2)) S1213,COALESCE(ROUND(S12131/100000,2)) S12131,COALESCE(ROUND(S12132/100000,2)) AS S12132,COALESCE(ROUND(S12133/100000,2)) AS S12133,COALESCE(ROUND(S12134/100000,2)) AS S12134,COALESCE(ROUND(STOCK/100000,2)) AS STOCK,COALESCE(ROUND(PENDING/100000,2)) AS PENDING,COALESCE(ROUND((S1213+ STOCK + PENDING)/100000,2)) AS TOTAL ,COALESCE(ROUND(TARGET/100000,2)) AS TARGET, COALESCE(ROUND((((S1213+ STOCK + PENDING)-TARGET )/TARGET) *100,1),0) AS PER,COALESCE(ROUND(((S1213-TARGET)/TARGET) *100,1),0) AS SALPER,COALESCE(ROUND(((S12131-TARGETQ1)/TARGETQ1) *100,1),0) AS PERQ1,COALESCE(ROUND(((S12132-TARGETQ2)/TARGETQ2) *100,1),0) AS PERQ2,COALESCE(ROUND(((S12131+S12132-TARGETQ1-TARGETQ2) / (TARGETQ1+TARGETQ2)) *100,1),0) AS PERQ1Q2,COALESCE(ROUND(((S12133-TARGETQ3)/TARGETQ3) *100,1),0) AS PERQ3,COALESCE(ROUND(((S12131+S12132+S12133-TARGETQ1-TARGETQ2-TARGETQ3) / (TARGETQ1+TARGETQ2+TARGETQ3)) *100,1),0) AS PERQ1Q2Q3,COALESCE(ROUND(((S12134-TARGETQ4)/TARGETQ4) *100,1),0) AS PERQ4 FROM (SELECT ZONE,B1.PARTY_CODE,NAME,S1112,S1213,S12131,S12132,S12133,S12134,TARGET,TARGETQ1,TARGETQ2,TARGETQ3,TARGETQ4,STOCK,COALESCE(PENDING_ORDER,0) AS PENDING FROM (SELECT ZONE,A1.PARTY_CODE,NAME,S1112,S1213,S12131,S12132,S12133,S12134,COALESCE(TOTAL_TGT,0) AS TARGET,COALESCE(TGT_QTR_1,0) AS TARGETQ1,COALESCE(TGT_QTR_2,0) AS TARGETQ2,COALESCE(TGT_QTR_3,0) AS TARGETQ3,COALESCE(TGT_QTR_4,0) AS TARGETQ4,COALESCE(STOCKORDER,0) AS STOCK FROM (SELECT ZONE,PM.PARTY_CODE,NAME,COALESCE(S1112,0) AS S1112,COALESCE(S1213,0) AS S1213,COALESCE(S12131,0) AS S12131,COALESCE(S12132,0) AS S12132,COALESCE(S12133,0) AS S12133,COALESCE(S12134,0) AS S12134 FROM (SELECT ZONE,PARTY_CODE,NAME FROM PRODUCTION.FELT_PARTY_MASTER ) AS PM LEFT JOIN (SELECT PARTY_CODE,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2011-04-01' AND INVOICE_DATE <='2012-03-31' THEN TOTAL_NET_AMOUNT  END,0)) AS S1112,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2012-04-01' AND FELT_INVOICE_DATA.INVOICE_DATE <=NOW() THEN TOTAL_NET_AMOUNT  END,0)) AS S1213,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2012-04-01' AND FELT_INVOICE_DATA.INVOICE_DATE <='2012-06-30' THEN TOTAL_NET_AMOUNT  END,0)) AS S12131,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2012-07-01' AND FELT_INVOICE_DATA.INVOICE_DATE <='2012-09-30' THEN TOTAL_NET_AMOUNT  END,0)) AS S12132,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2012-10-01' AND FELT_INVOICE_DATA.INVOICE_DATE <='2012-12-31' THEN TOTAL_NET_AMOUNT  END,0)) AS S12133 ,SUM(COALESCE(CASE WHEN INVOICE_DATE >='2013-01-01' AND FELT_INVOICE_DATA.INVOICE_DATE <='2013-03-31' THEN TOTAL_NET_AMOUNT  END,0)) AS S12134 FROM PRODUCTION.FELT_INVOICE_DATA WHERE PARTY_CODE = "+SelUserID+" GROUP BY PARTY_CODE) AS INV ON INV.PARTY_CODE = PM.PARTY_CODE) AS A1 LEFT JOIN (SELECT * FROM PRODUCTION.FELT_TARGET_DATA WHERE TGT_FROM_DATE  >='2011-04-01' AND TGT_TO_DATE <='2012-03-31' AND PARTY_CODE = "+SelUserID+") AS A2 ON A1.PARTY_CODE = A2.PARTY_CODE LEFT JOIN (SELECT PARTY_CD,ROUND(SUM(INV_AMT),2) AS STOCKORDER  FROM (SELECT PIECE_NO,PARTY_CD,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,EXCISE,WPSC,DISBASAMT,CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT, (DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END)  AS INV_AMT FROM (SELECT PIECE_NO,PARTY_CD,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,DISBASAMT,WPSC, ((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT A.PIECE_NO,PARTY_CD,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER,BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT PIECE_NO,E.PARTY_CODE AS PARTY_CD,PRODUCT_CD AS PRODUCT_CODE,RCVD_MTR AS LNGTH,RECD_WDTH AS WIDTH,RECD_KG AS WEIGHT,SQM_RATE,WT_RATE,SQM_IND,INS_IND,CASE WHEN SQM_IND =1 THEN RCVD_MTR *RECD_WDTH*SQM_RATE WHEN SQM_IND =0 THEN RECD_KG * WT_RATE END AS BAS_AMT,CASE WHEN CHEM_TRT_IN=1 THEN RECD_KG*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+ CASE WHEN PIN_IND=1 THEN RECD_WDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+CASE WHEN SPR_IND=1 THEN RECD_WDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC FROM PRODUCTION.FELT_PIECE_REGISTER E,PRODUCTION.FELT_RATE_MASTER F,PRODUCTION.FELT_PARTY_MASTER G WHERE E.PRODUCT_CD = F.ITEM_CODE  AND E.WH_CD !=2 AND E.PARTY_CODE = "+SelUserID+" AND E.PARTY_CODE = G.PARTY_CODE ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO) AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C ) AS D GROUP BY PARTY_CD ) AS A3 ON A1.PARTY_CODE=A3.PARTY_CD ) AS B1 LEFT JOIN (SELECT PARTY_CD,ROUND(SUM(INV_AMT),2) AS PENDING_ORDER  FROM (SELECT PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND, EXCISE,WPSC,DISBASAMT, CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END  AS INSACC_AMT, (DISBASAMT+EXCISE+WPSC)  + (CASE WHEN INS_IND =1 THEN ROUND((ROUND(DISBASAMT+EXCISE+WPSC,0) +(ROUND(DISBASAMT+EXCISE+WPSC,0)*.10) )*.0039,0) WHEN INS_IND !=1 THEN 0  END)  AS INV_AMT FROM (SELECT PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND,DISBASAMT,WPSC, ((DISBASAMT+COALESCE(WPSC,0)) *.12+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.01+ ((DISBASAMT+COALESCE(WPSC,0)) *.12)*.02) AS EXCISE FROM (SELECT A.PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND, BAS_AMT,WPSC,COALESCE(DISC_PER,0) AS DISC_PER, BAS_AMT -  (BAS_AMT* (COALESCE(DISC_PER,0)/100) ) AS DISBASAMT FROM (SELECT PIECE_NO,PARTY_CD,ORDER_DATE,PRODUCT_CODE,LNGTH,WIDTH,WEIGHT,SQM_RATE,WT_RATE,SQM_IND,PROD_IND_A,INS_IND, CASE WHEN SQM_IND =1 THEN LNGTH * WIDTH*SQM_RATE WHEN SQM_IND =0 THEN WEIGHT * WT_RATE END AS BAS_AMT, CASE WHEN CHEM_TRT_IN=1 THEN WEIGHT*CHARGES WHEN CHEM_TRT_IN =0  THEN 0 END+ CASE WHEN PIN_IND=1 THEN WIDTH * CHARGES WHEN PIN_IND =0  THEN 0 END+ CASE WHEN SPR_IND=1 THEN WIDTH* CHARGES WHEN SPR_IND =0  THEN 0 END AS WPSC FROM PRODUCTION.FELT_ORDER_MASTER,PRODUCTION.FELT_RATE_MASTER,PRODUCTION.FELT_PARTY_MASTER WHERE PRODUCT_CODE*10 = ITEM_CODE AND PARTY_CODE = "+SelUserID+" AND PARTY_CD = PARTY_CODE AND PROD_IND_A IN ('') ) AS A LEFT JOIN (SELECT * FROM PRODUCTION.FELT_DISCOUNT_MEMO WHERE  PARTY_CODE = "+SelUserID+") AS M ON A.PIECE_NO = CONCAT(M.PIECE_NO,M.PIECE_EXT) AND PARTY_CD =PARTY_CODE  ) AS B ) AS C ) AS D GROUP BY PARTY_CD  ) AS C1 ON B1.PARTY_CODE = C1.PARTY_CD) AS TARGET WHERE (S1213+TARGET+STOCK+PENDING) !=0 ORDER BY ZONE,TARGET DESC,NAME";
        
         System.out.println(strSQL);
         rsTmp=data.getResult(strSQL);
         rsTmp.first();
         if(rsTmp.getRow()>0) {
                int cnt=0;
                while(!rsTmp.isAfterLast()) {
                    cnt++; 
                    
                  Object[] rowData=new Object[22];
                    rowData[0]=Integer.toString(cnt);
                    rowData[1]=rsTmp.getString("ZONE");
                    rowData[2]=rsTmp.getString("PARTY_CODE");
                    rowData[3]=rsTmp.getString("NAME");                  
                    rowData[4]=rsTmp.getString("S1112");
                    rowData[5]=rsTmp.getString("S1213");
                    rowData[6]=rsTmp.getString("S12131");
                    rowData[7]=rsTmp.getString("S12132");
                    rowData[8]=rsTmp.getString("S12133");
                    rowData[9]=rsTmp.getString("S12134");
                    rowData[10]=rsTmp.getString("STOCK");
                    rowData[11]=rsTmp.getString("PENDING");
                    rowData[12]=rsTmp.getString("TOTAL");
                    rowData[13]=rsTmp.getString("TARGET");
                    rowData[14]=rsTmp.getString("PER");
                    rowData[15]=rsTmp.getString("SALPER");
                    rowData[16]=rsTmp.getString("PERQ1");
                    rowData[17]=rsTmp.getString("PERQ2");
                    rowData[18]=rsTmp.getString("PERQ1Q2");
                    rowData[19]=rsTmp.getString("PERQ3");
                    rowData[20]=rsTmp.getString("PERQ1Q2Q3");
                    rowData[21]=rsTmp.getString("PERQ4");
                    DataModelTargetA.addRow(rowData);
                    rsTmp.next();
                }
         }
      }
      catch(Exception e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,e.getMessage());
      }
    }
    
    }
    
