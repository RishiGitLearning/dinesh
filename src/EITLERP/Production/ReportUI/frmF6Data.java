/*
 * frmReqCommDateEntry.java
 *
 * Created on October , 2014, 11:18 AM
 */
package EITLERP.Production.ReportUI;

/**
 *
 * @author ASHUTOSH
 * @AUTHOR RISHI 03/02/2015
 *
 */
import EITLERP.*;
import java.sql.*;
import javax.swing.*;
import EITLERP.Finance.UtilFunctions;
import java.util.*;
import EITLERP.Production.ReportUI.*;
import java.io.File;
import TReportWriter.*;

public class frmF6Data extends javax.swing.JApplet {

    private clsExcelExporter exp = new clsExcelExporter();
    private EITLTableModel DataModel = new EITLTableModel();
    private EITLTableModel DataModel2 = new EITLTableModel();
    private TReportEngine objEngine = new TReportEngine();
    private EITLComboModel cmbMonthModel;
    private EITLComboModel cmbYearModel;
    private ResultSet rsResultSet, rsResultSet1;
    private Connection Conn;
    private Statement Stmt;
    //public int DeptID =  EITLERPGLOBAL.gUserDeptID;

    /**
     * Initializes the applet frmLegacyVouchers
     */
    public void init() {
        setSize(1000, 650);
        //txtFromDate.setVisible(false);
        //txtToDate.setVisible(false);
        //txtInvoiceNo.setVisible(false);
        initComponents();
        GenerateMonthCombo();
        GenerateYearCombo();
        FormatGrid();
        // FormatGrid2();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdShowList = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        MONTH = new javax.swing.JLabel();
        cmbMonthType = new javax.swing.JComboBox();
        ExportToExcel = new javax.swing.JButton();
        cmbYear = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbUpdate = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("F6 DATE  FORM");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 2, 950, 25);

        jLabel2.setText("FILTER CRITERIA :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(6, 39, 180, 15);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(900, 403));

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 950, 240);

        cmdShowList.setText("Show List");
        cmdShowList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowListActionPerformed(evt);
            }
        });
        getContentPane().add(cmdShowList);
        cmdShowList.setBounds(680, 60, 110, 25);

        cmdSave.setText("Save");
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        getContentPane().add(cmdSave);
        cmdSave.setBounds(850, 400, 90, 25);

        MONTH.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        MONTH.setText("MONTH  :");
        getContentPane().add(MONTH);
        MONTH.setBounds(230, 60, 70, 20);

        cmbMonthType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMonthTypeItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbMonthType);
        cmbMonthType.setBounds(320, 60, 180, 20);

        ExportToExcel.setText("Export To Excel");
        ExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportToExcelActionPerformed(evt);
            }
        });
        getContentPane().add(ExportToExcel);
        ExportToExcel.setBounds(700, 400, 140, 25);

        cmbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbYearItemStateChanged(evt);
            }
        });
        getContentPane().add(cmbYear);
        cmbYear.setBounds(90, 60, 130, 24);

        jLabel4.setText("YEAR :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 60, 50, 20);

        jButton1.setText("Insert Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(520, 60, 130, 25);

        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(550, 400, 140, 25);

        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 400, 280, 20);

        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(90, 90, 130, 15);

        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(320, 90, 180, 15);

        cmbUpdate.setText("UPDATE VALUE DATE AND VOUCHER DATA");
        cmbUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(cmbUpdate);
        cmbUpdate.setBounds(200, 400, 320, 25);

        jLabel6.setText("NOTE : 1) 'F' for Full    2) 'H' for Half    3) 'D' for Delayed    4) 'DH' for DelayedHalf    5) 'S' for SpecialPDC");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 370, 950, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        //String str2=(String)Table.getValueAt(Table.getSelectedRow(),9);
    }//GEN-LAST:event_TableKeyPressed

    private void cmbUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUpdateActionPerformed

        JOptionPane.showMessageDialog(null, "start");
        try {

            int Monthtype = cmbMonthType.getSelectedIndex();
            String Yeartype = (String) cmbYear.getSelectedItem();
            String s;
            String r, z, j;

       // ResultSet recno=data.getResult("SELECT COUNT(*) AS A FROM( SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT FROM PRODUCTION.FELT_INVOICE_DATA WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"' AND SUBSTRING(PAYMENT_TERM,1,1) !=9 AND CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) NOT IN (SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) FROM PRODUCTION.FELT_F6_REPORT_DETAIL  WHERE EXTRACT(YEAR FROM INVOICE_DATE)='"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"')) AS A LEFT JOIN (SELECT SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,EFFECT,GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER B WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"'  AND A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY INVOICE_NO) AS C ON A.INVOICE_NO=C.INVOICE_NO");
            s = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL AS F6, (SELECT SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,INVOICE_DATE,EFFECT,GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER  FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER   B WHERE EXTRACT(MONTH FROM INVOICE_DATE) = '" + Monthtype + "' AND EXTRACT(YEAR FROM INVOICE_DATE) = '" + Yeartype + "'  AND A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY INVOICE_NO,INVOICE_DATE) AS V SET F6.VOUCHER =V.VOUCHER , F6.AMOUNT=V.AMOUNT, F6.VALUE_DATE = V.VALUE_DATE WHERE F6.INVOICE_NO = V.INVOICE_NO AND F6.INVOICE_DATE = V.INVOICE_DATE AND EXTRACT(MONTH FROM F6.INVOICE_DATE) = '" + Monthtype + "' AND EXTRACT(YEAR FROM F6.INVOICE_DATE) ='" + Yeartype + "'";
            System.out.print(s);
            data.Execute(s);

            r = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL AS F6, (SELECT SUM(AMOUNT)AS AMOUNT,MAX(GRN_DATE) AS VALUE_DATE,INVOICE_NO,INVOICE_DATE,EFFECT,GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',GRN_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER  FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER   B WHERE EXTRACT(MONTH FROM INVOICE_DATE) = '" + Monthtype + "' AND EXTRACT(YEAR FROM INVOICE_DATE) = '" + Yeartype + "'  AND A.VOUCHER_NO = B.VOUCHER_NO AND  B.APPROVED =1 AND  B.CANCELLED =0 AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ'  AND VALUE_DATE = '0000-00-00'  GROUP BY INVOICE_NO,INVOICE_DATE) AS V SET F6.VOUCHER =V.VOUCHER , F6.AMOUNT=V.AMOUNT, F6.VALUE_DATE = V.VALUE_DATE WHERE F6.INVOICE_NO = V.INVOICE_NO AND F6.INVOICE_DATE = V.INVOICE_DATE AND EXTRACT(MONTH FROM F6.INVOICE_DATE) = '" + Monthtype + "' AND EXTRACT(YEAR FROM F6.INVOICE_DATE) = '" + Yeartype + "'";
            System.out.print(r);
            data.Execute(r);

            //z="UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE datediff(VALUE_DATE,INVOICE_DATE)<=7 AND EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
            //            z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE datediff(VALUE_DATE,INVOICE_DATE)<=15 AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
            //            System.out.print(z);
            //            data.Execute(z);

//            if (Integer.parseInt(Yeartype) <= 2019) {
//                if (Monthtype > 6 && Integer.parseInt(Yeartype) == 2019 ) {
//                    z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE datediff(VALUE_DATE,INVOICE_DATE)<=61 AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                } else {
//                    z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE datediff(VALUE_DATE,INVOICE_DATE)<=15 AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                }
//            } else {
//                /*New Code */                
//                if (Monthtype == 1 && Integer.parseInt(Yeartype) == 2020 ) {
//                    //IF VALUE_DATE<=02-29-2020' THEN FULL DISCOUNT
//                    //ELSE IF VALUE_DATE <= '05-15-2020' THEN HALF DISCOUNT
//                    z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE VALUE_DATE<='2020-05-15' AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                }
//                else if (Monthtype == 2 && Integer.parseInt(Yeartype) == 2020 ) {
//                    //IF VALUE_DATE<=05-15-2020' THEN FULL DISCOUNT
//                    //ELSE IF VALUE_DATE <= '06-15-2020' THEN HALF DISCOUNT
//                    z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE VALUE_DATE<='2020-06-15' AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                }
//                else
//                {
//                    z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE datediff(VALUE_DATE,INVOICE_DATE)<=61 AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                }
//            }
            
            z = "UPDATE PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE datediff(VALUE_DATE,INVOICE_DATE)<=31 AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND COALESCE(F6,'') NOT IN ('F','H','D','S') AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
            System.out.print(z);
            data.Execute(z);

        // ResultSet jLabel2=data.getResult("SELECT COUNT(*) AS B FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"'");
        //JOptionPane.showMessageDialog(null,recno.getString("A")+" NO OF RECORD INSERTED");
            // jLabel1.setText(jLabel2.getString("B")+" No Of Record");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "error");
            e.printStackTrace();
        }
        FormatGrid();
        GenerateData();
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbUpdateActionPerformed

    private void cmbMonthTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMonthTypeItemStateChanged
        jLabel5.setText((String) cmbMonthType.getSelectedItem());            // TODO add your handling code here:
    }//GEN-LAST:event_cmbMonthTypeItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        GenerateReport1();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JOptionPane.showMessageDialog(null, "start");
        try {

       // String mmonth=cmbMonthType.getSelectedItem().toString().substring(0,1).toUpperCase()+cmbMonthType.getSelectedItem().toString().substring(1).toLowerCase();
            int Monthtype = cmbMonthType.getSelectedIndex();
            String Yeartype = (String) cmbYear.getSelectedItem();
            String s, j;

            ResultSet recno = data.getResult("SELECT COUNT(*) AS A FROM( SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,INVOICE_AMT AS TOTAL_NET_AMOUNT,CONCAT(SUBSTRING(CHARGE_CODE,2,1), SUBSTRING(DESP_MODE,2,1)) AS PAYMENT_TERM FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND CHARGE_CODE IN ('09','07') AND CANCELLED=0 AND CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) NOT IN (SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) FROM PRODUCTION.FELT_F6_REPORT_DETAIL  WHERE EXTRACT(YEAR FROM INVOICE_DATE)='" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "')) AS A LEFT JOIN (SELECT SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,EFFECT,GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER B WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "'  AND A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY INVOICE_NO) AS C ON A.INVOICE_NO=C.INVOICE_NO");

        //s="INSERT INTO PRODUCTION.FELT_F6_REPORT_DETAIL (INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,VALUE_DATE,AMOUNT,VOUCHER,PAYMENT_TERM,TRANSPORTER_CODE) SELECT A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,C.VALUE_DATE,COALESCE(C.AMOUNT,0) AS AMOUNT,VOUCHER,A.PAYMENT_TERM,A.TRANSPORTER_CODE FROM( SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,PAYMENT_TERM,TRANSPORTER_CODE FROM PRODUCTION.FELT_INVOICE_DATA WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"' AND SUBSTRING(PAYMENT_TERM,1,1) !=9 AND CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) NOT IN (SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) FROM PRODUCTION.FELT_F6_REPORT_DETAIL  WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"'))  AS A LEFT JOIN (SELECT SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,EFFECT,GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER B WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"' AND A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY INVOICE_NO) AS C ON A.INVOICE_NO=C.INVOICE_NO";       
            //System.out.print(s);
            //data.Execute(s);
            j = "INSERT INTO PRODUCTION.FELT_F6_REPORT_DETAIL (INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,TOTAL_NET_AMOUNT,VALUE_DATE,AMOUNT,VOUCHER,PAYMENT_TERM,TRANSPORTER_CODE) SELECT A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,C.VALUE_DATE,COALESCE(C.AMOUNT,0) AS AMOUNT,VOUCHER,A.PAYMENT_TERM,A.TRANSPORTER_CODE FROM( SELECT INVOICE_NO,INVOICE_DATE,PARTY_CODE,PARTY_NAME,INVOICE_AMT AS TOTAL_NET_AMOUNT,CONCAT(SUBSTRING(CHARGE_CODE,2,1), SUBSTRING(DESP_MODE,2,1)) AS PAYMENT_TERM,TRANSPORTER_CODE FROM PRODUCTION.FELT_SAL_INVOICE_HEADER WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND CHARGE_CODE IN ('09','07','01') AND PARTY_CHARGE_CODE!=8 AND CANCELLED=0 AND CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) NOT IN (SELECT CONCAT(INVOICE_NO,INVOICE_DATE,PARTY_CODE) FROM PRODUCTION.FELT_F6_REPORT_DETAIL  WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "'))  AS A LEFT JOIN (SELECT SUM(AMOUNT)AS AMOUNT,MAX(VALUE_DATE) AS VALUE_DATE,INVOICE_NO,EFFECT,GROUP_CONCAT(DISTINCT B.VOUCHER_NO,' ( ',AMOUNT,' / ',VALUE_DATE,' ) '  ORDER BY A.VOUCHER_NO SEPARATOR ' , ' ) AS VOUCHER FROM FINANCE.D_FIN_VOUCHER_DETAIL A,FINANCE.D_FIN_VOUCHER_HEADER B WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND A.VOUCHER_NO = B.VOUCHER_NO AND B.APPROVED =1 AND B.CANCELLED =0 AND MAIN_ACCOUNT_CODE = 210010  AND SUBSTRING(B.VOUCHER_NO,1,2) !='SJ' GROUP BY INVOICE_NO) AS C ON A.INVOICE_NO=C.INVOICE_NO ";
            System.out.print(j);
            data.Execute(j);

        //r="UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE VALUE_DATE>= INVOICE_DATE AND EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"'";
            //System.out.print(r);
            //data.Execute("UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE VALUE_DATE<= INVOICE_DATE AND EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"' AND F6!='F'");
            JOptionPane.showMessageDialog(null, recno.getString("A") + " NO OF RECORD INSERTED");
       // jLabel1.setText(jLabel2.getString("B")+" No Of Record");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "error");
            e.printStackTrace();
        }
        FormatGrid();
        GenerateData();
        // TODO add your handling code here:*/
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbYearItemStateChanged
        jLabel3.setText((String) cmbYear.getSelectedItem());
       //        int AmdReason =  cmbAmendReason.getSelectedIndex();
        //   txtamendreasoncode.setText( Integer.toString(cmbAmendReason.getSelectedIndex()));
        //    txtamendreasonname.setText((String)cmbAmendReason.getSelectedItem());

    }//GEN-LAST:event_cmbYearItemStateChanged

    private void ExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportToExcelActionPerformed
        try {

            exp.fillData(Table, new File("/root/Desktop/f6data.xls"));
            exp.fillData(Table, new File("D://f6data.xls"));
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + "'/root/Desktop/f6data.xls' successfully in Linux PC or 'D://f6data.xls' successfully in Windows PC    ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportToExcelActionPerformed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased

        String str2 = (String) Table.getValueAt(Table.getSelectedRow(), 9);
        System.out.println(str2);
        if (str2.toString().equalsIgnoreCase("C") || str2.toString().equalsIgnoreCase("D") || str2.toString().equalsIgnoreCase("F") || str2.toString().equalsIgnoreCase("") || str2.toString().equalsIgnoreCase("DH") || str2.toString().equalsIgnoreCase("S")) {
            //JOptionPane.showMessageDialog(null,"valid");
        } else {
            JOptionPane.showMessageDialog(null, " Not valid");
            Table.setValueAt("", Table.getSelectedRow(), 9);
        }

        /*
         String str1=(String)Table.getValueAt(Table.getSelectedRow(),7);
         String str2=(String)Table.getValueAt(Table.getSelectedRow(),8);
         System.out.println(str1);
         System.out.println(str2);
        
         if(str1.equals("") || str2.equals("")){
         Table.setValueAt("", Table.getSelectedRow(), 9);
         Table.setValueAt("1", Table.getSelectedRow(), 10);
            
         }        
        
       
         if(!str1.equals("") && !str2.equals("")){
         //if(!str2.equals("")){
         int dateDiff= EITLERPGLOBAL.compareDate(str1,str2);                       
         System.out.println("days : "+dateDiff);              
         if(dateDiff==1)
         {  
         Table.setValueAt(str1, Table.getSelectedRow() , 9);                 
         Table.setValueAt("1", Table.getSelectedRow() , 10);                 
         //txtAgreedDate.setText(txtRevisedRequestedDate.getText());               
         }
         else if (dateDiff==-1)
         {
         //txtAgreedDate.setText(txtRevisedCommDate.getText());
         Table.setValueAt("", Table.getSelectedRow() , 9);
         Table.setValueAt("1", Table.getSelectedRow() , 10);
         //JOptionPane.showMessageDialog(frmReqCommDateEntry.this,"Requested date must be larger than or equal to Commited date Otherwise Agreed Date will be blank. ","Requested Date and Commited Date Comparison",JOptionPane.YES_OPTION);               
         } 
         else{
         Table.setValueAt(str1, Table.getSelectedRow() , 9);                 
         Table.setValueAt("1", Table.getSelectedRow() , 10);                 
         //txtAgreedDate.setText(txtRevisedRequestedDate.getText()); 
         }
         //}
         }
         //else{
         //    Table.setValueAt("", Table.getSelectedRow(), 7);
         //}*/
    }//GEN-LAST:event_TableKeyReleased

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        /*
         for(int i=0;i<Table.getRowCount();i++) {
         if(DataModel.getValueByVariable("LR_NO", i).length()>8) {
         JOptionPane.showMessageDialog(this,"LR No. should not more then eight digits at Sr No. " + (i+1));
         return;
         }
         }*/
        new Thread() {
            public void run() {
                try {
                    for (int i = 0; i < Table.getRowCount(); i++) {
                     //   String PieceNo=DataModel.getValueByVariable("PIECE_NO", i);
                        //   String ind=DataModel.getValueByVariable("IND", i);

                        String f6 = DataModel.getValueByVariable("F6", i);
                        String Remarks1 = DataModel.getValueByVariable("SALES_REMARKS1", i);
                        String Remarks2 = DataModel.getValueByVariable("AUDIT_REMARKS1", i);
                        String InvoiceNo = DataModel.getValueByVariable("INVOICE_NO", i);
                        String InvoiceDate = DataModel.getValueByVariable("INVOICE_DATE", i);

                        data.Execute("UPDATE PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='" + f6 + "',SALES_REMARKS='" + Remarks1 + "',AUDIT_REMARKS='" + Remarks2 + "' WHERE INVOICE_NO='" + InvoiceNo + "' AND INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(InvoiceDate) + "'");

                    }

                } catch (Exception e) {
                }
            }
        ;
    }.start();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdShowListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowListActionPerformed
        FormatGrid();
        GenerateData();
    }//GEN-LAST:event_cmdShowListActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExportToExcel;
    private javax.swing.JLabel MONTH;
    private javax.swing.JTable Table;
    private javax.swing.JComboBox cmbMonthType;
    private javax.swing.JButton cmbUpdate;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables

    private void FormatGrid() {

        // Updating=true; //Stops recursion
        try {
           // cmdAdd.requestFocus();

            DataModel = new EITLTableModel();
            Table.removeAll();
            Table.setModel(DataModel);
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            DataModel.addColumn("Invoice No");//0
            DataModel.addColumn("Invoice Date"); //1   
            DataModel.addColumn("Party Code");//2
            DataModel.addColumn("Party Name");//3
            DataModel.addColumn("Invoice Amount");//5
            DataModel.addColumn("Value Date");//6
            DataModel.addColumn("Recd Amount");//7
            DataModel.addColumn("Voucher");//8
            //DataModel.addColumn("Different Amount");//8
            DataModel.addColumn("Days");//8
            DataModel.addColumn("F6");//11
            DataModel.addColumn("Sales Remarks");//9
            DataModel.addColumn("Audit Remarks");//10
            DataModel.addColumn("Payment Term");//11
            DataModel.addColumn("Charge Code");//12

            DataModel.SetVariable(0, "INVOICE_NO");  //0
            DataModel.SetVariable(1, "INVOICE_DATE");    //1
            DataModel.SetVariable(2, "PARTY_CODE");    //2
            DataModel.SetVariable(3, "PARTY_NAME");    //3
            DataModel.SetVariable(4, "TOTAL_NET_AMOUNT");    //44
            DataModel.SetVariable(5, "VALUE_DATE");    //4
            DataModel.SetVariable(6, "AMOUNT");    //5
            DataModel.SetVariable(7, "VOUCHER");    //6
            //DataModel.SetVariable(8,"DIFFERENT_AMOUNT");    //6
            DataModel.SetVariable(8, "DAYS");    //6
            DataModel.SetVariable(9, "F6");    //4
            DataModel.SetVariable(10, "SALES_REMARKS1");    //5
            DataModel.SetVariable(11, "AUDIT_REMARKS2");    //6
            DataModel.SetVariable(12, "PAYMENT_TERM");    //5
            DataModel.SetVariable(13, "CHARGE_CODE");    //6

            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
            DataModel.SetReadOnly(6);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(11);
            DataModel.SetReadOnly(12);
            DataModel.SetReadOnly(13);
           // DataModel.SetReadOnly(14);

            if ((EITLERPGLOBAL.gUserDeptID) == 29 || (EITLERPGLOBAL.gUserDeptID) == 0) {
                DataModel.ResetReadOnly(9);
            }

            DataModel.SetReadOnly(14);
        } catch (Exception e) {

        }
        //  Updating=false;

    }

    private void ShowMessage(String pMessage) {
        //lblStatus.setText(pMessage);

    }

    private void GenerateMonthCombo() {
        HashMap List = new HashMap();

        //----- Generate Department Combo ------- //
        cmbMonthModel = new EITLComboModel();
        cmbMonthType.removeAllItems();
        cmbMonthType.setModel(cmbMonthModel);

        try {
            ComboData combodata = new ComboData();
            combodata.Code = 0;
            combodata.Text = "SELECT MONTH";

            cmbMonthModel.addElement(combodata);
            ResultSet rs = data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='MONTH' ");
            while (!rs.isAfterLast()) {
                combodata = new ComboData();
                combodata.Code = rs.getLong("PARA_CODE");
               // combodata.Text=rs.getLong("PARA_CODE")+" "+rs.getString("PARA_DESC");

                combodata.Text = rs.getString("PARA_DESC");
                cmbMonthModel.addElement(combodata);
                rs.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void GenerateYearCombo() {
        HashMap List2 = new HashMap();

        //----- Generate Department Combo ------- //
        cmbYearModel = new EITLComboModel();
        cmbYear.removeAllItems();
        cmbYear.setModel(cmbYearModel);

        try {
            ComboData combodata2 = new ComboData();
            combodata2.Code = 0;
            combodata2.Text = "SELECT YEAR";

            cmbYearModel.addElement(combodata2);
            ResultSet rs2 = data.getResult("SELECT PARA_CODE,PARA_DESC FROM PRODUCTION.FELT_PARAMETER_MASTER WHERE PARA_ID ='YEAR' ");
            while (!rs2.isAfterLast()) {
                combodata2 = new ComboData();
                combodata2.Code = rs2.getLong("PARA_CODE");
                //combodata.strCode=rs.getString("PRIORITY_DESC");
                combodata2.Text = rs2.getString("PARA_DESC");

                cmbYearModel.addElement(combodata2);
                rs2.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /*  private void FormatGrid2() {
     try {
     DataModel2=new EITLTableModel();
     Table2.removeAll();
            
     Table2.setModel(DataModel2);
     //   Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
     DataModel2.addColumn("SR."); //0 - Read Only
     DataModel2.addColumn("PRODUCT"); //0 - Read Only
     DataModel2.addColumn("CAPACITY"); //1
     DataModel2.addColumn("COUNT"); //2
 
            
     DataModel2.SetVariable(0,""); //0 - Read Only
     DataModel2.SetVariable(1,"PRODUCT"); //0 - Read Only
     DataModel2.SetVariable(2,"CAPACITY"); //0 - Read Only
     DataModel2.SetVariable(3,"CNT"); //0 - Read Only
            
            
     DataModel2.TableReadOnly(true);
            
     Table2.getColumnModel().getColumn(0).setMaxWidth(20);
     // Table2.getColumnModel().getColumn(1).setMaxWidth(60);
     Table2.getColumnModel().getColumn(2).setMinWidth(70);
     Table2.getColumnModel().getColumn(2).setMaxWidth(70);
     Table2.getColumnModel().getColumn(3).setMinWidth(70);
     Table2.getColumnModel().getColumn(3).setMaxWidth(70);
              
            
     } catch(Exception e) {
     e.printStackTrace();
     }
 
     }*/
    public void show1() {

        new Thread() {
            public void run() {
                try {

                    int Monthtype = cmbMonthType.getSelectedIndex();
                    String Yeartype = (String) cmbYear.getSelectedItem();

                    String strSQL2 = "SELECT 'ACNE' AS PRODUCT ,90 AS CAPACITY,COUNT(*) AS CNT FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '" + Monthtype + "' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '" + Yeartype + "' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) AND SUBSTRING(B.GRUP,1,3) = 'ACN' UNION ALL SELECT 'HDS,SDF' AS PRODUCT ,30,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '" + Monthtype + "' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '" + Yeartype + "' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) AND SUBSTRING(B.GRUP,1,3) IN ('HDS','SDF') UNION ALL SELECT 'MNE.MNG,FCNE' AS PRODUCT ,155,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '" + Monthtype + "' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '" + Yeartype + "' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6)  AND SUBSTRING(B.GRUP,1,3) IN ('MNE','MNG','FCN') UNION ALL SELECT 'OTHER' AS PRODUCT ,0,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '" + Monthtype + "' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '" + Yeartype + "' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) AND SUBSTRING(B.GRUP,1,3) NOT IN ('MNE','MNG','FCN','HDS','SDF','ACN') UNION ALL SELECT 'TOTAL ' AS PRODUCT ,275,COUNT(*) FROM PRODUCTION.FELT_ORDER_MASTER A,PRODUCTION.FELT_RATE_MASTER B WHERE EXTRACT(MONTH FROM WVG_AGREED_DATE) = '" + Monthtype + "' AND  EXTRACT(YEAR FROM WVG_AGREED_DATE) = '" + Yeartype + "' AND PRODUCT_CODE = SUBSTRING(ITEM_CODE,1,6) ";
                    System.out.println(strSQL2);
                    ResultSet rsTmp2 = data.getResult(strSQL2);
                    rsTmp2.first();

                    /*  FormatGrid2();
                    
                     if(rsTmp2.getRow()>0) {
                     while(!rsTmp2.isAfterLast()) {                                                        
                     Object[] rowData2=new Object[5];
                     DataModel2.addRow(rowData2);                            
                     int NewRow2=Table2.getRowCount()-1;
                     lblStatus.setText("Generating Table "+NewRow2);
                     DataModel2.setValueByVariable("SR_NO",Integer.toString(NewRow2+1), NewRow2);
                     DataModel2.setValueByVariable("PRODUCT",UtilFunctions.getString(rsTmp2,"PRODUCT",""),NewRow2);
                     DataModel2.setValueByVariable("CAPACITY",UtilFunctions.getString(rsTmp2,"CAPACITY",""),NewRow2);
                     DataModel2.setValueByVariable("CNT",UtilFunctions.getString(rsTmp2,"CNT",""),NewRow2);
                    
                            
                     rsTmp2.next();
                     }
                     }
                    
                     */
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        ;
    }

    .start(); 
        
    }
   
  /* public void showreq()
   {
      new Thread() {            
            public void run() {
                try {
                    
         int Monthtype = cmbMonthType.getSelectedIndex();
         int yeartype1 = cmbYear.getSelectedIndex();
         String Yeartype  = (String)cmbYear.getSelectedItem();
         
                    String strSQL="SELECT PIECE_NO,ORDER_DATE,PARTY_CD,PARTY_NAME,PRODUCT_CODE,GRUP,DELIV_DATE,COMM_DATE,WVG_AGREED_DATE,0 AS IND FROM PRODUCTION.FELT_ORDER_MASTER,DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE =210010 AND PARTY_CD =PARTY_CODE AND WVG_AGREED_DATE='0000-00-00' AND PROD_IND_A='' AND PRIORITY NOT IN (6,7,8,9,10) AND EXTRACT(MONTH FROM DELIV_DATE) = '"+ Monthtype +"' AND  EXTRACT(YEAR FROM DELIV_DATE) = '"+ Yeartype +"' ";
                    strSQL+="";  
                    
                   
                    if(!txtPieceNo.getText().trim().equals("")) {
                        strSQL+="AND PIECE_NO='"+txtPieceNo.getText().trim()+"' ";
                    }
                   
                    if(!txtProductCode.getText().trim().equals("")) {
                        strSQL+="AND PRODUCT_CODE ='"+txtProductCode.getText().trim()+"' ";
                    }
                    
                    if(!txtPartyCode.getText().trim().equals("")) {
                        strSQL+="AND PARTY_CD='"+txtPartyCode.getText().trim()+"' ";
                    }                                       
                    
                    strSQL+=" ORDER BY PIECE_NO ";
                    
                    lblStatus.setText("Fetching Records ... ");
                    System.out.println(strSQL);
                    ResultSet rsTmp=data.getResult(strSQL);
                    rsTmp.first();
                    
                    FormatGrid();
                    
                    if(rsTmp.getRow()>0) {
                        while(!rsTmp.isAfterLast()) {                                                        
                            Object[] rowData=new Object[12];
                            DataModel.addRow(rowData);                            
                            int NewRow=Table.getRowCount()-1;
                            lblStatus.setText("Generating Table "+NewRow);
                            DataModel.setValueByVariable("SR_NO",Integer.toString(NewRow+1), NewRow);
                            DataModel.setValueByVariable("PIECE_NO",UtilFunctions.getString(rsTmp,"PIECE_NO",""),NewRow);
                            DataModel.setValueByVariable("ORDER_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"ORDER_DATE","0000-00-00")),NewRow);
                            DataModel.setValueByVariable("PARTY_CD",UtilFunctions.getString(rsTmp,"PARTY_CD",""),NewRow);
                            DataModel.setValueByVariable("PARTY_NAME",UtilFunctions.getString(rsTmp,"PARTY_NAME",""),NewRow);
                            DataModel.setValueByVariable("PRODUCT_CODE",UtilFunctions.getString(rsTmp,"PRODUCT_CODE",""),NewRow);
                            DataModel.setValueByVariable("GRUP",UtilFunctions.getString(rsTmp,"GRUP",""),NewRow);
                            DataModel.setValueByVariable("DELIV_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"DELIV_DATE","0000-00-00")),NewRow);
                            DataModel.setValueByVariable("COMM_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"COMM_DATE","0000-00-00")),NewRow);
                            DataModel.setValueByVariable("WVG_AGREED_DATE",EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"WVG_AGREED_DATE","0000-00-00")),NewRow);                            
                            DataModel.setValueByVariable("IND",UtilFunctions.getString(rsTmp,"IND",""),NewRow);
                            rsTmp.next();
                        }
                    }
                    lblStatus.setText("Ready ");
                } catch(Exception e) {
                    e.printStackTrace();
                }
            };
        }.start();
   
   
   }*/
   
     
      
      private void GenerateData() {
        try {

            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PARTY_NAME");
            //objReportData.AddColumn("CITY_ID");
            objReportData.AddColumn("TOTAL_NET_AMOUNT");
            objReportData.AddColumn("VALUE_DATE");
            objReportData.AddColumn("AMOUNT");
            objReportData.AddColumn("VOUCHER");
            //objReportData.AddColumn("DIFFERENT_AMT");
            objReportData.AddColumn("DAYS");
            objReportData.AddColumn("F6");
            objReportData.AddColumn("SALES_REMARKS");
            objReportData.AddColumn("AUDIT_REMARKS");
            objReportData.AddColumn("PAYMENT_TERM");
            objReportData.AddColumn("CHARGE_CODE");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("INVOICE_NO", "");
            objOpeningRow.setValue("INVOICE_DATE", "0000-00-00");
            objOpeningRow.setValue("PARTY_CODE", "");
            objOpeningRow.setValue("PARTY_NAME", "");
            objOpeningRow.setValue("TOTAL_NET_AMOUNT", "");
            objOpeningRow.setValue("VALUE_DATE", "0000-00-00");
            objOpeningRow.setValue("AMOUNT", "");
            objOpeningRow.setValue("VOUCHER", "");
            //objOpeningRow.setValue("DIFFERENT_AMT","");
            objOpeningRow.setValue("DAYS", "");
            objOpeningRow.setValue("F6", "");
            objOpeningRow.setValue("SALES_REMARKS", "");
            objOpeningRow.setValue("AUDIT_REMARKS", "");
            objOpeningRow.setValue("PAYMENT_TERM", "");
            objOpeningRow.setValue("CHARGE_CODE", "");

           // String mmonth=cmbMonthType.getSelectedItem().toString().substring(0,1).toUpperCase()+cmbMonthType.getSelectedItem().toString().substring(1).toLowerCase();
            int Monthtype = cmbMonthType.getSelectedIndex();
            // int yeartype1 = cmbYear.getSelectedIndex();
            String Yeartype = (String) cmbYear.getSelectedItem();

            //String strSQL="SELECT *,DATEDIFF(VALUE_DATE,INVOICE_DATE) AS DAY1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM INVOICE_DATE)='"+ Monthtype +"' AND SUBSTRING(PAYMENT_TERM,1,1) IN (9,7,1) AND F6!='F' ORDER BY F6,INVOICE_NO,INVOICE_DATE";
//            String strSQL="SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '"+ Yeartype +"' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='"+ Monthtype +"' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND A.F6!='F' AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";
            String strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND datediff(A.VALUE_DATE,A.INVOICE_DATE)>=0 AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";

//            if (Integer.parseInt(Yeartype) <= 2019) {
//                if (Monthtype > 6 && Integer.parseInt(Yeartype) == 2019 ) {
//                    strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND datediff(A.VALUE_DATE,A.INVOICE_DATE)>31 AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";
//                } else {
//                    strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND datediff(A.VALUE_DATE,A.INVOICE_DATE)>7 AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";
//                }
//            } else {
//                
//                /*New Code */                
//                if (Monthtype == 1 && Integer.parseInt(Yeartype) == 2020 ) {
//                    //IF VALUE_DATE<=02-29-2020' THEN FULL DISCOUNT
//                    //ELSE IF VALUE_DATE <= '05-15-2020' THEN HALF DISCOUNT
//                    //z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE VALUE_DATE<='2020-05-15' AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                    strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND VALUE_DATE>'2020-03-02' AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";
//                }
//                else if (Monthtype == 2 && Integer.parseInt(Yeartype) == 2020 ) {
//                    //IF VALUE_DATE<=05-15-2020' THEN FULL DISCOUNT
//                    //ELSE IF VALUE_DATE <= '06-15-2020' THEN HALF DISCOUNT
//                    //z = "UPDATE  PRODUCTION.FELT_F6_REPORT_DETAIL SET F6='F' WHERE VALUE_DATE<='2020-06-15' AND EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' AND F6!='F' AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2)";
//                    strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND VALUE_DATE>'2020-05-15'  AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";
//                }
//                else
//                {
//                    strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND datediff(A.VALUE_DATE,A.INVOICE_DATE)>31 AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";
//                }
//            }
            
            strSQL = "SELECT *,DATEDIFF(A.VALUE_DATE,A.INVOICE_DATE) AS DAY1,A.INVOICE_NO,A.INVOICE_DATE,A.PARTY_CODE,A.PARTY_NAME,A.TOTAL_NET_AMOUNT,A.VALUE_DATE,A.AMOUNT,A.VOUCHER,A.SALES_REMARKS,A.AUDIT_REMARKS,A.F6,A.PAYMENT_TERM,B.CHARGE_CODE FROM PRODUCTION.FELT_F6_REPORT_DETAIL A,DINESHMILLS.D_SAL_PARTY_MASTER B WHERE EXTRACT(YEAR FROM A.INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM A.INVOICE_DATE)='" + Monthtype + "' AND SUBSTRING(A.PAYMENT_TERM,1,1) IN (9,7,1) AND B.CHARGE_CODE IN (09,07) AND A.PARTY_CODE=B.PARTY_CODE AND ROUND(TOTAL_NET_AMOUNT,2)<=ROUND(AMOUNT,2) ORDER BY A.F6,A.INVOICE_NO,A.INVOICE_DATE ";

            ResultSet jLabel2 = data.getResult("SELECT COUNT(*) AS B FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "'");
            jLabel1.setText(jLabel2.getString("B") + " No Of Record");

            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {

                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();
                    Object[] rowData = new Object[20];

                    rowData[0] = UtilFunctions.getString(rsTmp, "INVOICE_NO", "");
                    rowData[1] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "INVOICE_DATE", "0000-00-00"));
                    rowData[2] = UtilFunctions.getString(rsTmp, "PARTY_CODE", "");
                    rowData[3] = UtilFunctions.getString(rsTmp, "PARTY_NAME", "");
                    rowData[4] = UtilFunctions.getString(rsTmp, "TOTAL_NET_AMOUNT", "");
                    rowData[5] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp, "VALUE_DATE", "0000-00-00"));
                    rowData[6] = UtilFunctions.getString(rsTmp, "AMOUNT", "");
                    rowData[7] = UtilFunctions.getString(rsTmp, "VOUCHER", "");
                    //rowData[8]=UtilFunctions.getString(rsTmp,"DIFFERENT_AMT","");
                    rowData[8] = UtilFunctions.getString(rsTmp, "DAY1", "");
                    rowData[9] = UtilFunctions.getString(rsTmp, "F6", "");
                    rowData[10] = UtilFunctions.getString(rsTmp, "SALES_REMARKS", "");
                    rowData[11] = UtilFunctions.getString(rsTmp, "AUDIT_REMARKS2", "");
                    rowData[12] = UtilFunctions.getString(rsTmp, "PAYMENT_TERM", "");
                    rowData[13] = UtilFunctions.getString(rsTmp, "CHARGE_CODE", "");

                    objReportData.AddRow(objRow);
                    DataModel.addRow(rowData);

                    rsTmp.next();

                }

//                System.out.print("IN");
//                for(int i=0;i<Counter;i++)
//                {
//                    System.out.print(" In Data I = "+DataModel.getValueByVariable("F6",i));
//                	if(DataModel.getValueByVariable("F6",i).equals("F"))
//                        {
//                                                       
//                            System.out.print(" Value Got =  "+DataModel.isCellEditable(i, 8));
//                            
//                        }
//                }
//                System.out.print("OUT");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void GenerateReport1() {
        try {

            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData = new TReportWriter.SimpleDataProvider.TTable();

            objReportData.AddColumn("INVOICE_NO");
            objReportData.AddColumn("INVOICE_DATE");
            objReportData.AddColumn("PARTY_CODE");
            objReportData.AddColumn("PARTY_NAME");
            objReportData.AddColumn("DAY1");
            objReportData.AddColumn("TOTAL_NET_AMOUNT");
            objReportData.AddColumn("AMOUNT");
            objReportData.AddColumn("VOUCHER");
            objReportData.AddColumn("VALUE_DATE");
            objReportData.AddColumn("SALES_REMARKS");
            objReportData.AddColumn("AUDIT_REMARKS");
            objReportData.AddColumn("F6");

            TReportWriter.SimpleDataProvider.TRow objOpeningRow = objReportData.newRow();

            objOpeningRow.setValue("INVOICE_NO", "");
            objOpeningRow.setValue("INVOICE_DATE", "0000-00-00");
            objOpeningRow.setValue("PARTY_CODE", "");
            objOpeningRow.setValue("PARTY_NAME", "");
            objOpeningRow.setValue("DAY1", "");
            objOpeningRow.setValue("TOTAL_NET_AMOUNT", "");
            objOpeningRow.setValue("AMOUNT", "");
            objOpeningRow.setValue("VOUCHER", "");
            objOpeningRow.setValue("VALUE_DATE", "0000-00-00");
            objOpeningRow.setValue("SALES_REMARKS", "");
            objOpeningRow.setValue("AUDIT_REMARKS", "");
            objOpeningRow.setValue("F6", "");

           // String mmonth=cmbMonthType.getSelectedItem().toString().substring(0,1).toUpperCase()+cmbMonthType.getSelectedItem().toString().substring(1).toLowerCase();
            int Monthtype = cmbMonthType.getSelectedIndex();
            String Yeartype = (String) cmbYear.getSelectedItem();

            String strSQL = "SELECT *,DATEDIFF(VALUE_DATE,INVOICE_DATE) AS DAY1 FROM PRODUCTION.FELT_F6_REPORT_DETAIL WHERE EXTRACT(YEAR FROM INVOICE_DATE)= '" + Yeartype + "' AND EXTRACT(MONTH FROM INVOICE_DATE)='" + Monthtype + "' ORDER BY INVOICE_NO,INVOICE_DATE";
         //   String strSQL="SELECT * FROM PRODUCTION.FELT_F6_REPORT_DETAIL";

            System.out.println(strSQL);
            ResultSet rsTmp = data.getResult(strSQL);
            rsTmp.first();

            int Counter = 0;

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    objRow = objReportData.newRow();
                    Object[] rowData = new Object[21];

                    objRow.setValue("INVOICE_NO", UtilFunctions.getString(rsTmp, "INVOICE_NO", ""));
                    objRow.setValue("INVOICE_DATE", UtilFunctions.getString(rsTmp, "INVOICE_DATE", "0000-00-00"));
                    objRow.setValue("PARTY_CODE", UtilFunctions.getString(rsTmp, "PARTY_CODE", ""));
                    objRow.setValue("PARTY_NAME", UtilFunctions.getString(rsTmp, "PARTY_NAME", ""));
                    objRow.setValue("TOTAL_NET_AMOUNT", UtilFunctions.getString(rsTmp, "TOTAL_NET_AMOUNT", ""));
                    objRow.setValue("AMOUNT", UtilFunctions.getString(rsTmp, "AMOUNT", ""));
                    objRow.setValue("VOUCHER", UtilFunctions.getString(rsTmp, "VOUCHER", ""));
                    objRow.setValue("VALUE_DATE", UtilFunctions.getString(rsTmp, "VALUE_DATE", "0000-00-00"));
                    objRow.setValue("SALES_REMARKS", UtilFunctions.getString(rsTmp, "SALES_REMARKS", ""));
                    objRow.setValue("AUDIT_REMARKS", UtilFunctions.getString(rsTmp, "AUDTI_REMARKS", ""));
                    objRow.setValue("F6", UtilFunctions.getString(rsTmp, "F6", ""));
                    objRow.setValue("DAY1", UtilFunctions.getString(rsTmp, "DAY1", ""));

                    objReportData.AddRow(objRow);

                    rsTmp.next();
                }
            }

            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            //  int Monthtype = cmbMonthType.getSelectedIndex();
            HashMap Parameters = new HashMap();
            Parameters.put("MONTH", (String) cmbMonthType.getSelectedItem());
            Parameters.put("YEAR", (String) cmbYear.getSelectedItem());
            Parameters.put("SYS_DATE", EITLERPGLOBAL.getCurrentDate());

            objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Production/rptf6Report.rpt", Parameters, objReportData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
