/*
 * frmFeltExportInvoice.java
 *
 * Created on June 19, 2013, 5:27 PM
 */

package EITLERP.Production.FeltExportInvoice;

/**
 *
 * @author  VIVEK KUMAR
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.net.URL;
import java.text.DecimalFormat;

import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.LOV;
import TReportWriter.NumWord;

public class frmFeltExportInvoice extends javax.swing.JApplet {    
    private int EditMode=0;
    private char invoiceType='0';
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    private boolean DoNotEvaluate=false;
    
    private clsFeltExportInvoice ObjFeltExportInvoice;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel=new EITLTableModel();
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmFeltExportInvoice */
    public void init() {
        System.gc();
        setSize(900,600);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjFeltExportInvoice=new clsFeltExportInvoice();
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        if(ObjFeltExportInvoice.LoadData()) {
            DisplayData();
        }else{
            JOptionPane.showMessageDialog(this,"Error occured while Loading Data. Error is "+ObjFeltExportInvoice.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemRealExport = new javax.swing.JMenuItem();
        jMenuItemDeemedExport = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtPreCarriagedBy = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        txtOrderNo = new javax.swing.JTextField();
        txtPartyCode = new EITLERP.Production.SDMLTextField(6,"Press F1");
        txtPreCarriageReceiptPlace = new javax.swing.JTextField();
        txtLoadingPort = new javax.swing.JTextField();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtOrderDate = new javax.swing.JTextField();
        txtPartyName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDischargePort = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtBaleSize = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtFinalDestination = new javax.swing.JTextField();
        txtFinalDestinationCountry = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtDeliveryTerm = new javax.swing.JTextField();
        txtPaymentTerm = new javax.swing.JTextField();
        txtFeltDescription = new javax.swing.JTextField();
        cmdDeliveryTermBig = new javax.swing.JButton();
        cmdPaymentTermBig = new javax.swing.JButton();
        cmdFeltDescriptionBig = new javax.swing.JButton();
        txtRate = new javax.swing.JTextField();
        txtGrossWeight = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtTotalPieces = new javax.swing.JTextField();
        txtTotalAmount = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtImportExportCode = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtTotalWeight = new javax.swing.JTextField();
        txtPanNo = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        txtSquareMeters = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtPacking = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdBackToNormal = new javax.swing.JButton();
        cmdViewRevisions = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemRealExport.setText("Real Export");
        jMenuItemRealExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRealExportActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemRealExport);

        jMenuItemDeemedExport.setText("Deemed Export");
        jMenuItemDeemedExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeemedExportActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemDeemedExport);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 880, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" FELT EXPORT INVOICE DETAILS - ");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 880, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        jLabel3.setText("Invoice No.");
        Tab1.add(jLabel3);
        jLabel3.setBounds(5, 12, 70, 15);

        txtInvoiceNo.setFont(new java.awt.Font("Dialog", 1, 14));
        txtInvoiceNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtInvoiceNo.setName("");
        txtInvoiceNo.setEnabled(false);
        txtInvoiceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceNoFocusGained(evt);
            }
        });

        Tab1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(75, 10, 90, 21);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(12, 226, 840, 170);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setToolTipText("Add Row");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(560, 402, 80, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(652, 402, 86, 25);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(7, 220, 850, 4);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(750, 402, 102, 25);

        jLabel5.setText("Pre Carriage By");
        Tab1.add(jLabel5);
        jLabel5.setBounds(455, 12, 94, 15);

        txtPreCarriagedBy.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPreCarriagedBy.setName("");
        txtPreCarriagedBy.setEnabled(false);
        Tab1.add(txtPreCarriagedBy);
        txtPreCarriagedBy.setBounds(555, 10, 100, 19);

        lblRevNo.setFont(new java.awt.Font("Dialog", 1, 14));
        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(167, 12, 60, 18);

        txtOrderNo.setFont(new java.awt.Font("Dialog", 1, 14));
        txtOrderNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtOrderNo.setName("");
        txtOrderNo.setEnabled(false);
        Tab1.add(txtOrderNo);
        txtOrderNo.setBounds(75, 40, 90, 21);

        txtPartyCode.setFont(new java.awt.Font("Dialog", 1, 14));
        txtPartyCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPartyCode.setName("");
        txtPartyCode.setEnabled(false);
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(75, 70, 90, 21);

        txtPreCarriageReceiptPlace.setToolTipText("Pre Carrier Receipt Place");
        txtPreCarriageReceiptPlace.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPreCarriageReceiptPlace.setName("");
        txtPreCarriageReceiptPlace.setEnabled(false);
        Tab1.add(txtPreCarriageReceiptPlace);
        txtPreCarriageReceiptPlace.setBounds(555, 40, 100, 19);

        txtLoadingPort.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtLoadingPort.setName("");
        txtLoadingPort.setEnabled(false);
        Tab1.add(txtLoadingPort);
        txtLoadingPort.setBounds(750, 10, 100, 19);

        txtInvoiceDate.setFont(new java.awt.Font("Dialog", 1, 14));
        txtInvoiceDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtInvoiceDate.setName("");
        txtInvoiceDate.setEnabled(false);
        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(340, 10, 100, 21);

        jLabel6.setText("Invoice Date");
        Tab1.add(jLabel6);
        jLabel6.setBounds(260, 12, 80, 15);

        txtOrderDate.setFont(new java.awt.Font("Dialog", 1, 14));
        txtOrderDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtOrderDate.setName("");
        txtOrderDate.setEnabled(false);
        Tab1.add(txtOrderDate);
        txtOrderDate.setBounds(340, 40, 100, 21);

        txtPartyName.setToolTipText("Party Name");
        txtPartyName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPartyName.setName("");
        txtPartyName.setEnabled(false);
        Tab1.add(txtPartyName);
        txtPartyName.setBounds(170, 70, 270, 21);

        jLabel4.setText("Order No.");
        Tab1.add(jLabel4);
        jLabel4.setBounds(5, 42, 60, 15);

        jLabel7.setText("Order Date");
        Tab1.add(jLabel7);
        jLabel7.setBounds(260, 42, 70, 15);

        jLabel8.setText("Party Code");
        Tab1.add(jLabel8);
        jLabel8.setBounds(5, 72, 70, 15);

        jLabel9.setText("Carri. Rec. Place");
        Tab1.add(jLabel9);
        jLabel9.setBounds(455, 42, 96, 15);

        jLabel10.setText("Loading Port");
        Tab1.add(jLabel10);
        jLabel10.setBounds(670, 12, 80, 15);

        txtDischargePort.setToolTipText("Discharge Port");
        txtDischargePort.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDischargePort.setName("");
        txtDischargePort.setEnabled(false);
        Tab1.add(txtDischargePort);
        txtDischargePort.setBounds(750, 40, 100, 19);

        jLabel11.setText("Disch. Port");
        Tab1.add(jLabel11);
        jLabel11.setBounds(670, 42, 70, 15);

        jLabel12.setText("Bale Size");
        Tab1.add(jLabel12);
        jLabel12.setBounds(455, 132, 60, 15);

        txtBaleSize.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtBaleSize.setName("");
        txtBaleSize.setEnabled(false);
        Tab1.add(txtBaleSize);
        txtBaleSize.setBounds(555, 130, 100, 19);

        jLabel13.setText("Rate");
        Tab1.add(jLabel13);
        jLabel13.setBounds(5, 192, 30, 15);

        jLabel14.setText("Final Destin.");
        Tab1.add(jLabel14);
        jLabel14.setBounds(670, 72, 80, 15);

        txtFinalDestination.setToolTipText("Final Destination");
        txtFinalDestination.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFinalDestination.setName("");
        txtFinalDestination.setEnabled(false);
        Tab1.add(txtFinalDestination);
        txtFinalDestination.setBounds(750, 70, 100, 19);

        txtFinalDestinationCountry.setToolTipText("Final Destination Country");
        txtFinalDestinationCountry.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFinalDestinationCountry.setName("");
        txtFinalDestinationCountry.setEnabled(false);
        Tab1.add(txtFinalDestinationCountry);
        txtFinalDestinationCountry.setBounds(555, 70, 100, 19);

        jLabel15.setText("Destin. Country");
        Tab1.add(jLabel15);
        jLabel15.setBounds(455, 72, 100, 15);

        jLabel16.setText("Felt Desc.");
        Tab1.add(jLabel16);
        jLabel16.setBounds(5, 102, 60, 15);

        jLabel17.setText("Deliv Term");
        Tab1.add(jLabel17);
        jLabel17.setBounds(5, 132, 70, 15);

        jLabel18.setText("Pay. Term");
        Tab1.add(jLabel18);
        jLabel18.setBounds(5, 162, 60, 15);

        txtDeliveryTerm.setToolTipText("Delivery Term");
        txtDeliveryTerm.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDeliveryTerm.setName("");
        txtDeliveryTerm.setEnabled(false);
        Tab1.add(txtDeliveryTerm);
        txtDeliveryTerm.setBounds(75, 130, 320, 21);

        txtPaymentTerm.setToolTipText("Payment Term");
        txtPaymentTerm.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPaymentTerm.setName("");
        txtPaymentTerm.setEnabled(false);
        Tab1.add(txtPaymentTerm);
        txtPaymentTerm.setBounds(75, 160, 320, 21);

        txtFeltDescription.setToolTipText("Felt Description");
        txtFeltDescription.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFeltDescription.setName("");
        txtFeltDescription.setEnabled(false);
        Tab1.add(txtFeltDescription);
        txtFeltDescription.setBounds(75, 100, 320, 21);

        cmdDeliveryTermBig.setText("...");
        cmdDeliveryTermBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeliveryTermBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdDeliveryTermBig);
        cmdDeliveryTermBig.setBounds(398, 130, 43, 21);

        cmdPaymentTermBig.setText("...");
        cmdPaymentTermBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPaymentTermBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdPaymentTermBig);
        cmdPaymentTermBig.setBounds(398, 160, 43, 21);

        cmdFeltDescriptionBig.setText("...");
        cmdFeltDescriptionBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFeltDescriptionBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdFeltDescriptionBig);
        cmdFeltDescriptionBig.setBounds(398, 100, 43, 21);

        txtRate.setFont(new java.awt.Font("Dialog", 1, 14));
        txtRate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRate.setName("");
        txtRate.setEnabled(false);
        Tab1.add(txtRate);
        txtRate.setBounds(75, 192, 90, 21);

        txtGrossWeight.setFont(new java.awt.Font("Dialog", 1, 14));
        txtGrossWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtGrossWeight.setName("");
        txtGrossWeight.setEnabled(false);
        Tab1.add(txtGrossWeight);
        txtGrossWeight.setBounds(555, 162, 100, 21);

        jLabel19.setText("Total Pieces");
        Tab1.add(jLabel19);
        jLabel19.setBounds(190, 404, 75, 15);

        txtTotalPieces.setFont(new java.awt.Font("Dialog", 1, 14));
        txtTotalPieces.setToolTipText("No. Of Pieces");
        txtTotalPieces.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalPieces.setName("");
        txtTotalPieces.setEnabled(false);
        Tab1.add(txtTotalPieces);
        txtTotalPieces.setBounds(265, 402, 40, 21);

        txtTotalAmount.setFont(new java.awt.Font("Dialog", 1, 14));
        txtTotalAmount.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalAmount.setName("");
        txtTotalAmount.setEnabled(false);
        Tab1.add(txtTotalAmount);
        txtTotalAmount.setBounds(420, 402, 100, 21);

        jLabel20.setText("Total Amount");
        Tab1.add(jLabel20);
        jLabel20.setBounds(333, 404, 86, 15);

        jLabel24.setText("Imp. Exp. Code");
        Tab1.add(jLabel24);
        jLabel24.setBounds(455, 102, 92, 15);

        txtImportExportCode.setToolTipText("Import Export Code");
        txtImportExportCode.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtImportExportCode.setName("");
        txtImportExportCode.setEnabled(false);
        Tab1.add(txtImportExportCode);
        txtImportExportCode.setBounds(555, 100, 100, 19);

        jLabel25.setText("Gross Weight");
        Tab1.add(jLabel25);
        jLabel25.setBounds(455, 162, 90, 15);

        jLabel27.setText("Total Weight");
        Tab1.add(jLabel27);
        jLabel27.setBounds(10, 404, 80, 15);

        txtTotalWeight.setFont(new java.awt.Font("Dialog", 1, 14));
        txtTotalWeight.setToolTipText("Net Weight");
        txtTotalWeight.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTotalWeight.setName("");
        txtTotalWeight.setEnabled(false);
        Tab1.add(txtTotalWeight);
        txtTotalWeight.setBounds(90, 402, 80, 21);

        txtPanNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPanNo.setName("");
        txtPanNo.setEnabled(false);
        Tab1.add(txtPanNo);
        txtPanNo.setBounds(750, 100, 100, 19);

        jLabel28.setText("Sqr. Meters");
        Tab1.add(jLabel28);
        jLabel28.setBounds(670, 162, 70, 15);

        txtSquareMeters.setFont(new java.awt.Font("Dialog", 1, 14));
        txtSquareMeters.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtSquareMeters.setName("");
        txtSquareMeters.setEnabled(false);
        Tab1.add(txtSquareMeters);
        txtSquareMeters.setBounds(750, 162, 100, 21);

        jLabel29.setText("Pan No.");
        Tab1.add(jLabel29);
        jLabel29.setBounds(670, 102, 50, 15);

        jLabel30.setText("Packing");
        Tab1.add(jLabel30);
        jLabel30.setBounds(670, 132, 50, 15);

        txtPacking.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPacking.setName("");
        txtPacking.setEnabled(false);
        Tab1.add(txtPacking);
        txtPacking.setBounds(750, 130, 100, 19);

        Tab.addTab("Invoice Details", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 230, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14));
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 230, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 660, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 230, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 230, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 710, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(580, 311, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(755, 94, 43, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(693, 311, 102, 25);

        Tab.addTab("Approval", Tab2);

        Tab3.setLayout(null);

        Tab3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        Tab3.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        Tab3.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 840, 160);

        lblDocumentHistory.setText("Document Update History");
        Tab3.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 202, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        Tab3.add(jScrollPane3);
        jScrollPane3.setBounds(10, 220, 720, 190);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });

        Tab3.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(740, 384, 110, 25);

        cmdBackToNormal.setText("Back To Normal");
        cmdBackToNormal.setMargin(new java.awt.Insets(2, 3, 2, 3));
        cmdBackToNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToNormalActionPerformed(evt);
            }
        });

        Tab3.add(cmdBackToNormal);
        cmdBackToNormal.setBounds(740, 250, 110, 25);

        cmdViewRevisions.setText("View Revisions");
        cmdViewRevisions.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdViewRevisions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewRevisionsActionPerformed(evt);
            }
        });

        Tab3.add(cmdViewRevisions);
        cmdViewRevisions.setBounds(740, 220, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        Tab3.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(740, 280, 110, 25);

        Tab.addTab("Status", Tab3);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 870, 460);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(2, 528, 870, 22);

    }//GEN-END:initComponents

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyReleased

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {//Only Process keys when in editing mode
                if(evt.getKeyCode()==112){ //F1 Key pressed
                    LOV aList=new LOV();
                    aList.SQL="SELECT PARTY_CODE, PARTY_NAME FROM D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE=210010";
                    aList.ReturnCol=1;
                    aList.SecondCol=2; //to get Second Value
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=1;
                    
                    if(aList.ShowLOV()) {
                        txtPartyCode.setText(aList.ReturnVal);
                        txtPartyName.setText(aList.SecondVal);
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        try {
            if(EditMode!=0) {//Only Process keys when in editing mode
                if(evt.getKeyCode()==112){ //F1 Key pressed
                    if(Table.getSelectedColumn()==1) {
                        LOV aList=new LOV();
                  //      aList.SQL="SELECT PIECE_NO, PRODUCT_CD FROM PRODUCTION.FELT_PIECE_REGISTER WHERE REMARK='IN STOCK'";
                        aList.SQL="SELECT PIECE_NO, PRODUCT_CD FROM PRODUCTION.FELT_PIECE_REGISTER";
                        aList.ReturnCol=1;
                        //aList.SecondCol=2; //to get Second Value
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=1;
                        
                        if(aList.ShowLOV()) {
                            if(Table.getCellEditor()!=null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),1);
                        }
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmdPaymentTermBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPaymentTermBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtPaymentTerm;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdPaymentTermBigActionPerformed
    
    private void cmdDeliveryTermBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeliveryTermBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtDeliveryTerm;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdDeliveryTermBigActionPerformed
    
    private void cmdFeltDescriptionBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFeltDescriptionBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFeltDescription;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFeltDescriptionBigActionPerformed
        
    private void jMenuItemDeemedExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeemedExportActionPerformed
        lblRevNo.setText("Deemed");
        invoiceType='7';
        txtInvoiceNo.setText(ObjFeltExportInvoice.getInvoiceNo(invoiceType));
        Add();
    }//GEN-LAST:event_jMenuItemDeemedExportActionPerformed
    
    private void jMenuItemRealExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRealExportActionPerformed
        lblRevNo.setText("Real");
        invoiceType='8';
        txtInvoiceNo.setText(ObjFeltExportInvoice.getInvoiceNo(invoiceType));
        Add();
    }//GEN-LAST:event_jMenuItemRealExportActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        try {
            String amountWord=new NumWord().convertNumToWord((int)Float.parseFloat(txtTotalAmount.getText().trim())).toUpperCase();
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltExportInvoice.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&INV_NO="+txtInvoiceNo.getText().trim()+"&INV_DATE="+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim())+"&AMT_WORD="+amountWord);
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        try {
            String amountWord=new NumWord().convertNumToWord((int)Float.parseFloat(txtTotalAmount.getText().trim())).toUpperCase();
            URL reportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltExportInvoice.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&INV_NO="+txtInvoiceNo.getText().trim()+"&INV_DATE="+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText().trim())+"&AMT_WORD="+amountWord);
            EITLERPGLOBAL.loginContext.showDocument(reportFile,"_blank");
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this,"File error "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(this,"Select a row from Document Update History","ERROR",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdBackToNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToNormalActionPerformed
        ObjFeltExportInvoice.HistoryView = false;
        ObjFeltExportInvoice.LoadData();
        MoveLast();
    }//GEN-LAST:event_cmdBackToNormalActionPerformed
    
    private void cmdViewRevisionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewRevisionsActionPerformed
        ObjFeltExportInvoice.ShowHistory(EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()), txtInvoiceNo.getText());
        MoveLast();
    }//GEN-LAST:event_cmdViewRevisionsActionPerformed
    
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
    
    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtInvoiceDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        lblStatus.setText("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        lblStatus.setText("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        lblStatus.setText("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        lblStatus.setText("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtInvoiceNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceNoFocusGained
        lblStatus.setText("Enter Invoice Date.");
    }//GEN-LAST:event_txtInvoiceNoFocusGained
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(clsFeltProductionApprovalFlow.IsOnceRejectedDoc(713,ObjFeltExportInvoice.getAttribute("DOC_NO").getString())) {
                cmbSendTo.setEnabled(true);
            }else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjFeltExportInvoice.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        if(JOptionPane.showConfirmDialog(this,"Are you sure want to delete this record ?","DELETE RECORD",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        jPopupMenu.show(cmdNew, 0, 35);
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        if(txtRate.getText().equals("") || txtRate.getText().equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Rate of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        Object[] rowData=new Object[6];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="0.00";
        rowData[4]="0.00";
        rowData[5]="";
        
        DataModel.addRow(rowData);
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToNormal;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDeliveryTermBig;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFeltDescriptionBig;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPaymentTermBig;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewRevisions;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItemDeemedExport;
    private javax.swing.JMenuItem jMenuItemRealExport;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtBaleSize;
    private javax.swing.JTextField txtDeliveryTerm;
    private javax.swing.JTextField txtDischargePort;
    private javax.swing.JTextField txtFeltDescription;
    private javax.swing.JTextField txtFinalDestination;
    private javax.swing.JTextField txtFinalDestinationCountry;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGrossWeight;
    private javax.swing.JTextField txtImportExportCode;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtLoadingPort;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtOrderNo;
    private javax.swing.JTextField txtPacking;
    private javax.swing.JTextField txtPanNo;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPaymentTerm;
    private javax.swing.JTextField txtPreCarriageReceiptPlace;
    private javax.swing.JTextField txtPreCarriagedBy;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextField txtSquareMeters;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTotalAmount;
    private javax.swing.JTextField txtTotalPieces;
    private javax.swing.JTextField txtTotalWeight;
    // End of variables declaration//GEN-END:variables
    
    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtInvoiceDate.setEnabled(pStat);  
        txtDeliveryTerm.setEnabled(pStat);
        txtDischargePort.setEnabled(pStat);
        txtFeltDescription.setEnabled(pStat);
        txtFinalDestination.setEnabled(pStat);
        txtFinalDestinationCountry.setEnabled(pStat);
        txtLoadingPort.setEnabled(pStat);
        txtOrderDate.setEnabled(pStat);
        txtOrderNo.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtPaymentTerm.setEnabled(pStat);
        txtPreCarriageReceiptPlace.setEnabled(pStat);
        txtPreCarriagedBy.setEnabled(pStat);
        txtRate.setEnabled(pStat);
        txtTotalAmount.setEnabled(pStat);
        txtTotalWeight.setEnabled(pStat);
        txtTotalPieces.setEnabled(pStat);
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
    }
    
    private void SetRealExportField(boolean status){
        txtBaleSize.setEnabled(status);
        txtPanNo.setEnabled(status);
        txtGrossWeight.setEnabled(status);
        txtImportExportCode.setEnabled(status);
        txtSquareMeters.setEnabled(status);
        txtPacking.setEnabled(status);
    }
    
    private void ClearFields() {
        txtInvoiceDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtPartyCode.setText("");
        txtOrderNo.setText("");
        txtOrderDate.setText("");
        txtFeltDescription.setText("");
        txtDeliveryTerm.setText("");
        txtPaymentTerm.setText("");
        txtTotalAmount.setText("");
        txtPreCarriagedBy.setText("");
        txtPreCarriageReceiptPlace.setText("");
        txtLoadingPort.setText("");
        txtDischargePort.setText("");
        txtFinalDestination.setText("");
        txtFinalDestinationCountry.setText("");
        txtBaleSize.setText("");
        txtImportExportCode.setText("");
        txtPanNo.setText("");
        txtPacking.setText("");
        txtRate.setText("");
        txtGrossWeight.setText("");
        txtSquareMeters.setText("");
        txtTotalWeight.setText("0.000");
        txtTotalAmount.setText("0.00");
        txtTotalPieces.setText("0");
        if(invoiceType=='7'){
            txtGrossWeight.setText("0.000");
            txtSquareMeters.setText("0.00");
        }
        
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }
    
    //Display data on the Screen
    private void DisplayData() {
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,713)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
                
        try {
            //=========== Title Bar Color Indication ===============//
            if(EditMode==0) {
                if(ObjFeltExportInvoice.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }else lblTitle.setBackground(Color.GRAY);
                
                if(ObjFeltExportInvoice.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
            }
            //============================================//
            
            String invoiceDate = EITLERPGLOBAL.formatDate(ObjFeltExportInvoice.getAttribute("INVOICE_DATE").getString());
            String invoiceNo= ObjFeltExportInvoice.getAttribute("INVOICE_NO").getString();
            lblTitle.setText(" FELT EXPORT INVOICE DETAILS - "+ invoiceNo);
            lblRevNo.setText(Integer.toString((int)ObjFeltExportInvoice.getAttribute("REVISION_NO").getVal()));
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,ObjFeltExportInvoice.getAttribute("HIERARCHY_ID").getInt());
            DoNotEvaluate=true;
            
            txtInvoiceNo.setText(invoiceNo);
            txtInvoiceDate.setText(invoiceDate);
            txtPartyCode.setText(ObjFeltExportInvoice.getAttribute("PARTY_CODE").getString());
            txtOrderNo.setText(ObjFeltExportInvoice.getAttribute("ORDER_NO").getString());
            txtOrderDate.setText(EITLERPGLOBAL.formatDate(ObjFeltExportInvoice.getAttribute("ORDER_DATE").getString()));
            txtFeltDescription.setText(ObjFeltExportInvoice.getAttribute("FELT_DESCRIPTION").getString());
            txtDeliveryTerm.setText(ObjFeltExportInvoice.getAttribute("DELIVERY_TERM").getString());
            txtPaymentTerm.setText(ObjFeltExportInvoice.getAttribute("PAYMENT_TERM").getString());
            txtTotalAmount.setText(Float.toString((float)ObjFeltExportInvoice.getAttribute("TOTAL_AMOUNT").getVal()));
            txtPreCarriagedBy.setText(ObjFeltExportInvoice.getAttribute("PRE_CARRIAGE_BY").getString());
            txtPreCarriageReceiptPlace.setText(ObjFeltExportInvoice.getAttribute("CARRIAGE_RECEIPT_PLACE").getString());
            txtLoadingPort.setText(ObjFeltExportInvoice.getAttribute("LOADING_PORT").getString());
            txtDischargePort.setText(ObjFeltExportInvoice.getAttribute("DISCHARGE_PORT").getString());
            txtFinalDestination.setText(ObjFeltExportInvoice.getAttribute("FINAL_DESTINATION").getString());
            txtFinalDestinationCountry.setText(ObjFeltExportInvoice.getAttribute("DESTINATION_COUNTRY").getString());
            txtRate.setText(Float.toString((float)ObjFeltExportInvoice.getAttribute("RATE").getVal()));
            txtBaleSize.setText(ObjFeltExportInvoice.getAttribute("BALE_SIZE").getString());
            txtGrossWeight.setText(Float.toString((float)ObjFeltExportInvoice.getAttribute("GROSS_WEIGHT").getVal()));
            txtTotalWeight.setText(Float.toString((float)ObjFeltExportInvoice.getAttribute("NET_WEIGHT").getVal()));
            txtTotalPieces.setText(Integer.toString(ObjFeltExportInvoice.getAttribute("TOTAL_PIECES").getInt()));
            txtSquareMeters.setText(Float.toString((float)ObjFeltExportInvoice.getAttribute("SQR_MTRS").getVal()));
            txtImportExportCode.setText(ObjFeltExportInvoice.getAttribute("IMP_EXP_CODE").getString());
            txtPanNo.setText(ObjFeltExportInvoice.getAttribute("PAN_NO").getString());
            txtPacking.setText(ObjFeltExportInvoice.getAttribute("PACKING").getString());
            
            //Now Generate Table
            FormatGrid();
            for(int i=1;i<=ObjFeltExportInvoice.hmFeltExportInvoiceDetails.size();i++) {
                clsFeltExportInvoiceDetails ObjFeltExportInvoiceDetails=(clsFeltExportInvoiceDetails)ObjFeltExportInvoice.hmFeltExportInvoiceDetails.get(Integer.toString(i));
                
                Object[] rowData=new Object[6];
                rowData[0]=Integer.toString(i);
                rowData[1]=ObjFeltExportInvoiceDetails.getAttribute("PIECE_NO").getString();
                rowData[2]=ObjFeltExportInvoiceDetails.getAttribute("FELT_SIZE").getString();
                rowData[3]=Double.toString(EITLERPGLOBAL.round(ObjFeltExportInvoiceDetails.getAttribute("WEIGHT").getVal(),2));
                rowData[4]=Double.toString(EITLERPGLOBAL.round(ObjFeltExportInvoiceDetails.getAttribute("AMOUNT").getVal(),2));
                rowData[5]=ObjFeltExportInvoiceDetails.getAttribute("BALE_NO").getString();
                
                DataModel.addRow(rowData);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            hmList=clsFeltProductionApprovalFlow.getDocumentFlow(713, ObjFeltExportInvoice.getAttribute("DOC_NO").getString());
            for(int i=1;i<=hmList.size();i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString())+ ObjFlow.getAttribute("RECEIVED_DATE").getString().substring(10,19);
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString())+ ObjFlow.getAttribute("ACTION_DATE").getString().substring(10,19);
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //============================================================//
            
            // Generating Grid for Showing Production Details Update History
            FormatGridUpdateHistory();
            HashMap hmApprovalHistory=clsFeltExportInvoice.getHistoryList(ObjFeltExportInvoice.getAttribute("INVOICE_DATE").getString(), invoiceNo);
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsFeltExportInvoice ObjFeltExportInvoice=(clsFeltExportInvoice)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjFeltExportInvoice.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(2, (int)ObjFeltExportInvoice.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate(ObjFeltExportInvoice.getAttribute("ENTRY_DATE").getString()) + ObjFeltExportInvoice.getAttribute("ENTRY_DATE").getString().substring(10,19);
                
                String ApprovalStatus="";
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if((ObjFeltExportInvoice.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]=ObjFeltExportInvoice.getAttribute("APPROVER_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    private void FormatGrid() {
        
        try {
            cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr. No.");
            DataModel.addColumn("Piece No");
            DataModel.addColumn("Felt Size");
            DataModel.addColumn("Weight");
            DataModel.addColumn("Amount");
            DataModel.addColumn("Bale No");
            
            if(invoiceType=='8') {
                DataModel.SetReadOnly(3);
                DataModel.SetReadOnly(5);
            }
            
            DataModel.SetReadOnly(0);
            
            TableColumnModel tcm= Table.getColumnModel();
            tcm.getColumn(0).setPreferredWidth(50);
            tcm.getColumn(1).setPreferredWidth(70);
            tcm.getColumn(2).setPreferredWidth(80);
            tcm.getColumn(3).setPreferredWidth(80);
            tcm.getColumn(4).setPreferredWidth(80);
            tcm.getColumn(5).setPreferredWidth(70);
            
            if(EditMode!=0){
                //------- Install Table List Selection Listener ------//
                Table.getColumnModel().getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int column=Table.getSelectedColumn();
                        String strVar=DataModel.getVariable(column);
                        //=============== Cell Editing Routine =======================//
                        Table.editCellAt(Table.getSelectedRow(),column);
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                        //============= Cell Editing Routine Ended =================//
                    }
                });
                
                //----- Install Table Model Event Listener For Displaying Amount -------//
                Table.getModel().addTableModelListener(new TableModelListener() {
                    public void tableChanged(TableModelEvent e) {
                        if (e.getType() == TableModelEvent.UPDATE) {
                            int row = Table.getSelectedRow();
                            int column = e.getColumn();
                            
                            //=========== Cell Update Prevention Check ===========//
                            String curValue=((String)Table.getValueAt(row, column)).trim();
                            if(curValue.equals("")) {
                                return;
                            }
                            //====================================================//
                            if(DoNotEvaluate) {
                                return;
                            }
                            
                            if(column==1){
                                String pieceDetails[]=ObjFeltExportInvoice.getPieceDetails(((String)Table.getValueAt(row,1)).trim());
                                Table.setValueAt(pieceDetails[0], row, 2);
                                Table.setValueAt(pieceDetails[1], row, 3);
                                
                                // setting amount for real export
                                if(invoiceType=='8'){
                                    Table.setValueAt(Double.toString(EITLERPGLOBAL.round(Double.parseDouble(txtRate.getText().trim()), 2)), row, 4);
                                }
                            }
                            
                            // setting amount for deemed export
                            if(column==3 && invoiceType=='7'){
                                Table.setValueAt(Double.toString(EITLERPGLOBAL.round(Float.parseFloat(((String)Table.getValueAt(row,3)).trim())*Float.parseFloat(txtRate.getText().trim()), 2)), row, 4);
                            }
                            
                            //---seting total weight , total pieces, total amount to textboxes------------------------------
                            float totalWeight=0, totalAmount=0;
                            for(int i=0;i<Table.getRowCount();i++) {
                                if(((String)Table.getValueAt(i,1)).trim()!=null) {
                                    totalWeight+=Float.parseFloat(((String)Table.getValueAt(i,3)).trim());
                                    txtTotalWeight.setText(Double.toString(EITLERPGLOBAL.round(totalWeight,2)));
                                    
                                    txtTotalPieces.setText(Integer.toString(Table.getRowCount()));
                                    
                                    totalAmount+=Float.parseFloat(((String)Table.getValueAt(i,4)).trim());
                                    txtTotalAmount.setText(Integer.toString((int)totalAmount));
                                }
                            }
                            //---------------------------------------------------------------------------------
                        }
                    }
                });
            }
        }catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        //Table formatting completed
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=713 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=713 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList= clsFeltProductionApprovalFlow.getRemainingUsers(713,ObjFeltExportInvoice.getAttribute("DOC_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                
                if(OpgApprove.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInApproval(713, ObjFeltExportInvoice.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=clsFeltProductionApprovalFlow.IncludeUserInRejection(713, ObjFeltExportInvoice.getAttribute("DOC_NO").getString(), ObjUser.getAttribute("USER_ID").getInt(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }else {
                if((ObjUser.getAttribute("USER_ID").getInt())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=clsFeltProductionApprovalFlow.getCreator(713,ObjFeltExportInvoice.getAttribute("DOC_NO").getString());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
            cmbHierarchy.setEnabled(true);
        }else {
            cmbHierarchy.setEnabled(false);
        }*/
        // select hold for default approval
        OpgHold.setSelected(true);
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=clsFeltProductionApprovalFlow.getFromID(713,ObjFeltExportInvoice.getAttribute("DOC_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=clsFeltProductionApprovalFlow.getFromRemarks(713,FromUserID,ObjFeltExportInvoice.getAttribute("DOC_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //In Edit Mode Hierarchy and Reject Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            if(clsFeltProductionApprovalFlow.IsCreator(713, ObjFeltExportInvoice.getAttribute("DOC_NO").getString()) ){
                OpgReject.setEnabled(false);
            }
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7014,70141)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7014,70142)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7014,70143)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 7014,70144)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        if(invoiceType=='8') SetRealExportField(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        lblTitle.setBackground(Color.GRAY);
    }
    
    private void Edit() {
        if(ObjFeltExportInvoice.IsEditable(txtInvoiceNo.getText(), ObjFeltExportInvoice.getAttribute("INVOICE_DATE").getString(), EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            invoiceType=txtInvoiceNo.getText().charAt(1);
            if(clsFeltProductionApprovalFlow.IsCreator(713,ObjFeltExportInvoice.getAttribute("DOC_NO").getString())) {
                SetFields(true);
                if(invoiceType=='8') SetRealExportField(true);
                txtInvoiceDate.setEnabled(false);
            }else {
                EnableApproval();
            }
        }else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //----------------------------------//
        
        if(ObjFeltExportInvoice.CanDelete(txtInvoiceNo.getText(),txtInvoiceDate.getText(), EITLERPGLOBAL.gNewUserID)){
            DisplayData();
        }else {
            JOptionPane.showMessageDialog(this,ObjFeltExportInvoice.LastError);
        }
    }
    
    private void Save() {
        String invoiceDate, invoiceNo, orderNo="", orderDate="", partyCode="", feltDescription="",
        deliveryTerm="", paymentTerm="", totalAmountString="", preCarriagedBy="",
        preCarriageReceiptPlace="", loadingPort="", dischargePort="", finalDestination="",
        destinationCountry="", rateString="", baleSize="",grossWeightString="", netWeightString="",
        totalPiecesString="", squareMetersString="", importExportCode="", panNo="", packing="";
        float squareMeters=0, grossKg=0, rate=0, grossWeight=0, netWeight=0, totalAmount=0;
        int i=0, j=0, totalPieces=0;
        
        invoiceNo = txtInvoiceNo.getText().trim();
        invoiceDate = txtInvoiceDate.getText().trim();
        orderNo = txtOrderNo.getText().trim();
        orderDate = txtOrderDate.getText().trim();
        partyCode = txtPartyCode.getText().trim();
        feltDescription = txtFeltDescription.getText().trim();
        deliveryTerm = txtDeliveryTerm.getText().trim();
        paymentTerm = txtPaymentTerm.getText().trim();
        totalAmountString = txtTotalAmount.getText().trim();
        preCarriagedBy = txtPreCarriagedBy.getText().trim();
        preCarriageReceiptPlace = txtPreCarriageReceiptPlace.getText().trim();
        loadingPort = txtLoadingPort.getText().trim();
        dischargePort = txtDischargePort.getText().trim();
        finalDestination = txtFinalDestination.getText().trim();
        destinationCountry = txtFinalDestinationCountry.getText().trim();
        rateString = txtRate.getText().trim();
        baleSize = txtBaleSize.getText().trim().toUpperCase();
        grossWeightString = txtGrossWeight.getText().trim();
        netWeightString = txtTotalWeight.getText().trim();
        totalPiecesString = txtTotalPieces.getText().trim();
        squareMetersString = txtSquareMeters.getText().trim();
        importExportCode = txtImportExportCode.getText().trim();
        panNo = txtPanNo.getText().trim();
        packing = txtPacking.getText().trim();
        
        //Form level validations
        if(invoiceDate.equals("") || !EITLERPGLOBAL.isDate(invoiceDate)) {
            JOptionPane.showMessageDialog(this,"Enter Valid Invoice Date","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // check Invoice Date is Within Financial Year?
        java.sql.Date FinFromDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinFromDateDB);
        java.sql.Date FinToDate=java.sql.Date.valueOf(EITLERPGLOBAL.FinToDateDB);
        java.sql.Date InvoiceDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(invoiceDate));
        if((InvoiceDate.after(FinFromDate)||InvoiceDate.compareTo(FinFromDate)==0)&&(InvoiceDate.before(FinToDate)||InvoiceDate.compareTo(FinToDate)==0)) {
            //Within the year
        }else {
            JOptionPane.showMessageDialog(this,"Invoice Date is Not Within Financial Year.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(InvoiceDate.compareTo(java.sql.Date.valueOf(EITLERPGLOBAL.getCurrentDateDB()))>0) {
            JOptionPane.showMessageDialog(this,"Invoice Date Must be Before or the Same Date as Today.","Wrong Invoice Date",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(invoiceNo.equals("")) {
            JOptionPane.showMessageDialog(this,"Enter Invoice No.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(orderNo.equals("") || orderNo.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Order No.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(orderDate.equals("") || !EITLERPGLOBAL.isDate(orderDate)) {
            JOptionPane.showMessageDialog(this,"Enter Valid Order Date.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(loadingPort.equals("") || loadingPort.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Loading Port.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        java.sql.Date OrderDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(orderDate));
        if(OrderDate.compareTo(InvoiceDate)>0) {
            JOptionPane.showMessageDialog(this,"Order Date Must be Before or the Same Date as Invoice Date.","Wrong Order Date",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(dischargePort.equals("") || dischargePort.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Discharge Port.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
 //       if(partyCode.equals("") || partyCode.equals(null) || txtPartyName.getText().equals("")) {
        if(partyCode.equals("") || partyCode.equals(null) ) {
            JOptionPane.showMessageDialog(this,"Enter Party Code.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(destinationCountry.equals("") || destinationCountry.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Destination Country.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(finalDestination.equals("") || finalDestination.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Final Destination.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(feltDescription.equals("") || feltDescription.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Felt Description.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*
        if(deliveryTerm.equals("") || deliveryTerm.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Delivery Term.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
         
        if(paymentTerm.equals("") || paymentTerm.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Payment Term.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
         */
        if(invoiceType=='8'){
            if(importExportCode.equals("") || importExportCode.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Import Export Code.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(panNo.equals("") || panNo.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter PAN No.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(baleSize.equals("") || baleSize.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Bale Size.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(packing.equals("") || packing.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Packing.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(squareMetersString.equals("") || squareMetersString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Square Meters.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(grossWeightString.equals("") || grossWeightString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Gross Weight.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(rateString.equals("") || rateString.equals(null)) {
            JOptionPane.showMessageDialog(this,"Enter Rate of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Check the no. of items
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(this,"Enter Invoice Details Before Saving.","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            // check duplicate piece no in table
            for(int k=0;k<=Table.getRowCount()-1;k++) {
                for(int l=k;l<=Table.getRowCount()-1;l++){
                    if(l!=k && ((String)Table.getValueAt(k, 1)).trim().equals(((String)Table.getValueAt(l, 1)).trim()) ){
                        JOptionPane.showMessageDialog(this, "Same Piece No at Row "+(k+1)+" and "+(l+1),"ERROR",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
            
            String pieceNo="", feltSize="", weightString="", amountString="", baleNo="";
            float weight=0, amount=0;
            ObjFeltExportInvoice.hmFeltExportInvoiceDetails.clear();
            //Check the entered details in Table.
            for(i=0;i<=Table.getRowCount()-1;i++) {
                pieceNo = ((String)Table.getValueAt(i, 1)).trim();
                feltSize = ((String)Table.getValueAt(i, 2)).trim().toUpperCase();
                weightString = ((String)Table.getValueAt(i, 3)).trim();
                amountString = ((String)Table.getValueAt(i, 4)).trim();
                baleNo = ((String)Table.getValueAt(i, 5)).trim().toUpperCase();
                
                j++;
                if(pieceNo.equals("") || pieceNo.equals(null)){
                    JOptionPane.showMessageDialog(this,"Enter Piece No.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(feltSize.equals("") || feltSize.equals(null) || !feltSize.contains("X")){
                    JOptionPane.showMessageDialog(this,"Enter Felt Size.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j++;
                if(weightString.equals("") || weightString.equals(null)) {
                    JOptionPane.showMessageDialog(this,"Enter Weight of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }else weight=Float.parseFloat(weightString);
                
                j++;
                if(amountString.equals("") || amountString.equals(null)) {
                    JOptionPane.showMessageDialog(this,"Enter Amount.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }else amount=Float.parseFloat(amountString);
                
                j++;
                if(invoiceType=='7' && (baleNo.equals("") || baleNo.equals(null))){
                    JOptionPane.showMessageDialog(this,"Enter Bale No.","ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                j=0;
                
                // check Felt No. already Exported?
                if(EditMode==EITLERPGLOBAL.ADD) {
                    if(ObjFeltExportInvoice.checkPieceNoInDB(pieceNo)) {
                        JOptionPane.showMessageDialog(frmFeltExportInvoice.this,"Piece No."+pieceNo+" Already Exported."," Piece No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // check Felt No. already Exported?
                if(EditMode==EITLERPGLOBAL.EDIT) {
                    if(ObjFeltExportInvoice.checkPieceNoInDB(pieceNo,invoiceNo, invoiceDate)) {
                        JOptionPane.showMessageDialog(frmFeltExportInvoice.this,"Piece No."+pieceNo+" Already Exported."," Piece No Already Exists",JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            }
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Enter Correct Details at Row "+(i+1) +" and Column "+(j+1)+". Error is : "+nfe.getMessage());
            j=0;
            nfe.printStackTrace();
            return;
        }
        
        try{
            // form level Validation
            if(totalAmountString.equals("") || totalAmountString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Total Amount.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }else totalAmount=Float.parseFloat(totalAmountString);
            
            if(rateString.equals("") || rateString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Rate of Felt.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }else rate = Float.parseFloat(rateString);
            
            if(invoiceType=='8' && (grossWeightString.equals("") || grossWeightString.equals(null))) {
                JOptionPane.showMessageDialog(this,"Enter Gross Weight.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }else grossWeight = Float.parseFloat(grossWeightString);
            
            if(netWeightString.equals("") || netWeightString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Net/Total Weight.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }else netWeight = Float.parseFloat(netWeightString);
            
            if(totalPiecesString.equals("") || totalPiecesString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Total Pieces.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }else totalPieces = Integer.parseInt(totalPiecesString);
            
            if(squareMetersString.equals("") || squareMetersString.equals(null)) {
                JOptionPane.showMessageDialog(this,"Enter Square Meters.","ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }else squareMeters = Float.parseFloat(squareMetersString);
            
        }catch(NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Enter Correct Details. Error is : "+ nfe.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            nfe.printStackTrace();
            return;
        }
        
        if(OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Enter the remarks for rejection","ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected()) && cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(this,"Select the user, to whom rejected document to be send");
            return;
        }
        
        //set data for insert/update
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjFeltExportInvoice.Insert()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjFeltExportInvoice.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjFeltExportInvoice.Update()) {
                DisplayData();
            }else {
                JOptionPane.showMessageDialog(this,"Error occured while saving editing. Error is "+ObjFeltExportInvoice.LastError,"ERROR",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        txtPartyName.setText("");
        txtToRemarks.setText("");
        if(invoiceType=='8') SetRealExportField(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            if(PENDING_DOCUMENT){
                frmPA.RefreshView();
                PENDING_DOCUMENT=false;
            }
        }catch(Exception e){e.printStackTrace();}
    }
    
    //Sets data to the Details Class Object
    private void SetData() {
        String invoiceDate="", invoiceNo="", orderNo="", orderDate="",  partyCode="",feltDescription="",
        deliveryTerm="", paymentTerm="", totalAmountString="", preCarriagedBy="",
        preCarriageReceiptPlace="", loadingPort="", dischargePort="", finalDestination="",
        destinationCountry="", rateString="", baleSize="",grossWeightString="", netWeightString="",
        totalPiecesString="", squareMetersString="", importExportCode="", panNo="", packing="";
        float squareMeters=0, grossKg=0, rate=0, grossWeight=0, netWeight=0, totalAmount=0;
        int totalPieces=0;
        
        invoiceNo = txtInvoiceNo.getText().trim();
        invoiceDate = txtInvoiceDate.getText().trim();
        orderNo = txtOrderNo.getText().trim().toUpperCase();
        orderDate = txtOrderDate.getText().trim().toUpperCase();
        partyCode = txtPartyCode.getText().trim();
        feltDescription = txtFeltDescription.getText().trim().toUpperCase();
        deliveryTerm = txtDeliveryTerm.getText().trim().toUpperCase();
        paymentTerm = txtPaymentTerm.getText().trim().toUpperCase();
        totalAmountString = txtTotalAmount.getText().trim();
        preCarriagedBy = txtPreCarriagedBy.getText().trim().toUpperCase();
        preCarriageReceiptPlace = txtPreCarriageReceiptPlace.getText().trim().toUpperCase();
        loadingPort = txtLoadingPort.getText().trim().toUpperCase();
        dischargePort = txtDischargePort.getText().trim().toUpperCase();
        finalDestination = txtFinalDestination.getText().trim().toUpperCase();
        destinationCountry = txtFinalDestinationCountry.getText().trim().toUpperCase();
        rateString = txtRate.getText().trim();
        baleSize = txtBaleSize.getText().trim().toUpperCase();
        grossWeightString = txtGrossWeight.getText().trim();
        netWeightString = txtTotalWeight.getText().trim();
        totalPiecesString = txtTotalPieces.getText().trim();
        squareMetersString = txtSquareMeters.getText().trim();
        importExportCode = txtImportExportCode.getText().trim().toUpperCase();
        panNo = txtPanNo.getText().trim().toUpperCase();
        packing = txtPacking.getText().trim().toUpperCase();
        
        totalAmount = Float.parseFloat(totalAmountString);
        rate = Float.parseFloat(rateString);
        grossWeight = Float.parseFloat(grossWeightString);
        netWeight = Float.parseFloat(netWeightString);
        totalPieces = Integer.parseInt(totalPiecesString);
        squareMeters = Float.parseFloat(squareMetersString);
        
        ObjFeltExportInvoice.setAttribute("INVOICE_NO",invoiceNo);
        ObjFeltExportInvoice.setAttribute("INVOICE_DATE",invoiceDate);
        ObjFeltExportInvoice.setAttribute("PARTY_CODE",partyCode);
        ObjFeltExportInvoice.setAttribute("ORDER_NO",orderNo);
        ObjFeltExportInvoice.setAttribute("ORDER_DATE",orderDate);
        ObjFeltExportInvoice.setAttribute("FELT_DESCRIPTION",feltDescription);
        ObjFeltExportInvoice.setAttribute("DELIVERY_TERM",deliveryTerm);
        ObjFeltExportInvoice.setAttribute("PAYMENT_TERM",paymentTerm);
        ObjFeltExportInvoice.setAttribute("TOTAL_AMOUNT",totalAmount);
        ObjFeltExportInvoice.setAttribute("PRE_CARRIAGE_BY",preCarriagedBy);
        ObjFeltExportInvoice.setAttribute("CARRIAGE_RECEIPT_PLACE",preCarriageReceiptPlace);
        ObjFeltExportInvoice.setAttribute("LOADING_PORT",loadingPort);
        ObjFeltExportInvoice.setAttribute("DISCHARGE_PORT",dischargePort);
        ObjFeltExportInvoice.setAttribute("FINAL_DESTINATION",finalDestination);
        ObjFeltExportInvoice.setAttribute("DESTINATION_COUNTRY",destinationCountry);
        ObjFeltExportInvoice.setAttribute("RATE",rate);
        ObjFeltExportInvoice.setAttribute("BALE_SIZE",baleSize);
        ObjFeltExportInvoice.setAttribute("GROSS_WEIGHT",grossWeight);
        ObjFeltExportInvoice.setAttribute("NET_WEIGHT",netWeight);
        ObjFeltExportInvoice.setAttribute("TOTAL_PIECES",totalPieces);
        ObjFeltExportInvoice.setAttribute("SQR_MTRS",squareMeters);
        ObjFeltExportInvoice.setAttribute("IMP_EXP_CODE",importExportCode);
        ObjFeltExportInvoice.setAttribute("PAN_NO",panNo);
        ObjFeltExportInvoice.setAttribute("PACKING",packing);
        
        //-------- Update Approval Specific Fields -----------//
        ObjFeltExportInvoice.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjFeltExportInvoice.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjFeltExportInvoice.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjFeltExportInvoice.setAttribute("FROM_REMARKS",txtToRemarks.getText().trim());
        ObjFeltExportInvoice.setAttribute("UPDATED_BY",EITLERPGLOBAL.gNewUserID);
        if(OpgApprove.isSelected()) {
            ObjFeltExportInvoice.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjFeltExportInvoice.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjFeltExportInvoice.setAttribute("APPROVAL_STATUS","R");
            ObjFeltExportInvoice.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjFeltExportInvoice.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjFeltExportInvoice.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
        }else {
            ObjFeltExportInvoice.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
        }
        
        String pieceNo="", feltSize="", weightString="", amountString="", baleNo="";
        float weight=0, amount=0;
        // Insert entered data in hashmap for update or insert
        for(int i=0;i<=Table.getRowCount()-1;i++) {
            clsFeltExportInvoiceDetails ObjFeltExportInvoiceDetails = new clsFeltExportInvoiceDetails();
            
            pieceNo = ((String)Table.getValueAt(i, 1)).trim();
            feltSize = ((String)Table.getValueAt(i, 2)).trim();
            weightString = ((String)Table.getValueAt(i, 3)).trim();
            amountString = ((String)Table.getValueAt(i, 4)).trim();
            baleNo = ((String)Table.getValueAt(i, 5)).trim();
            
            weight=Float.parseFloat(weightString);
            amount=Float.parseFloat(amountString);
            
            ObjFeltExportInvoiceDetails.setAttribute("PIECE_NO",pieceNo);
            ObjFeltExportInvoiceDetails.setAttribute("FELT_SIZE",feltSize);
            ObjFeltExportInvoiceDetails.setAttribute("WEIGHT",weight);
            ObjFeltExportInvoiceDetails.setAttribute("AMOUNT",amount);
            ObjFeltExportInvoiceDetails.setAttribute("BALE_NO",baleNo);
            
            ObjFeltExportInvoice.hmFeltExportInvoiceDetails.put(Integer.toString(ObjFeltExportInvoice.hmFeltExportInvoiceDetails.size()+1), ObjFeltExportInvoiceDetails);
        }
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        if(invoiceType=='8') SetRealExportField(false);
        txtPartyName.setText("");
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Production.FeltExportInvoice.frmFindFeltExportInvoice",true);
        frmFindFeltExportInvoice ObjFindFeltExportInvoice= (frmFindFeltExportInvoice)ObjLoader.getObj();
        
        if(ObjFindFeltExportInvoice.Cancelled==false) {
            if(!ObjFeltExportInvoice.Filter(ObjFindFeltExportInvoice.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmFeltExportInvoice.this," No records found.","Find Felt Weaving Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }

    // find details by doc no
    public void Find(String docNo) {
        ObjFeltExportInvoice.Filter("DOC_NO='"+docNo+"'");
        SetMenuForRights();
        DisplayData();
    }
    
    // find all pending document
    public void FindWaiting() {
        ObjFeltExportInvoice.Filter(" DOC_NO IN (SELECT D.DOC_NO FROM PRODUCTION.FELT_EXPORT_INVOICE_HEADER H, PRODUCTION.FELT_PROD_DOC_DATA D WHERE H.DOC_NO=D.DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=713 AND CANCELED=0) ");
        SetMenuForRights();
        DisplayData();
    }
    
    private void MoveFirst() {
        ObjFeltExportInvoice.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjFeltExportInvoice.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjFeltExportInvoice.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjFeltExportInvoice.MoveLast();
        DisplayData();
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        OpgHold.setSelected(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
        
        TableColumnModel tcm= TableApprovalStatus.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(3).setPreferredWidth(20);
        tcm.getColumn(4).setPreferredWidth(90);
        tcm.getColumn(5).setPreferredWidth(90);
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
        
        TableColumnModel tcm= TableUpdateHistory.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(10);
        tcm.getColumn(2).setPreferredWidth(50);
        tcm.getColumn(3).setPreferredWidth(20);
    }
    
}
