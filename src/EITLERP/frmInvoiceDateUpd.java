/*
 * frmInvoiceDateUpd.java
 *
 * Created on March 12, 2013, 3:10 PM
 */

package EITLERP;

/**
 *
 * @author
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumnModel;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.Action;
import javax.swing.AbstractAction;
import javax.swing.text.JTextComponent;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.util.HashMap;
import java.util.Date;
import EITLERP.*;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.sql.*;
import javax.swing.*;
//import EITLERP.JTextFieldHint;


import EITLERP.EITLComboModel;
import EITLERP.EITLTableModel;
import EITLERP.EITLERPGLOBAL;
import EITLERP.BigEdit;
import EITLERP.clsUser;
import EITLERP.clsDepartment;
import EITLERP.clsHierarchy;
import EITLERP.clsAuthority;
import EITLERP.clsDocFlow;
import EITLERP.ComboData;
import EITLERP.Loader;
import EITLERP.AppletFrame;
import EITLERP.frmPendingApprovals;
import EITLERP.Production.clsFeltProductionApprovalFlow;
import EITLERP.Finance.UtilFunctions;


public class frmInvoiceDateUpd extends javax.swing.JApplet {
    private int EditMode=0;
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromUserId=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    
    public boolean PENDING_DOCUMENT=false; //for refresh pending document module
    private boolean DoNotEvaluate=false;
    
    private clsInvoiceDateUpd ObjInvoiceDateUpd;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    
    //  private EITLComboModel cmbGroupModel;
    
    private EITLTableModel DataModelApprovalStatus;
    private EITLTableModel DataModelUpdateHistory;
    private EITLTableModel DataModel;
    private EITLTableModel DataModelDesc;
    private EITLComboModel cmbMainModel;
    
    public frmPendingApprovals frmPA;
    
    /** Creates new form frmInvoiceDateUpd */
    public void init() {
        System.gc();
        setSize(830,590);
        initComponents();
        GenerateMainCombo();
        
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        DataModel=new EITLTableModel();
        ObjInvoiceDateUpd=new clsInvoiceDateUpd();
        
        SetMenuForRights();
        GenerateHierarchyCombo();
        GenerateSendToCombo();
        // GenerateAmendReasonCombo();
        FormatGrid();
        cmbMainCode.setEnabled(false);
        txtMainCode.setEnabled(false);
        cmbShow.setEnabled(false);
        txtPartycode.setEnabled(false);
        
        if(ObjInvoiceDateUpd.LoadData()) {
            ObjInvoiceDateUpd.MoveLast();
            DisplayData();
        } else {
            JOptionPane.showMessageDialog(null,"Error occured while loading data. \n Error is "+ObjInvoiceDateUpd.LastError);
        }
        
    }
    
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemWarping = new javax.swing.JMenuItem();
        jMenuItemOrder = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtUpdtDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmdNextToTab1 = new javax.swing.JButton();
        txtUpdtNo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPartycode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbShow = new javax.swing.JButton();
        cmbMainCode = new javax.swing.JComboBox();
        txtMainCode = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBackToTab0 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        cmdNextToTab2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableApprovalStatus = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableUpdateHistory = new javax.swing.JTable();
        cmdBackToTab1 = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jMenuItemWarping.setText("Warping Report");
        jMenuItemWarping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemWarpingActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemWarping);

        jMenuItemOrder.setText("Order Detail");
        jMenuItemOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOrderActionPerformed(evt);
            }
        });

        jPopupMenu.add(jMenuItemOrder);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 830, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("INVOICE DATA UPDATE EMTRY FORM ");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 830, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });

        jLabel3.setText("Update Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(510, 10, 100, 15);

        txtUpdtDate.setFont(new java.awt.Font("Dialog", 1, 14));
        txtUpdtDate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtUpdtDate.setEnabled(false);
        txtUpdtDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUpdtDateFocusGained(evt);
            }
        });

        Tab1.add(txtUpdtDate);
        txtUpdtDate.setBounds(640, 10, 120, 21);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TableKeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 760, 280);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setToolTipText("Remove Selected Row");
        cmdRemove.setNextFocusableComponent(cmdNextToTab1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(560, 410, 90, 25);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel3);
        jPanel3.setBounds(10, 100, 770, 6);

        cmdNextToTab1.setMnemonic('N');
        cmdNextToTab1.setText("Next >>");
        cmdNextToTab1.setToolTipText("Next Tab");
        cmdNextToTab1.setNextFocusableComponent(cmdRemove);
        cmdNextToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNextToTab1);
        cmdNextToTab1.setBounds(670, 410, 90, 25);

        txtUpdtNo.setFont(new java.awt.Font("Dialog", 1, 14));
        txtUpdtNo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtUpdtNo.setEnabled(false);
        Tab1.add(txtUpdtNo);
        txtUpdtNo.setBounds(140, 10, 130, 21);

        jLabel1.setText("Update No :");
        Tab1.add(jLabel1);
        jLabel1.setBounds(20, 10, 80, 20);

        jLabel4.setText("Invoice Date :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(500, 40, 90, 15);

        txtInvoiceDate.setEnabled(false);
        txtInvoiceDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInvoiceDateFocusLost(evt);
            }
        });
        txtInvoiceDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInvoiceDateKeyPressed(evt);
            }
        });

        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(640, 40, 120, 20);

        jLabel2.setText("Party Code :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(20, 70, 80, 15);

        txtPartycode = new JTextFieldHint ( new JTextField(),"Search By F1");
        txtPartycode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPartycodeActionPerformed(evt);
            }
        });
        txtPartycode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPartycodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartycodeFocusLost(evt);
            }
        });
        txtPartycode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartycodeKeyPressed(evt);
            }
        });

        Tab1.add(txtPartycode);
        txtPartycode.setBounds(140, 70, 130, 19);
        txtPartycode.getAccessibleContext().setAccessibleParent(Tab);

        jLabel5.setText("Main Code :");
        Tab1.add(jLabel5);
        jLabel5.setBounds(20, 40, 80, 15);

        cmbShow.setText("Show");
        cmbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShowActionPerformed(evt);
            }
        });

        Tab1.add(cmbShow);
        cmbShow.setBounds(280, 70, 100, 25);

        cmbMainCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMainCodeItemStateChanged(evt);
            }
        });

        Tab1.add(cmbMainCode);
        cmbMainCode.setBounds(140, 40, 200, 24);

        txtMainCode.setEnabled(false);
        Tab1.add(txtMainCode);
        txtMainCode.setBounds(360, 40, 80, 19);

        Tab.addTab("Order Details", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(7, 23, 62, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 20, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(7, 62, 33, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        txtFrom.setFont(new java.awt.Font("Dialog", 1, 14));
        txtFrom.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 60, 184, 21);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(7, 97, 61, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 95, 630, 19);

        jLabel36.setText("Your Action");
        Tab2.add(jLabel36);
        jLabel36.setBounds(7, 130, 73, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 150, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 120, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 70, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 130, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(86, 130, 184, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(7, 249, 50, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(86, 245, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(7, 288, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBackToTab0);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(86, 286, 630, 19);

        cmdBackToTab0.setMnemonic('B');
        cmdBackToTab0.setText("<< Back");
        cmdBackToTab0.setToolTipText("Previous Tab");
        cmdBackToTab0.setNextFocusableComponent(cmdRemove);
        cmdBackToTab0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab0ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBackToTab0);
        cmdBackToTab0.setBounds(500, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(728, 94, 43, 21);

        cmdNextToTab2.setMnemonic('N');
        cmdNextToTab2.setText("Next >>");
        cmdNextToTab2.setToolTipText("Next Tab");
        cmdNextToTab2.setNextFocusableComponent(cmdRemove);
        cmdNextToTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextToTab2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNextToTab2);
        cmdNextToTab2.setBounds(620, 350, 102, 25);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(8, 5, 170, 15);

        TableApprovalStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableApprovalStatus.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(TableApprovalStatus);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 24, 760, 150);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(8, 191, 163, 15);

        TableUpdateHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableUpdateHistory.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(TableUpdateHistory);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(10, 210, 640, 180);

        cmdBackToTab1.setMnemonic('B');
        cmdBackToTab1.setText("<< Back");
        cmdBackToTab1.setToolTipText("Previous Tab");
        cmdBackToTab1.setIconTextGap(0);
        cmdBackToTab1.setNextFocusableComponent(cmdRemove);
        cmdBackToTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackToTab1ActionPerformed(evt);
            }
        });

        jPanel1.add(cmdBackToTab1);
        cmdBackToTab1.setBounds(662, 390, 110, 25);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.setMargin(new java.awt.Insets(2, 5, 2, 5));
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(662, 270, 110, 25);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 80, 800, 470);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 570, 800, 22);

    }//GEN-END:initComponents

    private void cmbMainCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMainCodeItemStateChanged
     
        
        lblStatus.setText( Integer.toString(cmbMainCode.getSelectedIndex()));
     int MainCode =  cmbMainCode.getSelectedIndex();
     txtMainCode.setText( Integer.toString(cmbMainCode.getSelectedIndex()));
       
    }//GEN-LAST:event_cmbMainCodeItemStateChanged

    private void txtInvoiceDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvoiceDateKeyPressed
      /*
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT INVOICE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER ORDER BY INVOICE_DATE";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            //aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtInvoiceDate.setText(aList.ReturnVal);
               
                
            }// TODO add your handling code here:
        } */       // TODO add your handling code here:
    }//GEN-LAST:event_txtInvoiceDateKeyPressed

    private void txtInvoiceDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceDateFocusLost
        /* 
        try{
            if(!txtInvoiceDate.getText().equals("")){
                String strSQL="";
                strSQL= "";
                
                ResultSet rsTmp;
                //strSQL+="SELECT NAME,AD1,AD2,STATION,CHG_IND_2,TRANS_CD,INS_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = "+txtPartycode.getText().trim()+"";
                //strSQL+="SELECT PARTY_NAME,DISPATCH_STATION,CONTACT_PERSON FROM (SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS FPM LEFT JOIN (SELECT * FROM PRODUCTION.FELT_PARTY_EXTRA_INFO) AS FPEI ON FPM.PARTY_CODE=FPEI.PARTY_CODE WHERE FPM.PARTY_CODE="+txtPartycode.getText().trim()+"";
                strSQL+="SELECT INVOICE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_DATE="+txtInvoiceDate.getText().trim()+"";
                rsTmp=data.getResult(strSQL);
                rsTmp.first();
                txtInvoiceDate.setText(rsTmp.getString("INVOICE_DATE"));
                
            }
        }
        catch(Exception e){
            
        }   */     // TODO add your handling code here:
    }//GEN-LAST:event_txtInvoiceDateFocusLost

    private void cmbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShowActionPerformed
     FormatGrid();
     GenerateData(); 
     cmbShow.setEnabled(false);// TODO add your handling code here:
    }//GEN-LAST:event_cmbShowActionPerformed
    
    private void txtPartycodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartycodeFocusLost
        try{
            if(!txtPartycode.getText().equals("")){
                String strSQL="";
                strSQL= "";
                
                ResultSet rsTmp;
                //strSQL+="SELECT NAME,AD1,AD2,STATION,CHG_IND_2,TRANS_CD,INS_IND FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE = "+txtPartycode.getText().trim()+"";
                //strSQL+="SELECT PARTY_NAME,DISPATCH_STATION,CONTACT_PERSON FROM (SELECT * FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS FPM LEFT JOIN (SELECT * FROM PRODUCTION.FELT_PARTY_EXTRA_INFO) AS FPEI ON FPM.PARTY_CODE=FPEI.PARTY_CODE WHERE FPM.PARTY_CODE="+txtPartycode.getText().trim()+"";
                strSQL+="SELECT DISTINCT(A.PARTY_CODE),B.PARTY_NAME FROM DINESHMILLS.D_SAL_INVOICE_HEADER A ,D_SAL_PARTY_MASTER B WHERE A.PARTY_CODE="+txtPartycode.getText().trim()+" AND A.PARTY_CODE=B.PARTY_CODE";
                rsTmp=data.getResult(strSQL);
                rsTmp.first();
                txtPartycode.setText(rsTmp.getString("PARTY_CODE"));
                
            }
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_txtPartycodeFocusLost
    
    private void txtPartycodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartycodeFocusGained
        
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartycodeFocusGained
        
    private void txtPartycodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPartycodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPartycodeActionPerformed
    
    private void txtPartycodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartycodeKeyPressed
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            //aList.SQL="SELECT DISTINCT(PARTY_CODE),PARTY_NAME FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE INVOICE_TYPE='"+txtMainCode.getText().trim()+"' ORDER BY PARTY_CODE";
            aList.SQL="SELECT DISTINCT(A.PARTY_CODE),B.PARTY_NAME FROM DINESHMILLS.D_SAL_INVOICE_HEADER A ,D_SAL_PARTY_MASTER B WHERE INVOICE_TYPE='"+txtMainCode.getText().trim()+"' AND A.PARTY_CODE=B.PARTY_CODE ORDER BY PARTY_CODE";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            //aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtPartycode.setText(aList.ReturnVal);
               
                
            }// TODO add your handling code here:
        }
    }//GEN-LAST:event_txtPartycodeKeyPressed
    
    private void TableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyTyped
        
    }//GEN-LAST:event_TableKeyTyped
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        
       
        
    }//GEN-LAST:event_TableKeyPressed
    
    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
       
    }//GEN-LAST:event_TableKeyReleased
    
    private void jMenuItemOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOrderActionPerformed
        
    }//GEN-LAST:event_jMenuItemOrderActionPerformed
    
    private void jMenuItemWarpingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemWarpingActionPerformed
      
    }//GEN-LAST:event_jMenuItemWarpingActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        //   new TReportWriter.TReportEngine().PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/Production/rptFeltWeaving.rpt",new HashMap(),ObjInvoiceDateUpd.getReportData(EITLERPGLOBAL.formatDateDB(txtFeltProductionDate.getText().trim())));
        //  EITLERPGLOBAL.PAGE_BREAK=true;
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        if(TableUpdateHistory.getRowCount()>0&&TableUpdateHistory.getSelectedRow()>=0) {
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText.setText(TableUpdateHistory.getValueAt(TableUpdateHistory.getSelectedRow(),4).toString());
            bigEdit.ShowEdit();
        }else
            JOptionPane.showMessageDialog(frmInvoiceDateUpd.this,"Select a row from Document Update History");
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
            
    private void cmdBackToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBackToTab1ActionPerformed
    
    private void cmdNextToTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab2ActionPerformed
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNextToTab2ActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBackToTab0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackToTab0ActionPerformed
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBackToTab0ActionPerformed
    
    private void cmdNextToTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextToTab1ActionPerformed
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNextToTab1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        txtUpdtDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtUpdtDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUpdtDateFocusGained
        ShowMessage("Enter Updation Date");
    }//GEN-LAST:event_txtUpdtDateFocusGained
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
        cmbSendTo.setEnabled(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedSendToCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        //SetupApproval();
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedSendToCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,736, txtUpdtNo.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateSendToCombo();
        }
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        ObjInvoiceDateUpd.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        //Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        Delete();
       
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
        
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableApprovalStatus;
    private javax.swing.JTable TableUpdateHistory;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbMainCode;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmbShow;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBackToTab0;
    private javax.swing.JButton cmdBackToTab1;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextToTab1;
    private javax.swing.JButton cmdNextToTab2;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItemOrder;
    private javax.swing.JMenuItem jMenuItemWarping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtMainCode;
    private javax.swing.JTextField txtPartycode;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtUpdtDate;
    private javax.swing.JTextField txtUpdtNo;
    // End of variables declaration//GEN-END:variables
    
    //Puts toolbar in enable mode
    private void EnableToolbar() {
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    //Puts toolbar in disable mode
    private void DisableToolbar() {
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void SetFields(boolean pStat) {
        txtUpdtDate.setEnabled(pStat);
        txtUpdtNo.setEnabled(pStat);
        txtPartycode.setEnabled(pStat);
        txtMainCode.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        cmbShow.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        Table.setEnabled(pStat);
        
        SetupApproval();
    }
    
    private void ClearFields() {
        txtUpdtDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtMainCode.setText("");
        txtUpdtNo.setText("");
        txtInvoiceDate.setText("");
        txtPartycode.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridApprovalStatus();
        FormatGridUpdateHistory();
    }
    
    private void GenerateData() {
        try {
           
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            
            objReportData.AddColumn("INVOICE_NO");//0
            objReportData.AddColumn("INVOICE_DATE");//2
            objReportData.AddColumn("AGENT_SR_NO"); //3
            objReportData.AddColumn("NET_AMOUNT"); //4
            objReportData.AddColumn("DUE_DATE"); //4
           
        
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            
        
            objOpeningRow.setValue("INVOICE_NO","");
            objOpeningRow.setValue("INVOICE_DATE","0000-00-00");
            objOpeningRow.setValue("AGENT_SR_NO","");
            objOpeningRow.setValue("NET_AMOUNT","");
            objOpeningRow.setValue("DUE_DATE","0000-00-00");
            
           
            String cntn = "";
           
            
            if(txtInvoiceDate.getText().trim().length()>0){
                cntn = " AND INVOICE_DATE= '"+EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText())+"'";
            }
            else
            {
                cntn = "";
            }
            

            String strSQL="SELECT CONCAT(AGENT_LAST_INVOICE,'/',AGENT_SR_NO,'/',FIN_YEAR_FROM,FIN_YEAR_TO) AS AGENT_SR_NO,INVOICE_NO,INVOICE_DATE,NET_AMOUNT,DUE_DATE FROM DINESHMILLS.D_SAL_INVOICE_HEADER WHERE PARTY_CODE= "+txtPartycode.getText().trim()+""+ cntn +" ORDER BY INVOICE_NO,INVOICE_DATE";
            System.out.println(strSQL);
            
          
            
           
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    objRow=objReportData.newRow();                    
                    Object[] rowData=new Object[10];
                    
                    
                    rowData[0]=Integer.toString(Table.getRowCount()+1);
                    rowData[1]=UtilFunctions.getString(rsTmp,"INVOICE_NO","");
                    rowData[2]=EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"INVOICE_DATE","0000-00-00"));                   
                    rowData[3]=UtilFunctions.getString(rsTmp,"AGENT_SR_NO","");
                    rowData[4]=UtilFunctions.getString(rsTmp,"NET_AMOUNT","");
                    rowData[5]=EITLERPGLOBAL.formatDate(UtilFunctions.getString(rsTmp,"DUE_DATE","0000-00-00"));
                    
                    objReportData.AddRow(objRow);
                    DataModel.addRow(rowData);
                    rsTmp.next();
                    
                }
            }
      
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    
    private void DisplayData() {
      //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjInvoiceDateUpd.getAttribute("APPROVED").getInt()==1) {
                    
                    lblTitle.setBackground(Color.BLUE);
                    //cmdEmail.setEnabled(true);
                }
                
                if(ObjInvoiceDateUpd.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                    //cmdEmail.setEnabled(false);
                }
                
                if(ObjInvoiceDateUpd.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                   // cmdEmail.setEnabled(false);
                }
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        //========= Authority Delegation Check =====================//
         if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,736)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
                 
        try {
            ClearFields();
           // boolean bState = false;
            lblTitle.setText("INVOICE DATA UPDATE - " +(String)ObjInvoiceDateUpd.getAttribute("UPD_NO").getObj());            
            txtPartycode.setText((String)ObjInvoiceDateUpd.getAttribute("UPD_PARTY_CODE").getObj());
            txtUpdtNo.setText((String)ObjInvoiceDateUpd.getAttribute("UPD_NO").getObj());
            txtUpdtDate.setText(EITLERPGLOBAL.formatDate(ObjInvoiceDateUpd.getAttribute("UPD_DATE").getString()));           
            txtInvoiceDate.setText(EITLERPGLOBAL.formatDate(ObjInvoiceDateUpd.getAttribute("UPD_INVOICE_DATE_H").getString()));           
            txtMainCode.setText((String)ObjInvoiceDateUpd.getAttribute("UPD_MAIN_CODE").getString());
            EITLERPGLOBAL.setComboIndex(cmbMainCode,Integer.parseInt((String)ObjInvoiceDateUpd.getAttribute("UPD_MAIN_CODE").getString()));
            
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,ObjInvoiceDateUpd.getAttribute("HIERARCHY_ID").getInt());
            
            DoNotEvaluate=true;
            //===================Fill up Table===================//
            FormatGrid();
            //Now Generate Table
            for(int i=1;i<=ObjInvoiceDateUpd.hmFeltConsignmentDetails.size();i++) {                
            
            clsInvoiceDateUpdDetails ObjInvoiceDateUpdDetails=(clsInvoiceDateUpdDetails)ObjInvoiceDateUpd.hmFeltConsignmentDetails.get(Integer.toString(i));
            Object[] rowData=new Object[30];
            
            
            rowData[0]=(String)ObjInvoiceDateUpdDetails.getAttribute("SR_NO").getObj();
            rowData[1]=(String)ObjInvoiceDateUpdDetails.getAttribute("UPD_INVOICE_NO").getObj();
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjInvoiceDateUpdDetails.getAttribute("UPD_INVOICE_DATE").getObj());
            rowData[3]=(String)ObjInvoiceDateUpdDetails.getAttribute("UPD_AGENT_SR_NO").getObj();
            rowData[4]=(String)ObjInvoiceDateUpdDetails.getAttribute("UPD_INVOICE_AMT").getObj();
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjInvoiceDateUpdDetails.getAttribute("UPD_DUE_DATE").getObj());
            rowData[6]=EITLERPGLOBAL.formatDate((String)ObjInvoiceDateUpdDetails.getAttribute("UPD_NEW_DATE").getObj());
            rowData[7]=EITLERPGLOBAL.formatDate((String)ObjInvoiceDateUpdDetails.getAttribute("UPD_NEW_DUE_DATE").getObj());
            
           
          
            DataModel.addRow(rowData);
        }
        
            DoNotEvaluate=false;   
            //======== Generating Grid for Document Approval Flow ========//
          FormatGridApprovalStatus();
            HashMap hmList=new HashMap();
            
            String UpdtNo=ObjInvoiceDateUpd.getAttribute("UPD_NO").getString();
            hmList=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID,736, UpdtNo);
            
            for(int i=1;i<=hmList.size();i++) {
                //clsDocFlow is collection class used for holding approval flow data
                clsDocFlow ObjFlow=(clsDocFlow)hmList.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,clsUser.getDeptID(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal()));
                rowData[3]=ObjFlow.getAttribute("STATUS").getString();
                rowData[4]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("RECEIVED_DATE").getString());
                rowData[5]=EITLERPGLOBAL.formatDate(ObjFlow.getAttribute("ACTION_DATE").getString());
                rowData[6]=ObjFlow.getAttribute("REMARKS").getString();
                
                DataModelApprovalStatus.addRow(rowData);
            }
            //=========================================================//
            
            //Showing Audit Trial History
           FormatGridUpdateHistory();
          //  HashMap hmApprovalHistory=clsInvoiceDateUpd.getHistoryList( ObjInvoiceDateUpd.getAttribute("FLT_AMEND_ID").getString(), txtAmendID.getText());
            HashMap hmApprovalHistory=clsInvoiceDateUpd.getHistoryList(EITLERPGLOBAL.gCompanyID, UpdtNo);
            for(int i=1;i<=hmApprovalHistory.size();i++) {
                clsInvoiceDateUpd  ObjInvoiceDateUpd=(clsInvoiceDateUpd)hmApprovalHistory.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int) ObjInvoiceDateUpd.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int) ObjInvoiceDateUpd.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate( ObjInvoiceDateUpd.getAttribute("ENTRY_DATE").getString());
                
                String ApprovalStatus="";
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("H")) {
                    ApprovalStatus="Hold";
                }
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(( ObjInvoiceDateUpd.getAttribute("APPROVAL_STATUS").getString()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                rowData[3]=ApprovalStatus;
                rowData[4]= ObjInvoiceDateUpd.getAttribute("REJECTED_REMARKS").getString();
                
                DataModelUpdateHistory.addRow(rowData);
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
        DoNotEvaluate=false;
    }
    
    
    //Display data on the Screen
   
    
    
    private void FormatGrid() {
        try {
           // cmdAdd.requestFocus();
            
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr.No.");
            DataModel.addColumn("Invoice No");
            DataModel.addColumn("Invoice Date");
            DataModel.addColumn("Bill No");
            DataModel.addColumn("Invoice Amount");
            DataModel.addColumn("Due Date");
            DataModel.addColumn("New Date");
            DataModel.addColumn("New Due Date");
            
            DataModel.SetReadOnly(0);
          
            
        
            DataModel.SetVariable(0,"SR_NO");  //0
            DataModel.SetVariable(1,"UPD_INVOICE_NO"); //1
            DataModel.SetVariable(2,"UPD_INVOICE_DATE"); //2
            DataModel.SetVariable(3,"UPD_AGENT_SR_NO"); //3
            DataModel.SetVariable(5,"UPD_INVOICE_AMT"); //4
            DataModel.SetVariable(6,"UPD_DUE_DATE"); //5
            DataModel.SetVariable(7,"UPD_NEW_DATE"); //6
            DataModel.SetVariable(8,"UPD_NEW_DUE_DATE"); //7   //DataModelDesc.SetVariable(8,"BALNK");
         
         
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(1);
            DataModel.SetReadOnly(2);
            DataModel.SetReadOnly(3);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(5);
        
      
            
        }catch(Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    //Generates Hierarchy Combo Box
    private void GenerateHierarchyCombo() {
        HashMap hmHierarchyList=new HashMap();
        
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        hmHierarchyList=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=736 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            hmHierarchyList=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=736 ");
        }
        for(int i=1;i<=hmHierarchyList.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) hmHierarchyList.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
    }
    
    //Generates Send To Combo Box
    private void GenerateSendToCombo() {
        HashMap hmSendToList=new HashMap();
        try{
            cmbSendToModel=new EITLComboModel();
            cmbSendTo.removeAllItems();
            cmbSendTo.setModel(cmbSendToModel);
            if(EditMode==EITLERPGLOBAL.ADD) {
                hmSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }else {
                        cmbSendToModel.addElement(aData);
                    }
                }
            }else {
                hmSendToList=ApprovalFlow.getRemainingUsers(EITLERPGLOBAL.gCompanyID,736,ObjInvoiceDateUpd.getAttribute("UPD_NO").getString());
                for(int i=1;i<=hmSendToList.size();i++) {
                    clsUser ObjUser=(clsUser) hmSendToList.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    //Generates Send To Combo Box for Rejected User
    private void GenerateRejectedSendToCombo() {
        HashMap hmRejectedSendToList=new HashMap();
        
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        hmRejectedSendToList=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=hmRejectedSendToList.size();i++) {
            clsUser ObjUser=(clsUser) hmRejectedSendToList.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=ObjUser.getAttribute("USER_NAME").getString();
            
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID,736,  txtUpdtNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID,736,  txtUpdtNo.getText(), (int)ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
            
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID,736, txtUpdtNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
    }
    
    //Generates User Name Combo Box
    
    private void SetupApproval() {
        /*// --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,75)) {
            cmbHierarchy.setEnabled(true);
        }else {
            cmbHierarchy.setEnabled(false);
        }*/
        
        // select hold for default approval
        OpgHold.setSelected(true);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
            OpgReject.setEnabled(false);
        }else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromUserId=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }else {
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID,736,ObjInvoiceDateUpd.getAttribute("UPD_NO").getString());
            lnFromUserId=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks((int)EITLERPGLOBAL.gCompanyID,736,FromUserID,ObjInvoiceDateUpd.getAttribute("UPD_NO").getString());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateSendToCombo();
        
        if(clsHierarchy.CanSkip(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //In Edit Mode Hierarchy and Reject Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
            //if(ApprovalFlow.IsCreator((int)EITLERPGLOBAL.gCompanyID,736,  txtUpdtNo.getText()) ){
               // OpgReject.setEnabled(false);
           // }
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8030,80301)) {
            cmdNew.setEnabled(true);
        }else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8030,80302)) {
            cmdEdit.setEnabled(true);
        }else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8030,80303)) {
            cmdDelete.setEnabled(true);
        }else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 8030,80304)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    
    private void GenerateMainCombo(){
        HashMap hmAmendList=new HashMap();
        
        cmbMainModel=new EITLComboModel();
        cmbMainCode.removeAllItems();
        cmbMainCode.setModel(cmbMainModel);
        
        hmAmendList = clsInvoiceDateUpd.getCreditNoteList();
        for(int i=1;i<=hmAmendList.size();i++) {
              cmbMainModel.addElement((ComboData)hmAmendList.get(new Integer(i)));
        }
    }
    
    private void Add() {
        //  EditMode=EITLERPGLOBAL.ADD;
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=736;
       
        cmbMainCode.setEnabled(true);
        cmbShow.setEnabled(true);
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            GenerateMainCombo();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtUpdtNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 736, FFNo,  false));
            txtUpdtDate.requestFocus();
            
            lblTitle.setText("INVOICE DATA UPD - "+ txtUpdtNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
        
        
        
      /*
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        lblTitle.setBackground(Color.GRAY);*/
    }
    
    private void Edit() {
        String productionDocumentNo=(String)ObjInvoiceDateUpd.getAttribute("UPD_NO").getObj();
        if(ObjInvoiceDateUpd.IsEditable(EITLERPGLOBAL.gCompanyID,productionDocumentNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            DisableToolbar();
            GenerateHierarchyCombo();
            GenerateSendToCombo();
            DisplayData();
            
            if(ApprovalFlow.IsCreator(736,productionDocumentNo)) {
                SetFields(true);
                txtUpdtDate.setEnabled(false);
                //            txtFormNo.setEnabled(false);
            }
            else {
                //   cmbGroup.setEnabled(true);
                EnableApproval();
            }
        }
        else {
            JOptionPane.showMessageDialog(frmInvoiceDateUpd.this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user","EDITING ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    

    
    private void Save() {
       
        //Form level validations
        if(txtPartycode.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Party Code");
            return;
        }
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return;
        }
      
        //Check the no. of items
      /*
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter some items.");
            return;
        }
        */
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return;
        }
        
        SetData();
        if(EditMode==EITLERPGLOBAL.ADD) {
            
            if(ObjInvoiceDateUpd.Insert()) {
                // MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. \nError is "+ObjInvoiceDateUpd.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjInvoiceDateUpd.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. \nError is "+ObjInvoiceDateUpd.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        cmbMainCode.setEnabled(false);
        //cmbShow.setEnabled(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
    }
    //Sets data to the Details Class Object
   private void SetData() {
        
        
        ObjInvoiceDateUpd.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjInvoiceDateUpd.setAttribute("UPD_NO",txtUpdtNo.getText());
        ObjInvoiceDateUpd.setAttribute("UPD_DATE",EITLERPGLOBAL.formatDateDB(txtUpdtDate.getText()));
        ObjInvoiceDateUpd.setAttribute("UPD_PARTY_CODE",txtPartycode.getText());
        ObjInvoiceDateUpd.setAttribute("UPD_INVOICE_DATE_H",EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
        ObjInvoiceDateUpd.setAttribute("UPD_MAIN_CODE",txtMainCode.getText()); 
        
        //----- Update Approval Specific Fields -----------//
        ObjInvoiceDateUpd.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjInvoiceDateUpd.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjInvoiceDateUpd.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjInvoiceDateUpd.setAttribute("REJECTED_REMARKS",txtToRemarks.getText());
                    
        if(OpgApprove.isSelected()) {
            ObjInvoiceDateUpd.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjInvoiceDateUpd.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjInvoiceDateUpd.setAttribute("APPROVAL_STATUS","R");
            ObjInvoiceDateUpd.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjInvoiceDateUpd.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {            
            ObjInvoiceDateUpd.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjInvoiceDateUpd.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjInvoiceDateUpd.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjInvoiceDateUpd.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        //======= Set Line part ============
        ObjInvoiceDateUpd.hmFeltConsignmentDetails.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsInvoiceDateUpdDetails ObjInvoiceDateUpdDetails=new clsInvoiceDateUpdDetails();
          //  String lItemID=(String)Table.getValueAt(i, 0);
            
            //Add Only Valid Items
            //if(clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, lItemID)) {
                ObjInvoiceDateUpdDetails.setAttribute("SR_NO",(String)Table.getValueAt(i,0));
                ObjInvoiceDateUpdDetails.setAttribute("UPD_INVOICE_NO",(String)Table.getValueAt(i,1));                
                ObjInvoiceDateUpdDetails.setAttribute("UPD_INVOICE_DATE",EITLERPGLOBAL.formatDateDB((String)Table.getValueAt(i,2)));
                ObjInvoiceDateUpdDetails.setAttribute("UPD_AGENT_SR_NO",(String)Table.getValueAt(i,3));
                ObjInvoiceDateUpdDetails.setAttribute("UPD_INVOICE_AMT",(String)Table.getValueAt(i,4));
                ObjInvoiceDateUpdDetails.setAttribute("UPD_DUE_DATE",EITLERPGLOBAL.formatDateDB((String)Table.getValueAt(i,5)));
                ObjInvoiceDateUpdDetails.setAttribute("UPD_NEW_DATE",EITLERPGLOBAL.formatDateDB((String)Table.getValueAt(i,6)));
                ObjInvoiceDateUpdDetails.setAttribute("UPD_NEW_DUE_DATE",EITLERPGLOBAL.formatDateDB((String)Table.getValueAt(i,7)));
              
                ObjInvoiceDateUpd.hmFeltConsignmentDetails.put(Integer.toString(ObjInvoiceDateUpd.hmFeltConsignmentDetails.size()+1), ObjInvoiceDateUpdDetails);
            //}
        }
        
    }
     private void Delete() {
          //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjInvoiceDateUpd.getAttribute("UPD_NO").getObj();
        
        if(ObjInvoiceDateUpd.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(ObjInvoiceDateUpd.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. \nError is "+ObjInvoiceDateUpd.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
       
   

    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
   
    /*
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Production.Felt_Consignment.frmFindFeltConsignment",true);
        frmFindFeltConsignment ObjFindFeltConsignment = (frmFindFeltConsignment)ObjLoader.getObj();
        
        
        if(ObjFindFeltConsignment.Cancelled==false) {
            if(!ObjInvoiceDateUpd.Filter(ObjFindFeltConsignment.stringFindQuery)) {
                JOptionPane.showMessageDialog(frmInvoiceDateUpd.this," No records found.","Find Felt Consignment Details",JOptionPane.YES_OPTION);
            }
            MoveLast();
        }
    }
    */
    
    // find details by production date
   /*
    public void Find(String prodDate) {
        ObjInvoiceDateUpd.Filter("AND UPD_NO='"+prodDate+"'");
        SetMenuForRights();
        DisplayData();
    }
    */
    
     // find details by piece no.
    /*
    public void Find(String invoiceNo, String prodDate) {
        ObjInvoiceDateUpd.Filter("AND UPD_NO+0='"+invoiceNo+"'");
        SetMenuForRights();
        DisplayData();
    }
    */
    // find all pending document
    public void FindWaiting() {
     //   ObjInvoiceDateUpd.Filter(" AND PROD_DOC_NO IN (SELECT DISTINCT PROD_DOC_NO FROM PRODUCTION.FELT_PROD_DATA, D_COM_DOC_DATA WHERE PROD_DOC_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=736 AND CANCELED=0) ");
        
        String SQL="WHERE UPD_NO IN (SELECT DISTINCT UPD_NO FROM DINESHMILLS.D_SAL_INVDATA_UPD_LC, D_COM_DOC_DATA WHERE UPD_NO=DOC_NO AND USER_ID="+EITLERPGLOBAL.gNewUserID+" AND STATUS='W' AND MODULE_ID=736 AND CANCELLED=0) ";
        ObjInvoiceDateUpd.Filter(SQL,EITLERPGLOBAL.gCompanyID);
        SetMenuForRights();
        DisplayData();
    }
    
    
     public void FindEx(int pCompanyID,String DocNo) {
        System.out.println(DocNo);
        ObjInvoiceDateUpd.Filter("WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND UPD_NO='"+DocNo+"'",pCompanyID);
        //ObjInvoiceDateUpd.MoveFirst();
        SetMenuForRights();
        DisplayData();
    }
    
    
    
    private void MoveFirst() {
        ObjInvoiceDateUpd.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjInvoiceDateUpd.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjInvoiceDateUpd.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjInvoiceDateUpd.MoveLast();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(" "+pMessage);
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    Tab1.getComponent(i).setEnabled(true);
                }
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        Table.setEnabled(false);
    }
    
    private void FormatGridApprovalStatus() {
        DataModelApprovalStatus=new EITLTableModel();
        
        TableApprovalStatus.removeAll();
        TableApprovalStatus.setModel(DataModelApprovalStatus);
        
        //Set the table Readonly
        DataModelApprovalStatus.TableReadOnly(true);
        
        //Add the columns
        DataModelApprovalStatus.addColumn("Sr.");
        DataModelApprovalStatus.addColumn("User");
        DataModelApprovalStatus.addColumn("Department");
        DataModelApprovalStatus.addColumn("Status");
        DataModelApprovalStatus.addColumn("Received Date");
        DataModelApprovalStatus.addColumn("Action Date");
        DataModelApprovalStatus.addColumn("Remarks");
    }
    
    private void FormatGridUpdateHistory() {
        DataModelUpdateHistory=new EITLTableModel();
        
        TableUpdateHistory.removeAll();
        TableUpdateHistory.setModel(DataModelUpdateHistory);
        
        //Set the table Readonly
        DataModelUpdateHistory.TableReadOnly(true);
        
        //Add the columns
        DataModelUpdateHistory.addColumn("Rev No.");
        DataModelUpdateHistory.addColumn("User");
        DataModelUpdateHistory.addColumn("Date");
        DataModelUpdateHistory.addColumn("Status");
        DataModelUpdateHistory.addColumn("Remarks");
    }
}
    /*
        private void GenerateAmendReasonCombo()
    {
        cmbGroupModel=new EITLComboModel();
        cmbGroup.removeAllItems();
        cmbGroup.setModel(cmbGroupModel);
     
        HashMap List=clsInvoiceDateUpd.getAmendReasonList(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gNewUserID);
     
        for(int i=1;i<=List.size();i++) {
            clsInvoiceDateUpd ObjReason=(clsInvoiceDateUpd) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjReason.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjReason.getAttribute("PARA_DESC").getObj();
            cmbGroupModel.addElement(aData);
        }
     
    }
     */

 /*  private boolean Validate() {
        int ValidEntryCount=0;
  
        if (txtPartycode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Party Code");
            txtPartycode.requestFocus(true);
            return false;
        }
        return true;
    }
}*/
