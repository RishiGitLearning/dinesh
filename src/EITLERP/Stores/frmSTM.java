/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  nhpatel
 */

/*<APPLET CODE=frmSTM.class HEIGHT=525 WIDTH=773></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Utils.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.sql.*;
import java.net.*;


/**
 *
 */
public class frmSTM extends javax.swing.JApplet {
    
    private int EditMode=0;
    
    private EITLTableModel DataModelH;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    private EITLTableModel DataModelLot;
    private HashMap colVariables=new HashMap();
    private HashMap colVariables_H=new HashMap();
    clsTaxColumn ObjTax=new clsTaxColumn();
    clsColumn ObjColumn=new clsColumn();
    
    private JEP myParser=new JEP();
    private boolean Updating=false;
    private boolean Updating_H=false;
    private boolean DoNotEvaluate=false;
    
    private clsSTMRaw ObjSTM;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbTransferToModel;
    private EITLComboModel cmbTransportModel;
    private EITLComboModel cmbDeptModel;
    private EITLComboModel cmbTransportModeModel;
    private EITLComboModel cmbStatusModel;
    
    
    private EITLTableModel DataModelA;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    String cellLastValueL="";
    String cellLastValueH="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(773,525);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjTax.LoadData((int)EITLERPGLOBAL.gCompanyID);
        ObjColumn.LoadData((int)EITLERPGLOBAL.gCompanyID);
        
        FormatGrid();
        FormatGrid_H();
        SetNumberFormats();
        FormatGridLotDetail();
        
        GenerateCombos();
        ObjSTM=new clsSTMRaw();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjSTM.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjSTM.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(this,"Error occured while loading data. Error is "+ObjSTM.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbTransferTo = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        chkCancelled = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        txtAccessableValue = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbTransporter = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        cmbTransportMode = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        cmdPurposeBig = new javax.swing.JButton();
        cmdRemarksBig = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        HeaderPane = new javax.swing.JScrollPane();
        TableH = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cmdNext2 = new javax.swing.JButton();
        cmdBack2 = new javax.swing.JButton();
        txtGrossAmount = new javax.swing.JTextField();
        txtNetAmount = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        cmdReadBarcode = new javax.swing.JButton();
        cmdInsertSTMReq = new javax.swing.JButton();
        cmdShowRequisition = new javax.swing.JButton();
        DetailPaneLotInfo = new javax.swing.JScrollPane();
        TableDetailLotInfo = new javax.swing.JTable();
        Tab3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Filter");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" STOCK TRANSFER MEMO (Raw Material)");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("STM No. :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(5, 18, 95, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setNextFocusableComponent(txtDocDate);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(110, 14, 100, 19);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(243, 18, 40, 15);

        txtDocDate.setEditable(false);
        txtDocDate.setName("STM_DATE");
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(290, 16, 100, 19);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Transporter :");
        Tab1.add(jLabel11);
        jLabel11.setBounds(5, 194, 95, 15);

        cmbTransferTo.setName("TRANSFER_TO_UNIT");
        cmbTransferTo.setEnabled(false);
        cmbTransferTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransferToFocusGained(evt);
            }
        });

        Tab1.add(cmbTransferTo);
        cmbTransferTo.setBounds(110, 71, 274, 24);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Accessable Value :");
        Tab1.add(jLabel15);
        jLabel15.setBounds(5, 340, 120, 15);

        chkCancelled.setText("Cancelled");
        chkCancelled.setNextFocusableComponent(txtPurpose);
        chkCancelled.setEnabled(false);
        chkCancelled.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCancelledFocusGained(evt);
            }
        });

        Tab1.add(chkCancelled);
        chkCancelled.setBounds(655, 8, 85, 23);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Status :");
        Tab1.add(jLabel17);
        jLabel17.setBounds(426, 20, 60, 15);

        cmbStatus.setName("STATUS");
        cmbStatus.setEnabled(false);
        cmbStatus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbStatusFocusGained(evt);
            }
        });

        Tab1.add(cmbStatus);
        cmbStatus.setBounds(492, 16, 94, 24);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Purpose :");
        Tab1.add(jLabel21);
        jLabel21.setBounds(5, 242, 95, 15);

        txtPurpose.setName("PURPOSE");
        txtPurpose.setNextFocusableComponent(cmdNext1);
        txtPurpose.setEnabled(false);
        txtPurpose.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPurposeFocusGained(evt);
            }
        });

        Tab1.add(txtPurpose);
        txtPurpose.setBounds(110, 242, 416, 19);

        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(636, 334, 102, 25);

        txtAccessableValue.setBackground(new java.awt.Color(255, 255, 204));
        txtAccessableValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAccessableValue.setEnabled(false);
        Tab1.add(txtAccessableValue);
        txtAccessableValue.setBounds(130, 340, 132, 19);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Trans. Mode :");
        Tab1.add(jLabel12);
        jLabel12.setBounds(5, 167, 95, 15);

        cmbTransporter.setName("TRANSPORTER");
        cmbTransporter.setEnabled(false);
        Tab1.add(cmbTransporter);
        cmbTransporter.setBounds(110, 190, 274, 24);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Dept. :");
        Tab1.add(jLabel13);
        jLabel13.setBounds(5, 106, 95, 15);

        cmbTransportMode.setName("MODE_TRANSPORT");
        cmbTransportMode.setEnabled(false);
        Tab1.add(cmbTransportMode);
        cmbTransportMode.setBounds(110, 163, 274, 24);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Transfer To :");
        Tab1.add(jLabel14);
        jLabel14.setBounds(5, 75, 95, 15);

        cmbDept.setName("FOR_DEPT_ID");
        cmbDept.setEnabled(false);
        Tab1.add(cmbDept);
        cmbDept.setBounds(110, 104, 274, 24);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Remarks :");
        Tab1.add(jLabel23);
        jLabel23.setBounds(5, 270, 95, 15);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(cmdNext1);
        txtRemarks.setEnabled(false);
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(110, 270, 416, 19);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(216, 16, 33, 15);

        cmdPurposeBig.setText("...");
        cmdPurposeBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPurposeBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdPurposeBig);
        cmdPurposeBig.setBounds(536, 241, 34, 20);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(538, 270, 34, 20);

        Tab.addTab("Header ", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setNextFocusableComponent(TableH);
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(TableL);

        Tab2.add(jScrollPane1);
        jScrollPane1.setBounds(6, 38, 732, 176);

        TableH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableH.setNextFocusableComponent(cmdNext2);
        HeaderPane.setViewportView(TableH);

        Tab2.add(HeaderPane);
        HeaderPane.setBounds(6, 240, 180, 124);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(TableL);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        Tab2.add(cmdAdd);
        cmdAdd.setBounds(554, 8, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(TableL);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        Tab2.add(cmdRemove);
        cmdRemove.setBounds(646, 8, 92, 25);

        jLabel18.setText("Total Accessable Amount");
        Tab2.add(jLabel18);
        jLabel18.setBounds(428, 228, 166, 15);

        jLabel19.setText("Net Amount");
        Tab2.add(jLabel19);
        jLabel19.setBounds(505, 266, 89, 15);

        jLabel20.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel20.setText("Items");
        Tab2.add(jLabel20);
        jLabel20.setBounds(10, 14, 53, 15);

        cmdNext2.setText("Next >>");
        cmdNext2.setNextFocusableComponent(cmdBack2);
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNext2);
        cmdNext2.setBounds(630, 322, 102, 25);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(524, 322, 102, 25);

        txtGrossAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtGrossAmount.setEditable(false);
        txtGrossAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Tab2.add(txtGrossAmount);
        txtGrossAmount.setBounds(596, 224, 138, 19);

        txtNetAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtNetAmount.setEditable(false);
        txtNetAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Tab2.add(txtNetAmount);
        txtNetAmount.setBounds(596, 264, 136, 19);

        jLabel22.setText("Press Ctrl+C to copy selected line.");
        Tab2.add(jLabel22);
        jLabel22.setBounds(8, 216, 264, 15);

        cmdReadBarcode.setText("Read Barcode");
        cmdReadBarcode.setEnabled(false);
        cmdReadBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReadBarcodeActionPerformed(evt);
            }
        });

        Tab2.add(cmdReadBarcode);
        cmdReadBarcode.setBounds(200, 10, 154, 25);

        cmdInsertSTMReq.setMnemonic('I');
        cmdInsertSTMReq.setText("Insert from STM Req.");
        cmdInsertSTMReq.setNextFocusableComponent(TableL);
        cmdInsertSTMReq.setEnabled(false);
        cmdInsertSTMReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertSTMReqActionPerformed(evt);
            }
        });

        Tab2.add(cmdInsertSTMReq);
        cmdInsertSTMReq.setBounds(363, 10, 180, 25);

        cmdShowRequisition.setMnemonic('I');
        cmdShowRequisition.setText("Show Requisition");
        cmdShowRequisition.setNextFocusableComponent(TableL);
        cmdShowRequisition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRequisitionActionPerformed(evt);
            }
        });

        Tab2.add(cmdShowRequisition);
        cmdShowRequisition.setBounds(270, 220, 150, 25);

        TableDetailLotInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        DetailPaneLotInfo.setViewportView(TableDetailLotInfo);

        Tab2.add(DetailPaneLotInfo);
        DetailPaneLotInfo.setBounds(195, 260, 290, 100);

        Tab.addTab("Item Information", Tab2);

        Tab3.setLayout(null);

        Tab3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab3.add(jLabel31);
        jLabel31.setBounds(5, 18, 85, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        Tab3.add(cmbHierarchy);
        cmbHierarchy.setBounds(100, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab3.add(jLabel32);
        jLabel32.setBounds(5, 52, 85, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFrom);
        txtFrom.setBounds(100, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab3.add(jLabel35);
        jLabel35.setBounds(5, 82, 85, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab3.add(txtFromRemarks);
        txtFromRemarks.setBounds(100, 78, 518, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab3.add(jLabel36);
        jLabel36.setBounds(5, 124, 85, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 168, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab3.add(jPanel6);
        jPanel6.setBounds(100, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab3.add(jLabel33);
        jLabel33.setBounds(5, 228, 85, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab3.add(cmbSendTo);
        cmbSendTo.setBounds(100, 224, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab3.add(jLabel34);
        jLabel34.setBounds(5, 264, 85, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab3.add(txtToRemarks);
        txtToRemarks.setBounds(100, 260, 516, 19);

        cmdBack3.setText("<< Back");
        cmdBack3.setNextFocusableComponent(cmbHierarchy);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });

        Tab3.add(cmdBack3);
        cmdBack3.setBounds(634, 322, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(620, 78, 34, 20);

        Tab.addTab("Approval", Tab3);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status :");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 700, 144);

        lblDocumentHistory.setText("Document Update History :");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(14, 192, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(14, 208, 551, 136);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(578, 238, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(578, 270, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(578, 208, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(578, 301, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(576, 335, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(4, 68, 752, 398);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 466, 752, 22);

    }//GEN-END:initComponents
    
    private void cmdShowRequisitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRequisitionActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("STM_REQ_NO", TableL.getSelectedRow());
            
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("STM Requisition (RM)");
                aFrame.startAppletEx("EITLERP.Stores.frmSTMReqRaw","STM Requisition (RM)");
                frmSTMReqRaw ObjDoc=(frmSTMReqRaw) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                JOptionPane.showMessageDialog(this,"STM Requisition No. is not specified");
            }
        }
        catch(Exception e) {
        }
    }//GEN-LAST:event_cmdShowRequisitionActionPerformed
    
    private void cmdInsertSTMReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertSTMReqActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        SelectSTMReq ObjSTMReq=new SelectSTMReq();
        ObjSTMReq.IssueType=2;
        if(ObjSTMReq.ShowList()) {
            
            
            
            if(ObjSTMReq.CopyHeader) {
                EITLERPGLOBAL.setComboIndex(cmbDept,ObjSTMReq.ObjSTMReq.getAttribute("FOR_DEPT_ID").getInt());
                txtPurpose.setText(ObjSTMReq.ObjSTMReq.getAttribute("PURPOSE").getString());
                txtRemarks.setText(ObjSTMReq.ObjSTMReq.getAttribute("REMARKS").getString());
            }
            
            
            
            //It will contain MIR Item Objects
            
            DoNotEvaluate=true;
            int chkItem = 0;
            double BalQty = 0;
            for(int i=1;i<=ObjSTMReq.colSelItems.size();i++) {
                clsSTMReqItem ObjItem=(clsSTMReqItem) ObjSTMReq.colSelItems.get(Integer.toString(i));
                double Qty = ObjItem.getAttribute("BAL_QTY").getDouble();
                String strQry = "SELECT ROUND(SUM(B.QTY),3) FROM D_INV_STM_HEADER A, D_INV_STM_DETAIL B "+
                "WHERE A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND A.CANCELLED=0 AND A.STM_NO <>'"+txtDocNo.getText().trim()+"' "+
                "AND A.COMPANY_ID=B.COMPANY_ID AND A.STM_NO=B.STM_NO "+
                "AND B.ITEM_ID='"+ObjItem.getAttribute("ITEM_ID").getString()+"' "+
                "AND B.STM_REQ_NO='"+ObjItem.getAttribute("STM_REQ_NO").getString()+"' AND B.STM_REQ_SR_NO="+ObjItem.getAttribute("STM_REQ_SR_NO").getInt();
                double STMQty = EITLERPGLOBAL.round(data.getDoubleValueFromDB(strQry),3);
                
                strQry = "SELECT ROUND(STM_REQ_QTY,3) FROM D_INV_STM_REQ_DETAIL "+
                "WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND STM_REQ_NO='"+ObjItem.getAttribute("STM_REQ_NO").getString()+"' AND ITEM_ID='"+ObjItem.getAttribute("ITEM_ID").getString()+"' "+
                "AND STM_REQ_SR_NO= "+ObjItem.getAttribute("STM_REQ_SR_NO").getInt();
                double STMReqQty = EITLERPGLOBAL.round(data.getDoubleValueFromDB(strQry),3);
                
                if ((Qty+STMQty) > STMReqQty) {
                    JOptionPane.showMessageDialog(this,"Required Qty for STM Requisition is less than or equals to STM Qty. \n Item ID = "+ObjItem.getAttribute("ITEM_ID").getString()+"' , \n STM Req. Qty = "+STMReqQty+" , \n already used STM Req Qty in STM = "+STMQty+" , \n Entered Qty = "+ Qty);
                    return;
                }
                
                ////add on 10/08/2009 start-------------
                for(int j=0;i<TableL.getRowCount();i++) {
                    String ReqNo = DataModelL.getValueByVariable("STM_REQ_NO",j);
                    String ItemID = DataModelL.getValueByVariable("ITEM_ID",j);
                    if ((ObjItem.getAttribute("STM_REQ_NO").getString().trim().equals(ReqNo)) && (ObjItem.getAttribute("ITEM_ID").getString().trim().equals(ItemID))) {
                        JOptionPane.showMessageDialog(this,"STM Requisition & Item Code alreadey added.");
                        return;
                    }
                    
                    if (ObjItem.getAttribute("ITEM_ID").getString().trim().equals(ItemID)) {
                        chkItem = 1;
                        BalQty = Double.parseDouble(DataModelL.getValueByVariable("BAL_STOCK_QTY",j));
                    }
                }
                ////-finish -add on 10/08/2009
                
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                
                int NewRow=TableL.getRowCount()-1;
                DataModelL.setValueByVariable("STM_REQ_NO", ObjItem.getAttribute("STM_REQ_NO").getString(),NewRow);
                DataModelL.setValueByVariable("STM_REQ_SR_NO", Integer.toString(ObjItem.getAttribute("STM_REQ_SR_NO").getInt()),NewRow);
                DataModelL.setValueByVariable("ITEM_ID",ObjItem.getAttribute("ITEM_ID").getString(),NewRow);
                String lItemID = ObjItem.getAttribute("ITEM_ID").getString();
                
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC",ObjItem.getAttribute("ITEM_EXTRA_DESC").getString(),NewRow);
                
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, ObjItem.getAttribute("ITEM_ID").getString());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                
                double Remaining_Qty = 0;//ObjItem.getAttribute("STM_REQ_QTY").getDouble();
                DataModelL.setValueByVariable("QTY",Double.toString(EITLERPGLOBAL.round(Remaining_Qty,3)),NewRow);
                DataModelL.setValueByVariable("QTY_REQD",Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("STM_REQ_QTY").getDouble(),3)),NewRow);
                //MUFFY
                DataModelL.setValueByVariable("UNIT_ID",Integer.toString(ObjItem.getAttribute("UNIT").getInt()),NewRow);
                //DataModelL.setValueByVariable("UNIT",Integer.toString(ObjItem.getAttribute("UNIT").getInt()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",ObjItem.getAttribute("UNIT").getInt());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("STM_REQ_NO",ObjItem.getAttribute("STM_REQ_NO").getString(),NewRow);
                DataModelL.setValueByVariable("STM_REQ_SRNO", Integer.toString(ObjItem.getAttribute("STM_REQ_SR_NO").getInt()),NewRow);
                
                String lWareHouseID=clsItem.getItemWareHouseID(EITLERPGLOBAL.gCompanyID, lItemID);
                String lLocationID=clsItem.getItemLocationID(EITLERPGLOBAL.gCompanyID, lItemID);
                DataModelL.setValueByVariable("WAREHOUSE_ID", lWareHouseID,NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",lLocationID,NewRow);
                String lWarehouseName=clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, lWareHouseID);
                DataModelL.setValueByVariable("WAREHOUSE_NAME",lWarehouseName,NewRow);
                String lLocationName=clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, lLocationID);
                DataModelL.setValueByVariable("LOCATION_NAME",lLocationName,NewRow);
                DataModelL.setValueByVariable("REMARKS",ObjItem.getAttribute("REMARKS").getString(),NewRow);
                if(EITLERPGLOBAL.gCompanyID==2) {
                    DataModelL.setValueByVariable("COST_CENTER_ID","9999",NewRow);
                } else if(EITLERPGLOBAL.gCompanyID==3) {
                    DataModelL.setValueByVariable("COST_CENTER_ID","8888",NewRow);
                }
                
                String CostCenterName=clsCostCenter.getCostCenterName(EITLERPGLOBAL.gCompanyID,Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID", NewRow)));
                DataModelL.setValueByVariable("COST_CENTER_NAME",CostCenterName,NewRow);
                
                if (chkItem==1) { //condition add on 10/08/2009
                    DataModelL.setValueByVariable("STOCK_QTY",Double.toString(EITLERPGLOBAL.round(BalQty,3)),NewRow);
                    DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(EITLERPGLOBAL.round(BalQty-Remaining_Qty,3)),NewRow);
                } else {
                    clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID,lItemID,EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
                    double StockQty=objStock.StockQty;
                    clsItemStock objItemStock = new clsItemStock();//add on 10/08/2009
                    double unapprovedStock = objItemStock.getOnHandQtyOn_STMHold(EITLERPGLOBAL.gCompanyID,lItemID,txtDocNo.getText().trim());//add on 10/08/2009
                    StockQty = StockQty - unapprovedStock;//add on 10/08/2009
                    //DataModelL.setValueByVariable("STOCK_QTY",Double.toString(StockQty),TableL.getSelectedRow());
                    DataModelL.setValueByVariable("STOCK_QTY",Double.toString(EITLERPGLOBAL.round(StockQty,3)),NewRow);
                    DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(EITLERPGLOBAL.round(StockQty-Remaining_Qty,3)),NewRow);
                }
            }
            
            DoNotEvaluate=false;
            
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdInsertSTMReqActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPurposeBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPurposeBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtPurpose;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdPurposeBigActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjSTM.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjSTM.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void cmdReadBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReadBarcodeActionPerformed
        // TODO add your handling code here:
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        
        if(TableL.getRowCount()>0&&TableL.getSelectedRow()>=0) {
            EnterCode aList=new EnterCode();
            if(aList.ShowForm()) {
                
                String BarcodeString=aList.ReturnVal;
                
                String MIRNo="";
                int MIRSrNo=0;
                int MIRType=0;
                double MIRQty=0,Rate=0;
                String ItemID="";
                
                if(BarcodeString.length()<=15) //Old Type Barcode
                {
                    ItemID=BarcodeString.substring(0,8);
                    ItemID=ItemID.trim();
                    MIRNo=BarcodeString.substring(8);
                    MIRNo=MIRNo.trim();
                    
                    //Finding MIR Sr No. and Type
                    try {
                        tmpConn=data.getConn();
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            MIRSrNo=rsTmp.getInt("SR_NO");
                            MIRType=rsTmp.getInt("MIR_TYPE");
                            MIRQty=rsTmp.getDouble("QTY");
                        }
                        
                        //====== Fetching Landed Rate of GRN ======//
                        double LandedRate=0;
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        Rate=LandedRate;
                    }
                    catch(Exception e) {
                        
                    }
                }
                
                if(BarcodeString.length()>=23) //New Type Barcode
                {
                    ItemID=BarcodeString.substring(0,10);
                    ItemID=ItemID.trim();
                    MIRNo=BarcodeString.substring(10,20);
                    MIRNo=MIRNo.trim();
                    MIRSrNo=Integer.parseInt(BarcodeString.substring(20,23));
                    
                    
                    //Finding MIR Sr No. and Type
                    try {
                        tmpConn=data.getConn();
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo+" ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            MIRType=rsTmp.getInt("MIR_TYPE");
                            MIRQty=rsTmp.getDouble("QTY");
                        }
                        
                        //====== Fetching Landed Rate of GRN ======//
                        double LandedRate=0;
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        Rate=LandedRate;
                        //========================================//
                        
                    }
                    catch(Exception e) {
                        
                    }
                }
                
                int NewRow=TableL.getSelectedRow();
                
                String CurrentItemID=DataModelL.getValueByVariable("ITEM_ID", TableL.getSelectedRow());
                
                if(!ItemID.trim().equals(CurrentItemID)) {
                    JOptionPane.showMessageDialog(this,"Item ID of MIR and Current doesnot match. Please verify that you are issuing right item");
                    return;
                }
                
                DataModelL.setValueByVariable("MIR_NO",MIRNo,NewRow);
                DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo),NewRow);
                DataModelL.setValueByVariable("MIR_TYPE",Integer.toString(MIRType),NewRow);
                DataModelL.setValueByVariable("RATE",Double.toString(Rate),NewRow);
            }
        }
    }//GEN-LAST:event_cmdReadBarcodeActionPerformed
    
    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TableLKeyReleased
    
    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab2FocusGained
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void txtPurposeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPurposeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for this document");
    }//GEN-LAST:event_txtPurposeFocusGained
    
    private void chkCancelledFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCancelledFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows whether this document is cancelled");
    }//GEN-LAST:event_chkCancelledFocusGained
    
    private void cmbStatusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbStatusFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the open status of this document");
    }//GEN-LAST:event_cmbStatusFocusGained
    
    private void cmbTransferToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransferToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select transporter");
    }//GEN-LAST:event_cmbTransferToFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Date in DD/MM/YYYY");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjColumn.Close();
        ObjTax.Close();
        ObjSTM.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableL.getRowCount()>0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost
        // TODO add your handling code here:
        
        //        //Update Header Custom Columns
        //        for(int i=0;i<TableH.getRowCount();i++) {
        //            UpdateResults_H(i);
        //        }
        
    }//GEN-LAST:event_TableLFocusLost
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        /*int ImportCol=DataModelL.getColFromVariable("EXCISE_GATEPASS_GIVEN");
        Object[] rowData=new Object[ImportCol+1];
        rowData[ImportCol]=Boolean.valueOf(false);
        DataModelL.addRow(rowData);
        DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
        TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
        UpdateSrNo();*/
        //----------->
        
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        
        EnterCode aList=new EnterCode();
        if(aList.ShowForm()) {
            String BarcodeString=aList.ReturnVal;
            
            String MIRNo="";
            int MIRSrNo=0;
            int MIRType=0;
            double MIRQty=0,Rate=0;
            String ItemID="";
            
            if(BarcodeString.length()<=15) //Old Type Barcode
            {
                ItemID=BarcodeString.substring(0,8);
                ItemID=ItemID.trim();
                MIRNo=BarcodeString.substring(8);
                MIRNo=MIRNo.trim();
                
                //Finding MIR Sr No. and Type
                try {
                    tmpConn=data.getConn();
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        MIRSrNo=rsTmp.getInt("SR_NO");
                        MIRType=rsTmp.getInt("MIR_TYPE");
                        MIRQty=rsTmp.getDouble("QTY")-rsTmp.getDouble("ISSUED_QTY");
                    }
                    
                    //====== Fetching Landed Rate of GRN ======//
                    double LandedRate=0;
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        LandedRate=rsTmp.getDouble("LANDED_RATE");
                    }
                    Rate=LandedRate;
                    //========================================//
                    
                    //tmpConn.close();
                    stTmp.close();
                    rsTmp.close();
                    
                }
                catch(Exception e) {
                    
                }
            }
            
            if(BarcodeString.length()>=23) //New Type Barcode
            {
                ItemID=BarcodeString.substring(0,10);
                ItemID=ItemID.trim();
                MIRNo=BarcodeString.substring(10,20);
                MIRNo=MIRNo.trim();
                MIRSrNo=Integer.parseInt(BarcodeString.substring(20,23));
                
                
                //Finding MIR Sr No. and Type
                try {
                    tmpConn=data.getConn();
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo+" ");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        MIRType=rsTmp.getInt("MIR_TYPE");
                        MIRQty=rsTmp.getDouble("QTY")-rsTmp.getDouble("ISSUED_QTY");
                    }
                    
                    //====== Fetching Landed Rate of GRN ======//
                    double LandedRate=0;
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        LandedRate=rsTmp.getDouble("LANDED_RATE");
                    }
                    Rate=LandedRate;
                    
                    //tmpConn.close();
                    stTmp.close();
                    rsTmp.close();
                    
                }
                catch(Exception e) {
                    
                }
            }
            
            Object[] rowData=new Object[1];
            DataModelL.addRow(rowData);
            TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            
            int NewRow=TableL.getRowCount()-1;
            
            DataModelL.setValueByVariable("MIR_NO",MIRNo,NewRow);
            DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo),NewRow);
            DataModelL.setValueByVariable("MIR_TYPE",Integer.toString(MIRType),NewRow);
            DataModelL.setValueByVariable("ITEM_ID",ItemID,NewRow);
            DataModelL.setValueByVariable("QTY",Double.toString(MIRQty),NewRow);
            DataModelL.setValueByVariable("RATE",Double.toString(Rate),NewRow);
            
            UpdateSrNo();
        }
        else {
            Object[] rowData=new Object[1];
            DataModelL.addRow(rowData);
            TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            UpdateSrNo();
        }
        
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        
        //======== Lot Entry ============
        if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("QTY")) {
            try {
                
                
            }
            catch(Exception e) {
                
            }
            if(evt.getKeyCode()==112) //F1 Key
            {
                EnterSTMLotQty ObjLot=new EnterSTMLotQty();
                ObjLot.lSTMNo = txtDocNo.getText().trim();
                ObjLot.lSTMSrNo = TableL.getSelectedRow()+1;
                ObjLot.lItemID = DataModelL.getValueByVariable("ITEM_ID",TableL.getSelectedRow());
                
                //ObjLot.colLot=(HashMap)DataModelL.getUserObject(TableL.getSelectedRow());
                
                if(EditMode == 0) {
                    ObjLot.Editdata = false;
                }
                
                if(DataModelL.getUserObject(TableL.getSelectedRow()) instanceof HashMap) {
                    ObjLot.colLot=(HashMap)DataModelL.getUserObject(TableL.getSelectedRow());
                } else {
                    ObjLot.colLot=new HashMap();
                }
                
                
                double QtyIssue = 0;
                if(ObjLot.ShowList()) //Ok Pressed
                {
                    // PUT VALIDATION START
                    for(int i=0;i<ObjLot.colLot.size();i++) {
                        clsSTMLot ObjItemLot=(clsSTMLot)ObjLot.colLot.get(Integer.toString(i+1));
                        
                        double QtyReqd  = Double.parseDouble(DataModelL.getValueByVariable("QTY_REQD",TableL.getSelectedRow()));
                        QtyIssue += ObjItemLot.getAttribute("ISSUED_LOT_QTY").getDouble();
                        
                        if(QtyReqd < QtyIssue) {
                            JOptionPane.showMessageDialog(null,"Qty Required is less than Quantity Issued at SR No:" + i+1);
                            ObjLot.colLot.clear();
                            DataModelL.setValueByVariable("QTY","0.0", TableL.getSelectedRow());
                            DataModelL.setValueByVariable("RATE","0.0", TableL.getSelectedRow());
                            DataModelL.setValueByVariable("GROSS_AMOUNT","0.0", TableL.getSelectedRow());
                            DataModelL.setValueByVariable("NET_AMOUNT","0.0", TableL.getSelectedRow());
                            return;
                        }
                        
                    }
                    // PUT VALIDATION END
                    
                    
                    DataModelL.SetUserObject(TableL.getSelectedRow(),ObjLot.colLot);
                    //Show Updated Qty.
                    double TotalQty=0;
                    double LotQty=0;
                    String ItemLotNo="";
                    String AutoLotNo="";
                    String str="";
                    double TotalAmount=0.0;
                    double Rate=0.0;
                    
                    try {
                        tmpConn=data.getConn();
                        stTmp=tmpConn.createStatement();
                        for(int i=1;i<=ObjLot.colLot.size();i++) {
                            clsSTMLot ObjItemLot=(clsSTMLot)ObjLot.colLot.get(Integer.toString(i));
                            LotQty=ObjItemLot.getAttribute("ISSUED_LOT_QTY").getDouble();
                            TotalQty+=ObjItemLot.getAttribute("ISSUED_LOT_QTY").getDouble();
                            ItemLotNo = ObjItemLot.getAttribute("ITEM_LOT_NO").getString();
                            AutoLotNo = ObjItemLot.getAttribute("AUTO_LOT_NO").getString();
                            str = "SELECT A.LANDED_RATE "+
                            "FROM D_INV_GRN_DETAIL A, D_INV_GRN_LOT B "+
                            "WHERE A.GRN_NO = B.GRN_NO AND A.SR_NO=B.GRN_SR_NO "+
                            "AND A.ITEM_ID = B.ITEM_ID "+
                            "AND A.ITEM_ID = '" + ObjLot.lItemID + "' AND B.AUTO_LOT_NO='" + AutoLotNo + "' ";
                            rsTmp=stTmp.executeQuery(str);
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                Rate = rsTmp.getDouble("LANDED_RATE");
                                TotalAmount += EITLERPGLOBAL.round(Rate * LotQty,3);
                            }
                        }
                    } catch(Exception e) {
                    }
                    Rate = Rate / ObjLot.colLot.size();
                    //TotalAmount =EITLERPGLOBAL.round(TotalAmount,2);
                    TableL.setValueAt(Double.toString(EITLERPGLOBAL.round(TotalQty,3)), TableL.getSelectedRow(), DataModelL.getColFromVariable("QTY"));
                    TableL.setValueAt(Double.toString(EITLERPGLOBAL.round(Rate,3)), TableL.getSelectedRow(), DataModelL.getColFromVariable("RATE"));
                    TableL.setValueAt(Double.toString(EITLERPGLOBAL.round(TotalAmount,3)), TableL.getSelectedRow(), DataModelL.getColFromVariable("GROSS_AMOUNT"));
                    TableL.setValueAt(Double.toString(EITLERPGLOBAL.round(TotalAmount,3)), TableL.getSelectedRow(), DataModelL.getColFromVariable("NET_AMOUNT"));
                    //for remaining qty -- TotalQty
                    
                    double StockQty = Double.parseDouble(DataModelL.getValueByVariable("STOCK_QTY",TableL.getSelectedRow())); //(Double.toString(EITLERPGLOBAL.round(TotalAmount,3)), DataModelL.getColFromVariable("BAL_STOCK_QTY"));
                    double RemainingQty =  EITLERPGLOBAL.round(StockQty - TotalQty,3);
                    TableL.setValueAt( String.valueOf(RemainingQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("BAL_STOCK_QTY"));
                }
                UpdateSrNo();
            }
        }
        //=========== Lot Entry Complete ============
        
        
        if(EditMode!=0) {
            
            if(evt.getKeyCode()==122) { //F11 Key pressed
                String lItemID=(String)TableL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                
                frmItemHistory ObjItem=new frmItemHistory();
                ObjItem.ShowForm(lItemID);
            }
            
            //=========== BOE List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("BOE_NO")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    String ItemID=DataModelL.getValueByVariable("ITEM_ID",TableL.getSelectedRow());
                    
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT BOE_NO,DATE_FORMAT(BOE_DATE,'%d-%m-%Y') AS BOE_DATE FROM D_INV_ITEM_MASTER,D_INV_ITEM_LOT_MASTER  WHERE D_INV_ITEM_MASTER.COMPANY_ID=D_INV_ITEM_LOT_MASTER.COMPANY_ID AND D_INV_ITEM_MASTER.ITEM_ID=D_INV_ITEM_LOT_MASTER.ITEM_ID AND D_INV_ITEM_MASTER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_INV_ITEM_MASTER.APPROVED=1 AND D_INV_ITEM_MASTER.ITEM_ID='"+ItemID+"' AND D_INV_ITEM_MASTER.CANCELLED=0 ORDER BY BOE_DATE";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=1;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_NO"));
                        
                        String BOESrNo=clsItem.getBOESrNo(EITLERPGLOBAL.gCompanyID, ItemID, aList.ReturnVal);
                        String BOEDate=EITLERPGLOBAL.formatDate(clsItem.getBOEDate(EITLERPGLOBAL.gCompanyID, ItemID, aList.ReturnVal));
                        
                        TableL.setValueAt(BOESrNo,TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_SR_NO"));
                        TableL.setValueAt(BOEDate,TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_DATE"));
                    }
                }
            }
            //=========================================
            
            
            //=========== Read Barcode =============== //
            if(evt.getKeyCode()==114) //F3 Key pressed
            {
                EnterCode aList=new EnterCode();
                if(aList.ShowForm()) {
                    String BarcodeString=aList.ReturnVal;
                    
                    String MIRNo="";
                    int MIRSrNo=0;
                    int MIRType=0;
                    double MIRQty=0,Rate=0;
                    String ItemID="";
                    
                    if(BarcodeString.length()<=15) //Old Type Barcode
                    {
                        ItemID=BarcodeString.substring(0,8);
                        ItemID=ItemID.trim();
                        MIRNo=BarcodeString.substring(8);
                        MIRNo=MIRNo.trim();
                        
                        //Finding MIR Sr No. and Type
                        try {
                            tmpConn=data.getConn();
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                MIRSrNo=rsTmp.getInt("SR_NO");
                                MIRType=rsTmp.getInt("MIR_TYPE");
                                MIRQty=rsTmp.getDouble("QTY");
                            }
                            
                            //====== Fetching Landed Rate of GRN ======//
                            double LandedRate=0;
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                            }
                            Rate=LandedRate;
                            //========================================//
                            
                            
                        }
                        catch(Exception e) {
                            
                        }
                    }
                    
                    if(BarcodeString.length()>=23) { //New Type Barcode
                        ItemID=BarcodeString.substring(0,10);
                        ItemID=ItemID.trim();
                        MIRNo=BarcodeString.substring(10,20);
                        MIRNo=MIRNo.trim();
                        MIRSrNo=Integer.parseInt(BarcodeString.substring(20,23));
                        
                        
                        //Finding MIR Sr No. and Type
                        try {
                            tmpConn=data.getConn();
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo+" ");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                MIRType=rsTmp.getInt("MIR_TYPE");
                                MIRQty=rsTmp.getDouble("QTY");
                            }
                            
                            //====== Fetching Landed Rate of GRN ======//
                            double LandedRate=0;
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                            }
                            Rate=LandedRate;
                            
                        }
                        catch(Exception e) {
                            
                        }
                    }
                    
                    int NewRow=TableL.getSelectedRow();
                    
                    String CurrentItemID=DataModelL.getValueByVariable("ITEM_ID", TableL.getSelectedRow());
                    
                    if(!ItemID.trim().equals(CurrentItemID)) {
                        JOptionPane.showMessageDialog(this,"Item ID of MIR and Current doesnot match. Please verify that you are issuing right item");
                        return;
                    }
                    
                    DataModelL.setValueByVariable("MIR_NO",MIRNo,NewRow);
                    DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo),NewRow);
                    DataModelL.setValueByVariable("MIR_TYPE",Integer.toString(MIRType),NewRow);
                    DataModelL.setValueByVariable("RATE",Double.toString(Rate),NewRow);
                    
                }
                
            }
            //=========================================
            
        }
    }//GEN-LAST:event_TableLKeyPressed
    
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane DetailPaneLotInfo;
    private javax.swing.JScrollPane HeaderPane;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableDetailLotInfo;
    private javax.swing.JTable TableH;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbTransferTo;
    private javax.swing.JComboBox cmbTransportMode;
    private javax.swing.JComboBox cmbTransporter;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInsertSTMReq;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdPurposeBig;
    private javax.swing.JButton cmdReadBarcode;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdShowRequisition;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAccessableValue;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGrossAmount;
    private javax.swing.JTextField txtNetAmount;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjSTM.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjSTM.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjSTM.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=17;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ShowMessage("Ready");
        try {
            ClearFields();
            txtDocNo.setText((String)ObjSTM.getAttribute("STM_NO").getObj());
            lblTitle.setText("STOCK TRANSFER MEMO (Raw Material) - "+txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjSTM.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjSTM.getAttribute("STM_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbTransferTo,(int)ObjSTM.getAttribute("TRANSFER_TO_UNIT").getVal());
            EITLERPGLOBAL.setComboIndex(cmbDept,(int)ObjSTM.getAttribute("FOR_DEPT_ID").getVal());
            EITLERPGLOBAL.setComboIndex(cmbTransportMode,(int)ObjSTM.getAttribute("MODE_TRANSPORT").getVal());
            EITLERPGLOBAL.setComboIndex(cmbTransporter,(int)ObjSTM.getAttribute("TRANSPORTER").getVal());
            txtPurpose.setText((String)ObjSTM.getAttribute("PURPOSE").getObj());
            txtRemarks.setText((String)ObjSTM.getAttribute("REMARKS").getObj());
            EITLERPGLOBAL.setComboIndex(cmbStatus,(String)ObjSTM.getAttribute("STATUS").getObj());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjSTM.getAttribute("HIERARCHY_ID").getVal());
            
            //============= Display Custom Columns ========================
            for(int i=1;i<=10;i++) {
                int ColID=(int)ObjSTM.getAttribute("COLUMN_"+Integer.toString(i)+"_ID").getVal();
                int Col=DataModelH.getColFromID(ColID);
                int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);
                
                
                if(ColID!=0) {
                    //Set the Formula
                    if(ObjSTM.getAttribute("COLUMN_"+Integer.toString(i)+"_FORMULA").getObj()!=null) {
                        DataModelH.SetFormula(Col, (String)ObjSTM.getAttribute("COLUMN_"+Integer.toString(i)+"_FORMULA").getObj());
                    } else {
                        DataModelH.SetFormula(Col, "");
                    }
                    
                    //Set the Percentage. If there
                    if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        DataModelH.setValueByVariableEx("P_"+ColID, Double.toString(ObjSTM.getAttribute("COLUMN_"+Integer.toString(i)+"_PER").getVal()),1);
                    }
                    
                    //Set the Value
                    DataModelH.setValueByVariableEx(Variable, Double.toString(ObjSTM.getAttribute("COLUMN_"+Integer.toString(i)+"_AMT").getVal()), 1);
                }
                
            }
            //=================================================================//
            
            
            
            //========= Display Line Items =============//
            FormatGrid();
            
            DoNotEvaluate=true;
            
            for(int i=1;i<=ObjSTM.colSTMItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                int NewRow=TableL.getRowCount()-1;
                
                clsSTMRawItem ObjItem=(clsSTMRawItem)ObjSTM.colSTMItems.get(Integer.toString(i));
                
                //Set the User Object - Lot Nos.
                DataModelL.SetUserObject(NewRow, ObjItem.colSTMLot);
                
                DataModelL.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_ID",ObjItem.getAttribute("ITEM_ID").getString(),NewRow);
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, ObjItem.getAttribute("ITEM_ID").getString());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID",ObjItem.getAttribute("WAREHOUSE_ID").getString(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",ObjItem.getAttribute("LOCATION_ID").getString(),NewRow);
                DataModelL.setValueByVariable("BOE_NO",ObjItem.getAttribute("BOE_NO").getString(),NewRow);
                DataModelL.setValueByVariable("BOE_SR_NO",ObjItem.getAttribute("BOE_SR_NO").getString(),NewRow);
                DataModelL.setValueByVariable("BOE_DATE",EITLERPGLOBAL.formatDate(ObjItem.getAttribute("BOE_DATE").getString()),NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("QTY").getDouble()),NewRow);
                DataModelL.setValueByVariable("UNIT_ID",Integer.toString(ObjItem.getAttribute("UNIT").getInt()),NewRow);
                DataModelL.setValueByVariable("COST_CENTER_ID",Integer.toString(ObjItem.getAttribute("COST_CENTER_ID").getInt()),NewRow);
                DataModelL.setValueByVariable("COST_CENTER_NAME",clsCostCenter.getCostCenterName(EITLERPGLOBAL.gCompanyID,ObjItem.getAttribute("COST_CENTER_ID").getInt()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",ObjItem.getAttribute("UNIT").getInt());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("RATE",Double.toString(ObjItem.getAttribute("RATE").getDouble()),NewRow);
                
                //MUFFY
                DataModelL.setValueByVariable("GROSS_AMOUNT",Double.toString(ObjItem.getAttribute("TOTAL_AMOUNT").getDouble()),NewRow);
                DataModelL.setValueByVariable("NET_AMOUNT",Double.toString(ObjItem.getAttribute("NET_AMOUNT").getDouble()),NewRow);
                
                DataModelL.setValueByVariable("STM_DESC",ObjItem.getAttribute("STM_DESC").getString(),NewRow);
                DataModelL.setValueByVariable("QTY_REQD",Double.toString(ObjItem.getAttribute("QTY_REQD").getDouble()),NewRow);
                DataModelL.setValueByVariable("INDENT_NO",ObjItem.getAttribute("INDENT_NO").getString(),NewRow);
                DataModelL.setValueByVariable("INDENT_SR_NO",Integer.toString(ObjItem.getAttribute("INDENT_SR_NO").getInt()),NewRow);
                DataModelL.setValueByVariable("INDENT_COMPANY_ID",Integer.toString(ObjItem.getAttribute("INDENT_COMPANY_ID").getInt()),NewRow);
                DataModelL.setValueByVariable("INDENT_COMPANY_YEAR",Integer.toString(ObjItem.getAttribute("INDENT_COMPANY_YEAR").getInt()),NewRow);
                DataModelL.setValueByVariable("REMARKS",ObjItem.getAttribute("REMARKS").getString(),NewRow);
                DataModelL.setValueByVariable("RECEIVED_QTY",Double.toString(ObjItem.getAttribute("RECEIVED_QTY").getDouble()),NewRow);
                DataModelL.setValueByVariable("ZERO_VAL_QTY",Double.toString(ObjItem.getAttribute("ZERO_VAL_QTY").getDouble()),NewRow);
                DataModelL.setValueByVariable("MIR_NO",ObjItem.getAttribute("MIR_NO").getString(),NewRow);
                DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(ObjItem.getAttribute("MIR_SR_NO").getInt()),NewRow);
                DataModelL.setValueByVariable("MIR_TYPE",Integer.toString(ObjItem.getAttribute("MIR_TYPE").getInt()),NewRow);
                
                DataModelL.setValueByVariable("STOCK_QTY",Double.toString(ObjItem.getAttribute("STOCK_QTY").getDouble()),NewRow);
                DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(ObjItem.getAttribute("BAL_STOCK_QTY").getDouble()),NewRow);
                DataModelL.setValueByVariable("STM_REQ_NO",ObjItem.getAttribute("STM_REQ_NO").getString(),NewRow);
                DataModelL.setValueByVariable("STM_REQ_SR_NO",Integer.toString(ObjItem.getAttribute("STM_REQ_SR_NO").getInt()),NewRow);
                
                //============= Display Custom Columns ========================
                for(int c=1;c<=10;c++) {
                    int ColID=(int)ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_ID").getVal();
                    int Col=DataModelL.getColFromID(ColID);
                    int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                    String Variable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);
                    
                    if(ColID!=0) {
                        //Set the Formula
                        if(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_FORMULA").getObj()!=null) {
                            DataModelL.SetFormula(Col, (String)ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_FORMULA").getObj());
                        }
                        else {
                            DataModelL.SetFormula(Col, "");
                        }
                        
                        //Set the Percentage. If there
                        if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                            DataModelL.setValueByVariable("P_"+ColID, Double.toString(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_PER").getVal()),NewRow);
                        }
                        
                        //Set the Value
                        DataModelL.setValueByVariable(Variable, Double.toString(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_AMT").getVal()), NewRow);
                    }
                }
                //=================================================================//
            }
            
            DoNotEvaluate=false;
            
            UpdateResults_H(0);
            UpdateAmounts();
            UpdateSrNo();
            
            if(EditMode==0) {
                DataModelL.TableReadOnly(true);
                DataModelH.TableReadOnly(true);
            }
            //=========================================//
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjSTM.getAttribute("STM_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 17, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            FormatGridLotDetail();
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsSTMRaw.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsSTMRaw ObjHistory=(clsSTMRaw)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            
            //============================================================//
            
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    //Sets data to the Class Object
    private void SetData() {
        //Header Fields
        ObjSTM.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjSTM.setAttribute("PREFIX",SelPrefix);
        ObjSTM.setAttribute("SUFFIX",SelSuffix);
        ObjSTM.setAttribute("FFNO",FFNo);
        ObjSTM.setAttribute("STM_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjSTM.setAttribute("FOR_DEPT_ID",EITLERPGLOBAL.getComboCode(cmbDept));
        ObjSTM.setAttribute("MODE_TRANSPORT",EITLERPGLOBAL.getComboCode(cmbTransportMode));
        ObjSTM.setAttribute("TRANSPORTER",EITLERPGLOBAL.getComboCode(cmbTransporter));
        ObjSTM.setAttribute("TRANSFER_TO_UNIT",EITLERPGLOBAL.getComboCode(cmbTransferTo));
        ObjSTM.setAttribute("PURPOSE",txtPurpose.getText());
        ObjSTM.setAttribute("REMARKS",txtRemarks.getText());
        ObjSTM.setAttribute("STATUS",EITLERPGLOBAL.getCombostrCode(cmbStatus));
        
        if(chkCancelled.isSelected()) {
            ObjSTM.setAttribute("CANCELLED",true);
        }
        else {
            ObjSTM.setAttribute("CANCELLED",false);
        }
        
        ObjSTM.setAttribute("STM_TYPE",2); //Fixed type 2 - Raw Material, 1 - General
        
        //----- Update Approval Specific Fields -----------//
        ObjSTM.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjSTM.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjSTM.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjSTM.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjSTM.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjSTM.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjSTM.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjSTM.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjSTM.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjSTM.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjSTM.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjSTM.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //============= Set Custom Columns ========================
        int ColCounter=0;
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lnPercentValue=0;
            int ColID=DataModelH.getColID(i);
            int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
            String Variable=DataModelH.getVariable(i);
            
            if( (ColID!=0) && (ColID!=-99) && (!Variable.substring(0,2).equals("P_"))) {
                ColCounter++;
                ObjSTM.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_ID",ColID);
                ObjSTM.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_FORMULA",DataModelH.getFormula(i));
                
                if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                    lnPercentValue=Double.parseDouble(DataModelH.getValueByVariableEx("P_"+ColID,1));
                    ObjSTM.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_PER",EITLERPGLOBAL.round(lnPercentValue,3));
                }
                ObjSTM.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_AMT",EITLERPGLOBAL.round(Double.parseDouble(DataModelH.getValueByVariableEx(Variable, 1)),5));
                ObjSTM.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_CAPTION",(String)TableH.getValueAt(i, 0));
            }
        }
        //=================================================================
        
        
        
        //=================== Setting up Line Items ==================//
        ObjSTM.colSTMItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsSTMRawItem ObjItem=new clsSTMRawItem();
            
            ObjItem.setAttribute("SR_NO",DataModelL.getValueByVariable("SR_NO",i));
            ObjItem.setAttribute("ITEM_ID",DataModelL.getValueByVariable("ITEM_ID",i));
            ObjItem.setAttribute("WAREHOUSE_ID",DataModelL.getValueByVariable("WAREHOUSE_ID",i));
            ObjItem.setAttribute("LOCATION_ID",DataModelL.getValueByVariable("LOCATION_ID",i));
            ObjItem.setAttribute("BOE_NO",DataModelL.getValueByVariable("BOE_NO",i));
            ObjItem.setAttribute("BOE_SR_NO",DataModelL.getValueByVariable("BOE_SR_NO",i));
            ObjItem.setAttribute("BOE_DATE",EITLERPGLOBAL.formatDate(DataModelL.getValueByVariable("BOE_DATE",i)));
            ObjItem.setAttribute("QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY",i)),3));
            ObjItem.setAttribute("RATE",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("RATE",i)),3));
            ObjItem.setAttribute("TOTAL_AMOUNT",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("GROSS_AMOUNT",i)),3));
            ObjItem.setAttribute("NET_AMOUNT",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("NET_AMOUNT",i)),3));
            ObjItem.setAttribute("STM_DESC",DataModelL.getValueByVariable("STM_DESC",i));
            ObjItem.setAttribute("REMARKS",DataModelL.getValueByVariable("REMARKS",i));
            ObjItem.setAttribute("QTY_REQD",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY_REQD",i)),3));
            ObjItem.setAttribute("UNIT",Integer.parseInt(DataModelL.getValueByVariable("UNIT_ID",i)));
            ObjItem.setAttribute("COST_CENTER_ID",Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID",i)));
            ObjItem.setAttribute("INDENT_NO",DataModelL.getValueByVariable("INDENT_NO",i));
            ObjItem.setAttribute("INDENT_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("INDENT_SR_NO",i)));
            ObjItem.setAttribute("INDENT_COMPANY_ID",Integer.parseInt(DataModelL.getValueByVariable("INDENT_COMPANY_ID",i)));
            ObjItem.setAttribute("INDENT_COMPANY_YEAR",Integer.parseInt(DataModelL.getValueByVariable("INDENT_COMPANY_YEAR",i)));
            ObjItem.setAttribute("MIR_NO",DataModelL.getValueByVariable("MIR_NO",i));
            ObjItem.setAttribute("MIR_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("MIR_SR_NO",i)));
            ObjItem.setAttribute("MIR_TYPE",Integer.parseInt(DataModelL.getValueByVariable("MIR_TYPE",i)));
            
            ObjItem.setAttribute("STOCK_QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("STOCK_QTY",i)),3));
            ObjItem.setAttribute("BAL_STOCK_QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("BAL_STOCK_QTY",i)),3));
            ObjItem.setAttribute("STM_REQ_NO",DataModelL.getValueByVariable("STM_REQ_NO",i));
            ObjItem.setAttribute("STM_REQ_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("STM_REQ_SR_NO",i)));
            
            /*System.out.println("item id:-" +DataModelL.getValueByVariable("ITEM_ID",i));
            System.out.println("unit:-" + Integer.parseInt(DataModelL.getValueByVariable("UNIT_ID",i)));
            System.out.println("Rate:-" +EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("RATE",i)),3));
            System.out.println("Total Amount:-"+EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("GROSS_AMOUNT",i)),3));
            System.out.println("NET Amount:-"+EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("TOTAL_AMOUNT",i)),3));*/
            //============= Set Custom Columns ========================//
            ColCounter=0;
            
            for(int c=0;c<TableL.getColumnCount()-1;c++) {
                double lnPercentValue=0;
                int ColID=DataModelL.getColID(c);
                int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable=DataModelL.getVariable(c);
                
                if( (ColID!=0) && (ColID!=-99) && (!Variable.substring(0,2).equals("P_"))) {
                    ColCounter++;
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_ID",ColID);
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_FORMULA",DataModelL.getFormula(c));
                    
                    if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+ColID,i));
                        ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_PER",EITLERPGLOBAL.round(lnPercentValue,3));
                    }
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_AMT",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable(Variable, i)),3));
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_CAPTION",TableL.getColumnName(c));
                }
            }
            //===========================================================//
            
            
            //======= Insert Lot Nos. ======//
            HashMap lcolLot=(HashMap)DataModelL.getUserObject(i);
            
            for(int l=1;l<=lcolLot.size();l++) {
                clsSTMLot ObjLot=new clsSTMLot();
                
                clsSTMLot ObjList=(clsSTMLot)lcolLot.get(Integer.toString(l));
                
                ObjLot.setAttribute("SR_NO",l);
                ObjLot.setAttribute("ITEM_ID",ObjList.getAttribute("ITEM_ID").getString());
                ObjLot.setAttribute("ITEM_LOT_NO",ObjList.getAttribute("ITEM_LOT_NO").getString());
                ObjLot.setAttribute("AUTO_LOT_NO",ObjList.getAttribute("AUTO_LOT_NO").getString());
                ObjLot.setAttribute("ISSUED_LOT_QTY",ObjList.getAttribute("ISSUED_LOT_QTY").getDouble());
                
                
                ObjItem.colSTMLot.put(Integer.toString(ObjItem.colSTMLot.size()+1),ObjLot);
            }
            //======== Lot Insertion Completed =========//
            
            
            ObjSTM.colSTMItems.put(Integer.toString(ObjSTM.colSTMItems.size()+1),ObjItem);
        }
        //======================Completed ===========================//
    }
    
    
    private void GatherVariableValues() {
        //Scan the table and gather values for variables
        colVariables.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableL.getColumnCount();i++) {
            double lValue=0;
            if(DataModelL.getVariable(i)!=null) {
                //if((!DataModelL.getVariable(i).trim().equals(""))&&(DataModelL.getColID(i)!=0))    //If Variable not blank
                if((!DataModelL.getVariable(i).trim().equals(""))) {
                    //colVariables.put(DataModelL.getVariable(i),(String)DataModelL.getValueAt(TableL.getSelectedRow(), i));
                    
                    //Add variable Value to Parser Table
                    if((TableL.getValueAt(TableL.getSelectedRow(), i)!=null)&&(!TableL.getValueAt(TableL.getSelectedRow(), i).toString().equals(""))) {
                        if(TableL.getValueAt(TableL.getSelectedRow(), i) instanceof Boolean) {
                            if(DataModelL.getBoolValueByVariable(DataModelL.getVariable(i),TableL.getSelectedRow())) {
                                lValue=1;
                            }
                            else {
                                lValue=0;
                            }
                        }
                        else {
                            if(EITLERPGLOBAL.IsNumber((String)TableL.getValueAt(TableL.getSelectedRow(), i))) {
                                lValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), i));
                            }
                        }
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelL.getVariable(i),lValue);
                }
            }
        }
        
        myParser.addFunction("IIF", new IIF(myParser));
    }
    
    private void SetupColumns() {
        HashMap List=new HashMap();
        HashMap ColList=new HashMap();
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=17 AND HEADER_LINE='L' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableL.getColumnModel();
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelL.SetVariable(TableL.getColumnCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1, true);
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
                
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
            else {
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setMaxWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setWidth(0);
                }
            }
        }
        
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableL.setRowSelectionAllowed(true);
        TableL.setColumnSelectionAllowed(true);
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=17 AND HIDDEN=0 AND SHOW_LAST=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
            
            
            if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
            }
            else {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
            }
            
            
            String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
            
            if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount()-1, -99);
            }
            else {
                DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            }
            
            
            DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            if(ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            }
        }
        
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=17 AND HIDDEN=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn(""); //
            DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE").getObj());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            DataModelL.SetNumeric(TableL.getColumnCount()-1,ObjColumn.getAttribute("NUMERIC").getBool());
            DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            
            //Hide the Column
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMaxWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMinWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setWidth(0);
        }
    }
    
    private void FormatGrid() {
        HashMap ColList=new HashMap();
        
        try {
            txtGrossAmount.requestFocus();
            DataModelL=new EITLTableModel();
            
            TableL.removeAll();
            TableL.setModel(DataModelL);
            
            //Set the table Readonly
            DataModelL.TableReadOnly(false);
            
            ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=17 AND HIDDEN=0 AND SHOW_LAST=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
            for(int i=1;i<=ColList.size();i++) {
                clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
                
                //Add Column First
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
                
                
                if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                    DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
                }
                else {
                    DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
                }
                
                
                String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
                
                if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                    DataModelL.SetColID(TableL.getColumnCount()-1, -99);
                }
                else {
                    DataModelL.SetColID(TableL.getColumnCount()-1, 0);
                }
                
                
                DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                DataModelL.SetInclude(TableL.getColumnCount()-1,true);
                
                if(ObjColumn.getAttribute("READONLY").getBool()) {
                    DataModelL.SetReadOnly(TableL.getColumnCount()-1);
                }
            }
            
            
            
            
            SetupColumns();
            
            //Now hide the column 1
            TableColumnModel ColModel=TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            
            //------- Install Table List Selection Listener ------//
            TableL.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=TableL.getSelectedColumn();
                    String strVar=DataModelL.getVariable(last);
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValueL=(String)TableL.getValueAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                        
                        TableL.editCellAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                        if(TableL.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)TableL.getEditorComponent()).selectAll();
                        }
                        
                        FormatGridLotDetail();
                        if(EditMode==0) {
                            if(!DataModelL.getUserObject(TableL.getSelectedRow()).equals("")) {
                                HashMap lcolLot=(HashMap)DataModelL.getUserObject(TableL.getSelectedRow());
                                for(int l=1;l<=lcolLot.size();l++) {
                                    clsSTMLot ObjLot=new clsSTMLot();
                                    clsSTMLot ObjList=(clsSTMLot)lcolLot.get(Integer.toString(l));
                                    Object[] rowData=new Object[1];
                                    DataModelLot.addRow(rowData);
                                    int NewRow=TableDetailLotInfo.getRowCount()-1;
                                    
                                    DataModelLot.setValueByVariable("SR_NO",Integer.toString(l),NewRow);
                                    DataModelLot.setValueByVariable("BATCH_NO",ObjList.getAttribute("ITEM_LOT_NO").getString(),NewRow);
                                    DataModelLot.setValueByVariable("RECEIPT_NO",ObjList.getAttribute("AUTO_LOT_NO").getString(),NewRow);
                                    DataModelLot.setValueByVariable("ISSUED_QTY",Double.toString(ObjList.getAttribute("ISSUED_LOT_QTY").getDouble()),NewRow);
                                }
                            }
                        }
                    }
                    catch(Exception cell){
                        //cell.printStackTrace();
                    }
                    //============= Cell Editing Routine Ended =================//
                    
                    
                    
                    ShowMessage("Ready");
                    
                    try {
                        if(strVar.equals("ITEM_ID")) {
                            ShowMessage("Enter item id. Press F1 to for the list of items");
                        }
                        
                        if(strVar.equals("QTY")) {
                            ShowMessage("Press F1 to enter lotwise qty");
                        }
                        
                        if(strVar.equals("RATE")) {
                            ShowMessage("Enter Rate");
                        }
                        
                        if(strVar.equals("EXCISE_GATEPASS_GIVEN")) {
                            ShowMessage("Press Spacebar to specify whether excise gatepass is given or not");
                        }
                    }
                    catch(Exception v) {
                        
                    }
                }
            }
            );
            //===================================================//
            
            
            //----- Install Table Model Event Listener -------//
            TableL.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValueL)) {
                            return;
                        }
                        //====================================================//
                        
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        
                        if(!Updating) {
                            UpdateResults(col);
                        }
                        
                        //                        if(col==DataModelL.getColFromVariable("COST_CENTER_ID")) {
                        //                            String CostCenterName=clsCostCenter.getCostCenterName(EITLERPGLOBAL.gCompanyID,Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID", TableL.getSelectedRow())));
                        //                            DataModelL.setValueByVariable("COST_CENTER_NAME",CostCenterName,TableL.getSelectedRow());
                        //                        }
                        
                        
                        //If Item ID has changed
                        if(col==DataModelL.getColFromVariable("ITEM_ID")) {
                            try {
                                DoNotEvaluate=true; //Stops Formula Evaluation
                                String lItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                                String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                
                                
                                TableL.setValueAt(lItemName, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_NAME"));
                                TableL.setValueAt(lWareHouseID, TableL.getSelectedRow(),DataModelL.getColFromVariable("WAREHOUSE_ID"));
                                TableL.setValueAt(lLocationID, TableL.getSelectedRow(),DataModelL.getColFromVariable("LOCATION_ID"));
                                
                                double UnitRate=clsItem.getRate(EITLERPGLOBAL.gCompanyID, lItemID);
                                if(Double.parseDouble((String)DataModelL.getValueByVariable("RATE", TableL.getSelectedRow()))<=0) {
                                    TableL.setValueAt(Double.toString(UnitRate), TableL.getSelectedRow(),DataModelL.getColFromVariable("RATE"));
                                }
                                
                                int lItemUnit=clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(Integer.toString(lItemUnit),TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_ID"));
                                String lUnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
                                TableL.setValueAt(lUnitName,TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_NAME"));
                                DoNotEvaluate=false;
                            }
                            catch(Exception ex){DoNotEvaluate=false;}
                        }
                    }
                }
            });
            
            int ImportCol=DataModelL.getColFromVariable("EXCISE_GATEPASS_GIVEN");
            Renderer.setCustomComponent(ImportCol,"CheckBox");
            JCheckBox aCheckBox=new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            TableL.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableL.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
            
            int ImportCol2=DataModelL.getColFromVariable("IMPORT_CONCESS");
            Renderer.setCustomComponent(ImportCol2,"CheckBox");
            aCheckBox=new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            TableL.getColumnModel().getColumn(ImportCol2).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableL.getColumnModel().getColumn(ImportCol2).setCellRenderer(Renderer);
        }
        catch(Exception e) {
            
        }
        
        
    }
    
    private void UpdateResults(int pCol) {
        if(!DoNotEvaluate) {
            try {
                int ColID=0,TaxID=0,UpdateCol=0;
                String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
                double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
                Object result;
                boolean updateIt=true;
                int QtyCol=0,RateCol=0,GAmountCol=0;
                
                Updating=true; //Stops Recursion
                
                srcVariable=DataModelL.getVariable(pCol); //Variable name of currently updated Column
                
                //If this column is percentage column. Variable name would be P_XXX
                //We shoule use actual variable name, it will be found on it's associated next column
                if(srcVariable.substring(0,2).equals("P_")) {
                    srcVariable=DataModelL.getVariable(pCol+1);
                }
                
                QtyCol=DataModelL.getColFromVariable("QTY"); //Index of Qty Column
                RateCol=DataModelL.getColFromVariable("RATE"); //Index of Rate Column
                GAmountCol=DataModelL.getColFromVariable("GROSS_AMOUNT"); //Index of Gross Amount Column
                
                //======= Read the Item ID - To be used when accessing item specific formula ===//
                String cellValue=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                if(cellValue==null) {
                    strItemID="";
                }
                else {
                    strItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                }
                //================================================================================
                
                GatherVariableValues();
                
                //====== Update Gross Amount =======
                myParser.parseExpression("QTY*RATE");
                result=myParser.getValueAsObject();
                double newresult=0;
                //if(result!=null) {
                //String RoundNum=Double.toString(EITLERPGLOBAL.round(Double.parseDouble(result.toString()),3));
                for(int i=0;i<TableL.getRowCount();i++) {
                    HashMap lcolLot=(HashMap)DataModelL.getUserObject(i);
                    for(int l=1;l<=lcolLot.size();l++) {
                        clsSTMLot ObjLot=new clsSTMLot();
                        clsSTMLot ObjList=(clsSTMLot)lcolLot.get(Integer.toString(l));
                        String LotNo = ObjList.getAttribute("AUTO_LOT_NO").getString();
                        double Qty = ObjList.getAttribute("ISSUED_LOT_QTY").getDouble();
                        String lItemID = ObjList.getAttribute("ITEM_ID").getString();
                        String str = "SELECT A.LANDED_RATE FROM D_INV_GRN_DETAIL A, D_INV_GRN_LOT B WHERE A.GRN_NO = B.GRN_NO " +
                        "AND A.ITEM_ID = B.ITEM_ID AND A.ITEM_ID = '" + lItemID + "' AND B.AUTO_LOT_NO='" + LotNo + "' ";
                        double Rate = data.getDoubleValueFromDB(str);
                        newresult = EITLERPGLOBAL.round(newresult + (Rate * Qty),3);
                    }
                }
                //}
                String RoundNum=Double.toString(EITLERPGLOBAL.round(newresult,3));
                DataModelL.setValueByVariable("GROSS_AMOUNT", RoundNum,TableL.getSelectedRow());
                
                //=================================
                
                for(int i=0;i<TableL.getColumnCount();i++) {
                    strVariable=DataModelL.getVariable(i);
                    
                    ColID=DataModelL.getColID(i);
                    
                    TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                    
                    //Exclude Percentage Columns and System Columns
                    if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)&&(ColID!=-99)) {
                        //If percentage is used
                        if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                            
                            //Load the Formula for calculation
                            if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                            }
                            else {
                                strFormula=DataModelL.getFormula(i);
                            }
                            
                            //Now Read Associated Percentage Column
                            lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+Integer.toString(ColID),TableL.getSelectedRow()));
                            
                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result=myParser.getValueAsObject();
                            if(result!=null) {
                                //Now get the percentage of the main result
                                lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                                //Update the Column
                                srcVar2=DataModelL.getVariable(pCol+1);
                                
                                UpdateCol=DataModelL.getColFromVariable(strVariable);
                                
                                updateIt=false;
                                
                                if(UpdateCol!=pCol) {
                                    if(UpdateCol==pCol+1) {
                                        updateIt=true;
                                    }
                                    else {
                                        if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                            updateIt=true; //Then update it
                                        }
                                        else {
                                            
                                            //Check whether the formula is dependent on any system Columns
                                            boolean Dependent=false;
                                            int dCol=0;
                                            
                                            for(int d=0;d<=TableL.getColumnCount()-1;d++) {
                                                if(DataModelL.getColID(d)==0) //It's System Column
                                                {
                                                    String dVariable=DataModelL.getVariable(d);
                                                    if(strFormula.indexOf(dVariable)!=-1) {
                                                        if(pCol==d) {
                                                            Dependent=true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                        }
                                    }
                                    
                                    //============ New Change In Parser =============//
                                    //Now Condition. First check whether percentage has been entered
                                    if(lnPercentValue>0) {
                                        //Yes Percentage Entered. Then we must update the associated column
                                        updateIt=true;
                                    }
                                    else {
                                        //If not Percentage entered than check whether any value is there
                                        //Otherwise go with the Dependent decision
                                    }
                                    //=================================================//
                                    
                                }
                                
                                if(updateIt) {
                                    DataModelL.setValueByVariable(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                        else //Percentage Not Used
                        {
                            //Load the Formula for calculation
                            if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                            }
                            else {
                                strFormula=DataModelL.getFormula(i);
                            }
                            
                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result=myParser.getValueAsObject();
                            if(result!=null) {
                                //Now get the percentage of the main result
                                lnFinalResult=Double.parseDouble(result.toString());
                                //Update the Column
                                UpdateCol=DataModelL.getColFromVariable(strVariable);
                                
                                updateIt=false;
                                
                                if(UpdateCol!=pCol) {
                                    if(strFormula.indexOf(srcVariable)!=-1) {
                                        updateIt=true;
                                    }
                                    else {
                                        
                                        //Check whether the formula is dependent on any system Columns
                                        boolean Dependent=false;
                                        int dCol=0;
                                        
                                        for(int d=0;d<=TableL.getColumnCount()-1;d++) {
                                            if(DataModelL.getColID(d)==0) //It's System Column
                                            {
                                                String dVariable=DataModelL.getVariable(d);
                                                
                                                if(strFormula.indexOf(dVariable)!=-1) {
                                                    if(pCol==d) {
                                                        Dependent=true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        
                                        if(Dependent) {
                                            updateIt=true;
                                        }
                                        
                                    }
                                    
                                    //============ New Change In Parser =============//
                                    //Now Condition. First check whether percentage has been entered
                                    if(lnPercentValue>0) {
                                        //Yes Percentage Entered. Then we must update the associated column
                                        updateIt=true;
                                    }
                                    else {
                                        //If not Percentage entered than check whether any value is there
                                        //Otherwise go with the Dependent decision
                                    }
                                    //=================================================//
                                    
                                }
                                if(updateIt) {
                                    DataModelL.setValueByVariable(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                    }
                }
                
                
                //== Final Pass - Update the Net Amount ==
                lnNetAmount=0;
                double lnColValue=0;
                double lnGrossAmount=0;
                
                lnGrossAmount=Double.parseDouble((String)DataModelL.getValueAt(TableL.getSelectedRow(), GAmountCol));
                
                for(int c=0;c<TableL.getColumnCount();c++) {
                    
                    //To be included in Calculation or not
                    if(DataModelL.getInclude(c)==false) {
                        //Read column value
                        if(TableL.getValueAt(TableL.getSelectedRow(), c).toString().equals("")) {
                            lnColValue=0;
                        }
                        else {
                            lnColValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), c));
                        }
                        
                        if(DataModelL.getOperation(c).equals("+")) //Add
                        {
                            lnGrossAmount=lnGrossAmount+lnColValue;
                        }
                        else //Substract
                        {
                            lnGrossAmount=lnGrossAmount-lnColValue;
                        }
                    }
                }
                
                //Now update the Net Amount
                //DataModelL.setValueByVariable("NET_AMOUNT",Double.toString(EITLERPGLOBAL.round(lnGrossAmount,3)),TableL.getSelectedRow());
                
                Updating=false;
                
                //=======================================================//
                //======= New Change. Reverse Calculation ===============//
                //Calculate Percentage based on Amount
                ColID=DataModelL.getColID(pCol);
                int AsColID=DataModelL.getColID(pCol-1);
                
                if(ColID!=0&&ColID!=-99&&ColID==AsColID) {
                    TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                    //Read the formula
                    strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                    double EnteredValue=Double.parseDouble((String)DataModelL.getValueAt(TableL.getSelectedRow(),pCol));
                    
                    
                    //Now Parse Main expression
                    myParser.parseExpression(strFormula);
                    result=myParser.getValueAsObject();
                    if(result!=null) {
                        //x=(Gross Amount*Percent)/100
                        
                        //Reverse
                        // x*100/Gross amount=Percent
                        double percentValue=0;
                        double val=0;
                        
                        val=Double.parseDouble(result.toString());
                        
                        if(val!=0) {
                            percentValue=EITLERPGLOBAL.round((EnteredValue*100)/val,3);
                            DoNotEvaluate=true;
                            TableL.setValueAt(Double.toString(percentValue), TableL.getSelectedRow(), pCol-1);
                            DoNotEvaluate=false;
                        }
                    }
                }
                //======================================================//
                //============= End of Reverse Procedure ===============//
                
                UpdateResults_H(0);
                UpdateAmounts();
            }
            catch(Exception e) {
                Updating=false;
            }
        }// Do not Evaluate
    }
    
    private void GatherVariableValues_H() {
        String strVariable="";
        int varCol=0;
        double lnValue=0,lnSum=0;
        
        //Scan the table and gather values for variables
        colVariables_H.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lValue=0;
            if(DataModelH.getVariable(i)!=null) {
                if(!DataModelH.getVariable(i).equals(""))    //If Variable not blank
                {
                    colVariables_H.put(DataModelH.getVariable(i),(String)TableH.getValueAt(i, 1));
                    
                    //Add variable Value to Parser Table
                    if((TableH.getValueAt( i,1)!=null)&&(!TableH.getValueAt( i,1).toString().equals(""))) {
                        lValue=Double.parseDouble((String)TableH.getValueAt( i,1));
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelH.getVariable(i),lValue);
                }
            }
        }
        
        
        //Gather Variables - sum of line columns
        for(int c=0;c<TableL.getColumnCount();c++) {
            strVariable=DataModelL.getVariable(c);
            strVariable=strVariable.trim();
            
            if((strVariable!=null) && (!strVariable.equals(""))) {
                varCol=DataModelL.getColFromVariable(strVariable);
                
                //Do the sum
                lnSum=0;
                
                try {
                    for(int r=0;r<TableL.getRowCount();r++) {
                        String theVal=(String)DataModelL.getValueAt(r,varCol);
                        
                        if(theVal==null) {
                        }
                        else {
                            lnValue=Double.parseDouble(TableL.getValueAt(r, varCol).toString());
                            lnSum=lnSum+lnValue;
                        }
                    }
                }
                catch(Exception e) {
                }
                //Sum Complete. Add to Parser Table
                myParser.addVariable("SUM_"+strVariable,lnSum);
            }
        }
    }
    
    private void SetupColumns_H() {
        HashMap List=new HashMap();
        Object[] rowData;
        
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=17 AND HEADER_LINE='H' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableH.getColumnModel();
        
        TableH.removeAll();
        
        if(List.size()<=0) {
            HeaderPane.setVisible(false);
        }
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                //DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj()+"%";
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelH.SetVariable(TableH.getRowCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1, true);
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
                
            }
            else {
                //DataModelH.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                //Set Column ID
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
            }
        }
    }
    
    private void FormatGrid_H() {
        DataModelH=new EITLTableModel();
        
        EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
        
        TableH.removeAll();
        TableH.setModel(DataModelH);
        
        Renderer.setColor(0, 0, Color.LIGHT_GRAY);
        
        //Set the table Readonly
        DataModelH.TableReadOnly(false);
        DataModelH.SetReadOnly(0);
        
        //Add Default Columns
        DataModelH.addColumn("Column");
        DataModelH.addColumn("Value");
        DataModelH.SetNumeric(1,true);
        
        TableH.getColumnModel().getColumn(0).setCellRenderer(Renderer);
        SetupColumns_H();
        
        TableColumnModel ColModel=TableH.getColumnModel();
        TableH.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //------- Install Table List Selection Listener ------//
        TableH.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableH.getSelectedColumn();
                String strVar=DataModelH.getVariable(last);
                
                
                //=============== Cell Editing Routine =======================//
                try {
                    cellLastValueH=(String)TableH.getValueAt(TableH.getSelectedRow(),TableH.getSelectedColumn());
                    
                    TableH.editCellAt(TableH.getSelectedRow(),TableH.getSelectedColumn());
                    if(TableH.getEditorComponent() instanceof JTextComponent) {
                        ((JTextComponent)TableH.getEditorComponent()).selectAll();
                    }
                }
                catch(Exception cell){}
                //============= Cell Editing Routine Ended =================//
                
                
            }
        }
        );
        //===================================================//
        
        
        //----- Install Table Model Event Listener -------//
        TableH.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    int row=e.getLastRow();
                    
                    //=========== Cell Update Prevention Check ===========//
                    String curValue=(String)TableH.getValueAt(TableH.getSelectedRow(), e.getColumn());
                    if(curValue.equals(cellLastValueH)) {
                        return;
                    }
                    //====================================================//
                    
                    if(!Updating_H)
                    {UpdateResults_H(row);}
                }
            }
        });
    }
    
    private void UpdateResults_H(int pCol) {
        try {
            int ColID=0,TaxID=0,UpdateCol=0;
            String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
            double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
            Object result;
            boolean updateIt=true;
            int QtyCol=0,RateCol=0,GAmountCol=0;
            
            Updating_H=true; //Stops Recursion
            
            srcVariable=DataModelH.getVariable(pCol); //Variable name of currently updated Column
            
            //If this column is percentage column. Variable name would be P_XXX
            //We shoule use actual variable name, it will be found on it's associated next column
            if(srcVariable.substring(0,2).equals("P_")) {
                srcVariable=DataModelH.getVariable(pCol+1);
            }
            
            GatherVariableValues_H();
            
            for(int i=0;i<TableH.getRowCount();i++) {
                strVariable=DataModelH.getVariable(i);
                
                ColID=DataModelH.getColID(i);
                
                TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                
                //Exclude Percentage Columns and System Columns
                if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)) {
                    //If percentage is used
                    if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                        
                        //Load the Formula for calculation
                        if((EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                            strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        }
                        else {
                            strFormula=DataModelH.getFormula(i);
                        }
                        
                        
                        //Now Read Associated Percentage Column
                        lnPercentValue=Double.parseDouble(DataModelH.getValueByVariableEx("P_"+Integer.toString(ColID),1));
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                            //Update the Column
                            srcVar2=DataModelH.getVariable(pCol+1);
                            
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(UpdateCol==pCol+1) {
                                    updateIt=true;
                                }
                                else {
                                    if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                        updateIt=true; //Then update it
                                    }
                                    else {
                                        if((strFormula.indexOf("QTY")!=-1)||(strFormula.indexOf("RATE")!=-1)||(strFormula.indexOf("GROSS_AMOUNT")!=-1)) {
                                            if(pCol==QtyCol||pCol==RateCol||pCol==GAmountCol)
                                            { updateIt=true;  }
                                        }
                                    }
                                }
                                
                                //============ New Change In Parser =============//
                                //Now Condition. First check whether percentage has been entered
                                if(lnPercentValue>0) {
                                    //Yes Percentage Entered. Then we must update the associated column
                                    updateIt=true;
                                }
                                else {
                                    //If not Percentage entered than check whether any value is there
                                    //Otherwise go with the Dependent decision
                                    updateIt=false;
                                }
                                //=================================================//
                                
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                    else //Percentage Not Used
                    {
                        
                        //Load the Formula for calculation
                        if((EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                            strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        }
                        else {
                            strFormula=DataModelH.getFormula(i);
                        }
                        
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=Double.parseDouble(result.toString());
                            //Update the Column
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(strFormula.indexOf(srcVariable)!=-1) {
                                    updateIt=true;
                                }
                                else {updateIt=true;
                                }
                                
                                //============ New Change In Parser =============//
                                //Now Condition. First check whether percentage has been entered
                                if(lnPercentValue>0) {
                                    //Yes Percentage Entered. Then we must update the associated column
                                    updateIt=true;
                                }
                                else {
                                    //If not Percentage entered than check whether any value is there
                                    //Otherwise go with the Dependent decision
                                }
                                //=================================================//
                                
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                }
            }
            Updating_H=false;
            UpdateAmounts();
        }
        catch(Exception e) {
            Updating_H=false;
        }
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=17");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=17");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbTransportModeModel=new EITLComboModel();
        cmbTransportMode.removeAllItems();
        cmbTransportMode.setModel(cmbTransportModeModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT_MODE'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransportModeModel.addElement(aData);
        }
        //------------------------------ //
        
        //----- Generate Department Combo ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String) ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
        
        //----- Generate Department Combo ------- //
        cmbTransferToModel=new EITLComboModel();
        cmbTransferTo.removeAllItems();
        cmbTransferTo.setModel(cmbTransferToModel);
        
        List=clsCompany.getList("");
        for(int i=1;i<=List.size();i++) {
            clsCompany ObjDept=(clsCompany) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            
            int theCompany=(int) ObjDept.getAttribute("COMPANY_ID").getVal();
            
            if(theCompany!=EITLERPGLOBAL.gCompanyID) {
                aData.Code=(int) ObjDept.getAttribute("COMPANY_ID").getVal();
                aData.Text=(String) ObjDept.getAttribute("COMPANY_NAME").getObj();
                cmbTransferToModel.addElement(aData);
            }
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbTransportModel=new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransportModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransportModel.addElement(aData);
        }
        //------------------------------ //
        
        
        
        //--- Generate Type Combo ------//
        cmbStatusModel=new EITLComboModel();
        cmbStatus.removeAllItems();
        cmbStatus.setModel(cmbStatusModel);
        
        ComboData aData=new ComboData();
        aData.strCode="O";
        aData.Text="Open";
        cmbStatusModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="C";
        aData.Text="Close";
        cmbStatusModel.addElement(aData);
        //===============================//
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 17,(String)ObjSTM.getAttribute("STM_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,175)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
            if(cmbHierarchy.getItemCount()>1) {
                cmbHierarchy.setEnabled(true);
            }
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 17,(String)ObjSTM.getAttribute("STM_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks((int)EITLERPGLOBAL.gCompanyID,17,FromUserID,(String)ObjSTM.getAttribute("STM_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,631)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,542)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,633)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,634)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModelL.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void UpdateAmounts() {
        
        //== Final Pass - Update the Net Amount ==
        double lnNetAmount=0;
        double lnColValue=0;
        double lnGrossAmount=0,lnSumNetAmount=0;
        int NetAmountCol=0,GrossAmountCol=0;
        
        NetAmountCol=DataModelL.getColFromVariable("NET_AMOUNT");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            if(TableL.getValueAt(i,NetAmountCol)!=null) {
                lnSumNetAmount=lnSumNetAmount+Double.parseDouble((String)TableL.getValueAt(i,NetAmountCol));
            }
        }
        
        for(int c=0;c<TableH.getRowCount();c++) {
            if(DataModelH.getInclude(c)==false) {
                //Read column value
                if(TableH.getValueAt(c,1).toString().equals("")) {
                    lnColValue=0;
                }
                else {
                    lnColValue=Double.parseDouble((String)TableH.getValueAt(c,1));
                }
                
                if(DataModelH.getOperation(c).equals("+")) //Add
                {
                    lnGrossAmount=lnGrossAmount+lnColValue;
                }
                else //Substract
                {
                    lnGrossAmount=lnGrossAmount-lnColValue;
                }
            }
        }
        txtGrossAmount.setText(Double.toString(EITLERPGLOBAL.round(lnSumNetAmount,3)));
        txtNetAmount.setText(Double.toString(EITLERPGLOBAL.round(lnSumNetAmount+lnGrossAmount,3)));
        
        
        lnGrossAmount=0;
        GrossAmountCol=DataModelL.getColFromVariable("NET_AMOUNT");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            if(TableL.getValueAt(i,GrossAmountCol)!=null) {
                lnGrossAmount=lnGrossAmount+Double.parseDouble((String)TableL.getValueAt(i,GrossAmountCol));
            }
        }
        
        txtAccessableValue.setText(Double.toString(EITLERPGLOBAL.round(lnGrossAmount,3)));
        
        //================== Calculating Landed Rate for each item =====================//
        double HeaderTotal=0;
        for(int h=0;h<=TableH.getRowCount()-1;h++) {
            HeaderTotal=HeaderTotal+Double.parseDouble((String)TableH.getValueAt(h,1));
        }
        
        for(int i=0;i<TableL.getRowCount();i++) {
            if(TableL.getValueAt(i,NetAmountCol)!=null) {
                //======= Calculate Landed Rate =======//
                double NetAmount=Double.parseDouble((String)TableL.getValueAt(i,NetAmountCol));
                double lnQty=Double.parseDouble((String)TableL.getValueAt(i,DataModelL.getColFromVariable("QTY")));
                
                double lnLandedRate=0;
                
                if(lnQty>0) {
                    lnLandedRate=(((HeaderTotal/lnSumNetAmount)*NetAmount)+NetAmount)/lnQty;
                    lnLandedRate=EITLERPGLOBAL.round(lnLandedRate,3);
                }
                else {
                    lnLandedRate=0;
                }
                
                Updating=true;
                //DataModelL.setValueByVariable("LANDED_RATE",Double.toString(lnLandedRate), i);
                Updating=false;
            }
        }
        //==========================================================================//
        
    }
    
    private void ClearFields() {
        txtDocDate.setText("");
        txtRemarks.setText("");
        txtPurpose.setText("");
        txtToRemarks.setText("");
        txtToRemarks.setText("");
        
        chkCancelled.setSelected(false);
        
        FormatGrid();
        FormatGrid_H();
        FormatGridA();
        FormatGridHS();
        FormatGridLotDetail();
        
        txtGrossAmount.setText("0.00");
        txtNetAmount.setText("0.00");
    }
    
    private void SetFields(boolean pStat) {
        //txtDocDate.setEnabled(pStat);
        cmbTransferTo.setEnabled(pStat);
        cmbDept.setEnabled(pStat);
        cmbTransportMode.setEnabled(pStat);
        cmbTransporter.setEnabled(pStat);
        cmbStatus.setEnabled(pStat);
        
        chkCancelled.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        //cmdInsert.setEnabled(pStat);
        //cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmdReadBarcode.setEnabled(pStat);
        cmdInsertSTMReq.setEnabled(pStat);
        
        SetupApproval();
        
        DataModelH.TableReadOnly(!pStat);
        DataModelL.TableReadOnly(!pStat);
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        //Validates Item Entries
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(this,"Please enter at least one item");
            return false;
        }
        
        if(cmbTransferTo.getSelectedIndex()<0) {
            JOptionPane.showMessageDialog(this,"Please select the company");
            return false;
        }
        
        if(cmbDept.getSelectedIndex()<0) {
            JOptionPane.showMessageDialog(this,"Please select the department");
            return false;
        }
        
        //Search in Table
        int ItemCol=DataModelL.getColFromVariable("ITEM_ID");
        int RateCol=DataModelL.getColFromVariable("RATE");
        int QtyCol=DataModelL.getColFromVariable("QTY");
        int BOECol=DataModelL.getColFromVariable("BOE_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            String ItemID="";
            double Rate=0,Qty=0;
            
            if(TableL.getValueAt(i, ItemCol)!=null && TableL.getValueAt(i, RateCol)!=null && TableL.getValueAt(i, QtyCol)!=null) {
                ItemID=(String)TableL.getValueAt(i, ItemCol);
                Rate=Double.parseDouble((String)TableL.getValueAt(i,RateCol));
                Qty=Double.parseDouble((String)TableL.getValueAt(i,QtyCol));
                
                if(clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID) && Qty>0) {
                    ValidEntryCount++;
                }
                else {
                    JOptionPane.showMessageDialog(this,"Item entry is not valid. Please be sure to enter following information. \nValid Item ID,Quantity");
                    TableL.changeSelection(i,1,false,false);
                    return false;
                }
                
                
            }
            
            //Replace X wherever BOE No. is Blank
            if(DataModelL.getValueAt(i,BOECol).toString().trim().equals("")) {
                DataModelL.setValueAt("X", i, BOECol);
            }
            
            //stock related validation
            ItemID = DataModelL.getValueByVariable("ITEM_ID", i);
            double IssuedQty = EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY", i)),3);
            
            
            if (IssuedQty<=0) {
                JOptionPane.showMessageDialog(this,"Issued Quantity must be greater than zero.--> " + ItemID);
                return false;
            }
            
            double BalStockQty = EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("BAL_STOCK_QTY", i)),3);
            if (BalStockQty<0) {
                JOptionPane.showMessageDialog(this,"Stock is not available for --> " + ItemID);
                return false;
            }
            
            String ReqNo = DataModelL.getValueByVariable("STM_REQ_NO", i);
            int ReqSrNo = (int)Double.parseDouble(DataModelL.getValueByVariable("STM_REQ_SR_NO", i).toString());
            double ReqdQty = EITLERPGLOBAL.round(data.getDoubleValueFromDB("SELECT STM_REQ_QTY FROM D_INV_STM_REQ_DETAIL WHERE STM_REQ_NO='"+ReqNo+"' AND STM_REQ_SR_NO="+ReqSrNo),3);
            
            clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID,ItemID,EITLERPGLOBAL.formatDateDB(txtDocDate.getText().trim()));
            double OnHand=EITLERPGLOBAL.round(objStock.StockQty,3);
            clsItemStock objItemStock = new clsItemStock(); //add on 10/08/2009
            double unapprovedStock = objItemStock.getOnHandQtyOn_Hold(EITLERPGLOBAL.gCompanyID,ItemID,txtDocNo.getText().trim());//add on 10/08/2009
            OnHand = EITLERPGLOBAL.round(OnHand - unapprovedStock,3);//add on 10/08/2009
            ReqdQty = EITLERPGLOBAL.round(ReqdQty - data.getDoubleValueFromDB("SELECT SUM(B.QTY) AS QTY FROM D_INV_STM_HEADER A,D_INV_STM_DETAIL B WHERE A.STM_NO=B.STM_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND B.STM_REQ_NO='"+ReqNo+"' AND B.STM_REQ_SR_NO="+ReqSrNo+" AND A.STM_NO<>'"+txtDocNo.getText().trim()+"' AND A.CANCELLED=0"),3);////add on 10/08/2009
            if(OnHand > 0.0) {
                if(OnHand >= IssuedQty) {
                    //if(ReqdQty!=IssuedQty) {
                    if(ReqdQty>IssuedQty) {
                        if(OnHand > ReqdQty ) {
                            //JOptionPane.showMessageDialog(this,"Issued quantity is not match with Required quantity in Issue Requisition.--> " + ItemID);
                            JOptionPane.showMessageDialog(this,"On Hand Quantity already exists as much as Required Quantity.--> " + ItemID);
                            return false;
                        }
                    } else if(ReqdQty<IssuedQty) {
                        JOptionPane.showMessageDialog(this,"Required Quantity must be less then Issued Quantity.--> " + ItemID);
                        return false;
                    }
                } else {
                    JOptionPane.showMessageDialog(this,"On Hand quantity is less then Issued quantity.--> " + ItemID);
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(this,"On Hand Stock Not Available.--> " + ItemID);
                return false;
            }
            
            for(int j=0;j<TableL.getRowCount();j++) {
                String STMReqNo = DataModelL.getValueByVariable("STM_REQ_NO", i);
                String STMReqSrNo = DataModelL.getValueByVariable("STM_REQ_SR_NO", i);
                if(i==j) {
                    continue;
                } else {
                    String tempSTMReqNo = DataModelL.getValueByVariable("PO_NO", j);
                    String tempSTMReqSrNo = DataModelL.getValueByVariable("PO_SR_NO", j);
                    if(tempSTMReqNo.equals(STMReqNo) && tempSTMReqSrNo.equals(STMReqSrNo)) {
                        JOptionPane.showMessageDialog(this,"STM Req. No : " + STMReqNo + " STM Req. Sr NO : " + STMReqSrNo + " is repeated.");
                        return false;
                    }
                }
            }
            
            
        }
        
        if(ValidEntryCount==0) {
            JOptionPane.showMessageDialog(this,"Item entry is not valid. Please verify");
            return false;
        }
        
        //Now Header level validations
        if(txtDocDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please enter STM Date");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(this,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(this,"Please select the Approval Action");
            return false;
        }
        
        
        if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(this,"Invalid STM Date");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this,"Please enter the remarks for rejection");
            return false;
        }
        
        //        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
        //        {
        //          JOptionPane.showMessageDialog(this,"Please select the user, to whom rejected document to be send");
        //          return false;
        //        }
        
        return true;
    }
    
    
    private void SetNumberFormats() {
        /*DecimalFormat decimalFormat=new DecimalFormat("0.00");
        NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
        ObjFormater.setAllowsInvalid(false);
        txtCurrencyRate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));*/
    }
    
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=17;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 17, FFNo,false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            
            txtDocDate.requestFocus();
            
            lblTitle.setText("STOCK TRANSFER MEMO (Raw Material) - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(this,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjSTM.getAttribute("STM_NO").getObj();
        if(ObjSTM.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(17,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,172)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtDocDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(this,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(this,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjSTM.getAttribute("STM_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjSTM.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(ObjSTM.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(this,"Error occured while deleting. Error is "+ObjSTM.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(this,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjSTM.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjSTM.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjSTM.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(this,"Error occured while saving. Error is "+ObjSTM.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmSTM_RawFind",true);
        frmSTM_RawFind ObjReturn= (frmSTM_RawFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjSTM.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        ObjSTM.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjSTM.MovePrevious();
        DisplayData();
    }
    
    
    private void MoveNext() {
        ObjSTM.MoveNext();
        DisplayData();
    }
    
    
    private void MoveLast() {
        ObjSTM.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjSTM.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND STM_NO='"+pDocNo+"' AND STM_TYPE=2",pCompanyID);
        ObjSTM.MoveLast();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void PreviewAuditReport() {
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptSTM2A.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText()+"&DocType=2");
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this,"Error Previwing "+e.getMessage());
        }
    }
    
    private void FormatGridLotDetail() {
        try {
            DataModelLot=new EITLTableModel();
            
            TableDetailLotInfo.removeAll();
            TableDetailLotInfo.setModel(DataModelLot);
            TableDetailLotInfo.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            //Set the table Readonly
            DataModelLot.TableReadOnly(false);
            
            DataModelLot.addColumn("Sr."); //0 - Read Only
            DataModelLot.addColumn("Batch No.");
            DataModelLot.addColumn("Receipt No.");
            DataModelLot.addColumn("Issued Qty.");
            
            DataModelLot.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelLot.SetVariable(1,"BATCH_NO"); //0 - Read Only
            DataModelLot.SetVariable(2,"RECEIPT_NO"); //0 - Read Only
            DataModelLot.SetVariable(3,"ISSUED_QTY"); //0 - Read Only
            
            TableDetailLotInfo.getColumnModel().getColumn(0).setPreferredWidth(30);
            TableDetailLotInfo.getColumnModel().getColumn(1).setPreferredWidth(80);
            TableDetailLotInfo.getColumnModel().getColumn(2).setPreferredWidth(80);
            TableDetailLotInfo.getColumnModel().getColumn(3).setPreferredWidth(90);
            
        } catch(Exception e) {
        }
    }
    
    private void PreviewReport() {
        HashMap Params=new HashMap();
        
        //(1) company_id - Integer
        //(2) grn_no     - String
        if(chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
            return;
        }
        if(ObjSTM.getAttribute("APPROVED").getInt() != 1) {
            JOptionPane.showMessageDialog(null,"You cannot take printout of Unapproved document");
            return;
        }
        
        Params.put("company_id", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("stm_no",txtDocNo.getText());
        
        
        try {
            System.out.println("URL=" + "http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptSTMRaw.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptSTMRaw.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
    
}



