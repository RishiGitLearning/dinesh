/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.Stores;

import EITLERP.InvoiceMatching.*;
import EITLERP.*;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ashutosh/RISHI
 */
public class frmRMGStoresSalesReport extends javax.swing.JApplet {

    public boolean forceToChange = false;
    public boolean cancelled = false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelDetailList = new EITLTableModel();
    private EITLTableModel DataModelK3TaxList = new EITLTableModel();
    private EITLTableModel DataModelK3TaxInsertedList = new EITLTableModel();    
    private EITLTableModel DataModelInsertedList = new EITLTableModel();
    private EITLTableCellRenderer Render=new EITLTableCellRenderer();
    
    private EITLComboModel cmbCompanyTypeModel;
    private EITLComboModel cmbIssueTypeModel;
    private clsGSTPJVMatching ObjGSTPJVMatching=new clsGSTPJVMatching();
    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df = new SimpleDateFormat("dd-MMM-yy");
    HashMap hmListToUpload = new HashMap();
    String ORDER_BY = "";
    String Parameter="";
    private clsExcel_Exporter exp = new clsExcel_Exporter();

    public void init() {
        initComponents();
        file1.setVisible(false);
        FormatGrid();//780, 560
        setSize(780, 560);
        GenerateCombos();
        jLabel1.setForeground(Color.WHITE);
        //txtFromDate.setText("01/05/2018");
        //txtToDate.setText("31/05/2018");
        txtFromDate.setVisible(false);
        txtToDate.setVisible(false);
        cmbCompany.setVisible(false);
        cmbIssueType.setVisible(false);
        jLabel4.setVisible(false);
        jLabel6.setVisible(false);
        jLabel7.setVisible(false);
        jLabel9.setVisible(false);
        CLR_BTN.setVisible(false);        
        
        
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        mnuForGSTUpload = new javax.swing.JPopupMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        CLR_BTN = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        btnShowGST = new javax.swing.JButton();
        ExportExcel = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbCompany = new javax.swing.JComboBox();
        cmbIssueType = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jMenuItem5.setText("All");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        mnuForGSTUpload.add(jMenuItem5);

        jMenuItem6.setText("GST not Uploaded");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        mnuForGSTUpload.add(jMenuItem6);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 40, 780, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(90, 30, 100, 20);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(260, 30, 100, 20);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(680, 30, 80, 30);

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Issue Type");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(500, 30, 90, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel1.setText("RMG STORES SALES DETAIL");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 780, 30);

        jPanel10.setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setSelectionBackground(new java.awt.Color(208, 220, 234));
        Table.setSelectionForeground(new java.awt.Color(231, 16, 16));
        Table.getTableHeader().setFont(new Font("Plain", Font.BOLD, 12));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane10.setViewportView(Table);

        jPanel10.add(jScrollPane10);
        jScrollPane10.setBounds(10, 50, 720, 380);

        btnShowGST.setText("Show List");
        btnShowGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGSTActionPerformed(evt);
            }
        });
        jPanel10.add(btnShowGST);
        btnShowGST.setBounds(10, 10, 130, 30);

        ExportExcel.setText("EXPORT TO EXCEL");
        ExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportExcelActionPerformed(evt);
            }
        });
        jPanel10.add(ExportExcel);
        ExportExcel.setBounds(420, 10, 170, 27);

        jTabbedPane1.addTab("RMG STORES SALES Detail", jPanel10);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 50, 760, 480);
        jTabbedPane1.getAccessibleContext().setAccessibleName("GST Upload  Entry");

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("From Date :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 30, 80, 20);

        jLabel7.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel7.setText("Location :");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(370, 30, 70, 20);

        cmbCompany.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbCompany);
        cmbCompany.setBounds(450, 30, 60, 20);

        cmbIssueType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(cmbIssueType);
        cmbIssueType.setBounds(600, 30, 70, 20);

        jLabel9.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel9.setText("To Date :");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(190, 30, 70, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyPressed

    private void btnShowGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGSTActionPerformed
//    if (!Validate()) {
//            return;
//        }
//        data.Execute("UPDATE FINANCE.D_FIN_PARTY_MASTER FM ,DINESHMILLS.D_COM_SUPP_MASTER  SM \n" +
//"SET FM.GSTIN_NO= SM.GSTIN_NO,FM.STATE_GST_CODE= SM.STATE_GST_CODE,FM.STATE_CODE= SM.STATE_CODE,FM.STATE = SM.STATE \n" +
//"WHERE FM.PARTY_CODE = SM.SUPPLIER_CODE AND SM.GSTIN_NO != ''");
        FormatGrid();
        GenerateData(ORDER_BY);
    //    mnuForGSTUpload.show(jPanel10, btnShowGST.getX(), btnShowGST.getY()+btnShowGST.getHeight());
    }//GEN-LAST:event_btnShowGSTActionPerformed

    private void ExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportExcelActionPerformed
        //        // TODO add your handling code here:
        //        try{
        //            exp.fillData(Table_b2b,new File("/root/Desktop/gstr1_B2B.xls"));
        //            exp.fillData(Table_b2b,new File("D://gstr1_B2B.xls"));
        //            JOptionPane.showMessageDialog(null, "Data saved at " +
        //                "'/root/Desktop/gstr1_B2B.xls' successfully in Linux PC or 'D://gstr1_B2B.xls' successfully in Windows PC    ", "Message",
        //                JOptionPane.INFORMATION_MESSAGE);
        //        }
        //        catch(Exception ex) {
        //            ex.printStackTrace();
        //        }
        // TODO add your handling code here:
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);

            exp.fillData(Table, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_ExportExcelActionPerformed

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");        
        FormatGrid();        
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        if(Table.getSelectedColumn()==0){
            if(Table.getValueAt(Table.getSelectedRow(),0).equals(new Boolean(false))){
                Table.setValueAt("", Table.getSelectedRow(), 1);
            }
        }
        if(Table.getSelectedColumn()==0){
            if(Table.getValueAt(Table.getSelectedRow(),0).equals(new Boolean(true))){
                 String voucherNo=Table.getValueAt(Table.getSelectedRow(),7).toString();
                 String mainAccountCode=Table.getValueAt(Table.getSelectedRow(),9).toString();
                 //System.out.println(voucherNo);
                 if(data.IsRecordExist("SELECT VOUCHER_NO FROM FINANCE.D_FIN_GST_UPLOADED_DETAIL WHERE VOUCHER_NO='"+voucherNo+"' AND MAIN_ACCOUNT_CODE='"+mainAccountCode+"'",FinanceGlobal.FinURL)) {
                     JOptionPane.showMessageDialog(null,"Voucher No is already uploaded.");
                     Table.setValueAt(new Boolean(false),Table.getSelectedRow(), 0);                     
            }
            }
        }
    }//GEN-LAST:event_TableMouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
          if (!Validate()) {
            return;
        }
        data.Execute("UPDATE FINANCE.D_FIN_PARTY_MASTER FM ,DINESHMILLS.D_COM_SUPP_MASTER  SM " +
"SET FM.GSTIN_NO= SM.GSTIN_NO,FM.STATE_GST_CODE= SM.STATE_GST_CODE,FM.STATE_CODE= SM.STATE_CODE,FM.STATE = SM.STATE " +
"WHERE FM.PARTY_CODE = SM.SUPPLIER_CODE AND SM.GSTIN_NO != ''");
        FormatGrid();
        Parameter="";
        GenerateData(Parameter);  
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
    if (!Validate()) {
            return;
        }
        data.Execute("UPDATE FINANCE.D_FIN_PARTY_MASTER FM ,DINESHMILLS.D_COM_SUPP_MASTER  SM \n" +
"SET FM.GSTIN_NO= SM.GSTIN_NO,FM.STATE_GST_CODE= SM.STATE_GST_CODE,FM.STATE_CODE= SM.STATE_CODE,FM.STATE = SM.STATE \n" +
"WHERE FM.PARTY_CODE = SM.SUPPLIER_CODE AND SM.GSTIN_NO != ''");
        FormatGrid();
        Parameter="NOT_UPLOADED";
        GenerateData(Parameter);
    }//GEN-LAST:event_jMenuItem6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton ExportExcel;
    private javax.swing.JTable Table;
    private javax.swing.JButton btnShowGST;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbCompany;
    private javax.swing.JComboBox cmbIssueType;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPopupMenu mnuForGSTUpload;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables

    private boolean Validate() {
        //Form level validations
        if (txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter from Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid From Date in DD/MM/YYYY format.");
            return false;
        }

        if (txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter To Date");
            return false;
        } else if (!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid To Date in DD/MM/YYYY format.");
            return false;
        }

        return true;
    }
    
    private void GenerateCombos() {
                     
        //-----------Company----------//
        cmbCompanyTypeModel=new EITLComboModel();
        cmbCompany.removeAllItems();
        cmbCompany.setModel(cmbCompanyTypeModel);
        ComboData aData=new ComboData();
        aData=new ComboData();
        aData.Code=2;
        aData.Text="Baroda";
        cmbCompanyTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=3;
        aData.Text="Ankleshwar";
        cmbCompanyTypeModel.addElement(aData);        
        
        //-------------------------------//
        
        cmbIssueTypeModel=new EITLComboModel();
        cmbIssueType.removeAllItems();
        cmbIssueType.setModel(cmbIssueTypeModel);
        
        //ComboData aData=new ComboData();
        aData.strCode="MAT";
        aData.Text="RMG";
        cmbIssueTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="GEN";
        aData.Text="Stores";
        cmbIssueTypeModel.addElement(aData);
        //===============================//
    }

    private void FormatGrid() {
        try {
            DataModelDetailList= new EITLTableModel();
            Table.removeAll();

            Table.setModel(DataModelDetailList);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(0);
            
            DataModelDetailList.addColumn("Sr, No."); //1
            DataModelDetailList.addColumn("Company"); //1
            DataModelDetailList.addColumn("Invoice No");//2
            DataModelDetailList.addColumn("Invoice Date"); //3
            DataModelDetailList.addColumn("Invoice Value");//4
            DataModelDetailList.addColumn("Item Code");//5
            DataModelDetailList.addColumn("Item Description");//6
            DataModelDetailList.addColumn("Qty"); //7
            DataModelDetailList.addColumn("Sales Rate"); //8
            DataModelDetailList.addColumn("Taxable Value"); //9
            DataModelDetailList.addColumn("CGST Amt");//10
            DataModelDetailList.addColumn("SGST Amt"); //1
            DataModelDetailList.addColumn("IGST Amt"); //11
            DataModelDetailList.addColumn("TOTAL"); //11
            DataModelDetailList.addColumn("Issue Ref"); //11
            DataModelDetailList.addColumn("Issue Rate"); //12
            DataModelDetailList.addColumn("Issue Value");//13
            DataModelDetailList.addColumn("Diff."); //14
            //DataModelDetailList.addColumn("JV Ref."); //15
            DataModelDetailList.addColumn("Diff. %"); //16
            DataModelDetailList.addColumn("JV Ref."); //16
            
//            DataModelDetailList.addColumn("Taxable Value"); //11
//            DataModelDetailList.addColumn("Integrated Tax Paid"); //12
//            DataModelDetailList.addColumn("Central Tax Paid"); //13
//            DataModelDetailList.addColumn("State/UT Tax Paid"); //14
//            DataModelDetailList.addColumn("Cess Paid"); //15
//            DataModelDetailList.addColumn("Eligibility For ITC"); //16
//            DataModelDetailList.addColumn("Availed ITC Integrated Tax"); //17
//            DataModelDetailList.addColumn("Availed ITC Central Tax"); //18
//            DataModelDetailList.addColumn("Availed ITC State/UT Tax"); //19
//            DataModelDetailList.addColumn("Availed ITC Cess");//20

            /*
              DataModelDetailList.SetVariable(0,"UPLOADED"); 
            DataModelDetailList.SetVariable(1,"UPLOADED_MONTH"); 
            DataModelDetailList.SetVariable(2,"REMARKS");
            DataModelDetailList.SetVariable(4, "SUB_ACCOUNT_CODE");
            DataModelDetailList.SetVariable(5,"SUB_ACCOUNT_NAME");
            DataModelDetailList.SetVariable(6,"GSTIN_NO");
            DataModelDetailList.SetVariable(7,"VOUCHER_NO");
            DataModelDetailList.SetVariable(8, "VOUCHER_DATE");
            DataModelDetailList.SetVariable(9, "MAIN_ACCOUNT_CODE");
            DataModelDetailList.SetVariable(10, "MAIN_ACCOUNT_NAME");
            DataModelDetailList.SetVariable(11, "EFFECT");
            DataModelDetailList.SetVariable(12, "AMOUNT");
            DataModelDetailList.SetVariable(13, "DIFFER_AMOUNT");
            DataModelDetailList.SetVariable(14, "HSN_SAC_CODE");
            DataModelDetailList.SetVariable(15, "INVOICE_NO");
            DataModelDetailList.SetVariable(16, "INVOICE_DATE");
            DataModelDetailList.SetVariable(17, "BOOK_CODE");
            DataModelDetailList.SetVariable(18, "VOUCHER_TYPE");
            DataModelDetailList.SetVariable(19, "LEGACY_NO");
            DataModelDetailList.SetVariable(20,"LEGACY_DATE");
            DataModelDetailList.SetVariable(21, "COMPANY_ID");
            DataModelDetailList.SetVariable(22, "VOUCHER_SR_NO");
*/
            
//            DataModelDetailList.SetNumeric(7, true);
//            DataModelDetailList.SetNumeric(11, true);
//            DataModelDetailList.SetNumeric(12, true);
//            DataModelDetailList.SetNumeric(13, true);
//            DataModelDetailList.SetNumeric(14, true);
//            DataModelDetailList.SetNumeric(15, true);
//            DataModelDetailList.SetNumeric(16, true);
//            

//            for (int i = 0; i <= 21; i++) {
//                DataModelDetailList.SetReadOnly(i);
//            }

//            Table.getColumnModel().getColumn(0).setMinWidth(30);
//            for (int i = 1; i <= 21; i++) {
//                Table.getColumnModel().getColumn(i).setMinWidth(100);
//            }
            /*
            Table.getColumnModel().getColumn(0).setMaxWidth(20);
            Table.getColumnModel().getColumn(1).setMinWidth(100);
            Table.getColumnModel().getColumn(3).setMaxWidth(40);
            
            Render.setCustomComponent(0,"CheckBox");
            Table.getColumnModel().getColumn(0).setCellRenderer(Render);
            Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
            
            TableColumn dateColumn = Table.getColumnModel().getColumn(1);

            JComboBox monthbox = new JComboBox();
            String month_name = "";
            java.util.Date date = new java.util.Date();
            int month=0;
            //int month = date.getMonth();
            //int year = date.getYear() + 1900;
            int year=2018;
            for (int i = 0; i < 40; i++) {
                month = month + 1;

                if (month >= 13) {
                    month = 1;
                    year = year + 1;
                }

                if (month == 1) {
                    month_name = "Jan";
                } else if (month == 2) {
                    month_name = "Feb";
                } else if (month == 3) {
                    month_name = "Mar";
                } else if (month == 4) {
                    month_name = "Apr";
                } else if (month == 5) {
                    month_name = "May";
                } else if (month == 6) {
                    month_name = "Jun";
                } else if (month == 7) {
                    month_name = "Jul";
                } else if (month == 8) {
                    month_name = "Aug";
                } else if (month == 9) {
                    month_name = "Sep";
                } else if (month == 10) {
                    month_name = "Oct";
                } else if (month == 11) {
                    month_name = "Nov";
                } else if (month == 12) {
                    month_name = "Dec";
                }
                monthbox.addItem(month_name + " - " + year);
            }

            dateColumn.setCellEditor(new DefaultCellEditor(monthbox));
            */
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    public void GenerateData(String Parameter) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        try {
            String strCondition="";
//            if(!txtFromDate.getText().trim().equals("")){
//                strCondition+=" AND VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
//            }
//            if(!txtToDate.getText().trim().equals("")){
//                strCondition+=" AND VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
//            }
            
            
            String strSQL = "SELECT CASE WHEN COMPANY_ID=2 THEN 'BARODA' WHEN COMPANY_ID=3 THEN 'ANK' END AS COMPANY, "
                    + "INVOICE_NO,INVOICE_DATE,INVOICE_VALUE,A.ITEM_CODE,ITEM_DESCRIPTION,QTY,SALES_RATE,TAXABLE_VALUE, "
                    + "CGST_AMT,SGST_AMT,IGST_AMT,TOTAL,ISSUE_NO,RATE,ISSUE_VALUE,DIFFERENCE_VALUE,COALESCE(PER_DIFF, 0) AS PER_DIFF FROM "
                    + "(SELECT H.COMPANY_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_VALUE, "
                    + "D.ITEM_CODE,D.ITEM_EXTRA_DESC,D.QTY,D.SALES_RATE,D.TAXABLE_VALUE,D.CGST_AMT,D.SGST_AMT,D.IGST_AMT, "
                    + "D.TOTAL,D.ISSUE_NO,D.RATE,D.ISSUE_VALUE,D.DIFFERENCE_VALUE,(D.DIFFERENCE_VALUE/D.ISSUE_VALUE)*100 AS PER_DIFF "
                    + " FROM DINESHMILLS.D_INV_ISSUE_HEADER H, DINESHMILLS.D_INV_ISSUE_DETAIL D "
                    + "WHERE H.ISSUE_NO=D.ISSUE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND D.COST_CENTER_ID IN (5555,6666) "
                    + "UNION ALL "
                    + "SELECT H.COMPANY_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_VALUE, "
                    + "D.ITEM_CODE,D.ITEM_EXTRA_DESC,D.QTY,D.SALES_RATE,D.TAXABLE_VALUE,D.CGST_AMT,D.SGST_AMT,D.IGST_AMT, "
                    + "D.TOTAL,D.ISSUE_NO,D.RATE,D.ISSUE_VALUE,D.DIFFERENCE_VALUE,(D.DIFFERENCE_VALUE/D.ISSUE_VALUE)*100 AS PER_DIFF  "
                    + " FROM DINESHMILLSA.D_INV_ISSUE_HEADER H, DINESHMILLSA.D_INV_ISSUE_DETAIL D "
                    + "WHERE H.ISSUE_NO=D.ISSUE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND D.COST_CENTER_ID IN (5555,6666)) AS A "
                    + "LEFT JOIN "
                    + "(SELECT DISTINCT ITEM_ID,ITEM_DESCRIPTION FROM "
                    + " (SELECT ITEM_ID,ITEM_DESCRIPTION FROM DINESHMILLS.D_INV_ITEM_MASTER WHERE APPROVED=1 AND CANCELLED=0 "
                    + "UNION ALL "
                    + "SELECT ITEM_ID,ITEM_DESCRIPTION FROM DINESHMILLSA.D_INV_ITEM_MASTER WHERE APPROVED=1 AND CANCELLED=0) AS AL) AS B "
                    + "ON A.ITEM_CODE=B.ITEM_ID";
            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                /*if(Parameter.equals("NOT_UPLOADED")){
                String voucherNo=UtilFunctions.getString(rs, "VOUCHER_NO", "");
                Date voucherDate=rs.getDate("VOUCHER_DATE");
                System.out.println(voucherDate);
                String mainAccCode=UtilFunctions.getString(rs, "MAIN_ACCOUNT_CODE", "");
                int srNo=UtilFunctions.getInt(rs, "SR_NO", 0);
                int datafound=data.getIntValueFromDB("SELECT COUNT(*) FROM FINANCE.D_FIN_GST_UPLOADED_DETAIL WHERE VOUCHER_NO='"+voucherNo+"' AND VOUCHER_DATE='"+voucherDate+"' "
                        + " AND VOUCHER_SR_NO="+srNo+" AND MAIN_ACCOUNT_CODE='"+mainAccCode+"'"); 
                if(datafound>0){
                    rs.next();
                    continue;
                }
                }*/
                
                rowData[0]=cnt++;
                rowData[1] = rs.getString("COMPANY");                
                rowData[2] =rs.getString("INVOICE_NO");
                rowData[3]=EITLERPGLOBAL.formatDate(rs.getString("INVOICE_DATE"));
                rowData[4]=rs.getString("INVOICE_VALUE");
                rowData[5] =rs.getString("ITEM_CODE");
                rowData[6] = rs.getString("ITEM_DESCRIPTION");
                rowData[7]= rs.getString("QTY");
                rowData[8]=rs.getString("SALES_RATE");
                rowData[9]=rs.getString("TAXABLE_VALUE");
                rowData[10]=rs.getString("CGST_AMT");
                rowData[11]=rs.getString("SGST_AMT");
                rowData[12]=rs.getString("IGST_AMT");
                rowData[13]=rs.getString("TOTAL");
                rowData[14]=rs.getString("ISSUE_NO");
                rowData[15]=rs.getString("RATE");
                rowData[16]=rs.getString("ISSUE_VALUE");
                rowData[17]=rs.getString("DIFFERENCE_VALUE");
                rowData[18]=EITLERPGLOBAL.round(Double.parseDouble(rs.getString("PER_DIFF")), 2);
                rowData[19]=data.getStringValueFromDB("SELECT DISTINCT VOUCHER_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL D WHERE INVOICE_NO='"+rs.getString("INVOICE_NO")+"' AND INVOICE_DATE='"+rs.getString("INVOICE_DATE")+"'");
                
                //rowData[] = EITLERPGLOBAL.formatDate(rs.getDate("VOUCHER_DATE"));
                
//                rowData[16] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "INVOICE_DATE", ""));
//                rowData[17]=UtilFunctions.getString(rs, "BOOK_CODE", "");
//                rowData[18] = UtilFunctions.getString(rs, "VOUCHER_TYPE", "");
//                rowData[19] = UtilFunctions.getString(rs, "LEGACY_NO", "");
//                rowData[20] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "LEGACY_DATE", ""));
//                rowData[21] = UtilFunctions.getInt(rs, "COMPANY_ID", 0);
//                rowData[22] = UtilFunctions.getInt(rs, "SR_NO", 0);
////                rowData[10] = "R";
//                rowData[11] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
//                rowData[12] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
//                rowData[13] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
//                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
//                rowData[14] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
//                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
//                rowData[15] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
//                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
//                rowData[16] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
//                rowData[17] = "0";
//                rowData[18] = "0";
//                rowData[19] = "0";
//                rowData[20] = "0";
//                rowData[21] = "0";

                DataModelDetailList.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        

    }   
    
    
    
    
    public void GenerateInsertedData(String Parameter) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        try {
            String strCondition="";
            if(!txtFromDate.getText().trim().equals("")){
                strCondition+=" AND VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
            }
            if(!txtToDate.getText().trim().equals("")){
                strCondition+=" AND VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
            }
            if(Parameter.equals("AMOUNT_MATCHES")){
                strCondition+= " AND DIFFER_AMOUNT=0.00 ";                
            }
            if(Parameter.equals("AMOUNT_DIFFERS")){
                strCondition+= " AND DIFFER_AMOUNT!=0.00 ";                
            }
        
            String strSQL = "SELECT * FROM FINANCE.D_FIN_GST_UPLOADED_DETAIL WHERE UPLOADED=1 AND MAIN_ACCOUNT_CODE IN ('231756','231757','231758') "+strCondition                    
                          + "ORDER BY INVOICE_NO,INVOICE_DATE,VOUCHER_NO,VOUCHER_DATE";
                    
            
            /*String strSQL = "SELECT D.VOUCHER_NO AS VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,AMOUNT,D.REMARKS,PO_NO,PO_DATE,INVOICE_NO,INVOICE_DATE,"
                    + "GRN_NO,GRN_DATE,INVOICE_AMOUNT,D.LINK_NO,REF_VOUCHER_NO,HSN_SAC_CODE,ITEM_DESCRIPTION,"
                    + "VOUCHER_DATE,BOOK_CODE,CHEQUE_NO,CHEQUE_DATE,CHEQUE_AMOUNT,VOUCHER_TYPE,"
                    + "LEGACY_NO,LEGACY_DATE,D.COMPANY_ID AS COMPANY_ID FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D WHERE "
                    + "H.COMPANY_ID=D.COMPANY_ID AND H.VOUCHER_NO=D.VOUCHER_NO AND H.APPROVED=1 AND "
                    + "H.CANCELLED=0 AND H.COMPANY_ID="+cmbCompanyTypeModel.getCode((long) cmbCompany.getSelectedIndex())+" "
                    + "AND D.COMPANY_ID="+cmbCompanyTypeModel.getCode((long) cmbCompany.getSelectedIndex())+" AND D.MAIN_ACCOUNT_CODE IN "
                    + "('231756','231757','231758') "+strCondition
                    +" ORDER BY VOUCHER_DATE";
                    */
            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0]=cnt++;
                rowData[1]=UtilFunctions.getString(rs, "UPLOADED_MONTH", "");
                rowData[2] = UtilFunctions.getString(rs, "REMARKS", "");
                rowData[3] =UtilFunctions.getString(rs, "SUB_ACCOUNT_CODE", "");                                
                rowData[4]=UtilFunctions.getString(rs, "SUB_ACCOUNT_NAME", "");
                rowData[5]=UtilFunctions.getString(rs, "GSTIN_NO", "");                
                rowData[6] = UtilFunctions.getString(rs, "VOUCHER_NO", "");
                rowData[7] = EITLERPGLOBAL.formatDate(rs.getDate("VOUCHER_DATE"));
                rowData[8] = UtilFunctions.getString(rs, "MAIN_ACCOUNT_CODE", "");                
                rowData[9] = UtilFunctions.getString(rs, "MAIN_ACCOUNT_NAME", "");                
                if(UtilFunctions.getString(rs,"EFFECT","").equals("C")){
                    rowData[10]="Cr";
                }else{
                rowData[10]="Dr";
                }
                rowData[11] = UtilFunctions.getString(rs, "AMOUNT", "");
                rowData[12] = UtilFunctions.getString(rs, "DIFFER_AMOUNT", "");
                rowData[13] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");
                //if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                //    rowData[6] = "";
                //} else {
                //    rowData[6] = df.format(rs.getDate("INVOICE_DATE"));
                //}
                rowData[14]=UtilFunctions.getString(rs, "INVOICE_NO", "");
                rowData[15] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "INVOICE_DATE", ""));
                rowData[16]=UtilFunctions.getString(rs, "BOOK_CODE", "");
                rowData[17] = UtilFunctions.getString(rs, "VOUCHER_TYPE", "");
                rowData[18] = UtilFunctions.getString(rs, "LEGACY_NO", "");
                rowData[19] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "LEGACY_DATE", ""));
                rowData[20] = UtilFunctions.getInt(rs, "COMPANY_ID", 0);
//                rowData[10] = "R";
//                rowData[11] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
//                rowData[12] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
//                rowData[13] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
//                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
//                rowData[14] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
//                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
//                rowData[15] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
//                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
//                rowData[16] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
//                rowData[17] = "0";
//                rowData[18] = "0";
//                rowData[19] = "0";
//                rowData[20] = "0";
//                rowData[21] = "0";

                DataModelInsertedList.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        

    }
    
    public void GenerateK3TaxInsertedData(String Parameter) {
        double IGSTAmt = 0, CGSTAmt = 0, SGSTAmt = 0;
        try {
            String strCondition="";
            if(!txtFromDate.getText().trim().equals("")){
                strCondition+=" AND VOUCHER_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ";
            }
            if(!txtToDate.getText().trim().equals("")){
                strCondition+=" AND VOUCHER_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ";
            }
            if(Parameter.equals("JV_PREPARED")){
                strCondition+=" AND (JV_NO!='' OR JV_NO IS NOT NULL) ";
            }
            if(Parameter.equals("JV_NOT_PREPATED")){
                strCondition+=" AND (JV_NO='' OR JV_NO IS NULL) ";
            }
            String strSQL = "SELECT * FROM FINANCE.D_FIN_GST_UPLOADED_DETAIL WHERE UPLOADED=1 AND MAIN_ACCOUNT_CODE IN ('231761') "+strCondition                    
                          + "ORDER BY INVOICE_NO,INVOICE_DATE,VOUCHER_NO,VOUCHER_DATE";
                    
            
            /*String strSQL = "SELECT D.VOUCHER_NO AS VOUCHER_NO,EFFECT,MAIN_ACCOUNT_CODE,AMOUNT,D.REMARKS,PO_NO,PO_DATE,INVOICE_NO,INVOICE_DATE,"
                    + "GRN_NO,GRN_DATE,INVOICE_AMOUNT,D.LINK_NO,REF_VOUCHER_NO,HSN_SAC_CODE,ITEM_DESCRIPTION,"
                    + "VOUCHER_DATE,BOOK_CODE,CHEQUE_NO,CHEQUE_DATE,CHEQUE_AMOUNT,VOUCHER_TYPE,"
                    + "LEGACY_NO,LEGACY_DATE,D.COMPANY_ID AS COMPANY_ID FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D WHERE "
                    + "H.COMPANY_ID=D.COMPANY_ID AND H.VOUCHER_NO=D.VOUCHER_NO AND H.APPROVED=1 AND "
                    + "H.CANCELLED=0 AND H.COMPANY_ID="+cmbCompanyTypeModel.getCode((long) cmbCompany.getSelectedIndex())+" "
                    + "AND D.COMPANY_ID="+cmbCompanyTypeModel.getCode((long) cmbCompany.getSelectedIndex())+" AND D.MAIN_ACCOUNT_CODE IN "
                    + "('231756','231757','231758') "+strCondition
                    +" ORDER BY VOUCHER_DATE";
                    */
            System.out.println("QUERY : "+strSQL);
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {

                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0]=cnt++;
                rowData[1]=UtilFunctions.getString(rs, "UPLOADED_MONTH", "");
                rowData[2] = UtilFunctions.getString(rs, "REMARKS", "");
                rowData[3] =UtilFunctions.getString(rs, "SUB_ACCOUNT_CODE", "");                                
                rowData[4]=UtilFunctions.getString(rs, "SUB_ACCOUNT_NAME", "");
                rowData[5]=UtilFunctions.getString(rs, "GSTIN_NO", "");                
                rowData[6] = UtilFunctions.getString(rs, "VOUCHER_NO", "");
                rowData[7] = EITLERPGLOBAL.formatDate(rs.getDate("VOUCHER_DATE"));
                rowData[8] = UtilFunctions.getString(rs, "MAIN_ACCOUNT_CODE", "");                
                rowData[9] = UtilFunctions.getString(rs, "MAIN_ACCOUNT_NAME", "");                
                if(UtilFunctions.getString(rs,"EFFECT","").equals("C")){
                    rowData[10]="Cr";
                }else{
                rowData[10]="Dr";
                }
                rowData[11] = UtilFunctions.getString(rs, "AMOUNT", "");
                
                rowData[12] = UtilFunctions.getString(rs, "JV_NO", "");
                rowData[13] = EITLERPGLOBAL.formatDate(rs.getDate("JV_DATE"));
                if(UtilFunctions.getString(rs,"JV_EFFECT","").equals("C")){
                    rowData[14]="Cr";
                }else{
                rowData[14]="Dr";
                }
                rowData[15] = UtilFunctions.getString(rs, "GSTPORTAL_OR_JV_AMOUNT", "");             
                
                rowData[16] = UtilFunctions.getString(rs, "DIFFER_AMOUNT", "");
                rowData[17] = UtilFunctions.getString(rs, "HSN_SAC_CODE", "");
                //if (rs.getString("INVOICE_DATE").equals("") || rs.getString("INVOICE_DATE")==null || rs.getString("INVOICE_DATE").equals("0000-00-00")) {
                //    rowData[6] = "";
                //} else {
                //    rowData[6] = df.format(rs.getDate("INVOICE_DATE"));
                //}
                rowData[18]=UtilFunctions.getString(rs, "INVOICE_NO", "");
                rowData[19] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "INVOICE_DATE", ""));
                rowData[20]=UtilFunctions.getString(rs, "BOOK_CODE", "");
                rowData[21] = UtilFunctions.getString(rs, "VOUCHER_TYPE", "");
                rowData[22] = UtilFunctions.getString(rs, "LEGACY_NO", "");
                rowData[23] = EITLERPGLOBAL.formatDate(UtilFunctions.getString(rs, "LEGACY_DATE", ""));
                rowData[24] = UtilFunctions.getInt(rs, "COMPANY_ID", 0);
//                rowData[10] = "R";
//                rowData[11] = UtilFunctions.getInt(rs, "TAX_RATE", 0);
//                rowData[12] = UtilFunctions.getInt(rs, "TAXABLE_AMOUNT", 0);
//                rowData[13] = UtilFunctions.getInt(rs, "IGST_AMOUNT", 0);
//                IGSTAmt += UtilFunctions.getDouble(rs, "IGST_AMOUNT", 0);
//                rowData[14] = UtilFunctions.getInt(rs, "CGST_AMOUNT", 0);
//                CGSTAmt += UtilFunctions.getDouble(rs, "CGST_AMOUNT", 0);
//                rowData[15] = UtilFunctions.getInt(rs, "SGST_AMOUNT", 0);
//                SGSTAmt += UtilFunctions.getDouble(rs, "SGST_AMOUNT", 0);
//                rowData[16] = UtilFunctions.getInt(rs, "CESS_AMOUNT", 0);
//                rowData[17] = "0";
//                rowData[18] = "0";
//                rowData[19] = "0";
//                rowData[20] = "0";
//                rowData[21] = "0";

                DataModelK3TaxInsertedList.addRow(rowData);
                rs.next();
            }
            rs.close();

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        

    }
    
 private void GenerateListToUpload(){
      try { 
            
            ObjGSTPJVMatching.hmListItems.clear();
            //hmListToUpload.clear();            
            for(int r=0;r<Table.getRowCount();r++) {
                if(Table.getValueAt(r,0).equals(new Boolean(true))) {
                    clsGSTPJVMatching objItem=new clsGSTPJVMatching();
                    
                    objItem.setAttribute("VOUCHER_NO",DataModelDetailList.getValueAt(r, 7).toString());
                    objItem.setAttribute("VOUCHER_DATE",DataModelDetailList.getValueAt(r,8).toString());
                    objItem.setAttribute("COMPANY_ID",Integer.parseInt(DataModelDetailList.getValueAt(r,21).toString()));
                    objItem.setAttribute("VOUCHER_SR_NO",Integer.parseInt(DataModelDetailList.getValueAt(r,22).toString()));
                    System.out.println(DataModelDetailList.getValueAt(r,0));
                    int Uploaded = (Boolean)DataModelDetailList.getValueAt(r,0) ? 1 : 0;
                    //objItem.setAttribute("UPLOADED",DataModelDetailList.getValueAt(r,0));
                    objItem.setAttribute("UPLOADED", Uploaded);
                    objItem.setAttribute("UPLOADED_MONTH",DataModelDetailList.getValueAt(r,1).toString());
                    objItem.setAttribute("REMARKS",DataModelDetailList.getValueAt(r,2).toString());
                    objItem.setAttribute("SUB_ACCOUNT_CODE",DataModelDetailList.getValueAt(r,4).toString());
                    objItem.setAttribute("SUB_ACCOUNT_NAME",DataModelDetailList.getValueAt(r,5).toString());
                    objItem.setAttribute("GSTIN_NO",DataModelDetailList.getValueAt(r,6).toString());
                    objItem.setAttribute("MAIN_ACCOUNT_CODE", DataModelDetailList.getValueAt(r, 9).toString());
                    objItem.setAttribute("MAIN_ACCOUNT_NAME", DataModelDetailList.getValueAt(r, 10).toString());                                   
                    objItem.setAttribute("AMOUNT",Double.parseDouble(DataModelDetailList.getValueAt(r,12).toString()));
                    if(DataModelDetailList.getValueAt(r,13).toString().equals("")){
                        objItem.setAttribute("DIFFER_AMOUNT",0.00);
                    }else{
                    objItem.setAttribute("DIFFER_AMOUNT",Double.parseDouble(DataModelDetailList.getValueAt(r,13).toString()));
                    }
                    //objItem.setAttribute("DIFFER_AMOUNT",DataModelDetailList.getValueAt(r,13).toString());
                    objItem.setAttribute("HSN_SAC_CODE", DataModelDetailList.getValueAt(r, 14).toString());
                    objItem.setAttribute("INVOICE_NO",DataModelDetailList.getValueAt(r,15).toString());
                    objItem.setAttribute("INVOICE_DATE",DataModelDetailList.getValueAt(r,16).toString());
                    objItem.setAttribute("BOOK_CODE", Integer.parseInt(DataModelDetailList.getValueAt(r, 17).toString()));
                    objItem.setAttribute("VOUCHER_TYPE", Integer.parseInt(DataModelDetailList.getValueAt(r, 18).toString()));
                    objItem.setAttribute("LEGACY_NO",DataModelDetailList.getValueAt(r,19));
                    objItem.setAttribute("LEGACY_DATE",DataModelDetailList.getValueAt(r,20));
                    
                    if(DataModelDetailList.getValueAt(r,11).equals("Cr")) {
                objItem.setAttribute("EFFECT","C");
            }
            else {
                objItem.setAttribute("EFFECT","D");
            }
                    
                    //objItem.setAttribute("COMPANY_ID",UtilFunctions.CInt(DataModelDetailList.getValueByVariable("COMPANY_ID",r)));
                    
                    //hmListToUpload.put(Integer.toString(hmListToUpload.size()+1),objItem);
                    ObjGSTPJVMatching.hmListItems.put(Integer.toString(ObjGSTPJVMatching.hmListItems.size()+1), objItem);
                    System.out.println(ObjGSTPJVMatching.hmListItems.size());
                }
            }
            
            //Cancelled=false;
            //aDialog.dispose();            
        }
        catch(Exception e) {
            //Cancelled=true;
            //aDialog.dispose();
            e.printStackTrace();
        }
        
} 
 
 
 
}
