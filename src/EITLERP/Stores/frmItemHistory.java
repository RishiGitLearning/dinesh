/*
 * frmItemHisotory.java
 *
 * Created on July 5, 2004, 10:02 AM
 */

package EITLERP.Stores;

/**
 *
 * @author  nrpithva
 */
import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.net.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import javax.swing.table.*;

public class frmItemHistory extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    private EITLTableModel DataModelP;
    private EITLTableModel DataModelR;
    
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    
    private int SelDeptID=0;
    private String SelItemID="";
    private int Limit=0;
    private JDialog aDialog;
    
    /** Initializes the applet frmItemHisotory */
    public void init() {
        initComponents();
        FormatGrid();
        FormatGridP();
        Limit=5;
        jLabel14.setText("Last Purchase Orders Information (Showing last "+Limit+" POs)");
        //1143
    }
    
    public frmItemHistory() {
        initComponents();
        FormatGrid();
        FormatGridP();
        Limit=5;
        jLabel14.setText("Last Purchase Orders Information (Showing last "+Limit+" POs)");
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblTitle = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        cmdShow = new javax.swing.JButton();
        lblItem = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableP = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtOnHand = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAllocated = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAvailable = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtAvgConsumption = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtLeadTime = new javax.swing.JTextField();
        chkShowApproved = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtLastGRNNo = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtGRNDate = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtGRNQty = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtGRNRate = new javax.swing.JTextField();
        cmdGRN = new javax.swing.JButton();
        cmdPO = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        txtLimit = new javax.swing.JTextField();
        cmdShowLimit = new javax.swing.JButton();
        cmdClose = new javax.swing.JButton();
        lblLocation = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableR = new javax.swing.JTable();

        getContentPane().setLayout(null);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" ITEM INFORMATION");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 0, 690, 25);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setFont(new java.awt.Font("Default", 1, 12));
        jLabel1.setText("Item");
        jPanel5.add(jLabel1);
        jLabel1.setBounds(9, 16, 34, 14);

        txtItemCode.setFont(new java.awt.Font("Default", 0, 12));
        txtItemCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemCodeFocusLost(evt);
            }
        });
        txtItemCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemCodeKeyPressed(evt);
            }
        });

        jPanel5.add(txtItemCode);
        txtItemCode.setBounds(47, 13, 114, 21);

        cmdShow.setFont(new java.awt.Font("Default", 1, 12));
        cmdShow.setText("Show");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShow);
        cmdShow.setBounds(164, 13, 91, 22);

        lblItem.setFont(new java.awt.Font("Default", 0, 12));
        lblItem.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        lblItem.setEnabled(false);
        jPanel5.add(lblItem);
        lblItem.setBounds(48, 39, 481, 23);

        jButton1.setFont(new java.awt.Font("Default", 1, 12));
        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton1);
        jButton1.setBounds(531, 39, 37, 23);

        jPanel4.setLayout(null);

        jPanel4.setBorder(new javax.swing.border.EtchedBorder());
        jScrollPane2.setAutoscrolls(true);
        TableP.setFont(new java.awt.Font("Default", 0, 12));
        TableP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableP);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(6, 6, 647, 106);

        jPanel5.add(jPanel4);
        jPanel4.setBounds(8, 70, 664, 119);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jLabel2.setFont(new java.awt.Font("Default", 1, 12));
        jLabel2.setText("On Hand");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(8, 12, 68, 15);

        jPanel1.add(txtOnHand);
        txtOnHand.setBounds(74, 8, 114, 19);

        jLabel3.setFont(new java.awt.Font("Default", 1, 12));
        jLabel3.setText("Allocated");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(8, 33, 68, 15);

        jPanel1.add(txtAllocated);
        txtAllocated.setBounds(74, 29, 114, 19);

        jLabel4.setFont(new java.awt.Font("Default", 1, 12));
        jLabel4.setText("Available");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(8, 56, 68, 15);

        jPanel1.add(txtAvailable);
        txtAvailable.setBounds(74, 52, 114, 19);

        jLabel6.setFont(new java.awt.Font("Default", 1, 12));
        jLabel6.setText("Avg. Consumption");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(254, 12, 124, 15);

        jPanel1.add(txtAvgConsumption);
        txtAvgConsumption.setBounds(378, 8, 114, 19);

        jLabel15.setFont(new java.awt.Font("Default", 1, 12));
        jLabel15.setText("Last Lead Time in Days");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(224, 41, 168, 15);

        jPanel1.add(txtLeadTime);
        txtLeadTime.setBounds(379, 40, 84, 19);

        jPanel5.add(jPanel1);
        jPanel1.setBounds(7, 194, 664, 75);

        chkShowApproved.setFont(new java.awt.Font("Default", 1, 12));
        chkShowApproved.setSelected(true);
        chkShowApproved.setText("Show only Approved Last Document");
        jPanel5.add(chkShowApproved);
        chkShowApproved.setBounds(5, 269, 270, 23);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jLabel10.setFont(new java.awt.Font("Default", 1, 12));
        jLabel10.setText("Last GRN No.");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(7, 10, 94, 15);

        jPanel2.add(txtLastGRNNo);
        txtLastGRNNo.setBounds(99, 6, 114, 19);

        jLabel11.setFont(new java.awt.Font("Default", 1, 12));
        jLabel11.setText("Date");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(45, 32, 50, 15);

        jPanel2.add(txtGRNDate);
        txtGRNDate.setBounds(99, 28, 114, 19);

        jLabel12.setFont(new java.awt.Font("Default", 1, 12));
        jLabel12.setText("Qty");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(255, 10, 50, 15);

        jPanel2.add(txtGRNQty);
        txtGRNQty.setBounds(309, 6, 114, 19);

        jLabel13.setFont(new java.awt.Font("Default", 1, 12));
        jLabel13.setText("Rate");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(255, 32, 50, 15);

        jPanel2.add(txtGRNRate);
        txtGRNRate.setBounds(309, 28, 114, 19);

        cmdGRN.setFont(new java.awt.Font("Default", 1, 12));
        cmdGRN.setText("Show GRN");
        cmdGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGRNActionPerformed(evt);
            }
        });

        jPanel2.add(cmdGRN);
        cmdGRN.setBounds(542, 6, 111, 20);

        cmdPO.setFont(new java.awt.Font("Default", 1, 12));
        cmdPO.setText("Show PO");
        cmdPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPOActionPerformed(evt);
            }
        });

        jPanel2.add(cmdPO);
        cmdPO.setBounds(543, 28, 111, 20);

        jPanel5.add(jPanel2);
        jPanel2.setBounds(7, 294, 663, 53);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        jLabel14.setFont(new java.awt.Font("Default", 1, 12));
        jLabel14.setText("Last Purchase Orders Information (Showing last 5 POs)");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(6, 6, 405, 15);

        Table.setFont(new java.awt.Font("Default", 0, 12));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Table);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(8, 28, 649, 130);

        jPanel3.add(txtLimit);
        txtLimit.setBounds(437, 5, 94, 19);

        cmdShowLimit.setText("SHOW PO");
        cmdShowLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowLimitActionPerformed(evt);
            }
        });

        jPanel3.add(cmdShowLimit);
        cmdShowLimit.setBounds(544, 5, 95, 20);

        jPanel5.add(jPanel3);
        jPanel3.setBounds(7, 349, 663, 165);

        cmdClose.setFont(new java.awt.Font("Default", 1, 12));
        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        jPanel5.add(cmdClose);
        cmdClose.setBounds(584, 6, 84, 25);

        lblLocation.setText("-");
        jPanel5.add(lblLocation);
        lblLocation.setBounds(269, 18, 214, 15);

        jTabbedPane1.addTab("Item Information", jPanel5);

        TableR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableR);

        jTabbedPane1.addTab("Pending Report", jScrollPane3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(3, 26, 681, 542);

    }//GEN-END:initComponents

    private void cmdShowLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowLimitActionPerformed
        // TODO add your handling code here:
        Limit= Integer.parseInt(txtLimit.getText());
        jLabel14.setText("Last Purchase Orders Information (Showing last "+Limit+" POs)");
        ShowInformation();
    }//GEN-LAST:event_cmdShowLimitActionPerformed
    
    private void txtItemCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemCodeFocusLost
        // TODO add your handling code here:
        lblItem.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemCode.getText()));
        lblLocation.setText(clsItem.getItemLocationID(EITLERPGLOBAL.gCompanyID,txtItemCode.getText()));
    }//GEN-LAST:event_txtItemCodeFocusLost
    
    private void txtItemCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemCode.setText(aList.ReturnVal);
                lblItem.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
                lblLocation.setText(clsItem.getItemLocationID(EITLERPGLOBAL.gCompanyID,txtItemCode.getText()));
            }
        }
    }//GEN-LAST:event_txtItemCodeKeyPressed
    
    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        ShowInformation();
    }//GEN-LAST:event_cmdShowActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=lblItem;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void cmdGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGRNActionPerformed
        // TODO add your handling code here:
        
        if(!txtLastGRNNo.getText().trim().equals("")) {
            if(clsGRN.getGRNType(EITLERPGLOBAL.gCompanyID, txtLastGRNNo.getText())==1) {
                String DocNo=txtLastGRNNo.getText();
                AppletFrame aFrame=new AppletFrame("GRN General");
                aFrame.startAppletEx("EITLERP.Stores.frmGRNGen","GRN General");
                frmGRNGen ObjDoc=(frmGRNGen) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                //==========*
                String DocNo=txtLastGRNNo.getText();
                AppletFrame aFrame=new AppletFrame("GRN Raw Material");
                aFrame.startAppletEx("EITLERP.Stores.frmGRN","GRN Raw Material");
                frmGRN ObjDoc=(frmGRN) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"No GRN no. found");
        }
    }//GEN-LAST:event_cmdGRNActionPerformed
    
    private void cmdPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPOActionPerformed
        // TODO add your handling code here:
        
        if(Table.getRowCount()>0&&Table.getSelectedRow()>=0) {
            String DocNo=(String)Table.getValueAt(Table.getSelectedRow(), 1);
            int POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID,DocNo);
            AppletFrame aFrame=new AppletFrame("Purchase Order");
            aFrame.startAppletEx("EITLERP.Purchase.frmPOGen","Purchase Order");
            frmPOGen ObjDoc=(frmPOGen) aFrame.ObjApplet;
            ObjDoc.POType=POType;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
        }
        else {
            JOptionPane.showMessageDialog(null,"Please select the PO from the table");
        }
    }//GEN-LAST:event_cmdPOActionPerformed
    
    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
        // TODO add your handling code here:
        aDialog.dispose();
    }//GEN-LAST:event_cmdCloseActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JTable TableP;
    private javax.swing.JTable TableR;
    private javax.swing.JCheckBox chkShowApproved;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdGRN;
    private javax.swing.JButton cmdPO;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdShowLimit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField lblItem;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAllocated;
    private javax.swing.JTextField txtAvailable;
    private javax.swing.JTextField txtAvgConsumption;
    private javax.swing.JTextField txtGRNDate;
    private javax.swing.JTextField txtGRNQty;
    private javax.swing.JTextField txtGRNRate;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtLastGRNNo;
    private javax.swing.JTextField txtLeadTime;
    private javax.swing.JTextField txtLimit;
    private javax.swing.JTextField txtOnHand;
    // End of variables declaration//GEN-END:variables
    
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        Table.removeAll();
        
        Table.setModel(DataModel);
        TableColumnModel ColModel=Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add Columns to it
        DataModel.addColumn("Sr."); //0 - Read Only
        DataModel.addColumn("PO No.");
        DataModel.addColumn("Date");
        DataModel.addColumn("Qty");
        DataModel.addColumn("Supp. Code");
        DataModel.addColumn("Supp. Name");
        DataModel.addColumn("Rate");
        DataModel.addColumn("Item Description");
        DataModel.addColumn("Discount %");
        DataModel.addColumn("Discount Amount");
        
        DataModel.TableReadOnly(true);
    }
    
    private void FormatGridP() {
        DataModelP=new EITLTableModel();
        TableP.removeAll();
        
        TableP.setModel(DataModelP);
        TableColumnModel ColModel=TableP.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add Columns to it
        DataModelP.addColumn("Department"); //0 - Read Only
        DataModelP.addColumn("Pend. Insp. Qty.");
        DataModelP.addColumn("Pend. GRN Qty.");
        DataModelP.addColumn("Pend. Indent Qty.");
        DataModelP.addColumn("Pend. PO Qty.");
        DataModelP.addColumn("Already Approved Indent Qty.");
        
        
        DataModelP.TableReadOnly(true);
    }
    
    
    
    private void FormatGridR() {
        DataModelR=new EITLTableModel();
        TableR.removeAll();
        
        TableR.setModel(DataModelR);
        
        
        TableR.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add Columns to it
        DataModelR.addColumn(" "); //0 - Read Only
        DataModelR.addColumn(" ");
        DataModelR.addColumn(" ");
        DataModelR.addColumn(" ");
        DataModelR.addColumn(" ");
        DataModelR.addColumn(" ");
        DataModelR.addColumn(" ");
        
        DataModelR.TableReadOnly(true);
        TableR.getColumnModel().getColumn(0).setCellRenderer(Rend);
        
        
    }
    
    public boolean ShowForm(String pItemID) {
        try {
            
            txtItemCode.setText(pItemID);
            SelDeptID=clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
            
            ShowInformation();
            
            setSize(700,580);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Item History",false);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(true);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return true;
    }
    
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private void ShowInformation() {
        
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        
        String Report="";
        String NewItemID="";
                
        FormatGridR();
        
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp=null,rsResult=null,rsPO=null,rsPending;
        
        SelItemID=txtItemCode.getText();
        NewItemID=SelItemID;
        
        if(SelItemID.indexOf(".")!=-1)
        {
            // Item ID Contains .
            NewItemID=SelItemID.substring(0,SelItemID.indexOf("."));
        }

        
        lblItem.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemCode.getText()));
        lblLocation.setText(clsItem.getItemLocationID(EITLERPGLOBAL.gCompanyID,txtItemCode.getText()));
        
        if(clsItem.IsOneTime(EITLERPGLOBAL.gCompanyID,SelItemID)) {
            JOptionPane.showMessageDialog(null,"Cannot display history information for one time item");
            return;
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        String strSQL="";
        
        try {
            
            tmpConn=data.getConn();
            stTmp=tmpConn.createStatement();

            //(1) Pending MIR - Find Unique Department First
            strSQL="SELECT DISTINCT(D_COM_DEPT_MASTER.DEPT_ID) AS DEPT_ID FROM D_INV_MIR_HEADER,D_INV_MIR_DETAIL,D_COM_DEPT_MASTER WHERE D_INV_MIR_HEADER.COMPANY_ID=D_INV_MIR_DETAIL.COMPANY_ID AND D_INV_MIR_HEADER.MIR_NO=D_INV_MIR_DETAIL.MIR_NO AND D_INV_MIR_HEADER.MIR_TYPE=D_INV_MIR_DETAIL.MIR_TYPE AND D_INV_MIR_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_INV_MIR_HEADER.APPROVED=0 AND D_INV_MIR_HEADER.CANCELLED=0 AND D_INV_MIR_DETAIL.DEPT_ID=D_COM_DEPT_MASTER.DEPT_ID AND D_INV_MIR_HEADER.COMPANY_ID=D_COM_DEPT_MASTER.COMPANY_ID  AND D_INV_MIR_DETAIL.ITEM_ID LIKE '"+SelItemID+"'";
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    boolean Found=false;
                    for(int d=1;d<=DeptList.size();d++) {
                        int DeptID=Integer.parseInt((String)DeptList.get(Integer.toString(d)));
                        if(DeptID==rsTmp.getInt("DEPT_ID")) {
                            Found=true;
                        }
                    }
                    
                    if(!Found) {
                        DeptList.put(Integer.toString(DeptList.size()+1),Integer.toString(rsTmp.getInt("DEPT_ID")));
                    }
                    rsTmp.next();
                }
            }

            //(2) Pending GRN - Finding Unique Departments first
            
            //Original Query
            //strSQL="SELECT DISTINCT(D_COM_DEPT_MASTER.DEPT_ID) AS DEPT_ID FROM D_INV_MIR_HEADER,D_INV_MIR_DETAIL,D_COM_DEPT_MASTER WHERE D_INV_MIR_HEADER.COMPANY_ID=D_INV_MIR_DETAIL.COMPANY_ID AND D_INV_MIR_HEADER.MIR_NO=D_INV_MIR_DETAIL.MIR_NO AND D_INV_MIR_HEADER.MIR_TYPE=D_INV_MIR_DETAIL.MIR_TYPE AND D_INV_MIR_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_INV_MIR_DETAIL.GRN_RECD_QTY<D_INV_MIR_DETAIL.QTY AND D_INV_MIR_HEADER.APPROVED=1 AND D_INV_MIR_HEADER.CANCELLED=0 AND D_INV_MIR_DETAIL.DEPT_ID=D_COM_DEPT_MASTER.DEPT_ID AND D_INV_MIR_HEADER.COMPANY_ID=D_COM_DEPT_MASTER.COMPANY_ID  AND D_INV_MIR_DETAIL.ITEM_ID LIKE '"+NewItemID+"%'"

            strSQL="SELECT DISTINCT(B.DEPT_ID) AS DEPT_ID ";
            strSQL+="FROM ";
            strSQL+="D_INV_MIR_HEADER A, ";
            strSQL+="D_INV_MIR_DETAIL B ";
            strSQL+="LEFT JOIN D_INV_GRN_DETAIL G ON (G.MIR_NO=B.MIR_NO AND G.MIR_TYPE=B.MIR_TYPE AND G.MIR_SR_NO=B.SR_NO AND G.GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE GRN_NO=G.GRN_NO AND GRN_TYPE=G.GRN_TYPE AND APPROVED=1 AND CANCELLED=0)), ";
            strSQL+="D_COM_DEPT_MASTER D WHERE ";
            strSQL+="A.COMPANY_ID=B.COMPANY_ID AND A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND A.APPROVED=1 AND A.MIR_DATE>='2007-01-01'";
            strSQL+="AND A.CANCELLED=0 AND B.DEPT_ID=D.DEPT_ID AND A.COMPANY_ID=D.COMPANY_ID  AND B.ITEM_ID LIKE '"+SelItemID+"' AND IF(G.QTY+G.REJECTED_QTY IS NULL,0,G.QTY+G.REJECTED_QTY)<B.QTY ";

            System.out.println(strSQL);
            stTmp=tmpConn.createStatement();
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    
                    boolean Found=false;
                    for(int d=1;d<=DeptList.size();d++) {
                        int DeptID=Integer.parseInt((String)DeptList.get(Integer.toString(d)));
                        if(DeptID==rsTmp.getInt("DEPT_ID")) {
                            Found=true;
                        }
                    }
                    
                    if(!Found) {
                        DeptList.put(Integer.toString(DeptList.size()+1),Integer.toString(rsTmp.getInt("DEPT_ID")));
                    }
                    rsTmp.next();
                }
            }
            
            
            //(3) Pending Indents - Finding Unique Departments only
            //strSQL="SELECT DISTINCT(D_COM_DEPT_MASTER.DEPT_ID) AS DEPT_ID FROM D_INV_INDENT_HEADER,D_INV_INDENT_DETAIL,D_COM_DEPT_MASTER WHERE D_INV_INDENT_HEADER.COMPANY_ID=D_INV_INDENT_DETAIL.COMPANY_ID AND D_INV_INDENT_HEADER.INDENT_NO=D_INV_INDENT_DETAIL.INDENT_NO AND D_INV_INDENT_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_INV_INDENT_DETAIL.PO_QTY<D_INV_INDENT_DETAIL.QTY AND D_INV_INDENT_HEADER.APPROVED=1 AND D_INV_INDENT_HEADER.CANCELED=0 AND D_INV_INDENT_DETAIL.COMPANY_ID=D_COM_DEPT_MASTER.COMPANY_ID AND D_INV_INDENT_HEADER.FOR_DEPT_ID=D_COM_DEPT_MASTER.DEPT_ID AND  D_INV_INDENT_DETAIL.ITEM_CODE LIKE '"+NewItemID+"%'"
            
            strSQL="SELECT DISTINCT(A.FOR_DEPT_ID) AS DEPT_ID,B.QTY ";
            strSQL+="FROM ";
            strSQL+="D_INV_INDENT_HEADER A, ";
            strSQL+="D_INV_INDENT_DETAIL B ";
            strSQL+="LEFT JOIN D_PUR_PO_DETAIL P ON (P.INDENT_NO=B.INDENT_NO AND P.INDENT_SR_NO=B.SR_NO AND P.PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO=P.PO_NO AND APPROVED=1 AND CANCELLED=0) ),";
            strSQL+="D_COM_DEPT_MASTER D ";
            strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
            strSQL+="A.INDENT_NO=B.INDENT_NO AND ";
            strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ";
            //strSQL+="A.APPROVED=1 AND ";
            strSQL+="A.CANCELED=0 AND ";
            strSQL+="B.COMPANY_ID=D.COMPANY_ID AND ";
            strSQL+="A.FOR_DEPT_ID=D.DEPT_ID AND ";
            strSQL+="B.ITEM_CODE = '"+SelItemID+"' ";
            strSQL+="AND A.INDENT_DATE>= '2006-04-01' ";
            strSQL+="GROUP BY B.INDENT_NO,B.SR_NO ";
            strSQL+="HAVING IF(SUM(P.QTY) IS NULL,0,SUM(P.QTY))<B.QTY ";
            
            stTmp=tmpConn.createStatement();
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    boolean Found=false;
                    for(int d=1;d<=DeptList.size();d++) {
                        int DeptID=Integer.parseInt((String)DeptList.get(Integer.toString(d)));
                        if(DeptID==rsTmp.getInt("DEPT_ID")) {
                            Found=true;
                        }
                    }
                    
                    if(!Found) {
                        DeptList.put(Integer.toString(DeptList.size()+1),Integer.toString(rsTmp.getInt("DEPT_ID")));
                    }
                    rsTmp.next();
                }
                
            }
            

            //(4) Pending PO - Finding Unique Departments
            //Original Query
            //strSQL="SELECT DISTINCT(D_COM_DEPT_MASTER.DEPT_ID) AS DEPT_ID FROM D_PUR_PO_HEADER,D_PUR_PO_DETAIL,D_COM_DEPT_MASTER WHERE D_PUR_PO_HEADER.COMPANY_ID=D_PUR_PO_DETAIL.COMPANY_ID AND D_PUR_PO_HEADER.PO_NO=D_PUR_PO_DETAIL.PO_NO AND D_PUR_PO_HEADER.PO_TYPE=D_PUR_PO_DETAIL.PO_TYPE AND D_PUR_PO_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_PUR_PO_DETAIL.RECD_QTY<D_PUR_PO_DETAIL.QTY AND D_PUR_PO_HEADER.APPROVED=1 AND D_PUR_PO_HEADER.CANCELLED=0 AND D_PUR_PO_DETAIL.COMPANY_ID=D_COM_DEPT_MASTER.COMPANY_ID AND D_PUR_PO_DETAIL.DEPT_ID=D_COM_DEPT_MASTER.DEPT_ID  AND D_PUR_PO_DETAIL.ITEM_ID LIKE '"+NewItemID+"%'";
            
            strSQL="SELECT DISTINCT(B.DEPT_ID),B.QTY ";
            strSQL+="FROM ";
            strSQL+="D_PUR_PO_HEADER A, ";
            strSQL+="D_PUR_PO_DETAIL B ";
            strSQL+="LEFT JOIN D_INV_MIR_DETAIL M ON (M.PO_NO=B.PO_NO AND M.PO_SR_NO=B.SR_NO AND M.PO_TYPE=B.PO_TYPE AND M.MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_HEADER WHERE MIR_NO=M.MIR_NO AND MIR_TYPE=M.MIR_TYPE AND APPROVED=1 AND CANCELLED=0) ) ";
            strSQL+="LEFT JOIN D_INV_JOB_DETAIL J ON (J.PO_NO=B.PO_NO AND J.PO_SR_NO=B.SR_NO AND J.JOB_NO IN (SELECT JOB_NO FROM D_INV_JOB_HEADER WHERE JOB_NO=J.JOB_NO AND APPROVED=1 AND CANCELLED=0) ), ";
            strSQL+="D_COM_DEPT_MASTER D ";
            strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
            strSQL+="A.PO_NO=B.PO_NO AND ";
            strSQL+="A.PO_TYPE=B.PO_TYPE AND ";
            strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ";
            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
            strSQL+="B.COMPANY_ID=D.COMPANY_ID AND B.DEPT_ID=D.DEPT_ID AND ";
            strSQL+="B.ITEM_ID = '"+SelItemID+"' ";
            strSQL+="AND A.PO_DATE>= '2006-04-01' ";
            strSQL+="GROUP BY B.PO_NO,B.PO_TYPE,B.SR_NO ";
            strSQL+="HAVING ( IF(SUM(M.QTY) IS NULL,0,SUM(M.QTY)) + IF(SUM(J.QTY) IS NULL,0,SUM(J.QTY)) ) <B.QTY ";
            
            stTmp=tmpConn.createStatement();
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    boolean Found=false;
                    for(int d=1;d<=DeptList.size();d++) {
                        int DeptID=Integer.parseInt((String)DeptList.get(Integer.toString(d)));
                        if(DeptID==rsTmp.getInt("DEPT_ID")) {
                            Found=true;
                        }
                    }
                    
                    if(!Found) {
                        DeptList.put(Integer.toString(DeptList.size()+1),Integer.toString(rsTmp.getInt("DEPT_ID")));
                    }
                    rsTmp.next();
                }
            }
            
            double PendGRNQty=0,PendInspQty=0,PendIndentQty=0,PendPOQty=0,ApprovedIndentQty=0;
            
            tmpConn=data.getConn();
            

            clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID, SelItemID, EITLERPGLOBAL.getCurrentDateDB());
            double OnHand=objStock.StockQty;
            double Allocated=0;
            double Available=OnHand-Allocated;
            
            //Showing Current Stock Information
            txtOnHand.setText(Double.toString(OnHand));
            txtAllocated.setText(Double.toString(Allocated));
            txtAvailable.setText(Double.toString(Available));
            txtAvgConsumption.setText(Double.toString(clsItem.getAvgConsumption(EITLERPGLOBAL.gCompanyID,SelItemID,"YEARLY",5)));
            
            FormatGridP();
            for(int d=1;d<=DeptList.size();d++) {
                
                int DeptID=Integer.parseInt((String)DeptList.get(Integer.toString(d)));
                String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,DeptID);

                PendGRNQty=clsMIRRaw.getPendingGRNQty(EITLERPGLOBAL.gCompanyID, DeptID,SelItemID);
                PendInspQty=clsMIRRaw.getPendingMIRQty(EITLERPGLOBAL.gCompanyID, DeptID,SelItemID);
                PendIndentQty=clsIndent.getPendingIndentQty(EITLERPGLOBAL.gCompanyID, DeptID, SelItemID);
                PendPOQty=clsPOGen.getPendingQty(EITLERPGLOBAL.gCompanyID, DeptID,SelItemID);
                ApprovedIndentQty=clsIndent.getAlreadyApprovedQty(EITLERPGLOBAL.gCompanyID, DeptID, SelItemID);
                
                if(PendInspQty>0||PendIndentQty>0||PendPOQty>0||ApprovedIndentQty>0||PendGRNQty>0) {
                    Object[] rowData=new Object[6];
                    rowData[0]=DeptName;
                    rowData[1]=Double.toString(EITLERPGLOBAL.round(PendInspQty,3));
                    rowData[2]=Double.toString(EITLERPGLOBAL.round(PendGRNQty,3));
                    rowData[3]=Double.toString(EITLERPGLOBAL.round(PendIndentQty,3));
                    rowData[4]=Double.toString(EITLERPGLOBAL.round(PendPOQty,3));
                    rowData[5]=Double.toString(EITLERPGLOBAL.round(ApprovedIndentQty,3));
                    
                    DataModelP.addRow(rowData);
                }
                
                
                //Generating Report Contents for each department
                //(1) Pending Indent Qty. Report
                //===============================================================//
                Object[] rowData=new Object[7];
                rowData[0]=DeptName;
                DataModelR.addRow(rowData);
                Rend.setBackColor(TableR.getRowCount()-1, 0, Color.GREEN);
                
                rowData=new Object[7];
                DataModelR.addRow(rowData);
                
                if(PendIndentQty>0) {
                    rowData=new Object[7];
                    rowData[0]="Pending Indent Qty";
                    DataModelR.addRow(rowData);
                    
                    rowData=new Object[7];
                    rowData[0]="Indent No.";
                    rowData[1]="Date";
                    rowData[2]="Item Extra Desc";
                    rowData[3]="Qty";
                    rowData[4]="PO Qty";
                    rowData[5]="Balance Qty";
                    DataModelR.addRow(rowData);

                    
                    Rend.setBackColor(TableR.getRowCount()-1, 0, Color.GRAY);
                    Rend.setForeColor(TableR.getRowCount()-1, 0, Color.WHITE);

                    
                    rowData=new Object[7];
                    DataModelR.addRow(rowData);
                    
                    //strSQL="SELECT A.INDENT_NO,A.INDENT_DATE,B.ITEM_EXTRA_DESC,B.QTY,B.PO_QTY FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_COM_DEPT_MASTER C WHERE A.COMPANY_ID=B.COMPANY_ID AND A.INDENT_NO=B.INDENT_NO  AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND B.PO_QTY<B.QTY  AND B.COMPANY_ID=C.COMPANY_ID AND A.FOR_DEPT_ID=C.DEPT_ID AND A.FOR_DEPT_ID="+DeptID+" AND B.ITEM_CODE LIKE '"+NewItemID+"%' AND A.APPROVED=1 AND A.CANCELED=0";
                    
                    strSQL="SELECT A.INDENT_NO,A.INDENT_DATE,B.ITEM_EXTRA_DESC,B.QTY,SUM(P.QTY) AS PO_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_INDENT_HEADER A, ";
                    strSQL+="D_INV_INDENT_DETAIL B ";
                    strSQL+="LEFT JOIN D_PUR_PO_DETAIL P ON (P.INDENT_NO=B.INDENT_NO AND P.INDENT_SR_NO=B.SR_NO AND P.PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO=P.PO_NO AND APPROVED=1 AND CANCELLED=0) ),";
                    strSQL+="D_COM_DEPT_MASTER D ";
                    strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
                    strSQL+="A.INDENT_NO=B.INDENT_NO AND ";
                    strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ";
                    //strSQL+="A.APPROVED=1 AND ";
                    strSQL+="A.CANCELED=0 AND ";
                    strSQL+="B.COMPANY_ID=D.COMPANY_ID AND ";
                    strSQL+="A.FOR_DEPT_ID=D.DEPT_ID AND ";
                    strSQL+="B.ITEM_CODE ='"+SelItemID+"' AND ";
                    strSQL+="A.FOR_DEPT_ID="+DeptID+" ";
                    strSQL+="AND A.INDENT_DATE>='2006-04-01'";
                    strSQL+="GROUP BY B.INDENT_NO,B.SR_NO ";
                    strSQL+="HAVING IF(SUM(P.QTY) IS NULL,0,SUM(P.QTY))<B.QTY ";
                                      
                    rsPending=data.getResult(strSQL);
                    rsPending.first();
                    if(rsPending.getRow()>0) {
                        while(!rsPending.isAfterLast()) {
                            rowData=new Object[7];
                            rowData[0]=rsPending.getString("INDENT_NO");
                            rowData[1]=EITLERPGLOBAL.formatDate(rsPending.getString("INDENT_DATE"));
                            rowData[2]=rsPending.getString("ITEM_EXTRA_DESC");
                            rowData[3]=Double.toString(rsPending.getDouble("QTY"));
                            rowData[4]=Double.toString(rsPending.getDouble("PO_QTY"));
                            rowData[5]=Double.toString(EITLERPGLOBAL.round(rsPending.getDouble("QTY")-rsPending.getDouble("PO_QTY"),3));
                            DataModelR.addRow(rowData);
                            
                            rsPending.next();
                        }
                        
                        //Add Blank Rows
                        rowData=new Object[7];
                        DataModelR.addRow(rowData);
                        
                    }
                    
                    
                }
                
                
                //SHOWING PENDING INSPECTION QTY.
                if(PendInspQty>0) {
                    rowData=new Object[7];
                    rowData[0]="Pending Inspection Qty";
                    DataModelR.addRow(rowData);
                    
                    rowData=new Object[7];
                    rowData[0]="MIR No.";
                    rowData[1]="Date";
                    rowData[2]="Item Extra Desc";
                    rowData[3]="PO No.";
                    rowData[4]="PO Qty";
                    rowData[5]="Received Qty";
                    rowData[6]=" ";
                    DataModelR.addRow(rowData);
                    
                    Rend.setBackColor(TableR.getRowCount()-1, 0, Color.GRAY);
                    Rend.setForeColor(TableR.getRowCount()-1, 0, Color.WHITE);
                    
                    
                    
                    rowData=new Object[7];
                    DataModelR.addRow(rowData);
                    
                    
                    strSQL="SELECT A.MIR_NO,A.MIR_DATE,B.ITEM_EXTRA_DESC,B.PO_NO,B.PO_QTY,B.QTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B,D_COM_DEPT_MASTER C WHERE A.COMPANY_ID=B.COMPANY_ID AND A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND B.DEPT_ID=C.DEPT_ID AND A.COMPANY_ID=C.COMPANY_ID AND B.DEPT_ID="+DeptID+" AND B.ITEM_ID='"+SelItemID+"' AND A.APPROVED=0 AND A.CANCELLED=0";
                    
                    rsPending=data.getResult(strSQL);
                    rsPending.first();
                    if(rsPending.getRow()>0) {
                        while(!rsPending.isAfterLast()) {
                            rowData=new Object[7];
                            rowData[0]=rsPending.getString("MIR_NO");
                            rowData[1]=EITLERPGLOBAL.formatDate(rsPending.getString("MIR_DATE"));
                            rowData[2]=rsPending.getString("ITEM_EXTRA_DESC");
                            rowData[3]=rsPending.getString("PO_NO");
                            rowData[4]=Double.toString(rsPending.getDouble("PO_QTY"));
                            rowData[5]=Double.toString(rsPending.getDouble("QTY"));
                            rowData[6]="";
                            DataModelR.addRow(rowData);
                            
                            rsPending.next();
                        }
                        
                        
                        //Add Blank Rows
                        rowData=new Object[7];
                        DataModelR.addRow(rowData);
                        
                    }
                    //========================================================//
                    
                }

                
                
                //SHOWING PENDING GRN QTY.
                if(PendGRNQty>0) {
                    rowData=new Object[7];
                    rowData[0]="Pending GRN Qty";
                    DataModelR.addRow(rowData);
                    
                    rowData=new Object[7];
                    rowData[0]="MIR No.";
                    rowData[1]="Date";
                    rowData[2]="Item Extra Desc";
                    rowData[3]="PO No.";
                    rowData[4]="PO Qty";
                    rowData[5]="Received Qty";
                    rowData[6]="Balance Qty";
                    DataModelR.addRow(rowData);
                    
                    Rend.setBackColor(TableR.getRowCount()-1, 0, Color.GRAY);
                    Rend.setForeColor(TableR.getRowCount()-1, 0, Color.WHITE);
                    
                    rowData=new Object[7];
                    DataModelR.addRow(rowData);
                    
                    
                    //strSQL="SELECT A.MIR_NO,A.MIR_DATE,B.ITEM_EXTRA_DESC,B.PO_NO,B.PO_QTY,B.QTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B,D_COM_DEPT_MASTER C WHERE A.COMPANY_ID=B.COMPANY_ID AND A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND B.GRN_RECD_QTY<=0 AND B.DEPT_ID=C.DEPT_ID AND A.COMPANY_ID=C.COMPANY_ID AND B.DEPT_ID="+DeptID+" AND B.ITEM_ID LIKE '"+NewItemID+"%' AND A.APPROVED=1 AND A.CANCELLED=0";
                    
                    strSQL="SELECT A.MIR_NO,A.MIR_DATE,B.ITEM_EXTRA_DESC,B.PO_NO,B.PO_QTY,B.QTY,B.REJECTED_QTY ";
                    strSQL+="FROM  ";
                    strSQL+="D_INV_MIR_HEADER A, ";
                    strSQL+="D_INV_MIR_DETAIL B ";
                    strSQL+="LEFT JOIN D_INV_GRN_DETAIL G ON (G.MIR_NO=B.MIR_NO AND G.MIR_TYPE=B.MIR_TYPE AND G.MIR_SR_NO=B.SR_NO AND G.GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE GRN_NO=G.GRN_NO AND GRN_TYPE=G.GRN_TYPE AND APPROVED=1 AND CANCELLED=0)), ";
                    strSQL+="D_COM_DEPT_MASTER D WHERE ";
                    strSQL+="A.COMPANY_ID=B.COMPANY_ID AND ";
                    strSQL+="A.MIR_NO=B.MIR_NO AND ";
                    strSQL+="A.MIR_TYPE=B.MIR_TYPE AND ";
                    strSQL+="A.CANCELLED=0 AND ";
                    strSQL+="B.DEPT_ID=D.DEPT_ID AND ";
                    strSQL+="A.COMPANY_ID=D.COMPANY_ID  AND ";
                    strSQL+="B.ITEM_ID='"+SelItemID+"' AND ";
                    strSQL+="B.DEPT_ID="+DeptID+" AND ";
                    strSQL+="A.MIR_DATE >='2007-01-01' AND A.APPROVED=1 AND ";
                    strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ";
                    strSQL+="GROUP BY B.MIR_NO,B.MIR_TYPE,B.SR_NO ";
                    strSQL+="HAVING IF(SUM(G.QTY+G.REJECTED_QTY) IS NULL,0,SUM(G.QTY+G.REJECTED_QTY))<(B.QTY+B.REJECTED_QTY) ";
                    
                    System.out.println(strSQL);
                    rsPending=data.getResult(strSQL);
                    rsPending.first();
                    if(rsPending.getRow()>0) {
                        while(!rsPending.isAfterLast()) {
                            rowData=new Object[7];
                            rowData[0]=rsPending.getString("MIR_NO");
                            rowData[1]=EITLERPGLOBAL.formatDate(rsPending.getString("MIR_DATE"));
                            rowData[2]=rsPending.getString("ITEM_EXTRA_DESC");
                            rowData[3]=rsPending.getString("PO_NO");
                            rowData[4]=Double.toString(rsPending.getDouble("PO_QTY"));
                            rowData[5]=Double.toString(rsPending.getDouble("QTY"));
                            rowData[6]=Double.toString(EITLERPGLOBAL.round(rsPending.getDouble("PO_QTY")-rsPending.getDouble("QTY"),3));
                            DataModelR.addRow(rowData);
                            
                            rsPending.next();
                        }
                        
                        
                        //Add Blank Rows
                        rowData=new Object[7];
                        DataModelR.addRow(rowData);
                        
                    }
                    //========================================================//
                    
                }
                
                
                
                //SHOWING PENDING PO QTY.
                if(PendPOQty>0) {
                    rowData=new Object[7];
                    rowData[0]="Pending PO Qty";
                    DataModelR.addRow(rowData);
                    
                    rowData=new Object[7];
                    rowData[0]="PO No.";
                    rowData[1]="Date";
                    rowData[2]="Item Extra Desc";
                    rowData[3]="Indent No.";
                    rowData[4]="PO Qty";
                    rowData[5]="Received Qty";
                    rowData[6]="Pending Qty";
                    DataModelR.addRow(rowData);
                    
                    Rend.setBackColor(TableR.getRowCount()-1, 0, Color.GRAY);
                    Rend.setForeColor(TableR.getRowCount()-1, 0, Color.WHITE);
                                        
                    
                    rowData=new Object[7];
                    DataModelR.addRow(rowData);
                    
                    //strSQL="SELECT A.PO_NO,A.PO_DATE,B.ITEM_DESC,B.INDENT_NO,B.QTY,B.RECD_QTY FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B,D_COM_DEPT_MASTER C WHERE A.COMPANY_ID=B.COMPANY_ID AND A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND B.RECD_QTY<QTY AND A.APPROVED=1 AND B.COMPANY_ID=C.COMPANY_ID AND B.DEPT_ID=C.DEPT_ID AND B.DEPT_ID="+DeptID+" AND B.ITEM_ID LIKE '"+NewItemID+"%' AND A.APPROVED=1 AND A.CANCELLED=0";
                    
                    strSQL="SELECT A.PO_NO,A.PO_DATE,B.ITEM_DESC,B.INDENT_NO,B.QTY,( IF(SUM(M.QTY) IS NULL,0,SUM(M.QTY)) +IF(SUM(J.QTY) IS NULL,0,SUM(J.QTY))) AS RECD_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_PUR_PO_HEADER A, ";
                    strSQL+="D_PUR_PO_DETAIL B ";
                    strSQL+="LEFT JOIN D_INV_MIR_DETAIL M ON (M.PO_NO=B.PO_NO AND M.PO_SR_NO=B.SR_NO AND M.PO_TYPE=B.PO_TYPE AND M.MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_HEADER WHERE MIR_NO=M.MIR_NO AND MIR_TYPE=M.MIR_TYPE AND APPROVED=1 AND CANCELLED=0) ) ";
                    strSQL+="LEFT JOIN D_INV_JOB_DETAIL J ON (J.PO_NO=B.PO_NO AND J.PO_SR_NO=B.SR_NO AND J.JOB_NO IN (SELECT JOB_NO FROM D_INV_JOB_HEADER WHERE JOB_NO=J.JOB_NO AND APPROVED=1 AND CANCELLED=0) ), ";
                    strSQL+="D_COM_DEPT_MASTER D ";
                    strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
                    strSQL+="A.PO_NO=B.PO_NO AND ";
                    strSQL+="A.PO_TYPE=B.PO_TYPE AND ";
                    strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="B.COMPANY_ID=D.COMPANY_ID AND B.DEPT_ID=D.DEPT_ID ";
                    strSQL+="AND B.ITEM_ID='"+SelItemID+"' ";
                    strSQL+="AND B.DEPT_ID="+DeptID+" ";
                    strSQL+="AND A.PO_DATE>='2006-04-01'";
                    strSQL+="GROUP BY B.PO_NO,B.PO_TYPE,B.SR_NO ";
                    strSQL+="HAVING ( IF(SUM(M.QTY) IS NULL,0,SUM(M.QTY))+IF(SUM(J.QTY) IS NULL,0,SUM(J.QTY)) ) <B.QTY ";
                    
                    
                    System.out.println(strSQL);
                    rsPending=data.getResult(strSQL);
                    rsPending.first();
                    if(rsPending.getRow()>0) {
                        while(!rsPending.isAfterLast()) {
                            rowData=new Object[7];
                            rowData[0]=rsPending.getString("PO_NO");
                            rowData[1]=EITLERPGLOBAL.formatDate(rsPending.getString("PO_DATE"));
                            rowData[2]=rsPending.getString("ITEM_DESC");
                            rowData[3]=rsPending.getString("INDENT_NO");
                            rowData[4]=Double.toString(rsPending.getDouble("QTY"));
                            rowData[5]=Double.toString(rsPending.getDouble("RECD_QTY"));
                            rowData[6]=Double.toString(EITLERPGLOBAL.round(rsPending.getDouble("QTY")-rsPending.getDouble("RECD_QTY"),3));
                            DataModelR.addRow(rowData);
                            
                            rsPending.next();
                        }
                        
                        
                        //Add Blank Rows
                        rowData=new Object[7];
                        DataModelR.addRow(rowData);
                        
                    }
                    //========================================================//
                    
                }
                
                
                rsTmp.next();
            }
            
            
            
            
            
            //Showing Last GRN Information
            String LastPONo="";
            String MIRNo="";
//-----------------------------------------------------------------------------------------------------------------------------------//            
//-----------------------------------------------------------------------------------------------------------------------------------//
            //========== Showing PO =====================//
            if(chkShowApproved.isSelected()) {
                strSQL= "SELECT D_PUR_PO_HEADER.PO_NO,PO_DATE,SUM(QTY) AS QTY,RATE,SUPP_ID,IF(D_PUR_PO_DETAIL.COLUMN_1_PER IS NULL,0,D_PUR_PO_DETAIL.COLUMN_1_PER) AS D_PER,IF(D_PUR_PO_DETAIL.COLUMN_1_AMT IS NULL,0,D_PUR_PO_DETAIL.COLUMN_1_AMT) AS D_AMT FROM D_PUR_PO_HEADER,D_PUR_PO_DETAIL WHERE D_PUR_PO_HEADER.COMPANY_ID=D_PUR_PO_DETAIL.COMPANY_ID AND D_PUR_PO_HEADER.PO_NO=D_PUR_PO_DETAIL.PO_NO AND D_PUR_PO_HEADER.PO_TYPE=D_PUR_PO_DETAIL.PO_TYPE AND D_PUR_PO_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_PUR_PO_HEADER.APPROVED=1 AND D_PUR_PO_HEADER.CANCELLED=0 GROUP BY D_PUR_PO_DETAIL.PO_NO,PO_DATE,D_PUR_PO_DETAIL.PO_TYPE,ITEM_ID ORDER BY PO_DATE DESC LIMIT "+Limit+" ";//5";
            }
            else {
                strSQL= "SELECT D_PUR_PO_HEADER.PO_NO,PO_DATE,SUM(QTY) AS QTY,RATE,SUPP_ID,IF(D_PUR_PO_DETAIL.COLUMN_1_PER IS NULL,0,D_PUR_PO_DETAIL.COLUMN_1_PER) AS D_PER,IF(D_PUR_PO_DETAIL.COLUMN_1_AMT IS NULL,0,D_PUR_PO_DETAIL.COLUMN_1_AMT) AS D_AMT FROM D_PUR_PO_HEADER,D_PUR_PO_DETAIL WHERE D_PUR_PO_HEADER.COMPANY_ID=D_PUR_PO_DETAIL.COMPANY_ID AND D_PUR_PO_HEADER.PO_NO=D_PUR_PO_DETAIL.PO_NO AND D_PUR_PO_HEADER.PO_TYPE=D_PUR_PO_DETAIL.PO_TYPE AND D_PUR_PO_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_PUR_PO_HEADER.CANCELLED=0 GROUP BY D_PUR_PO_DETAIL.PO_NO,PO_DATE,D_PUR_PO_DETAIL.PO_TYPE,ITEM_ID ORDER BY PO_DATE DESC LIMIT "+Limit+" ";//5";
            }
            stTmp=tmpConn.createStatement();
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            FormatGrid();
            if(rsTmp.getRow()>0) {
                LastPONo=rsTmp.getString("PO_NO");
                
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[10];
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("PO_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE"));
                    rowData[3]=Double.toString(rsTmp.getDouble("QTY"));
                    rowData[4]=rsTmp.getString("SUPP_ID");
                    rowData[5]=clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,rsTmp.getString("SUPP_ID"));
                    rowData[6]=Double.toString(rsTmp.getDouble("RATE"));
                    
                    rowData[8]=Double.toString(rsTmp.getDouble("D_PER"));
                    rowData[9]=Double.toString(rsTmp.getDouble("D_AMT"));
                    
                    
                    String ItemDesc="";
                    
                    rsPO=data.getResult("SELECT ITEM_DESC FROM D_PUR_PO_DETAIL WHERE PO_NO='"+rsTmp.getString("PO_NO")+"' AND ITEM_ID LIKE '"+NewItemID+"%'");
                    rsPO.first();
                    
                    if(rsPO.getRow()>0) {
                        ItemDesc=rsPO.getString("ITEM_DESC");
                    }
                    
                    rowData[7]=ItemDesc;
                    
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }
            //=========================================//
            
            
            //Finding MIR for this last PO
            if(chkShowApproved.isSelected()) {
                strSQL="SELECT D_INV_MIR_HEADER.MIR_NO FROM D_INV_MIR_HEADER,D_INV_MIR_DETAIL WHERE D_INV_MIR_HEADER.COMPANY_ID=D_INV_MIR_DETAIL.COMPANY_ID AND D_INV_MIR_HEADER.MIR_NO=D_INV_MIR_DETAIL.MIR_NO AND D_INV_MIR_HEADER.MIR_TYPE=D_INV_MIR_DETAIL.MIR_TYPE AND D_INV_MIR_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_MIR_HEADER.APPROVED=1 AND D_INV_MIR_HEADER.CANCELLED=0 AND PO_NO='"+LastPONo+"' GROUP BY D_INV_MIR_DETAIL.MIR_NO,MIR_DATE,D_INV_MIR_DETAIL.MIR_TYPE ORDER BY MIR_NO DESC,MIR_DATE DESC LIMIT 1";
            }
            else {
                strSQL="SELECT D_INV_MIR_HEADER.MIR_NO FROM D_INV_MIR_HEADER,D_INV_MIR_DETAIL WHERE D_INV_MIR_HEADER.COMPANY_ID=D_INV_MIR_DETAIL.COMPANY_ID AND D_INV_MIR_HEADER.MIR_NO=D_INV_MIR_DETAIL.MIR_NO AND D_INV_MIR_HEADER.MIR_TYPE=D_INV_MIR_DETAIL.MIR_TYPE AND D_INV_MIR_DETAIL.ITEM_ID LIKE '"+SelItemID+"%' AND D_INV_MIR_HEADER.CANCELLED=0 AND PO_NO='"+LastPONo+"' GROUP BY D_INV_MIR_DETAIL.MIR_NO,MIR_DATE,D_INV_MIR_DETAIL.MIR_TYPE ORDER BY MIR_NO DESC,MIR_DATE DESC LIMIT 1";
            }
            stTmp=tmpConn.createStatement();
            rsTmp=stTmp.executeQuery(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                MIRNo=rsTmp.getString("MIR_NO");
            }
            
            
            //Clear existing Data
            txtLastGRNNo.setText("");
            txtGRNDate.setText("");
            txtGRNQty.setText("");
            txtGRNRate.setText("");
            
            
            if(!MIRNo.trim().equals("")) {
                
                if(chkShowApproved.isSelected()) {
                    strSQL="SELECT D_INV_GRN_HEADER.GRN_NO,GRN_DATE,SUM(QTY) AS THEQTY,AVG(LANDED_RATE) AS LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.QTY>0 AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_GRN_HEADER.APPROVED=1 AND D_INV_GRN_HEADER.CANCELLED=0 AND MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.QTY>0 GROUP BY D_INV_GRN_DETAIL.GRN_NO,GRN_DATE,D_INV_GRN_DETAIL.GRN_TYPE  ORDER BY GRN_NO DESC,GRN_DATE DESC LIMIT 1";
                }
                else {
                    strSQL="SELECT D_INV_GRN_HEADER.GRN_NO,GRN_DATE,SUM(QTY) AS THEQTY,AVG(LANDED_RATE) AS LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.QTY>0 AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_GRN_HEADER.CANCELLED=0 AND MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.QTY>0 GROUP BY D_INV_GRN_DETAIL.GRN_NO,GRN_DATE,D_INV_GRN_DETAIL.GRN_TYPE ORDER BY GRN_NO DESC,GRN_DATE DESC LIMIT 1";
                }
                stTmp=tmpConn.createStatement();
                rsTmp=stTmp.executeQuery(strSQL);
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    txtLastGRNNo.setText(rsTmp.getString("GRN_NO"));
                    txtGRNDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE")));
                    txtGRNQty.setText(Double.toString(rsTmp.getDouble("THEQTY")));
                    txtGRNRate.setText(Double.toString(rsTmp.getDouble("LANDED_RATE")));
                }
                else {
                    if(chkShowApproved.isSelected()) {
                        strSQL="SELECT D_INV_GRN_HEADER.GRN_NO,GRN_DATE,SUM(QTY) AS THEQTY,AVG(LANDED_RATE) AS LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.QTY>0 AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_GRN_HEADER.APPROVED=1 AND D_INV_GRN_HEADER.CANCELLED=0  GROUP BY D_INV_GRN_DETAIL.GRN_NO,GRN_DATE,D_INV_GRN_DETAIL.GRN_TYPE ORDER BY GRN_NO DESC,GRN_DATE DESC LIMIT 1";
                    }
                    else {
                        strSQL="SELECT D_INV_GRN_HEADER.GRN_NO,GRN_DATE,SUM(QTY) AS THEQTY,AVG(LANDED_RATE) AS LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.QTY>0 AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_GRN_HEADER.CANCELLED=0 GROUP BY D_INV_GRN_DETAIL.GRN_NO,GRN_DATE,D_INV_GRN_DETAIL.GRN_TYPE ORDER BY GRN_NO DESC,GRN_DATE DESC LIMIT 1";
                    }
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery(strSQL);
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        txtLastGRNNo.setText(rsTmp.getString("GRN_NO"));
                        txtGRNDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE")));
                        txtGRNQty.setText(Double.toString(rsTmp.getDouble("THEQTY")));
                        txtGRNRate.setText(Double.toString(rsTmp.getDouble("LANDED_RATE")));
                    }
                    
                }
            }
            else {
                
                if(chkShowApproved.isSelected()) {
                    strSQL="SELECT D_INV_GRN_HEADER.GRN_NO,GRN_DATE,SUM(QTY) AS THEQTY,AVG(LANDED_RATE) AS LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.QTY>0 AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_GRN_HEADER.APPROVED=1 AND D_INV_GRN_HEADER.CANCELLED=0 GROUP BY D_INV_GRN_DETAIL.GRN_NO,GRN_DATE,D_INV_GRN_DETAIL.GRN_TYPE ORDER BY GRN_NO DESC,GRN_DATE DESC LIMIT 1";
                }
                else {
                    strSQL="SELECT D_INV_GRN_HEADER.GRN_NO,GRN_DATE,SUM(QTY) AS THEQTY,AVG(LANDED_RATE) AS LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.QTY>0 AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_DETAIL.ITEM_ID LIKE '"+NewItemID+"%' AND D_INV_GRN_HEADER.CANCELLED=0  GROUP BY D_INV_GRN_DETAIL.GRN_NO,GRN_DATE,D_INV_GRN_DETAIL.GRN_TYPE ORDER BY GRN_NO DESC,GRN_DATE DESC LIMIT 1";
                }
                stTmp=tmpConn.createStatement();
                rsTmp=stTmp.executeQuery(strSQL);
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    txtLastGRNNo.setText(rsTmp.getString("GRN_NO"));
                    txtGRNDate.setText(EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE")));
                    txtGRNQty.setText(Double.toString(rsTmp.getDouble("THEQTY")));
                    txtGRNRate.setText(Double.toString(rsTmp.getDouble("LANDED_RATE")));
                }
                
                
            }
            
            SelItemID=txtItemCode.getText();
            txtLeadTime.setText(Double.toString(clsItem.getLastLeadTime(EITLERPGLOBAL.gCompanyID, SelItemID)));
            
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            
            //tmpConn.close();
            TableR.repaint();
            stTmp.close();
            rsTmp.close();
            rsPO.close();
            
            //rsResult.close();
            
        }
        
        
        catch(Exception e) {
            e.printStackTrace();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        
    }
    
}
