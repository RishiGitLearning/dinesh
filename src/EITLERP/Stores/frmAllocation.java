/*
 * frmAllocation.java
 *
 * Created on March 1, 2005, 4:36 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import javax.swing.table.*;
import java.awt.Frame;
import java.util.*;


public class frmAllocation extends javax.swing.JApplet {
    
    private JDialog aDialog;
    
    private EITLTableModel DataModel;
    public String ItemID="";
    
    /** Initializes the applet frmAllocation */
    public frmAllocation() {
        setSize(589, 495);
        initComponents();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        txtItemID = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdClose = new javax.swing.JButton();
        
        getContentPane().setLayout(null);
        
        jPanel1.setLayout(null);
        
        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setText("ITEM STOCK ALLOCATION INFORMATION");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(9, 7, 309, 15);
        
        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 4, 573, 31);
        
        jLabel2.setText("ITEM");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(9, 57, 38, 15);
        
        txtItemName.setBackground(new java.awt.Color(255, 255, 255));
        txtItemName.setEditable(false);
        getContentPane().add(txtItemName);
        txtItemName.setBounds(167, 52, 353, 23);
        
        txtItemID.setBackground(new java.awt.Color(255, 255, 255));
        txtItemID.setEditable(false);
        txtItemID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtItemIDMouseClicked(evt);
            }
        });
        
        getContentPane().add(txtItemID);
        txtItemID.setBounds(51, 52, 114, 23);
        
        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        getContentPane().add(jButton1);
        jButton1.setBounds(525, 52, 38, 23);
        
        Table.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        jScrollPane1.setViewportView(Table);
        
        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(8, 92, 553, 335);
        
        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdClose);
        cmdClose.setBounds(475, 439, 88, 25);
        
    }//GEN-END:initComponents

    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
        // TODO add your handling code here:
        aDialog.dispose();
    }//GEN-LAST:event_cmdCloseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtItemName;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtItemIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtItemIDMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtItemIDMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtItemID;
    private javax.swing.JTextField txtItemName;
    // End of variables declaration//GEN-END:variables
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    public boolean ShowWindow() {
        try {
            GenerateGrid();
            
            setSize(589, 495);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"List",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return true;
    }
    
    
    private void GenerateGrid() {
        HashMap List=new HashMap();
        
        List=clsAllocation.getAllocationList(EITLERPGLOBAL.gCompanyID, " AND ITEM_ID='"+ItemID+"'");
        
        FormatGrid();
        
        for(int i=1;i<=List.size();i++) {
            clsAllocation ObjAlloc=(clsAllocation)List.get(Integer.toString(i));
            
            Object[] rowData=new Object[6];
            
            rowData[0]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjAlloc.getAttribute("DEPT_ID").getVal());
            rowData[1]=Double.toString(ObjAlloc.getAttribute("ALLOCATED_QTY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjAlloc.getAttribute("DOC_DATE").getObj());
            rowData[3]=Double.toString(ObjAlloc.getAttribute("ISSUED_QTY").getVal());
            rowData[4]=Double.toString(ObjAlloc.getAttribute("ALLOCATED_QTY").getVal()-ObjAlloc.getAttribute("ISSUED_QTY").getVal());
            rowData[5]=(String)ObjAlloc.getAttribute("INDENT_NO").getObj();
            
            DataModel.addRow(rowData);
        }
        
        txtItemID.setText(ItemID);
        txtItemName.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,ItemID));
        
    }
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        Table.removeAll();
        
        Table.setModel(DataModel);
        TableColumnModel ColModel=Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add Columns to it
        DataModel.addColumn("Department"); //0 - Read Only
        DataModel.addColumn("Allocated Qty"); //1
        DataModel.addColumn("Allocated On");
        DataModel.addColumn("Issued Qty"); //2 //Read Only
        DataModel.addColumn("Remaining"); //3
        DataModel.addColumn("Indent No."); //4 Read Only - Hidden
        
        DataModel.TableReadOnly(true);
    }
    
    
}
