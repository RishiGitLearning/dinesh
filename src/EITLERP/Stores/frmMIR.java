/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

/*<APPLET CODE=frmMIR.class HEIGHT=525 WIDTH=773></APPLET>*/
package EITLERP.Stores;

/**
 *
 * @author nhpatel
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.FeltSales.FeltPacking.ReportRegister;
import EITLERP.FeltSales.common.MailNotification;
import EITLERP.Purchase.*;
import EITLERP.Utils.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.net.*;
import EITLERP.Finance.*;
import java.sql.Connection;
import java.sql.ResultSet;

/**
 *
 */
public class frmMIR extends javax.swing.JApplet {

    private int EditMode = 0;

    private EITLTableModel DataModelH;
    private EITLTableModel DataModelL;
    private EITLTableModel DataModelLot;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellPainter = new EITLTableCellRenderer();

    private HashMap colVariables = new HashMap();
    private HashMap colVariables_H = new HashMap();
    clsTaxColumn ObjTax = new clsTaxColumn();
    clsColumn ObjColumn = new clsColumn();

    private JEP myParser = new JEP();
    private boolean Updating = false;
    private boolean Updating_H = false;
    private boolean DoNotEvaluate = false;

    private clsMIRRaw ObjMIR;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbTransportModel;
    private EITLComboModel cmbCurrencyModel;
    private EITLComboModel cmbStatusModel;
    private EITLTableModel DataModelA;

    private boolean HistoryView = false;
    private String theDocNo = "";
    private EITLTableModel DataModelHS;

    String cellLastValueL = "";
    String cellLastValueH = "";

    private double CurrencyRate = 0;

    public frmPendingApprovals frmPA;
    public String LastLotNo = "";

    /**
     * Creates new form frmTemplate
     */
    public void init() {
        System.gc();
        setSize(773, 525);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        ObjTax.LoadData((int) EITLERPGLOBAL.gCompanyID);
        ObjColumn.LoadData((int) EITLERPGLOBAL.gCompanyID);

        FormatGrid();
        FormatGridLotDetail();
        FormatGrid_H();
        SetNumberFormats();

        GenerateCombos();
        ObjMIR = new clsMIRRaw();

        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {
            if (ObjMIR.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjMIR.MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + ObjMIR.LastError);
            }
        }

        txtAuditRemarks.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSuppCode = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtChalanNo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtChalanDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtLRNo = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtLRDate = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbTransporter = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        txtGatepassNo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cmbCurrency = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        chkImportConcess = new javax.swing.JCheckBox();
        chkCancelled = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        txtCurrencyRate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        txtSuffix = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        lblTransName = new javax.swing.JLabel();
        txtTransName = new javax.swing.JTextField();
        Tab2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        HeaderPane = new javax.swing.JScrollPane();
        TableH = new javax.swing.JTable();
        cmdInsert = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        cmdNext2 = new javax.swing.JButton();
        cmdBack2 = new javax.swing.JButton();
        txtGrossAmount = new javax.swing.JTextField();
        txtNetAmount = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtInvoiceAmount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        txtFinalAmount = new javax.swing.JTextField();
        lblColumnTotal = new javax.swing.JLabel();
        DetailPaneLotInfo = new javax.swing.JScrollPane();
        TableDetailLotInfo = new javax.swing.JTable();
        Tab3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" MATERIAL INSPECTION REPORT (Raw Material)");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("MIR No. :");
        Tab1.add(jLabel2);
        jLabel2.setBounds(10, 18, 95, 15);

        txtDocNo.setEditable(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(114, 14, 100, 19);

        jLabel3.setText("MIR Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(261, 15, 64, 15);

        txtDocDate.setEditable(false);
        txtDocDate.setName("MIR_DATE"); // NOI18N
        txtDocDate.setNextFocusableComponent(txtSuppCode);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(329, 13, 100, 19);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Supplier :");
        Tab1.add(jLabel4);
        jLabel4.setBounds(10, 87, 95, 15);

        txtSuppCode.setName("SUPP_ID"); // NOI18N
        txtSuppCode.setNextFocusableComponent(txtChalanNo);
        txtSuppCode.setEnabled(false);
        txtSuppCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSuppCodeActionPerformed(evt);
            }
        });
        txtSuppCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSuppCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppCodeFocusLost(evt);
            }
        });
        txtSuppCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSuppCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtSuppCode);
        txtSuppCode.setBounds(114, 83, 62, 19);

        txtSuppName.setNextFocusableComponent(txtChalanNo);
        txtSuppName.setEnabled(false);
        Tab1.add(txtSuppName);
        txtSuppName.setBounds(179, 83, 212, 19);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Chalan No. :");
        Tab1.add(jLabel5);
        jLabel5.setBounds(10, 123, 95, 15);

        txtChalanNo.setName("CHALAN_NO"); // NOI18N
        txtChalanNo.setNextFocusableComponent(txtChalanDate);
        txtChalanNo.setEnabled(false);
        txtChalanNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtChalanNoFocusGained(evt);
            }
        });
        Tab1.add(txtChalanNo);
        txtChalanNo.setBounds(114, 119, 114, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Date :");
        Tab1.add(jLabel6);
        jLabel6.setBounds(245, 123, 40, 15);

        txtChalanDate.setName("CHALAN_DATE"); // NOI18N
        txtChalanDate.setNextFocusableComponent(txtLRNo);
        txtChalanDate.setEnabled(false);
        txtChalanDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtChalanDateFocusGained(evt);
            }
        });
        Tab1.add(txtChalanDate);
        txtChalanDate.setBounds(291, 121, 100, 19);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("L.R. No. :");
        Tab1.add(jLabel7);
        jLabel7.setBounds(10, 147, 95, 15);

        txtLRNo.setName("LR_NO"); // NOI18N
        txtLRNo.setNextFocusableComponent(txtLRDate);
        txtLRNo.setEnabled(false);
        txtLRNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLRNoFocusGained(evt);
            }
        });
        Tab1.add(txtLRNo);
        txtLRNo.setBounds(114, 143, 114, 19);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Date :");
        Tab1.add(jLabel8);
        jLabel8.setBounds(245, 147, 40, 15);

        txtLRDate.setName("LR_DATE"); // NOI18N
        txtLRDate.setNextFocusableComponent(txtInvoiceNo);
        txtLRDate.setEnabled(false);
        txtLRDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLRDateFocusGained(evt);
            }
        });
        Tab1.add(txtLRDate);
        txtLRDate.setBounds(292, 145, 100, 19);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Invoice No. :");
        Tab1.add(jLabel9);
        jLabel9.setBounds(10, 170, 95, 15);

        txtInvoiceNo.setName("INVOICE_NO"); // NOI18N
        txtInvoiceNo.setNextFocusableComponent(txtInvoiceDate);
        txtInvoiceNo.setEnabled(false);
        txtInvoiceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceNoFocusGained(evt);
            }
        });
        Tab1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(114, 167, 114, 19);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Date :");
        Tab1.add(jLabel10);
        jLabel10.setBounds(245, 171, 40, 15);

        txtInvoiceDate.setName("INVOICE_DATE"); // NOI18N
        txtInvoiceDate.setNextFocusableComponent(cmbTransporter);
        txtInvoiceDate.setEnabled(false);
        txtInvoiceDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceDateFocusGained(evt);
            }
        });
        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(293, 169, 100, 19);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Transporter :");
        Tab1.add(jLabel11);
        jLabel11.setBounds(10, 204, 95, 15);

        cmbTransporter.setName("TRANSPORTER"); // NOI18N
        cmbTransporter.setNextFocusableComponent(txtTransName);
        cmbTransporter.setEnabled(false);
        cmbTransporter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransporterFocusGained(evt);
            }
        });
        Tab1.add(cmbTransporter);
        cmbTransporter.setBounds(114, 200, 274, 24);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Gatepass No. :");
        Tab1.add(jLabel12);
        jLabel12.setBounds(10, 268, 95, 15);

        txtGatepassNo.setName("GATEPASS_NO"); // NOI18N
        txtGatepassNo.setNextFocusableComponent(cmbCurrency);
        txtGatepassNo.setEnabled(false);
        txtGatepassNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusLost(evt);
            }
        });
        txtGatepassNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtGatepassNoKeyPressed(evt);
            }
        });
        Tab1.add(txtGatepassNo);
        txtGatepassNo.setBounds(114, 265, 114, 19);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Currency :");
        Tab1.add(jLabel13);
        jLabel13.setBounds(10, 300, 95, 15);

        cmbCurrency.setName("CURRENCY_ID"); // NOI18N
        cmbCurrency.setNextFocusableComponent(txtCurrencyRate);
        cmbCurrency.setEnabled(false);
        cmbCurrency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCurrencyFocusGained(evt);
            }
        });
        Tab1.add(cmbCurrency);
        cmbCurrency.setBounds(114, 296, 134, 20);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Rate :");
        Tab1.add(jLabel14);
        jLabel14.setBounds(257, 297, 36, 15);

        chkImportConcess.setText("Import Concessional");
        chkImportConcess.setName("IMPORT_CONCESS"); // NOI18N
        chkImportConcess.setEnabled(false);
        chkImportConcess.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkImportConcessFocusGained(evt);
            }
        });
        Tab1.add(chkImportConcess);
        chkImportConcess.setBounds(438, 62, 204, 23);

        chkCancelled.setText("Cancelled");
        chkCancelled.setNextFocusableComponent(txtRemarks);
        chkCancelled.setEnabled(false);
        chkCancelled.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chkCancelledFocusGained(evt);
            }
        });
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(439, 86, 94, 23);

        jLabel17.setText("Status :");
        Tab1.add(jLabel17);
        jLabel17.setBounds(447, 16, 50, 15);

        cmbStatus.setName("OPEN_STATUS"); // NOI18N
        cmbStatus.setNextFocusableComponent(chkImportConcess);
        cmbStatus.setEnabled(false);
        cmbStatus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbStatusFocusGained(evt);
            }
        });
        Tab1.add(cmbStatus);
        cmbStatus.setBounds(502, 12, 94, 24);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Remarks :");
        Tab1.add(jLabel21);
        jLabel21.setBounds(10, 333, 95, 15);

        txtRemarks.setNextFocusableComponent(cmdNext1);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(114, 330, 416, 19);

        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(txtDocDate);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(629, 328, 102, 25);

        txtCurrencyRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCurrencyRate.setName("CURRENCY_RATE"); // NOI18N
        txtCurrencyRate.setNextFocusableComponent(cmbStatus);
        txtCurrencyRate.setEnabled(false);
        Tab1.add(txtCurrencyRate);
        txtCurrencyRate.setBounds(296, 296, 81, 19);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(216, 16, 34, 15);

        txtSuffix.setName("REFA"); // NOI18N
        txtSuffix.setEnabled(false);
        Tab1.add(txtSuffix);
        txtSuffix.setBounds(114, 58, 62, 19);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Suffix :");
        Tab1.add(jLabel15);
        jLabel15.setBounds(10, 60, 95, 15);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(538, 329, 34, 20);

        lblTransName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTransName.setText("Trans. Name :");
        Tab1.add(lblTransName);
        lblTransName.setBounds(10, 234, 95, 15);

        txtTransName.setName("REMARKS"); // NOI18N
        txtTransName.setNextFocusableComponent(txtGatepassNo);
        txtTransName.setEnabled(false);
        Tab1.add(txtTransName);
        txtTransName.setBounds(114, 232, 271, 19);

        Tab.addTab("Header ", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setNextFocusableComponent(TableH);
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TableL);

        Tab2.add(jScrollPane1);
        jScrollPane1.setBounds(6, 38, 732, 176);

        TableH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableH.setNextFocusableComponent(txtInvoiceAmount);
        HeaderPane.setViewportView(TableH);

        Tab2.add(HeaderPane);
        HeaderPane.setBounds(6, 240, 180, 124);

        cmdInsert.setMnemonic('I');
        cmdInsert.setText("Insert from P.O.");
        cmdInsert.setNextFocusableComponent(TableL);
        cmdInsert.setEnabled(false);
        cmdInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertActionPerformed(evt);
            }
        });
        cmdInsert.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdInsertFocusGained(evt);
            }
        });
        Tab2.add(cmdInsert);
        cmdInsert.setBounds(406, 8, 140, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(TableL);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });
        Tab2.add(cmdAdd);
        cmdAdd.setBounds(554, 8, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(TableL);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });
        Tab2.add(cmdRemove);
        cmdRemove.setBounds(646, 8, 92, 25);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Gross Amount :");
        Tab2.add(jLabel18);
        jLabel18.setBounds(485, 228, 110, 15);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Net Amount :");
        Tab2.add(jLabel19);
        jLabel19.setBounds(485, 254, 110, 15);

        jLabel20.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel20.setText("MIR Items");
        Tab2.add(jLabel20);
        jLabel20.setBounds(10, 14, 70, 15);

        cmdNext2.setText("Next >>");
        cmdNext2.setNextFocusableComponent(cmdBack2);
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdNext2);
        cmdNext2.setBounds(638, 340, 102, 25);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdInsert);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(532, 340, 102, 25);

        txtGrossAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtGrossAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Tab2.add(txtGrossAmount);
        txtGrossAmount.setBounds(598, 226, 138, 19);

        txtNetAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtNetAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Tab2.add(txtNetAmount);
        txtNetAmount.setBounds(599, 250, 136, 19);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Invoice Amount :");
        Tab2.add(jLabel22);
        jLabel22.setBounds(485, 304, 110, 15);

        txtInvoiceAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtInvoiceAmount.setNextFocusableComponent(cmdNext2);
        txtInvoiceAmount.setEnabled(false);
        Tab2.add(txtInvoiceAmount);
        txtInvoiceAmount.setBounds(598, 300, 136, 19);

        jButton1.setText("Show PO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        Tab2.add(jButton1);
        jButton1.setBounds(301, 225, 109, 25);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Final Amount :");
        Tab2.add(jLabel23);
        jLabel23.setBounds(485, 279, 110, 15);

        txtFinalAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtFinalAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Tab2.add(txtFinalAmount);
        txtFinalAmount.setBounds(600, 275, 136, 19);

        lblColumnTotal.setForeground(new java.awt.Color(102, 102, 255));
        lblColumnTotal.setText(".");
        Tab2.add(lblColumnTotal);
        lblColumnTotal.setBounds(8, 220, 250, 15);

        TableDetailLotInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableDetailLotInfo.setNextFocusableComponent(txtInvoiceAmount);
        DetailPaneLotInfo.setViewportView(TableDetailLotInfo);

        Tab2.add(DetailPaneLotInfo);
        DetailPaneLotInfo.setBounds(195, 260, 290, 100);

        Tab.addTab("Item Information", Tab2);

        Tab3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });
        Tab3.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab3.add(jLabel31);
        jLabel31.setBounds(2, 18, 83, 15);

        cmbHierarchy.setEditable(true);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        Tab3.add(cmbHierarchy);
        cmbHierarchy.setBounds(90, 14, 184, 24);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab3.add(jLabel32);
        jLabel32.setBounds(2, 52, 83, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFrom);
        txtFrom.setBounds(90, 50, 182, 19);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab3.add(jLabel35);
        jLabel35.setBounds(2, 82, 83, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab3.add(txtFromRemarks);
        txtFromRemarks.setBounds(90, 78, 518, 19);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab3.add(jLabel36);
        jLabel36.setBounds(2, 123, 83, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 168, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab3.add(jPanel6);
        jPanel6.setBounds(90, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab3.add(jLabel33);
        jLabel33.setBounds(2, 228, 83, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab3.add(cmbSendTo);
        cmbSendTo.setBounds(90, 224, 184, 24);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab3.add(jLabel34);
        jLabel34.setBounds(2, 264, 83, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab3.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack3.setText("<< Back");
        cmdBack3.setNextFocusableComponent(cmbHierarchy);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });
        Tab3.add(cmdBack3);
        cmdBack3.setBounds(634, 322, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(615, 77, 34, 20);

        Tab.addTab("Approval", Tab3);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status :");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 712, 144);

        lblDocumentHistory.setText("Document Update History :");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 194, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 210, 567, 137);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(592, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(592, 274, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });
        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(592, 212, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(592, 306, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(592, 338, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(4, 68, 752, 398);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 466, 752, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void txtGatepassNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGatepassNoKeyPressed
        // TODO add your handling code here:
        //
        //=========== GatePass List ===============
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            HashMap List = new HashMap();
            LOV aList = new LOV();

            aList.SQL = "SELECT INWARD_NO,SUPPLIER_CODE,INWARD_DATE FROM D_INV_GATE_INWARD_HEADER "
                    + "WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND APPROVED=1 AND CANCELLED=0 "
                    + "AND SUBSTRING(INWARD_NO,1,2)='GR' "
                    + "AND INWARD_NO NOT IN (SELECT GATEPASS_NO FROM  D_INV_MIR_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + ") "
                    + "ORDER BY INWARD_DATE";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.SecondCol = 2;
            aList.DefaultSearchOn = 3;

            if (aList.ShowLOV()) {
                txtGatepassNo.setText(aList.ReturnVal);

                List = clsGateInward.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INWARD_NO='" + txtGatepassNo.getText().trim() + "' ");
                for (int i = 1; i <= List.size(); i++) {
                    clsGateInward ObjGateInward = (clsGateInward) List.get(Integer.toString(i));
                    txtSuppCode.setText(ObjGateInward.getAttribute("SUPPLIER_CODE").getString());
                    txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText().trim()));
                    txtChalanNo.setText(ObjGateInward.getAttribute("CHALAN_NO").getString());
                    txtChalanDate.setText(EITLERPGLOBAL.formatDate(ObjGateInward.getAttribute("CHALAN_DATE").getString()));
                    txtInvoiceNo.setText(ObjGateInward.getAttribute("INVOICE_NO").getString());
                    txtInvoiceDate.setText(EITLERPGLOBAL.formatDate(ObjGateInward.getAttribute("INVOICE_DATE").getString()));
                }
            }
        }
        //
    }//GEN-LAST:event_txtGatepassNoKeyPressed

    private void txtGatepassNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusLost
        // TODO add your handling code here:
        //
        HashMap List = new HashMap();
        if (!txtGatepassNo.getText().trim().equals("")) {
            List = clsGateInward.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND INWARD_NO='" + txtGatepassNo.getText().trim() + "' AND SUBSTRING(INWARD_NO,1,2)='GR' ");
            if (List.size() > 0) {
                for (int i = 1; i <= List.size(); i++) {
                    clsGateInward ObjGateInward = (clsGateInward) List.get(Integer.toString(i));
                    txtSuppCode.setText(ObjGateInward.getAttribute("SUPPLIER_CODE").getString());
                    txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText().trim()));
                    txtChalanNo.setText(ObjGateInward.getAttribute("CHALAN_NO").getString());
                    txtChalanDate.setText(EITLERPGLOBAL.formatDate(ObjGateInward.getAttribute("CHALAN_DATE").getString()));
                    txtInvoiceNo.setText(ObjGateInward.getAttribute("INVOICE_NO").getString());
                    txtInvoiceDate.setText(EITLERPGLOBAL.formatDate(ObjGateInward.getAttribute("INVOICE_DATE").getString()));
                }
            } else {
                /*
                 txtChalanNo.setText("");
                 txtChalanDate.setText("");
                 txtInvoiceNo.setText("");
                 txtInvoiceDate.setText("");
                 txtSuppCode.setText("");
                 txtSuppName.setText("");
                 txtGatepassNo.setText("");
                 txtGatepassNo.requestFocus();
                 ShowMessage("Gate Pass Number is invalid.");
                 */
            }
        }
        //
    }//GEN-LAST:event_txtGatepassNoFocusLost

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed

    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (TableL.getRowCount() > 0 && TableL.getSelectedRow() >= 0) {
            String PONo = DataModelL.getValueByVariable("PO_NO", TableL.getSelectedRow());

            int POType = clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, PONo);
            AppletFrame aFrame = new AppletFrame("Purchase Order");
            aFrame.startAppletEx("EITLERP.Purchase.frmPOGen", "Purchase Order");
            frmPOGen ObjDoc = (frmPOGen) aFrame.ObjApplet;
            ObjDoc.POType = POType;
            ObjDoc.FindEx((int) EITLERPGLOBAL.gCompanyID, PONo);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjMIR.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtDocNo.getText();
        ObjMIR.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        if (EditMode != 0) {
            if (evt.getKeyCode() == 67 && evt.getModifiersEx() == 128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if (TableL.getRowCount() > 0) {
                    //First Add new row
                    Object[] rowData = new Object[1];
                    DataModelL.addRow(rowData);
                    int NewRow = TableL.getRowCount() - 1;

                    //Copy New row with Previous one
                    for (int i = 0; i < TableL.getColumnCount(); i++) {
                        TableL.setValueAt(TableL.getValueAt(TableL.getSelectedRow(), i), NewRow, i);
                    }
                    UpdateSrNo();
                }
            }
        }

        double CGST = Double.parseDouble(DataModelL.getValueByVariable("CGST", TableL.getSelectedRow()));
        double SGST = Double.parseDouble(DataModelL.getValueByVariable("SGST", TableL.getSelectedRow()));
        double IGST = Double.parseDouble(DataModelL.getValueByVariable("IGST", TableL.getSelectedRow()));

        double CGST_PER = Double.parseDouble(DataModelL.getValueByVariable("P_856", TableL.getSelectedRow()));
        double SGST_PER = Double.parseDouble(DataModelL.getValueByVariable("P_857", TableL.getSelectedRow()));
        double IGST_PER = Double.parseDouble(DataModelL.getValueByVariable("P_858", TableL.getSelectedRow()));

        //if((!CGST.equals(SGST)) || (!CGST_PER.equals(SGST_PER)))
        if ((CGST != SGST) || (CGST_PER != SGST_PER)) {
            JOptionPane.showMessageDialog(null, "CGST and SGST must be same");

            if (CGST_PER > 0) {
                DataModelL.setValueByVariable("SGST", CGST + "", TableL.getSelectedRow());
                DataModelL.setValueByVariable("P_857", DataModelL.getValueByVariable("P_856", TableL.getSelectedRow()), TableL.getSelectedRow());
            } else if (SGST_PER > 0) {
                DataModelL.setValueByVariable("CGST", SGST + "", TableL.getSelectedRow());
                DataModelL.setValueByVariable("P_856", DataModelL.getValueByVariable("P_857", TableL.getSelectedRow()), TableL.getSelectedRow());
            }
            DataModelL.setValueByVariable("P_858", "0", TableL.getSelectedRow());
            DataModelL.setValueByVariable("IGST", 0 + "", TableL.getSelectedRow());
        } else if (((CGST > 0 || SGST > 0) && IGST > 0) || ((CGST_PER > 0 || SGST_PER > 0) && IGST_PER > 0)) {
            DataModelL.setValueByVariable("P_856", 0 + "", TableL.getSelectedRow());
            DataModelL.setValueByVariable("P_857", 0 + "", TableL.getSelectedRow());
            DataModelL.setValueByVariable("CGST", 0 + "", TableL.getSelectedRow());
            DataModelL.setValueByVariable("SGST", 0 + "", TableL.getSelectedRow());
            JOptionPane.showMessageDialog(null, "(CGST or SGST) can not calculate with IGST");
        } else {
            if ((CGST > 0 || SGST > 0) && IGST > 0) {
                JOptionPane.showMessageDialog(null, "(CGST or SGST) can not calculate with IGST");
                //DataModelL.setValueByVariable("P_824", DataModelL.getValueByVariable("P_823", TableL.getSelectedRow()), TableL.getSelectedRow());
            }
        }

    }//GEN-LAST:event_TableLKeyReleased

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained

    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to add a new row to the table");
    }//GEN-LAST:event_cmdAddFocusGained

    private void cmdInsertFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdInsertFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to bring P.O. Item dialog box");
    }//GEN-LAST:event_cmdInsertFocusGained

    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained

    private void chkCancelledFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkCancelledFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows cancel status of this document");
    }//GEN-LAST:event_chkCancelledFocusGained

    private void chkImportConcessFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chkImportConcessFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify whether this MIR contains Import concessional items");
    }//GEN-LAST:event_chkImportConcessFocusGained

    private void cmbStatusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbStatusFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Open status for this document");
    }//GEN-LAST:event_cmbStatusFocusGained

    private void cmbCurrencyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCurrencyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the currency");
    }//GEN-LAST:event_cmbCurrencyFocusGained

    private void txtGatepassNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter gatepass no.");
    }//GEN-LAST:event_txtGatepassNoFocusGained

    private void cmbTransporterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransporterFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the transporter");
    }//GEN-LAST:event_cmbTransporterFocusGained

    private void txtInvoiceDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Invoice date in DD/MM/YYYY");
    }//GEN-LAST:event_txtInvoiceDateFocusGained

    private void txtInvoiceNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Invoice No.");
    }//GEN-LAST:event_txtInvoiceNoFocusGained

    private void txtLRDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLRDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter LR Date in DD/MM/YYYY");
    }//GEN-LAST:event_txtLRDateFocusGained

    private void txtLRNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLRNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter LR No.");
    }//GEN-LAST:event_txtLRNoFocusGained

    private void txtChalanDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChalanDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter chalan date in DD/MM/YYYY");
    }//GEN-LAST:event_txtChalanDateFocusGained

    private void txtChalanNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChalanNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter chalan no.");
    }//GEN-LAST:event_txtChalanNoFocusGained

    private void txtSuppCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter supplier id. Press F1 for the list of suppliers");
    }//GEN-LAST:event_txtSuppCodeFocusGained

    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter MIR Date in DD/MM/YYYY");
    }//GEN-LAST:event_txtDocDateFocusGained

    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained

    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmdInsert.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained

    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained

    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed

    private void txtSuppCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSuppCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSuppCodeActionPerformed

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 6, txtDocNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }


    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjColumn.Close();
        ObjTax.Close();
        ObjMIR.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void txtSuppCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSuppCodeKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            aList.SQL = "SELECT SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND BLOCKED='N' AND APPROVED=1 ORDER BY SUPP_NAME";
            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 2;

            if (aList.ShowLOV()) {
                txtSuppCode.setText(aList.ReturnVal);
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
            }
        }
        //=========================================

    }//GEN-LAST:event_txtSuppCodeKeyPressed

    private void txtSuppCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCodeFocusLost
        // TODO add your handling code here:
        if (!txtSuppCode.getText().trim().equals("")) {
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
        }

        //Special Addition
        if (txtSuppCode.getText().trim().equals("000000")) {
            //Allow to enter party name
            txtSuppName.setEnabled(true);
            txtSuppName.requestFocus();
            txtSuppName.selectAll();
        } else {
            txtSuppName.setEnabled(false);
        }
    }//GEN-LAST:event_txtSuppCodeFocusLost

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (TableL.getRowCount() > 0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost
        // TODO add your handling code here:

        //Update Header Custom Columns
        //        for(int i=0;i<TableH.getRowCount();i++) {
        //            UpdateResults_H(i);
        //        }

    }//GEN-LAST:event_TableLFocusLost

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        DoNotEvaluate = true;
        int ImportCol = DataModelL.getColFromVariable("EXCISE_GATEPASS_GIVEN");
        Object[] rowData = new Object[ImportCol + 1];
        rowData[ImportCol] = Boolean.valueOf(false);
        DataModelL.addRow(rowData);
        DataModelL.SetUserObject(TableL.getRowCount() - 1, new HashMap());
        TableL.changeSelection(TableL.getRowCount() - 1, 1, false, false);
        UpdateSrNo();
        DoNotEvaluate = false;
    }//GEN-LAST:event_cmdAddActionPerformed

    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:

        //======== Lot Entry ============
        if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("RECEIVED_QTY")) {
            if (evt.getKeyCode() == 112) //F1 Key
            {
                EnterMIRLotQty ObjLot = new EnterMIRLotQty();
                ObjLot.lMIRNo = txtDocNo.getText().trim();
                ObjLot.lMIRSrNo = TableL.getSelectedRow() + 1;
                ObjLot.lItemID = DataModelL.getValueByVariable("ITEM_ID", TableL.getSelectedRow());
                if (EditMode == 0 || !DataModelL.getValueByVariable("STM_NO", TableL.getSelectedRow()).equals("")) {
                    ObjLot.Editdata = false;
                }

                ObjLot.lEditMode = EditMode;
                if (!ObjLot.lItemID.equals("")) {
                    ObjLot.colLot = (HashMap) DataModelL.getUserObject(TableL.getSelectedRow());
                    if (ObjLot.ShowList()) //Ok Pressed
                    {
                        DataModelL.SetUserObject(TableL.getSelectedRow(), ObjLot.colLot);
                        //Show Updated Qty.
                        double TotalReceivedQty = 0;
                        double TotalRejectedQty = 0;
                        double TotalAcceptedQty = 0;
                        for (int i = 1; i <= ObjLot.colLot.size(); i++) {
                            clsMIRRawItemDetail ObjItemLot = (clsMIRRawItemDetail) ObjLot.colLot.get(Integer.toString(i));
                            TotalReceivedQty = TotalReceivedQty + ObjItemLot.getAttribute("LOT_RECEIVED_QTY").getVal();
                            TotalRejectedQty = TotalRejectedQty + ObjItemLot.getAttribute("LOT_REJECTED_QTY").getVal();
                            TotalAcceptedQty = TotalAcceptedQty + ObjItemLot.getAttribute("LOT_ACCEPTED_QTY").getVal();
                        }
                        TableL.setValueAt(Double.toString(TotalReceivedQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("RECEIVED_QTY"));
                        TableL.setValueAt(Double.toString(TotalRejectedQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("REJECTED_QTY"));
                        TableL.setValueAt(Double.toString(TotalAcceptedQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("QTY"));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter Item Code.");
                    return;
                }
            }
        }
        //=========== Lot Entry Complete ============
        if (EditMode != 0) {

            //======================================================//
            if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("PO_NO")) {
                if (evt.getKeyCode() == 112) //F1 Key pressed
                {

                    SelectPONo aList = new SelectPONo();

                    aList.ItemID = DataModelL.getValueByVariable("ITEM_ID", TableL.getSelectedRow());

                    if (aList.ShowList()) {
                        DataModelL.setValueByVariable("PO_NO", aList.SelPONo, TableL.getSelectedRow());
                        DataModelL.setValueByVariable("PO_SR_NO", Integer.toString(aList.SelPOSrNo), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("PO_TYPE", Integer.toString(aList.SelPOType), TableL.getSelectedRow());

                        int DeptID = aList.SelPODept;
                        DataModelL.setValueByVariable("DEPT_ID", Integer.toString(DeptID), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("DEPT_NAME", clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, DeptID), TableL.getSelectedRow());

                        clsPOGen tmpObj = new clsPOGen();

                        clsPOGen ObjPO = (clsPOGen) tmpObj.getObject(EITLERPGLOBAL.gCompanyID, aList.SelPONo, aList.SelPOType);

                        for (int i = 1; i <= ObjPO.colPOItems.size(); i++) {
                            if (i == aList.SelPOSrNo) {
                                clsPOItem ObjItem = (clsPOItem) ObjPO.colPOItems.get(Integer.toString(i));
                                DataModelL.setValueByVariable("ITEM_EXTRA_DESC", (String) ObjItem.getAttribute("ITEM_DESC").getObj(), TableL.getSelectedRow());
                                DataModelL.setValueByVariable("REMARKS", (String) ObjItem.getAttribute("REMARKS").getObj(), TableL.getSelectedRow());
                                DataModelL.setValueByVariable("PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal(), 3)), TableL.getSelectedRow());
                                DataModelL.setValueByVariable("BALANCE_PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal() - ObjItem.getAttribute("RECD_QTY").getVal(), 3)), TableL.getSelectedRow());
                            }

                        }
                    }
                }
            }
            //=====================================================================//
            //====================================================================//

            //=========== Rejected Reason List ===============
            if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("REJECTED_REASON_ID")) {
                if (evt.getKeyCode() == 112) //F1 Key pressed
                {
                    LOV aList = new LOV();

                    aList.SQL = "SELECT PARA_CODE,D_COM_PARAMETER_MAST.DESC FROM D_COM_PARAMETER_MAST WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PARA_ID='REJECTED_REASON' ORDER BY PARA_CODE";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {
                        if (TableL.getCellEditor() != null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(), DataModelL.getColFromVariable("REJECTED_REASON_ID"));
                    }
                }
            }
            //=========================================

            //=========== Department List ===============
            if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("DEPT_ID")) {
                if (evt.getKeyCode() == 112) //F1 Key pressed
                {
                    LOV aList = new LOV();

                    aList.SQL = "SELECT DEPT_ID,DEPT_DESC FROM D_COM_DEPT_MASTER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " ORDER BY DEPT_DESC";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {
                        if (TableL.getCellEditor() != null) {
                            TableL.getCellEditor().stopCellEditing();
                        }

                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(), DataModelL.getColFromVariable("DEPT_ID"));
                    }
                }
            }
            //=========================================

            if (evt.getKeyCode() == 122) //F11 Key pressed
            {
                String lItemID = (String) TableL.getValueAt(TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_ID"));

                frmItemHistory ObjItem = new frmItemHistory();
                ObjItem.ShowForm(lItemID);
            }

            //            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("QTY")) {
            //                if(evt.getKeyCode()==112) //F1 Key
            //                {
            //                    EnterMIRLotQty ObjLot=new EnterMIRLotQty();
            //                    ObjLot.colLot=(HashMap)DataModelL.getUserObject(TableL.getSelectedRow());
            //                    if(ObjLot.ShowList()) //Ok Pressed
            //                    {
            //                        DataModelL.SetUserObject(TableL.getSelectedRow(),ObjLot.colLot);
            //                        //Show Updated Qty.
            //                        double TotalQty=0;
            //                        for(int i=1;i<=ObjLot.colLot.size();i++) {
            //                            clsMIRRawItemDetail ObjItemLot=(clsMIRRawItemDetail)ObjLot.colLot.get(Integer.toString(i));
            //                            TotalQty=TotalQty+ObjItemLot.getAttribute("LOT_QTY").getVal();
            //                        }
            //                        TableL.setValueAt(Double.toString(TotalQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("QTY"));
            //                    }
            //                }
            //            }
            //=========== Item List ===============
            if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("ITEM_ID")) {
                if (evt.getKeyCode() == 112) //F1 Key pressed
                {
                    LOV aList = new LOV();

                    aList.SQL = "SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {
                        if (TableL.getCellEditor() != null) {
                            TableL.getCellEditor().stopCellEditing();
                        }

                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_ID"));
                    }
                }
            }
            //=========================================
        }
    }//GEN-LAST:event_TableLKeyPressed

    private void cmdInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertActionPerformed
        // TODO add your handling code here:
        SelectPO2 ObjPO = new SelectPO2();

        if (ObjPO.ShowList()) {
            DoNotEvaluate = true;

            //Copy Header
            if (ObjPO.CopyHeader) {
                EITLERPGLOBAL.setComboIndex(cmbCurrency, (int) ObjPO.ObjPO.getAttribute("CURRENCY_ID").getVal());
                String SuppCode = "";
                SuppCode = (String) ObjPO.ObjPO.getAttribute("SUPP_ID").getObj();
                if (txtSuppCode.getText().trim().equals("")) {
                    txtSuppCode.setText((String) ObjPO.ObjPO.getAttribute("SUPP_ID").getObj());
                    txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
                } else {
                    if (txtSuppCode.getText().trim().equals(SuppCode)) {
                        txtSuppCode.setText((String) ObjPO.ObjPO.getAttribute("SUPP_ID").getObj());
                        txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
                    } else {
                        JOptionPane.showMessageDialog(null, "PO Supplier code is not matching with Gate Level Entry");
                        return;
                    }
                }
            }

            //            //Check the Duplication
            //            for(int i=1;i<=ObjPO.colSelItems.size();i++) {
            //                clsPOItem ObjItem=(clsPOItem)ObjPO.colSelItems.get(Integer.toString(i));
            //
            //                for(int r=0;r<TableL.getRowCount();r++) {
            //                    String PONo=(String)ObjItem.getAttribute("PO_NO").getObj();
            //                    int POSrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
            //
            //                    String tPONo=(String)DataModelL.getValueByVariable("PO_NO", r);
            //                    int tPOSrNo=Integer.parseInt((String)DataModelL.getValueByVariable("PO_SR_NO",r));
            //
            //                    if(PONo.equals(tPONo)&&(POSrNo==tPOSrNo)) {
            //                        JOptionPane.showMessageDialog(null,"PO No. "+PONo+" Sr. "+POSrNo+" already exist ");
            //                        return;
            //                    }
            //                }
            //            }
            //            //Duplication check completed
            DoNotEvaluate = true;

            //It will contain PO Item Objects
            for (int i = 1; i <= ObjPO.colSelItems.size(); i++) {
                clsPOItem ObjItem = (clsPOItem) ObjPO.colSelItems.get(Integer.toString(i));

                for (int j = 0; j < TableL.getRowCount(); j++) {
                    String Item_ID = TableL.getValueAt(i, DataModelL.getColFromVariable("ITEM_ID")).toString().trim();
                    String PO_NO = TableL.getValueAt(i, DataModelL.getColFromVariable("PO_NO")).toString().trim();
                    String PO_SR_NO = TableL.getValueAt(i, DataModelL.getColFromVariable("PO_SR_NO")).toString().trim();

                    String Item_ID1 = ObjItem.getAttribute("ITEM_ID").getString().trim();
                    String PO_NO1 = ObjItem.getAttribute("PO_NO").getString().trim();
                    String PO_SR_NO1 = ObjItem.getAttribute("SR_NO").getString().trim();

                    if (Item_ID.equals(Item_ID1) && PO_NO.equals(PO_NO1) && PO_SR_NO.equals(PO_SR_NO1)) {
                        JOptionPane.showMessageDialog(this, "Item ID " + Item_ID + " already added");
                        return;
                    }
                }
                //Add Blank Row
                Object[] rowData = new Object[1];
                DataModelL.addRow(rowData);

                int NewRow = TableL.getRowCount() - 1;

                //Copy MIR Lot nos. to GRN Lot nos.
                HashMap colLot = new HashMap();

                //Set Lot Collection to Table Row
                DataModelL.SetUserObject(NewRow, colLot);
                //Completed

                DataModelL.setValueByVariable("SR_NO", Integer.toString((int) ObjItem.getAttribute("SR_NO").getVal()), NewRow);
                String HSN_SAC_CODE = clsItem.getHsnSacCode(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_ID", (String) ObjItem.getAttribute("ITEM_ID").getObj(), NewRow);
                DataModelL.setValueByVariable("HSN_SAC_CODE", HSN_SAC_CODE, NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC", (String) ObjItem.getAttribute("ITEM_DESC").getObj(), NewRow);
                String ItemID = (String) ObjItem.getAttribute("ITEM_ID").getObj();
                String ItemName = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_NAME", ItemName, NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID", clsItem.getItemWareHouseID(EITLERPGLOBAL.gCompanyID, ItemID), NewRow);
                DataModelL.setValueByVariable("LOCATION_ID", clsItem.getItemLocationID(EITLERPGLOBAL.gCompanyID, ItemID), NewRow);
                DataModelL.setValueByVariable("RATE", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE").getVal(), 3)), NewRow);
                //DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("PENDING_QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("BALANCE_PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal() - ObjItem.getAttribute("RECD_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("UNIT_ID", Integer.toString((int) ObjItem.getAttribute("UNIT").getVal()), NewRow);
                String UnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int) ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("DEPT_ID", Integer.toString((int) ObjItem.getAttribute("DEPT_ID").getVal()), NewRow);
                DataModelL.setValueByVariable("DEPT_NAME", clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjItem.getAttribute("DEPT_ID").getVal()), NewRow);
                DataModelL.setValueByVariable("UNIT_NAME", UnitName, NewRow);
                DataModelL.setValueByVariable("PO_NO", (String) ObjItem.getAttribute("PO_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("PO_SR_NO", Integer.toString((int) ObjItem.getAttribute("SR_NO").getVal()), NewRow);
                DataModelL.setValueByVariable("PO_TYPE", Integer.toString((int) ObjItem.getAttribute("PO_TYPE").getVal()), NewRow);
                DataModelL.setValueByVariable("INDENT_NO", (String) ObjItem.getAttribute("INDENT_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("INDENT_SR_NO", Integer.toString((int) ObjItem.getAttribute("INDENT_NO").getVal()), NewRow);
                DataModelL.setValueByVariable("IMPORT_CONCESS", Boolean.valueOf(ObjItem.getAttribute("IMPORT_CONCESS").getBool()), NewRow);
                DataModelL.setValueByVariable("EXCISE_GATEPASS_GIVEN", Boolean.valueOf(ObjItem.getAttribute("EXCISE_GATEPASS_GIVEN").getBool()), NewRow);
                DataModelL.setValueByVariable("GROSS_QTY", Double.toString(EITLERPGLOBAL.round(clsInward.getGrossWeight(EITLERPGLOBAL.gCompanyID, txtChalanNo.getText(), txtSuppCode.getText(), ItemID), 3)), NewRow);
                //========= Import Tax Columns - Match both columns with variable name ==========//
                for (int c = 1; c <= 15; c++) {
                    //Get the Column ID
                    int lnColID = (int) ObjItem.getAttribute("COLUMN_" + c + "_ID").getVal();
                    String strVariable = "";
                    double lnPercentValue = 0, lnValue = 0;

                    //Record the values
                    lnPercentValue = ObjItem.getAttribute("COLUMN_" + c + "_PER").getVal();
                    lnValue = ObjItem.getAttribute("COLUMN_" + c + "_AMT").getVal();

                    if (lnColID > 0) //Column ID set .. Continue
                    {
                        //Get the Variable Name
                        strVariable = ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, lnColID);
                    }

                    //We have variable Name - Get the column no. of this form
                    int lnDestCol = DataModelL.getColFromVariable(strVariable);

                    if (lnDestCol >= 0) //We have found the column
                    {
                        //Replace the value of this form
                        DataModelL.setValueAt(Double.toString(lnValue), NewRow, lnDestCol);

                        //Now check that percentage is used
                        int lnTaxID = ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, lnColID);
                        if (ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, lnTaxID)) {
                            DataModelL.setValueAt(Double.toString(lnPercentValue), NewRow, lnDestCol - 1);
                        }
                    }
                }
                //===================== Import Completed =================//

                DoNotEvaluate = false;
                TableL.changeSelection(NewRow, 0, false, false);
                UpdateResults(DataModelL.getColFromVariable("QTY"));
                DoNotEvaluate = true;
            }

            UpdateSrNo();
            DoNotEvaluate = false;
        }
    }//GEN-LAST:event_cmdInsertActionPerformed


    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane DetailPaneLotInfo;
    private javax.swing.JScrollPane HeaderPane;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableDetailLotInfo;
    private javax.swing.JTable TableH;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JCheckBox chkImportConcess;
    private javax.swing.JComboBox cmbCurrency;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbTransporter;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInsert;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblColumnTotal;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTransName;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtChalanDate;
    private javax.swing.JTextField txtChalanNo;
    private javax.swing.JTextField txtCurrencyRate;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFinalAmount;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGatepassNo;
    private javax.swing.JTextField txtGrossAmount;
    private javax.swing.JTextField txtInvoiceAmount;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtLRDate;
    private javax.swing.JTextField txtLRNo;
    private javax.swing.JTextField txtNetAmount;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSuffix;
    private javax.swing.JTextField txtSuppCode;
    private javax.swing.JTextField txtSuppName;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTransName;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }

    //Didplay data on the Screen
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjMIR.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjMIR.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjMIR.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = 6;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        try {
            ClearFields();
            CellPainter.removeBackColors();
            CellPainter.removeForeColors();

            txtDocNo.setText((String) ObjMIR.getAttribute("MIR_NO").getObj());
            lblRevNo.setText(Integer.toString((int) ObjMIR.getAttribute("REVISION_NO").getVal()));

            String theTitle = "MATERIAL INSPECTION REPORT (Raw Material) " + txtDocNo.getText();
            lblTitle.setText(theTitle);

            txtDocDate.setText(EITLERPGLOBAL.formatDate((String) ObjMIR.getAttribute("MIR_DATE").getObj()));
            txtSuppCode.setText((String) ObjMIR.getAttribute("SUPP_ID").getObj());

            txtSuffix.setText((String) ObjMIR.getAttribute("REFA").getObj());
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));

            if (txtSuppCode.getText().trim().equals("000000")) {
                txtSuppName.setText((String) ObjMIR.getAttribute("PARTY_NAME").getObj());
            }

            txtChalanNo.setText((String) ObjMIR.getAttribute("CHALAN_NO").getObj());
            txtChalanDate.setText(EITLERPGLOBAL.formatDate((String) ObjMIR.getAttribute("CHALAN_DATE").getObj()));
            txtLRNo.setText((String) ObjMIR.getAttribute("LR_NO").getObj());
            txtLRDate.setText(EITLERPGLOBAL.formatDate((String) ObjMIR.getAttribute("LR_DATE").getObj()));
            txtInvoiceNo.setText((String) ObjMIR.getAttribute("INVOICE_NO").getObj());
            txtInvoiceDate.setText(EITLERPGLOBAL.formatDate((String) ObjMIR.getAttribute("INVOICE_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbTransporter, (int) ObjMIR.getAttribute("TRANSPORTER").getVal());
            txtTransName.setText((String) ObjMIR.getAttribute("TRANSPORTER_NAME").getObj());
            txtGatepassNo.setText((String) ObjMIR.getAttribute("GATEPASS_NO").getObj());
            EITLERPGLOBAL.setComboIndex(cmbCurrency, (int) ObjMIR.getAttribute("CURRENCY_ID").getVal());
            txtCurrencyRate.setText(Double.toString(EITLERPGLOBAL.round(ObjMIR.getAttribute("CURRENCY_RATE").getVal(), 3)));
            //txtAccessableValue.setText(Double.toString(ObjMIR.getAttribute("ACCESSABLE_VALUE").getVal()));
            txtInvoiceAmount.setText(Double.toString(EITLERPGLOBAL.round(ObjMIR.getAttribute("INVOICE_AMOUNT").getVal(), 3)));
            EITLERPGLOBAL.setComboIndex(cmbStatus, (String) ObjMIR.getAttribute("OPEN_STATUS").getObj());

            chkImportConcess.setSelected(ObjMIR.getAttribute("IMPORT_CONCESS").getBool());
            //chkCenvated.setSelected(ObjMIR.getAttribute("CENVATED_ITEMS").getBool());
            chkCancelled.setSelected(ObjMIR.getAttribute("CANCELLED").getBool());
            txtRemarks.setText((String) ObjMIR.getAttribute("REMARKS").getObj());

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjMIR.getAttribute("HIERARCHY_ID").getVal());

            //============= Display Custom Columns ========================
            for (int i = 1; i <= 30; i++) {
                int ColID = (int) ObjMIR.getAttribute("COLUMN_" + Integer.toString(i) + "_ID").getVal();
                int Col = DataModelH.getColFromID(ColID);
                int TaxID = ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable = ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);

                if (ColID != 0) {
                    //Set the Formula
                    if (ObjMIR.getAttribute("COLUMN_" + Integer.toString(i) + "_FORMULA").getObj() != null) {
                        DataModelH.SetFormula(Col, (String) ObjMIR.getAttribute("COLUMN_" + Integer.toString(i) + "_FORMULA").getObj());
                    } else {
                        DataModelH.SetFormula(Col, "");
                    }
                    //Set the Percentage. If there
                    if (ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        DataModelH.setValueByVariableEx("P_" + ColID, Double.toString(ObjMIR.getAttribute("COLUMN_" + Integer.toString(i) + "_PER").getVal()), 1);
                    }

                    //Set the Value
                    DataModelH.setValueByVariableEx(Variable, Double.toString(ObjMIR.getAttribute("COLUMN_" + Integer.toString(i) + "_AMT").getVal()), 1);
                }
            }
            //=================================================================//

            //========= Display Line Items =============//
            FormatGrid();

            DoNotEvaluate = true;

            for (int i = 1; i <= ObjMIR.colMIRItems.size(); i++) {
                //Insert New Row
                Object[] rowData = new Object[1];
                DataModelL.addRow(rowData);
                int NewRow = TableL.getRowCount() - 1;

                clsMIRRawItem ObjItem = (clsMIRRawItem) ObjMIR.colMIRItems.get(Integer.toString(i));

                String ItemID = (String) ObjItem.getAttribute("ITEM_ID").getObj();

                if (clsItem.IsItemExcisable(EITLERPGLOBAL.gCompanyID, ItemID)) {
                    //Render Cell with
                    CellPainter.setBackColor(NewRow, DataModelL.getColFromVariable("ITEM_ID"), Color.YELLOW);
                    CellPainter.setForeColor(NewRow, DataModelL.getColFromVariable("ITEM_ID"), Color.BLACK);
                } else {
                    CellPainter.setBackColor(NewRow, DataModelL.getColFromVariable("ITEM_ID"), Color.WHITE);
                    CellPainter.setForeColor(NewRow, DataModelL.getColFromVariable("ITEM_ID"), Color.BLACK);
                }

                //Set the User Object - Lot Nos.
                DataModelL.SetUserObject(NewRow, ObjItem.colMIRLot);

                String HSN_SAC_CODE = clsItem.getHsnSacCode(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                DataModelL.setValueByVariable("ITEM_ID", (String) ObjItem.getAttribute("ITEM_ID").getObj(), NewRow);
                DataModelL.setValueByVariable("HSN_SAC_CODE", HSN_SAC_CODE, NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC", (String) ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(), NewRow);
                String ItemName = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_NAME", ItemName, NewRow);
                DataModelL.setValueByVariable("RATE", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("LANDED_RATE", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("LANDED_RATE").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("EXCESS_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("EXCESS_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("GROSS_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("GROSS_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("RECEIVED_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RECEIVED_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("REJECTED_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("REJECTED_QTY").getVal(), 3)), NewRow);
                //DataModelL.setValueByVariable("TOLERANCE_LIMIT",Double.toString(ObjItem.getAttribute("TOLERANCE_LIMIT").getVal()),NewRow);
                DataModelL.setValueByVariable("UNIT_ID", Integer.toString((int) ObjItem.getAttribute("UNIT").getVal()), NewRow);
                String UnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int) ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME", UnitName, NewRow);
                DataModelL.setValueByVariable("DEPT_ID", Integer.toString((int) ObjItem.getAttribute("DEPT_ID").getVal()), NewRow);
                DataModelL.setValueByVariable("DEPT_NAME", clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjItem.getAttribute("DEPT_ID").getVal()), NewRow);

                DataModelL.setValueByVariable("BOE_NO", (String) ObjItem.getAttribute("BOE_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("BOE_SR_NO", (String) ObjItem.getAttribute("BOE_SR_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("BOE_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("BOE_DATE").getObj()), NewRow);
                DataModelL.setValueByVariable("SHADE", (String) ObjItem.getAttribute("SHADE").getObj(), NewRow);
                DataModelL.setValueByVariable("W_MIE", (String) ObjItem.getAttribute("W_MIE").getObj(), NewRow);
                DataModelL.setValueByVariable("NO_CASE", (String) ObjItem.getAttribute("NO_CASE").getObj(), NewRow);
                DataModelL.setValueByVariable("EXCISE_GATEPASS_GIVEN", Boolean.valueOf(ObjItem.getAttribute("EXCISE_GATEPASS_GIVEN").getBool()), NewRow);
                DataModelL.setValueByVariable("IMPORT_CONCESS", Boolean.valueOf(ObjItem.getAttribute("IMPORT_CONCESS").getBool()), NewRow);
                DataModelL.setValueByVariable("MATERIAL_CODE", (String) ObjItem.getAttribute("MATERIAL_CODE").getObj(), NewRow);
                DataModelL.setValueByVariable("MATERIAL_DESCRIPTION", (String) ObjItem.getAttribute("MATERIAL_DESC").getObj(), NewRow);
                DataModelL.setValueByVariable("QUALITY_NO", (String) ObjItem.getAttribute("QUALITY_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("PAGE_NO", (String) ObjItem.getAttribute("PAGE_NO").getObj(), NewRow);
                //DataModelL.setValueByVariable("EXCESS",Double.toString(ObjItem.getAttribute("EXCESS").getVal()),NewRow);
                //DataModelL.setValueByVariable("SHORTAGE",Double.toString(ObjItem.getAttribute("SHORTAGE").getVal()),NewRow);
                DataModelL.setValueByVariable("CHALAN_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("CHALAN_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("PO_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("BALANCE_PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("BALANCE_PO_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("L_F_NO", (String) ObjItem.getAttribute("L_F_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("REMARKS", (String) ObjItem.getAttribute("REMARKS").getObj(), NewRow);
                DataModelL.setValueByVariable("GROSS_AMOUNT", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("TOTAL_AMOUNT").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("NET_AMOUNT", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("NET_AMOUNT").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID", (String) ObjItem.getAttribute("WAREHOUSE_ID").getObj(), NewRow);
                DataModelL.setValueByVariable("LOCATION_ID", (String) ObjItem.getAttribute("LOCATION_ID").getObj(), NewRow);
                DataModelL.setValueByVariable("INDENT_NO", (String) ObjItem.getAttribute("INDENT_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("INDENT_SR_NO", (String) ObjItem.getAttribute("INDENT_SR_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("STM_NO", (String) ObjItem.getAttribute("STM_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("STM_SR_NO", Integer.toString((int) ObjItem.getAttribute("STM_SR_NO").getVal()), NewRow);
                DataModelL.setValueByVariable("STM_COMPANY_ID", Integer.toString((int) ObjItem.getAttribute("STM_COMPANY_ID").getVal()), NewRow);
                DataModelL.setValueByVariable("STM_COMPANY_YEAR", Integer.toString((int) ObjItem.getAttribute("STM_COMPANY_YEAR").getVal()), NewRow);
                DataModelL.setValueByVariable("PO_NO", (String) ObjItem.getAttribute("PO_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("PO_SR_NO", Integer.toString((int) ObjItem.getAttribute("PO_SR_NO").getVal()), NewRow);
                DataModelL.setValueByVariable("PO_TYPE", Integer.toString((int) ObjItem.getAttribute("PO_TYPE").getVal()), NewRow);

                DataModelL.setValueByVariable("REJECTED_REASON_ID", Integer.toString((int) ObjItem.getAttribute("REJECTED_REASON_ID").getVal()), NewRow);
                DataModelL.setValueByVariable("REJECTED_REASON", clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "REJECTED_REASON", (int) ObjItem.getAttribute("REJECTED_REASON_ID").getVal()), NewRow);

                DataModelL.setValueByVariable("RND_DEDUCTION_REASON", ObjItem.getAttribute("RND_DEDUCTION_REASON").getString(), NewRow);

                String BarcodeType = (String) ObjItem.getAttribute("BARCODE_TYPE").getObj();

                if (BarcodeType.equals("S")) {
                    DataModelL.setValueByVariable("BARCODE_TYPE", "Single", NewRow);
                }

                if (BarcodeType.equals("I")) {
                    DataModelL.setValueByVariable("BARCODE_TYPE", "Individual", NewRow);
                }

                if (BarcodeType.equals("N")) {
                    DataModelL.setValueByVariable("BARCODE_TYPE", "No Barcode", NewRow);
                }

                //============= Display Custom Columns ========================
                for (int c = 1; c <= 30; c++) {
                    int ColID = (int) ObjItem.getAttribute("COLUMN_" + Integer.toString(c) + "_ID").getVal();
                    int Col = DataModelL.getColFromID(ColID);
                    int TaxID = ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                    String Variable = ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);

                    if (ColID != 0) {
                        //Set the Formula
                        if (ObjItem.getAttribute("COLUMN_" + Integer.toString(c) + "_FORMULA").getObj() != null) {
                            DataModelL.SetFormula(Col, (String) ObjItem.getAttribute("COLUMN_" + Integer.toString(c) + "_FORMULA").getObj());
                        } else {
                            DataModelL.SetFormula(Col, "");
                        }
                        //Set the Percentage. If there
                        if (ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                            DataModelL.setValueByVariable("P_" + ColID, Double.toString(ObjItem.getAttribute("COLUMN_" + Integer.toString(c) + "_PER").getVal()), NewRow);
                        }

                        //Set the Value
                        DataModelL.setValueByVariable(Variable, Double.toString(ObjItem.getAttribute("COLUMN_" + Integer.toString(c) + "_AMT").getVal()), NewRow);
                    }
                }
                //=================================================================//
            }
            FormatGridLotDetail();
            DoNotEvaluate = false;

            //UpdateResults_H(0);
            UpdateAmounts();
            UpdateSrNo();

            if (EditMode == 0) {
                DataModelL.TableReadOnly(true);
                DataModelH.TableReadOnly(true);
            }
            //=========================================//

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = (String) ObjMIR.getAttribute("MIR_NO").getObj();
            List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 6, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelA.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = clsMIRRaw.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsMIRRaw ObjHistory = (clsMIRRaw) History.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate((String) ObjHistory.getAttribute("ENTRY_DATE").getObj());

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

                DataModelHS.addRow(rowData);
            }
            //============================================================//
            ShowMessage("Ready");
        } catch (Exception e) {

        }

    }

    //Sets data to the Class Object
    private void SetData() {

        //Header Fields
        ObjMIR.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        ObjMIR.setAttribute("PREFIX", SelPrefix);
        ObjMIR.setAttribute("SUFFIX", SelSuffix);
        ObjMIR.setAttribute("FFNO", FFNo);
        ObjMIR.setAttribute("MIR_DATE", EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjMIR.setAttribute("SUPP_ID", txtSuppCode.getText());

        ObjMIR.setAttribute("PARTY_NAME", "");
        if (txtSuppCode.getText().trim().equals("000000")) {
            ObjMIR.setAttribute("PARTY_NAME", txtSuppName.getText());
        }

        ObjMIR.setAttribute("REFA", txtSuffix.getText());
        ObjMIR.setAttribute("CHALAN_NO", txtChalanNo.getText());
        ObjMIR.setAttribute("CHALAN_DATE", EITLERPGLOBAL.formatDateDB(txtChalanDate.getText()));
        ObjMIR.setAttribute("LR_NO", txtLRNo.getText());
        ObjMIR.setAttribute("LR_DATE", EITLERPGLOBAL.formatDateDB(txtLRDate.getText()));
        ObjMIR.setAttribute("INVOICE_NO", txtInvoiceNo.getText());
        ObjMIR.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
        ObjMIR.setAttribute("TRANSPORTER", EITLERPGLOBAL.getComboCode(cmbTransporter));
        ObjMIR.setAttribute("TRANSPORTER_NAME", txtTransName.getText());
        ObjMIR.setAttribute("GATEPASS_NO", txtGatepassNo.getText());
        ObjMIR.setAttribute("CURRENCY_ID", EITLERPGLOBAL.getComboCode(cmbCurrency));
        ObjMIR.setAttribute("CURRENCY_RATE", EITLERPGLOBAL.round(Double.parseDouble(txtCurrencyRate.getText()), 3));
        //ObjMIR.setAttribute("ACCESSABLE_VALUE",EITLERPGLOBAL.round(Double.parseDouble(txtAccessableValue.getText()),2));
        ObjMIR.setAttribute("OPEN_STATUS", EITLERPGLOBAL.getCombostrCode(cmbStatus));
        ObjMIR.setAttribute("INVOICE_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtInvoiceAmount.getText()), 3));

        if (chkImportConcess.isSelected()) {
            ObjMIR.setAttribute("IMPORT_CONCESS", true);
        } else {
            ObjMIR.setAttribute("IMPORT_CONCESS", false);
        }

        /*if(chkCenvated.isSelected()) {
         ObjMIR.setAttribute("CENVATED_ITEMS",true);
         }
         else {
         ObjMIR.setAttribute("CENVATED_ITEMS",false);
         }*/
        if (chkCancelled.isSelected()) {
            ObjMIR.setAttribute("CANCELLED", true);
        } else {
            ObjMIR.setAttribute("CANCELLED", false);
        }

        ObjMIR.setAttribute("MIR_TYPE", 2); //Fixed type 2 - Raw Material, 1 - General
        ObjMIR.setAttribute("FOR_STORE", clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
        ObjMIR.setAttribute("REMARKS", txtRemarks.getText());

        //----- Update Approval Specific Fields -----------//
        ObjMIR.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjMIR.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjMIR.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjMIR.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            ObjMIR.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjMIR.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjMIR.setAttribute("APPROVAL_STATUS", "R");
            ObjMIR.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjMIR.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjMIR.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjMIR.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjMIR.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjMIR.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        //============= Set Custom Columns ========================
        int ColCounter = 0;

        for (int i = 0; i < TableH.getRowCount(); i++) {
            double lnPercentValue = 0;
            int ColID = DataModelH.getColID(i);
            int TaxID = ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
            String Variable = DataModelH.getVariable(i);

            if ((ColID != 0) && (ColID != -99) && (!Variable.substring(0, 2).equals("P_"))) {
                ColCounter++;
                ObjMIR.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_ID", ColID);
                ObjMIR.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_FORMULA", DataModelH.getFormula(i));

                if (ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                    lnPercentValue = Double.parseDouble(DataModelH.getValueByVariableEx("P_" + ColID, 1));
                    ObjMIR.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_PER", EITLERPGLOBAL.round(lnPercentValue, 3));
                }
                ObjMIR.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_AMT", EITLERPGLOBAL.round(Double.parseDouble(DataModelH.getValueByVariableEx(Variable, 1)), 5));
                ObjMIR.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_CAPTION", (String) TableH.getValueAt(i, 0));
            }
        }
        //=================================================================

        //=================== Setting up Line Items ==================//
        ObjMIR.colMIRItems.clear();

        for (int i = 0; i < TableL.getRowCount(); i++) {
            clsMIRRawItem ObjItem = new clsMIRRawItem();

            ObjItem.setAttribute("SR_NO", DataModelL.getValueByVariable("SR_NO", i));
            ObjItem.setAttribute("ITEM_ID", DataModelL.getValueByVariable("ITEM_ID", i));
            ObjItem.setAttribute("HSN_SAC_CODE", DataModelL.getValueByVariable("HSN_SAC_CODE", i));
            ObjItem.setAttribute("ITEM_EXTRA_DESC", DataModelL.getValueByVariable("ITEM_EXTRA_DESC", i));
            ObjItem.setAttribute("RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("RATE", i)), 5));
            ObjItem.setAttribute("LANDED_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("LANDED_RATE", i)), 5));
            ObjItem.setAttribute("QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY", i)), 3));
            ObjItem.setAttribute("EXCESS_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("EXCESS_QTY", i)), 3));
            ObjItem.setAttribute("RECEIVED_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("RECEIVED_QTY", i)), 3));
            ObjItem.setAttribute("REJECTED_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("REJECTED_QTY", i)), 3));
            ObjItem.setAttribute("GROSS_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("GROSS_QTY", i)), 3));
            //ObjItem.setAttribute("TOLERANCE_LIMIT",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("TOLERANCE_LIMIT",i)),3));
            ObjItem.setAttribute("UNIT", Integer.parseInt(DataModelL.getValueByVariable("UNIT_ID", i)));
            ObjItem.setAttribute("REJECTED_REASON_ID", Integer.parseInt(DataModelL.getValueByVariable("REJECTED_REASON_ID", i)));
            ObjItem.setAttribute("DEPT_ID", Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID", i)));
            ObjItem.setAttribute("BOE_NO", DataModelL.getValueByVariable("BOE_NO", i));
            ObjItem.setAttribute("BOE_SR_NO", DataModelL.getValueByVariable("BOE_SR_NO", i));
            //ObjItem.setAttribute("BOE_DATE",EITLERPGLOBAL.formatDate(DataModelL.getValueByVariable("BOE_DATE",i)));
            if (EITLERPGLOBAL.formatDate(DataModelL.getValueByVariable("BOE_DATE", i)).equals("")) {
                ObjItem.setAttribute("BOE_DATE", "0000-00-00");
            } else {
                ObjItem.setAttribute("BOE_DATE", EITLERPGLOBAL.formatDate(DataModelL.getValueByVariable("BOE_DATE", i)));
            }
            ObjItem.setAttribute("REASON", DataModelL.getValueByVariable("REASON", i));
            ObjItem.setAttribute("SHADE", DataModelL.getValueByVariable("SHADE", i));
            ObjItem.setAttribute("W_MIE", DataModelL.getValueByVariable("W_MIE", i));
            ObjItem.setAttribute("NO_CASE", DataModelL.getValueByVariable("NO_CASE", i));
            ObjItem.setAttribute("EXCISE_GATEPASS_GIVEN", DataModelL.getBoolValueByVariable("EXCISE_GATEPASS_GIVEN", i));
            ObjItem.setAttribute("IMPORT_CONCESS", DataModelL.getBoolValueByVariable("IMPORT_CONCESS", i));
            ObjItem.setAttribute("MATERIAL_CODE", DataModelL.getValueByVariable("MATERIAL_CODE", i));
            ObjItem.setAttribute("MATERIAL_DESC", DataModelL.getValueByVariable("MATERIAL_DESCRIPTION", i));
            ObjItem.setAttribute("QUALITY_NO", DataModelL.getValueByVariable("QUALITY_NO", i));
            ObjItem.setAttribute("PAGE_NO", DataModelL.getValueByVariable("PAGE_NO", i));
            ObjItem.setAttribute("EXCESS", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("EXCESS", i)), 3));
            ObjItem.setAttribute("SHORTAGE", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("SHORTAGE", i)), 3));
            ObjItem.setAttribute("CHALAN_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("CHALAN_QTY", i)), 3));
            ObjItem.setAttribute("PO_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("PO_QTY", i)), 3));
            ObjItem.setAttribute("BALANCE_PO_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("BALANCE_PO_QTY", i)), 3));
            ObjItem.setAttribute("L_F_NO", DataModelL.getValueByVariable("L_F_NO", i));
            ObjItem.setAttribute("REMARKS", DataModelL.getValueByVariable("REMARKS", i));
            ObjItem.setAttribute("TOTAL_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("GROSS_AMOUNT", i)), 5));
            ObjItem.setAttribute("NET_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("NET_AMOUNT", i)), 5));
            ObjItem.setAttribute("WAREHOUSE_ID", DataModelL.getValueByVariable("WAREHOUSE_ID", i));
            ObjItem.setAttribute("LOCATION_ID", DataModelL.getValueByVariable("LOCATION_ID", i));
            ObjItem.setAttribute("PO_NO", DataModelL.getValueByVariable("PO_NO", i));
            ObjItem.setAttribute("PO_SR_NO", Integer.parseInt(DataModelL.getValueByVariable("PO_SR_NO", i)));
            ObjItem.setAttribute("PO_TYPE", Integer.parseInt(DataModelL.getValueByVariable("PO_TYPE", i)));
            ObjItem.setAttribute("INDENT_NO", DataModelL.getValueByVariable("INDENT_NO", i));
            ObjItem.setAttribute("INDENT_SR_NO", Integer.parseInt(DataModelL.getValueByVariable("INDENT_SR_NO", i)));
            ObjItem.setAttribute("STM_NO", DataModelL.getValueByVariable("STM_NO", i));
            ObjItem.setAttribute("STM_SR_NO", Integer.parseInt(DataModelL.getValueByVariable("STM_SR_NO", i)));
            ObjItem.setAttribute("STM_COMPANY_ID", Integer.parseInt(DataModelL.getValueByVariable("STM_COMPANY_ID", i)));
            ObjItem.setAttribute("STM_COMPANY_YEAR", Integer.parseInt(DataModelL.getValueByVariable("STM_COMPANY_YEAR", i)));
            ObjItem.setAttribute("BARCODE_TYPE", DataModelL.getValueByVariable("BARCODE_TYPE", i));
            ObjItem.setAttribute("RND_DEDUCTION_REASON", DataModelL.getValueByVariable("RND_DEDUCTION_REASON", i));
            //============= Set Custom Columns ========================//

            ColCounter = 0;

            for (int c = 0; c < TableL.getColumnCount() - 1; c++) {
                double lnPercentValue = 0;
                int ColID = DataModelL.getColID(c);
                int TaxID = ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable = DataModelL.getVariable(c);

                if ((ColID != 0) && (ColID != -99) && (!Variable.substring(0, 2).equals("P_"))) {
                    ColCounter++;
                    ObjItem.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_ID", ColID);
                    ObjItem.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_FORMULA", DataModelL.getFormula(c));

                    if (ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        lnPercentValue = Double.parseDouble(DataModelL.getValueByVariable("P_" + ColID, i));
                        ObjItem.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_PER", EITLERPGLOBAL.round(lnPercentValue, 3));
                    }
                    ObjItem.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_AMT", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable(Variable, i)), 5));
                    ObjItem.setAttribute("COLUMN_" + Integer.toString(ColCounter) + "_CAPTION", TableL.getColumnName(c));
                }
            }
            //===========================================================//

            //======= Insert Lot Nos. ======//
            HashMap lcolLot = (HashMap) DataModelL.getUserObject(i);

            for (int l = 1; l <= lcolLot.size(); l++) {
                clsMIRRawItemDetail ObjLot = new clsMIRRawItemDetail();

                clsMIRRawItemDetail ObjList = (clsMIRRawItemDetail) lcolLot.get(Integer.toString(l));

                ObjLot.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                ObjLot.setAttribute("MIR_NO", ObjList.getAttribute("MIR_NO").getString());
                ObjLot.setAttribute("MIR_SR_NO", ObjList.getAttribute("MIR_SR_NO").getString());
                ObjLot.setAttribute("SR_NO", l);
                ObjLot.setAttribute("ITEM_ID", ObjList.getAttribute("ITEM_ID").getString());
                ObjLot.setAttribute("ITEM_LOT_NO", ObjList.getAttribute("ITEM_LOT_NO").getString());
                ObjLot.setAttribute("AUTO_LOT_NO", ObjList.getAttribute("AUTO_LOT_NO").getString());
                ObjLot.setAttribute("LOT_RECEIVED_QTY", ObjList.getAttribute("LOT_RECEIVED_QTY").getDouble());
                ObjLot.setAttribute("LOT_REJECTED_QTY", ObjList.getAttribute("LOT_REJECTED_QTY").getDouble());
                ObjLot.setAttribute("LOT_ACCEPTED_QTY", ObjList.getAttribute("LOT_ACCEPTED_QTY").getDouble());
                ObjLot.setAttribute("MIR_TYPE", 2);
                ObjItem.colMIRLot.put(Integer.toString(ObjItem.colMIRLot.size() + 1), ObjLot);
            }
            //======== Lot Insertion Completed =========//

            ObjMIR.colMIRItems.put(Integer.toString(ObjMIR.colMIRItems.size() + 1), ObjItem);
        }
        //======================Completed ===========================//
    }

    private void SetupColumns() {
        HashMap List = new HashMap();
        HashMap ColList = new HashMap();

        List = clsColumn.getList(" WHERE COMPANY_ID=" + Long.toString(EITLERPGLOBAL.gCompanyID) + " AND MODULE_ID=6 AND HEADER_LINE='L' ORDER BY COL_ORDER");
        TableColumnModel ColModel = TableL.getColumnModel();

        for (int i = 1; i <= List.size(); i++) {
            clsColumn ObjColumn = (clsColumn) List.get(Integer.toString(i));
            int lTaxID = (int) ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID = (int) ObjColumn.getAttribute("SR_NO").getVal();

            clsTaxColumn ObjTax = (clsTaxColumn) clsTaxColumn.getObject((int) EITLERPGLOBAL.gCompanyID, lTaxID);
            if ((boolean) ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj() + "%");

                DataModelL.SetNumeric(TableL.getColumnCount() - 1, true);

                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount() - 1, lColID);

                //Set Variable for % Column. It will be P_ID
                DataModelL.SetVariable(TableL.getColumnCount() - 1, "P_" + Integer.toString(lColID));

                //Set the Operationg Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount() - 1, "-");

                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount() - 1, true);

                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount() - 1, (String) ObjTax.getAttribute("FORMULA").getObj());

                //Control Column Visibility
                if (!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount() - 1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount() - 1).setPreferredWidth(0);
                }

                DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj());

                DataModelL.SetNumeric(TableL.getColumnCount() - 1, true);

                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount() - 1, lColID);

                //Set Variable
                if (ObjColumn.getAttribute("VARIABLE_NAME").getObj() != null) {
                    DataModelL.SetVariable(TableL.getColumnCount() - 1, (String) ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                } else {
                    DataModelL.SetVariable(TableL.getColumnCount() - 1, "  ");
                }

                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount() - 1, (String) ObjTax.getAttribute("OPERATION").getObj());

                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount() - 1, (boolean) ObjTax.getAttribute("NO_CALCULATION").getBool());

                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount() - 1, (String) ObjTax.getAttribute("FORMULA").getObj());

                //Control Column Visibility
                if (!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount() - 1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount() - 1).setPreferredWidth(0);
                }
            } else {
                DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj());

                DataModelL.SetNumeric(TableL.getColumnCount() - 1, true);
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount() - 1, lColID);

                //Set Variable
                if (ObjColumn.getAttribute("VARIABLE_NAME").getObj() == null) {
                    DataModelL.SetVariable(TableL.getColumnCount() - 1, "  ");
                } else {
                    DataModelL.SetVariable(TableL.getColumnCount() - 1, (String) ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }

                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount() - 1, (String) ObjTax.getAttribute("OPERATION").getObj());

                //Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount() - 1, (boolean) ObjTax.getAttribute("NO_CALCULATION").getBool());

                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount() - 1, (String) ObjTax.getAttribute("FORMULA").getObj());

                //Control Column Visibility
                if (!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount() - 1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount() - 1).setPreferredWidth(0);
                }
            }
            if(!txtSuppCode.getText().startsWith("7")){
                if(lTaxID==864){
                   DataModelL.SetReadOnly(TableL.getColumnCount() - 1); 
                   if ((boolean) ObjTax.getAttribute("USE_PERCENT").getBool()) {
                       DataModelL.SetReadOnly(TableL.getColumnCount() - 2); 
                   }                   
                }
            }else{
                if(lTaxID==853 || lTaxID==854 || lTaxID==856 || lTaxID==857 || lTaxID==858 || lTaxID==859 || lTaxID==860 || lTaxID==861 || lTaxID==862){
                   DataModelL.SetReadOnly(TableL.getColumnCount() - 1); 
                   if ((boolean) ObjTax.getAttribute("USE_PERCENT").getBool()) {
                       DataModelL.SetReadOnly(TableL.getColumnCount() - 2); 
                   }                   
                }
            }
        }

        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableL.setRowSelectionAllowed(true);
        TableL.setColumnSelectionAllowed(true);

        ColList = clsSystemColumn.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=6 AND HIDDEN=0 AND SHOW_LAST=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for (int i = 1; i <= ColList.size(); i++) {
            clsSystemColumn ObjColumn = (clsSystemColumn) ColList.get(Integer.toString(i));

            //Add Column First
            DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj()); //0

            if (ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount() - 1, true);
            } else {
                DataModelL.SetNumeric(TableL.getColumnCount() - 1, false);
            }

            String Variable = (String) ObjColumn.getAttribute("VARIABLE").getObj();

            if (Variable.equals("QTY") || Variable.equals("RATE") || Variable.equals("GROSS_AMOUNT") || Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount() - 1, -99);
            } else {
                DataModelL.SetColID(TableL.getColumnCount() - 1, 0);
            }

            DataModelL.SetVariable(TableL.getColumnCount() - 1, Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount() - 1, "-");
            DataModelL.SetInclude(TableL.getColumnCount() - 1, true);

            if (ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount() - 1);
            }
        }

        ColList = clsSystemColumn.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=6 AND HIDDEN=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for (int i = 1; i <= ColList.size(); i++) {
            clsSystemColumn ObjColumn = (clsSystemColumn) ColList.get(Integer.toString(i));

            //Add Column First
            DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj()); //
            DataModelL.SetColID(TableL.getColumnCount() - 1, 0);
            DataModelL.SetVariable(TableL.getColumnCount() - 1, (String) ObjColumn.getAttribute("VARIABLE").getObj());
            DataModelL.SetOperation(TableL.getColumnCount() - 1, "-");
            DataModelL.SetInclude(TableL.getColumnCount() - 1, true);
            DataModelL.SetNumeric(TableL.getColumnCount() - 1, ObjColumn.getAttribute("NUMERIC").getBool());

            DataModelL.SetReadOnly(TableL.getColumnCount() - 1);

            //Hide the Column
            TableL.getColumnModel().getColumn(TableL.getColumnCount() - 1).setPreferredWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount() - 1).setMaxWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount() - 1).setMinWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount() - 1).setWidth(0);
        }
    }

    private void FormatGrid() {
        HashMap ColList = new HashMap();

        try {
            DataModelL = new EITLTableModel();

            TableL.removeAll();
            TableL.setModel(DataModelL);

            //Set the table Readonly
            DataModelL.TableReadOnly(false);

            ColList = clsSystemColumn.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=6 AND HIDDEN=0 AND SHOW_LAST=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
            for (int i = 1; i <= ColList.size(); i++) {
                clsSystemColumn ObjColumn = (clsSystemColumn) ColList.get(Integer.toString(i));

                //Add Column First
                DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj()); //0

                if (ObjColumn.getAttribute("NUMERIC").getBool()) {
                    DataModelL.SetNumeric(TableL.getColumnCount() - 1, true);
                } else {
                    DataModelL.SetNumeric(TableL.getColumnCount() - 1, false);
                }

                String Variable = (String) ObjColumn.getAttribute("VARIABLE").getObj();

                if (Variable.equals("QTY") || Variable.equals("RATE") || Variable.equals("GROSS_AMOUNT") || Variable.equals("NET_AMOUNT")) {
                    DataModelL.SetColID(TableL.getColumnCount() - 1, -99);
                } else {
                    DataModelL.SetColID(TableL.getColumnCount() - 1, 0);
                }

                DataModelL.SetVariable(TableL.getColumnCount() - 1, Variable.trim());
                DataModelL.SetOperation(TableL.getColumnCount() - 1, "-");
                DataModelL.SetInclude(TableL.getColumnCount() - 1, true);

                if (ObjColumn.getAttribute("READONLY").getBool()) {
                    DataModelL.SetReadOnly(TableL.getColumnCount() - 1);
                }
            }

            SetupColumns();

            //Now hide the column 1
            TableColumnModel ColModel = TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            //------- Install Table List Selection Listener ------//
            TableL.getColumnModel().getSelectionModel().addListSelectionListener(
                    new ListSelectionListener() {
                        public void valueChanged(ListSelectionEvent e) {
                            int last = TableL.getSelectedColumn();
                            String strVar = DataModelL.getVariable(last);
                            String DisplayLot = "";
                            //=============== Cell Editing Routine =======================//
                            try {
                                cellLastValueL = (String) TableL.getValueAt(TableL.getSelectedRow(), TableL.getSelectedColumn());

                                TableL.editCellAt(TableL.getSelectedRow(), TableL.getSelectedColumn());
                                if (TableL.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) TableL.getEditorComponent()).selectAll();
                                }

                                //=========Display Column Total ===============//
                                double ColTotal = 0;
                                for (int i = 0; i < TableL.getRowCount(); i++) {
                                    if (EITLERPGLOBAL.IsNumber(TableL.getValueAt(i, last).toString())) {
                                        ColTotal = ColTotal + Double.parseDouble(TableL.getValueAt(i, last).toString());
                                    }
                                }
                                lblColumnTotal.setText(Double.toString(EITLERPGLOBAL.round(ColTotal, 3)));
                                //============================================//
                                FormatGridLotDetail();
                                if (EditMode == 0) {
                                    if (!DataModelL.getUserObject(TableL.getSelectedRow()).equals("")) {
                                        HashMap lcolLot = (HashMap) DataModelL.getUserObject(TableL.getSelectedRow());
                                        for (int l = 1; l <= lcolLot.size(); l++) {
                                            clsMIRRawItemDetail ObjLot = new clsMIRRawItemDetail();
                                            clsMIRRawItemDetail ObjList = (clsMIRRawItemDetail) lcolLot.get(Integer.toString(l));
                                            Object[] rowData = new Object[1];
                                            DataModelLot.addRow(rowData);
                                            int NewRow = TableDetailLotInfo.getRowCount() - 1;
                                            DataModelLot.setValueByVariable("SR_NO", Integer.toString(l), NewRow);
                                            DataModelLot.setValueByVariable("BATCH_NO", ObjList.getAttribute("ITEM_LOT_NO").getString(), NewRow);
                                            DataModelLot.setValueByVariable("RECEIPT_NO", ObjList.getAttribute("AUTO_LOT_NO").getString(), NewRow);
                                            DataModelLot.setValueByVariable("ACCEPTED_QTY", Double.toString(ObjList.getAttribute("LOT_ACCEPTED_QTY").getDouble()), NewRow);
                                        }
                                    }
                                }
                            } catch (Exception cell) {
                            }
                    //============= Cell Editing Routine Ended =================//

                            ShowMessage("Ready");

                            try {

                                if (strVar.equals("ITEM_ID")) {
                                    ShowMessage("Enter item id. Press F1 to for the list of items");
                                }

                                if (strVar.equals("QTY")) {
                                    ShowMessage("Enter Qty");
                                }

                                if (strVar.equals("RATE")) {
                                    ShowMessage("Enter Rate");
                                }

                                if (strVar.equals("EXCISE_GATEPASS_GIVEN")) {
                                    ShowMessage("Press Spacebar to specify whether excise gatepass is given or not");
                                }

                                //lblLotInfo.setText(DisplayLot);
                            } catch (Exception v) {

                            }
                        }
                    }
            );
            //===================================================//

            //----- Install Table Model Event Listener -------//
            TableL.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();

                        //=========== Cell Update Prevention Check ===========//
                        String curValue = (String) TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                        if (curValue.equals(cellLastValueL)) {
                            return;
                        }
                        //====================================================//

                        if (DoNotEvaluate) {
                            return;
                        }

                        if (!Updating) {
                            UpdateResults(col);
                        }

                        if (col == DataModelL.getColFromVariable("DEPT_ID")) {
                            String DeptName = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID", TableL.getSelectedRow())));
                            DataModelL.setValueByVariable("DEPT_NAME", DeptName, TableL.getSelectedRow());
                        }

                        if (col == DataModelL.getColFromVariable("REJECTED_REASON_ID")) {
                            String Reason = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "REJECTED_REASON", Integer.parseInt(DataModelL.getValueByVariable("REJECTED_REASON_ID", TableL.getSelectedRow())));
                            DataModelL.setValueByVariable("REJECTED_REASON", Reason, TableL.getSelectedRow());
                        }

                        //If Item ID has changed
                        if (col == DataModelL.getColFromVariable("ITEM_ID")) {
                            try {
                                DoNotEvaluate = true; //Stops Formula Evaluation
                                String lItemID = (String) DataModelL.getValueAt(TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_ID"));
                                String lItemName = clsItem.getItemName((int) EITLERPGLOBAL.gCompanyID, lItemID);
                                String lHsnSacCode = clsItem.getHsnSacCode((int) EITLERPGLOBAL.gCompanyID, lItemID);
                                String lWareHouseID = clsItem.getItemWareHouseID((int) EITLERPGLOBAL.gCompanyID, lItemID);
                                String lLocationID = clsItem.getItemLocationID((int) EITLERPGLOBAL.gCompanyID, lItemID);

                                TableL.setValueAt(lItemName, TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_NAME"));
                                TableL.setValueAt(lHsnSacCode, TableL.getSelectedRow(), DataModelL.getColFromVariable("HSN_SAC_CODE"));
                                TableL.setValueAt(lWareHouseID, TableL.getSelectedRow(), DataModelL.getColFromVariable("WAREHOUSE_ID"));
                                TableL.setValueAt(lLocationID, TableL.getSelectedRow(), DataModelL.getColFromVariable("LOCATION_ID"));

                                double UnitRate = clsItem.getRate(EITLERPGLOBAL.gCompanyID, lItemID);
                                if (Double.parseDouble((String) DataModelL.getValueByVariable("RATE", TableL.getSelectedRow())) <= 0) {
                                    TableL.setValueAt(Double.toString(UnitRate), TableL.getSelectedRow(), DataModelL.getColFromVariable("RATE"));
                                }

                                int lItemUnit = clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(Integer.toString(lItemUnit), TableL.getSelectedRow(), DataModelL.getColFromVariable("UNIT_ID"));
                                String lUnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
                                TableL.setValueAt(lUnitName, TableL.getSelectedRow(), DataModelL.getColFromVariable("UNIT_NAME"));

                                DataModelL.setValueByVariable("GROSS_QTY", Double.toString(clsInward.getGrossWeight(EITLERPGLOBAL.gCompanyID, txtChalanNo.getText(), txtSuppCode.getText(), lItemID)), TableL.getSelectedRow());
                                DisplayIndicators();
                                DoNotEvaluate = false;
                            } catch (Exception ex) {
                                DoNotEvaluate = false;
                            }
                        }

                        if (col == DataModelL.getColFromVariable("QTY")) {
                            try {
                                String ItemID = DataModelL.getValueByVariable("ITEM_ID", TableL.getSelectedRow());
                                double POQty = Double.parseDouble((String) DataModelL.getValueByVariable("PO_QTY", TableL.getSelectedRow()));
                                double Qty = Double.parseDouble((String) DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                                double ToleranceLimit = data.getDoubleValueFromDB("SELECT TOLERANCE_LIMIT FROM D_INV_ITEM_MASTER WHERE ITEM_ID LIKE '" + ItemID + "%' ");
                                double ToleranceQty = (POQty * ToleranceLimit) / 100;
                                if (POQty > 0) {
                                    if ((POQty + ToleranceQty) < Qty) {
                                        JOptionPane.showMessageDialog(null, "Accepted Qty (" + Qty + ") is greater than PO Qty + ToleranceQty (" + (POQty + ToleranceQty) + ").");
                                    }
                                }
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }
                }
            });

            int ImportCol = DataModelL.getColFromVariable("EXCISE_GATEPASS_GIVEN");
            Renderer.setCustomComponent(ImportCol, "CheckBox");
            JCheckBox aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            TableL.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableL.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);

            int ImportCol2 = DataModelL.getColFromVariable("IMPORT_CONCESS");
            Renderer.setCustomComponent(ImportCol2, "CheckBox");
            aCheckBox = new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            TableL.getColumnModel().getColumn(ImportCol2).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableL.getColumnModel().getColumn(ImportCol2).setCellRenderer(Renderer);

            //Add ComboBox
            JComboBox cmbBarcodeType = new JComboBox();

            EITLComboModel cmbBarcodeTypeModel = new EITLComboModel();
            cmbBarcodeType.removeAllItems();
            cmbBarcodeType.setModel(cmbBarcodeTypeModel);

            ComboData aData = new ComboData();
            aData.Code = 1;
            aData.Text = "Single";
            cmbBarcodeTypeModel.addElement(aData);

            aData = new ComboData();
            aData.Code = 2;
            aData.Text = "Individual";
            cmbBarcodeTypeModel.addElement(aData);

            aData = new ComboData();
            aData.Code = 3;
            aData.Text = "No Barcode";
            cmbBarcodeTypeModel.addElement(aData);

            Renderer.setCustomComponent(DataModelL.getColFromVariable("BARCODE_TYPE"), "ComboBox");
            Renderer.setCustomComponent(DataModelL.getColFromVariable("BARCODE_TYPE"), cmbBarcodeType);

            TableL.getColumnModel().getColumn(DataModelL.getColFromVariable("BARCODE_TYPE")).setCellEditor(new DefaultCellEditor(cmbBarcodeType));
        } catch (Exception e) {
        }
    }

    private void FormatGridLotDetail() {
        try {
            DataModelLot = new EITLTableModel();

            TableDetailLotInfo.removeAll();
            TableDetailLotInfo.setModel(DataModelLot);
            TableDetailLotInfo.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            //Set the table Readonly
            DataModelLot.TableReadOnly(false);

            DataModelLot.addColumn("Sr."); //0 - Read Only
            DataModelLot.addColumn("Batch No.");
            DataModelLot.addColumn("Receipt No.");
            DataModelLot.addColumn("Accepted Qty.");

            DataModelLot.SetVariable(0, "SR_NO"); //0 - Read Only
            DataModelLot.SetVariable(1, "BATCH_NO"); //0 - Read Only
            DataModelLot.SetVariable(2, "RECEIPT_NO"); //0 - Read Only
            DataModelLot.SetVariable(3, "ACCEPTED_QTY"); //0 - Read Only

            TableDetailLotInfo.getColumnModel().getColumn(0).setPreferredWidth(30);
            TableDetailLotInfo.getColumnModel().getColumn(1).setPreferredWidth(80);
            TableDetailLotInfo.getColumnModel().getColumn(2).setPreferredWidth(80);
            TableDetailLotInfo.getColumnModel().getColumn(3).setPreferredWidth(90);

        } catch (Exception e) {
        }
    }

    private void GatherVariableValues_H() {
        String strVariable = "";
        int varCol = 0;
        double lnValue = 0, lnSum = 0;

        //Scan the table and gather values for variables
        colVariables_H.clear();

        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table

        for (int i = 0; i < TableH.getRowCount(); i++) {
            double lValue = 0;
            if (DataModelH.getVariable(i) != null) {
                if (!DataModelH.getVariable(i).equals("")) //If Variable not blank
                {
                    colVariables_H.put(DataModelH.getVariable(i), (String) TableH.getValueAt(i, 1));

                    //Add variable Value to Parser Table
                    if ((TableH.getValueAt(i, 1) != null) && (!TableH.getValueAt(i, 1).toString().equals(""))) {
                        lValue = Double.parseDouble((String) TableH.getValueAt(i, 1));
                    } else {
                        lValue = 0;
                    }
                    myParser.addVariable(DataModelH.getVariable(i), lValue);
                }
            }
        }

        //Gather Variables - sum of line columns
        for (int c = 0; c < TableL.getColumnCount(); c++) {
            strVariable = DataModelL.getVariable(c);
            strVariable = strVariable.trim();

            if ((strVariable != null) && (!strVariable.equals(""))) {
                varCol = DataModelL.getColFromVariable(strVariable);

                //Do the sum
                lnSum = 0;

                try {
                    for (int r = 0; r < TableL.getRowCount(); r++) {
                        String theVal = (String) DataModelL.getValueAt(r, varCol);

                        if (theVal == null) {
                        } else {
                            lnValue = Double.parseDouble(TableL.getValueAt(r, varCol).toString());
                            lnSum = lnSum + lnValue;
                        }
                    }
                } catch (Exception e) {
                }
                //Sum Complete. Add to Parser Table
                myParser.addVariable("SUM_" + strVariable, lnSum);
            }
        }

        CurrencyRate = 1;

        if (EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
            CurrencyRate = Double.parseDouble(txtCurrencyRate.getText());
            if (CurrencyRate == 0) {
                CurrencyRate = 1;
            }
        }

        myParser.addVariable("CURRENCY_RATE", CurrencyRate);

    }

    private void SetupColumns_H() {
        HashMap List = new HashMap();
        Object[] rowData;

        List = clsColumn.getList(" WHERE COMPANY_ID=" + Long.toString(EITLERPGLOBAL.gCompanyID) + " AND MODULE_ID=6 AND HEADER_LINE='H' ORDER BY COL_ORDER");
        TableColumnModel ColModel = TableH.getColumnModel();

        TableH.removeAll();

        if (List.size() <= 0) {
            HeaderPane.setVisible(false);
        }

        for (int i = 1; i <= List.size(); i++) {
            clsColumn ObjColumn = (clsColumn) List.get(Integer.toString(i));
            int lTaxID = (int) ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID = (int) ObjColumn.getAttribute("SR_NO").getVal();

            clsTaxColumn ObjTax = (clsTaxColumn) clsTaxColumn.getObject((int) EITLERPGLOBAL.gCompanyID, lTaxID);
            if ((boolean) ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                //DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");

                rowData = new Object[2];
                rowData[0] = (String) ObjColumn.getAttribute("CAPTION").getObj() + "%";
                rowData[1] = "0.00";
                DataModelH.addRow(rowData);

                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount() - 1, lColID);

                //Set Variable for % Column. It will be P_ID
                DataModelH.SetVariable(TableH.getRowCount() - 1, "P_" + Integer.toString(lColID));

                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount() - 1, "-");

                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount() - 1, true);

                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount() - 1, (String) ObjTax.getAttribute("FORMULA").getObj());

                rowData = new Object[2];
                rowData[0] = (String) ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1] = "0.00";
                DataModelH.addRow(rowData);

                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount() - 1, lColID);

                //Set Variable
                if (ObjColumn.getAttribute("VARIABLE_NAME").getObj() != null) {
                    DataModelH.SetVariable(TableH.getRowCount() - 1, (String) ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                } else {
                    DataModelH.SetVariable(TableH.getRowCount() - 1, "  ");
                }

                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount() - 1, (String) ObjTax.getAttribute("OPERATION").getObj());

                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount() - 1, (boolean) ObjTax.getAttribute("NO_CALCULATION").getBool());

                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount() - 1, (String) ObjTax.getAttribute("FORMULA").getObj());

            } else {
                //DataModelH.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                //Set Column ID

                rowData = new Object[2];
                rowData[0] = (String) ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1] = "0.00";
                DataModelH.addRow(rowData);

                DataModelH.SetColID(TableH.getRowCount() - 1, lColID);

                //Set Variable
                if (ObjColumn.getAttribute("VARIABLE_NAME").getObj() == null) {
                    DataModelH.SetVariable(TableH.getRowCount() - 1, "  ");
                } else {
                    DataModelH.SetVariable(TableH.getRowCount() - 1, (String) ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }

                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount() - 1, (String) ObjTax.getAttribute("OPERATION").getObj());

                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount() - 1, (boolean) ObjTax.getAttribute("NO_CALCULATION").getBool());

                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount() - 1, (String) ObjTax.getAttribute("FORMULA").getObj());
            }
        }
    }

    private void FormatGrid_H() {
        DataModelH = new EITLTableModel();

        EITLTableCellRenderer Renderer = new EITLTableCellRenderer();

        TableH.removeAll();
        TableH.setModel(DataModelH);

        Renderer.setColor(0, 0, Color.LIGHT_GRAY);

        //Set the table Readonly
        DataModelH.TableReadOnly(false);
        DataModelH.SetReadOnly(0);

        //Add Default Columns
        DataModelH.addColumn("Column");
        DataModelH.addColumn("Value");
        DataModelH.SetNumeric(1, true);

        TableH.getColumnModel().getColumn(0).setCellRenderer(Renderer);
        SetupColumns_H();

        TableColumnModel ColModel = TableH.getColumnModel();
        TableH.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        //------- Install Table List Selection Listener ------//
        TableH.getColumnModel().getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent e) {
                        int last = TableH.getSelectedColumn();
                        String strVar = DataModelH.getVariable(last);

                        //=============== Cell Editing Routine =======================//
                        try {
                            cellLastValueH = (String) TableH.getValueAt(TableH.getSelectedRow(), TableH.getSelectedColumn());

                            TableH.editCellAt(TableH.getSelectedRow(), TableH.getSelectedColumn());
                            if (TableH.getEditorComponent() instanceof JTextComponent) {
                                ((JTextComponent) TableH.getEditorComponent()).selectAll();
                            }
                        } catch (Exception cell) {
                        }
                //============= Cell Editing Routine Ended =================//

                    }
                }
        );
        //===================================================//

        //----- Install Table Model Event Listener -------//
        TableH.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {

                    //=========== Cell Update Prevention Check ===========//
                    String curValue = (String) TableH.getValueAt(TableH.getSelectedRow(), e.getColumn());
                    if (curValue.equals(cellLastValueH)) {
                        return;
                    }
                    //====================================================//

                    int col = e.getColumn();
                    int row = e.getLastRow();
                    if (!Updating_H) {
                        UpdateResults_H(row);
                    }
                }
            }
        });
    }

    private void UpdateResults_H(int pCol) {
        try {
            int ColID = 0, TaxID = 0, UpdateCol = 0;
            String strFormula = "", strItemID = "", strVariable = "", srcVariable = "", srcVar2 = "";
            double lnPercentValue = 0, lnFinalResult = 0, lnNetAmount = 0;
            Object result;
            boolean updateIt = true;
            int QtyCol = 0, RateCol = 0, GAmountCol = 0;

            Updating_H = true; //Stops Recursion

            srcVariable = DataModelH.getVariable(pCol); //Variable name of currently updated Column

            //If this column is percentage column. Variable name would be P_XXX
            //We shoule use actual variable name, it will be found on it's associated next column
            if (srcVariable.substring(0, 2).equals("P_")) {
                srcVariable = DataModelH.getVariable(pCol + 1);
            }

            GatherVariableValues_H();

            for (int i = 0; i < TableH.getRowCount(); i++) {
                strVariable = DataModelH.getVariable(i);

                ColID = DataModelH.getColID(i);

                TaxID = ObjColumn.getTaxID((int) EITLERPGLOBAL.gCompanyID, ColID);

                //Exclude Percentage Columns and System Columns
                if ((!strVariable.substring(0, 2).equals("P_")) && (ColID != 0)) {
                    //If percentage is used
                    if (ObjTax.getUsePercentage((int) EITLERPGLOBAL.gCompanyID, TaxID)) {

                        //Load the Formula for calculation
                        if ((EITLERPGLOBAL.UseCurrentFormula) && (EditMode != EITLERPGLOBAL.ADD)) {
                            strFormula = clsTaxColumn.getFormula((int) EITLERPGLOBAL.gCompanyID, TaxID);
                        } else {
                            strFormula = DataModelH.getFormula(i);
                        }

                        //Now Read Associated Percentage Column
                        lnPercentValue = Double.parseDouble(DataModelH.getValueByVariableEx("P_" + Integer.toString(ColID), 1));

                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result = myParser.getValueAsObject();
                        if (result != null) {
                            //Now get the percentage of the main result
                            lnFinalResult = (Double.parseDouble(result.toString()) * lnPercentValue) / 100;
                            //Update the Column
                            srcVar2 = DataModelH.getVariable(pCol + 1);

                            UpdateCol = DataModelH.getColFromVariable(strVariable);

                            updateIt = false;

                            if (UpdateCol != pCol) {
                                if (UpdateCol == pCol + 1) {
                                    updateIt = true;
                                } else {
                                    if ((strFormula.indexOf(srcVariable) != -1)) { //If this column is dependent on updated column
                                        updateIt = true; //Then update it
                                    } else {
                                        if ((strFormula.indexOf("QTY") != -1) || (strFormula.indexOf("RATE") != -1) || (strFormula.indexOf("GROSS_AMOUNT") != -1)) {
                                            if (pCol == QtyCol || pCol == RateCol || pCol == GAmountCol) {
                                                updateIt = true;
                                            }
                                        }
                                    }
                                }

                                //============ New Change In Parser =============//
                                //Now Condition. First check whether percentage has been entered
                                if (lnPercentValue > 0) {
                                    //Yes Percentage Entered. Then we must update the associated column
                                    updateIt = true;
                                } else {
                                    //If not Percentage entered than check whether any value is there
                                    //Otherwise go with the Dependent decision
                                    updateIt = false;
                                }
                                //=================================================//

                            }
                            if (updateIt) {
                                DataModelH.setValueByVariableEx(strVariable, Double.toString(EITLERPGLOBAL.round(lnFinalResult, 3)), 1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    } else //Percentage Not Used
                    {

                        //Load the Formula for calculation
                        if ((EITLERPGLOBAL.UseCurrentFormula) && (EditMode != EITLERPGLOBAL.ADD)) {
                            strFormula = clsTaxColumn.getFormula((int) EITLERPGLOBAL.gCompanyID, TaxID);
                        } else {
                            strFormula = DataModelH.getFormula(i);
                        }

                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result = myParser.getValueAsObject();
                        if (result != null) {
                            //Now get the percentage of the main result
                            lnFinalResult = Double.parseDouble(result.toString());
                            //Update the Column
                            UpdateCol = DataModelH.getColFromVariable(strVariable);

                            updateIt = false;

                            if (UpdateCol != pCol) {
                                if (strFormula.indexOf(srcVariable) != -1) {
                                    updateIt = true;
                                } else {
                                    updateIt = true;
                                }

                                //============ New Change In Parser =============//
                                //Now Condition. First check whether percentage has been entered
                                if (lnPercentValue > 0) {
                                    //Yes Percentage Entered. Then we must update the associated column
                                    updateIt = true;
                                } else {
                                    //If not Percentage entered than check whether any value is there
                                    //Otherwise go with the Dependent decision
                                }
                                //=================================================//

                            }
                            if (updateIt) {
                                DataModelH.setValueByVariableEx(strVariable, Double.toString(EITLERPGLOBAL.round(lnFinalResult, 3)), 1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                }
            }
            Updating_H = false;
            UpdateAmounts();
        } catch (Exception e) {
            Updating_H = false;
        }
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=6");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=6");
        }
        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            System.out.println("ID-" + (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal() + " Name-" + (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj());
        }
        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //

        //----- Generate Department Combo ------- //
        cmbCurrencyModel = new EITLComboModel();
        cmbCurrency.removeAllItems();
        cmbCurrency.setModel(cmbCurrencyModel);

        List = clsCurrency.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);
        for (int i = 1; i <= List.size(); i++) {
            clsCurrency ObjCurrency = (clsCurrency) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjCurrency.getAttribute("CURRENCY_ID").getVal();
            aData.Text = (String) ObjCurrency.getAttribute("CURRENCY_DESC").getObj();
            cmbCurrencyModel.addElement(aData);
        }
        //------------------------------ //

        //----- Generate cmbType ------- //
        cmbTransportModel = new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransportModel);

        strCondition = " WHERE COMPANY_ID=" + Long.toString(EITLERPGLOBAL.gCompanyID) + " AND PARA_ID='TRANSPORT'";

        List = clsParameter.getList(strCondition);
        for (int i = 1; i <= List.size(); i++) {
            clsParameter ObjPara = (clsParameter) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text = (String) ObjPara.getAttribute("DESC").getObj();
            aData.strCode = "";
            cmbTransportModel.addElement(aData);
        }
        //------------------------------ //

        //--- Generate Type Combo ------//
        cmbStatusModel = new EITLComboModel();
        cmbStatus.removeAllItems();
        cmbStatus.setModel(cmbStatusModel);

        ComboData aData = new ComboData();
        aData.strCode = "O";
        aData.Text = "Open";
        cmbStatusModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "C";
        aData.Text = "Close";
        cmbStatusModel.addElement(aData);
        //===============================//
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, 6, (String) ObjMIR.getAttribute("MIR_NO").getObj());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
        }

    }

    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,525)) {
         cmbHierarchy.setEnabled(true);
         }
         else {
         cmbHierarchy.setEnabled(false);
         }*/
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, 6, (String) ObjMIR.getAttribute("MIR_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, 6, FromUserID, (String) ObjMIR.getAttribute("MIR_NO").getObj());
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjMIR.getAttribute("HIERARCHY_ID").getVal());
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);

            //Now check special approval rights
            if (ApprovalFlow.CanFinalApprove(EITLERPGLOBAL.gCompanyID, 6, EITLERPGLOBAL.gNewUserID)) {
                OpgFinal.setEnabled(true);
            }
            //=================================//

        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 521)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,522)) {
         cmdEdit.setEnabled(true);
         }
         else {
         cmdEdit.setEnabled(false);
         }*/

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 523)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 524)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void UpdateSrNo() {
        int SrCol = DataModelL.getColFromVariable("SR_NO");

        for (int i = 0; i < TableL.getRowCount(); i++) {
            TableL.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void UpdateAmounts() {

        try {
            //== Final Pass - Update the Net Amount ==
            double lnNetAmount = 0;
            double lnColValue = 0;
            double lnGrossAmount = 0, lnSumNetAmount = 0, lnSumGrossAmount = 0;
            double HeaderTotal = 0;
            int NetAmountCol = 0, GrossAmountCol = 0;

            NetAmountCol = DataModelL.getColFromVariable("NET_AMOUNT");
            GrossAmountCol = DataModelL.getColFromVariable("GROSS_AMOUNT");

            for (int i = 0; i < TableL.getRowCount(); i++) {
                if (TableL.getValueAt(i, NetAmountCol) != null) {
                    lnSumNetAmount = lnSumNetAmount + Double.parseDouble((String) TableL.getValueAt(i, NetAmountCol));
                    lnSumGrossAmount = lnSumGrossAmount + Double.parseDouble((String) TableL.getValueAt(i, GrossAmountCol));
                }
            }

            for (int c = 0; c < TableH.getRowCount(); c++) {
                if (DataModelH.getInclude(c) == false) {
                    //Read column value
                    if (TableH.getValueAt(c, 1).toString().equals("")) {
                        lnColValue = 0;
                    } else {
                        lnColValue = Double.parseDouble((String) TableH.getValueAt(c, 1));
                    }

                    if (DataModelH.getOperation(c).equals("+")) //Add
                    {
                        lnGrossAmount = lnGrossAmount + lnColValue;
                        HeaderTotal += lnColValue;
                    } else //Substract
                    {
                        lnGrossAmount = lnGrossAmount - lnColValue;
                        HeaderTotal -= lnColValue;
                    }
                }
            }

            txtGrossAmount.setText(Double.toString(EITLERPGLOBAL.round(lnSumGrossAmount, 5)));
            txtNetAmount.setText(Double.toString(EITLERPGLOBAL.round(lnSumNetAmount, 5)));
            txtFinalAmount.setText(Double.toString(EITLERPGLOBAL.round(lnSumNetAmount + lnGrossAmount, 5)));

            lnGrossAmount = 0;
            GrossAmountCol = DataModelL.getColFromVariable("NET_AMOUNT");

            for (int i = 0; i < TableL.getRowCount(); i++) {
                if (TableL.getValueAt(i, GrossAmountCol) != null) {
                    lnGrossAmount = lnGrossAmount + Double.parseDouble((String) TableL.getValueAt(i, GrossAmountCol));
                }
            }

            for (int i = 0; i < TableL.getRowCount(); i++) {
                if (TableL.getValueAt(i, NetAmountCol) != null) {
                    //======= Calculate Landed Rate =======//
                    double NetAmount = EITLERPGLOBAL.round(Double.parseDouble((String) TableL.getValueAt(i, NetAmountCol)), 3);
                    NetAmount = NetAmount + UtilFunctions.CDbl(DataModelL.getValueByVariable("RND_DEDUCTION", i));
                    double GrossAmount = EITLERPGLOBAL.round(Double.parseDouble((String) TableL.getValueAt(i, GrossAmountCol)), 3);
                    double Percent = 0;
                    double lnQty = Double.parseDouble((String) TableL.getValueAt(i, DataModelL.getColFromVariable("QTY")));
                    double lnRecpQty = Double.parseDouble((String) TableL.getValueAt(i, DataModelL.getColFromVariable("RECEIVED_QTY")));

                    double lnLandedRate = 0;

                    if (lnQty > 0) {
                        Percent = EITLERPGLOBAL.round((GrossAmount * 100) / lnGrossAmount, 3);

                        if (HeaderTotal != 0) {
                            lnLandedRate = EITLERPGLOBAL.round((NetAmount / lnQty), 3) + EITLERPGLOBAL.round((((HeaderTotal * Percent) / 100) / lnQty), 3);
                        } else {
                            lnLandedRate = EITLERPGLOBAL.round((NetAmount / lnQty), 3);
                        }

                        lnLandedRate = EITLERPGLOBAL.round(lnLandedRate, 5);
                    } else {
                        lnLandedRate = 0;
                    }

                    Updating = true;
                    DataModelL.setValueByVariable("LANDED_RATE", Double.toString(lnLandedRate), i);
                    Updating = false;
                }
            }
            //==========================================================================//
        } catch (Exception e) {

        }
    }

    private void ClearFields() {
        txtDocDate.setText("");
        txtSuppCode.setText("");
        txtChalanNo.setText("");
        txtChalanDate.setText("");
        txtLRNo.setText("");
        txtLRDate.setText("");
        txtInvoiceNo.setText("");
        txtInvoiceDate.setText("");
        txtTransName.setText("");
        txtGatepassNo.setText("");
        txtCurrencyRate.setText("0.00");
        txtRemarks.setText("");
        txtToRemarks.setText("");
        txtInvoiceAmount.setText("");
        txtSuffix.setText("");
        txtToRemarks.setText("");
        txtSuppName.setText("");
        chkImportConcess.setSelected(false);
        chkCancelled.setSelected(false);

        FormatGrid();
        FormatGridLotDetail();
        FormatGrid_H();
        FormatGridA();
        FormatGridHS();

        txtGrossAmount.setText("0.00");
        txtNetAmount.setText("0.00");

        txtInvoiceAmount.setText("0");
        txtSuppName.setText("");

    }

    private void SetFields(boolean pStat) {
        //txtDocDate.setEnabled(pStat);
        txtSuppCode.setEnabled(pStat);

        if (pStat && txtSuppCode.getText().trim().equals("000000")) {
            txtSuppName.setEnabled(pStat);
        }

        txtChalanNo.setEnabled(pStat);
        txtChalanDate.setEnabled(pStat);
        txtLRNo.setEnabled(pStat);
        txtLRDate.setEnabled(pStat);
        txtInvoiceNo.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        cmbTransporter.setEnabled(pStat);
        txtTransName.setEnabled(pStat);
        txtGatepassNo.setEnabled(pStat);
        cmbCurrency.setEnabled(pStat);
        txtCurrencyRate.setEnabled(pStat);
        cmbStatus.setEnabled(pStat);
        chkImportConcess.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtInvoiceAmount.setEnabled(pStat);
        txtSuffix.setEnabled(pStat);

        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);

        cmdInsert.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        //cmdInsertSTM.setEnabled(pStat);

        SetupApproval();

        DataModelH.TableReadOnly(!pStat);
        DataModelL.TableReadOnly(!pStat);
    }

    private boolean Validate() {
        int ValidEntryCount = 0;

        //Validates Item Entries
        if (TableL.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter at least one item");
            return false;
        }

        /*if(txtInvoiceNo.getText().trim().equals("")) {
         JOptionPane.showMessageDialog(null,"Please enter invoice no.");
         return false;
         }*/
        if (!txtChalanNo.getText().trim().equals("")) {
            if (txtChalanDate.getText().trim().equals("") || !EITLERPGLOBAL.isDate(txtChalanDate.getText())) {
                JOptionPane.showMessageDialog(null, "Please enter valid chalan date");
                return false;
            }

        }

        if (!txtInvoiceNo.getText().trim().equals("")) {
            if (txtInvoiceDate.getText().trim().equals("") || !EITLERPGLOBAL.isDate(txtInvoiceDate.getText())) {
                JOptionPane.showMessageDialog(null, "Please enter valid Invoice date");
                return false;
            }
        }

        /*if(UtilFunctions.CDbl(txtInvoiceAmount.getText())<=0)
         {
         JOptionPane.showMessageDialog(null,"Please enter invoice amount");
         return false;
         }*/
        if ((txtChalanNo.getText().trim().equals("")) && (txtInvoiceNo.getText().trim().equals(""))) {
            JOptionPane.showMessageDialog(null, "Please enter Chalan No. / Invoice No.");
            return false;
        }

        if (txtGatepassNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter inward no.");
            return false;
        }

        /*if(txtSuppCode.getText().trim().equals("000000")) { //&&txtSuppName.getText().trim().equals("")
         JOptionPane.showMessageDialog(null,"Please enter party name");
         return false;
         }*/
        if (!clsSupplier.IsValidSuppCode(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Please valid supplier code");
            return false;
        }

        if (!OpgReject.isSelected()) {
            //Check that User is hierarchy user or dynamic added user (who approves the MIR)
            int HierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

            //Now check for the rejected qty and received qty
            for (int i = 0; i < TableL.getRowCount(); i++) {
                double ReceivedQty = Double.parseDouble(DataModelL.getValueByVariable("RECEIVED_QTY", i));
                double RejectedQty = Double.parseDouble(DataModelL.getValueByVariable("REJECTED_QTY", i));
                double AcceptedQty = Double.parseDouble(DataModelL.getValueByVariable("QTY", i));
                int ReasonCode = Integer.parseInt(DataModelL.getValueByVariable("REJECTED_REASON_ID", i));

                int DeptID = Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID", i));
                int UserDeptID = clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
                int FinalApprover = 0;

                int Creator = 0;
                if (EditMode == EITLERPGLOBAL.ADD) {
                    Creator = 0;
                } else {
                    Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 6, txtDocNo.getText());
                }

                FinalApprover = ApprovalFlow.getFinalApprover(EITLERPGLOBAL.gCompanyID, 6, txtDocNo.getText());
                if (Creator != 0 && EITLERPGLOBAL.gUserID != Creator) {
                    if (clsDepartment.IsUserComesInDept(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, DeptID) || OpgFinal.isSelected()) {
                        if (RejectedQty > 0 && ReasonCode == 0) {
                            JOptionPane.showMessageDialog(null, "Please specify the reason for rejection");
                            return false;
                        }

                        if (EITLERPGLOBAL.round(ReceivedQty, 2) != EITLERPGLOBAL.round((AcceptedQty + RejectedQty), 2)) {
                            JOptionPane.showMessageDialog(null, "Sum of Accepted Qty and Rejected Qty does not equals to Received Qty. Please verify the input");
                            return false;
                        }
                    }
                }
                for (int j = 0; j < TableL.getRowCount(); j++) {
                    String PONo = DataModelL.getValueByVariable("PO_NO", i);
                    String POSrNo = DataModelL.getValueByVariable("PO_SR_NO", i);
                    if (i == j) {
                        continue;
                    } else {
                        String tempPONo = DataModelL.getValueByVariable("PO_NO", j);
                        String tempPOSrNo = DataModelL.getValueByVariable("PO_SR_NO", j);
                        if (tempPONo.equals(PONo) && tempPOSrNo.equals(POSrNo)) {
                            JOptionPane.showMessageDialog(this, "PO No : " + PONo + " PO Sr NO : " + POSrNo + " is repeated.");
                            return false;
                        }
                    }
                }
            }
        }
        //Search in Table
        int ItemCol = DataModelL.getColFromVariable("ITEM_ID");
        int RateCol = DataModelL.getColFromVariable("RATE");
        int QtyCol = DataModelL.getColFromVariable("QTY");
        int BOECol = DataModelL.getColFromVariable("BOE_NO");

        for (int i = 0; i < TableL.getRowCount(); i++) {
            String ItemID = "";
            double Rate = 0, Qty = 0;

            if (TableL.getValueAt(i, ItemCol) != null && TableL.getValueAt(i, RateCol) != null && TableL.getValueAt(i, QtyCol) != null) {
                ItemID = (String) TableL.getValueAt(i, ItemCol);
                Rate = Double.parseDouble((String) TableL.getValueAt(i, RateCol));
                Qty = Double.parseDouble((String) TableL.getValueAt(i, QtyCol));

                int DeptID = Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID", i));
                double ChalanQty = Double.parseDouble((String) TableL.getValueAt(i, DataModelL.getColFromVariable("CHALAN_QTY")));

                String BarcodeType = DataModelL.getValueByVariable("BARCODE_TYPE", i);

                if (clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID) && ChalanQty > 0 && (!BarcodeType.trim().equals("")) && DeptID > 0) {
                    ValidEntryCount++;
                } else {
                    JOptionPane.showMessageDialog(null, "Item entry is not valid. Please be sure to enter following information. \nValid Item ID,Quantity,Chalan Qty,Barcode Type,Department");
                    TableL.changeSelection(i, 1, false, false);
                    return false;
                }

            }

            //Replace X wherever BOE No. is Blank
            if (DataModelL.getValueAt(i, BOECol).toString().trim().equals("")) {
                DataModelL.setValueAt("X", i, BOECol);
            }

            double POQty = Double.parseDouble((String) DataModelL.getValueAt(i, DataModelL.getColFromVariable("PO_QTY")));
            double ReceivedQty = Double.parseDouble((String) DataModelL.getValueAt(i, DataModelL.getColFromVariable("RECEIVED_QTY")));
            double AcceptedQty = Double.parseDouble((String) DataModelL.getValueAt(i, DataModelL.getColFromVariable("QTY")));

            double RejectedQty = Double.parseDouble((String) DataModelL.getValueAt(i, DataModelL.getColFromVariable("REJECTED_QTY")));

            double ToleranceLimit = data.getDoubleValueFromDB("SELECT TOLERANCE_LIMIT FROM D_INV_ITEM_MASTER WHERE ITEM_ID LIKE '" + ItemID + "%' ");
            double ToleranceQty = (POQty * ToleranceLimit) / 100;
            if (ToleranceLimit > 0) {
                POQty = POQty + ToleranceQty;
            }

            //bhavesh code
            if ((AcceptedQty + RejectedQty) > ReceivedQty) {
                JOptionPane.showMessageDialog(null, "Approved and Rejected Quantity is Greater Than Received Quantity. Please verify");
                return false;
            }

            //----------------------------
            if (OpgFinal.isSelected()) {
                if (data.IsRecordExist("SELECT * FROM D_PUR_AMEND_HEADER WHERE APPROVED=0 AND CANCELLED=0 AND PO_NO='" + DataModelL.getValueByVariable("PO_NO", i) + "'")) {
                    JOptionPane.showMessageDialog(null, "PO Amendment is under Approval");
                    return false;
                }

                ItemID = (String) TableL.getValueAt(i, ItemCol);
                String STMNo = DataModelL.getValueByVariable("STM_NO", i);
                String PONo = DataModelL.getValueByVariable("PO_NO", i);
                double ItemRate = Double.parseDouble(DataModelL.getValueByVariable("RATE", i));

                if (STMNo.equals("") && PONo.equals("")) {
                    if (ItemRate > 0) {
                        JOptionPane.showMessageDialog(this, "Please provide STM NO or PO No.");
                        return false;
                    }
                }

                if (POQty > 0) {
                    if (POQty < AcceptedQty) {
                        JOptionPane.showMessageDialog(this, "Accepted Qty (" + AcceptedQty + ") exceeds PO Qty (" + (POQty - ToleranceQty) + ") with Tolerance Limit (" + ToleranceQty + ")");
                        return false;
                    }

                    //String PONo = (String)DataModelL.getValueAt(i,DataModelL.getColFromVariable("PO_NO"));
                    int POSrNo = Integer.parseInt((String) DataModelL.getValueAt(i, DataModelL.getColFromVariable("PO_SR_NO")));
                    //  double RejectedQty = Double.parseDouble((String)DataModelL.getValueAt(i,DataModelL.getColFromVariable("REJECTED_QTY")));
                    double ActualQty = ReceivedQty - RejectedQty;
                    String strSQL = "SELECT IF(SUM(B.RECEIVED_QTY - B.REJECTED_QTY) IS NULL , 0 ,SUM(B.RECEIVED_QTY - B.REJECTED_QTY)) "
                            + "FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE CANCELLED=0 AND A.MIR_NO=B.MIR_NO "
                            + "AND B.PO_NO='" + PONo + "' AND B.ITEM_ID = '" + ItemID + "' AND B.PO_SR_NO=" + POSrNo + " AND B.MIR_NO <> '" + txtDocNo.getText().trim() + "'";
                    double TotalQty = data.getDoubleValueFromDB(strSQL);
                    if (TotalQty + ActualQty > POQty) {
                        JOptionPane.showMessageDialog(this, "MIR Qty at MIR Serial No " + (i + 1) + " is exceeding PO No " + PONo + " & PO Serial No " + POSrNo + " and already Received Qty is " + TotalQty + " ");
                        return false;
                    }

                    String SuppCode = txtSuppCode.getText().trim();
                    if (!data.IsRecordExist("SELECT * FROM D_PUR_PO_HEADER WHERE PO_NO='" + PONo + "' AND SUPP_ID='" + SuppCode + "' ")) {
                        JOptionPane.showMessageDialog(this, "MIR SUPPLIER CODE AND PO SUPPLIER CODE DOES NOT MATCH.");
                        return false;
                    }
                }
            }

        }

        if (ValidEntryCount == 0) {
            JOptionPane.showMessageDialog(this, "Item entry is not valid. Please verify");
            return false;
        }

        //Now Header level validations
        if (txtDocDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter MIR Date");
            return false;
        }

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return false;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return false;
        }

        if (!txtSuppCode.getText().trim().equals("000000")) {
            if (!clsSupplier.IsValidSuppCodeEx(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText())) {
                JOptionPane.showMessageDialog(null, "Please enter valid supplier code");
                return false;
            }
        }
        if (!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid MIR Date");
            return false;
        }

        if (!EITLERPGLOBAL.isDate(txtInvoiceDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid invoice date");
            return false;
        }

        if (!EITLERPGLOBAL.isDate(txtLRDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid L.R. date");
            return false;
        }

        if (!EITLERPGLOBAL.isDate(txtChalanDate.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid Chalan date");
            return false;
        }

        if (!EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
            txtCurrencyRate.setText("0");
        }

        java.sql.Date docDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        /*if(!txtInvoiceDate.getText().trim().equals("")) {
         java.sql.Date InvoiceDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
         if(InvoiceDate.before(docDate)) {
         JOptionPane.showMessageDialog(null,"Invoice date must be greater than document date");
         return false;
         }
         }
         
         if(!txtChalanDate.getText().trim().equals("")) {
         java.sql.Date ChalanDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtChalanDate.getText()));
         if(ChalanDate.before(docDate)) {
         JOptionPane.showMessageDialog(null,"Chalan date must be greater than document date");
         return false;
         }
         }
         
         if(!txtLRDate.getText().trim().equals("")) {
         java.sql.Date LRDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtLRDate.getText()));
         if(LRDate.before(docDate)) {
         JOptionPane.showMessageDialog(null,"LR date must be greater than document date");
         return false;
         }
         }*/

        if (!EITLERPGLOBAL.IsNumber(txtInvoiceAmount.getText())) {
            txtInvoiceAmount.setText("0");
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return false;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return false;
        }

        //
        /*
         if (OpgFinal.isSelected()) {
         if (txtGatepassNo.getText().trim().equals("")) {
         JOptionPane.showMessageDialog(null,"Please enter the Gate Pass No");
         return false;
         }
         }
         */
        //
        return true;

    }

    private void SetNumberFormats() {
        /*DecimalFormat decimalFormat=new DecimalFormat("0.00");
         NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
         ObjFormater.setAllowsInvalid(false);
         txtCurrencyRate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));*/
    }

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 6;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 6, FFNo, false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());

            txtDocDate.requestFocus();

            lblTitle.setText("MATERIAL INSPECTION REPORT - " + txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);

        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }

    }

    private void Edit() {

        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = (String) ObjMIR.getAttribute("MIR_NO").getObj();
        if (ObjMIR.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;

            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (ApprovalFlow.IsCreator(6, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 522)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            DisableToolbar();
            txtDocDate.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Delete() {

        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = (String) ObjMIR.getAttribute("MIR_NO").getObj();

        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (ObjMIR.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if (ObjMIR.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                } else {
                    JOptionPane.showMessageDialog(null, "Error occured while deleting. Error is " + ObjMIR.LastError);
                }
            } else {
                JOptionPane.showMessageDialog(null, "You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }

    private void Save() {
        //Form level validations
        if (Validate() == false) {
            return; //Validation failed
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);

        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjMIR.Insert()) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjMIR.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjMIR.Update()) {
                
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjMIR.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if (OpgFinal.isSelected()) {
            if(EITLERPGLOBAL.gNewUserID==62){
                Mail();
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Stores.frmMIRFind", true);
        frmMIRFind ObjReturn = (frmMIRFind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!ObjMIR.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMIR.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMIR.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMIR.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjMIR.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        ObjMIR.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND MIR_NO='" + pDocNo + "' AND MIR_TYPE=2", pCompanyID);
        ObjMIR.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        ObjMIR.Filter(" WHERE MIR_NO IN(SELECT D_INV_MIR_HEADER.MIR_NO FROM D_INV_MIR_HEADER,D_COM_DOC_DATA WHERE D_INV_MIR_HEADER.MIR_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_MIR_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_MIR_HEADER.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND D_COM_DOC_DATA.USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND D_COM_DOC_DATA.STATUS='W' AND D_INV_MIR_HEADER.MIR_TYPE=2 AND MODULE_ID=6)", EITLERPGLOBAL.gCompanyID);
        ObjMIR.MoveLast();
        DisplayData();
    }

    public void FindByCompany(int pCompanyID, String pDocNo) {
        String dbURL = clsFinYear.getDBURL(pCompanyID, EITLERPGLOBAL.FinYearFrom);
        ObjMIR.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND MIR_NO='" + pDocNo + "' AND MIR_TYPE=2", pCompanyID, dbURL);
        ObjMIR.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void UpdateResults(int pCol) {
        if (!DoNotEvaluate) {
            try {
                int ColID = 0, TaxID = 0, UpdateCol = 0;
                String strFormula = "", strItemID = "", strVariable = "", srcVariable = "", srcVar2 = "";
                double lnPercentValue = 0, lnFinalResult = 0, lnNetAmount = 0;
                Object result;
                boolean updateIt = true;
                int QtyCol = 0, RateCol = 0, GAmountCol = 0;

                Updating = true; //Stops Recursion

                srcVariable = DataModelL.getVariable(pCol); //Variable name of currently updated Column

                //If this column is percentage column. Variable name would be P_XXX
                //We shoule use actual variable name, it will be found on it's associated next column
                if (srcVariable.substring(0, 2).equals("P_")) {
                    srcVariable = DataModelL.getVariable(pCol + 1);
                }

                QtyCol = DataModelL.getColFromVariable("QTY"); //Index of Qty Column
                RateCol = DataModelL.getColFromVariable("RATE"); //Index of Rate Column
                GAmountCol = DataModelL.getColFromVariable("GROSS_AMOUNT"); //Index of Gross Amount Column

                //======= Read the Item ID - To be used when accessing item specific formula ===//
                String cellValue = (String) DataModelL.getValueAt(TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_ID"));
                if (cellValue == null) {
                    strItemID = "";
                } else {
                    strItemID = (String) DataModelL.getValueAt(TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_ID"));
                }
                //================================================================================

                GatherVariableValues();

                //====== Update Gross Amount =======
                CurrencyRate = 1;

                if (EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
                    CurrencyRate = Double.parseDouble(txtCurrencyRate.getText());
                    if (CurrencyRate == 0) {
                        CurrencyRate = 1;
                    }
                }

                myParser.parseExpression("QTY*RATE");
                result = myParser.getValueAsObject();
                if (result != null) {
                    String RoundNum = Double.toString(EITLERPGLOBAL.round(Double.parseDouble(result.toString()) * CurrencyRate, 5));
                    DataModelL.setValueByVariable("GROSS_AMOUNT", RoundNum, TableL.getSelectedRow());
                }
                //=================================

                for (int i = 0; i < TableL.getColumnCount(); i++) {
                    strVariable = DataModelL.getVariable(i);

                    ColID = DataModelL.getColID(i);

                    TaxID = ObjColumn.getTaxID((int) EITLERPGLOBAL.gCompanyID, ColID);

                    //Exclude Percentage Columns and System Columns
                    if ((!strVariable.substring(0, 2).equals("P_")) && (ColID != 0) && (ColID != -99)) {
                        //If percentage is used
                        if (ObjTax.getUsePercentage((int) EITLERPGLOBAL.gCompanyID, TaxID)) {

                            //Load the Formula for calculation
                            if ((EITLERPGLOBAL.UseCurrentFormula) && (EditMode != EITLERPGLOBAL.ADD)) {
                                strFormula = clsTaxColumn.getFormula((int) EITLERPGLOBAL.gCompanyID, TaxID, strItemID);
                            } else {
                                strFormula = DataModelL.getFormula(i);
                            }

                            //Now Read Associated Percentage Column
                            lnPercentValue = Double.parseDouble(DataModelL.getValueByVariable("P_" + Integer.toString(ColID), TableL.getSelectedRow()));

                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result = myParser.getValueAsObject();
                            if (result != null) {
                                //Now get the percentage of the main result
                                lnFinalResult = (Double.parseDouble(result.toString()) * lnPercentValue) / 100;
                                //Update the Column
                                srcVar2 = DataModelL.getVariable(pCol + 1);

                                UpdateCol = DataModelL.getColFromVariable(strVariable);

                                updateIt = false;

                                if (UpdateCol != pCol) {
                                    if (UpdateCol == pCol + 1) {
                                        updateIt = true;
                                    } else {
                                        if ((strFormula.indexOf(srcVariable) != -1)) { //If this column is dependent on updated column
                                            updateIt = true; //Then update it
                                        } else {

                                            //Check whether the formula is dependent on any system Columns
                                            boolean Dependent = false;
                                            int dCol = 0;

                                            for (int d = 0; d <= TableL.getColumnCount() - 1; d++) {
                                                if (DataModelL.getColID(d) == 0) //It's System Column
                                                {
                                                    String dVariable = DataModelL.getVariable(d);
                                                    if (strFormula.indexOf(dVariable) != -1) {
                                                        if (pCol == d) {
                                                            Dependent = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }

                                    //============ New Change In Parser =============//
                                    //Now Condition. First check whether percentage has been entered
                                    if (lnPercentValue > 0) {
                                        //Yes Percentage Entered. Then we must update the associated column
                                        updateIt = true;
                                    } else {
                                        //If not Percentage entered than check whether any value is there
                                        //Otherwise go with the Dependent decision
                                    }
                                    //=================================================//

                                }

                                if (updateIt) {
                                    DataModelL.setValueByVariable(strVariable, Double.toString(EITLERPGLOBAL.round(lnFinalResult, 3)), TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        } else //Percentage Not Used
                        {
                            //Load the Formula for calculation
                            if ((EITLERPGLOBAL.UseCurrentFormula) && (EditMode != EITLERPGLOBAL.ADD)) {
                                strFormula = clsTaxColumn.getFormula((int) EITLERPGLOBAL.gCompanyID, TaxID, strItemID);
                            } else {
                                strFormula = DataModelL.getFormula(i);
                            }

                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result = myParser.getValueAsObject();
                            if (result != null) {
                                //Now get the percentage of the main result
                                lnFinalResult = Double.parseDouble(result.toString());
                                //Update the Column
                                UpdateCol = DataModelL.getColFromVariable(strVariable);

                                updateIt = false;

                                if (UpdateCol != pCol) {
                                    if (strFormula.indexOf(srcVariable) != -1) {
                                        updateIt = true;
                                    } else {

                                        //Check whether the formula is dependent on any system Columns
                                        boolean Dependent = false;
                                        int dCol = 0;

                                        for (int d = 0; d <= TableL.getColumnCount() - 1; d++) {
                                            if (DataModelL.getColID(d) == 0) //It's System Column
                                            {
                                                String dVariable = DataModelL.getVariable(d);

                                                if (strFormula.indexOf(dVariable) != -1) {
                                                    if (pCol == d) {
                                                        Dependent = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        if (Dependent) {
                                            updateIt = true;
                                        }

                                    }

                                    //============ New Change In Parser =============//
                                    //Now Condition. First check whether percentage has been entered
                                    if (lnPercentValue > 0) {
                                        //Yes Percentage Entered. Then we must update the associated column
                                        updateIt = true;
                                    } else {
                                        //If not Percentage entered than check whether any value is there
                                        //Otherwise go with the Dependent decision
                                    }
                                    //=================================================//

                                }
                                if (updateIt) {
                                    DataModelL.setValueByVariable(strVariable, Double.toString(EITLERPGLOBAL.round(lnFinalResult, 3)), TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                    }
                }

                //== Final Pass - Update the Net Amount ==
                lnNetAmount = 0;
                double lnColValue = 0;
                double lnGrossAmount = 0;

                lnGrossAmount = Double.parseDouble((String) DataModelL.getValueAt(TableL.getSelectedRow(), GAmountCol));

                for (int c = 0; c < TableL.getColumnCount(); c++) {

                    //To be included in Calculation or not
                    if (DataModelL.getInclude(c) == false) {
                        //Read column value
                        if (TableL.getValueAt(TableL.getSelectedRow(), c).toString().equals("")) {
                            lnColValue = 0;
                        } else {
                            lnColValue = Double.parseDouble((String) TableL.getValueAt(TableL.getSelectedRow(), c));
                        }

                        if (DataModelL.getOperation(c).equals("+")) //Add
                        {
                            lnGrossAmount = lnGrossAmount + lnColValue;
                        } else //Substract
                        {
                            lnGrossAmount = lnGrossAmount - lnColValue;
                        }
                    }
                }

                //Now update the Net Amount
                DataModelL.setValueByVariable("NET_AMOUNT", Double.toString(EITLERPGLOBAL.round(lnGrossAmount, 5)), TableL.getSelectedRow());

                Updating = false;

                //=======================================================//
                //======= New Change. Reverse Calculation ===============//
                //Calculate Percentage based on Amount
                ColID = DataModelL.getColID(pCol);
                int AsColID = DataModelL.getColID(pCol - 1);

                if (ColID != 0 && ColID != -99 && ColID == AsColID) {
                    TaxID = ObjColumn.getTaxID((int) EITLERPGLOBAL.gCompanyID, ColID);
                    //Read the formula
                    strFormula = clsTaxColumn.getFormula((int) EITLERPGLOBAL.gCompanyID, TaxID, strItemID);
                    double EnteredValue = Double.parseDouble((String) DataModelL.getValueAt(TableL.getSelectedRow(), pCol));

                    //Now Parse Main expression
                    myParser.parseExpression(strFormula);
                    result = myParser.getValueAsObject();
                    if (result != null) {
                        //x=(Gross Amount*Percent)/100

                        //Reverse
                        // x*100/Gross amount=Percent
                        double percentValue = 0;
                        double val = 0;

                        val = Double.parseDouble(result.toString());

                        if (val != 0) {
                            percentValue = EITLERPGLOBAL.round((EnteredValue * 100) / val, 3);
                            DoNotEvaluate = true;
                            TableL.setValueAt(Double.toString(percentValue), TableL.getSelectedRow(), pCol - 1);
                            DoNotEvaluate = false;
                        }
                    }
                }
                //======================================================//
                //============= End of Reverse Procedure ===============//

                UpdateResults_H(0);
                UpdateAmounts();
            } catch (Exception e) {
                Updating = false;
            }
        }// Do not Evaluate
    }

    private void GatherVariableValues() {
        //Scan the table and gather values for variables
        colVariables.clear();

        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table

        for (int i = 0; i < TableL.getColumnCount(); i++) {
            double lValue = 0;
            if (DataModelL.getVariable(i) != null) {
                //if((!DataModelL.getVariable(i).trim().equals(""))&&(DataModelL.getColID(i)!=0))    //If Variable not blank
                if ((!DataModelL.getVariable(i).trim().equals(""))) {
                    //colVariables.put(DataModelL.getVariable(i),(String)DataModelL.getValueAt(TableL.getSelectedRow(), i));

                    //Add variable Value to Parser Table
                    if ((TableL.getValueAt(TableL.getSelectedRow(), i) != null) && (!TableL.getValueAt(TableL.getSelectedRow(), i).toString().equals(""))) {
                        if (TableL.getValueAt(TableL.getSelectedRow(), i) instanceof Boolean) {
                            if (DataModelL.getBoolValueByVariable(DataModelL.getVariable(i), TableL.getSelectedRow())) {
                                lValue = 1;
                            } else {
                                lValue = 0;
                            }
                        } else {
                            if (EITLERPGLOBAL.IsNumber((String) TableL.getValueAt(TableL.getSelectedRow(), i))) {
                                lValue = Double.parseDouble((String) TableL.getValueAt(TableL.getSelectedRow(), i));
                            }
                        }
                    } else {
                        lValue = 0;
                    }
                    myParser.addVariable(DataModelL.getVariable(i), lValue);
                }
            }
        }

        myParser.addFunction("IIF", new IIF(myParser));

        CurrencyRate = 1;

        if (EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
            CurrencyRate = Double.parseDouble(txtCurrencyRate.getText());
            if (CurrencyRate == 0) {
                CurrencyRate = 1;
            }
        }

        myParser.addVariable("CURRENCY_RATE", CurrencyRate);

    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for (int i = 0; i < TableL.getColumnCount(); i++) {
            FieldName = DataModelL.getVariable(i);

            if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            } else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void PreviewAuditReport() {
        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptMIR2A.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtDocNo.getText() + "&DocType=2");
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Previwing " + e.getMessage());
        }
    }

    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 6, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 6, txtDocNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 6, txtDocNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

    }

    private void PreviewReport() {
        HashMap Params = new HashMap();

        if (chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null, "You cannot take printout of cancelled document");
            return;
        }
        Connection Conn = null;

        Conn = data.getConn();
        ReportRegister rpt = new ReportRegister(Params, Conn);

        String strSQL = "SELECT * FROM (SELECT A.MIR_NO,A.MIR_DATE,B.SR_NO,A.LR_NO,A.LR_DATE,A.GATEPASS_NO,A.CHALAN_NO,"
                + "A.CHALAN_DATE,A.INVOICE_NO,A.INVOICE_DATE,A.INVOICE_AMOUNT,"
                + "IF(A.COLUMN_6_AMT<>0,A.COLUMN_6_AMT,B.COLUMN_6_AMT) FRT,"
                + "IF(A.COLUMN_7_AMT<>0,A.COLUMN_7_AMT,B.COLUMN_7_AMT) OCT,"
                + "IF(A.COLUMN_9_AMT<>0,A.COLUMN_9_AMT,B.COLUMN_9_AMT) OTHR,B.INDENT_NO,G.INDENT_DATE,"
                + "B.PO_NO,H.PO_DATE,B.ITEM_ID,B.QTY,B.PO_QTY,B.BAL_QTY,B.CHALAN_QTY,B.REJECTED_QTY,"
                + "B.GRN_RECD_QTY,B.LANDED_RATE,C.DESC TDESC,D.DESC UDESC,E.SUPP_NAME,E.ADD1 SADD1,E.ADD2 SADD2,E.ADD3 SADD3,"
                + "E.CITY SCITY,E.STATE SSTATE,E.PINCODE SPINCODE,F.ITEM_DESCRIPTION,B.ITEM_EXTRA_DESC,F.LOCATION_ID,"
                + "I.COMPANY_NAME,I.ADD1,I.ADD2,I.ADD3,I.CITY,I.STATE,I.PINCODE,I.PHONE,I.FAX,"
                + "I.E_MAIL,J.DEPT_DESC,K.USER_NAME,A.CREATED_DATE,A.SUPP_ID,POLINE.RATE,B.RECEIVED_QTY,"
                + "LOT.ITEM_LOT_NO,LOT.AUTO_LOT_NO "
                + " FROM "
                + " D_INV_MIR_HEADER A "
                + "LEFT JOIN D_COM_PARAMETER_MAST AS C ON (A.COMPANY_ID = C.COMPANY_ID AND C.PARA_ID = \"TRANSPORT\" AND A.TRANSPORTER = C.PARA_CODE) "
                + "LEFT JOIN D_COM_SUPP_MASTER AS E ON (A.COMPANY_ID = E.COMPANY_ID AND A.SUPP_ID = E.SUPPLIER_CODE) "
                + "LEFT JOIN D_COM_DEPT_MASTER AS J ON (A.COMPANY_ID = J.COMPANY_ID AND A.FOR_STORE = J.DEPT_ID) "
                + "LEFT JOIN D_COM_USER_MASTER AS K ON (A.COMPANY_ID = K.COMPANY_ID AND A.CREATED_BY = K.USER_ID),"
                + "D_INV_MIR_DETAIL AS B "
                + "LEFT JOIN D_PUR_PO_HEADER AS H ON (B.COMPANY_ID = H.COMPANY_ID AND B.PO_NO = H.PO_NO) "
                + "LEFT JOIN D_PUR_PO_DETAIL AS POLINE ON (POLINE.COMPANY_ID=B.COMPANY_ID AND B.PO_NO=POLINE.PO_NO AND B.PO_SR_NO=POLINE.SR_NO) "
                + "LEFT JOIN D_INV_INDENT_HEADER AS G ON (B.COMPANY_ID = G.COMPANY_ID  AND B.INDENT_NO = G.INDENT_NO) "
                + "LEFT JOIN D_COM_PARAMETER_MAST AS D ON (B.COMPANY_ID = D.COMPANY_ID AND D.PARA_ID = \"UNIT\" AND B.UNIT = D.PARA_CODE) "
                + "LEFT JOIN D_INV_ITEM_MASTER AS F ON (B.COMPANY_ID = F.COMPANY_ID AND B.ITEM_ID = F.ITEM_ID),"
                + "D_COM_COMPANY_MASTER I,"
                + "D_INV_MIR_LOT LOT "
                + " WHERE "
                + "A.MIR_TYPE = 2 AND "
                + "A.COMPANY_ID = "+EITLERPGLOBAL.gCompanyID+" AND "
                + "A.MIR_NO = '"+txtDocNo.getText()+"' AND "
                + "A.MIR_NO = B.MIR_NO AND "
                + "A.COMPANY_ID = I.COMPANY_ID "
                + "AND B.MIR_NO=LOT.MIR_NO AND B.SR_NO=LOT.MIR_SR_NO AND B.ITEM_ID=LOT.ITEM_ID "
                + "ORDER BY B.SR_NO,LOT.SR_NO ) SUB ";

        System.out.println(strSQL);

        rpt.setReportName("/EITLERP/Reports/jrxml/rpt_INV_MIR_RAW.jrxml", 1, strSQL); //productlist is the name of my jasper file.
        rpt.callReport();

//        try {
//            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptMIRRaw.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtDocNo.getText());
//            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "File error " + e.getMessage());
//        }
    }

    private void DisplayIndicators() {
        CellPainter = new EITLTableCellRenderer();
        CellPainter.removeBackColors();
        CellPainter.removeForeColors();

        TableL.getColumnModel().getColumn(DataModelL.getColFromVariable("ITEM_ID")).setCellRenderer(CellPainter);

        for (int i = 0; i < TableL.getRowCount(); i++) {
            String ItemID = (String) TableL.getValueAt(i, DataModelL.getColFromVariable("ITEM_CODE"));

            if (clsItem.IsItemExcisable(EITLERPGLOBAL.gCompanyID, ItemID)) {
                CellPainter.setBackColor(i, DataModelL.getColFromVariable("ITEM_ID"), Color.YELLOW);
                CellPainter.setForeColor(i, DataModelL.getColFromVariable("ITEM_ID"), Color.BLACK);
            } else {
                CellPainter.setBackColor(i, DataModelL.getColFromVariable("ITEM_ID"), Color.WHITE);
                CellPainter.setForeColor(i, DataModelL.getColFromVariable("ITEM_ID"), Color.BLACK);
            }

        }
    }
    
    private void Mail() {
        System.out.println("MIR Raw Material final approved = " + ObjMIR.getAttribute("APPROVAL_STATUS").getString());
        String pBody = "", pSubject = "", recievers = "", pcc = "";
        //if (leaveapplication.getAttribute("APPROVAL_STATUS").getString().equalsIgnoreCase("A") || leaveapplication.getAttribute("APPROVAL_STATUS").getString().equalsIgnoreCase("F")) {
        //if (leaveapplication.getAttribute("APPROVAL_STATUS").getString().equalsIgnoreCase("F")) {

        pSubject = "Notification : MIR Raw Material Final approved  :" + txtDocNo.getText() + " ";
        pBody="Dear Sir,<br><br>";        

        try {
            
            pBody += ""
                    + "FYI<br><br>";                            
                pBody += "<br>";
                pBody += "<table border=1>";
                pBody += "<tr><td align='center'><b>MIR NO</b></td>"
                        + "<td align='center'><b>MIR DATE</b></td>"
                        + "<td align='center'><b>SUPPLIER CODE</b></td>"
                        + "<td align='center'><b>SUPPLIER NAME</b></td>"
                        + "<td align='center'><b>AMOUNT</b></td>"                        
                        + "</tr>";                
                
                    pBody += "<tr>";
                    pBody += "<td>" + txtDocNo.getText() + "</td>";
                    pBody += "<td>" + txtDocDate.getText() + "</td>";                    
                    pBody += "<td>" + txtSuppCode.getText()+"</td>";
                    pBody += "<td>" + txtSuppName.getText() + "</td>";
                    pBody += "<td>" + txtFinalAmount.getText() + "</td>";                    
                    pBody += "</tr>";
                 
                
                pBody += "</table>";
                pBody += "<br>Remark : Document Final Approved";
                pBody += "<br>";
            

            pBody += "<br><br>";

            //recievers = "ashutosh@dineshmills.com";
            recievers = "yrpatel@dineshmills.com,amitkanti@dineshmills.com";
            pcc = "aditya@dineshmills.com,abtewary@dineshmills.com";
            //String to=clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, data.getIntValueFromDB("SELECT USER_ID FROM SDMLATTPAY.D_COM_DOC_DATA WHERE MODULE_ID=811 AND TYPE='C' AND DOC_NO='"+lbldoc.getText()+"'"));
            
            //if (!to.equals("")) {
            //        recievers = recievers + "," + to;
            //    }
            
            pBody += "<br><br>**** This is an auto-generated email, please do not reply ****<br><br>";

            //String responce = MailNotification.sendNotificationMail(811, pSubject, pBody, recievers, pcc, EITLERPGLOBAL.getComboCode(cmbHierarchy));
            //String responce = MailNotification.sendNotificationMail(6, pSubject, pBody, recievers, pcc, 0);
            //System.out.println("Send Mail Responce : " + responce);
            EITLERP.FeltSales.common.JavaMail.SendMail(recievers, pBody, pSubject, pcc);            
              
        } catch (Exception e) {
            e.printStackTrace();
        }
        //}
    }
    
    
    
}
