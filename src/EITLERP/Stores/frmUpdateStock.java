/*
 * frmRptStockStatement.java
 *
 * Created on August 13, 2005, 3:21 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */
import EITLERP.*;
import java.sql.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import EITLERP.Utils.*;


public class frmUpdateStock extends javax.swing.JApplet {
    
    
    
    /** Initializes the applet frmRptStockStatement */
    public void init() {
        setSize(430, 330);
        initComponents();
        Bar.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        Bar = new javax.swing.JProgressBar();
        lblItem = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        
        getContentPane().setLayout(null);
        
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        
        jPanel1.setLayout(null);
        
        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("UPDATE THE STOCK");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(8, 8, 187, 15);
        
        getContentPane().add(jPanel1);
        jPanel1.setBounds(1, 0, 447, 30);
        
        cmdPrint.setText("Start Processing");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdPrint);
        cmdPrint.setBounds(14, 146, 168, 25);
        
        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdExit);
        cmdExit.setBounds(196, 146, 141, 25);
        
        getContentPane().add(Bar);
        Bar.setBounds(13, 106, 323, 18);
        
        lblItem.setText(".");
        getContentPane().add(lblItem);
        lblItem.setBounds(15, 89, 160, 15);
        
        jLabel2.setText("Updates current item stock");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(7, 42, 328, 15);
        
    }//GEN-END:initComponents
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        GenerateReport();
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblItem;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateReport() {
        
        new Thread() {
            
            public void run() {
                
                ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsItemStock;
                Connection tmpConn;
                Statement stItemStock;
                String strSQL="";
                String strCondition="";
                
                //======== Some Report writing Fields ==========//
                String strLine="";
                String ItemID="";
                String ItemName="";
                String UnitName="";
                double OpeningQty=0;
                double OpeningRate=0;
                double OpeningValue=0;
                double InwardQty=0;
                double InwardRate=0;
                double InwardValue=0;
                double OutwardQty=0;
                double OutwardRate=0;
                double OutwardValue=0;
                double ClosingQty=0;
                double ClosingRate=0;
                double ClosingValue=0;
                double IssueQty=0;
                double IssueValue=0;
                double IssueRate=0;
                double DiffQty=0;
                boolean Done=false;
                
                String strOpeningQty="";
                String strOpeningRate="";
                String strOpeningValue="";
                String strRcptQty="";
                String strRcptRate="";
                String strRcptValue="";
                String strIssueQty="";
                String strIssueRate="";
                String strIssueValue="";
                String strClosingQty="";
                String strClosingRate="";
                String strClosingValue="";
                String strDocNo="";
                String strDocDate="";
                
                String WarehouseID="";
                String LocationID="";
                String BOENo="";
                String LotNo="";
                
                int Max=0;
                int Min=0;
                int Row=0;
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                try {
                    
                    Bar.setVisible(true);
                    Bar.setValue(0);
                    
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER ORDER BY ENTRY_DATE DESC");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    tmpConn=data.getConn();
                    stItemStock=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsItemStock=stItemStock.executeQuery("SELECT * FROM D_INV_ITEM_LOT_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ITEM_ID='1'");
                    
                    
                    lblItem.setText("Deciding the no. of items");
                    lblItem.repaint();
                    
                    //========= Get the count ============//
                    strSQL="SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 ";
                    rsItem=data.getResult(strSQL);
                    
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        Max=rsItem.getInt("THECOUNT");
                    }
                    
                    Bar.setMaximum(Max);
                    Bar.setMinimum(Min);
                    Bar.setValue(0);
                    Bar.repaint();
                    
                    lblItem.setText("Starting Process");
                    lblItem.repaint();
                    
                    //========= Create a text file ==============//
                    strSQL="SELECT ITEM_ID,ITEM_DESCRIPTION,UNIT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 ";
                    rsItem=data.getResult(strSQL);
                    
                    if(rsItem.getRow()<=0) {
                        JOptionPane.showMessageDialog(null,"No items found in item master");
                        return;
                    }
                    
                    //Loop through each item
                    while(!rsItem.isAfterLast()) {
                        Bar.setValue(rsItem.getRow());
                        Bar.repaint();
                        
                        //Fill Up the variables first
                        ItemID=rsItem.getString("ITEM_ID").trim()+EITLERPGLOBAL.Replicate(" ", 12-rsItem.getString("ITEM_ID").trim().length());
                        ItemName=rsItem.getString("ITEM_DESCRIPTION");
                        
                        lblItem.setText("Processing Item : "+ItemID);
                        lblItem.repaint();
                        
                        ItemName=ItemName.substring(0,20);
                        
                        UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",rsItem.getInt("UNIT"));
                        
                        OpeningQty=0;
                        OpeningRate=0;
                        OpeningValue=0;

                        
                        // *****  OPENING STOCK UPDATION ******* //
                        strSQL="SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ITEM_ID='"+ItemID+"' AND ENTRY_NO="+StockEntryNo;
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningQty=rsTmp.getDouble("OPENING_QTY");
                            WarehouseID=rsTmp.getString("WAREHOUSE_ID");
                            LocationID=rsTmp.getString("LOCATION_ID");
                            BOENo=rsTmp.getString("BOE_NO");
                            LotNo=rsTmp.getString("LOT_NO");
                            
                            //Insert a initial record
                            rsItemStock.moveToInsertRow();
                            rsItemStock.updateInt("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                            rsItemStock.updateString("ITEM_ID",ItemID);
                            rsItemStock.updateString("LOT_NO",LotNo);
                            rsItemStock.updateString("BOE_NO",BOENo);
                            rsItemStock.updateString("BOE_SR_NO"," ");
                            rsItemStock.updateString("WAREHOUSE_ID",WarehouseID);
                            rsItemStock.updateString("LOCATION_ID",LocationID);
                            rsItemStock.updateBoolean("CHANGED",true);
                            rsItemStock.updateString("CHANGED_DATE",EITLERPGLOBAL.getCurrentDate());
                            rsItemStock.updateString("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            rsItemStock.updateInt("MODIFIED_BY",EITLERPGLOBAL.gUserID);
                            rsItemStock.updateString("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            rsItemStock.updateInt("CREATED_BY",EITLERPGLOBAL.gUserID);
                            rsItemStock.updateDouble("ALLOCATED_QTY",0);
                            rsItemStock.updateDouble("AVAILABLE_QTY",OpeningQty);
                            rsItemStock.updateDouble("ON_HAND_QTY",OpeningQty);
                            rsItemStock.updateDouble("REJECTED_QTY",0);
                            rsItemStock.updateDouble("ZERO_VAL_QTY",0);
                            rsItemStock.updateDouble("ZERO_ISSUED_QTY",0);
                            rsItemStock.updateDouble("ZERO_RECEIPT_QTY",0);
                            rsItemStock.updateDouble("ZERO_OPENING_QTY",0);
                            rsItemStock.updateString("LAST_ISSUED_DATE","0000-00-00");
                            rsItemStock.updateString("LAST_RECEIPT_DATE","0000-00-00");
                            rsItemStock.updateDouble("TOTAL_ISSUED_QTY",0);
                            rsItemStock.updateDouble("TOTAL_RECEIPT_QTY",0);
                            rsItemStock.updateDouble("OPENING_RATE",0);
                            rsItemStock.updateDouble("OPENING_QTY",0);
                            rsItemStock.insertRow();
                        }
                        
                        // *******  END OF OPENING STOCK ******** //
                        

                        
                        // *****  RECEIPTS ******* //
                        strSQL="SELECT B.* FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND A.GRN_DATE>='"+StockEntryDate+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningQty=rsTmp.getDouble("QTY");
                            WarehouseID=rsTmp.getString("WAREHOUSE_ID");
                            LocationID=rsTmp.getString("LOCATION_ID");
                            BOENo=rsTmp.getString("BOE_NO");
                            LotNo=rsTmp.getString("LOT_NO");
                            
                            //Insert a initial record
                            rsItemStock.moveToInsertRow();
                            rsItemStock.updateInt("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                            rsItemStock.updateString("ITEM_ID",ItemID);
                            rsItemStock.updateString("LOT_NO",LotNo);
                            rsItemStock.updateString("BOE_NO",BOENo);
                            rsItemStock.updateString("BOE_SR_NO"," ");
                            rsItemStock.updateString("WAREHOUSE_ID",WarehouseID);
                            rsItemStock.updateString("LOCATION_ID",LocationID);
                            rsItemStock.updateBoolean("CHANGED",true);
                            rsItemStock.updateString("CHANGED_DATE",EITLERPGLOBAL.getCurrentDate());
                            rsItemStock.updateString("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            rsItemStock.updateInt("MODIFIED_BY",EITLERPGLOBAL.gUserID);
                            rsItemStock.updateString("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                            rsItemStock.updateInt("CREATED_BY",EITLERPGLOBAL.gUserID);
                            rsItemStock.updateDouble("ALLOCATED_QTY",0);
                            rsItemStock.updateDouble("AVAILABLE_QTY",OpeningQty);
                            rsItemStock.updateDouble("ON_HAND_QTY",OpeningQty);
                            rsItemStock.updateDouble("REJECTED_QTY",0);
                            rsItemStock.updateDouble("ZERO_VAL_QTY",0);
                            rsItemStock.updateDouble("ZERO_ISSUED_QTY",0);
                            rsItemStock.updateDouble("ZERO_RECEIPT_QTY",0);
                            rsItemStock.updateDouble("ZERO_OPENING_QTY",0);
                            rsItemStock.updateString("LAST_ISSUED_DATE","0000-00-00");
                            rsItemStock.updateString("LAST_RECEIPT_DATE","0000-00-00");
                            rsItemStock.updateDouble("TOTAL_ISSUED_QTY",0);
                            rsItemStock.updateDouble("TOTAL_RECEIPT_QTY",0);
                            rsItemStock.updateDouble("OPENING_RATE",0);
                            rsItemStock.updateDouble("OPENING_QTY",0);
                            rsItemStock.insertRow();
                        }
                        
                        // *******  END OF RECEIPTS ******** //
                        
                        
                        
                        
                        rsItem.next();
                    }
                    
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                }
                catch(Exception e) {
                    
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    Bar.setVisible(false);
                }
                
            };
        }.start();
    }
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
}
