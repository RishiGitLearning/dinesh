/*
 * frmRptGroupwiseStock.java
 *
 * Created on January 12, 2006, 12:24 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */
import EITLERP.*;
import java.sql.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import EITLERP.Utils.*;
import java.net.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.Finance.UtilFunctions;
import TReportWriter.*;

public class frmRptGroupwiseStockOLD extends javax.swing.JApplet {
    
    private EITLComboModel cmbItemTypeModel=new EITLComboModel();
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();

    
    /** Initializes the applet frmRptGroupwiseStock */
    public void init() {
        setSize(487,286);
        initComponents();
        GenerateCombo();
        chkReprocess.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ReportOptions = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        chkReprocess = new javax.swing.JCheckBox();
        lblItem = new javax.swing.JLabel();
        Bar = new javax.swing.JProgressBar();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        opgBrief = new javax.swing.JRadioButton();
        opgReceipts = new javax.swing.JRadioButton();
        opgIssues = new javax.swing.JRadioButton();
        opgDetailed = new javax.swing.JRadioButton();
        opgItemwise = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cmbItemType = new javax.swing.JComboBox();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel5.setText("To");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(202, 77, 20, 15);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(225, 75, 112, 20);

        chkReprocess.setText("Re Process Stock Valuation");
        getContentPane().add(chkReprocess);
        chkReprocess.setBounds(10, 99, 205, 23);

        lblItem.setText(".");
        getContentPane().add(lblItem);
        lblItem.setBounds(12, 208, 347, 15);

        getContentPane().add(Bar);
        Bar.setBounds(12, 225, 200, 18);

        cmdPrint.setText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPrint);
        cmdPrint.setBounds(359, 39, 119, 29);

        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        getContentPane().add(cmdExit);
        cmdExit.setBounds(360, 71, 116, 25);

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("GROUPWISE STOCK VALUATION REPORT");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(8, 8, 269, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(1, 0, 581, 30);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        opgBrief.setText("Brief Report");
        ReportOptions.add(opgBrief);
        jPanel2.add(opgBrief);
        opgBrief.setBounds(6, 6, 160, 23);

        opgReceipts.setText("Groupwise Receipts");
        ReportOptions.add(opgReceipts);
        jPanel2.add(opgReceipts);
        opgReceipts.setBounds(174, 7, 160, 23);

        opgIssues.setText("Groupwise Issues");
        ReportOptions.add(opgIssues);
        jPanel2.add(opgIssues);
        opgIssues.setBounds(174, 30, 160, 23);

        opgDetailed.setText("Detailed Report");
        ReportOptions.add(opgDetailed);
        jPanel2.add(opgDetailed);
        opgDetailed.setBounds(6, 29, 160, 23);

        opgItemwise.setText("Itemwise Report");
        ReportOptions.add(opgItemwise);
        jPanel2.add(opgItemwise);
        opgItemwise.setBounds(6, 52, 160, 23);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(9, 125, 340, 80);

        jLabel6.setText("From Date");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(13, 77, 70, 15);

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(84, 74, 112, 20);

        jLabel10.setText("Item Type");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(12, 45, 80, 15);

        cmbItemType.setAutoscrolls(true);
        getContentPane().add(cmbItemType);
        cmbItemType.setBounds(85, 42, 190, 24);

    }//GEN-END:initComponents
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        
        int ItemType=EITLERPGLOBAL.getComboCode(cmbItemType);
        
        if(ItemType==1) {
            GenerateReportWAvgNew();
        }
        
        if(ItemType==2) {
            if(opgItemwise.isSelected()) {
                GenerateReportWAvgRMItems();
            }
            else {
                GenerateReportWAvgRM();
            }
        }
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.ButtonGroup ReportOptions;
    private javax.swing.JCheckBox chkReprocess;
    private javax.swing.JComboBox cmbItemType;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblItem;
    private javax.swing.JRadioButton opgBrief;
    private javax.swing.JRadioButton opgDetailed;
    private javax.swing.JRadioButton opgIssues;
    private javax.swing.JRadioButton opgItemwise;
    private javax.swing.JRadioButton opgReceipts;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateReport() {
        
        new Thread() {
            
            public void run() {
                ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsSource,rsCategory;
                
                String strSQL="";
                String strCondition="";
                Connection tmpConn;
                tmpConn=data.getConn();
                
                
                //======== Some Report writing Fields ==========//
                double OpeningQty=0;
                double OpeningRate=0;
                double OpeningValue=0;
                double InwardQty=0;
                double InwardRate=0;
                double InwardValue=0;
                double OutwardQty=0;
                double OutwardRate=0;
                double OutwardValue=0;
                double ClosingQty=0;
                double ClosingRate=0;
                double ClosingValue=0;
                double IssueQty=0;
                double IssueValue=0;
                double IssueRate=0;
                double DiffQty=0;
                
                String ItemID="";
                
                boolean Done=false;
                
                int Max=0;
                int Min=0;
                int Row=0;
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                try {
                    
                    
                    if((!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid date");
                        return;
                    }
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_DATE<='"+EITLERPGLOBAL.FinFromDateDB+"'");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    
                    if(chkReprocess.isSelected()) {
                        
                        //Prepare our temp table for temporary query //
                        data.Execute("DELETE FROM STOCK_LEDGER_TEMP");
                        
                        
                        strCondition="INSERT INTO STOCK_LEDGER_TEMP (ITEM_ID) ";
                        strCondition=strCondition+" SELECT DISTINCT(ITEM_ID) FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND GRN_DATE>='"+StockEntryDate+"' AND GRN_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'";
                        strCondition=strCondition+" UNION ";
                        strCondition=strCondition+" SELECT DISTINCT(ITEM_CODE) FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO AND A.ISSUE_DATE>='"+StockEntryDate+"' AND ISSUE_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'";
                        
                        
                        data.Execute(strCondition);
                        
                        //strCondition=" AND A.ITEM_ID IN (SELECT ITEM_ID FROM STOCK_LEDGER_TEMP) ";
                        //strCondition=" AND A.ITEM_ID IN (SELECT ITEM_ID FROM D_INV_ITEM_MASTER_TMP) ";
                        
                        strCondition="";
                        
                        Bar.setVisible(true);
                        Bar.setValue(0);
                        
                        
                        
                        
                        lblItem.setText("Deciding the no. of items");
                        lblItem.repaint();
                        
                        //========= Get the count ============//
                        strSQL="SELECT COUNT(A.ITEM_ID) AS THECOUNT FROM D_INV_ITEM_MASTER A,STOCK_LEDGER_TEMP B WHERE A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND A.MAINTAIN_STOCK=1 AND A.APPROVED=1 AND A.CANCELLED=0 AND A.ITEM_ID=B.ITEM_ID "+strCondition;
                        //strSQL="SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                        rsItem=data.getResult(strSQL);
                        
                        rsItem.first();
                        
                        if(rsItem.getRow()>0) {
                            Max=rsItem.getInt("THECOUNT");
                        }
                        
                        //===================================================================//
                        //====================== PROCESS FIFO ===============================//
                        //==================================================================//
                        
                        Bar.setMaximum(Max);
                        Bar.setMinimum(Min);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        
                        lblItem.setText("Starting Process");
                        lblItem.repaint();
                        
                        //========= Create a text file ==============//
                        strSQL="SELECT DISTINCT(A.ITEM_ID),A.ITEM_DESCRIPTION,A.UNIT FROM D_INV_ITEM_MASTER A,STOCK_LEDGER_TEMP B WHERE A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND A.MAINTAIN_STOCK=1 AND A.APPROVED=1 AND A.CANCELLED=0  AND A.ITEM_ID=B.ITEM_ID "+strCondition;
                        //strSQL="SELECT ITEM_ID,ITEM_DESCRIPTION,UNIT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                        rsItem=data.getResult(strSQL);
                        rsItem.first();
                        
                        if(rsItem.getRow()<=0) {
                            JOptionPane.showMessageDialog(null,"No transactions found in given period");
                            lblItem.setVisible(false);
                            Bar.setVisible(false);
                            return;
                        }
                        
                        //Loop through each item
                        while((!rsItem.isAfterLast())&&rsItem.getRow()>0) {
                            
                            Bar.setValue(rsItem.getRow());
                            Bar.repaint();
                            
                            
                            //Fill Up the variables first
                            ItemID=rsItem.getString("ITEM_ID").trim()+EITLERPGLOBAL.Replicate(" ", 12-rsItem.getString("ITEM_ID").trim().length());
                            
                            
                            lblItem.setText("Processing Item : "+ItemID);
                            lblItem.repaint();
                            
                            
                            OpeningQty=0;
                            OpeningRate=0;
                            OpeningValue=0;
                            
                            //First Find the latest cut-off closing stock.
                            strSQL="SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ITEM_ID='"+ItemID+"' AND ENTRY_NO="+StockEntryNo;
                            rsTmp=data.getResult(strSQL);
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                OpeningQty=EITLERPGLOBAL.round(rsTmp.getDouble("OPENING_QTY"),2);
                                OpeningRate=EITLERPGLOBAL.round(rsTmp.getDouble("OPENING_RATE"),2);
                                OpeningValue=EITLERPGLOBAL.round(rsTmp.getDouble("OPENING_VALUE"),2);
                                
                                if(OpeningQty==0) {
                                    OpeningRate=0;
                                }
                                else {
                                    OpeningRate=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                                }
                            }
                            
                            data.Execute("UPDATE D_INV_GRN_DETAIL SET TMP_ISSUED_QTY=0 WHERE GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND GRN_DATE>='"+StockEntryDate+"' AND GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"') AND ITEM_ID='"+ItemID+"'");
                            
                            //Take the record between Cut-off stock date and till from date specified here.
                            strSQL="SELECT A.ISSUE_NO,B.SR_NO,A.ISSUE_DATE,B.ITEM_CODE,ITEM_EXTRA_DESC,WAREHOUSE_ID,LOCATION_ID,BOE_NO,QTY FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.ISSUE_NO=B.ISSUE_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.ISSUE_DATE>'"+StockEntryDate+"' AND A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ITEM_CODE='"+ItemID+"' ORDER BY ISSUE_DATE";
                            
                            rsIssue=data.getResult(strSQL);
                            rsIssue.first();
                            
                            while((!rsIssue.isAfterLast())&&rsIssue.getRow()>0) {
                                String IssueDate=rsIssue.getString("ISSUE_DATE");
                                IssueQty=rsIssue.getDouble("QTY");
                                String IssueNo=rsIssue.getString("ISSUE_NO");
                                int IssueSrNo=rsIssue.getInt("SR_NO");
                                
                                lblItem.setText("Issue "+IssueNo);
                                lblItem.repaint();
                                
                                if(IssueQty<=OpeningQty) {
                                    OpeningQty=OpeningQty-IssueQty;
                                    IssueValue=EITLERPGLOBAL.round(OpeningRate*IssueQty,2);
                                    
                                    //Update the rate in Issue.
                                    data.Execute("UPDATE D_INV_ISSUE_DETAIL SET RATE="+OpeningRate+", ISSUE_VALUE="+IssueValue+" WHERE ISSUE_NO='"+IssueNo+"' AND SR_NO="+IssueSrNo);
                                    
                                    //No GRN Updation required now.
                                }
                                else {
                                    //Initialize the Issue Value
                                    IssueValue=0;
                                    IssueRate=0;
                                    
                                    //Get the Difference
                                    DiffQty=OpeningQty;
                                    
                                    
                                    IssueValue=EITLERPGLOBAL.round(DiffQty*OpeningRate,2);
                                    
                                    //Decrease the IssueQty
                                    IssueQty=IssueQty-OpeningQty;
                                    
                                    OpeningQty=0;
                                    
                                    //Now for rest of the Qty. we have to search the GRN in FIFO order.
                                    strSQL="SELECT A.GRN_NO,B.SR_NO,A.GRN_DATE,B.LANDED_RATE,B.QTY,B.TMP_ISSUED_QTY FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.TMP_ISSUED_QTY<B.QTY AND ITEM_ID='"+ItemID+"' AND A.GRN_DATE>='"+StockEntryDate+"' AND A.GRN_DATE<='"+IssueDate+"' ORDER BY A.GRN_DATE";
                                    rsRcpt=data.getResult(strSQL);
                                    rsRcpt.first();
                                    
                                    if(rsRcpt.getRow()>0) {
                                        Done=false;
                                        while((!Done)&&(!rsRcpt.isAfterLast())) {
                                            String GRNNo=rsRcpt.getString("GRN_NO");
                                            int GRNSrNo=rsRcpt.getInt("SR_NO");
                                            double Qty=rsRcpt.getDouble("QTY")-rsRcpt.getDouble("TMP_ISSUED_QTY");
                                            double Rate=rsRcpt.getDouble("LANDED_RATE");
                                            
                                            
                                            lblItem.setText("GRN "+GRNNo);
                                            lblItem.repaint();
                                            
                                            if(IssueQty<Qty) //Is GRN Qty sufficient to fulfill the issue ?
                                            {
                                                //DiffQty=Qty-IssueQty;
                                                DiffQty=IssueQty;
                                                
                                                IssueValue=EITLERPGLOBAL.round(IssueValue+(IssueQty*Rate),2);
                                                
                                                IssueQty=0;
                                                
                                                //We have to update the GRN.
                                                data.Execute("UPDATE D_INV_GRN_DETAIL SET TMP_ISSUED_QTY=TMP_ISSUED_QTY+"+DiffQty+" WHERE GRN_NO='"+GRNNo+"' AND SR_NO="+GRNSrNo);
                                            }
                                            else //GRN Qty. is not sufficient
                                            {
                                                DiffQty=IssueQty-Qty;
                                                
                                                IssueValue=EITLERPGLOBAL.round(IssueValue+(Qty*Rate),2);
                                                
                                                IssueQty=IssueQty-Qty;
                                                
                                                //Update the GRN with full qty.
                                                data.Execute("UPDATE D_INV_GRN_DETAIL SET TMP_ISSUED_QTY="+rsRcpt.getDouble("QTY")+" WHERE GRN_NO='"+GRNNo+"' AND SR_NO="+GRNSrNo);
                                            }
                                            
                                            if(rsRcpt.isAfterLast()||IssueQty==0) {
                                                Done=true;
                                            }
                                            
                                            if(!rsRcpt.isAfterLast()) {
                                                rsRcpt.next();
                                            }
                                        }
                                    }
                                    
                                    
                                    //Now check that Full Issue Qty has been used
                                    if(IssueQty>0) {
                                        //Not enough receipts found for this much issue qty.
                                        
                                        //In this case Take the Avg. Rate
                                        if((rsIssue.getDouble("QTY")-IssueQty)==0) {
                                            IssueRate=0;
                                        }
                                        else {
                                            IssueRate=EITLERPGLOBAL.round(IssueValue/(rsIssue.getDouble("QTY")-IssueQty),2);
                                        }
                                        
                                        
                                        IssueValue=EITLERPGLOBAL.round(rsIssue.getDouble("QTY")*IssueRate,2);
                                        
                                    }
                                    else {
                                        
                                        //Otherwise devide the value
                                        IssueRate=EITLERPGLOBAL.round(IssueValue/rsIssue.getDouble("QTY"),2);
                                    }
                                    
                                    //Update the Issue itself
                                    data.Execute("UPDATE D_INV_ISSUE_DETAIL SET RATE="+IssueRate+", ISSUE_VALUE="+IssueValue+" WHERE ISSUE_NO='"+IssueNo+"' AND SR_NO="+IssueSrNo);
                                }
                                
                                rsIssue.next();
                            }
                            
                            rsItem.next();
                        }
                        //===========================END FIFO PROCESS ================================//
                        
                    }
                    
                    
                    //============ Processing Categorywise Valuation =============//
                    double TotalOpening=0;
                    double TotalReceipt=0;
                    double TotalIssue=0;
                    double TotalValue=0;
                    
                    
                    rsCategory=data.getResult("SELECT * FROM D_COM_ITEM_CATEGORY ORDER BY SR_NO");
                    rsCategory.first();
                    
                    if(rsCategory.getRow()>0) {
                        while(!rsCategory.isAfterLast()) {
                            
                            String CategoryID=rsCategory.getString("CATEGORY_ID");
                            int SrNo=rsCategory.getInt("SR_NO");
                            
                            strSQL="SELECT SUM(OPENING_VALUE) TOTAL_VALUE FROM D_COM_OPENING_STOCK_DETAIL WHERE SUBSTRING(ITEM_ID,1,"+CategoryID.trim().length()+")='"+CategoryID+"' AND ENTRY_NO="+StockEntryNo;
                            System.out.println(strSQL);
                            rsTmp=data.getResult(strSQL);
                            
                            if(rsTmp.getRow()>0) {
                                TotalOpening=rsTmp.getDouble("TOTAL_VALUE");
                            }
                            
                            
                            strSQL="SELECT ROUND(SUM( IF(LANDED_RATE IS NULL,0,LANDED_RATE)* IF(QTY IS NULL,0,QTY) ),3) AS TOTAL_VALUE FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND A.GRN_DATE>='"+StockEntryDate+"' AND A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(ITEM_ID,1,"+CategoryID.trim().length()+")='"+CategoryID.trim()+"'";
                            System.out.println(strSQL);
                            rsTmp=data.getResult(strSQL);
                            
                            if(rsTmp.getRow()>0) {
                                TotalReceipt=rsTmp.getDouble("TOTAL_VALUE");
                            }
                            
                            strSQL="SELECT  ROUND(SUM( IF(RATE IS NULL,0,RATE)* IF(QTY IS NULL,0,QTY) ) ,3)  AS TOTAL_VALUE FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.ISSUE_DATE>='"+StockEntryDate+"' AND A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(ITEM_CODE,1,"+CategoryID.trim().length()+")='"+CategoryID.trim()+"'";
                            System.out.println(strSQL);
                            rsTmp=data.getResult(strSQL);
                            
                            if(rsTmp.getRow()>0) {
                                TotalIssue=rsTmp.getDouble("TOTAL_VALUE");
                            }
                            
                            TotalValue=(TotalOpening+TotalReceipt)-TotalIssue;
                            
                            data.Execute("UPDATE D_COM_ITEM_CATEGORY SET VALUATION_DATE='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"',VALUE="+TotalValue+" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND SR_NO="+SrNo);
                            
                            
                            rsCategory.next();
                        }
                    }
                    //==============================================================//
                    
                    
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    
                    try {
                        URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                        EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                    }
                    catch(Exception e) {
                    }
                    
                    
                }
                catch(Exception e) {
                    
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    Bar.setVisible(false);
                    lblItem.setVisible(false);
                    
                }
                
            };
        }.start();
    }
    
    private void GenerateReportWAvgNew() {
        
        new Thread() {
            
            public void run() {
                ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsSource,rsCategory,rsMainCategory;
                
                String strSQL="";
                String strCondition="";
                Connection tmpConn;
                tmpConn=data.getConn();
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                clsItemStock objItemStock=new clsItemStock();
                
                try {
                    
                    if((!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid date");
                        return;
                    }
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ORDER BY ENTRY_DATE DESC");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    
                    if(chkReprocess.isSelected()) {
                        objItemStock.ProcessLedger(StockEntryDate, EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                        
                        while(!objItemStock.ProcessDone) {
                            //Wait ....
                        }
                    }
                    
                    
                    //============ Processing Categorywise Valuation =============//
                    double TotalOpening=0;
                    double TotalReceipt=0;
                    double TotalIssue=0;
                    double TotalValue=0;
                    double writeoffTotal=0;
                    double finalTotal=0;
                    
                    String Exception1="";
                    String Exception2="";
                    String MainCategory="";
                    
                    int ItemType=EITLERPGLOBAL.getComboCode(cmbItemType);
                    
                    if(ItemType==1) {
                        strCondition=" AND MAIN_CATEGORY_ID<3 ";
                    }
                    else {
                        strCondition=" AND MAIN_CATEGORY_ID=3 ";
                    }
                    
                    rsCategory=data.getResult("SELECT * FROM D_COM_ITEM_CATEGORY WHERE IS_SUB_CATEGORY=0 "+strCondition+" ORDER BY SR_NO");
                    rsCategory.first();
                    
                    if(rsCategory.getRow()>0) {
                        while(!rsCategory.isAfterLast()) {
                            
                            TotalOpening=0;
                            TotalReceipt=0;
                            TotalIssue=0;
                            writeoffTotal=0;
                            finalTotal=0;
                            
                            String CategoryID=rsCategory.getString("CATEGORY_ID");
                            String groupID=rsCategory.getString("CATEGORY_ID");
                            
                            lblItem.setText("Processing Category "+CategoryID);
                            
                            //Opening Value
                            strSQL="SELECT ROUND(SUM(A.OPENING_VALUE),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_COM_OPENING_STOCK_DETAIL A, ";
                            strSQL+="D_INV_ITEM_MASTER B ";
                            strSQL+="WHERE ";
                            strSQL+="A.ITEM_ID=B.ITEM_ID AND ";
                            strSQL+="B.APPROVED=1 AND B.CANCELLED=0 ";
                            strSQL+="AND ENTRY_NO="+StockEntryNo+" AND A.ITEM_ID LIKE '"+CategoryID+"%' ";
                            strSQL+="AND A.OPENING_QTY > 0 ";
                            
                            
                            TotalOpening=data.getDoubleValueFromDB(strSQL);
                            
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID LIKE '"+CategoryID+"%' AND (B.LANDED_RATE*B.QTY) > 0 ";
                            
                            TotalOpening+=data.getDoubleValueFromDB(strSQL);
                            
                            
                            //Get Issues
                            strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_ISSUE_HEADER A, ";
                            strSQL+="D_INV_ISSUE_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                            strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                            strSQL+="A.ISSUE_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="B.ITEM_CODE LIKE '"+CategoryID+"%' ";
                            
                            
                            TotalOpening=TotalOpening-(data.getDoubleValueFromDB(strSQL));
                            

                            //Get STM Issues
                            strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.STM_NO=B.STM_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.STM_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID LIKE '"+CategoryID+"%' ";
                            
                            TotalOpening=TotalOpening-(data.getDoubleValueFromDB(strSQL));
                            
                            
                            
                            
                            //Now get Actual Receipts
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                            strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID LIKE '"+CategoryID+"%' AND (B.LANDED_RATE*B.QTY) > 0 ";
                            
                            TotalReceipt=data.getDoubleValueFromDB(strSQL);
                            
                            
                            //Get Issues
                            strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_ISSUE_HEADER A, ";
                            strSQL+="D_INV_ISSUE_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                            strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                            strSQL+="A.ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_CODE LIKE '"+CategoryID+"%' ";
                            
                            TotalIssue=data.getDoubleValueFromDB(strSQL);
                            

                            //Get STM Issues
                            strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),3) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.STM_NO=B.STM_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID LIKE '"+CategoryID+"%' ";
                            
                            TotalIssue=TotalIssue+data.getDoubleValueFromDB(strSQL);
                            
                            
                            finalTotal=TotalOpening+TotalReceipt-TotalIssue;
                            System.out.println("CategoryID = " + CategoryID + " finalTotal = " + finalTotal);
                            
                            data.Execute("UPDATE D_COM_ITEM_CATEGORY SET VALUE="+finalTotal+",OPENING_VALUE="+TotalOpening+",RECEIPT_VALUE="+TotalReceipt+",ISSUE_VALUE="+TotalIssue+" WHERE CATEGORY_ID='"+CategoryID+"' ");
                            
                            rsCategory.next();
                        }
                    }
                    //==============================================================//
                    
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    
                    if(opgBrief.isSelected()) {
                        try {
                            
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStockRM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                        
                    }
                    
                    
                    if(opgDetailed.isSelected()) {
                        try {
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock2.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock2.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock2RM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                    }
                    
                    
                    if(opgReceipts.isSelected()) {
                        try {
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseReceipts.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseReceipts.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseReceiptsRM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                        
                    }
                    
                    
                    if(opgIssues.isSelected()) {
                        try {
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseIssues.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()) );
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseIssues.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()) );
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseIssuesRM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()) );
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                        
                    }
                    
                }
                catch(Exception e) {
                    e.printStackTrace();
                    Bar.setVisible(false);
                    lblItem.setVisible(false);
                }
                
            };
        }.start();
    }
    
    private void GenerateCombo() {
        try {
            
            cmbItemTypeModel=new EITLComboModel();
            cmbItemType.removeAll();
            cmbItemType.setModel(cmbItemTypeModel);
            
            ComboData objData=new ComboData();
            objData.Code=1;
            objData.Text="General";
            
            cmbItemTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Raw Material";
            
            cmbItemTypeModel.addElement(objData);
            
        }
        catch(Exception e) {
            
        }
    }
    
    private void GenerateReportWAvgRM() {
        
        new Thread() {
            
            public void run() {
                ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsSource,rsCategory,rsMainCategory;
                
                String strSQL="";
                String strCondition="";
                Connection tmpConn;
                tmpConn=data.getConn();
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                clsItemStock objItemStock=new clsItemStock();
                
                try {
                    
                    if((!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid date");
                        return;
                    }
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ORDER BY ENTRY_DATE DESC");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    
                    if(chkReprocess.isSelected()) {
                        objItemStock.ProcessLedger(StockEntryDate, EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                        
                        while(!objItemStock.ProcessDone) {
                            //Wait ....
                        }
                    }
                    
                    
                    //============ Processing Categorywise Valuation =============//
                    double TotalOpening=0;
                    double TotalReceipt=0;
                    double TotalIssue=0;
                    double TotalValue=0;
                    double writeoffTotal=0;
                    double finalTotal=0;
                    
                    String Exception1="";
                    String Exception2="";
                    String MainCategory="";
                    
                    int ItemType=EITLERPGLOBAL.getComboCode(cmbItemType);
                    
                    rsCategory=data.getResult("SELECT * FROM D_INV_ITEM_CATEGORY WHERE CATEGORY_TYPE="+ItemType+" ORDER BY CATEGORY_ID");
                    rsCategory.first();
                    
                    if(rsCategory.getRow()>0) {
                        while(!rsCategory.isAfterLast()) {
                            
                            TotalOpening=0;
                            TotalReceipt=0;
                            TotalIssue=0;
                            writeoffTotal=0;
                            finalTotal=0;
                            
                            String CategoryID=rsCategory.getString("CATEGORY_ID");
                            String groupID=rsCategory.getString("CATEGORY_ID");
                            
                            lblItem.setText("Processing Category "+CategoryID);
                            
                            //Opening Value
                            strSQL="SELECT ROUND(SUM(A.OPENING_VALUE),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_COM_OPENING_STOCK_DETAIL A, ";
                            strSQL+="D_INV_ITEM_MASTER B ";
                            strSQL+="WHERE ";
                            strSQL+="A.ITEM_ID=B.ITEM_ID AND ";
                            strSQL+="B.APPROVED=1 AND B.CANCELLED=0 ";
                            strSQL+="AND ENTRY_NO="+StockEntryNo+" AND B.CATEGORY_ID = "+CategoryID+" ";
                            
                            
                            TotalOpening=data.getDoubleValueFromDB(strSQL);
                            
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="I.CATEGORY_ID = "+CategoryID+" ";
                            
                            
                            TotalOpening+=data.getDoubleValueFromDB(strSQL);
                            
                            
                            //Get Issues
                            strSQL="SELECT ROUND(SUM(ISSUE_VALUE),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_ISSUE_HEADER A, ";
                            strSQL+="D_INV_ISSUE_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                            strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                            strSQL+="A.ISSUE_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="I.CATEGORY_ID = "+CategoryID+" ";
                            
                            TotalOpening=TotalOpening-(data.getDoubleValueFromDB(strSQL));
                            

                            
                            //Get STM Issues
                            strSQL="SELECT ROUND(SUM(NET_AMOUNT),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.STM_NO=B.STM_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.STM_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="I.CATEGORY_ID = "+CategoryID+" ";
                            
                            TotalOpening=TotalOpening-(data.getDoubleValueFromDB(strSQL));
                            
                            
                            
                            //Now get Actual Receipts
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                            strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="I.CATEGORY_ID= "+CategoryID+" ";
                            
                            TotalReceipt=data.getDoubleValueFromDB(strSQL);
                            
                            
                            //Get Issues
                            strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_ISSUE_HEADER A, ";
                            strSQL+="D_INV_ISSUE_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                            strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                            strSQL+="A.ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="I.CATEGORY_ID= "+CategoryID+" ";
                            
                            TotalIssue=data.getDoubleValueFromDB(strSQL);
                            

                            //Get STM Issues
                            strSQL="SELECT ROUND(SUM(NET_AMOUNT),2) ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.STM_NO=B.STM_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="I.CATEGORY_ID= "+CategoryID+" ";
                            
                            TotalIssue=TotalIssue+data.getDoubleValueFromDB(strSQL);
                            
                            
                            finalTotal=TotalOpening+TotalReceipt-TotalIssue;
                            
                            data.Execute("UPDATE D_INV_ITEM_CATEGORY SET OPENING_VALUE="+TotalOpening+",RECEIPT_VALUE="+TotalReceipt+",ISSUE_VALUE="+TotalIssue+" WHERE CATEGORY_ID="+CategoryID+" ");
                            
                            rsCategory.next();
                        }
                    }
                    //==============================================================//
                    
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    
                    if(opgBrief.isSelected()) {
                        try {
                            
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStockRM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                        
                    }
                    
                    
                    if(opgDetailed.isSelected()) {
                        try {
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock2.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock2.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStock2RM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&AsOnDate="+txtToDate.getText());
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                    }
                    
                    
                    if(opgReceipts.isSelected()) {
                        try {
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseReceipts.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseReceipts.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseReceiptsRM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                        
                    }
                    
                    
                    if(opgIssues.isSelected()) {
                        try {
                            
                            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseIssues.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()) );
                            
                            if(ItemType==1) {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseIssues.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()) );
                            }
                            else {
                                ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseIssuesRM.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"&ToDate="+EITLERPGLOBAL.formatDateDB(txtToDate.getText()) );
                            }
                            
                            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                        }
                        catch(Exception e) {
                        }
                        
                    }
                    
                }
                catch(Exception e) {
                    e.printStackTrace();
                    Bar.setVisible(false);
                    lblItem.setVisible(false);
                }
                
            };
        }.start();
    }
    
    
    
    
    private void GenerateReportWAvgRMItems() {
        
        new Thread() {
            
            public void run() {
                ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsSource,rsCategory,rsMainCategory;
                
                String strSQL="";
                String strCondition="";
                Connection tmpConn;
                tmpConn=data.getConn();
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                clsItemStock objItemStock=new clsItemStock();
                
                try {
                    
                    if((!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid date");
                        return;
                    }
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ORDER BY ENTRY_DATE DESC");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    
                    if(chkReprocess.isSelected()) {
                        objItemStock.ProcessLedger(StockEntryDate, EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                        
                        while(!objItemStock.ProcessDone) {
                            //Wait ....
                        }
                    }
                    
                    
                    //============ Processing Categorywise Valuation =============//
                    double TotalOpening=0;
                    double TotalReceipt=0;
                    double TotalIssue=0;
                    double TotalValue=0;
                    double writeoffTotal=0;
                    double finalTotal=0;
                    double TotalOpeningQty=0;
                    double TotalReceiptQty=0;
                    double TotalIssueQty=0;
                    double TotalExcise=0;
                    
                    String Exception1="";
                    String Exception2="";
                    String MainCategory="";
                    
                    int ItemType=EITLERPGLOBAL.getComboCode(cmbItemType);
                    
                    rsCategory=data.getResult("SELECT * FROM D_INV_ITEM_CATEGORY WHERE CATEGORY_TYPE="+ItemType+" ORDER BY CATEGORY_ID");
                    rsCategory.first();
                    
                    if(rsCategory.getRow()>0) {
                        while(!rsCategory.isAfterLast()) {
                            
                            TotalOpening=0;
                            TotalReceipt=0;
                            TotalIssue=0;
                            TotalOpeningQty=0;
                            TotalReceiptQty=0;
                            TotalIssueQty=0;
                            writeoffTotal=0;
                            finalTotal=0;
                            TotalExcise=0;
                            
                            String CategoryID=rsCategory.getString("CATEGORY_ID");
                            String groupID=rsCategory.getString("CATEGORY_ID");
                            
                            rsItem=data.getResult("SELECT ITEM_ID FROM D_INV_ITEM_MASTER WHERE CATEGORY_ID="+CategoryID+" AND CANCELLED=0");
                            rsItem.first();
                            
                            if(rsItem.getRow()>0) {
                                
                                while(!rsItem.isAfterLast()) {
                                    
                                    String ItemID=rsItem.getString("ITEM_ID");
                                    
                                    if(ItemID.equals("RM21218001"))
                                    {
                                      boolean halt=true;  
                                    }
                                    lblItem.setText("Processing Item "+ItemID);
                                    
                                    //Opening Value
                                    strSQL="SELECT ROUND(SUM(A.OPENING_VALUE),2) AS OPENING_VALUE,SUM(A.OPENING_QTY) AS OPENING_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_COM_OPENING_STOCK_DETAIL A, ";
                                    strSQL+="D_INV_ITEM_MASTER B ";
                                    strSQL+="WHERE ";
                                    strSQL+="A.ITEM_ID=B.ITEM_ID AND ";
                                    strSQL+="B.APPROVED=1 AND B.CANCELLED=0 ";
                                    strSQL+="AND ENTRY_NO="+StockEntryNo+" AND A.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening=UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0);
                                    TotalOpeningQty=UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0);
                                    
                                    //Get Receipts and Issues between the opening date and from date
                                    strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),2) AS RECEIPT_VALUE,SUM(B.QTY) AS RECEIPT_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_GRN_HEADER A, ";
                                    strSQL+="D_INV_GRN_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE ";
                                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                                    strSQL+="A.GRN_DATE>='"+StockEntryDate+"' AND ";
                                    strSQL+="A.GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening+=UtilFunctions.getDouble(rsTmp,"RECEIPT_VALUE", 0);
                                    TotalOpeningQty+=UtilFunctions.getDouble(rsTmp,"RECEIPT_QTY", 0);
                                    
                                    
                                    //Get Issues
                                    strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),2) AS ISSUE_VALUE,SUM(B.QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_ISSUE_HEADER A, ";
                                    strSQL+="D_INV_ISSUE_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                                    strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                                    strSQL+="A.ISSUE_DATE>='"+StockEntryDate+"' AND ";
                                    strSQL+="A.ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_CODE = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening=TotalOpening-(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0));
                                    TotalOpeningQty=TotalOpeningQty-(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0));
                                    

                                    
                                    //Get STM Issues
                                    strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),2) AS ISSUE_VALUE,SUM(B.QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_STM_HEADER A, ";
                                    strSQL+="D_INV_STM_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.STM_NO=B.STM_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="A.STM_DATE>='"+StockEntryDate+"' AND ";
                                    strSQL+="A.STM_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening=TotalOpening-(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0));
                                    TotalOpeningQty=TotalOpeningQty-(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0));
                                    
                                    
                                    
                                    //Now get Actual Receipts
                                    //Get Receipts and Issues between the opening date and from date
                                    strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),2) AS RECEIPT_VALUE,SUM(QTY) AS RECEIPT_QTY,ROUND(SUM(B.COLUMN_8_AMT),2) AS MODVAT ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_GRN_HEADER A, ";
                                    strSQL+="D_INV_GRN_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE ";
                                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    rsTmp=data.getResult(strSQL);
                                    TotalReceipt=UtilFunctions.getDouble(rsTmp,"RECEIPT_VALUE",0);
                                    TotalReceiptQty=UtilFunctions.getDouble(rsTmp,"RECEIPT_QTY",0);
                                    TotalExcise=UtilFunctions.getDouble(rsTmp,"MODVAT", 0);
                                    
                                    
                                    
                                    //Get Issues
                                    strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),2) AS ISSUE_VALUE,SUM(QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_ISSUE_HEADER A, ";
                                    strSQL+="D_INV_ISSUE_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                                    strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                                    strSQL+="A.ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_CODE = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalIssue=UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0);
                                    TotalIssueQty=UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0);
                                    

                                    //Get STM Issues
                                    strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),2) AS ISSUE_VALUE,SUM(QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_STM_HEADER A, ";
                                    strSQL+="D_INV_STM_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.STM_NO=B.STM_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalIssue=TotalIssue+UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0);
                                    TotalIssueQty=TotalIssueQty+UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0);
                                    
                                    
                                    finalTotal=TotalOpening+TotalReceipt-TotalIssue;
                                    double finalQty=TotalOpeningQty+TotalReceiptQty-TotalIssueQty;
                                    
                                    data.Execute("UPDATE D_INV_ITEM_MASTER SET OPENING_VALUE="+TotalOpening+",RECEIPT_VALUE="+TotalReceipt+",ISSUE_VALUE="+TotalIssue+",OPENING_QTY="+TotalOpeningQty+",TOTAL_RECEIPT_QTY="+TotalReceiptQty+",TOTAL_ISSUED_QTY="+TotalIssueQty+",EXCISE="+TotalExcise+" WHERE ITEM_ID='"+ItemID.trim()+"' ");
                                    
                                    rsItem.next();
                                }
                                
                            }
                            
                            
                            rsCategory.next();
                        }
                    }
                    //==============================================================//
                    
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    
                    try {
                        GenerateStockReport();
                        System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStockRMItems.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+txtFromDate.getText()+"&ToDate="+txtToDate.getText());
                        //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupwiseStockRMItems.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+txtFromDate.getText()+"&ToDate="+txtToDate.getText());
                        //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                    }
                    catch(Exception e) {
                        
                    }
                    
                }
                catch(Exception e) {
                    e.printStackTrace();
                    Bar.setVisible(false);
                    lblItem.setVisible(false);
                }
                
            };
        }.start();
    }
 
    private void GenerateStockReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            strSQL="SELECT A.CATEGORY_ID,A.CATEGORY_NAME,C.ITEM_ID,C.ITEM_DESCRIPTION,B.CITY," +
            "C.OPENING_VALUE,C.RECEIPT_VALUE,C.ISSUE_VALUE, "+
            "(C.OPENING_VALUE+C.RECEIPT_VALUE-C.ISSUE_VALUE) AS CLOSING_VALUE,"+
            "C.OPENING_QTY,C.TOTAL_RECEIPT_QTY,C.TOTAL_ISSUED_QTY,"+
            "(C.OPENING_QTY+C.TOTAL_RECEIPT_QTY-C.TOTAL_ISSUED_QTY) AS CLOSING_QTY,"+
            "C.EXCISE,B.CITY FROM "+
            "D_INV_ITEM_CATEGORY A, D_INV_ITEM_MASTER C "+
            "LEFT JOIN D_COM_COMPANY_MASTER B ON(B.COMPANY_ID=C.COMPANY_ID) "+
            "WHERE A.CATEGORY_TYPE=2 AND C.CATEGORY_ID=A.CATEGORY_ID AND C.CATEGORY_ID <> 13 "+
            "AND(C.OPENING_QTY>0 OR C.TOTAL_RECEIPT_QTY>0 OR C.TOTAL_ISSUED_QTY>0) "+
            "AND C.CANCELLED=0 "+
            "ORDER BY A.CATEGORY_ID,C.ITEM_ID";
            
            //System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"ITEM_ID","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),2) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),2)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),2);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),2);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),2) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),2) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),2) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),2)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.STM_NO=B.STM_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),2);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),2);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),2) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),2) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"ITEM_ID",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),2)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),2)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),2)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),2)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),2) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),2) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,2)));                    
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),2) - IssueValue));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                        System.out.println(Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),2) - IssueValue));
                    }
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGrpwiseStockValueRMItems.rpt",Parameters,objReportData);
            
            //WIP ITEMS
            
            objReportData = new TReportWriter.SimpleDataProvider.TTable();
            
            strSQL="SELECT A.CATEGORY_ID,A.CATEGORY_NAME,C.ITEM_ID,C.ITEM_DESCRIPTION,B.CITY," +
            "C.OPENING_VALUE,C.RECEIPT_VALUE,C.ISSUE_VALUE, "+
            "(C.OPENING_VALUE+C.RECEIPT_VALUE-C.ISSUE_VALUE) AS CLOSING_VALUE,"+
            "C.OPENING_QTY,C.TOTAL_RECEIPT_QTY,C.TOTAL_ISSUED_QTY,"+
            "(C.OPENING_QTY+C.TOTAL_RECEIPT_QTY-C.TOTAL_ISSUED_QTY) AS CLOSING_QTY,"+
            "C.EXCISE,B.CITY FROM "+
            "D_INV_ITEM_CATEGORY A, D_INV_ITEM_MASTER C "+
            "LEFT JOIN D_COM_COMPANY_MASTER B ON(B.COMPANY_ID=C.COMPANY_ID) "+
            "WHERE A.CATEGORY_TYPE=2 AND C.CATEGORY_ID=A.CATEGORY_ID AND C.CATEGORY_ID = 13 "+
            "AND(C.OPENING_QTY>0 OR C.TOTAL_RECEIPT_QTY>0 OR C.TOTAL_ISSUED_QTY>0) "+
            " AND C.CANCELLED=0 "+
            "ORDER BY C.ITEM_ID DESC ";
            
            //System.out.println("sql="+strSQL);
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"ITEM_ID","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),2) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),2)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),2);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),2);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),2) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),2) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),2) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),2)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.STM_NO=B.STM_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),2);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),2);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),2) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),2) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"ITEM_ID",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),2)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),2)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),2)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),2)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),2) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),2) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,2)));                    
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),2) - IssueValue));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            Comp_ID = EITLERPGLOBAL.gCompanyID;
            City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGrpwiseStockValueRMItems.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }

}
