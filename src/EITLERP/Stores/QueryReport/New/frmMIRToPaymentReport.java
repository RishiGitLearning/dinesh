/* frmFeltSalesInfo.java 
 * 
 * 
 * Created on July 13, 2005, 10:47 AM
 */
package EITLERP.Stores.QueryReport.New;

import EITLERP.*;
import java.awt.Color;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.sql.*;
import javax.swing.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;



/**
 *
 * @author ashutosh/RISHI
 */
public class frmMIRToPaymentReport extends javax.swing.JApplet {
    public boolean forceToChange=false;
    public boolean cancelled=false;
    private EITLTableModel[] DataModel;
    private EITLTableModel DataModelB2B = new EITLTableModel();  
    private EITLTableModel DataModelB2BMIR = new EITLTableModel();  
    private EITLTableModel DataModelGeneral = new EITLTableModel();  
    private EITLTableModel DataModelProcureToPayment = new EITLTableModel();  
   //private EITLTableModel DataModelB2BHSN = new EITLTableModel();  
    
    String strProductCode = "";
    private JDialog aDialog;
    DateFormat df =  new SimpleDateFormat("dd-MMM-yy");
    HashMap hmPieceList=new HashMap();
    String ORDER_BY="";
    //private clsExcelExporter exp = new clsExcelExporter();
    //private EITLERP.Production.FeltCreditNote.clsExcelExporter exp = new EITLERP.Production.FeltCreditNote.clsExcelExporter();
    //private clsExcelExporterB2BHSN expHSN = new clsExcelExporterB2BHSN();
    private clsExcel_Exporter exp = new clsExcel_Exporter();
    
    public void init() {
        initComponents();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(780,660);
        jLabel1.setForeground(Color.WHITE);
        txtToDate.setVisible(false);
        jLabel5.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        file1 = new javax.swing.JFileChooser();
        jLabel2 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnShowB2BMIR = new javax.swing.JButton();
        Export_B2BMIR = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableMIRToPayment = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnShowB2BMIR1 = new javax.swing.JButton();
        Export_B2BMIR1 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableMIRToPaymentGeneral = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnShowB2BMIR2 = new javax.swing.JButton();
        Export_B2BMIR2 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableProcToPay = new javax.swing.JTable();
        CLR_BTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 102, 153));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 70, 930, 10);

        txtFromDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(170, 30, 110, 30);

        txtToDate = new JTextFieldHint(new JTextField(),"DD/MM/YYYY");
        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
        });
        getContentPane().add(txtToDate);
        txtToDate.setBounds(380, 30, 100, 30);

        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        jPanel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel1.setLayout(null);

        btnShowB2BMIR.setText("Show List");
        btnShowB2BMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowB2BMIRActionPerformed(evt);
            }
        });
        jPanel1.add(btnShowB2BMIR);
        btnShowB2BMIR.setBounds(10, 10, 130, 30);

        Export_B2BMIR.setText("EXPORT TO EXCEL");
        Export_B2BMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIRActionPerformed(evt);
            }
        });
        jPanel1.add(Export_B2BMIR);
        Export_B2BMIR.setBounds(540, 10, 170, 25);

        tableMIRToPayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMIRToPayment.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableMIRToPayment.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableMIRToPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMIRToPaymentKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(tableMIRToPayment);

        jPanel1.add(jScrollPane11);
        jScrollPane11.setBounds(10, 50, 910, 340);

        jTabbedPane2.addTab("RM DETAIL", jPanel1);

        jPanel2.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel2.setLayout(null);

        btnShowB2BMIR1.setText("Show List");
        btnShowB2BMIR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowB2BMIR1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnShowB2BMIR1);
        btnShowB2BMIR1.setBounds(10, 10, 130, 30);

        Export_B2BMIR1.setText("EXPORT TO EXCEL");
        Export_B2BMIR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR1ActionPerformed(evt);
            }
        });
        jPanel2.add(Export_B2BMIR1);
        Export_B2BMIR1.setBounds(540, 10, 170, 25);

        tableMIRToPaymentGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMIRToPaymentGeneral.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableMIRToPaymentGeneral.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableMIRToPaymentGeneral.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMIRToPaymentGeneralKeyPressed(evt);
            }
        });
        jScrollPane12.setViewportView(tableMIRToPaymentGeneral);

        jPanel2.add(jScrollPane12);
        jScrollPane12.setBounds(10, 50, 910, 340);

        jTabbedPane2.addTab("GENERAL DETAIL", jPanel2);

        jPanel3.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jPanel3.setLayout(null);

        btnShowB2BMIR2.setText("Show List");
        btnShowB2BMIR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowB2BMIR2ActionPerformed(evt);
            }
        });
        jPanel3.add(btnShowB2BMIR2);
        btnShowB2BMIR2.setBounds(10, 10, 130, 30);

        Export_B2BMIR2.setText("EXPORT TO EXCEL");
        Export_B2BMIR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Export_B2BMIR2ActionPerformed(evt);
            }
        });
        jPanel3.add(Export_B2BMIR2);
        Export_B2BMIR2.setBounds(540, 10, 170, 25);

        tableProcToPay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableProcToPay.setSelectionBackground(new java.awt.Color(208, 220, 234));
        tableProcToPay.setSelectionForeground(new java.awt.Color(231, 16, 16));
        tableProcToPay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableProcToPayKeyPressed(evt);
            }
        });
        jScrollPane13.setViewportView(tableProcToPay);

        jPanel3.add(jScrollPane13);
        jScrollPane13.setBounds(10, 50, 910, 340);

        jTabbedPane2.addTab("PROCURE TO PAYMENT", jPanel3);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 80, 930, 560);

        CLR_BTN.setText("Clear");
        CLR_BTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CLR_BTN.setMargin(new java.awt.Insets(2, 7, 2, 7));
        CLR_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLR_BTNActionPerformed(evt);
            }
        });
        getContentPane().add(CLR_BTN);
        CLR_BTN.setBounds(540, 30, 80, 30);

        jLabel3.setText("Period : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 30, 60, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("From Date :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 30, 100, 20);

        jLabel5.setText("To Date :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 30, 70, 20);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel1.setText("MIR TO PAYMENT REPORT");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 2, 930, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateFocusGained
                                 
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void CLR_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLR_BTNActionPerformed
        txtFromDate.setText("");
        txtToDate.setText("");        
        
        
    }//GEN-LAST:event_CLR_BTNActionPerformed

    private void tableMIRToPaymentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMIRToPaymentKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMIRToPaymentKeyPressed

    private void Export_B2BMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIRActionPerformed
        // TODO add your handling code here:
        /*try {
            exp.fillData(Table_b2bMIR, new File("/root/Desktop/MIR_B2B.xls"));
            exp.fillData(Table_b2bMIR, new File("D://MIR_B2B.xls"));
            File file = new File("/root/Desktop/MIR_B2B.xls");
            File file1 = new File("D://MIR_B2B.xls");
            if (!Desktop.isDesktopSupported()) {
                JOptionPane.showMessageDialog(null, "Desktop Not Supported");
                return;
            } else {
                Desktop desk = Desktop.getDesktop();
                if (file.exists()) {
                    desk.open(file);
                } else if (file1.exists()) {
                    desk.open(file1);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }*/
        File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableMIRToPayment, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIRActionPerformed

    private void btnShowB2BMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowB2BMIRActionPerformed
        
        /*if ( ! Validate()) {
            return;
        }*/
        FormatGridMIR();
        GenerateMIRB2BData(ORDER_BY);
    }//GEN-LAST:event_btnShowB2BMIRActionPerformed

    private void btnShowB2BMIR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowB2BMIR1ActionPerformed
        FormatGridGeneral();
        GenerateMIRGeneral(ORDER_BY);
    }//GEN-LAST:event_btnShowB2BMIR1ActionPerformed

    private void Export_B2BMIR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR1ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableMIRToPaymentGeneral, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIR1ActionPerformed

    private void tableMIRToPaymentGeneralKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMIRToPaymentGeneralKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMIRToPaymentGeneralKeyPressed

    private void btnShowB2BMIR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowB2BMIR2ActionPerformed
        //FormatGridProcureToPaymentAdv();
        //GenerateProcToPayAdv(ORDER_BY);
        FormatGridProcureToPayment();
        GenerateProcToPay(ORDER_BY);
    }//GEN-LAST:event_btnShowB2BMIR2ActionPerformed

    private void Export_B2BMIR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Export_B2BMIR2ActionPerformed
File file = null;
        file1.setVisible(true);
        try {
            int returnVal = file1.showOpenDialog(this);
            if (returnVal == file1.APPROVE_OPTION) {
                file = file1.getSelectedFile();
            }
            file1.setVisible(false);
            
            exp.fillData(tableProcToPay, new File(file1.getSelectedFile().toString() + ".xls"), "GSTR2");
            JOptionPane.showMessageDialog(null, "Data saved at "
                    + file1.getSelectedFile().toString() + " successfully... ", "Message",
                    JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_Export_B2BMIR2ActionPerformed

    private void tableProcToPayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableProcToPayKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableProcToPayKeyPressed

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
       if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("RM DETAIL")) {
            
            txtFromDate.setEnabled(true);
            //txtToDate.setEnabled(false);           
            

        } 
        else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("GENERAL DETAIL")) {
            txtFromDate.setEnabled(true);
            //txtToDate.setEnabled(true);           
        } else if (jTabbedPane2.getTitleAt(jTabbedPane2.getSelectedIndex()).equals("PROCURE TO PAYMENT")) {
            txtFromDate.setEnabled(true);
            //txtToDate.setEnabled(false);           

        }
    }//GEN-LAST:event_jTabbedPane2StateChanged
                
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLR_BTN;
    private javax.swing.JButton Export_B2BMIR;
    private javax.swing.JButton Export_B2BMIR1;
    private javax.swing.JButton Export_B2BMIR2;
    private javax.swing.JButton btnShowB2BMIR;
    private javax.swing.JButton btnShowB2BMIR1;
    private javax.swing.JButton btnShowB2BMIR2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFileChooser file1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tableMIRToPayment;
    private javax.swing.JTable tableMIRToPaymentGeneral;
    private javax.swing.JTable tableProcToPay;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private boolean Validate() {
        //Form level validations
        if(txtFromDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter from Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid From Date in DD/MM/YYYY format.");
            return false;
        }
        
        if(txtToDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter To Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid To Date in DD/MM/YYYY format.");
            return false;
        }
        
        return true;
    }
    
    
    private void FormatGridMIR() {
        try {
            DataModelB2BMIR = new EITLTableModel();
            tableMIRToPayment.removeAll();

            tableMIRToPayment.setModel(DataModelB2BMIR);
            tableMIRToPayment.setAutoResizeMode(0);

            DataModelB2BMIR.addColumn("SrNo"); //0 - Read Only
            DataModelB2BMIR.addColumn("MIR NO"); //1
            DataModelB2BMIR.addColumn("MIR DATE"); //2
            DataModelB2BMIR.addColumn("SUPP CODE"); //3
            DataModelB2BMIR.addColumn("SUPP NAME"); //4
            DataModelB2BMIR.addColumn("PAYMENT DAYS"); //5
            DataModelB2BMIR.addColumn("PAYMENT TERM"); //6
            DataModelB2BMIR.addColumn("DUE DATE"); //7
            DataModelB2BMIR.addColumn("INVOICE NO"); //8
            DataModelB2BMIR.addColumn("INVOICE DATE"); //9
            DataModelB2BMIR.addColumn("INVOICE AMT"); //10
            DataModelB2BMIR.addColumn("PO NO"); //11
            DataModelB2BMIR.addColumn("GRN NO"); //12
            DataModelB2BMIR.addColumn("GRN DATE"); //13
            DataModelB2BMIR.addColumn("INVOICE AMT"); //14
            DataModelB2BMIR.addColumn("PJV NO"); //15
            DataModelB2BMIR.addColumn("PJV DATE"); //16
            DataModelB2BMIR.addColumn("PJV AMT"); //17
            DataModelB2BMIR.addColumn("GPY NO"); //18
            DataModelB2BMIR.addColumn("GPY VOUCHER DATE"); //19
            DataModelB2BMIR.addColumn("GPY AMT"); //20
            DataModelB2BMIR.addColumn("POPY NO"); //21
            DataModelB2BMIR.addColumn("POPY VOUCHER DATE"); //22
            DataModelB2BMIR.addColumn("POPY AMT"); //23
            DataModelB2BMIR.addColumn("POPY PAYMENTTERM"); //24
            
            
           
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelB2BMIR.SetReadOnly(i);
            }
                        
            tableMIRToPayment.getColumnModel().getColumn(0).setMinWidth(30);
            tableMIRToPayment.getColumnModel().getColumn(0).setMaxWidth(40);
            tableMIRToPayment.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableMIRToPayment.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tableMIRToPayment.getColumnModel().getColumn(10).setMaxWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(11).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(12).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(13).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(14).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(15).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(16).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(17).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(18).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(19).setMinWidth(100);
            tableMIRToPayment.getColumnModel().getColumn(20).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
     
    private void FormatGridGeneral() {
        try {
            DataModelGeneral = new EITLTableModel();
            tableMIRToPaymentGeneral.removeAll();

            tableMIRToPaymentGeneral.setModel(DataModelGeneral);
            tableMIRToPaymentGeneral.setAutoResizeMode(0);

            DataModelGeneral.addColumn("SrNo"); //0 - Read Only
            DataModelGeneral.addColumn("MIR NO"); //1
            DataModelGeneral.addColumn("MIR DATE"); //2
            DataModelGeneral.addColumn("SUPP CODE"); //3
            DataModelGeneral.addColumn("SUPP NAME"); //4
            DataModelGeneral.addColumn("PAYMENT DAYS"); //5
            DataModelGeneral.addColumn("PAYMENT TERM"); //6
            DataModelGeneral.addColumn("DUE DATE"); //7
            DataModelGeneral.addColumn("INVOICE NO"); //8
            DataModelGeneral.addColumn("INVOICE DATE"); //9
            DataModelGeneral.addColumn("INVOICE AMT"); //10
            DataModelGeneral.addColumn("PO NO"); //11
            DataModelGeneral.addColumn("GRN NO"); //12
            DataModelGeneral.addColumn("GRN DATE"); //13
            DataModelGeneral.addColumn("INVOICE AMT"); //14
            DataModelGeneral.addColumn("PJV NO"); //15
            DataModelGeneral.addColumn("PJV DATE"); //16
            DataModelGeneral.addColumn("PJV AMT"); //17
            DataModelGeneral.addColumn("GPY NO"); //18
            DataModelGeneral.addColumn("GPY VOUCHER DATE"); //19
            DataModelGeneral.addColumn("GPY AMT"); //20
            DataModelGeneral.addColumn("POPY NO"); //21
            DataModelGeneral.addColumn("POPY VOUCHER DATE"); //22
            DataModelGeneral.addColumn("POPY AMT"); //23
            DataModelGeneral.addColumn("POPY PAYMENTTERM"); //24
            
            
           
            /*
            DataModelB2BMIR.SetVariable(0, "SR_N0"); 
            DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
            DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
            DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
            DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
            DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
            DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
            DataModelB2BMIR.SetVariable(7, "HSN_CODE");
            DataModelB2BMIR.SetVariable(8, "GST_RATE");
            DataModelB2BMIR.SetVariable(9, "IGST_AMT");
            DataModelB2BMIR.SetVariable(10, "CGST_AMT");
            DataModelB2BMIR.SetVariable(11, "SGST_AMT");
            DataModelB2BMIR.SetVariable(12, "CESS");
            DataModelB2BMIR.SetVariable(13, "POS");
            DataModelB2BMIR.SetVariable(14, "ITEM_ID");
            DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
            DataModelB2BMIR.SetVariable(18, "CESS_ITC");
            DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
            DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
            */
            
            
            for(int i=0;i<=17;i++) {
                DataModelGeneral.SetReadOnly(i);
            }
                        
            tableMIRToPaymentGeneral.getColumnModel().getColumn(0).setMinWidth(30);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(0).setMaxWidth(40);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(10).setMaxWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(11).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(12).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(13).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(14).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(15).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(16).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(17).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(18).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(19).setMinWidth(100);
            tableMIRToPaymentGeneral.getColumnModel().getColumn(20).setMinWidth(100);
            
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : "+e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
     
    private void FormatGridProcureToPaymentAdv() {
        try {
            DataModelProcureToPayment = new EITLTableModel();
            tableProcToPay.removeAll();

            tableProcToPay.setModel(DataModelProcureToPayment);
            tableProcToPay.setAutoResizeMode(0);

            DataModelProcureToPayment.addColumn("SrNo"); //0 - Read Only

            DataModelProcureToPayment.addColumn("REQ_NO");
            DataModelProcureToPayment.addColumn("REQ_DATE");
            DataModelProcureToPayment.addColumn("APPROVED_DATE");
            DataModelProcureToPayment.addColumn("DEPT_DESC");
            DataModelProcureToPayment.addColumn("USER_NAME");
            DataModelProcureToPayment.addColumn("ITEM_CODE");
            DataModelProcureToPayment.addColumn("ITEM_DESCRIPTION");
            DataModelProcureToPayment.addColumn("ITEM_EXTRA_DESC");
            DataModelProcureToPayment.addColumn("REQ_QTY");
            DataModelProcureToPayment.addColumn("UNIT_DESC");
            DataModelProcureToPayment.addColumn("INDENT_NO");
            DataModelProcureToPayment.addColumn("INDENT_DATE");
            DataModelProcureToPayment.addColumn("APPROVED_DATE");
            DataModelProcureToPayment.addColumn("APPROVED");
            DataModelProcureToPayment.addColumn("MR_NO");
            DataModelProcureToPayment.addColumn("ITEM_CODE");
            DataModelProcureToPayment.addColumn("ITEM_DESCRIPTION");
            DataModelProcureToPayment.addColumn("ITEM_EXTRA_DESC");
            DataModelProcureToPayment.addColumn("LAST_PO_NO");
            DataModelProcureToPayment.addColumn("LAST_PO_DATE");
            DataModelProcureToPayment.addColumn("LAST_PO_QTY");
            DataModelProcureToPayment.addColumn("LAST_GRN_RATE");
            DataModelProcureToPayment.addColumn("LAST_SUPP_ID");
            DataModelProcureToPayment.addColumn("BUYER");
            DataModelProcureToPayment.addColumn("USER_NAME");
            DataModelProcureToPayment.addColumn("FOR_DEPT_ID");
            DataModelProcureToPayment.addColumn("DEPT_DESC");
            DataModelProcureToPayment.addColumn("SUPPLIER_CODE");
            DataModelProcureToPayment.addColumn("SUPP_NAME");
            DataModelProcureToPayment.addColumn("APPROVAL_NO");
            DataModelProcureToPayment.addColumn("MAX(RH.APPROVAL_DATE)");
            DataModelProcureToPayment.addColumn("INDENT_NO");
            DataModelProcureToPayment.addColumn("ITEM_ID");
            DataModelProcureToPayment.addColumn("ITEM_EXTRA_DESC");
            DataModelProcureToPayment.addColumn("APPROVED_DATE");
            DataModelProcureToPayment.addColumn("SUPP_ID");
            DataModelProcureToPayment.addColumn("PARTY_ID");
            DataModelProcureToPayment.addColumn("SUPPLIER_CODE");
            DataModelProcureToPayment.addColumn("PARTY_NAME");
            DataModelProcureToPayment.addColumn("INDENT_NO");
            DataModelProcureToPayment.addColumn("ITEM_ID");
            DataModelProcureToPayment.addColumn("PO_NO");
            DataModelProcureToPayment.addColumn("PO_DATE");
            DataModelProcureToPayment.addColumn("CNT_PO");
            DataModelProcureToPayment.addColumn("TOT_PO");
            DataModelProcureToPayment.addColumn("TT_PODATE");
            DataModelProcureToPayment.addColumn("QTY");
            DataModelProcureToPayment.addColumn("RATE");
            DataModelProcureToPayment.addColumn("TOTAL_AMOUNT");
            DataModelProcureToPayment.addColumn("PO_APPROVED_DATE");
            DataModelProcureToPayment.addColumn("DELIVERY_DATE");
            DataModelProcureToPayment.addColumn("PAYMENT_TERM");
            DataModelProcureToPayment.addColumn("PO_NO");
            DataModelProcureToPayment.addColumn("ITEM_ID");
            DataModelProcureToPayment.addColumn("MIR_NO");
            DataModelProcureToPayment.addColumn("MIR_DATE");
            DataModelProcureToPayment.addColumn("MIR_APPROVED_DATE");
            DataModelProcureToPayment.addColumn("CNT_MIR");
            DataModelProcureToPayment.addColumn("MULTI_MIR_DETAIL");
            DataModelProcureToPayment.addColumn("RECEIVED_QTY");
            DataModelProcureToPayment.addColumn("PO_NO");
            DataModelProcureToPayment.addColumn("ITEM_ID");
            DataModelProcureToPayment.addColumn("GRN_NO");
            DataModelProcureToPayment.addColumn("GRN_DATE");
            DataModelProcureToPayment.addColumn("GRN_APPROVED_DATE");
            DataModelProcureToPayment.addColumn("CNT_GRN");
            DataModelProcureToPayment.addColumn("MULTI_GRN_DETAIL");
            DataModelProcureToPayment.addColumn("QTY");
            DataModelProcureToPayment.addColumn("GRNINVAMT");
            DataModelProcureToPayment.addColumn("LANDED_RATE");
            DataModelProcureToPayment.addColumn("PO_NO");
            DataModelProcureToPayment.addColumn("MAX(VOUCHER_NO)");
            DataModelProcureToPayment.addColumn("MAX(VOUCHER_DATE)");
            DataModelProcureToPayment.addColumn("CNT_VOU");
            DataModelProcureToPayment.addColumn("MULTI_VOU_DETAIL");
            DataModelProcureToPayment.addColumn("VOU_AMOUNT");
            DataModelProcureToPayment.addColumn("PO_NO");
            DataModelProcureToPayment.addColumn("MAX(VOUCHER_NO)");
            DataModelProcureToPayment.addColumn("MAX(VOUCHER_DATE)");
            DataModelProcureToPayment.addColumn("CNT_VOU");
            DataModelProcureToPayment.addColumn("MULTI_VOU_DETAIL");
            DataModelProcureToPayment.addColumn("VOU_AMOUNT");

            /*
             DataModelB2BMIR.SetVariable(0, "SR_N0"); 
             DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
             DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
             DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
             DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
             DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
             DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
             DataModelB2BMIR.SetVariable(7, "HSN_CODE");
             DataModelB2BMIR.SetVariable(8, "GST_RATE");
             DataModelB2BMIR.SetVariable(9, "IGST_AMT");
             DataModelB2BMIR.SetVariable(10, "CGST_AMT");
             DataModelB2BMIR.SetVariable(11, "SGST_AMT");
             DataModelB2BMIR.SetVariable(12, "CESS");
             DataModelB2BMIR.SetVariable(13, "POS");
             DataModelB2BMIR.SetVariable(14, "ITEM_ID");
             DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
             DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
             DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
             DataModelB2BMIR.SetVariable(18, "CESS_ITC");
             DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
             DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
             */
            for (int i = 0; i <= 17; i++) {
                DataModelProcureToPayment.SetReadOnly(i);
            }

            tableProcToPay.getColumnModel().getColumn(0).setMinWidth(30);
            tableProcToPay.getColumnModel().getColumn(0).setMaxWidth(40);
            tableProcToPay.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableProcToPay.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tableProcToPay.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tableProcToPay.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(10).setMaxWidth(100);
            tableProcToPay.getColumnModel().getColumn(11).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(12).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(13).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(14).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(15).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(16).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(17).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(18).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(19).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(20).setMinWidth(100);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void FormatGridProcureToPayment() {
        try {
            DataModelProcureToPayment = new EITLTableModel();
            tableProcToPay.removeAll();

            tableProcToPay.setModel(DataModelProcureToPayment);
            tableProcToPay.setAutoResizeMode(0);

            DataModelProcureToPayment.addColumn("SrNo"); //0 - Read Only

            DataModelProcureToPayment.addColumn("PR number");
DataModelProcureToPayment.addColumn("Pr created date");
DataModelProcureToPayment.addColumn("PR Approved date");
DataModelProcureToPayment.addColumn("Department");
DataModelProcureToPayment.addColumn("User PR created By");
DataModelProcureToPayment.addColumn("Item code");
DataModelProcureToPayment.addColumn("Item Description");
DataModelProcureToPayment.addColumn("UOM");
DataModelProcureToPayment.addColumn("Quantity");
DataModelProcureToPayment.addColumn("Indent No");
DataModelProcureToPayment.addColumn("Indent approved date");
DataModelProcureToPayment.addColumn("LPO Vendor");
DataModelProcureToPayment.addColumn("LPO number");
DataModelProcureToPayment.addColumn("LPO date");
DataModelProcureToPayment.addColumn("Item Code");
DataModelProcureToPayment.addColumn("Item description");
DataModelProcureToPayment.addColumn("LPO Quantity");
DataModelProcureToPayment.addColumn("UOM");
DataModelProcureToPayment.addColumn("LPO Price");
DataModelProcureToPayment.addColumn("Buyer");
DataModelProcureToPayment.addColumn("Vendor ID");
DataModelProcureToPayment.addColumn("Vendor name");
DataModelProcureToPayment.addColumn("RIA No");
DataModelProcureToPayment.addColumn("RIA Created Date");
DataModelProcureToPayment.addColumn("RIA Approved Date");
DataModelProcureToPayment.addColumn("PO number");
DataModelProcureToPayment.addColumn("Item Code");
DataModelProcureToPayment.addColumn("Item description");
DataModelProcureToPayment.addColumn("PO quantity");
DataModelProcureToPayment.addColumn("Unit of measure");
DataModelProcureToPayment.addColumn("PO price");
DataModelProcureToPayment.addColumn("PO total");
DataModelProcureToPayment.addColumn("PO approved date");
DataModelProcureToPayment.addColumn("PO delivery date");
DataModelProcureToPayment.addColumn("PO payment terms");
DataModelProcureToPayment.addColumn("MIR No");
DataModelProcureToPayment.addColumn("MIR date");
DataModelProcureToPayment.addColumn("MIRcnt");
DataModelProcureToPayment.addColumn("MIRDetail");
DataModelProcureToPayment.addColumn("MIR quantity");
DataModelProcureToPayment.addColumn("GRN No");
DataModelProcureToPayment.addColumn("GRNcnt");
DataModelProcureToPayment.addColumn("GRNDetail");
DataModelProcureToPayment.addColumn("GRN quantity");
DataModelProcureToPayment.addColumn("Payment Due date");
DataModelProcureToPayment.addColumn("PJV No");
DataModelProcureToPayment.addColumn("PJV Date");
DataModelProcureToPayment.addColumn("PJVcnt");
DataModelProcureToPayment.addColumn("PJVDetail");
DataModelProcureToPayment.addColumn("Voucher Number ");
DataModelProcureToPayment.addColumn("Vouchercnt");
DataModelProcureToPayment.addColumn("VoucherDetail");
DataModelProcureToPayment.addColumn("Cheque Number");
DataModelProcureToPayment.addColumn("Cheque date");
DataModelProcureToPayment.addColumn("Remarks");

            /*
             DataModelB2BMIR.SetVariable(0, "SR_N0"); 
             DataModelB2BMIR.SetVariable(1, "GSTIN_UIN"); 
             DataModelB2BMIR.SetVariable(2, "TRADE_NAME"); 
             DataModelB2BMIR.SetVariable(3, "INVOICE_NO"); 
             DataModelB2BMIR.SetVariable(4, "INVOICE_DATE"); 
             DataModelB2BMIR.SetVariable(5, "INVOICE_AMT");
             DataModelB2BMIR.SetVariable(6, "TAXABLE_VALUE");
             DataModelB2BMIR.SetVariable(7, "HSN_CODE");
             DataModelB2BMIR.SetVariable(8, "GST_RATE");
             DataModelB2BMIR.SetVariable(9, "IGST_AMT");
             DataModelB2BMIR.SetVariable(10, "CGST_AMT");
             DataModelB2BMIR.SetVariable(11, "SGST_AMT");
             DataModelB2BMIR.SetVariable(12, "CESS");
             DataModelB2BMIR.SetVariable(13, "POS");
             DataModelB2BMIR.SetVariable(14, "ITEM_ID");
             DataModelB2BMIR.SetVariable(15, "IGST_AMT_ITC");
             DataModelB2BMIR.SetVariable(16, "CGST_AMT_ITC");
             DataModelB2BMIR.SetVariable(17, "SGST_AMT_ITC");
             DataModelB2BMIR.SetVariable(18, "CESS_ITC");
             DataModelB2BMIR.SetVariable(19, "INVOICE_NO_AMEND");
             DataModelB2BMIR.SetVariable(20, "INVOICE_DATE_AMEND");
             */
            for (int i = 0; i <= 17; i++) {
                DataModelProcureToPayment.SetReadOnly(i);
            }

            tableProcToPay.getColumnModel().getColumn(0).setMinWidth(30);
            tableProcToPay.getColumnModel().getColumn(0).setMaxWidth(40);
            tableProcToPay.getColumnModel().getColumn(1).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(1).setMaxWidth(70);
            tableProcToPay.getColumnModel().getColumn(2).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(2).setMaxWidth(80);
            //Table_b2bMIR.getColumnModel().getColumn(3).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(3).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(4).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(4).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(5).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(5).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(6).setMaxWidth(100);
            tableProcToPay.getColumnModel().getColumn(6).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(7).setMaxWidth(100);
            tableProcToPay.getColumnModel().getColumn(7).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(8).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(8).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(9).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(9).setMinWidth(100);
            //Table_b2bMIR.getColumnModel().getColumn(10).setMaxWidth(80);
            tableProcToPay.getColumnModel().getColumn(10).setMaxWidth(100);
            tableProcToPay.getColumnModel().getColumn(11).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(12).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(13).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(14).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(15).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(16).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(17).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(18).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(19).setMinWidth(100);
            tableProcToPay.getColumnModel().getColumn(20).setMinWidth(100);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Enter Correct Details in Table. Error is : " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    public void GenerateGRNB2BData(String ORDER_BY) {
        
        try {
            
            
//            data.Execute("");
            /*
            data.Execute("TRUNCATE TABLE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT");
            
            
            data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (SUPP_ID,INVOICE_NO, INVOICE_DATE, INVOICE_AMT,  ITEM_ID, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT,HSN_CODE,IGST_RATE,CGST_RATE,SGST_RATE)  "
                    + " ( SELECT H.SUPP_ID,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_AMOUNT, D.ITEM_ID,H.GRN_NO,H.GRN_DATE,D.QTY,D.UNIT,D.RATE,D.TOTAL_AMOUNT,D.NET_AMOUNT,D.HSN_SAC_CODE,D.COLUMN_3_PER,D.COLUMN_4_PER,D.COLUMN_5_PER FROM DINESHMILLS.D_INV_GRN_HEADER H,DINESHMILLS.D_INV_GRN_DETAIL D " +
                        "WHERE H.COMPANY_ID=2 AND " +
                        "H.GRN_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B " +
                        "WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0) " +
                        "AND H.GRN_NO=D.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 ORDER BY H.GRN_NO)");
            
            
            data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,DINESHMILLS.D_COM_SUPP_MASTER B " +
                        " SET A.TYPE=2,A.TRADE_NAME=B.SUPP_NAME,A.GSTIN_UIN=B.GSTIN_NO,A.POS=B.STATE " +
                        " WHERE A.SUPP_ID = B.SUPPLIER_CODE"); 
            
            data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,DINESHMILLS.D_INV_GRN_HSN B " +
                        " SET A.TAXABLE_VALUE=B.INVOICE_AMOUNT,A.IGST_AMT=B.INVOICE_IGST,A.CGST_AMT=B.INVOICE_CGST" +
                        ",A.SGST_AMT=B.INVOICE_SGST,A.CESS=B.INVOICE_GST_COMP_CESS,A.CGST_AMT_ITC=B.CGST_INPUT_CR_AMT,"
                        + "A.SGST_AMT_ITC=B.SGST_INPUT_CR_AMT,A.IGST_AMT_ITC=B.IGST_INPUT_CR_AMT " +
                        " WHERE A.GRN_NO=B.GRN_NO AND A.GRN_DATE=B.GRN_DATE AND A.HSN_CODE=B.HSN_CODE");
            */
            
            data.Execute("TRUNCATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT");
            /*
            data.Execute(" INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (" +
                        " GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS)\n" +
                        " " +
                        " SELECT H.GRN_NO,H.GRN_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_GRN_HSN G,DINESHMILLS.D_INV_GRN_HEADER H " +
                        " " +
                        " WHERE H.GRN_DATE >='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND H.GRN_DATE <='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'  AND G.GRN_NO=H.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 ");
            */
            data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ( " +
                        " GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS) " +
                        " SELECT H.GRN_NO,H.GRN_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_GRN_HSN G,DINESHMILLS.D_INV_GRN_HEADER H " +
                        " WHERE G.GRN_NO= H.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 " +
                        " AND H.GRN_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
            System.out.println("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ( " +
                        " GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS) " +
                        " SELECT H.GRN_NO,H.GRN_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_GRN_HSN G,DINESHMILLS.D_INV_GRN_HEADER H " +
                        " WHERE G.GRN_NO= H.GRN_NO AND H.APPROVED =1 AND H.CANCELLED =0 " +
                        " AND H.GRN_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
            data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (  GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS)  \n"
                    + " SELECT H.JOB_NO,H.JOB_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_JOB_HSN G,DINESHMILLS.D_INV_JOB_HEADER H \n"
                    + " WHERE G.JOB_NO=H.JOB_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND H.JOB_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND A.VOUCHER_DATE <= '"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
           data.Execute("INSERT INTO DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT (  GRN_NO,GRN_DATE,TAXABLE_VALUE,HSN_CODE,SGST_AMT,CGST_AMT,IGST_AMT,SGST_AMT_ITC,CGST_AMT_ITC,IGST_AMT_ITC,SGST_RATE,CGST_RATE,IGST_RATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMT,CESS)  "
                   + " SELECT H.JOB_NO,H.JOB_DATE,G.INVOICE_AMOUNT,HSN_CODE,INVOICE_SGST,INVOICE_CGST,INVOICE_IGST,SGST_INPUT_CR_AMT,CGST_INPUT_CR_AMT,IGST_INPUT_CR_AMT,SGST_INPUT_CR_PER,CGST_INPUT_CR_PER,IGST_INPUT_CR_PER,SUPP_ID,INVOICE_NO,INVOICE_DATE,H.INVOICE_AMOUNT,G.INVOICE_GST_COMP_CESS FROM DINESHMILLS.D_INV_JOB_HSN G,DINESHMILLS.D_INV_JOB_HEADER H "
                   + " WHERE G.JOB_NO=H.JOB_NO AND H.APPROVED=1 AND H.CANCELLED=0 AND H.JOB_NO IN ( SELECT distinct B.GRN_NO FROM FINANCE.D_FIN_VOUCHER_HEADER A , FINANCE.D_FIN_VOUCHER_DETAIL B WHERE A.VOUCHER_NO = B.VOUCHER_NO AND B.GRN_NO!='' AND A.VOUCHER_DATE >= '2020-06-01' AND A.VOUCHER_DATE <= '2020-06-30' AND SUBSTRING(A.VOUCHER_NO,1,2) = 'PJ' AND A.APPROVED =1 AND A.CANCELLED =0)");
            
            //data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,DINESHMILLS.D_COM_SUPP_MASTER B  SET A.TYPE=2,A.TRADE_NAME=B.SUPP_NAME,A.GSTIN_UIN=B.GSTIN_NO,A.POS=B.STATE WHERE A.SUPP_ID = B.SUPPLIER_CODE");
            
           data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT A,FINANCE.D_FIN_PARTY_MASTER B  SET A.TYPE=2,A.TRADE_NAME=B.PARTY_NAME,A.GSTIN_UIN=B.GSTIN_NO,A.POS=B.STATE WHERE A.SUPP_ID = B.PARTY_CODE AND MAIN_ACCOUNT_CODE NOT IN (210027,210010,210072)");
           
            data.Execute("UPDATE DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT SET ITEM_ID = CASE WHEN (SGST_AMT_ITC+CGST_AMT_ITC+IGST_AMT_ITC) = 0 THEN 'Ineligible' ELSE 'Inputs' END,GST_RATE = SGST_RATE+CGST_RATE+IGST_RATE");
            
            
            String strSQL = "SELECT * FROM DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT";
            
            //String strSQL2 = "SELECT *,(IGST_RATE+CGST_RATE+SGST_RATE) AS GST_RATE_DISPLAY FROM DINESHMILLS.TMP_STORES_MIR_SERVICE_QUERY_REPORT";
            
            
            ResultSet rs = data.getResult(strSQL);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[25];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("GSTIN_UIN");//GSTIN_UIN
                rowData[2] = rs.getString("TRADE_NAME");//TRADE_NAME
                rowData[3] = rs.getString("INVOICE_NO");
                rowData[4] = EITLERPGLOBAL.formatDate(rs.getString("INVOICE_DATE"));
                rowData[5] = rs.getString("INVOICE_AMT");
                rowData[6] = rs.getString("TAXABLE_VALUE");//TAXABLE_VALUE
                rowData[7] = rs.getString("HSN_CODE");//HSN_CODE
                rowData[8] = rs.getString("GST_RATE");//GST_RATE
                rowData[9] = rs.getString("IGST_AMT");//IGST_AMT
                rowData[10] = rs.getString("CGST_AMT");//CGST_AMT
                rowData[11] = rs.getString("SGST_AMT");//SGST_AMT
                rowData[12] = rs.getString("CESS");//CESS
                rowData[13] = rs.getString("POS");//POS
                
//                String Eligibility = "";
//                if(rs.getString("ITEM_ID").equals("99002001"))
//                {
//                    Eligibility = "Capital Goods";
//                }
//                else if(rs.getString("ITEM_ID").equals("99004001"))
//                {
//                    Eligibility = "Input Service";
//                }
//                else
//                {
//                    Eligibility = "Inputs";
//                }
                rowData[14] = rs.getString("ITEM_ID");
                
                rowData[15] = rs.getString("IGST_AMT_ITC");//IGST_AMT
                rowData[16] = rs.getString("CGST_AMT_ITC");//CGST_AMT
                rowData[17] = rs.getString("SGST_AMT_ITC");//SGST_AMT
                rowData[18] = rs.getString("CESS_ITC");//CESS
                rowData[19] = rs.getString("INVOICE_NO_AMEND");//CESS
                //rowData[20] = rs.getString("INVOICE_DATE_AMEND");//CESS
                
                
                DataModelB2B.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
        
        String sql;
        sql="SELECT ROUND(SUM(INVOICE_AMT),2) FROM DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ";
        String invAmt = data.getStringValueFromDB(sql);
        
        
        sql="SELECT ROUND(SUM(TAXABLE_VALUE),2) FROM DINESHMILLS.TMP_STORES_GRN_QUERY_REPORT ";
        String taxAmt = data.getStringValueFromDB(sql);
        
    }
    
    public void GenerateMIRB2BData(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            String strSQL2 = "SELECT MIR.MIR_NO,MIR_DATE,MIR.SUPP_ID,MIR.SUPP_NAME,PAYMENT_DAYS,P.PAYMENT_TERM,DATE_ADD(MIR_DATE ,INTERVAL PAYMENT_DAYS DAY) AS DUE_DATE,\n"
                    + "MIR.INVOICE_NO,MIR.INVOICE_DATE,MIR.INVOICE_AMOUNT,GRN.PO_NO,GRN.GRN_NO,GRN.GRN_DATE,GRN.INVOICE_AMOUNT,\n"
                    + "V.VOUCHER_NO AS PJV_NO,V.VOUCHER_DATE AS PJV_DATE,V.VOU_AMOUNT AS PJV_AMT,\n"
                    + "PY.VOUCHER_NO AS GPY_NO,PY.VOUCHER_DATE AS GPY_VOUCHER_DATE,PY.VOU_AMOUNT AS GPY_AMT,\n"
                    + "POPY.VOUCHER_NO AS POPY_NO,POPY.VOUCHER_DATE AS POPY_VOUCHER_DATE,POPY.VOU_AMOUNT AS POPY_AMT,POPY.PAYMENT_TERM AS POPY_PAYMENTTERM\n"
                    + "FROM\n"
                    + "(SELECT  H.MIR_NO,H.MIR_DATE,H.SUPP_ID,SUPP_NAME,PAYMENT_DAYS,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO,SUM(GRN_RECD_QTY), ROUND(SUM(GRN_RECD_QTY*LANDED_RATE),2) AS MIRINVAMT FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D ,DINESHMILLS.D_COM_SUPP_MASTER S\n"
                    + "WHERE D.MIR_NO = H.MIR_NO AND MIR_DATE >= '"+fromDate+"' AND SUBSTRING(D.MIR_NO,1,1) ='R' AND H.APPROVED =1 AND H.CANCELLED =0 AND H.SUPP_ID = S.SUPPLIER_CODE\n"
                    + "GROUP BY H.MIR_NO,H.MIR_DATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO) AS MIR\n"
                    + "LEFT JOIN\n"
                    + "(SELECT  DISTINCT H.PO_NO,PO_DATE,SUPP_NAME,SUPP_ID,PAYMENT_TERM FROM DINESHMILLS.D_PUR_PO_HEADER H, DINESHMILLS.D_PUR_PO_DETAIL D\n"
                    + "WHERE D.PO_NO = H.PO_NO AND PO_DATE >= '2018-01-01' AND SUBSTRING(D.PO_NO,1,1) ='R' AND APPROVED =1 AND CANCELLED =0) AS P\n"
                    + "ON MIR.PO_NO = P.PO_NO\n"
                    + "LEFT JOIN\n"
                    + "(SELECT  H.GRN_NO,H.GRN_DATE,MIR_NO,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO,SUM(QTY),ROUND(SUM(QTY*LANDED_RATE),2) AS GRNINVAMT FROM DINESHMILLS.D_INV_GRN_HEADER H, DINESHMILLS.D_INV_GRN_DETAIL D\n"
                    + "WHERE D.GRN_NO = H.GRN_NO AND GRN_DATE >= '2020-01-01' AND SUBSTRING(D.GRN_NO,1,1) ='R' AND APPROVED =1 AND CANCELLED =0\n"
                    + "GROUP BY H.GRN_NO,H.GRN_DATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO) AS GRN\n"
                    + "ON GRN.MIR_NO = MIR.MIR_NO\n"
                    + "LEFT JOIN\n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PJ')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(GRN_NO,1,1) ='R'\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019)\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE) AS V\n"
                    + "ON GRN.GRN_NO = V.GRN_NO  AND GRN.PO_NO= V.PO_NO AND GRN.INVOICE_NO = V.INVOICE_NO AND V.INVOICE_DATE = GRN.INVOICE_DATE\n"
                    + "LEFT JOIN\n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    //+ "#AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(GRN_NO,1,1) ='R'\n" 
                    +"AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(PO_NO,1,2) ='RM'\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019)\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE\n"
                    + ") AS PY\n"
                    + "ON  GRN.GRN_NO = PY.GRN_NO  AND GRN.PO_NO= PY.PO_NO AND GRN.INVOICE_NO = PY.INVOICE_NO AND PY.INVOICE_DATE = GRN.INVOICE_DATE\n"
                    + "LEFT JOIN\n"
                    + "(SELECT P.PO_NO,P.PO_DATE,VOUCHER_NO,VOUCHER_DATE,VOU_AMOUNT,PAYMENT_TERM FROM\n"
                    + "(SELECT  DISTINCT H.PO_NO,PO_DATE,SUPP_NAME,SUPP_ID,PAYMENT_TERM FROM DINESHMILLS.D_PUR_PO_HEADER H, DINESHMILLS.D_PUR_PO_DETAIL D\n"
                    + "WHERE D.PO_NO = H.PO_NO AND PO_DATE >= '2019-01-01' AND SUBSTRING(D.PO_NO,1,1) ='R' AND APPROVED =1 AND CANCELLED =0) AS P\n"
                    + "LEFT JOIN\n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,PO_NO,PO_DATE,GRN_NO,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='2019-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(PO_NO,1,2) ='RM'\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019) AND GRN_NO =''\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,PO_NO,PO_DATE,GRN_NO) AS PY\n"
                    + "ON PY.PO_NO = P.PO_NO\n"
                    + "WHERE VOUCHER_NO IS NOT NULL\n"
                    + ") AS POPY\n"
                    + "ON  POPY.PO_NO = MIR.PO_NO\n"
                    + "WHERE PY.VOUCHER_NO IS NULL AND V.VOUCHER_NO IS NOT NULL";
            
            //System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("MIR_NO");//GSTIN_UIN
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("MIR_DATE"));//TRADE_NAME
                rowData[3] = rs.getString("SUPP_ID");
                rowData[4] = rs.getString("SUPP_NAME");                
                rowData[5] = rs.getString("PAYMENT_DAYS");
                rowData[6] = rs.getString("PAYMENT_TERM");//TAXABLE_VALUE
                rowData[7] = EITLERPGLOBAL.formatDate(rs.getString("DUE_DATE"));//HSN_CODE
                rowData[8] = rs.getString("INVOICE_NO");//GST_RATE
                rowData[9] = EITLERPGLOBAL.formatDate(rs.getString("INVOICE_DATE"));//IGST_AMT
                rowData[10] = rs.getString("INVOICE_AMOUNT");//CGST_AMT
                rowData[11] = rs.getString("PO_NO");//SGST_AMT
                rowData[12] = rs.getString("GRN_NO");//CESS
                rowData[13] = EITLERPGLOBAL.formatDate(rs.getString("GRN_DATE"));//POS
                
//                String Eligibility = "";
//                if(rs.getString("ITEM_ID").equals("99002001"))
//                {
//                    Eligibility = "Capital Goods";
//                }
//                else if(rs.getString("ITEM_ID").equals("99004001"))
//                {
//                    Eligibility = "Input Service";
//                }
//                else
//                {
//                    Eligibility = "Inputs";
//                }
                rowData[14] = rs.getString("INVOICE_AMOUNT");
                
                rowData[15] = rs.getString("PJV_NO");//IGST_AMT
                rowData[16] = EITLERPGLOBAL.formatDate(rs.getString("PJV_DATE"));//CGST_AMT
                rowData[17] = rs.getString("PJV_AMT");//SGST_AMT
                rowData[18] = rs.getString("GPY_NO");//CESS
                rowData[19] = EITLERPGLOBAL.formatDate(rs.getString("GPY_VOUCHER_DATE"));//CESS
                rowData[20] = rs.getString("GPY_AMT");//CESS
                rowData[21] = rs.getString("POPY_NO");//CESS
                rowData[22] = EITLERPGLOBAL.formatDate(rs.getString("POPY_VOUCHER_DATE"));//CESS
                rowData[23] = rs.getString("POPY_AMT");//CESS
                rowData[24] = rs.getString("POPY_PAYMENTTERM");//CESS
                
                DataModelB2BMIR.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GenerateMIRGeneral(String ORDER_BY) {
        
        try {
            String fromDate="";
            if(txtFromDate.getText().trim().equals("")){
                fromDate="2020-01-01";
            }else{
                fromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            String strSQL2 = "SELECT MIR.MIR_NO,MIR_DATE,MIR.SUPP_ID,MIR.SUPP_NAME,PAYMENT_DAYS,P.PAYMENT_TERM,DATE_ADD(MIR_DATE ,INTERVAL PAYMENT_DAYS DAY) AS DUE_DATE,\n"
                    + "MIR.INVOICE_NO,MIR.INVOICE_DATE,MIR.INVOICE_AMOUNT,GRN.PO_NO,GRN.GRN_NO,GRN.GRN_DATE,GRN.INVOICE_AMOUNT,\n"
                    + "V.VOUCHER_NO AS PJV_NO,V.VOUCHER_DATE AS PJV_DATE,V.VOU_AMOUNT AS PJV_AMT,\n"
                    + "PY.VOUCHER_NO AS GPY_NO,PY.VOUCHER_DATE AS GPY_VOUCHER_DATE,PY.VOU_AMOUNT AS GPY_AMT,\n"
                    + "POPY.VOUCHER_NO AS POPY_NO,POPY.VOUCHER_DATE AS POPY_VOUCHER_DATE,POPY.VOU_AMOUNT AS POPY_AMT,POPY.PAYMENT_TERM AS POPY_PAYMENTTERM\n"
                    + "FROM\n"
                    + "(SELECT  H.MIR_NO,H.MIR_DATE,H.SUPP_ID,SUPP_NAME,PAYMENT_DAYS,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO,SUM(GRN_RECD_QTY), ROUND(SUM(GRN_RECD_QTY*LANDED_RATE),2) AS MIRINVAMT FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D ,DINESHMILLS.D_COM_SUPP_MASTER S\n"
                    + "WHERE D.MIR_NO = H.MIR_NO AND MIR_DATE >= '"+fromDate+"' AND SUBSTRING(D.MIR_NO,1,1) ='A' AND H.APPROVED =1 AND H.CANCELLED =0 AND H.SUPP_ID = S.SUPPLIER_CODE\n"
                    + "GROUP BY H.MIR_NO,H.MIR_DATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO) AS MIR\n"
                    + "LEFT JOIN\n"
                    + "(SELECT  DISTINCT H.PO_NO,PO_DATE,SUPP_NAME,SUPP_ID,PAYMENT_TERM FROM DINESHMILLS.D_PUR_PO_HEADER H, DINESHMILLS.D_PUR_PO_DETAIL D\n"
                    + "WHERE D.PO_NO = H.PO_NO AND PO_DATE >= '2018-01-01' AND SUBSTRING(D.PO_NO,1,1) !='R' AND APPROVED =1 AND CANCELLED =0) AS P\n"
                    + "ON MIR.PO_NO = P.PO_NO\n"
                    + "LEFT JOIN\n"
                    + "(SELECT  H.GRN_NO,H.GRN_DATE,MIR_NO,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO,SUM(QTY),ROUND(SUM(QTY*LANDED_RATE),2) AS GRNINVAMT FROM DINESHMILLS.D_INV_GRN_HEADER H, DINESHMILLS.D_INV_GRN_DETAIL D\n"
                    + "WHERE D.GRN_NO = H.GRN_NO AND GRN_DATE >= '2020-01-01' AND SUBSTRING(D.GRN_NO,1,1) ='A' AND APPROVED =1 AND CANCELLED =0\n"
                    + "GROUP BY H.GRN_NO,H.GRN_DATE,SUPP_ID,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,PO_NO) AS GRN\n"
                    + "ON GRN.MIR_NO = MIR.MIR_NO\n"
                    + "LEFT JOIN\n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PJ')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(GRN_NO,1,1) ='A'\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019)\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE) AS V\n"
                    + "ON GRN.GRN_NO = V.GRN_NO  AND GRN.PO_NO= V.PO_NO AND GRN.INVOICE_NO = V.INVOICE_NO AND V.INVOICE_DATE = GRN.INVOICE_DATE\n"
                    + "LEFT JOIN\n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    //+ "#AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(GRN_NO,1,1) ='A'\n" 
                    +"AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(PO_NO,1,2) !='RM'\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019)\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,INVOICE_NO,INVOICE_DATE,PO_NO,PO_DATE\n"
                    + ") AS PY\n"
                    + "ON  GRN.GRN_NO = PY.GRN_NO  AND GRN.PO_NO= PY.PO_NO AND GRN.INVOICE_NO = PY.INVOICE_NO AND PY.INVOICE_DATE = GRN.INVOICE_DATE\n"
                    + "LEFT JOIN\n"
                    + "(SELECT P.PO_NO,P.PO_DATE,VOUCHER_NO,VOUCHER_DATE,VOU_AMOUNT,PAYMENT_TERM FROM\n"
                    + "(SELECT  DISTINCT H.PO_NO,PO_DATE,SUPP_NAME,SUPP_ID,PAYMENT_TERM FROM DINESHMILLS.D_PUR_PO_HEADER H, DINESHMILLS.D_PUR_PO_DETAIL D\n"
                    + "WHERE D.PO_NO = H.PO_NO AND PO_DATE >= '2019-01-01' AND SUBSTRING(D.PO_NO,1,1) !='R' AND APPROVED =1 AND CANCELLED =0) AS P\n"
                    + "LEFT JOIN\n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,PO_NO,PO_DATE,GRN_NO,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='2019-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND APPROVED =1 AND H.CANCELLED =0 AND SUBSTRING(PO_NO,1,2) ='RM'\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019) AND GRN_NO =''\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,PO_NO,PO_DATE,GRN_NO) AS PY\n"
                    + "ON PY.PO_NO = P.PO_NO\n"
                    + "WHERE VOUCHER_NO IS NOT NULL\n"
                    + ") AS POPY\n"
                    + "ON  POPY.PO_NO = MIR.PO_NO\n"
                    + "WHERE PY.VOUCHER_NO IS NULL AND V.VOUCHER_NO IS NOT NULL";
            
            //System.out.println("SQL "+strSQL2);
            
            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[30];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("MIR_NO");//GSTIN_UIN
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("MIR_DATE"));//TRADE_NAME
                rowData[3] = rs.getString("SUPP_ID");
                rowData[4] = rs.getString("SUPP_NAME");                
                rowData[5] = rs.getString("PAYMENT_DAYS");
                rowData[6] = rs.getString("PAYMENT_TERM");//TAXABLE_VALUE
                rowData[7] = EITLERPGLOBAL.formatDate(rs.getString("DUE_DATE"));//HSN_CODE
                rowData[8] = rs.getString("INVOICE_NO");//GST_RATE
                rowData[9] = EITLERPGLOBAL.formatDate(rs.getString("INVOICE_DATE"));//IGST_AMT
                rowData[10] = rs.getString("INVOICE_AMOUNT");//CGST_AMT
                rowData[11] = rs.getString("PO_NO");//SGST_AMT
                rowData[12] = rs.getString("GRN_NO");//CESS
                rowData[13] = EITLERPGLOBAL.formatDate(rs.getString("GRN_DATE"));//POS
                
//                String Eligibility = "";
//                if(rs.getString("ITEM_ID").equals("99002001"))
//                {
//                    Eligibility = "Capital Goods";
//                }
//                else if(rs.getString("ITEM_ID").equals("99004001"))
//                {
//                    Eligibility = "Input Service";
//                }
//                else
//                {
//                    Eligibility = "Inputs";
//                }
                rowData[14] = rs.getString("INVOICE_AMOUNT");
                
                rowData[15] = rs.getString("PJV_NO");//IGST_AMT
                rowData[16] = EITLERPGLOBAL.formatDate(rs.getString("PJV_DATE"));//CGST_AMT
                rowData[17] = rs.getString("PJV_AMT");//SGST_AMT
                rowData[18] = rs.getString("GPY_NO");//CESS
                rowData[19] = EITLERPGLOBAL.formatDate(rs.getString("GPY_VOUCHER_DATE"));//CESS
                rowData[20] = rs.getString("GPY_AMT");//CESS
                rowData[21] = rs.getString("POPY_NO");//CESS
                rowData[22] = EITLERPGLOBAL.formatDate(rs.getString("POPY_VOUCHER_DATE"));//CESS
                rowData[23] = rs.getString("POPY_AMT");//CESS
                rowData[24] = rs.getString("POPY_PAYMENTTERM");//CESS
                
                DataModelGeneral.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);
            
        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
                
        
        
        
        
    }
    
    public void GenerateProcToPayAdv(String ORDER_BY) {
        
        try {
            String fromDate = "";
            if (txtFromDate.getText().trim().equals("")) {
                fromDate = "2020-01-01";
            } else {
                fromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            String strSQL2 = "SELECT DISTINCT * FROM \n"
                    + "(SELECT  \n"
                    + "PRH.REQ_NO,PRH.REQ_DATE,PRH.APPROVED_DATE,DEPT_DESC,USER_NAME,PRD.ITEM_CODE,ITEM_DESCRIPTION,ITEM_EXTRA_DESC,SUM(REQ_QTY) AS REQ_QTY,UOM.UNIT_DESC\n"
                    + "FROM DINESHMILLS.D_INV_REQ_DETAIL PRD, DINESHMILLS.D_INV_REQ_HEADER PRH,DINESHMILLS.D_INV_ITEM_MASTER IM,\n"
                    + "(SELECT PARA_CODE, M.DESC AS UNIT_DESC FROM DINESHMILLS.D_COM_PARAMETER_MAST M WHERE PARA_ID = 'UNIT') AS UOM,\n"
                    + "(SELECT DEPT_ID,DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER) AS DM,\n"
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) AS UM\n"
                    + "WHERE PRD.REQ_NO = PRH.REQ_NO AND REQ_DATE >='2021-04-01' AND PRH.REQ_DATE <='"+EITLERPGLOBAL.FinToDateDB+"'\n"
                    + "AND PRH.CANCELED =0 AND PRH.APPROVED =1 AND PRH.COMPANY_ID = PRD.COMPANY_ID  AND PRD.ITEM_CODE= IM.ITEM_ID\n"
                    + "AND UOM.PARA_CODE = PRD.UNIT\n"
                    + "AND DEST_DEPT_ID = DM.DEPT_ID\n"
                    + "AND BUYER = UM.USER_ID\n"
                    + "GROUP BY PRH.REQ_NO,PRH.REQ_DATE,PRH.APPROVED_DATE,PRD.ITEM_CODE,ITEM_EXTRA_DESC) AS PR\n"
                    + "LEFT JOIN \n"
                    + "(\n"
                    + "\n"
                    + "SELECT * FROM\n"
                    + "(\n"
                    + "SELECT IH.INDENT_NO,INDENT_DATE,IH.APPROVED_DATE,IH.APPROVED,\n"
                    + "MR_NO,ITEM_CODE,ITEM_DESCRIPTION,ITEM_EXTRA_DESC,ID.LAST_PO_NO,ID.LAST_PO_DATE,SUM(ID.LAST_PO_QTY) AS LAST_PO_QTY,AVG(ID.LAST_GRN_RATE) AS LAST_GRN_RATE,ID.LAST_SUPP_ID,BUYER,USER_NAME,FOR_DEPT_ID,DEPT_DESC\n"
                    + "FROM DINESHMILLS.D_INV_INDENT_DETAIL ID,DINESHMILLS.D_INV_INDENT_HEADER IH,DINESHMILLS.D_INV_ITEM_MASTER IM,\n"
                    + "(SELECT PARA_CODE, M.DESC AS UNIT_DESC FROM DINESHMILLS.D_COM_PARAMETER_MAST M WHERE PARA_ID = 'UNIT'  ) AS UOM,\n"
                    + "(SELECT DEPT_ID,DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER) AS DM,\n"
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) AS UM\n"
                    + "WHERE IH.INDENT_NO = ID.INDENT_NO AND IH.INDENT_DATE >='2021-04-01' AND IH.INDENT_DATE <='"+EITLERPGLOBAL.FinToDateDB+"' \n"
                    + "\n"
                    + "AND IH.CANCELED =0 AND IH.APPROVED = 1 AND IH.COMPANY_ID =ID.COMPANY_ID AND MR_NO !=''\n"
                    + "AND ID.ITEM_CODE= IM.ITEM_ID\n"
                    + "AND UOM.PARA_CODE = ID.UNIT\n"
                    + "AND FOR_DEPT_ID = DM.DEPT_ID\n"
                    + "AND BUYER = UM.USER_ID\n"
                    + "GROUP BY IH.INDENT_NO,INDENT_DATE,IH.APPROVED_DATE,IH.APPROVED,MR_NO,ITEM_CODE,ID.LAST_PO_NO,ID.LAST_PO_DATE,ID.LAST_SUPP_ID,BUYER,USER_NAME,FOR_DEPT_ID,DEPT_DESC\n"
                    + ") AS I\n"
                    + "LEFT JOIN\n"
                    + "(SELECT SUPPLIER_CODE,SUPP_NAME FROM DINESHMILLS.D_COM_SUPP_MASTER WHERE LENGTH(SUPPLIER_CODE) =6 ) AS SM\n"
                    + "ON SM.SUPPLIER_CODE = LAST_SUPP_ID) AS IND\n"
                    + "ON PR.REQ_NO = MR_NO AND PR.ITEM_CODE  = IND.ITEM_CODE\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(\n"
                    + "\n"
                    + "SELECT DISTINCT * FROM (SELECT MAX(RH.APPROVAL_NO) AS APPROVAL_NO,MAX(RH.APPROVAL_DATE),INDENT_NO,ITEM_ID,ITEM_EXTRA_DESC,APPROVED_DATE,SUPP_ID FROM DINESHMILLS.D_PUR_RATE_APPROVAL_HEADER RH,DINESHMILLS.D_PUR_RATE_APPROVAL_DETAIL RD\n"
                    + "WHERE RH.APPROVAL_NO = RD.APPROVAL_NO AND RH.APPROVAL_DATE >='2021-04-01' AND RH.APPROVAL_DATE <='"+EITLERPGLOBAL.FinToDateDB+"'\n"
                    + "AND INDENT_NO !='' AND APPROVED_DATE != '0000-00-00'\n"
                    + "GROUP BY INDENT_NO,ITEM_ID) AS  RA\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PARTY_ID,SUPPLIER_CODE,PARTY_NAME FROM DINESHMILLS.D_COM_PARTY ) AS SM\n"
                    + "ON RA.SUPP_ID = SM.PARTY_ID) AS RIA\n"
                    + "ON IND.INDENT_NO = RIA.INDENT_NO\n"
                    + "AND IND.ITEM_CODE = RIA.ITEM_ID\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(\n"
                    + "SELECT INDENT_NO,ITEM_ID,MAX(PO_NO) AS PO_NO,MAX(PO_DATE) AS PO_DATE,COUNT(PO_NO) AS CNT_PO,GROUP_CONCAT(PO_NO) AS TOT_PO,GROUP_CONCAT(PO_DATE) AS TT_PODATE ,AVG(QTY) AS QTY,AVG(RATE) AS RATE,AVG(TOTAL_AMOUNT) AS TOTAL_AMOUNT,MAX(PO_APPROVED_DATE) AS PO_APPROVED_DATE,MAX(DELIVERY_DATE) AS DELIVERY_DATE,PAYMENT_TERM FROM \n"
                    + "\n"
                    + "(\n"
                    + "\n"
                    + "SELECT  H.PO_NO,PO_DATE,SUPP_NAME,SUPP_ID,ITEM_ID,ITEM_DESC,SUM(QTY) AS QTY,AVG(RATE) AS RATE,SUM(D.TOTAL_AMOUNT) AS TOTAL_AMOUNT,APPROVED_DATE AS PO_APPROVED_DATE,DELIVERY_DATE,PAYMENT_TERM,INDENT_NO FROM DINESHMILLS.D_PUR_PO_HEADER H, DINESHMILLS.D_PUR_PO_DETAIL D\n"
                    + "WHERE D.PO_NO = H.PO_NO AND PO_DATE >= '2021-01-01' AND CANCELLED =0 AND INDENT_NO != '' AND APPROVED =1 AND CANCELLED =0\n"
                    + "GROUP BY H.PO_NO,PO_DATE,ITEM_ID,INDENT_NO\n"
                    + ") AS M\n"
                    + "GROUP BY INDENT_NO,ITEM_ID) AS PO\n"
                    + "ON IND.INDENT_NO = PO.INDENT_NO\n"
                    + "AND IND.ITEM_CODE = PO.ITEM_ID\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PO_NO,ITEM_ID,MAX(MIR_NO) AS MIR_NO,MAX(MIR_DATE) AS MIR_DATE,MAX(MIR_APPROVED_DATE) AS MIR_APPROVED_DATE, COUNT(MIR_NO) CNT_MIR,GROUP_CONCAT(\n"
                    + "CONCAT(MIR_NO,' (',MIR_DATE,')')) AS MULTI_MIR_DETAIL, SUM(RECEIVED_QTY) AS RECEIVED_QTY  FROM \n"
                    + "\n"
                    + "(SELECT H.MIR_NO ,H.MIR_DATE,APPROVED_DATE AS MIR_APPROVED_DATE,ITEM_ID,SUM(RECEIVED_QTY) AS RECEIVED_QTY,PO_NO FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D\n"
                    + "WHERE D.MIR_NO = H.MIR_NO AND MIR_DATE >= '2021-04-01' AND H.CANCELLED =0 AND H.COMPANY_ID = D.COMPANY_ID AND PO_NO !='' AND H.APPROVED =1 \n"
                    + "GROUP BY H.MIR_NO,H.MIR_DATE,APPROVED_DATE ,ITEM_ID,PO_NO) AS MN\n"
                    + "GROUP BY PO_NO,ITEM_ID) AS MIR\n"
                    + "ON MIR.PO_NO = PO.PO_NO\n"
                    + "AND MIR.ITEM_ID = PO.ITEM_ID\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "\n"
                    + "(\n"
                    + "\n"
                    + "SELECT PO_NO,ITEM_ID,MAX(GRN_NO) AS GRN_NO,MAX(GRN_DATE) AS GRN_DATE,MAX(GRN_APPROVED_DATE) AS GRN_APPROVED_DATE, COUNT(GRN_NO) CNT_GRN,GROUP_CONCAT(\n"
                    + "CONCAT(GRN_NO,' (',GRN_DATE,')')) AS MULTI_GRN_DETAIL, SUM(QTY) AS QTY ,SUM(GRNINVAMT) AS GRNINVAMT,SUM(ROUND((LANDED_RATE),2)) AS LANDED_RATE FROM \n"
                    + "\n"
                    + "(SELECT  H.GRN_NO,H.GRN_DATE,MIR_NO,PO_NO,SUM(QTY) AS QTY,SUM(ROUND((QTY*LANDED_RATE),2)) AS GRNINVAMT,SUM(ROUND((LANDED_RATE),2)) AS LANDED_RATE,ITEM_ID,\n"
                    + "MAX(APPROVED_DATE) AS GRN_APPROVED_DATE\n"
                    + " FROM DINESHMILLS.D_INV_GRN_HEADER H, DINESHMILLS.D_INV_GRN_DETAIL D\n"
                    + "WHERE D.GRN_NO = H.GRN_NO AND GRN_DATE >= '2021-04-01' AND GRN_DATE <= '"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED =0 AND PO_NO !=''\n"
                    + "GROUP BY H.GRN_NO,H.GRN_DATE,MIR_NO,PO_NO,ITEM_ID\n"
                    + ") AS G\n"
                    + "GROUP BY PO_NO,ITEM_ID\n"
                    + "\n"
                    + ") AS GRN\n"
                    + "ON GRN.PO_NO = PO.PO_NO\n"
                    + "AND GRN.ITEM_ID = PO.ITEM_ID\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PO_NO,MAX(VOUCHER_NO),MAX(VOUCHER_DATE),COUNT(VOUCHER_NO) AS  CNT_VOU,GROUP_CONCAT(\n"
                    + "CONCAT(VOUCHER_NO,' (',VOUCHER_DATE,')')) AS MULTI_VOU_DETAIL,SUM(VOU_AMOUNT) AS VOU_AMOUNT FROM \n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PJ')  AND H.CANCELLED =0  AND H.APPROVED =1\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019) AND COALESCE(GRN_NO,'') !='' AND  COALESCE(PO_NO,'') !=''\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE) AS V\n"
                    + "GROUP BY PO_NO) AS PJV\n"
                    + "ON PJV.PO_NO =PO.PO_NO\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PO_NO,MAX(VOUCHER_NO),MAX(VOUCHER_DATE),COUNT(VOUCHER_NO) AS  CNT_VOU,GROUP_CONCAT(\n"
                    + "CONCAT(VOUCHER_NO,' (',VOUCHER_DATE,')')) AS MULTI_VOU_DETAIL,SUM(VOU_AMOUNT) AS VOU_AMOUNT FROM \n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='2020-01-01' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND H.CANCELLED =0  AND H.APPROVED =1\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019) AND COALESCE(GRN_NO,'') !='' AND  COALESCE(PO_NO,'') !=''\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE) AS V\n"
                    + "GROUP BY PO_NO) AS PYV\n"
                    + "ON PYV.PO_NO =PO.PO_NO";

            System.out.println("SQL " + strSQL2);

            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[90];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("REQ_NO");
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("REQ_DATE"));
                rowData[3] = EITLERPGLOBAL.formatDate(rs.getString("APPROVED_DATE"));
                rowData[4] = rs.getString("DEPT_DESC");
                rowData[5] = rs.getString("USER_NAME");
                rowData[6] = rs.getString("ITEM_CODE");
                rowData[7] = rs.getString("ITEM_DESCRIPTION");
                rowData[8] = rs.getString("ITEM_EXTRA_DESC");
                rowData[9] = rs.getString("REQ_QTY");
                rowData[10] = rs.getString("UNIT_DESC");
                rowData[11] = rs.getString("INDENT_NO");
                rowData[12] = EITLERPGLOBAL.formatDate(rs.getString("INDENT_DATE"));
                rowData[13] = EITLERPGLOBAL.formatDate(rs.getString("APPROVED_DATE"));
                rowData[14] = rs.getString("APPROVED");
                rowData[15] = rs.getString("MR_NO");
                rowData[16] = rs.getString("ITEM_CODE");
                rowData[17] = rs.getString("ITEM_DESCRIPTION");
                rowData[18] = rs.getString("ITEM_EXTRA_DESC");
                rowData[19] = rs.getString("LAST_PO_NO");
                rowData[20] = EITLERPGLOBAL.formatDate(rs.getString("LAST_PO_DATE"));
                rowData[21] = rs.getString("LAST_PO_QTY");
                rowData[22] = rs.getString("LAST_GRN_RATE");
                rowData[23] = rs.getString("LAST_SUPP_ID");
                rowData[24] = rs.getString("BUYER");
                rowData[25] = rs.getString("USER_NAME");
                rowData[26] = rs.getString("FOR_DEPT_ID");
                rowData[27] = rs.getString("DEPT_DESC");
                rowData[28] = rs.getString("SUPPLIER_CODE");
                rowData[29] = rs.getString("SUPP_NAME");
                rowData[30] = rs.getString("APPROVAL_NO");
                rowData[31] = EITLERPGLOBAL.formatDate(rs.getString("MAX(RH.APPROVAL_DATE)"));
                rowData[32] = rs.getString("INDENT_NO");
                rowData[33] = rs.getString("ITEM_ID");
                rowData[34] = rs.getString("ITEM_EXTRA_DESC");
                rowData[35] = EITLERPGLOBAL.formatDate(rs.getString("APPROVED_DATE"));
                rowData[36] = rs.getString("SUPP_ID");
                rowData[37] = rs.getString("PARTY_ID");
                rowData[38] = rs.getString("SUPPLIER_CODE");
                rowData[39] = rs.getString("PARTY_NAME");
                rowData[40] = rs.getString("INDENT_NO");
                rowData[41] = rs.getString("ITEM_ID");
                rowData[42] = rs.getString("PO_NO");
                rowData[43] = EITLERPGLOBAL.formatDate(rs.getString("PO_DATE"));
                rowData[44] = rs.getString("CNT_PO");
                rowData[45] = rs.getString("TOT_PO");
                rowData[46] = EITLERPGLOBAL.formatDate(rs.getString("TT_PODATE"));
                rowData[47] = rs.getString("QTY");
                rowData[48] = rs.getString("RATE");
                rowData[49] = rs.getString("TOTAL_AMOUNT");
                rowData[50] = rs.getString("PO_APPROVED_DATE");
                rowData[51] = EITLERPGLOBAL.formatDate(rs.getString("DELIVERY_DATE"));
                rowData[52] = rs.getString("PAYMENT_TERM");
                rowData[53] = rs.getString("PO_NO");
                rowData[54] = rs.getString("ITEM_ID");
                rowData[55] = rs.getString("MIR_NO");
                rowData[56] = EITLERPGLOBAL.formatDate(rs.getString("MIR_DATE"));
                rowData[57] = EITLERPGLOBAL.formatDate(rs.getString("MIR_APPROVED_DATE"));
                rowData[58] = rs.getString("CNT_MIR");
                rowData[59] = rs.getString("MULTI_MIR_DETAIL");
                rowData[60] = rs.getString("RECEIVED_QTY");
                rowData[61] = rs.getString("PO_NO");
                rowData[62] = rs.getString("ITEM_ID");
                rowData[63] = rs.getString("GRN_NO");
                rowData[64] = EITLERPGLOBAL.formatDate(rs.getString("GRN_DATE"));
                rowData[65] = EITLERPGLOBAL.formatDate(rs.getString("GRN_APPROVED_DATE"));
                rowData[66] = rs.getString("CNT_GRN");
                rowData[67] = rs.getString("MULTI_GRN_DETAIL");
                rowData[68] = rs.getString("QTY");
                rowData[69] = rs.getString("GRNINVAMT");
                rowData[70] = rs.getString("LANDED_RATE");
                rowData[71] = rs.getString("PO_NO");
                rowData[72] = rs.getString("MAX(VOUCHER_NO)");
                rowData[73] = EITLERPGLOBAL.formatDate(rs.getString("MAX(VOUCHER_DATE)"));
                rowData[74] = rs.getString("CNT_VOU");
                rowData[75] = rs.getString("MULTI_VOU_DETAIL");
                rowData[76] = rs.getString("VOU_AMOUNT");
                rowData[77] = rs.getString("PO_NO");
                rowData[78] = rs.getString("MAX(VOUCHER_NO)");
                rowData[79] = EITLERPGLOBAL.formatDate(rs.getString("MAX(VOUCHER_DATE)"));
                rowData[80] = rs.getString("CNT_VOU");
                rowData[81] = rs.getString("MULTI_VOU_DETAIL");
                rowData[82] = rs.getString("VOU_AMOUNT");

                DataModelProcureToPayment.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
 
    }
    
    public void GenerateProcToPay(String ORDER_BY) {
        
        try {
            String fromDate = "";
            if (txtFromDate.getText().trim().equals("")) {
                fromDate = "2020-01-01";
            } else {
                fromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            }
            //,DATE_ADD(MIR_DATE ,INTERVAL PAYMENT_DAYS DAY) AS DUE_DATE
            String strSQL2 = "SELECT DISTINCT *,DATE_ADD(MIR_DATE ,INTERVAL PAYMENT_DAYS DAY) AS DUE_DATE FROM \n"
                    + "(SELECT  \n"
                    + "PRH.REQ_NO,PRH.REQ_DATE,PRH.APPROVED_DATE PR_APPROVED_DATE,DEPT_DESC,USER_NAME,PRD.ITEM_CODE,ITEM_DESCRIPTION,ITEM_EXTRA_DESC,SUM(REQ_QTY) AS REQ_QTY,UOM.UNIT_DESC\n"
                    + "FROM DINESHMILLS.D_INV_REQ_DETAIL PRD, DINESHMILLS.D_INV_REQ_HEADER PRH,DINESHMILLS.D_INV_ITEM_MASTER IM,\n"
                    + "(SELECT PARA_CODE, M.DESC AS UNIT_DESC FROM DINESHMILLS.D_COM_PARAMETER_MAST M WHERE PARA_ID = 'UNIT') AS UOM,\n"
                    + "(SELECT DEPT_ID,DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER) AS DM,\n"
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) AS UM\n"
                    + "WHERE PRD.REQ_NO = PRH.REQ_NO AND REQ_DATE >='"+fromDate+"' AND PRH.REQ_DATE <='"+EITLERPGLOBAL.FinToDateDB+"'\n"
                    + "AND PRH.CANCELED =0 AND PRH.APPROVED =1 AND PRH.COMPANY_ID = PRD.COMPANY_ID  AND PRD.ITEM_CODE= IM.ITEM_ID\n"
                    + "AND UOM.PARA_CODE = PRD.UNIT\n"
                    + "AND DEST_DEPT_ID = DM.DEPT_ID\n"
                    + "AND BUYER = UM.USER_ID\n"
                    + "GROUP BY PRH.REQ_NO,PRH.REQ_DATE,PRH.APPROVED_DATE,PRD.ITEM_CODE,ITEM_EXTRA_DESC) AS PR\n"
                    + "LEFT JOIN \n"
                    + "(\n"
                    + "\n"
                    + "SELECT * FROM\n"
                    + "(\n"
                    + "SELECT IH.INDENT_NO,INDENT_DATE,IH.APPROVED_DATE IND_APPROVED_DATE,IH.APPROVED,\n"
                    + "MR_NO,ITEM_CODE,ITEM_DESCRIPTION,ITEM_EXTRA_DESC,ID.LAST_PO_NO,ID.LAST_PO_DATE,SUM(ID.LAST_PO_QTY) AS LAST_PO_QTY,AVG(ID.LAST_GRN_RATE) AS LAST_GRN_RATE,ID.LAST_SUPP_ID,BUYER,USER_NAME,FOR_DEPT_ID,DEPT_DESC\n"
                    + "FROM DINESHMILLS.D_INV_INDENT_DETAIL ID,DINESHMILLS.D_INV_INDENT_HEADER IH,DINESHMILLS.D_INV_ITEM_MASTER IM,\n"
                    + "(SELECT PARA_CODE, M.DESC AS UNIT_DESC FROM DINESHMILLS.D_COM_PARAMETER_MAST M WHERE PARA_ID = 'UNIT'  ) AS UOM,\n"
                    + "(SELECT DEPT_ID,DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER) AS DM,\n"
                    + "(SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER) AS UM\n"
                    + "WHERE IH.INDENT_NO = ID.INDENT_NO AND IH.INDENT_DATE >='"+fromDate+"' AND IH.INDENT_DATE <='"+EITLERPGLOBAL.FinToDateDB+"' \n"
                    + "\n"
                    + "AND IH.CANCELED =0 AND IH.APPROVED = 1 AND IH.COMPANY_ID =ID.COMPANY_ID AND MR_NO !=''\n"
                    + "AND ID.ITEM_CODE= IM.ITEM_ID\n"
                    + "AND UOM.PARA_CODE = ID.UNIT\n"
                    + "AND FOR_DEPT_ID = DM.DEPT_ID\n"
                    + "AND BUYER = UM.USER_ID\n"
                    + "GROUP BY IH.INDENT_NO,INDENT_DATE,IH.APPROVED_DATE,IH.APPROVED,MR_NO,ITEM_CODE,ID.LAST_PO_NO,ID.LAST_PO_DATE,ID.LAST_SUPP_ID,BUYER,USER_NAME,FOR_DEPT_ID,DEPT_DESC\n"
                    + ") AS I\n"
                    + "LEFT JOIN\n"
                    + "(SELECT SUPPLIER_CODE,SUPP_NAME,PAYMENT_DAYS FROM DINESHMILLS.D_COM_SUPP_MASTER WHERE LENGTH(SUPPLIER_CODE) =6 ) AS SM\n"
                    + "ON SM.SUPPLIER_CODE = LAST_SUPP_ID) AS IND\n"
                    + "ON PR.REQ_NO = MR_NO AND PR.ITEM_CODE  = IND.ITEM_CODE\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(\n"
                    + "\n"
                    + "SELECT DISTINCT * FROM (SELECT MAX(RH.APPROVAL_NO) AS APPROVAL_NO,MAX(RH.APPROVAL_DATE),INDENT_NO,ITEM_ID,ITEM_EXTRA_DESC,APPROVED_DATE RIA_APPROVED_DATE,SUPP_ID FROM DINESHMILLS.D_PUR_RATE_APPROVAL_HEADER RH,DINESHMILLS.D_PUR_RATE_APPROVAL_DETAIL RD\n"
                    + "WHERE RH.APPROVAL_NO = RD.APPROVAL_NO AND RH.APPROVAL_DATE >='" + fromDate + "' AND RH.APPROVAL_DATE <='"+EITLERPGLOBAL.FinToDateDB+"'\n"
                    + "AND INDENT_NO !='' AND APPROVED_DATE != '0000-00-00'\n"
                    + "GROUP BY INDENT_NO,ITEM_ID) AS  RA\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PARTY_ID,SUPPLIER_CODE,PARTY_NAME FROM DINESHMILLS.D_COM_PARTY ) AS SM\n"
                    + "ON RA.SUPP_ID = SM.PARTY_ID) AS RIA\n"
                    + "ON IND.INDENT_NO = RIA.INDENT_NO\n"
                    + "AND IND.ITEM_CODE = RIA.ITEM_ID\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(\n"
                    + "SELECT INDENT_NO,ITEM_ID,MAX(PO_NO) AS PO_NO,MAX(PO_DATE) AS PO_DATE,COUNT(PO_NO) AS CNT_PO,GROUP_CONCAT(PO_NO) AS TOT_PO,GROUP_CONCAT(PO_DATE) AS TT_PODATE ,AVG(QTY) AS QTY,AVG(RATE) AS RATE,AVG(TOTAL_AMOUNT) AS TOTAL_AMOUNT,MAX(PO_APPROVED_DATE) AS PO_APPROVED_DATE,MAX(DELIVERY_DATE) AS DELIVERY_DATE,PAYMENT_TERM,PO_BUYER FROM \n"
                    + "\n"
                    + "(\n"
                    + "\n"
                    + "SELECT  H.PO_NO,PO_DATE,SUPP_NAME,SUPP_ID,ITEM_ID,ITEM_DESC,SUM(QTY) AS QTY,AVG(RATE) AS RATE,SUM(D.TOTAL_AMOUNT) AS TOTAL_AMOUNT,APPROVED_DATE AS PO_APPROVED_DATE,DELIVERY_DATE,PAYMENT_TERM,INDENT_NO,BUYER PO_BUYER FROM DINESHMILLS.D_PUR_PO_HEADER H, DINESHMILLS.D_PUR_PO_DETAIL D\n"
                    + "WHERE D.PO_NO = H.PO_NO AND PO_DATE >= '"+fromDate+"' AND CANCELLED =0 AND INDENT_NO != '' AND APPROVED =1 AND CANCELLED =0\n"
                    + "GROUP BY H.PO_NO,PO_DATE,ITEM_ID,INDENT_NO\n"
                    + ") AS M\n"
                    + "GROUP BY INDENT_NO,ITEM_ID) AS PO\n"
                    + "ON IND.INDENT_NO = PO.INDENT_NO\n"
                    + "AND IND.ITEM_CODE = PO.ITEM_ID\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PO_NO,ITEM_ID,MAX(MIR_NO) AS MIR_NO,MAX(MIR_DATE) AS MIR_DATE,MAX(MIR_APPROVED_DATE) AS MIR_APPROVED_DATE, COUNT(MIR_NO) CNT_MIR,GROUP_CONCAT(\n"
                    + "CONCAT(MIR_NO,' (',MIR_DATE,')')) AS MULTI_MIR_DETAIL, SUM(RECEIVED_QTY) AS RECEIVED_QTY  FROM \n"
                    + "\n"
                    + "(SELECT H.MIR_NO ,H.MIR_DATE,APPROVED_DATE AS MIR_APPROVED_DATE,ITEM_ID,SUM(RECEIVED_QTY) AS RECEIVED_QTY,PO_NO FROM DINESHMILLS.D_INV_MIR_HEADER H, DINESHMILLS.D_INV_MIR_DETAIL D\n"
                    + "WHERE D.MIR_NO = H.MIR_NO AND MIR_DATE >= '"+fromDate+"' AND H.CANCELLED =0 AND H.COMPANY_ID = D.COMPANY_ID AND PO_NO !='' AND H.APPROVED =1 \n"
                    + "GROUP BY H.MIR_NO,H.MIR_DATE,APPROVED_DATE ,ITEM_ID,PO_NO) AS MN\n"
                    + "GROUP BY PO_NO,ITEM_ID) AS MIR\n"
                    + "ON MIR.PO_NO = PO.PO_NO\n"
                    + "AND MIR.ITEM_ID = PO.ITEM_ID\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "\n"
                    + "(\n"
                    + "\n"
                    + "SELECT PO_NO,ITEM_ID,MAX(GRN_NO) AS GRN_NO,MAX(GRN_DATE) AS GRN_DATE,MAX(GRN_APPROVED_DATE) AS GRN_APPROVED_DATE, COUNT(GRN_NO) CNT_GRN,GROUP_CONCAT(\n"
                    + "CONCAT(GRN_NO,' (',GRN_DATE,')')) AS MULTI_GRN_DETAIL, SUM(QTY) AS QTY ,SUM(GRNINVAMT) AS GRNINVAMT,SUM(ROUND((LANDED_RATE),2)) AS LANDED_RATE FROM \n"
                    + "\n"
                    + "(SELECT  H.GRN_NO,H.GRN_DATE,MIR_NO,PO_NO,SUM(QTY) AS QTY,SUM(ROUND((QTY*LANDED_RATE),2)) AS GRNINVAMT,SUM(ROUND((LANDED_RATE),2)) AS LANDED_RATE,ITEM_ID,\n"
                    + "MAX(APPROVED_DATE) AS GRN_APPROVED_DATE\n"
                    + " FROM DINESHMILLS.D_INV_GRN_HEADER H, DINESHMILLS.D_INV_GRN_DETAIL D\n"
                    + "WHERE D.GRN_NO = H.GRN_NO AND GRN_DATE >= '"+fromDate+"' AND GRN_DATE <= '"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED =0 AND PO_NO !=''\n"
                    + "GROUP BY H.GRN_NO,H.GRN_DATE,MIR_NO,PO_NO,ITEM_ID\n"
                    + ") AS G\n"
                    + "GROUP BY PO_NO,ITEM_ID\n"
                    + "\n"
                    + ") AS GRN\n"
                    + "ON GRN.PO_NO = PO.PO_NO\n"
                    + "AND GRN.ITEM_ID = PO.ITEM_ID\n"
                    + "\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PO_NO,MAX(VOUCHER_NO),MAX(VOUCHER_DATE),COUNT(VOUCHER_NO) AS  CNT_VOU,GROUP_CONCAT(\n"
                    + "CONCAT(VOUCHER_NO,' (',VOUCHER_DATE,')')) AS MULTI_VOU_DETAIL,SUM(VOU_AMOUNT) AS VOU_AMOUNT FROM \n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='"+fromDate+"' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PJ')  AND H.CANCELLED =0  AND H.APPROVED =1\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019) AND COALESCE(GRN_NO,'') !='' AND  COALESCE(PO_NO,'') !=''\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE) AS V\n"
                    + "GROUP BY PO_NO) AS PJV\n"
                    + "ON PJV.PO_NO =PO.PO_NO\n"
                    + "\n"
                    + "\n"
                    + "LEFT JOIN\n"
                    + "(SELECT PO_NO,MAX(VOUCHER_NO) PY_VOUCHER_NO ,MAX(VOUCHER_DATE) PY_VOUCHER_DATE,COUNT(VOUCHER_NO) AS  CNT_PY_VOU,GROUP_CONCAT(\n"
                    + "CONCAT(VOUCHER_NO,' (',VOUCHER_DATE,')')) AS MULTI_PY_VOU_DETAIL,SUM(VOU_AMOUNT) AS VOU_AMOUNT FROM \n"
                    + "(SELECT H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE,SUM(AMOUNT) AS VOU_AMOUNT FROM FINANCE.D_FIN_VOUCHER_HEADER H,FINANCE.D_FIN_VOUCHER_DETAIL D\n"
                    + "WHERE H.VOUCHER_NO = D.VOUCHER_NO\n"
                    + "AND H.VOUCHER_DATE >='"+fromDate+"' AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY')  AND H.CANCELLED =0  AND H.APPROVED =1\n"
                    + "AND MAIN_ACCOUNT_CODE IN (125033,125019) AND COALESCE(GRN_NO,'') !='' AND  COALESCE(PO_NO,'') !=''\n"
                    + "GROUP BY H.VOUCHER_NO,VOUCHER_DATE,GRN_NO,GRN_DATE,PO_NO,PO_DATE) AS V\n"
                    + "GROUP BY PO_NO) AS PYV\n"
                    + "ON PYV.PO_NO =PO.PO_NO";

            System.out.println("SQL " + strSQL2);

            ResultSet rs = data.getResult(strSQL2);
            int cnt = 1;
            String pName = "";
            while (!rs.isAfterLast()) {
//SR_N0, GSTIN_UIN, SUPP_ID, TRADE_NAME, TYPE, INVOICE_NO, INVOICE_DATE, INVOICE_AMT, HSN_CODE, ITEM_ID, TAXABLE_VALUE, GST_RATE, IGST_RATE, IGST_AMT, CGST_RATE, CGST_AMT, SGST_RATE, SGST_AMT, CESS, POS, DIFF_PER_TAX_RATE, SUPPLY_COVER, COMMON_CREDIT, GRN_NO, GRN_DATE, QTY, UNIT, RATE, TOTAL_AMOUNT, NET_AMOUNT
                Object[] rowData = new Object[90];
                // rowData[0]=rs.getString("");
                rowData[0] = cnt++;
                rowData[1] = rs.getString("REQ_NO");
                rowData[2] = EITLERPGLOBAL.formatDate(rs.getString("REQ_DATE"));
                rowData[3] = EITLERPGLOBAL.formatDate(rs.getString("PR_APPROVED_DATE"));
                rowData[4] = rs.getString("DEPT_DESC");
                rowData[5] = rs.getString("USER_NAME");
                rowData[6] = rs.getString("ITEM_CODE");
                rowData[7] = rs.getString("ITEM_DESCRIPTION");
                //rowData[8] = rs.getString("ITEM_EXTRA_DESC");
                rowData[8] = rs.getString("UNIT_DESC");
                rowData[9] = rs.getString("REQ_QTY");                
                
                rowData[10] = rs.getString("INDENT_NO");
                //rowData[12] = EITLERPGLOBAL.formatDate(rs.getString("INDENT_DATE"));
                rowData[11] = EITLERPGLOBAL.formatDate(rs.getString("IND_APPROVED_DATE"));
                //rowData[14] = rs.getString("APPROVED");
                rowData[12] = rs.getString("LAST_SUPP_ID");
                rowData[13] = rs.getString("LAST_PO_NO");
                rowData[14] = EITLERPGLOBAL.formatDate(rs.getString("LAST_PO_DATE"));
                //rowData[15] = rs.getString("MR_NO");
                rowData[15] = rs.getString("ITEM_CODE");
                rowData[16] = rs.getString("ITEM_DESCRIPTION");
                //rowData[18] = rs.getString("ITEM_EXTRA_DESC");                
                rowData[17] = rs.getString("LAST_PO_QTY");
                rowData[18] = rs.getString("UNIT_DESC");    
                rowData[19] = rs.getString("LAST_GRN_RATE");
                
                //rowData[24] = rs.getString("BUYER");
                rowData[20] = data.getStringValueFromDB("SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID="+rs.getString("PO_BUYER")+"");//rs.getString("USER_NAME");
                //rowData[26] = rs.getString("FOR_DEPT_ID");
                //rowData[27] = rs.getString("DEPT_DESC");
                rowData[21] = rs.getString("SUPPLIER_CODE");
                rowData[22] = rs.getString("SUPP_NAME");
                rowData[23] = rs.getString("APPROVAL_NO");
                rowData[24] = EITLERPGLOBAL.formatDate(rs.getString("MAX(RH.APPROVAL_DATE)"));
                rowData[25] = EITLERPGLOBAL.formatDate(rs.getString("RIA_APPROVED_DATE"));//RIA_APPROVED_DATE
                //rowData[32] = rs.getString("INDENT_NO");
                //rowData[35] = EITLERPGLOBAL.formatDate(rs.getString("APPROVED_DATE"));
                //rowData[36] = rs.getString("SUPP_ID");
                //rowData[37] = rs.getString("PARTY_ID");
                //rowData[38] = rs.getString("SUPPLIER_CODE");
                //rowData[39] = rs.getString("PARTY_NAME");
                //rowData[40] = rs.getString("INDENT_NO");
                //rowData[41] = rs.getString("ITEM_ID");
                rowData[26] = rs.getString("PO_NO");
                rowData[27] = rs.getString("ITEM_ID");
                rowData[28] = rs.getString("ITEM_EXTRA_DESC");                
                //rowData[43] = EITLERPGLOBAL.formatDate(rs.getString("PO_DATE"));
                //rowData[44] = rs.getString("CNT_PO");
                //rowData[45] = rs.getString("TOT_PO");
                //rowData[46] = EITLERPGLOBAL.formatDate(rs.getString("TT_PODATE"));
                rowData[29] = rs.getString("QTY");
                rowData[30] = rs.getString("UNIT_DESC");    
                rowData[31] = rs.getString("RATE");
                rowData[32] = rs.getString("TOTAL_AMOUNT");
                rowData[33] = rs.getString("PO_APPROVED_DATE");
                rowData[34] = EITLERPGLOBAL.formatDate(rs.getString("DELIVERY_DATE"));                
                rowData[35] = rs.getString("PAYMENT_TERM");
                //rowData[53] = rs.getString("PO_NO");
                //rowData[54] = rs.getString("ITEM_ID");
                rowData[36] = rs.getString("MIR_NO");
                rowData[37] = EITLERPGLOBAL.formatDate(rs.getString("MIR_DATE"));
                //rowData[57] = EITLERPGLOBAL.formatDate(rs.getString("MIR_APPROVED_DATE"));
                rowData[38] = rs.getString("CNT_MIR");
                rowData[39] = rs.getString("MULTI_MIR_DETAIL");
                rowData[40] = rs.getString("RECEIVED_QTY");
                //rowData[61] = rs.getString("PO_NO");
                //rowData[62] = rs.getString("ITEM_ID");
                rowData[41] = rs.getString("GRN_NO");
                //rowData[64] = EITLERPGLOBAL.formatDate(rs.getString("GRN_DATE"));
                //rowData[65] = EITLERPGLOBAL.formatDate(rs.getString("GRN_APPROVED_DATE"));
                rowData[42] = rs.getString("CNT_GRN");
                rowData[43] = rs.getString("MULTI_GRN_DETAIL");
                rowData[44] = rs.getString("QTY");
                //rowData[69] = rs.getString("GRNINVAMT");
                //rowData[70] = rs.getString("LANDED_RATE");
                //rowData[71] = rs.getString("PO_NO");
                rowData[45] =EITLERPGLOBAL.formatDate(rs.getString("DUE_DATE"));
                rowData[46] = rs.getString("MAX(VOUCHER_NO)");
                rowData[47] = EITLERPGLOBAL.formatDate(rs.getString("MAX(VOUCHER_DATE)"));
                rowData[48] = rs.getString("CNT_VOU");
                rowData[49] = rs.getString("MULTI_VOU_DETAIL");
                rowData[50] = rs.getString("PY_VOUCHER_NO");
                rowData[51] = rs.getString("CNT_PY_VOU");
                rowData[52] = rs.getString("MULTI_PY_VOU_DETAIL");
                rowData[53] =data.getStringValueFromDB("SELECT CHEQUE_NO FROM FINANCE.D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='"+rs.getString("PY_VOUCHER_NO")+"'");
                rowData[54] =EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT CHEQUE_DATE FROM FINANCE.D_FIN_VOUCHER_HEADER WHERE VOUCHER_NO='" + rs.getString("PY_VOUCHER_NO") + "'"));
                rowData[55] ="";
                //rowData[74] = rs.getString("CNT_VOU");
                //rowData[75] = rs.getString("MULTI_VOU_DETAIL");
                //rowData[76] = rs.getString("VOU_AMOUNT");
                //rowData[77] = rs.getString("PO_NO");                
                //rowData[79] = EITLERPGLOBAL.formatDate(rs.getString("MAX(VOUCHER_DATE)"));
                //rowData[80] = rs.getString("CNT_VOU");
                //rowData[81] = rs.getString("MULTI_VOU_DETAIL");
                //rowData[82] = rs.getString("VOU_AMOUNT");

                DataModelProcureToPayment.addRow(rowData);
                rs.next();
            }
            rs.close();
            //Object[] rowData2 = new Object[25];
            //DataModelB2BMIR.addRow(rowData2);

        } catch (SQLException sqe) {
            sqe.printStackTrace();
        }
 
    }
    
    
}
