 /*
  * SelectMIR.java
  *
  * Created on May 12, 2004, 11:11 AM
  */

package EITLERP.Stores;

/**
 *
 * @author  nrpithva
 */
/*<APPLET CODE=SelectMIR.Class HEIGHT=400 WIDTH=700></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;

public class SelectMIR extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();
    
    public boolean Cancelled=true;
    public HashMap colSelItems=new HashMap();
    private JDialog aDialog;
    public int ModuleID=0;
    private String SelMIRNo="";
    public int MIRType=1;
    
    public boolean CopyHeader=true;
    public clsMIRGen ObjMIRGen;
    public clsMIRRaw ObjMIRRaw;
    
    private EITLComboModel cmbDeptModel;
    private int SelDeptID=0;
    
    public SelectMIR() {
        System.gc();
        initComponents();
        FormatGrid();
        GenerateCombo();
        
        int DeptID=clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        EITLERPGLOBAL.setComboIndex(cmbDept,DeptID);
        
        txtMIRNo.requestFocus();
    }
    
    /** Initializes the applet SelectMIR */
    public void init() {
        System.gc();
        initComponents();
        FormatGrid();
        GenerateCombo();
        
        int DeptID=clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        EITLERPGLOBAL.setComboIndex(cmbDept,DeptID);
        
        txtMIRNo.requestFocus();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMIRNo = new javax.swing.JTextField();
        cmdShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();
        chkCopyHeader = new javax.swing.JCheckBox();
        cmbDept = new javax.swing.JComboBox();
        chkDept = new javax.swing.JCheckBox();

        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Select MIR Items from the List");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 212, 15);

        jLabel2.setDisplayedMnemonic('M');
        jLabel2.setLabelFor(txtMIRNo);
        jLabel2.setText("MIR No.");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(14, 80, 56, 15);

        txtMIRNo.setNextFocusableComponent(cmdShow);
        txtMIRNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMIRNoKeyPressed(evt);
            }
        });

        getContentPane().add(txtMIRNo);
        txtMIRNo.setBounds(76, 78, 106, 21);

        cmdShow.setMnemonic('S');
        cmdShow.setText("Show Items");
        cmdShow.setNextFocusableComponent(Table);
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });

        getContentPane().add(cmdShow);
        cmdShow.setBounds(190, 78, 110, 22);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdSelectAll);
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(12, 132, 660, 218);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(8, 118, 662, 6);

        cmdOK.setMnemonic('O');
        cmdOK.setText("OK");
        cmdOK.setNextFocusableComponent(cmdCancel);
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        getContentPane().add(cmdOK);
        cmdOK.setBounds(502, 360, 78, 25);

        cmdCancel.setMnemonic('C');
        cmdCancel.setText("Cancel");
        cmdCancel.setNextFocusableComponent(cmdOK);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(586, 360, 79, 25);

        cmdSelectAll.setMnemonic('A');
        cmdSelectAll.setText("Select All");
        cmdSelectAll.setNextFocusableComponent(cmdClearAll);
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSelectAll);
        cmdSelectAll.setBounds(16, 362, 106, 25);

        cmdClearAll.setMnemonic('L');
        cmdClearAll.setText("Clear All");
        cmdClearAll.setNextFocusableComponent(cmdOK);
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });

        getContentPane().add(cmdClearAll);
        cmdClearAll.setBounds(134, 362, 102, 25);

        chkCopyHeader.setMnemonic('C');
        chkCopyHeader.setSelected(true);
        chkCopyHeader.setText("Copy Header Information");
        getContentPane().add(chkCopyHeader);
        chkCopyHeader.setBounds(502, 10, 170, 23);

        cmbDept.setEnabled(false);
        getContentPane().add(cmbDept);
        cmbDept.setBounds(76, 48, 224, 24);

        chkDept.setText("Dept");
        chkDept.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkDeptStateChanged(evt);
            }
        });

        getContentPane().add(chkDept);
        chkDept.setBounds(10, 49, 60, 23);

    }//GEN-END:initComponents
    
    private void chkDeptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkDeptStateChanged
        // TODO add your handling code here:
        if(chkDept.isSelected()) {
            cmbDept.setEnabled(true);
        }
        else {
            cmbDept.setEnabled(false);
        }
    }//GEN-LAST:event_chkDeptStateChanged
    
    private void txtMIRNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMIRNoKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            String strSQL="";
            LOV aList=new LOV();
            
            SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
            if(chkDept.isSelected()) {
                strSQL="SELECT DISTINCT(A.MIR_NO) AS MIR_NO,DATE_FORMAT(A.MIR_DATE,'%d/%m/%Y') AS DATE,D.DEPT_DESC,B.QTY,B.REJECTED_QTY ";
                strSQL+="FROM ";
                strSQL+="D_INV_MIR_HEADER A, ";
                strSQL+="D_INV_MIR_DETAIL B ";
                strSQL+="LEFT JOIN D_INV_GRN_DETAIL G ON (G.MIR_NO=B.MIR_NO AND G.MIR_SR_NO=B.SR_NO AND G.MIR_TYPE=B.MIR_TYPE AND G.GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE GRN_NO=G.GRN_NO AND GRN_TYPE=G.GRN_TYPE AND CANCELLED=0)), "; //AND APPROVED=1
                strSQL+="D_COM_DEPT_MASTER D ";
                strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
                strSQL+="A.MIR_NO=B.MIR_NO AND ";
                strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ";
                strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                strSQL+="B.COMPANY_ID=D.COMPANY_ID AND B.DEPT_ID=D.DEPT_ID AND ";
                strSQL+="B.DEPT_ID="+SelDeptID+" AND A.MIR_TYPE="+MIRType+" ";
                strSQL+="GROUP BY B.MIR_NO,B.MIR_TYPE,B.SR_NO ";
                strSQL+="HAVING IF(SUM(G.QTY+G.REJECTED_QTY) IS NULL,0,SUM(G.QTY+G.REJECTED_QTY))<(B.QTY+B.REJECTED_QTY) ";
                
                aList.SQL=strSQL;
            } else {
                strSQL="SELECT DISTINCT(A.MIR_NO) AS MIR_NO,DATE_FORMAT(A.MIR_DATE,'%d/%m/%Y') AS DATE,D.DEPT_DESC,B.QTY,B.REJECTED_QTY ";
                strSQL+="FROM ";
                strSQL+="D_INV_MIR_HEADER A, ";
                strSQL+="D_INV_MIR_DETAIL B ";
                strSQL+="LEFT JOIN D_INV_GRN_DETAIL G ON (G.MIR_NO=B.MIR_NO AND G.MIR_SR_NO=B.SR_NO AND G.MIR_TYPE=B.MIR_TYPE AND G.GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE GRN_NO=G.GRN_NO AND GRN_TYPE=G.GRN_TYPE AND CANCELLED=0)), "; //AND APPROVED=1 
                strSQL+="D_COM_DEPT_MASTER D ";
                strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
                strSQL+="A.MIR_NO=B.MIR_NO AND ";
                strSQL+="A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ";
                strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                strSQL+="B.COMPANY_ID=D.COMPANY_ID AND B.DEPT_ID=D.DEPT_ID AND A.MIR_TYPE="+MIRType+" ";
                strSQL+="GROUP BY B.MIR_NO,B.MIR_TYPE,B.SR_NO ";
                strSQL+="HAVING IF(SUM(G.QTY+G.REJECTED_QTY) IS NULL,0,SUM(G.QTY+G.REJECTED_QTY))<(B.QTY+B.REJECTED_QTY) ";
                
                aList.SQL=strSQL;
            }
            
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtMIRNo.setText(aList.ReturnVal);
            }
        }
        //=========================================
    }//GEN-LAST:event_txtMIRNoKeyPressed
    
    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(false), i, 0);
        }
    }//GEN-LAST:event_cmdClearAllActionPerformed
    
    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++) {
            DataModel.setValueAt(Boolean.valueOf(true), i, 0);
        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()<=0) {
            Cancelled=true;
        }
        else {
            SetList();
            Cancelled=false;
        }
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        SelMIRNo=txtMIRNo.getText();
        
        String docStatus=clsMIRGen.getDocStatus(EITLERPGLOBAL.gCompanyID, SelMIRNo);
        
        if(!docStatus.trim().equals("")) {
            JOptionPane.showMessageDialog(null,docStatus);
            return;
        }
        
        FormatGrid();
        GenerateGrid();
        
        if(Table.getRowCount()==0&&docStatus.trim().equals("")) {
            JOptionPane.showMessageDialog(null,"No pending items found");
        }
    }//GEN-LAST:event_cmdShowActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JCheckBox chkCopyHeader;
    private javax.swing.JCheckBox chkDept;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtMIRNo;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=32;i++) {
            DataModel.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModel.addColumn(""); //0 Selection
        DataModel.addColumn("Sr.");//1
        DataModel.addColumn("Item ID");//2
        DataModel.addColumn("Item Name");//3
        DataModel.addColumn("Rate");//4
        DataModel.addColumn("Qty");//5
        DataModel.addColumn("Unit ID");//6
        DataModel.addColumn("Unit");//7
        DataModel.addColumn("BOE No.");//8
        DataModel.addColumn("BOE Sr.");//9
        DataModel.addColumn("BOE Date");//10
        DataModel.addColumn("Shade");//11
        DataModel.addColumn("W.MIE");//12
        DataModel.addColumn("Cases");//13
        DataModel.addColumn("Import Concessional");//14
        DataModel.addColumn("Material Code");//15
        DataModel.addColumn("Description");//16
        DataModel.addColumn("Quality No.");//17
        DataModel.addColumn("Page No.");//18
        DataModel.addColumn("Excess");//19
        DataModel.addColumn("Shortage");//20
        DataModel.addColumn("Chalan Qty");//21
        DataModel.addColumn("L.F. No.");//22
        DataModel.addColumn("Remarks");//23
        DataModel.addColumn("Gross Amount");//24
        DataModel.addColumn("Net Amount");//25
        DataModel.addColumn("P.O. No.");//26
        DataModel.addColumn("P.O. Sr.");//27
        DataModel.addColumn("Indent No.");//28
        DataModel.addColumn("Indent Sr.");//29
        DataModel.addColumn("STM No.");//30
        DataModel.addColumn("STM Sr.");//31
        DataModel.addColumn("P.O. Type");//32
        
        Rend.setCustomComponent(0,"CheckBox");
        Table.getColumnModel().getColumn(0).setCellRenderer(Rend);
        Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
    }
    
    private void SetList() {
        int SrNo=0;
        HashMap List=new HashMap();
        
        colSelItems.clear();
        
        if(MIRType==1) {
            clsMIRGen tmpObj=new clsMIRGen();
            ObjMIRGen=(clsMIRGen)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, txtMIRNo.getText());
        }
        else {
            clsMIRRaw tmpObj=new clsMIRRaw();
            ObjMIRRaw=(clsMIRRaw)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, txtMIRNo.getText());
        }
        
        CopyHeader=chkCopyHeader.isSelected();
        
        List=clsMIRRaw.getMIRItemList(EITLERPGLOBAL.gCompanyID, SelMIRNo,false,MIRType);
        //Scan the Table to get selected items
        for(int i=1;i<=List.size();i++) {
            clsMIRRawItem ObjItem=(clsMIRRawItem)List.get(Integer.toString(i));
            SrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
            
            //Search in the table for SrNo.
            for(int j=0;j<Table.getRowCount();j++) {
                if(Integer.parseInt(Table.getValueAt(j, 1).toString())==SrNo) {
                    if(Table.getValueAt(j,0).toString().equals("true")) {
                        //Selected Item
                        colSelItems.put(Integer.toString(colSelItems.size()+1),ObjItem);
                    }
                }
            }
        }
    }
    
    private void GenerateGrid() {
        HashMap List=new HashMap();
        String MIRNo=txtMIRNo.getText();
        
        if(!MIRNo.equals("")) {
            List=clsMIRRaw.getMIRItemList(EITLERPGLOBAL.gCompanyID, MIRNo,false,MIRType);
            
            for(int i=1;i<=List.size();i++) {
                clsMIRRawItem ObjItem=(clsMIRRawItem)List.get(Integer.toString(i));
                HashMap colLot=ObjItem.colMIRLot;
                Object[] rowData=new Object[33];
                
                rowData[0]=Boolean.valueOf(true); //By default not selected
                rowData[1]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
                rowData[2]=(String)ObjItem.getAttribute("ITEM_ID").getObj();
                rowData[3]=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,(String)ObjItem.getAttribute("ITEM_ID").getObj());
                rowData[4]=Double.toString(ObjItem.getAttribute("RATE").getVal());
                rowData[5]=Double.toString(ObjItem.getAttribute("QTY").getVal());
                rowData[6]=Integer.toString((int)ObjItem.getAttribute("UNIT").getVal());
                rowData[7]=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int)ObjItem.getAttribute("UNIT").getVal());
                rowData[8]=(String) ObjItem.getAttribute("BOE_NO").getObj();
                rowData[9]=(String) ObjItem.getAttribute("BOE_SR_NO").getObj();
                rowData[10]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("BOE_DATE").getObj());
                rowData[11]=(String)ObjItem.getAttribute("SHADE").getObj();
                rowData[12]=(String)ObjItem.getAttribute("W_MIE").getObj();
                rowData[13]=(String)ObjItem.getAttribute("NO_CASE").getObj();
                rowData[14]=Boolean.toString(ObjItem.getAttribute("IMPORT_CONCESS").getBool());
                rowData[15]=(String)ObjItem.getAttribute("MATERIAL_CODE").getObj();
                rowData[16]=(String)ObjItem.getAttribute("MATERIAL_DESC").getObj();
                rowData[17]=(String)ObjItem.getAttribute("QUALITY_NO").getObj();
                rowData[18]=(String)ObjItem.getAttribute("PAGE_NO").getObj();
                rowData[19]=Double.toString(ObjItem.getAttribute("EXCESS").getVal());
                rowData[20]=Double.toString(ObjItem.getAttribute("SHORTAGE").getVal());
                rowData[21]=Double.toString(ObjItem.getAttribute("CHALAN_QTY").getVal());
                rowData[22]=(String)ObjItem.getAttribute("L_F_NO").getObj();
                rowData[23]=(String)ObjItem.getAttribute("REMARKS").getObj();
                rowData[24]=Double.toString(ObjItem.getAttribute("TOTAL_AMOUNT").getVal());
                rowData[25]=Double.toString(ObjItem.getAttribute("NET_AMOUNT").getVal());
                rowData[26]=(String)ObjItem.getAttribute("PO_NO").getObj();
                rowData[27]=Integer.toString((int)ObjItem.getAttribute("PO_SR_NO").getVal());
                rowData[28]=(String)ObjItem.getAttribute("INDENT_NO").getObj();
                rowData[29]=Integer.toString((int)ObjItem.getAttribute("INDENT_SR_NO").getVal());
                rowData[30]=(String)ObjItem.getAttribute("STM_NO").getObj();
                rowData[31]=Integer.toString((int)ObjItem.getAttribute("STM_SR_NO").getVal());
                rowData[32]=Integer.toString((int)ObjItem.getAttribute("PO_TYPE").getVal());
                
                DataModel.addRow(rowData);
                
                //Set the Collection
                DataModel.SetUserObject(Table.getRowCount()-1, colLot);
            }
        }
        
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    public boolean ShowList() {
        try {
            FormatGrid();
            
            setSize(700,430);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Select MIR Items",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    private void GenerateCombo() {
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
        
        List=clsDepartment.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            aData.strCode="";
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
    }
    
}
