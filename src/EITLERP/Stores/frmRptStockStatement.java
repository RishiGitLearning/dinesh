/*
 * frmRptStockStatement.java
 *
 * Created on August 13, 2005, 3:21 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */
import EITLERP.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.text.*;
import java.util.Date;

public class frmRptStockStatement extends javax.swing.JApplet {
    
    
    private EITLComboModel cmbItemTypeModel=new EITLComboModel();
    
    private int lineCounter=0;
    private int pageCounter=0;
    
    
    /** Initializes the applet frmRptStockStatement */
    public void init() {
        setSize(430,340);
        initComponents();
        Bar.setVisible(false);
        GenerateCombo();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFromItemID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtToItemID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        Bar = new javax.swing.JProgressBar();
        lblItem = new javax.swing.JLabel();
        chkPrint = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmbItemType = new javax.swing.JComboBox();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("STOCK STATEMENT REPORT");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(8, 8, 187, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(1, 0, 447, 30);

        jLabel2.setText("From Item Code");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(13, 71, 112, 15);

        getContentPane().add(txtFromItemID);
        txtFromItemID.setBounds(123, 69, 112, 20);

        jLabel3.setText("To Item Code");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(12, 97, 112, 15);

        getContentPane().add(txtToItemID);
        txtToItemID.setBounds(122, 95, 112, 20);

        jLabel4.setText("From Date ");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(13, 132, 77, 15);

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(88, 130, 112, 20);

        jLabel5.setText("To Date");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(226, 133, 53, 15);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(284, 130, 112, 20);

        cmdPrint.setText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPrint);
        cmdPrint.setBounds(177, 287, 117, 28);

        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        getContentPane().add(cmdExit);
        cmdExit.setBounds(299, 287, 110, 27);

        getContentPane().add(Bar);
        Bar.setBounds(6, 255, 403, 18);

        lblItem.setText(".");
        getContentPane().add(lblItem);
        lblItem.setBounds(8, 238, 400, 15);

        chkPrint.setText("Print Stock Ledger");
        getContentPane().add(chkPrint);
        chkPrint.setBounds(4, 208, 183, 23);

        jLabel7.setText("Save as ");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(31, 174, 59, 15);

        getContentPane().add(txtFile);
        txtFile.setBounds(89, 172, 270, 20);

        jButton1.setText("...");
        getContentPane().add(jButton1);
        jButton1.setBounds(361, 172, 35, 21);

        jLabel10.setText("Item Type");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(15, 42, 80, 15);

        getContentPane().add(cmbItemType);
        cmbItemType.setBounds(123, 40, 190, 24);

    }//GEN-END:initComponents
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        
        if(txtFile.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the file name.");
            return;
        }
        
        GenerateReportWAvg();
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JCheckBox chkPrint;
    private javax.swing.JComboBox cmbItemType;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblItem;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromItemID;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToItemID;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * Generates Report
     */
    private void GenerateReport() {
        
        new Thread() {
            
            public void run() {
                DecimalFormat dFormat=new DecimalFormat("###0.00");
                
                ResultSet rsTmp,rsItem;
                ResultSet rsRcpt,rsIssue;
                String strSQL="";
                String strCondition="";
                String FileName=txtFile.getText();
                
                //======== Some Report writing Fields ==========//
                String strLine="";
                String ItemID="";
                String ItemName="";
                String UnitName="";
                String PONo="";
                String PODate="";
                double OpeningStock=0;
                double InspectionQty=0;
                double ReceiptQty=0;
                double IssueQty=0;
                double ClosingStock=0;
                double AvgIssue=0;
                double AvgConsumption=0;
                double ReOrderLevel=0;
                
                
                double OpeningQty=0;
                double OpeningRate=0;
                double OpeningValue=0;
                double InwardQty=0;
                double InwardRate=0;
                double InwardValue=0;
                double OutwardQty=0;
                double OutwardRate=0;
                double OutwardValue=0;
                double ClosingQty=0;
                double ClosingRate=0;
                double ClosingValue=0;
                double IssueValue=0;
                double IssueRate=0;
                double DiffQty=0;
                double RecommConsumption=0;
                double RecommLevel=0;
                
                double CumIssue=0;
                double IssueLast=0;
                double BalPOQty=0;
                double POQty=0;
                
                boolean Done=false;
                
                String strRecommConsumption="";
                String strRecommLevel="";
                String strOpeningQty="";
                String strOpeningRate="";
                String strOpeningValue="";
                String strRcptQty="";
                String strRcptRate="";
                String strRcptValue="";
                String strIssueRate="";
                String strIssueValue="";
                String strClosingQty="";
                String strClosingRate="";
                String strClosingValue="";
                String strDocNo="";
                String strDocDate="";
                
                String strCumIssue="";
                String strIssueLast="";
                String strBalPOQty="";
                String strPOQty="";
                
                int Max=0;
                int Min=0;
                int Row=0;
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                
                try {
                    
                    if(txtFromDate.getText().trim().equals("")||txtToDate.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please specify the date range");
                        return;
                    }
                    
                    if((!EITLERPGLOBAL.isDate(txtFromDate.getText()))||(!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid dates");
                        return;
                    }
                    
                    Bar.setVisible(true);
                    Bar.setValue(0);
                    
                    
                    strCondition=" AND ABC='A' ";
                    
                    if(!txtFromItemID.getText().equals("")) {
                        strCondition=strCondition+" AND ITEM_ID>='"+txtFromItemID.getText()+"' ";
                        //strSQL=strSQL+" AND ITEM_ID>='"+txtFromItemID.getText()+"' ";
                    }
                    
                    if(!txtToItemID.getText().equals("")) {
                        strCondition=strCondition+" AND ITEM_ID<='"+txtToItemID.getText()+"' ";
                        //strSQL=strSQL+" AND ITEM_ID<='"+txtToItemID.getText()+"' ";
                    }
                    
                    
                    //========= Get the count ============//
                    strSQL="SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                    rsItem=data.getResult(strSQL);
                    
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        Max=rsItem.getInt("THECOUNT");
                    }
                    
                    Bar.setMaximum(Max);
                    Bar.setMinimum(Min);
                    Bar.setValue(0);
                    Bar.repaint();
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"'");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    
                    //===================================================================//
                    //====================== PROCESS FIFO ===============================//
                    //==================================================================//
                    
                    Bar.setMaximum(Max);
                    Bar.setMinimum(Min);
                    Bar.setValue(0);
                    Bar.repaint();
                    
                    
                    lblItem.setText("Starting Process");
                    lblItem.repaint();
                    
                    //========= Create a text file ==============//
                    strSQL="SELECT ITEM_ID,ITEM_DESCRIPTION,UNIT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                    rsItem=data.getResult(strSQL);
                    rsItem.first();
                    
                    if(rsItem.getRow()<=0) {
                        JOptionPane.showMessageDialog(null,"No transactions found in given period");
                        lblItem.setVisible(false);
                        Bar.setVisible(false);
                        return;
                    }
                    
                    //Loop through each item
                    while((!rsItem.isAfterLast())&&rsItem.getRow()>0) {
                        
                        Bar.setValue(rsItem.getRow());
                        Bar.repaint();
                        
                        
                        //Fill Up the variables first
                        ItemID=rsItem.getString("ITEM_ID").trim()+EITLERPGLOBAL.Replicate(" ", 12-rsItem.getString("ITEM_ID").trim().length());
                        ItemName=rsItem.getString("ITEM_DESCRIPTION");
                        
                        lblItem.setText("Processing Item : "+ItemID);
                        lblItem.repaint();
                        
                        
                        if(ItemName.length()>20) {
                            ItemName=ItemName.substring(0,20);
                        }
                        
                        UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",rsItem.getInt("UNIT"));
                        
                        OpeningQty=0;
                        OpeningRate=0;
                        OpeningValue=0;
                        
                        //First Find the latest cut-off closing stock.
                        strSQL="SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ITEM_ID='"+ItemID+"' AND ENTRY_NO="+StockEntryNo;
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningQty=EITLERPGLOBAL.round(rsTmp.getDouble("OPENING_QTY"),2);
                            OpeningRate=EITLERPGLOBAL.round(rsTmp.getDouble("OPENING_RATE"),2);
                            OpeningValue=EITLERPGLOBAL.round(rsTmp.getDouble("OPENING_VALUE"),2);
                            
                            if(OpeningQty==0) {
                                OpeningRate=0;
                            }
                            else {
                                OpeningRate=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                            }
                        }
                        
                        data.Execute("UPDATE D_INV_GRN_DETAIL SET TMP_ISSUED_QTY=0 WHERE GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND GRN_DATE>='"+StockEntryDate+"' AND GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"') AND ITEM_ID='"+ItemID+"'");
                        
                        //Take the record between Cut-off stock date and till from date specified here.
                        strSQL="SELECT A.ISSUE_NO,B.SR_NO,A.ISSUE_DATE,B.ITEM_CODE,ITEM_EXTRA_DESC,WAREHOUSE_ID,LOCATION_ID,BOE_NO,QTY FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.ISSUE_NO=B.ISSUE_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.ISSUE_DATE>='"+StockEntryDate+"' AND A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ITEM_CODE='"+ItemID+"' ORDER BY ISSUE_DATE";
                        
                        rsIssue=data.getResult(strSQL);
                        rsIssue.first();
                        
                        while((!rsIssue.isAfterLast())&&rsIssue.getRow()>0) {
                            
                            String IssueDate=rsIssue.getString("ISSUE_DATE");
                            IssueQty=rsIssue.getDouble("QTY");
                            String IssueNo=rsIssue.getString("ISSUE_NO");
                            int IssueSrNo=rsIssue.getInt("SR_NO");
                            
                            if(IssueQty<=OpeningQty) {
                                OpeningQty=OpeningQty-IssueQty;
                                IssueValue=EITLERPGLOBAL.round(OpeningRate*IssueQty,2);
                                
                                //Update the rate in Issue.
                                data.Execute("UPDATE D_INV_ISSUE_DETAIL SET RATE="+OpeningRate+", ISSUE_VALUE="+IssueValue+" WHERE ISSUE_NO='"+IssueNo+"' AND SR_NO="+IssueSrNo);
                                
                                //No GRN Updation required now.
                            }
                            else {
                                //Initialize the Issue Value
                                IssueValue=0;
                                IssueRate=0;
                                
                                //Get the Difference
                                DiffQty=OpeningQty;
                                
                                
                                IssueValue=EITLERPGLOBAL.round(DiffQty*OpeningRate,2);
                                
                                //Decrease the IssueQty
                                IssueQty=IssueQty-OpeningQty;
                                
                                OpeningQty=0;
                                
                                //Now for rest of the Qty. we have to search the GRN in FIFO order.
                                strSQL="SELECT A.GRN_NO,B.SR_NO,A.GRN_DATE,B.LANDED_RATE,B.QTY,B.TMP_ISSUED_QTY FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.TMP_ISSUED_QTY<B.QTY AND ITEM_ID='"+ItemID+"' AND A.GRN_DATE>='"+StockEntryDate+"' AND A.GRN_DATE<='"+IssueDate+"' ORDER BY A.GRN_DATE";
                                rsRcpt=data.getResult(strSQL);
                                rsRcpt.first();
                                
                                if(rsRcpt.getRow()>0) {
                                    Done=false;
                                    while((!Done)&&(!rsRcpt.isAfterLast())) {
                                        String GRNNo=rsRcpt.getString("GRN_NO");
                                        int GRNSrNo=rsRcpt.getInt("SR_NO");
                                        double Qty=rsRcpt.getDouble("QTY")-rsRcpt.getDouble("TMP_ISSUED_QTY");
                                        double Rate=rsRcpt.getDouble("LANDED_RATE");
                                        
                                        if(IssueQty<Qty) //Is GRN Qty sufficient to fulfill the issue ?
                                        {
                                            //DiffQty=Qty-IssueQty;
                                            DiffQty=IssueQty;
                                            
                                            IssueValue=EITLERPGLOBAL.round(IssueValue+(IssueQty*Rate),2);
                                            
                                            IssueQty=0;
                                            
                                            //We have to update the GRN.
                                            data.Execute("UPDATE D_INV_GRN_DETAIL SET TMP_ISSUED_QTY=TMP_ISSUED_QTY+"+DiffQty+" WHERE GRN_NO='"+GRNNo+"' AND SR_NO="+GRNSrNo);
                                        }
                                        else //GRN Qty. is not sufficient
                                        {
                                            DiffQty=IssueQty-Qty;
                                            
                                            IssueValue=EITLERPGLOBAL.round(IssueValue+(Qty*Rate),2);
                                            
                                            IssueQty=IssueQty-Qty;
                                            
                                            //Update the GRN with full qty.
                                            data.Execute("UPDATE D_INV_GRN_DETAIL SET TMP_ISSUED_QTY="+rsRcpt.getDouble("QTY")+" WHERE GRN_NO='"+GRNNo+"' AND SR_NO="+GRNSrNo);
                                        }
                                        
                                        if(rsRcpt.isAfterLast()||IssueQty==0) {
                                            Done=true;
                                        }
                                        
                                        if(!rsRcpt.isAfterLast()) {
                                            rsRcpt.next();
                                        }
                                    }
                                }
                                
                                
                                //Now check that Full Issue Qty has been used
                                if(IssueQty>0) {
                                    //Not enough receipts found for this much issue qty.
                                    
                                    //In this case Take the Avg. Rate
                                    if((rsIssue.getDouble("QTY")-IssueQty)==0) {
                                        IssueRate=0;
                                    }
                                    else {
                                        IssueRate=EITLERPGLOBAL.round(IssueValue/(rsIssue.getDouble("QTY")-IssueQty),2);
                                    }
                                    
                                    
                                    IssueValue=EITLERPGLOBAL.round(rsIssue.getDouble("QTY")*IssueRate,2);
                                    
                                }
                                else {
                                    
                                    //Otherwise devide the value
                                    IssueRate=EITLERPGLOBAL.round(IssueValue/rsIssue.getDouble("QTY"),2);
                                }
                                
                                //Update the Issue itself
                                data.Execute("UPDATE D_INV_ISSUE_DETAIL SET RATE="+IssueRate+", ISSUE_VALUE="+IssueValue+" WHERE ISSUE_NO='"+IssueNo+"' AND SR_NO="+IssueSrNo);
                            }
                            
                            rsIssue.next();
                        }
                        
                        rsItem.next();
                    }
                    
                    
                    //
                    //===========================END FIFO PROCESS ================================//
                    
                    
                    
                    
                    //========= Create a text file ==============//
                    strSQL="SELECT ITEM_ID,ITEM_DESCRIPTION,UNIT,AVG_CONSUMPTION,REORDER_LEVEL,RECOMM_CONSUMPTION,RECOMM_LEVEL FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File(FileName)));
                    
                    //==========Get the Data from Item Master for ===============//
                    rsItem=data.getResult(strSQL);
                    
                    strLine=" SHRI DINESH MILLS LTD. ";
                    writeLine(aFile,strLine);
                    writeLine(aFile,"");
                    
                    strLine=" A CLASS ITEMS STOCK STATEMENT AS FROM DATE "+txtFromDate.getText()+" TO "+txtToDate.getText();
                    writeLine(aFile,strLine);
                    
                    //Printing a dashed line
                    writeLine(aFile,EITLERPGLOBAL.Replicate("-",174));
                    
                    strLine="Item Code   "+" "+"Item Name           "+" "+"Unit"+" "+"Opening  "+" "+"Insp.   "+" "+"Receipt  "+" "+"Issue    "+" "+"Closing  "+" "+" Issue   "+" "+" Cum.    "+" "+"Avg.     "+" "+"Avg      "+" "+"Recomm   "+" "+"Recomm   "+" "+" PO No.     "+" "+" Date     "+" "+" Qty.   "+" "+"Bal. Qty";
                    writeLine(aFile,strLine);
                    strLine="            "+" "+"                    "+" "+"    "+" "+"Stock    "+" "+"Qty.    "+" "+"         "+" "+"         "+" "+"Stock    "+" "+" Last    "+" "+" Issue   "+" "+"Issue/M. "+" "+"Consump. "+" "+"Consum.  "+" "+"Level    ";
                    writeLine(aFile,strLine);
                    strLine="            "+" "+"                    "+" "+"    "+" "+"         "+" "+"        "+" "+"         "+" "+"         "+" "+"         "+" "+" Fort.   "+" "+"         "+" "+"         "+" "+"         "+" "+"         ";
                    writeLine(aFile,strLine);
                    
                    writeLine(aFile,EITLERPGLOBAL.Replicate("-",174));
                    
                    lineCounter=8;
                    
                    //Loop through each item
                    while(!rsItem.isAfterLast()) {
                        
                        Bar.setValue(rsItem.getRow());
                        Bar.repaint();
                        
                        
                        //Fill Up the variables first
                        ItemID=rsItem.getString("ITEM_ID").trim()+EITLERPGLOBAL.Replicate(" ", 12-rsItem.getString("ITEM_ID").trim().length());
                        ItemName=rsItem.getString("ITEM_DESCRIPTION");
                        
                        lblItem.setText(ItemID);
                        lblItem.repaint();
                        
                        if(ItemName.length()>20) {
                            ItemName=ItemName.substring(0,20);
                        }
                        else {
                            ItemName=ItemName+EITLERPGLOBAL.Replicate(" ", 20-ItemName.length());
                        }
                        
                        
                        UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",rsItem.getInt("UNIT"));
                        UnitName=UnitName+EITLERPGLOBAL.Replicate(" ", 4-UnitName.length());
                        
                        RecommConsumption=rsItem.getDouble("RECOMM_CONSUMPTION");
                        RecommLevel=rsItem.getDouble("RECOMM_LEVEL");
                        
                        
                        // ============== Calculating Opening Qty and Rate ===============//
                        OpeningQty=0;
                        OpeningValue=0;
                        
                        strSQL="SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE ITEM_ID='"+ItemID+"' AND ENTRY_NO="+StockEntryNo;
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningQty=rsTmp.getDouble("OPENING_QTY");
                            OpeningValue=rsTmp.getDouble("OPENING_VALUE");
                            
                            if(OpeningQty==0) {
                                OpeningValue=0;
                                OpeningRate=0;
                            }
                            else {
                                OpeningRate=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                            }
                        }
                        
                        // Get the Inwards from opening stock date to upto from date
                        strSQL="SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS SUM_QTY, IF(SUM(LANDED_RATE*QTY) IS NULL,0,SUM(LANDED_RATE*QTY)) AS SUM_VALUE FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND A.GRN_DATE>'"+StockEntryDate+"' AND GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND B.ITEM_ID='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningValue=EITLERPGLOBAL.round(OpeningValue+rsTmp.getDouble("SUM_VALUE"),2);
                            OpeningQty=EITLERPGLOBAL.round(OpeningQty+rsTmp.getDouble("SUM_QTY"),2);
                        }
                        
                        
                        // Get the Issues from opening stock date to upto from date
                        strSQL="SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS SUM_QTY, IF(SUM(ISSUE_VALUE) IS NULL,0,SUM(ISSUE_VALUE)) AS SUM_VALUE FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.ISSUE_NO=B.ISSUE_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.ISSUE_DATE>'"+StockEntryDate+"' AND ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND B.ITEM_CODE='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningValue=EITLERPGLOBAL.round(OpeningValue-rsTmp.getDouble("SUM_VALUE"),2);
                            OpeningQty=EITLERPGLOBAL.round(OpeningQty-rsTmp.getDouble("SUM_QTY"),2);
                        }
                        
                        
                        //we have Opening Stock and Qty.
                        //Take the Average Rate
                        if(OpeningQty==0) {
                            OpeningRate=0;
                        }
                        else {
                            OpeningRate=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                        }
                        
                        // =================== End Calculating Opening Stock Qty =====================//
                        
                        
                        ReceiptQty=0;
                        IssueQty=0;
                        
                        //================= Calculating Total Receipt during the period ===============//
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS RCP_QTY FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND ITEM_ID='"+ItemID+"' AND GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            ReceiptQty=rsTmp.getDouble("RCP_QTY");
                        }
                        //=============================================================================//
                        
                        
                        
                        //============== Calculating Total Issue during the period =====================//
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            IssueQty=rsTmp.getDouble("ISS_QTY");
                        }
                        //==============================================================================//
                        
                        
                        //============== Calculating Closing Stock ===============//
                        OpeningStock=OpeningQty;
                        ClosingStock=OpeningStock+(ReceiptQty-IssueQty);
                        //=======================================================//
                        
                        
                        //================= Calculating Total Receipt during the period ===============//
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS INSP_QTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND ITEM_ID='"+ItemID+"' AND MIR_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND MIR_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND GRN_RECD_QTY<QTY");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            InspectionQty=rsTmp.getDouble("INSP_QTY");
                        }
                        //=============================================================================//
                        
                        
                        
                        //=================== Calculating Avg. Issue/month ===========================//
                        int ToYear=Integer.parseInt(txtToDate.getText().substring(6));
                        int ToMonth=Integer.parseInt(txtToDate.getText().substring(3,5));
                        int MonthCount=0;
                        double periodIssue=0;
                        
                        String startDate="";
                        
                        if(ToMonth>=4&&ToMonth<=12) {
                            startDate=Integer.toString(ToYear)+"-04-01";
                            MonthCount=ToMonth-3;
                        }
                        else {
                            startDate=Integer.toString(ToYear-1)+"-04-01";
                            MonthCount=9+ToMonth;
                        }
                        
                        String CurrentDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());
                        
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND ISSUE_DATE<='"+CurrentDate+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            if(MonthCount<=0) {
                                MonthCount=1;
                            }
                            
                            AvgIssue=rsTmp.getDouble("ISS_QTY")/MonthCount;
                        }
                        //============================================================================//
                        
                        
                        //================== Calculating Issue Last Fortnight ========================//
                        IssueLast=0;
                        
                        String LastDate=EITLERPGLOBAL.DeductDaysFromDate(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtFromDate.getText())),15);
                        CurrentDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
                        
                        
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+LastDate+"' AND ISSUE_DATE<='"+CurrentDate+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            IssueLast=rsTmp.getDouble("ISS_QTY");
                        }
                        
                        strIssueLast=dFormat.format(IssueLast);
                        //===========================================================================//
                        
                        
                        //================== Calculating Cumulative Issue  ========================//
                        CumIssue=0;
                        
                        
                        CurrentDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());
                        
                        
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND ISSUE_DATE<='"+CurrentDate+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            CumIssue=rsTmp.getDouble("ISS_QTY");
                        }
                        
                        strCumIssue=dFormat.format(CumIssue);
                        //===========================================================================//
                        
                        
                        AvgConsumption=rsItem.getDouble("AVG_CONSUMPTION");
                        ReOrderLevel=rsItem.getDouble("REORDER_LEVEL");
                        
                        
                        //======== Converting Numeric Figures to strings =======//
                        String strOpeningStock=dFormat.format(OpeningStock);
                        strOpeningStock=EITLERPGLOBAL.Replicate(" ", 9-strOpeningStock.length())+strOpeningStock;
                        
                        String strInspectionQty=dFormat.format(InspectionQty);
                        strInspectionQty=EITLERPGLOBAL.Replicate(" ", 8-strInspectionQty.length())+strInspectionQty;
                        
                        String strReceiptQty=dFormat.format(ReceiptQty);
                        strReceiptQty=EITLERPGLOBAL.Replicate(" ", 9-strReceiptQty.length())+strReceiptQty;
                        
                        String strIssueQty=dFormat.format(IssueQty);
                        strIssueQty=EITLERPGLOBAL.Replicate(" ",9-strIssueQty.length())+strIssueQty;
                        
                        String strClosingStock=dFormat.format(ClosingStock);
                        strClosingStock=EITLERPGLOBAL.Replicate(" ",9-strClosingStock.length())+strClosingStock;
                        
                        String strAvgIssue=dFormat.format(AvgIssue);
                        strAvgIssue=EITLERPGLOBAL.Replicate(" ",9-strAvgIssue.length())+strAvgIssue;
                        
                        String strAvgConsumption=dFormat.format(AvgConsumption);
                        strAvgConsumption=EITLERPGLOBAL.Replicate(" ",9-strAvgConsumption.length())+strAvgConsumption;
                        
                        String strReOrderLevel=dFormat.format(ReOrderLevel);
                        strReOrderLevel=EITLERPGLOBAL.Replicate(" ", 9-strReOrderLevel.length())+strReOrderLevel;
                        
                        strIssueLast=EITLERPGLOBAL.Replicate(" ", 9-strIssueLast.length())+strIssueLast;
                        
                        strCumIssue=EITLERPGLOBAL.Replicate(" ", 9-strCumIssue.length())+strCumIssue;
                        
                        strRecommConsumption=Double.toString(EITLERPGLOBAL.round(RecommConsumption, 1));
                        strRecommConsumption=EITLERPGLOBAL.Replicate(" ", 9-strRecommConsumption.length())+strRecommConsumption;
                        
                        strRecommLevel=Double.toString(EITLERPGLOBAL.round(RecommLevel,1));
                        strRecommLevel=EITLERPGLOBAL.Replicate(" ", 9-strRecommLevel.length())+strRecommLevel;
                        //=====================================================//
                        
                        
                        double RowCount=0;
                        
                        strSQL="SELECT COUNT(*) THECOUNT FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B WHERE A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.QTY<B.RECD_QTY AND B.ITEM_ID='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        RowCount=rsTmp.getDouble("THECOUNT");
                        
                        strSQL="SELECT A.PO_NO,DATE_FORMAT(A.PO_DATE,'%d/%m/%Y') PO_DATE,QTY,QTY-RECD_QTY BALQTY FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B WHERE A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.QTY<B.RECD_QTY AND B.ITEM_ID='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(RowCount==0) {
                            strLine=ItemID+" "+ItemName+" "+UnitName+" "+strOpeningStock+" "+strInspectionQty+" "+strReceiptQty+" "+strIssueQty+" "+strClosingStock+" "+strIssueLast+" "+strCumIssue+" "+strAvgIssue+" "+strAvgConsumption+" "+strRecommConsumption+" "+strRecommLevel;
                            writeLine(aFile,strLine);
                            
                        }
                        
                        if(RowCount==1) {
                            String strPONo=rsTmp.getString("PO_NO");
                            strPONo=strPONo+EITLERPGLOBAL.Replicate(" ", 12-strPONo.length());
                            
                            strPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("QTY"),2));
                            strPOQty=EITLERPGLOBAL.Replicate(" ", 8-strPOQty.length())+strPOQty;
                            
                            String strPODate=rsTmp.getString("PO_DATE");
                            strPODate=strPODate+EITLERPGLOBAL.Replicate(" ",10-strPODate.length());
                            
                            strBalPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("BALQTY"),2));
                            strBalPOQty=EITLERPGLOBAL.Replicate(" ", 8-strBalPOQty.length())+strBalPOQty;
                            
                            strLine=ItemID+" "+ItemName+" "+UnitName+" "+strOpeningStock+" "+strInspectionQty+" "+strReceiptQty+" "+strIssueQty+" "+strClosingStock+" "+strIssueLast+" "+strCumIssue+" "+strAvgIssue+" "+strAvgConsumption+" "+strRecommConsumption+" "+strRecommLevel+" "+strPONo+" "+strPODate+" "+strPOQty+" "+strBalPOQty;
                            writeLine(aFile,strLine);
                        }
                        
                        
                        
                        if(RowCount>1) {
                            
                            while(rsTmp.isAfterLast()) {
                                String strPONo=rsTmp.getString("PO_NO");
                                strPONo=strPONo+EITLERPGLOBAL.Replicate(" ", 12-strPONo.length());
                                
                                strPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("QTY"),2));
                                strPOQty=EITLERPGLOBAL.Replicate(" ", 8-strPOQty.length())+strPOQty;
                                
                                String strPODate=rsTmp.getString("PO_DATE");
                                strPODate=strPODate+EITLERPGLOBAL.Replicate(" ",10-strPODate.length());
                                
                                strBalPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("BALQTY"),2));
                                strBalPOQty=EITLERPGLOBAL.Replicate(" ", 8-strBalPOQty.length())+strBalPOQty;
                                
                                if(rsTmp.getRow()==1) {
                                    strLine=ItemID+" "+ItemName+" "+UnitName+" "+strOpeningStock+" "+strInspectionQty+" "+strReceiptQty+" "+strIssueQty+" "+strClosingStock+" "+strIssueLast+" "+strCumIssue+" "+strAvgIssue+" "+strAvgConsumption+" "+strRecommConsumption+" "+strRecommLevel+" "+strPONo+" "+strPODate+" "+strPOQty+" "+strBalPOQty;
                                    writeLine(aFile,strLine);
                                }
                                else {
                                    
                                    strLine=EITLERPGLOBAL.Replicate(" ",ItemID.length())+" "+EITLERPGLOBAL.Replicate(" ",ItemName.length())+" "+EITLERPGLOBAL.Replicate(" ",UnitName.length())+" "+EITLERPGLOBAL.Replicate(" ",strOpeningStock.length())+" "+EITLERPGLOBAL.Replicate(" ",strInspectionQty.length())+" "+EITLERPGLOBAL.Replicate(" ",strReceiptQty.length())+" "+EITLERPGLOBAL.Replicate(" ",strIssueQty.length())+" "+EITLERPGLOBAL.Replicate(" ",strClosingStock.length())+" "+EITLERPGLOBAL.Replicate(" ",strIssueLast.length())+" "+EITLERPGLOBAL.Replicate(" ",strCumIssue.length())+" "+EITLERPGLOBAL.Replicate(" ",strAvgIssue.length())+" "+EITLERPGLOBAL.Replicate(" ",strAvgConsumption.length())+" "+EITLERPGLOBAL.Replicate(" ",strRecommConsumption.length())+" "+EITLERPGLOBAL.Replicate(" ",strRecommLevel.length())+" "+strPONo+" "+strPODate+" "+strPOQty+" "+strBalPOQty;
                                    writeLine(aFile,strLine);
                                }
                                
                                rsTmp.next();
                            }
                        }
                        
                        rsItem.next();
                    }
                    
                    aFile.close();
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    if(chkPrint.isSelected()) {
                        EITLPrint.PrintTextFile(FileName);
                    }
                    
                }
                catch(Exception e) {
                    
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    Bar.setVisible(false);
                }
                
            };
        }.start();
    }
    
    
    private void GenerateReportWAvg() {
        
        new Thread() {
            
            public void run() {
                DecimalFormat dFormat=new DecimalFormat("###0.00");
                
                ResultSet rsTmp,rsItem;
                ResultSet rsRcpt,rsIssue;
                String strSQL="";
                String strCondition="";
                String FileName=txtFile.getText();
                
                //======== Some Report writing Fields ==========//
                String strLine="";
                String ItemID="";
                String ItemName="";
                String UnitName="";
                String PONo="";
                String PODate="";
                double OpeningStock=0;
                double InspectionQty=0;
                double ReceiptQty=0;
                double IssueQty=0;
                double ClosingStock=0;
                double AvgIssue=0;
                double AvgConsumption=0;
                double ReOrderLevel=0;
                
                
                double OpeningQty=0;
                double OpeningRate=0;
                double OpeningValue=0;
                double InwardQty=0;
                double InwardRate=0;
                double InwardValue=0;
                double OutwardQty=0;
                double OutwardRate=0;
                double OutwardValue=0;
                double ClosingQty=0;
                double ClosingRate=0;
                double ClosingValue=0;
                double IssueValue=0;
                double IssueRate=0;
                double DiffQty=0;
                double RecommConsumption=0;
                double RecommLevel=0;
                
                double CumIssue=0;
                double IssueLast=0;
                double BalPOQty=0;
                double POQty=0;
                
                boolean Done=false;
                
                String strRecommConsumption="";
                String strRecommLevel="";
                String strOpeningQty="";
                String strOpeningRate="";
                String strOpeningValue="";
                String strRcptQty="";
                String strRcptRate="";
                String strRcptValue="";
                String strIssueRate="";
                String strIssueValue="";
                String strClosingQty="";
                String strClosingRate="";
                String strClosingValue="";
                String strDocNo="";
                String strDocDate="";
                
                String strCumIssue="";
                String strIssueLast="";
                String strBalPOQty="";
                String strPOQty="";
                
                int Max=0;
                int Min=0;
                int Row=0;
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                clsItemStock objItemStock=new clsItemStock();
                
                try {
                    
                    if(txtFromDate.getText().trim().equals("")||txtToDate.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please specify the date range");
                        return;
                    }
                    
                    if((!EITLERPGLOBAL.isDate(txtFromDate.getText()))||(!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid dates");
                        return;
                    }
                    
                    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
                    Date fromDate = df.parse(txtFromDate.getText());
                    Date RestrictDate = df.parse("01/10/2009");
                    
                    int ItemType=EITLERPGLOBAL.getComboCode(cmbItemType);
                    if(ItemType!=1 && fromDate.before(RestrictDate)) {
                        JOptionPane.showMessageDialog(null,"From Date must be equals or after 01/10/2009");
                        return;
                    }
                    if(txtFile.getText().trim().equals("")) {
                        JOptionPane.showMessageDialog(null,"Please enter the file name.");
                        return;
                    }
                    
                    if((!EITLERPGLOBAL.isDate(txtFromDate.getText()))||(!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid dates");
                        return;
                    }
                    
                    
                    
                    Bar.setVisible(true);
                    Bar.setValue(0);
                    
                    
                    strCondition=" AND ABC='A' ";
                    
                    
                    
                    if(ItemType==1) {
                        strCondition+=" AND ITEM_ID NOT LIKE 'RM%' ";
                    }
                    else {
                        strCondition+=" AND ITEM_ID LIKE 'RM%' ";
                    }
                    
                    if(!txtFromItemID.getText().equals("")) {
                        strCondition=strCondition+" AND ITEM_ID>='"+txtFromItemID.getText()+"' ";
                        //strSQL=strSQL+" AND ITEM_ID>='"+txtFromItemID.getText()+"' ";
                    }
                    
                    if(!txtToItemID.getText().equals("")) {
                        strCondition=strCondition+" AND ITEM_ID<='"+txtToItemID.getText()+"' ";
                        //strSQL=strSQL+" AND ITEM_ID<='"+txtToItemID.getText()+"' ";
                    }
                    
                    
                    //========= Get the count ============//
                    strSQL="SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                    rsItem=data.getResult(strSQL);
                    
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        Max=rsItem.getInt("THECOUNT");
                    }
                    
                    Bar.setMaximum(Max);
                    Bar.setMinimum(Min);
                    Bar.setValue(0);
                    Bar.repaint();
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ORDER BY ENTRY_DATE DESC");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    objItemStock.ProcessLedger(StockEntryDate,EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                    
                    while(!objItemStock.ProcessDone) {
                        //Wait while process is completed ...
                    }
                    
                    //========= Create a text file ==============//
                    strSQL="SELECT ITEM_ID,ITEM_DESCRIPTION,UNIT,AVG_CONSUMPTION,REORDER_LEVEL,RECOMM_CONSUMPTION,RECOMM_LEVEL FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MAINTAIN_STOCK=1 AND APPROVED=1 AND CANCELLED=0 "+strCondition;
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File(FileName)));
                    
                    //==========Get the Data from Item Master for ===============//
                    rsItem=data.getResult(strSQL);
                    
                    strLine=" SHRI DINESH MILLS LTD. ";
                    writeLine(aFile,strLine);
                    writeLine(aFile,"");
                    
                    strLine=" A CLASS ITEMS STOCK STATEMENT AS FROM DATE "+txtFromDate.getText()+" TO "+txtToDate.getText();
                    writeLine(aFile,strLine);
                    
                    //Printing a dashed line
                    writeLine(aFile,EITLERPGLOBAL.Replicate("-",174));
                    
                    strLine="Item Code   "+" "+"Item Name           "+" "+"Unit"+" "+"Opening  "+" "+"Insp.   "+" "+"Receipt  "+" "+"Issue    "+" "+"Closing  "+" "+" Issue   "+" "+" Cum.    "+" "+"Avg.     "+" "+"Avg      "+" "+"Recomm   "+" "+"Recomm   "+" "+" PO No.     "+" "+" Date     "+" "+" Qty.   "+" "+"Bal. Qty";
                    writeLine(aFile,strLine);
                    strLine="            "+" "+"                    "+" "+"    "+" "+"Stock    "+" "+"Qty.    "+" "+"         "+" "+"         "+" "+"Stock    "+" "+" Last    "+" "+" Issue   "+" "+"Issue/M. "+" "+"Consump. "+" "+"Consum.  "+" "+"Level    ";
                    writeLine(aFile,strLine);
                    strLine="            "+" "+"                    "+" "+"    "+" "+"         "+" "+"        "+" "+"         "+" "+"         "+" "+"         "+" "+" Fort.   "+" "+"         "+" "+"         "+" "+"         "+" "+"         ";
                    writeLine(aFile,strLine);
                    
                    writeLine(aFile,EITLERPGLOBAL.Replicate("-",174));
                    
                    lineCounter=8;
                    
                    //Loop through each item
                    while(!rsItem.isAfterLast()) {
                        
                        Bar.setValue(rsItem.getRow());
                        Bar.repaint();
                        
                        
                        //Fill Up the variables first
                        ItemID=rsItem.getString("ITEM_ID").trim()+EITLERPGLOBAL.Replicate(" ", 12-rsItem.getString("ITEM_ID").trim().length());
                        ItemName=rsItem.getString("ITEM_DESCRIPTION");
                        
                        lblItem.setText(ItemID);
                        lblItem.repaint();
                        
                        if(ItemName.length()>20) {
                            ItemName=ItemName.substring(0,20);
                        }
                        else {
                            ItemName=ItemName+EITLERPGLOBAL.Replicate(" ", 20-ItemName.length());
                        }
                        
                        
                        UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",rsItem.getInt("UNIT"));
                        UnitName=UnitName+EITLERPGLOBAL.Replicate(" ", 4-UnitName.length());
                        
                        RecommConsumption=rsItem.getDouble("RECOMM_CONSUMPTION");
                        RecommLevel=rsItem.getDouble("RECOMM_LEVEL");
                        
                        
                        // ============== Calculating Opening Qty and Rate ===============//
                        OpeningQty=0;
                        OpeningValue=0;
                        
                        strSQL="SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE ITEM_ID='"+ItemID+"' AND ENTRY_NO="+StockEntryNo;
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningQty=rsTmp.getDouble("OPENING_QTY");
                            OpeningValue=rsTmp.getDouble("OPENING_VALUE");
                            
                            if(OpeningQty==0) {
                                OpeningValue=0;
                                OpeningRate=0;
                            }
                            else {
                                OpeningRate=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                            }
                        }
                        
                        // Get the Inwards from opening stock date to upto from date
                        strSQL="SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS SUM_QTY, IF(SUM(LANDED_RATE*QTY) IS NULL,0,SUM(LANDED_RATE*QTY)) AS SUM_VALUE FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND A.GRN_DATE>'"+StockEntryDate+"' AND GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND B.ITEM_ID='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningValue=EITLERPGLOBAL.round(OpeningValue+rsTmp.getDouble("SUM_VALUE"),2);
                            OpeningQty=EITLERPGLOBAL.round(OpeningQty+rsTmp.getDouble("SUM_QTY"),2);
                        }
                        
                        
                        // Get the Issues from opening stock date to upto from date
                        strSQL="SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS SUM_QTY, IF(SUM(ISSUE_VALUE) IS NULL,0,SUM(ISSUE_VALUE)) AS SUM_VALUE FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.ISSUE_NO=B.ISSUE_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.ISSUE_DATE>'"+StockEntryDate+"' AND ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND B.ITEM_CODE='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            OpeningValue=EITLERPGLOBAL.round(OpeningValue-rsTmp.getDouble("SUM_VALUE"),2);
                            OpeningQty=EITLERPGLOBAL.round(OpeningQty-rsTmp.getDouble("SUM_QTY"),2);
                        }
                        
                        
                        //we have Opening Stock and Qty.
                        //Take the Average Rate
                        if(OpeningQty==0) {
                            OpeningRate=0;
                        }
                        else {
                            OpeningRate=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                        }
                        
                        // =================== End Calculating Opening Stock Qty =====================//
                        
                        
                        ReceiptQty=0;
                        IssueQty=0;
                        
                        //================= Calculating Total Receipt during the period ===============//
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS RCP_QTY FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND ITEM_ID='"+ItemID+"' AND GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            ReceiptQty=rsTmp.getDouble("RCP_QTY");
                        }
                        //=============================================================================//
                        
                        
                        
                        //============== Calculating Total Issue during the period =====================//
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            IssueQty=rsTmp.getDouble("ISS_QTY");
                        }
                        //==============================================================================//
                        
                        
                        //============== Calculating Closing Stock ===============//
                        OpeningStock=OpeningQty;
                        ClosingStock=OpeningStock+(ReceiptQty-IssueQty);
                        //=======================================================//
                        
                        
                        //================= Calculating Total Receipt during the period ===============//
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY)) AS INSP_QTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND ITEM_ID='"+ItemID+"' AND MIR_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND MIR_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND GRN_RECD_QTY<QTY");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            InspectionQty=rsTmp.getDouble("INSP_QTY");
                        }
                        //=============================================================================//
                        
                        
                        
                        //=================== Calculating Avg. Issue/month ===========================//
                        int ToYear=Integer.parseInt(txtToDate.getText().substring(6));
                        int ToMonth=Integer.parseInt(txtToDate.getText().substring(3,5));
                        int MonthCount=0;
                        double periodIssue=0;
                        
                        String startDate="";
                        
                        if(ToMonth>=4&&ToMonth<=12) {
                            startDate=Integer.toString(ToYear)+"-04-01";
                            MonthCount=ToMonth-3;
                        }
                        else {
                            startDate=Integer.toString(ToYear-1)+"-04-01";
                            MonthCount=9+ToMonth;
                        }
                        
                        String CurrentDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());
                        
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND ISSUE_DATE<='"+CurrentDate+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            if(MonthCount<=0) {
                                MonthCount=1;
                            }
                            
                            AvgIssue=rsTmp.getDouble("ISS_QTY")/MonthCount;
                        }
                        //============================================================================//
                        
                        
                        //================== Calculating Issue Last Fortnight ========================//
                        IssueLast=0;
                        
                        String LastDate=EITLERPGLOBAL.DeductDaysFromDate(java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtFromDate.getText())),15);
                        CurrentDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
                        
                        
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+LastDate+"' AND ISSUE_DATE<='"+CurrentDate+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            IssueLast=rsTmp.getDouble("ISS_QTY");
                        }
                        
                        strIssueLast=dFormat.format(IssueLast);
                        //===========================================================================//
                        
                        
                        //================== Calculating Cumulative Issue  ========================//
                        CumIssue=0;
                        
                        
                        CurrentDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());
                        
                        
                        rsTmp=data.getResult("SELECT IF(SUM(QTY) IS NULL,0,SUM(QTY))-IF(SUM(EXCESS_ISSUE_QTY) IS NULL,0,SUM(EXCESS_ISSUE_QTY)) AS ISS_QTY FROM D_INV_ISSUE_HEADER A, D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO  AND A.CANCELED=0 AND A.APPROVED=1 AND ITEM_CODE='"+ItemID+"' AND ISSUE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND ISSUE_DATE<='"+CurrentDate+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            CumIssue=rsTmp.getDouble("ISS_QTY");
                        }
                        
                        strCumIssue=dFormat.format(CumIssue);
                        //===========================================================================//
                        
                        
                        AvgConsumption=rsItem.getDouble("AVG_CONSUMPTION");
                        ReOrderLevel=rsItem.getDouble("REORDER_LEVEL");
                        
                        
                        //======== Converting Numeric Figures to strings =======//
                        String strOpeningStock=dFormat.format(OpeningStock);
                        strOpeningStock=EITLERPGLOBAL.Replicate(" ", 9-strOpeningStock.length())+strOpeningStock;
                        
                        String strInspectionQty=dFormat.format(InspectionQty);
                        strInspectionQty=EITLERPGLOBAL.Replicate(" ", 8-strInspectionQty.length())+strInspectionQty;
                        
                        String strReceiptQty=dFormat.format(ReceiptQty);
                        strReceiptQty=EITLERPGLOBAL.Replicate(" ", 9-strReceiptQty.length())+strReceiptQty;
                        
                        String strIssueQty=dFormat.format(IssueQty);
                        strIssueQty=EITLERPGLOBAL.Replicate(" ",9-strIssueQty.length())+strIssueQty;
                        
                        String strClosingStock=dFormat.format(ClosingStock);
                        strClosingStock=EITLERPGLOBAL.Replicate(" ",9-strClosingStock.length())+strClosingStock;
                        
                        String strAvgIssue=dFormat.format(AvgIssue);
                        strAvgIssue=EITLERPGLOBAL.Replicate(" ",9-strAvgIssue.length())+strAvgIssue;
                        
                        String strAvgConsumption=dFormat.format(AvgConsumption);
                        strAvgConsumption=EITLERPGLOBAL.Replicate(" ",9-strAvgConsumption.length())+strAvgConsumption;
                        
                        String strReOrderLevel=dFormat.format(ReOrderLevel);
                        strReOrderLevel=EITLERPGLOBAL.Replicate(" ", 9-strReOrderLevel.length())+strReOrderLevel;
                        
                        strIssueLast=EITLERPGLOBAL.Replicate(" ", 9-strIssueLast.length())+strIssueLast;
                        
                        strCumIssue=EITLERPGLOBAL.Replicate(" ", 9-strCumIssue.length())+strCumIssue;
                        
                        strRecommConsumption=Double.toString(EITLERPGLOBAL.round(RecommConsumption, 1));
                        strRecommConsumption=EITLERPGLOBAL.Replicate(" ", 9-strRecommConsumption.length())+strRecommConsumption;
                        
                        strRecommLevel=Double.toString(EITLERPGLOBAL.round(RecommLevel,1));
                        strRecommLevel=EITLERPGLOBAL.Replicate(" ", 9-strRecommLevel.length())+strRecommLevel;
                        //=====================================================//
                        
                        
                        double RowCount=0;
                        
                        strSQL="SELECT COUNT(*) THECOUNT FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B WHERE A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.QTY<B.RECD_QTY AND B.ITEM_ID='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        RowCount=rsTmp.getDouble("THECOUNT");
                        
                        strSQL="SELECT A.PO_NO,DATE_FORMAT(A.PO_DATE,'%d/%m/%Y') PO_DATE,QTY,QTY-RECD_QTY BALQTY FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B WHERE A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.QTY<B.RECD_QTY AND B.ITEM_ID='"+ItemID+"'";
                        rsTmp=data.getResult(strSQL);
                        rsTmp.first();
                        
                        if(RowCount==0) {
                            strLine=ItemID+" "+ItemName+" "+UnitName+" "+strOpeningStock+" "+strInspectionQty+" "+strReceiptQty+" "+strIssueQty+" "+strClosingStock+" "+strIssueLast+" "+strCumIssue+" "+strAvgIssue+" "+strAvgConsumption+" "+strRecommConsumption+" "+strRecommLevel;
                            writeLine(aFile,strLine);
                            
                        }
                        
                        if(RowCount==1) {
                            String strPONo=rsTmp.getString("PO_NO");
                            strPONo=strPONo+EITLERPGLOBAL.Replicate(" ", 12-strPONo.length());
                            
                            strPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("QTY"),2));
                            strPOQty=EITLERPGLOBAL.Replicate(" ", 8-strPOQty.length())+strPOQty;
                            
                            String strPODate=rsTmp.getString("PO_DATE");
                            strPODate=strPODate+EITLERPGLOBAL.Replicate(" ",10-strPODate.length());
                            
                            strBalPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("BALQTY"),2));
                            strBalPOQty=EITLERPGLOBAL.Replicate(" ", 8-strBalPOQty.length())+strBalPOQty;
                            
                            strLine=ItemID+" "+ItemName+" "+UnitName+" "+strOpeningStock+" "+strInspectionQty+" "+strReceiptQty+" "+strIssueQty+" "+strClosingStock+" "+strIssueLast+" "+strCumIssue+" "+strAvgIssue+" "+strAvgConsumption+" "+strRecommConsumption+" "+strRecommLevel+" "+strPONo+" "+strPODate+" "+strPOQty+" "+strBalPOQty;
                            writeLine(aFile,strLine);
                        }
                        
                        
                        
                        if(RowCount>1) {
                            
                            while(rsTmp.isAfterLast()) {
                                String strPONo=rsTmp.getString("PO_NO");
                                strPONo=strPONo+EITLERPGLOBAL.Replicate(" ", 12-strPONo.length());
                                
                                strPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("QTY"),2));
                                strPOQty=EITLERPGLOBAL.Replicate(" ", 8-strPOQty.length())+strPOQty;
                                
                                String strPODate=rsTmp.getString("PO_DATE");
                                strPODate=strPODate+EITLERPGLOBAL.Replicate(" ",10-strPODate.length());
                                
                                strBalPOQty=Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("BALQTY"),2));
                                strBalPOQty=EITLERPGLOBAL.Replicate(" ", 8-strBalPOQty.length())+strBalPOQty;
                                
                                if(rsTmp.getRow()==1) {
                                    strLine=ItemID+" "+ItemName+" "+UnitName+" "+strOpeningStock+" "+strInspectionQty+" "+strReceiptQty+" "+strIssueQty+" "+strClosingStock+" "+strIssueLast+" "+strCumIssue+" "+strAvgIssue+" "+strAvgConsumption+" "+strRecommConsumption+" "+strRecommLevel+" "+strPONo+" "+strPODate+" "+strPOQty+" "+strBalPOQty;
                                    writeLine(aFile,strLine);
                                }
                                else {
                                    
                                    strLine=EITLERPGLOBAL.Replicate(" ",ItemID.length())+" "+EITLERPGLOBAL.Replicate(" ",ItemName.length())+" "+EITLERPGLOBAL.Replicate(" ",UnitName.length())+" "+EITLERPGLOBAL.Replicate(" ",strOpeningStock.length())+" "+EITLERPGLOBAL.Replicate(" ",strInspectionQty.length())+" "+EITLERPGLOBAL.Replicate(" ",strReceiptQty.length())+" "+EITLERPGLOBAL.Replicate(" ",strIssueQty.length())+" "+EITLERPGLOBAL.Replicate(" ",strClosingStock.length())+" "+EITLERPGLOBAL.Replicate(" ",strIssueLast.length())+" "+EITLERPGLOBAL.Replicate(" ",strCumIssue.length())+" "+EITLERPGLOBAL.Replicate(" ",strAvgIssue.length())+" "+EITLERPGLOBAL.Replicate(" ",strAvgConsumption.length())+" "+EITLERPGLOBAL.Replicate(" ",strRecommConsumption.length())+" "+EITLERPGLOBAL.Replicate(" ",strRecommLevel.length())+" "+strPONo+" "+strPODate+" "+strPOQty+" "+strBalPOQty;
                                    writeLine(aFile,strLine);
                                }
                                
                                rsTmp.next();
                            }
                        }
                        
                        rsItem.next();
                    }
                    
                    aFile.close();
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    if(chkPrint.isSelected()) {
                        EITLPrint.PrintTextFile(FileName);
                    }
                    
                }
                catch(Exception e) {
                    
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    Bar.setVisible(false);
                }
                
            };
        }.start();
    }
    
    private void writeLine(BufferedWriter aFile,String strLine) {
        //Writes line maintaining page length
        try {
            String strLine2="";
            
            if(lineCounter>=66) {
                
                //Write page end and page header
                aFile.write(EITLERPGLOBAL.Replicate("-",190));
                aFile.newLine();
                
                //blank line
                aFile.write(EITLERPGLOBAL.Replicate(" ",190));
                aFile.newLine();
                
                strLine2=" SHRI DINESH MILLS LTD. ";
                aFile.write(strLine2);
                aFile.newLine();
                aFile.newLine();
                
                strLine2=" A CLASS ITEMS STOCK STATEMENT AS FROM DATE "+txtFromDate.getText()+" TO "+txtToDate.getText();
                aFile.write(strLine2);
                aFile.newLine();
                
                //Printing a dashed line
                aFile.write(EITLERPGLOBAL.Replicate("-",190));
                aFile.newLine();
                
                
                
                
                strLine2="Item Code   "+" "+"Item Name           "+" "+"Unit"+" "+"Opening  "+" "+"Insp.   "+" "+"Receipt  "+" "+"Issue    "+" "+"Closing  "+" "+" Issue   "+" "+" Cum.    "+" "+"Avg.     "+" "+"Avg      "+" "+"Recomm   "+" "+"Recomm   "+" "+" PO No.     "+" "+" Date     "+" "+" Qty.   "+" "+"Bal. Qty";
                writeLine(aFile,strLine2);
                strLine2="            "+" "+"                    "+" "+"    "+" "+"Stock    "+" "+"Qty.    "+" "+"         "+" "+"         "+" "+"Stock    "+" "+" Last    "+" "+" Issue   "+" "+"Issue/M. "+" "+"Consump. "+" "+"Consum.  "+" "+"Level    ";
                writeLine(aFile,strLine2);
                strLine2="            "+" "+"                    "+" "+"    "+" "+"         "+" "+"        "+" "+"         "+" "+"         "+" "+"         "+" "+" Fort.   "+" "+"         "+" "+"         "+" "+"         "+" "+"         ";
                writeLine(aFile,strLine2);
                
                
                aFile.write(EITLERPGLOBAL.Replicate("-",190));
                aFile.newLine();
                
                pageCounter++;
                lineCounter=10;
            }
            
            aFile.write(strLine);
            aFile.newLine();
            lineCounter++;
        }
        catch(Exception e) {
            
        }
    }
    
    private void GenerateCombo() {
        try {
            
            cmbItemTypeModel=new EITLComboModel();
            cmbItemType.removeAll();
            cmbItemType.setModel(cmbItemTypeModel);
            
            ComboData objData=new ComboData();
            objData.Code=1;
            objData.Text="General";
            
            cmbItemTypeModel.addElement(objData);
            
            objData=new ComboData();
            objData.Code=2;
            objData.Text="Raw Material";
            
            cmbItemTypeModel.addElement(objData);
            
        }
        catch(Exception e) {
            
        }
        
    }
    
}
