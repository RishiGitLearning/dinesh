/*
 * SelectMIR.java
 *
 * Created on May 12, 2004, 11:11 AM
 */

package EITLERP.Stores;
 
/**
 * 
 * @author  nrpithva
 */
/*<APPLET CODE=SelectMIR.Class HEIGHT=400 WIDTH=700></APPLET>*/

import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
 
public class SelectIndent2 extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    private EITLTableCellRenderer Rend=new EITLTableCellRenderer();

    private String dbURL="";
    public int SelCompanyID=0;
    public int SelFromYear=0;
    
    public boolean Cancelled=true;
    public HashMap colSelItems=new HashMap();
    private JDialog aDialog;
    public int ModuleID=0;
    private String SelIndentNo="";

    public boolean CopyHeader=true;
    public clsIndent ObjIndent;

    private EITLComboModel cmbCompanyModel;
    private EITLComboModel cmbFromModel;
    
    private EITLComboModel cmbDeptModel;
    private int SelDeptID=0;
    
    
        
    public SelectIndent2()
    {
       System.gc(); 
       initComponents();
       FormatGrid();
       GenerateCombo();
        
       txtMIRNo.requestFocus();
    }
    
    /** Initializes the applet SelectMIR */
    /*public void init() {
        initComponents();
        FormatGrid();
        GenerateCombo();
        
       txtMIRNo.requestFocus();
    }*/
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMIRNo = new javax.swing.JTextField();
        cmdShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdSelectAll = new javax.swing.JButton();
        cmdClearAll = new javax.swing.JButton();
        chkCopyHeader = new javax.swing.JCheckBox();
        cmbCompany = new javax.swing.JComboBox();
        chkDept = new javax.swing.JCheckBox();
        cmbDept = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbFromYear = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtToYear = new javax.swing.JTextField();
        
        getContentPane().setLayout(null);
        
        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Select Indent Items from the List");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 212, 15);
        
        jLabel2.setDisplayedMnemonic('I');
        jLabel2.setLabelFor(txtMIRNo);
        jLabel2.setText("Indent No.");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(18, 116, 66, 15);
        
        txtMIRNo.setNextFocusableComponent(cmdShow);
        txtMIRNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMIRNoKeyPressed(evt);
            }
        });
        
        getContentPane().add(txtMIRNo);
        txtMIRNo.setBounds(88, 113, 106, 19);
        
        cmdShow.setMnemonic('S');
        cmdShow.setText("Show Items");
        cmdShow.setNextFocusableComponent(Table);
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdShow);
        cmdShow.setBounds(202, 113, 113, 22);
        
        Table.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
        }
        ));
        Table.setNextFocusableComponent(cmdSelectAll);
        jScrollPane1.setViewportView(Table);
        
        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(12, 154, 660, 198);
        
        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(8, 143, 662, 6);
        
        cmdOK.setMnemonic('O');
        cmdOK.setText("OK");
        cmdOK.setNextFocusableComponent(cmdCancel);
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdOK);
        cmdOK.setBounds(502, 358, 78, 25);
        
        cmdCancel.setMnemonic('C');
        cmdCancel.setText("Cancel");
        cmdCancel.setNextFocusableComponent(cmdOK);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(586, 358, 79, 25);
        
        cmdSelectAll.setMnemonic('A');
        cmdSelectAll.setText("Select All");
        cmdSelectAll.setNextFocusableComponent(cmdClearAll);
        cmdSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectAllActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdSelectAll);
        cmdSelectAll.setBounds(16, 360, 106, 25);
        
        cmdClearAll.setMnemonic('l');
        cmdClearAll.setText("Clear All");
        cmdClearAll.setNextFocusableComponent(cmdOK);
        cmdClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdClearAllActionPerformed(evt);
            }
        });
        
        getContentPane().add(cmdClearAll);
        cmdClearAll.setBounds(134, 360, 102, 25);
        
        chkCopyHeader.setMnemonic('C');
        chkCopyHeader.setSelected(true);
        chkCopyHeader.setText("Copy Header Information");
        getContentPane().add(chkCopyHeader);
        chkCopyHeader.setBounds(502, 10, 170, 23);
        
        cmbCompany.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CompanyChanged(evt);
            }
        });
        
        getContentPane().add(cmbCompany);
        cmbCompany.setBounds(88, 47, 228, 24);
        
        chkDept.setText("Dept");
        chkDept.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkDeptStateChanged(evt);
            }
        });
        
        getContentPane().add(chkDept);
        chkDept.setBounds(24, 86, 60, 23);
        
        cmbDept.setEnabled(false);
        getContentPane().add(cmbDept);
        cmbDept.setBounds(88, 85, 228, 24);
        
        jLabel3.setDisplayedMnemonic('I');
        jLabel3.setLabelFor(txtMIRNo);
        jLabel3.setText("Company");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(16, 51, 66, 15);
        
        jLabel6.setFont(new java.awt.Font("Verdana", 0, 11));
        jLabel6.setText("Year");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(349, 50, 38, 14);
        
        cmbFromYear.setOpaque(false);
        getContentPane().add(cmbFromYear);
        cmbFromYear.setBounds(395, 46, 102, 24);
        
        jLabel7.setFont(new java.awt.Font("Verdana", 0, 11));
        jLabel7.setText("To");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(504, 51, 24, 14);
        
        txtToYear.setEditable(false);
        txtToYear.setOpaque(false);
        getContentPane().add(txtToYear);
        txtToYear.setBounds(527, 48, 102, 19);
        
    }//GEN-END:initComponents

    private void CompanyChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CompanyChanged
        // TODO add your handling code here:
        SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
        GenerateYearCombo();
        GenerateDeptCombo();
    }//GEN-LAST:event_CompanyChanged

    private void chkDeptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkDeptStateChanged
        // TODO add your handling code here:
        if(chkDept.isSelected())
        {
            cmbDept.setEnabled(true);
        }
        else
        {
            cmbDept.setEnabled(false);
        }
    }//GEN-LAST:event_chkDeptStateChanged

    private void txtMIRNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMIRNoKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            String strSQL="";
            SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
            int FromYear=EITLERPGLOBAL.getComboCode(cmbFromYear);
            
            LOV aList=new LOV();
            aList.UseSpecifiedConn=true;
            aList.dbURL=clsFinYear.getDBURL(SelCompanyID, FromYear);
                        
            SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
            
            if(chkDept.isSelected())
            {
                //aList.SQL="SELECT DISTINCT(D_INV_INDENT_HEADER.INDENT_NO) AS INDENT_NO,DATE_FORMAT(INDENT_DATE,'%d/%m/%Y') AS DATE,DEPT_DESC FROM D_INV_INDENT_HEADER,D_INV_INDENT_DETAIL,D_COM_DEPT_MASTER WHERE D_INV_INDENT_HEADER.COMPANY_ID=D_INV_INDENT_DETAIL.COMPANY_ID AND D_INV_INDENT_HEADER.INDENT_NO=D_INV_INDENT_DETAIL.INDENT_NO  AND D_INV_INDENT_DETAIL.PO_QTY<D_INV_INDENT_DETAIL.QTY AND D_INV_INDENT_HEADER.APPROVED=1 AND D_INV_INDENT_HEADER.CANCELED=0 AND D_INV_INDENT_HEADER.COMPANY_ID=D_COM_DEPT_MASTER.COMPANY_ID AND D_INV_INDENT_HEADER.FOR_DEPT_ID=D_COM_DEPT_MASTER.DEPT_ID AND D_INV_INDENT_HEADER.FOR_DEPT_ID="+SelDeptID+" AND D_INV_INDENT_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY D_INV_INDENT_HEADER.INDENT_NO";
                strSQL="SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO,DATE_FORMAT(A.INDENT_DATE,'%d/%m/%Y') AS DATE,D.DEPT_DESC,B.QTY ";
                strSQL+="FROM ";
                strSQL+="D_INV_INDENT_HEADER A, ";
                strSQL+="D_INV_INDENT_DETAIL B ";
                strSQL+="LEFT JOIN D_PUR_PO_DETAIL P ON (P.INDENT_NO=B.INDENT_NO AND P.INDENT_SR_NO=B.SR_NO AND P.PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO=P.PO_NO AND PO_TYPE=P.PO_TYPE AND APPROVED=1 AND CANCELLED=0)), ";
                strSQL+="D_COM_DEPT_MASTER D ";
                strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
                strSQL+="A.INDENT_NO=B.INDENT_NO AND ";
                strSQL+="A.COMPANY_ID="+SelCompanyID+" AND ";
                strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                strSQL+="B.COMPANY_ID=D.COMPANY_ID AND A.FOR_DEPT_ID=D.DEPT_ID AND ";
                strSQL+="A.FORT_DEPT_ID="+SelDeptID+" ";
                strSQL+="GROUP BY B.INDENT_NO,B.SR_NO ";
                strSQL+="HAVING IF(SUM(P.QTY) IS NULL,0,SUM(P.QTY))<B.QTY ";
                
                aList.SQL=strSQL;
            }
            else
            {
                //aList.SQL="SELECT DISTINCT(D_INV_INDENT_HEADER.INDENT_NO) AS INDENT_NO,DATE_FORMAT(INDENT_DATE,'%d/%m/%Y') AS DATE,DEPT_DESC FROM D_INV_INDENT_HEADER,D_INV_INDENT_DETAIL,D_COM_DEPT_MASTER WHERE D_INV_INDENT_HEADER.COMPANY_ID=D_INV_INDENT_DETAIL.COMPANY_ID AND D_INV_INDENT_HEADER.INDENT_NO=D_INV_INDENT_DETAIL.INDENT_NO  AND D_INV_INDENT_DETAIL.PO_QTY<D_INV_INDENT_DETAIL.QTY AND D_INV_INDENT_HEADER.APPROVED=1 AND D_INV_INDENT_HEADER.CANCELED=0 AND D_INV_INDENT_HEADER.COMPANY_ID=D_COM_DEPT_MASTER.COMPANY_ID AND D_INV_INDENT_HEADER.FOR_DEPT_ID=D_COM_DEPT_MASTER.DEPT_ID AND D_INV_INDENT_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY D_INV_INDENT_HEADER.INDENT_NO";
                
                strSQL="SELECT DISTINCT(A.INDENT_NO) AS INDENT_NO,DATE_FORMAT(A.INDENT_DATE,'%d/%m/%Y') AS DATE,D.DEPT_DESC,B.QTY ";
                strSQL+="FROM ";
                strSQL+="D_INV_INDENT_HEADER A, ";
                strSQL+="D_INV_INDENT_DETAIL B ";
                strSQL+="LEFT JOIN D_PUR_PO_DETAIL P ON (P.INDENT_NO=B.INDENT_NO AND P.INDENT_SR_NO=B.SR_NO AND P.PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO=P.PO_NO AND PO_TYPE=P.PO_TYPE AND APPROVED=1 AND CANCELLED=0)), ";
                strSQL+="D_COM_DEPT_MASTER D ";
                strSQL+="WHERE A.COMPANY_ID=B.COMPANY_ID AND ";
                strSQL+="A.INDENT_NO=B.INDENT_NO AND ";
                strSQL+="A.COMPANY_ID="+SelCompanyID+" AND ";
                strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                strSQL+="B.COMPANY_ID=D.COMPANY_ID AND A.FOR_DEPT_ID=D.DEPT_ID ";
                strSQL+="GROUP BY B.INDENT_NO,B.SR_NO ";
                strSQL+="HAVING IF(SUM(P.QTY) IS NULL,0,SUM(P.QTY))<B.QTY ";
                
                aList.SQL=strSQL;
                
            }
            
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                txtMIRNo.setText(aList.ReturnVal);
            }
        }
        //=========================================
    }//GEN-LAST:event_txtMIRNoKeyPressed

    private void cmdClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdClearAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++)
        {
           DataModel.setValueAt(Boolean.valueOf(false), i, 0); 
        }
    }//GEN-LAST:event_cmdClearAllActionPerformed

    private void cmdSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<Table.getRowCount();i++)
        {
           DataModel.setValueAt(Boolean.valueOf(true), i, 0); 
        }
    }//GEN-LAST:event_cmdSelectAllActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()<=0) {
            Cancelled=true;
        }
        else {
            SetList();
            Cancelled=false;
        }
        aDialog.dispose();
    }//GEN-LAST:event_cmdOKActionPerformed

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        SelIndentNo=txtMIRNo.getText();
        SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
        int FromYear=EITLERPGLOBAL.getComboCode(cmbFromYear);

        String theURL=clsFinYear.getDBURL(SelCompanyID, FromYear);
        
        String docStatus=clsIndent.getDocStatus(EITLERPGLOBAL.gCompanyID,SelIndentNo,theURL);
        
        if(!docStatus.trim().equals(""))
        {
          JOptionPane.showMessageDialog(null,docStatus);  
          return;
        }
        FormatGrid();
        GenerateGrid();
        
        if(Table.getRowCount()==0&&docStatus.trim().equals(""))
        {
          JOptionPane.showMessageDialog(null,"No pending items found");
        }
    }//GEN-LAST:event_cmdShowActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JCheckBox chkCopyHeader;
    private javax.swing.JCheckBox chkDept;
    private javax.swing.JComboBox cmbCompany;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbFromYear;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdClearAll;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdSelectAll;
    private javax.swing.JButton cmdShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtMIRNo;
    private javax.swing.JTextField txtToYear;
    // End of variables declaration//GEN-END:variables
    
private void FormatGrid()    
{
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i=1;i<=32;i++)
        {
            DataModel.SetReadOnly(i);
        }
        
        //Add Columns to it
        DataModel.addColumn(""); //0 Selection
        DataModel.addColumn("Sr.");//1
        DataModel.addColumn("Item ID");//2
        DataModel.addColumn("Item Name");//3
        DataModel.addColumn("Unit ID");//4
        DataModel.addColumn("Unit");//5
        DataModel.addColumn("Total Req. Qty.");//6
        DataModel.addColumn("Qty");//7
        DataModel.addColumn("PO Qty");//8
        DataModel.addColumn("Pending Qty");//9
        DataModel.addColumn("Allocated Qty");//10
        DataModel.addColumn("Stock Qty");//11
        DataModel.addColumn("Remarks");//12
        DataModel.addColumn("MR No.");//13
        DataModel.addColumn("MR Sr.");//14
        
        Rend.setCustomComponent(0,"CheckBox");
        Table.getColumnModel().getColumn(0).setCellRenderer(Rend);
        Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
}

private void SetList()
{
    int SrNo=0;
    HashMap List=new HashMap();
    
    SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
    SelFromYear=EITLERPGLOBAL.getComboCode(cmbFromYear);
    
    String theURL=clsFinYear.getDBURL(SelCompanyID, SelFromYear);
        
    colSelItems.clear();
    
    clsIndent tmpObj=new clsIndent();
    ObjIndent=(clsIndent)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, txtMIRNo.getText(),theURL);
    CopyHeader=chkCopyHeader.isSelected();
    
    
    List=clsIndent.getIndentItemList(EITLERPGLOBAL.gCompanyID, SelIndentNo,false,theURL);    
    //Scan the Table to get selected items
    for(int i=1;i<=List.size();i++)
    {
       clsIndentItem ObjItem=(clsIndentItem)List.get(Integer.toString(i));
       SrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
       
        //Search in the table for SrNo.
       for(int j=0;j<Table.getRowCount();j++)
       {
           if(Integer.parseInt(Table.getValueAt(j, 1).toString())==SrNo) 
           {
             if(Table.getValueAt(j,0).toString().equals("true"))  
             {
               //Selected Item  
               colSelItems.put(Integer.toString(colSelItems.size()+1),ObjItem);
             }
           }
       }
    }
}

private void GenerateGrid()
{
    HashMap List=new HashMap();
    String IndentNo=txtMIRNo.getText();
    
    SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
    int FromYear=EITLERPGLOBAL.getComboCode(cmbFromYear);
    
    String theURL=clsFinYear.getDBURL(SelCompanyID, FromYear);
            
    if(!IndentNo.equals(""))
    {
       List=clsIndent.getIndentItemList(EITLERPGLOBAL.gCompanyID, IndentNo,false,theURL);
       
       for(int i=1;i<=List.size();i++)
       {
           clsIndentItem ObjItem=(clsIndentItem)List.get(Integer.toString(i));

           Object[] rowData=new Object[15];
     
           
           rowData[0]=Boolean.valueOf(true); //By default not selected
           rowData[1]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
           rowData[2]=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
           rowData[3]=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,(String)ObjItem.getAttribute("ITEM_CODE").getObj());
           rowData[4]=Integer.toString((int)ObjItem.getAttribute("UNIT").getVal());
           rowData[5]=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int)ObjItem.getAttribute("UNIT").getVal());
           rowData[6]=Double.toString(ObjItem.getAttribute("TOTAL_REQ_QTY").getVal());
           rowData[7]=Double.toString(ObjItem.getAttribute("QTY").getVal());
           rowData[8]=Double.toString(ObjItem.getAttribute("PO_QTY").getVal());
           rowData[9]=Double.toString(ObjItem.getAttribute("BAL_QTY").getVal());
           rowData[10]=Double.toString(ObjItem.getAttribute("ALLOCATED_QTY").getVal());
           rowData[11]=Double.toString(ObjItem.getAttribute("STOCK_QTY").getVal());
           rowData[12]=(String) ObjItem.getAttribute("REMARKS").getObj();
           rowData[13]=(String)ObjItem.getAttribute("MR_NO").getObj();
           rowData[14]=Integer.toString((int)ObjItem.getAttribute("MR_SR_NO").getVal());

           DataModel.addRow(rowData);
           
       }
    }
    
}

    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }

public boolean ShowList() {
        try {
            FormatGrid();

            setSize(700,400);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Select Indent Items",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }    

private void GenerateCombo()
{
    HashMap List=new HashMap();
    String strCondition="";
    
        
        clsCompany ObjCompany;
        
        cmbCompanyModel=new EITLComboModel();
        cmbCompany.setModel(cmbCompanyModel);
        cmbCompany.removeAllItems();  //Clearing previous contents
        
        List=clsCompany.getList("");
        
        for(int i=1;i<=List.size();i++) {
            ObjCompany=(clsCompany) List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String)ObjCompany.getAttribute("COMPANY_NAME").getObj();
            aData.Code=(long)ObjCompany.getAttribute("COMPANY_ID").getVal();
            cmbCompanyModel.addElement(aData);
            
        }
        
        SelCompanyID=EITLERPGLOBAL.getComboCode(cmbCompany);
        GenerateYearCombo();
        GenerateDeptCombo();
}


private void GenerateDeptCombo()
{
    HashMap List=new HashMap();
    String strCondition="";

    dbURL=clsFinYear.getDBURL(SelCompanyID,EITLERPGLOBAL.getComboCode(cmbFromYear));
    
        //----- Generate cmbType ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        strCondition=" WHERE COMPANY_ID="+SelCompanyID+" ";
        
        List=clsDepartment.getList(strCondition,dbURL);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            aData.strCode="";
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
    
}


    private void GenerateYearCombo() {
        HashMap List=new HashMap();

        cmbFromModel=new EITLComboModel();
        cmbFromYear.setModel(cmbFromModel);
        cmbFromYear.removeAllItems();
        
        List=clsFinYear.getList(" WHERE COMPANY_ID="+SelCompanyID);
        
        for(int i=1;i<=List.size();i++) {
            clsFinYear ObjYear =(clsFinYear) List.get(Integer.toString(i));
            
            ComboData cmbData=new ComboData();
            cmbData.Text=Integer.toString((int)ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbData.Code=(int)ObjYear.getAttribute("YEAR_FROM").getVal();
            cmbData.strCode =Integer.toString((int)ObjYear.getAttribute("YEAR_FROM").getVal());
            cmbFromModel.addElement(cmbData);
        }
    }


}
