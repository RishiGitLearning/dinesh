/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
package EITLERP.Stores;

/**
 *
 * @author nhpatel
 */
/*<APPLET CODE=FrmIndent.class HEIGHT=420 WIDTH=740*/
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Purchase.*;
import EITLERP.Utils.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.sql.*;
import java.net.*;
import java.io.*;
import java.applet.*;

public class FrmIndent extends javax.swing.JApplet {

    private int EditMode = 0;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellPainter = new EITLTableCellRenderer();
    private EITLTableCellRenderer CellPainterA = new EITLTableCellRenderer();

    private clsIndent ObjIndent;

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private String SelNo = ""; //Selected Prefix Number

    private EITLComboModel cmbDeptModel;
    private EITLComboModel cmbIndentTypeModel;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbSendToEModel;
    private EITLTableModel DataModelA;

    private EITLComboModel cmbUserModel;

    private boolean HistoryView = false;
    private String theDocNo = "";
    private EITLTableModel DataModelHS;

    private boolean DoNotEvaluate = false;

    public frmPendingApprovals frmPA;

    private String OldFileName = "";
    private JFileChooser fc = new JFileChooser();
    String cellLastValue = "";

    /**
     * Creates new form frmTemplate
     */
    public void init() {
        System.gc();
        setSize(740, 470);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        FormatGrid();
        SetNumberFormats();

        GenerateCombos();
        ObjIndent = new clsIndent();
        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {
            if (ObjIndent.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjIndent.MoveLast();
                DisplayData();

                ShowMessage("Ready ...............");
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while loading data. Error is " + ObjIndent.LastError);
            }
        }

        cmdInsertMOM.setVisible(false);
        txtAuditRemarks.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        mnuShowDoc = new javax.swing.JPopupMenu();
        mnuShowPR = new javax.swing.JMenuItem();
        mnuShowExePO = new javax.swing.JMenuItem();
        mnuShowWorker = new javax.swing.JPopupMenu();
        WorkerDetailItem = new javax.swing.JMenuItem();
        WorkerDetailAll = new javax.swing.JMenuItem();
        copyItem = new javax.swing.JMenuItem();
        copyAll = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        cmdShortClose = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtIndentNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtIndentDate = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cmbIndentType = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox();
        chkCancelled = new javax.swing.JCheckBox();
        cmdNext_Header = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        cmdRemarksBig = new javax.swing.JButton();
        chkAttachement = new javax.swing.JCheckBox();
        txtFile = new javax.swing.JTextField();
        cmdBrowse = new javax.swing.JButton();
        cmdDownload = new javax.swing.JButton();
        cmdSaveAs = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        cmdInsertMR = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        cmdInsertMOM = new javax.swing.JButton();
        cmdNext_Detail = new javax.swing.JButton();
        cmdPrev_Detail = new javax.swing.JButton();
        txtNetAmount = new javax.swing.JTextField();
        cmdHistory = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtSpFrom = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSpFromRemarks = new javax.swing.JTextField();
        txtSpToRemarks = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cmdShowDoc = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        cmdWorker = new javax.swing.JButton();
        cmdSubItem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel36 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        txtFrom = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        panelExplicit = new javax.swing.JPanel();
        chkSendExplicitly = new javax.swing.JCheckBox();
        cmbSendToE = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        mnuShowPR.setText("Show PR");
        mnuShowPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowPRActionPerformed(evt);
            }
        });

        mnuShowDoc.add(mnuShowPR);

        mnuShowExePO.setText("Show Executed PO");
        mnuShowExePO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowExePOActionPerformed(evt);
            }
        });

        mnuShowDoc.add(mnuShowExePO);

        WorkerDetailItem.setText("Details of this Item");
        WorkerDetailItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkerDetailItemActionPerformed(evt);
            }
        });

        mnuShowWorker.add(WorkerDetailItem);

        WorkerDetailAll.setText("Worker Details (All Items)");
        WorkerDetailAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WorkerDetailAllActionPerformed(evt);
            }
        });

        mnuShowWorker.add(WorkerDetailAll);

        copyItem.setText("Copy Prev Year detail ");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });

        mnuShowWorker.add(copyItem);

        copyAll.setText("Copy Prev. Year Details (All items)");
        copyAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyAllActionPerformed(evt);
            }
        });

        mnuShowWorker.add(copyAll);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save Record");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        cmdShortClose.setText("Short Close");
        cmdShortClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShortCloseActionPerformed(evt);
            }
        });

        ToolBar.add(cmdShortClose);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" INDENT");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.setEnabled(false);
        jLabel2.setText("Indent No.");
        Tab1.add(jLabel2);
        jLabel2.setBounds(27, 14, 67, 20);

        txtIndentNo.setBackground(new java.awt.Color(255, 255, 204));
        txtIndentNo.setEditable(false);
        txtIndentNo.setNextFocusableComponent(txtIndentDate);
        Tab1.add(txtIndentNo);
        txtIndentNo.setBounds(106, 14, 90, 19);

        jLabel3.setDisplayedMnemonic('i');
        jLabel3.setLabelFor(txtIndentDate);
        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(243, 14, 38, 20);

        txtIndentDate.setName("INDENT_DATE");
        txtIndentDate.setNextFocusableComponent(cmbStatus);
        txtIndentDate.setEnabled(false);
        txtIndentDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIndentDateFocusGained(evt);
            }
        });

        Tab1.add(txtIndentDate);
        txtIndentDate.setBounds(279, 14, 92, 19);

        jLabel17.setText("Indent Type");
        Tab1.add(jLabel17);
        jLabel17.setBounds(17, 52, 81, 20);

        cmbIndentType.setBackground(new java.awt.Color(204, 204, 255));
        cmbIndentType.setName("INDENT_TYPE");
        cmbIndentType.setNextFocusableComponent(cmbDept);
        cmbIndentType.setEnabled(false);
        cmbIndentType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbIndentTypeFocusGained(evt);
            }
        });
        cmbIndentType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbIndentTypeItemStateChanged(evt);
            }
        });

        Tab1.add(cmbIndentType);
        cmbIndentType.setBounds(106, 52, 210, 24);

        jLabel19.setText("Department");
        Tab1.add(jLabel19);
        jLabel19.setBounds(15, 84, 83, 20);

        cmbDept.setBackground(new java.awt.Color(204, 255, 255));
        cmbDept.setName("FOR_DEPT_ID");
        cmbDept.setNextFocusableComponent(cmbUser);
        cmbDept.setEnabled(false);
        cmbDept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbDeptFocusGained(evt);
            }
        });
        cmbDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeptItemStateChanged(evt);
            }
        });

        Tab1.add(cmbDept);
        cmbDept.setBounds(106, 84, 210, 24);

        jLabel20.setText("Purpose");
        Tab1.add(jLabel20);
        jLabel20.setBounds(44, 156, 56, 20);

        txtPurpose.setName("PURPOSE");
        txtPurpose.setNextFocusableComponent(cmdNext_Header);
        txtPurpose.setEnabled(false);
        txtPurpose.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPurposeFocusGained(evt);
            }
        });

        Tab1.add(txtPurpose);
        txtPurpose.setBounds(108, 156, 302, 19);

        jLabel21.setText("Status");
        Tab1.add(jLabel21);
        jLabel21.setBounds(428, 52, 46, 20);

        cmbStatus.setBackground(new java.awt.Color(204, 204, 255));
        cmbStatus.setName("STATUS");
        cmbStatus.setNextFocusableComponent(cmbIndentType);
        cmbStatus.setEnabled(false);
        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });
        cmbStatus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbStatusFocusGained(evt);
            }
        });

        Tab1.add(cmbStatus);
        cmbStatus.setBounds(478, 52, 94, 24);

        chkCancelled.setForeground(new java.awt.Color(255, 51, 51));
        chkCancelled.setText("Cancelled ");
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(640, 6, 92, 23);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next ");
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(634, 286, 90, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(198, 17, 40, 15);

        jLabel4.setText("User");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel4);
        jLabel4.setBounds(56, 124, 44, 15);

        cmbUser.setName("BUYER");
        cmbUser.setNextFocusableComponent(txtPurpose);
        cmbUser.setEnabled(false);
        Tab1.add(cmbUser);
        cmbUser.setBounds(107, 120, 209, 24);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(414, 156, 36, 20);

        chkAttachement.setText("Attach File :");
        chkAttachement.setName("ATTACHEMENT");
        chkAttachement.setEnabled(false);
        Tab1.add(chkAttachement);
        chkAttachement.setBounds(6, 199, 100, 23);

        txtFile.setName("ATTACHEMENT_PATH");
        txtFile.setEnabled(false);
        Tab1.add(txtFile);
        txtFile.setBounds(112, 200, 290, 21);

        cmdBrowse.setText("Browse");
        cmdBrowse.setName("ATTACHEMENT_PATH");
        cmdBrowse.setEnabled(false);
        cmdBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBrowseActionPerformed(evt);
            }
        });

        Tab1.add(cmdBrowse);
        cmdBrowse.setBounds(405, 199, 80, 22);

        cmdDownload.setText("Download File");
        cmdDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDownloadActionPerformed(evt);
            }
        });

        Tab1.add(cmdDownload);
        cmdDownload.setBounds(356, 236, 130, 20);

        cmdSaveAs.setText("Save As");
        cmdSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveAsActionPerformed(evt);
            }
        });

        Tab1.add(cmdSaveAs);
        cmdSaveAs.setBounds(230, 235, 82, 20);

        jTabbedPane1.addTab("Indent Header", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab2.add(jPanel4);
        jPanel4.setBounds(91, 24, 166, 6);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel22.setText("Indent Items");
        Tab2.add(jLabel22);
        jLabel22.setBounds(6, 14, 84, 15);

        cmdInsertMR.setMnemonic('I');
        cmdInsertMR.setText("Insert from PR");
        cmdInsertMR.setEnabled(false);
        cmdInsertMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertMRActionPerformed(evt);
            }
        });

        Tab2.add(cmdInsertMR);
        cmdInsertMR.setBounds(264, 8, 130, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab2.add(cmdAdd);
        cmdAdd.setBounds(526, 8, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab2.add(cmdRemove);
        cmdRemove.setBounds(616, 8, 92, 25);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(TableL);

        Tab2.add(jScrollPane1);
        jScrollPane1.setBounds(6, 40, 720, 156);

        jLabel24.setText("Net Amount");
        Tab2.add(jLabel24);
        jLabel24.setBounds(504, 205, 86, 15);

        cmdInsertMOM.setMnemonic('I');
        cmdInsertMOM.setText("Insert from MOM");
        cmdInsertMOM.setEnabled(false);
        cmdInsertMOM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertMOMActionPerformed(evt);
            }
        });

        Tab2.add(cmdInsertMOM);
        cmdInsertMOM.setBounds(394, 8, 130, 25);

        cmdNext_Detail.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Detail.setMnemonic('x');
        cmdNext_Detail.setText("Next ");
        cmdNext_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_DetailActionPerformed(evt);
            }
        });

        Tab2.add(cmdNext_Detail);
        cmdNext_Detail.setBounds(638, 313, 90, 25);

        cmdPrev_Detail.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev_Detail.setMnemonic('o');
        cmdPrev_Detail.setText("Previous");
        cmdPrev_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrev_DetailActionPerformed(evt);
            }
        });

        Tab2.add(cmdPrev_Detail);
        cmdPrev_Detail.setBounds(546, 313, 90, 25);

        txtNetAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtNetAmount.setEditable(false);
        txtNetAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Tab2.add(txtNetAmount);
        txtNetAmount.setBounds(592, 202, 134, 19);

        cmdHistory.setText("Item History");
        cmdHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdHistoryActionPerformed(evt);
            }
        });

        Tab2.add(cmdHistory);
        cmdHistory.setBounds(6, 202, 108, 25);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jLabel6.setText("Remarks From");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(6, 5, 96, 15);

        txtSpFrom.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(txtSpFrom);
        txtSpFrom.setBounds(106, 5, 340, 20);

        jLabel7.setText("Your Remarks");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(5, 69, 95, 15);

        txtSpFromRemarks.setBackground(new java.awt.Color(255, 204, 204));
        txtSpFromRemarks.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtSpFromRemarks.setEnabled(false);
        jPanel1.add(txtSpFromRemarks);
        txtSpFromRemarks.setBounds(106, 27, 376, 21);

        txtSpToRemarks.setEnabled(false);
        txtSpToRemarks.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtSpToRemarksCaretUpdate(evt);
            }
        });

        jPanel1.add(txtSpToRemarks);
        txtSpToRemarks.setBounds(106, 65, 376, 21);

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2);
        jButton2.setBounds(484, 27, 33, 22);

        jButton3.setText("...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton3);
        jButton3.setBounds(486, 64, 33, 22);

        Tab2.add(jPanel1);
        jPanel1.setBounds(7, 244, 523, 97);

        cmdShowDoc.setText("Show Doc.");
        cmdShowDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowDocActionPerformed(evt);
            }
        });

        Tab2.add(cmdShowDoc);
        cmdShowDoc.setBounds(116, 202, 110, 25);

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.add(jPanel2);
        jPanel2.setBounds(541, 244, 25, 17);

        jLabel1.setText("ED Approval Required");
        Tab2.add(jLabel1);
        jLabel1.setBounds(569, 245, 147, 15);

        jLabel5.setText("MD Approval Required");
        Tab2.add(jLabel5);
        jLabel5.setBounds(569, 270, 147, 15);

        jPanel7.setBackground(new java.awt.Color(102, 102, 255));
        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.add(jPanel7);
        jPanel7.setBounds(541, 269, 25, 15);

        cmdWorker.setText("Worker Details");
        cmdWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdWorkerActionPerformed(evt);
            }
        });

        Tab2.add(cmdWorker);
        cmdWorker.setBounds(228, 202, 126, 25);

        cmdSubItem.setText("Substitute Item");
        cmdSubItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSubItemActionPerformed(evt);
            }
        });

        Tab2.add(cmdSubItem);
        cmdSubItem.setBounds(357, 202, 130, 25);

        jTabbedPane1.addTab("Indent Item Detail", Tab2);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 167, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setEnabled(false);
        OpgHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpgHoldActionPerformed(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel36.setText("Your Action  ");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(20, 130, 76, 15);

        jLabel35.setText("Remarks");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 518, 19);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel32.setText("From");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(20, 50, 56, 20);

        jLabel31.setText("Hierarchy ");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(20, 10, 66, 30);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });

        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 262, 24);

        jLabel33.setText("Send To");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(18, 234, 60, 15);

        cmbSendTo.setEnabled(false);
        cmbSendTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSendToActionPerformed(evt);
            }
        });
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(90, 232, 261, 24);

        jLabel34.setText("Remarks");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(16, 270, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdPrev);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtToRemarksCaretUpdate(evt);
            }
        });
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(90, 268, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });

        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(620, 270, 90, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        jPanel3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(608, 77, 36, 20);

        panelExplicit.setLayout(null);

        panelExplicit.setBorder(new javax.swing.border.EtchedBorder());
        chkSendExplicitly.setText("Send Document explicitly to");
        panelExplicit.add(chkSendExplicitly);
        chkSendExplicitly.setBounds(7, 10, 208, 23);

        panelExplicit.add(cmbSendToE);
        cmbSendToE.setBounds(12, 46, 231, 24);

        jPanel3.add(panelExplicit);
        panelExplicit.setBounds(291, 121, 258, 99);

        jTabbedPane1.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 650, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 192, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(13, 208, 510, 119);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(530, 234, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(530, 265, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPreviewA);
        cmdPreviewA.setBounds(530, 205, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(530, 297, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(527, 328, 129, 19);

        jTabbedPane1.addTab("Status", jPanel5);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(2, 66, 740, 373);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 447, 740, 22);

    }//GEN-END:initComponents

    private void cmdSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveAsActionPerformed
        // TODO add your handling code here:
        try {

            long DocID = (long) ObjIndent.getAttribute("DOC_ID").getVal();

            String FileName = "";

            if (DocID != 0) {

                clsDocument objDocument = clsDocument.getDocument(EITLERPGLOBAL.gCompanyID, DocID);
                FileName = objDocument.getAttribute("FILENAME").getObj().toString();
                fc.setSelectedFile(new File(FileName));

                int returnVal = fc.showSaveDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    //File file = fc.getSelectedFile();
                    File file = fc.getSelectedFile();
                    clsDocument.SavetoFile(EITLERPGLOBAL.gCompanyID, DocID, file);

                }

                JOptionPane.showMessageDialog(null, "The file has been saved to " + FileName);

                //URL ReportFile=new URL("");
                //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_cmdSaveAsActionPerformed

    private void cmbSendToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSendToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSendToActionPerformed

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void cmdSubItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSubItemActionPerformed
        // TODO add your handling code here:
        try {

            if (TableL.getRowCount() > 0 && TableL.getSelectedRow() >= 0) {
                String lItemID = (String) TableL.getValueAt(TableL.getSelectedRow(), 1);

                clsImportSubMapping.ShowSubstituteItem(lItemID);
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_cmdSubItemActionPerformed

    private void cmdDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDownloadActionPerformed
        // TODO add your handling code here:
        try {
            long DocID = (long) ObjIndent.getAttribute("DOC_ID").getVal();
            String FileName = "";

            if (DocID != 0) {
                clsDocument objDocument = clsDocument.getDocument(EITLERPGLOBAL.gCompanyID, DocID);

                FileName = System.getProperty("user.dir") + "/" + objDocument.getAttribute("FILENAME").getObj().toString();

                JOptionPane.showMessageDialog(null, "The file has been saved to " + FileName);

                //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/showfile.jsp?file="+FileName);
                //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
            } else {
                JOptionPane.showMessageDialog(null, "No document is attached with this PR");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_cmdDownloadActionPerformed

    private void cmdBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBrowseActionPerformed
        // TODO add your handling code here:
        try {

            FileDialog FileDialog = new FileDialog(findParentFrame(this));
            FileDialog.show();
            txtFile.setText(FileDialog.getDirectory() + FileDialog.getFile());

        } catch (Exception e) {

        }

    }//GEN-LAST:event_cmdBrowseActionPerformed

    private void cmdShortCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShortCloseActionPerformed
        // TODO add your handling code here:
        if (EditMode == 0) {

            if (ObjIndent.getAttribute("APPROVED").getInt() == 0) {
                JOptionPane.showMessageDialog(null, "You can only short close approved indents");
                return;
            }
            // Below program Modified by ASHUTOSH on 03-01-2019
int itemCount=data.getIntValueFromDB("SELECT COUNT(ITEM_CODE) FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+txtIndentNo.getText().trim()+"'");
            
            int shortCloseCount=data.getIntValueFromDB("SELECT COUNT(APPROVAL_STATUS) FROM D_INV_INDENT_HEADER_H WHERE INDENT_NO='"+txtIndentNo.getText().trim()+"' AND APPROVAL_STATUS='I'");
            if(shortCloseCount>0){
                JOptionPane.showMessageDialog(null,"You have already short close "+shortCloseCount+" times among "+itemCount+" Items");
            }
            // --------End of ASHUTOSH program
            DisplayData();
            SetFields(true);
            DisableToolbar();
            cmdRemove.setEnabled(false);
            cmdAdd.setEnabled(false);
            cmdInsertMR.setEnabled(false);
            EditMode = EITLERPGLOBAL.AMEND;
        }
    }//GEN-LAST:event_cmdShortCloseActionPerformed

    private void copyAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyAllActionPerformed
        // TODO add your handling code here:
        int Counter = 0;
        int PrevCount = 0;
        String strSQL = "";
        ResultSet rsTmp = null;

        // Copy List of Employees from Last Year
        try {

            strSQL = "SELECT C.* FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO=0 ORDER BY INDENT_DATE DESC";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() <= 0) {
                JOptionPane.showMessageDialog(null, "No previous details found for this item.");
                return;
            }

            strSQL = "SELECT C.NO_THIS_YEAR AS THECOUNT FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO=0 ORDER BY INDENT_DATE DESC";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                PrevCount = rsTmp.getInt("THECOUNT");
            }

            ObjIndent.colItemDetail.clear();

            strSQL = "SELECT C.* FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO=0 ORDER BY INDENT_DATE DESC";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    clsIndentItemDetail objItem = new clsIndentItemDetail();

                    objItem.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                    objItem.setAttribute("INDENT_NO", txtIndentNo.getText());
                    objItem.setAttribute("INDENT_SR_NO", 0);
                    objItem.setAttribute("SR_NO", Counter);
                    objItem.setAttribute("POSITION_DESC", rsTmp.getString("POSITION_DESC"));
                    objItem.setAttribute("POSITION_NO", rsTmp.getString("POSITION_NO"));
                    objItem.setAttribute("CARD_NO", rsTmp.getString("CARD_NO"));
                    objItem.setAttribute("NAME", rsTmp.getString("NAME"));
                    objItem.setAttribute("SHOE_SIZE", rsTmp.getString("SHOE_SIZE"));
                    objItem.setAttribute("GIVEN_LAST_YEAR", true);
                    objItem.setAttribute("REMARKS", rsTmp.getString("REMARKS"));
                    objItem.setAttribute("NO_ELIGIBLE", 0);
                    objItem.setAttribute("NO_LAST_YEAR", PrevCount);
                    objItem.setAttribute("NO_THIS_YEAR", 0);

                    ObjIndent.colItemDetail.put(Integer.toString(ObjIndent.colItemDetail.size() + 1), objItem);

                    rsTmp.next();
                }

            }

            JOptionPane.showMessageDialog(null, "Previous year details has been copied. ");

        } catch (Exception e) {

        }

    }//GEN-LAST:event_copyAllActionPerformed

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        // TODO add your handling code here:
        int CurrentRow = 0, Counter = 0;
        int PrevCount = 0;
        String ItemID = "";
        String strSQL = "";
        HashMap colItemDetail = new HashMap();
        ResultSet rsTmp = null;

        if (TableL.getRowCount() <= 0 || TableL.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Please select the item from the table.");
            return;
        }

        ItemID = DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
        CurrentRow = TableL.getSelectedRow();

        if (ItemID.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter item code");
            return;
        }

        // Copy List of Employees from Last Year
        try {

            strSQL = "SELECT C.* FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO>0 AND B.ITEM_CODE='" + ItemID + "' ORDER BY INDENT_DATE DESC";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() <= 0) {
                JOptionPane.showMessageDialog(null, "No previous details found for this item.");
                return;
            }

            strSQL = "SELECT C.NO_THIS_YEAR AS THECOUNT FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO>0 AND B.ITEM_CODE='" + ItemID + "' ORDER BY INDENT_DATE DESC";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                PrevCount = rsTmp.getInt("THECOUNT");
            }

            strSQL = "SELECT C.* FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO>0 AND B.ITEM_CODE='" + ItemID + "' ORDER BY INDENT_DATE DESC";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();
            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    Counter++;
                    clsIndentItemDetail objItem = new clsIndentItemDetail();

                    objItem.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                    objItem.setAttribute("INDENT_NO", txtIndentNo.getText());
                    objItem.setAttribute("INDENT_SR_NO", CurrentRow + 1);
                    objItem.setAttribute("SR_NO", Counter);
                    objItem.setAttribute("POSITION_DESC", rsTmp.getString("POSITION_DESC"));
                    objItem.setAttribute("POSITION_NO", rsTmp.getString("POSITION_NO"));
                    objItem.setAttribute("CARD_NO", rsTmp.getString("CARD_NO"));
                    objItem.setAttribute("NAME", rsTmp.getString("NAME"));
                    objItem.setAttribute("SHOE_SIZE", rsTmp.getString("SHOE_SIZE"));
                    objItem.setAttribute("GIVEN_LAST_YEAR", true);
                    objItem.setAttribute("REMARKS", rsTmp.getString("REMARKS"));
                    objItem.setAttribute("NO_ELIGIBLE", 0);
                    objItem.setAttribute("NO_LAST_YEAR", PrevCount);
                    objItem.setAttribute("NO_THIS_YEAR", 0);

                    colItemDetail.put(Integer.toString(colItemDetail.size() + 1), objItem);

                    rsTmp.next();
                }

            }

            DataModelL.SetUserObject(CurrentRow, colItemDetail);

            JOptionPane.showMessageDialog(null, "Previous year details has been copied. ");

        } catch (Exception e) {

        }
    }//GEN-LAST:event_copyItemActionPerformed

    private void WorkerDetailAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkerDetailAllActionPerformed
        // TODO add your handling code here:
        try {

            frmIndentDetail ObjLot = new frmIndentDetail();

            if (EditMode != 0) {
                ObjLot.AllowEdit = true;
            } else {
                ObjLot.AllowEdit = false;
            }

            ObjLot.forItemID = "";
            ObjLot.forDeptID = EITLERPGLOBAL.getComboCode(cmbDept);
            Object itemDetail = ObjIndent.colItemDetail;

            if (itemDetail == null || itemDetail.equals("")) {
                itemDetail = new HashMap();
            }

            ObjLot.colLot = (HashMap) itemDetail;
            if (ObjLot.ShowList()) //Ok Pressed
            {
                ObjIndent.colItemDetail = ObjLot.colLot;
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_WorkerDetailAllActionPerformed

    private void WorkerDetailItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WorkerDetailItemActionPerformed
        // TODO add your handling code here:
        try {
            if (TableL.getSelectedRow() >= 0) {
                frmIndentDetail ObjLot = new frmIndentDetail();

                if (EditMode != 0) {
                    ObjLot.AllowEdit = true;
                } else {
                    ObjLot.AllowEdit = false;
                }

                ObjLot.forItemID = DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
                ObjLot.forDeptID = EITLERPGLOBAL.getComboCode(cmbDept);
                Object itemDetail = DataModelL.getUserObject(TableL.getSelectedRow());

                if (itemDetail == null || itemDetail.equals("")) {
                    itemDetail = new HashMap();
                }

                ObjLot.colLot = (HashMap) itemDetail;
                if (ObjLot.ShowList()) //Ok Pressed
                {
                    DataModelL.SetUserObject(TableL.getSelectedRow(), ObjLot.colLot);
                }

            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_WorkerDetailItemActionPerformed

    private void cmdWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdWorkerActionPerformed
        // TODO add your handling code here:
        mnuShowWorker.show(Tab2, 260, 202 + cmdWorker.getHeight());


    }//GEN-LAST:event_cmdWorkerActionPerformed

    private void mnuShowExePOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowExePOActionPerformed
        // TODO add your handling code here:
        try {
            String ItemCode = DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
            int SrNo = Integer.parseInt(DataModelL.getValueByVariable("SR_NO", TableL.getSelectedRow()));
            String strSQL = "SELECT PO_NO AS DOC_NO,PO_DATE AS DOC_DATE FROM D_PUR_PO_HEADER WHERE CANCELLED=0 AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_DETAIL WHERE INDENT_NO='" + txtIndentNo.getText().trim() + "' AND INDENT_SR_NO=" + SrNo + ")";

            System.out.println(strSQL);

            frmDocumentList ObjDocList = new frmDocumentList();
            ObjDocList.ShowList(21, strSQL, "POs created from Indent No. " + txtIndentNo.getText());
        } catch (Exception e) {

        }
    }//GEN-LAST:event_mnuShowExePOActionPerformed

    private void cmdShowDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowDocActionPerformed
        // TODO add your handling code here:
        mnuShowDoc.show(Tab2, 133, 202 + cmdShowDoc.getHeight());
    }//GEN-LAST:event_cmdShowDocActionPerformed

    private void mnuShowPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowPRActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        try {
            String DocNo = DataModelL.getValueByVariable("MR_NO", TableL.getSelectedRow());

            if (!DocNo.trim().equals("")) {
                AppletFrame aFrame = new AppletFrame("Purchase Requisition");
                aFrame.startAppletEx("EITLERP.Stores.frmMR", "Purchase Requisition");
                frmMR ObjDoc = (frmMR) aFrame.ObjApplet;
                ObjDoc.FindEx((int) EITLERPGLOBAL.gCompanyID, DocNo);
            } else {
                JOptionPane.showMessageDialog(null, "P.R. no. not specified");
            }
        } catch (Exception e) {

        }

    }//GEN-LAST:event_mnuShowPRActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtSpToRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtSpFromRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtToRemarksCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtToRemarksCaretUpdate
        // TODO add your handling code here:
        //       txtSpToRemarks.setText(txtToRemarks.getText());
    }//GEN-LAST:event_txtToRemarksCaretUpdate

    private void txtSpToRemarksCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtSpToRemarksCaretUpdate
        // TODO add your handling code here:
        txtToRemarks.setText(txtSpToRemarks.getText());
    }//GEN-LAST:event_txtSpToRemarksCaretUpdate

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtPurpose;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed

    private void cmbDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeptItemStateChanged
        // TODO add your handling code here:
        GenerateUserCombo();
    }//GEN-LAST:event_cmbDeptItemStateChanged

    private void cmdInsertMOMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertMOMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdInsertMOMActionPerformed

    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjIndent.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtIndentNo.getText();
        ObjIndent.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void cmdHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdHistoryActionPerformed
        // TODO add your handling code here:

        try {
            if (TableL.getRowCount() > 0 && TableL.getSelectedRow() >= 0) {
                String lItemID = (String) TableL.getValueAt(TableL.getSelectedRow(), 1);

                frmItemHistory ObjItem = new frmItemHistory();
                ObjItem.ShowForm(lItemID);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select the item");
        }

    }//GEN-LAST:event_cmdHistoryActionPerformed

    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        if (EditMode != 0) {
            if (evt.getKeyCode() == 67 && evt.getModifiersEx() == 128) //Ctrl+C Key Combonation
            {
                try {
                    //Check that any row exist
                    if (TableL.getRowCount() > 0) {
                        //First Add new row
                        Object[] rowData = new Object[1];
                        DataModelL.addRow(rowData);
                        int NewRow = TableL.getRowCount() - 1;

                        Object userObj = DataModelL.getUserObject(NewRow - 1);

                        if (userObj == null || userObj == "") {
                            userObj = new HashMap();
                        }

                        //Copy New row with Previous one
                        for (int i = 0; i < TableL.getColumnCount(); i++) {
                            TableL.setValueAt(TableL.getValueAt(TableL.getSelectedRow(), i), NewRow, i);
                        }

                        //Create new Object for Item Details
                        HashMap colItemDetail = new HashMap();
                        HashMap colTmp = (HashMap) userObj;

                        for (int i = 1; i <= colTmp.size(); i++) {
                            clsIndentItemDetail objItem = (clsIndentItemDetail) colTmp.get(Integer.toString(i));
                            objItem.setAttribute("INDENT_SR_NO", NewRow);

                            colItemDetail.put(Integer.toString(colItemDetail.size() + 1), objItem);
                        }

                        DataModelL.SetUserObject(NewRow, colItemDetail);

                        UpdateSrNo();
                    }
                } catch (Exception e) {

                }
            }
        }
    }//GEN-LAST:event_TableLKeyReleased

    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter extra Remarks for further Approval person hints ............");
    }//GEN-LAST:event_txtToRemarksFocusGained

    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Users list from selection for further approval hierarchy ............");
    }//GEN-LAST:event_cmbSendToFocusGained

    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for keeping document as Hold ............");
    }//GEN-LAST:event_OpgHoldFocusGained

    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for Rejecting a document ............");
    }//GEN-LAST:event_OpgRejectFocusGained

    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for Approving as Final Approval ............");
    }//GEN-LAST:event_OpgFinalFocusGained

    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select option for only Approval ............");
    }//GEN-LAST:event_OpgApproveFocusGained

    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy from given list for Approval ............");
    }//GEN-LAST:event_cmbHierarchyFocusGained

    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdPrevActionPerformed

    private void cmdPrev_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrev_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrev_DetailActionPerformed

    private void cmdNext_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext_DetailActionPerformed

    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed

    private void txtPurposeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPurposeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter purpose for generating Indent ..............");
    }//GEN-LAST:event_txtPurposeFocusGained

    private void cmbDeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbDeptFocusGained
        // TODO add your handling code here:
        ShowMessage("For Which Department Indent is prepared ..............");
    }//GEN-LAST:event_cmbDeptFocusGained

    private void cmbIndentTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbIndentTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Indent type for further selection ..............");
    }//GEN-LAST:event_cmbIndentTypeFocusGained

    private void cmbStatusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbStatusFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Status option wether Indent open / closed ..............");
    }//GEN-LAST:event_cmbStatusFocusGained

    private void txtIndentDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIndentDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Indent Date in DD/MM/YYYY format .... ........");
    }//GEN-LAST:event_txtIndentDateFocusGained

    private void cmdInsertMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertMRActionPerformed
        // TODO add your handling code here:
        SelectMR ObjMR = new SelectMR();
        if (ObjMR.ShowList()) {

            //Check the Duplication
            for (int i = 1; i <= ObjMR.colSelItems.size(); i++) {
                clsMRItem ObjItem = (clsMRItem) ObjMR.colSelItems.get(Integer.toString(i));

                for (int r = 0; r < TableL.getRowCount(); r++) {
                    String MRNo = (String) ObjItem.getAttribute("REQ_NO").getObj();
                    int MRSrNo = (int) ObjItem.getAttribute("SR_NO").getVal();

                    String tMRNo = (String) DataModelL.getValueByVariable("MR_NO", r);
                    int tMRSrNo = Integer.parseInt((String) DataModelL.getValueByVariable("MR_SR_NO", r));

                    if (MRNo.equals(tMRNo) && (MRSrNo == tMRSrNo)) {
                        JOptionPane.showMessageDialog(null, "PR No. " + MRNo + " Sr. " + MRSrNo + " already exist ");
                        return;
                    }
                }
            }
            //Duplication check completed

            //Copy Header
            if (ObjMR.CopyHeader) {
                EITLERPGLOBAL.setComboIndex(cmbDept, (int) ObjMR.ObjMR.getAttribute("DEST_DEPT_ID").getVal());
                txtPurpose.setText((String) ObjMR.ObjMR.getAttribute("PURPOSE").getObj());

                chkAttachement.setSelected(ObjMR.ObjMR.getAttribute("ATTACHEMENT").getBool());
                txtFile.setText((String) ObjMR.ObjMR.getAttribute("ATTACHEMENT_PATH").getObj());
                OldFileName = (String) ObjMR.ObjMR.getAttribute("ATTACHEMENT_PATH").getObj();

                ObjIndent.setAttribute("DOC_ID", (long) ObjMR.ObjMR.getAttribute("ATTACHEMENT_PATH").getVal());
                GenerateUserCombo();
                EITLERPGLOBAL.setComboIndex(cmbUser, (int) ObjMR.ObjMR.getAttribute("BUYER").getVal());
            }

            //It will contain MIR Item Objects
            for (int i = 1; i <= ObjMR.colSelItems.size(); i++) {
                clsMRItem ObjItem = (clsMRItem) ObjMR.colSelItems.get(Integer.toString(i));

                //Add Blank Row
                Object[] rowData = new Object[1];
                DataModelL.addRow(rowData);

                int NewRow = TableL.getRowCount() - 1;

                //Copy MIR Lot nos. to GRN Lot nos.
                HashMap colLot = new HashMap();

                DataModelL.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                DataModelL.setValueByVariable("ITEM_CODE", (String) ObjItem.getAttribute("ITEM_CODE").getObj(), NewRow);
                String ItemName = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("ITEM_NAME", ItemName, NewRow);
                DataModelL.setValueByVariable("QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("REQ_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("REQUIRED_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("REQUIRED_DATE").getObj()), NewRow);
                DataModelL.setValueByVariable("UNIT", Integer.toString((int) ObjItem.getAttribute("UNIT").getVal()), NewRow);
                String UnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int) ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME", UnitName, NewRow);
                DataModelL.setValueByVariable("MR_NO", (String) ObjItem.getAttribute("REQ_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("MR_SR_NO", Integer.toString((int) ObjItem.getAttribute("SR_NO").getVal()), NewRow);
                double lStockQty = clsItem.getOnHandQtyOn((String) ObjItem.getAttribute("ITEM_CODE").getObj(), EITLERPGLOBAL.getCurrentDateDB());
                double lRate = clsItem.getRate((int) EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_CODE").getObj());

                DataModelL.setValueByVariable("STOCK_QTY", Double.toString(lStockQty), NewRow);
                DataModelL.setValueByVariable("RATE", Double.toString(lRate), NewRow);
                DataModelL.setValueByVariable("REMARKS", (String) ObjItem.getAttribute("REMARKS").getObj(), NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC", (String) ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(), NewRow);

                TableL.changeSelection(TableL.getRowCount() - 1, 1, false, false);
                DisplayHistoryInfo();
            }

            UpdateSrNo();
            UpdateAmounts();
            DisplayIndicators();
        }
    }//GEN-LAST:event_cmdInsertMRActionPerformed
                                                                                                                                private void cmbIndentTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbIndentTypeItemStateChanged
                                                                                                                                    // TODO add your handling code here:
                                                                                                                                    if (EditMode != 0) {
                                                                                                                                        String Indent_Code = EITLERPGLOBAL.getCombostrCode(cmbIndentType);

                                                                                                                                        cmdAdd.setEnabled(false);
                                                                                                                                        cmdInsertMR.setEnabled(false);
                                                                                                                                        cmdInsertMOM.setEnabled(false);

                                                                                                                                        if (Indent_Code.equals("R")) {
                                                                                                                                            cmdAdd.setEnabled(true);
                                                                                                                                            cmdInsertMR.setEnabled(true);
                                                                                                                                        }

                                                                                                                                        if (Indent_Code.equals("M")) {
                                                                                                                                            cmdAdd.setEnabled(true);
                                                                                                                                            cmdInsertMOM.setEnabled(true);
                                                                                                                                        }

                                                                                                                                        if (Indent_Code.equals("O")) {
                                                                                                                                            cmdAdd.setEnabled(true);
                                                                                                                                        }

                                                                                                                                        if (Indent_Code.equals("S")) {
                                                                                                                                            cmdAdd.setEnabled(true);
                                                                                                                                        }

                                                                                                                                        cmdAdd.setEnabled(true);
                                                                                                                                        cmdInsertMR.setEnabled(true);
                                                                                                                                    }
    }//GEN-LAST:event_cmbIndentTypeItemStateChanged

    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:

        //======== Lot Entry ============
        if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("QTY")) {
            if (evt.getKeyCode() == 112) //F1 Key
            {
                frmIndentDetail ObjLot = new frmIndentDetail();

                if (EditMode != 0) {
                    ObjLot.AllowEdit = true;
                } else {
                    ObjLot.AllowEdit = false;
                }

                ObjLot.forItemID = DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
                Object itemDetail = DataModelL.getUserObject(TableL.getSelectedRow());

                if (itemDetail == null || itemDetail.equals("")) {
                    itemDetail = new HashMap();
                }

                ObjLot.colLot = (HashMap) itemDetail;
                if (ObjLot.ShowList()) //Ok Pressed
                {
                    DataModelL.SetUserObject(TableL.getSelectedRow(), ObjLot.colLot);
                }
            }
        }
        //=========== Lot Entry Complete ============

        if (EditMode != 0) {
            if (evt.getKeyCode() == 122) //F11 Key pressed
            {
                String lItemID = (String) TableL.getValueAt(TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_CODE"));

                frmItemHistory ObjItem = new frmItemHistory();
                ObjItem.ShowForm(lItemID);
            }

            //=========== Item List ===============
            if (TableL.getSelectedColumn() == DataModelL.getColFromVariable("ITEM_CODE")) {
                if (evt.getKeyCode() == 112) //F1 Key pressed
                {
                    LOV aList = new LOV();

                    aList.SQL = "SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol = 1;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {
                        if (TableL.getCellEditor() != null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_CODE"));
                    }
                }

            }
            //=========================================

            //            if(evt.getKeyCode()==155)//Insert Key Pressed
            //            {
            //                Object[] rowData=new Object[1];
            //                DataModelL.addRow(rowData);
            //                DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
            //                TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            //                UpdateSrNo();
            //            }
        }
    }//GEN-LAST:event_TableLKeyPressed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
/*        int ImportCol=DataModelL.getColFromVariable("IMPORT_CONCESS");
         Object[] rowData=new Object[ImportCol+1];
         rowData[ImportCol]=Boolean.valueOf(false);*/
        Object[] rowData = new Object[1];
        DataModelL.addRow(rowData);
        //DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
        TableL.changeSelection(TableL.getRowCount() - 1, 1, false, false);
        UpdateSrNo();
        UpdateAmounts();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (TableL.getRowCount() > 0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
            DisplayIndicators();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost

    }//GEN-LAST:event_TableLFocusLost

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();

        if (EditMode == EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if (ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID, 3, txtIndentNo.getText())) {
                cmbSendTo.setEnabled(true);
            } else {
                if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
                    cmbSendTo.setEnabled(true);
                } else {
                    cmbSendTo.setEnabled(false);
                }
                //cmbSendTo.setEnabled(false);
            }
        }

        if (cmbSendTo.getItemCount() <= 0) {
            GenerateFromCombo();
        }

        return;

        /*OpgApprove.setSelected(true);
         OpgFinal.setSelected(false);
         OpgReject.setSelected(false);
         OpgHold.setSelected(false);
         
         SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
         
         GenerateFromCombo();
         
         if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
         cmbSendTo.setEnabled(true);
         }
         else {
         cmbSendTo.setEnabled(false);
         }
         
         
         //if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
         //OpgFinal.setEnabled(true);
         //}
         //else {
         //OpgFinal.setEnabled(false);
         //OpgFinal.setSelected(false);
         //}
         
         //Another Checking
         if((!OpgFinal.isEnabled())&&clsHierarchy.canSendDirectly(EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, txtIndentNo.getText())) {
         //Provide the user with the existing list of hierarchy users
         GenerateRejectedUserCombo();
         cmbSendTo.setEnabled(true);
         }*/

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);

        cmbSendToModel.removeAllElements();

        if (!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);

        cmbSendToModel.removeAllElements();
    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpgHoldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                OpgFinal.setEnabled(true);
            }
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjIndent.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JMenuItem WorkerDetailAll;
    private javax.swing.JMenuItem WorkerDetailItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAttachement;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JCheckBox chkSendExplicitly;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbIndentType;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbSendToE;
    private javax.swing.JComboBox cmbStatus;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBrowse;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdDownload;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdHistory;
    private javax.swing.JButton cmdInsertMOM;
    private javax.swing.JButton cmdInsertMR;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Detail;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPrev_Detail;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdSaveAs;
    private javax.swing.JButton cmdShortClose;
    private javax.swing.JButton cmdShowDoc;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdSubItem;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JButton cmdWorker;
    private javax.swing.JMenuItem copyAll;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPopupMenu mnuShowDoc;
    private javax.swing.JMenuItem mnuShowExePO;
    private javax.swing.JMenuItem mnuShowPR;
    private javax.swing.JPopupMenu mnuShowWorker;
    private javax.swing.JPanel panelExplicit;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtIndentDate;
    private javax.swing.JTextField txtIndentNo;
    private javax.swing.JTextField txtNetAmount;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JLabel txtSpFrom;
    private javax.swing.JTextField txtSpFromRemarks;
    private javax.swing.JTextField txtSpToRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
        cmdShortClose.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
        cmdShortClose.setEnabled(false);
    }

    //Didplay data on the Screen
    private void DisplayData() {

        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjIndent.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjIndent.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjIndent.getAttribute("CANCELED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
        //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = 3;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        ClearFields();

        panelExplicit.setVisible(false);

        Connection tmpConn = null;
        Statement stTmp = null;
        ResultSet rsTmp = null;
        String ItemID = "";
        int DeptID = 0;

        try {
            txtIndentNo.setText((String) ObjIndent.getAttribute("INDENT_NO").getObj());
            lblTitle.setText("INDENT - " + txtIndentNo.getText());
            lblRevNo.setText(Integer.toString((int) ObjIndent.getAttribute("REVISION_NO").getVal()));
            txtIndentDate.setText(EITLERPGLOBAL.formatDate((String) ObjIndent.getAttribute("INDENT_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbStatus, (String) ObjIndent.getAttribute("STATUS").getObj());
            EITLERPGLOBAL.setComboIndex(cmbIndentType, (String) ObjIndent.getAttribute("INDENT_TYPE").getObj());
            if ((boolean) ObjIndent.getAttribute("CANCELED").getBool()) {
                chkCancelled.setSelected(true);
            } else {
                chkCancelled.setSelected(false);
            }

            EITLERPGLOBAL.setComboIndex(cmbHierarchy, (int) ObjIndent.getAttribute("HIERARCHY_ID").getVal());
            EITLERPGLOBAL.setComboIndex(cmbDept, (int) ObjIndent.getAttribute("FOR_DEPT_ID").getVal());
            GenerateUserCombo();
            txtPurpose.setText((String) ObjIndent.getAttribute("PURPOSE").getObj());
            int UserID = (int) ObjIndent.getAttribute("BUYER").getVal();
            EITLERPGLOBAL.setComboIndex(cmbUser, UserID);

            chkAttachement.setSelected(ObjIndent.getAttribute("ATTACHEMENT").getBool());
            txtFile.setText((String) ObjIndent.getAttribute("ATTACHEMENT_PATH").getObj());
            OldFileName = (String) ObjIndent.getAttribute("ATTACHEMENT_PATH").getObj();

            // Detail part starts from here
            //========= Display Line Items =============//
            FormatGrid();

            DoNotEvaluate = true;

            for (int i = 1; i <= ObjIndent.colLineItems.size(); i++) {
                //Insert New Row
                Object[] rowData = new Object[1];
                DataModelL.addRow(rowData);
                int NewRow = TableL.getRowCount() - 1;

                clsIndentItem ObjItem = (clsIndentItem) ObjIndent.colLineItems.get(Integer.toString(i));

                //Painting of Item Code Cell if it is a new item
                ItemID = (String) ObjItem.getAttribute("ITEM_CODE").getObj();
                
                if (clsItem.IsNewItem(EITLERPGLOBAL.gCompanyID, ItemID)) {
                    //Render Cell with
                    //System.out.println(DataModelL.getColFromVariable("ITEM_CODE"));
                     CellPainter.setBackColor(NewRow, DataModelL.getColFromVariable("ITEM_CODE"), Color.RED);
                    CellPainter.setForeColor(NewRow, DataModelL.getColFromVariable("ITEM_CODE"), Color.WHITE);
                    //CellPainter.setBackColor(Integer.toString(i), DataModelL.getColFromVariable("ITEM_CODE"), Color.RED);
                    //CellPainter.setForeColor(Integer.toString(i), DataModelL.getColFromVariable("ITEM_CODE"), Color.WHITE);
                } else {
                    CellPainter.setBackColor(NewRow, DataModelL.getColFromVariable("ITEM_CODE"), Color.WHITE);
                    CellPainter.setForeColor(NewRow, DataModelL.getColFromVariable("ITEM_CODE"), Color.BLACK);
                }
                
                //Set the User Object
                DataModelL.SetUserObject(NewRow, ObjItem.colItemDetail);

                DataModelL.setValueByVariable("SR_NO", Integer.toString(i), NewRow);
                //System.out.println("DOC : "+(String) ObjIndent.getAttribute("INDENT_NO").getObj()+" - COL ID "+DataModelL.getColFromVariable("ITEM_CODE")+"  - ITEM CODE "+(String) ObjItem.getAttribute("ITEM_CODE").getObj());
                
                DataModelL.setValueByVariable("ITEM_CODE", (String) ObjItem.getAttribute("ITEM_CODE").getObj(), NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC", (String) ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(), NewRow);
                String ItemName = clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("ITEM_NAME", ItemName, NewRow);
                DataModelL.setValueByVariable("UNIT", Integer.toString((int) ObjItem.getAttribute("UNIT").getVal()), NewRow);
                String UnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", (int) ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME", UnitName, NewRow);
                DataModelL.setValueByVariable("QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("REQUIRED_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("REQUIRED_DATE").getObj()), NewRow);
                DataModelL.setValueByVariable("ALLOCATED_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("ALLOCATED_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("RATE", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("RATE").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("STOCK_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("STOCK_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("BAL_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("BAL_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("PO_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("MR_NO", (String) ObjItem.getAttribute("MR_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("MR_SR_NO", Integer.toString((int) ObjItem.getAttribute("MR_SR_NO").getVal()), NewRow);
                DataModelL.setValueByVariable("CANCELED", Boolean.valueOf(ObjItem.getAttribute("CANCELED").getBool()), NewRow);
                DataModelL.setValueByVariable("NET_AMT", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("NET_AMT").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("OTHER_COMPANY_STOCK", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("OTHER_COMPANY_STOCK").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("LAST_SUPP_ID", (String) ObjItem.getAttribute("LAST_SUPP_ID").getObj(), NewRow);
                String SuppName = clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("LAST_SUPP_ID").getObj());
                DataModelL.setValueByVariable("LAST_SUPP_NAME", SuppName, NewRow);
                DataModelL.setValueByVariable("REMARKS", (String) ObjItem.getAttribute("REMARKS").getObj(), NewRow);

                DataModelL.setValueByVariable("PEND_INSP_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("PEND_INSP_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("PEND_INDENT_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("PEND_INDENT_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("PEND_PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("PEND_PO_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("LAST_PO_NO", (String) ObjItem.getAttribute("LAST_PO_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("LAST_PO_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("LAST_PO_DATE").getObj()), NewRow);
                DataModelL.setValueByVariable("LAST_PO_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("LAST_PO_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("LAST_GRN_NO", (String) ObjItem.getAttribute("LAST_GRN_NO").getObj(), NewRow);
                DataModelL.setValueByVariable("LAST_GRN_DATE", EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("LAST_GRN_DATE").getObj()), NewRow);
                DataModelL.setValueByVariable("LAST_GRN_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("LAST_GRN_QTY").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("LAST_GRN_RATE", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("LAST_GRN_RATE").getVal(), 3)), NewRow);
                DataModelL.setValueByVariable("AA_INDENT_QTY", Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("AA_INDENT_QTY").getVal(), 3)), NewRow);

                if (!ObjIndent.getAttribute("APPROVED").getBool()) {

                    //Display History here
                    //Clear existing history info.
                    DataModelL.setValueByVariable("PEND_INSP_QTY", "0", NewRow);
                    DataModelL.setValueByVariable("PEND_INDENT_QTY", "0", NewRow);
                    DataModelL.setValueByVariable("PEND_PO_QTY", "0", NewRow);
                    DataModelL.setValueByVariable("LAST_PO_NO", "", NewRow);
                    DataModelL.setValueByVariable("LAST_PO_DATE", "0000-00-00", NewRow);
                    DataModelL.setValueByVariable("LAST_PO_QTY", "0", NewRow);
                    DataModelL.setValueByVariable("LAST_GRN_NO", "", NewRow);
                    DataModelL.setValueByVariable("LAST_GRN_DATE", "0000-00-00", NewRow);
                    DataModelL.setValueByVariable("LAST_GRN_QTY", "0", NewRow);
                    DataModelL.setValueByVariable("LAST_GRN_RATE", "0", NewRow);
                    DataModelL.setValueByVariable("AA_INDENT_QTY", "0", NewRow);
                    DataModelL.setValueByVariable("RATE", "0", NewRow);
                    DataModelL.setValueByVariable("LAST_SUPP_ID", "", NewRow);
                    DataModelL.setValueByVariable("LAST_SUPP_NAME", "", NewRow);

                    clsStockInfo objStock = (new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID, ItemID, EITLERPGLOBAL.getCurrentDateDB());
                    double lStockQty = objStock.StockQty;

                    DataModelL.setValueByVariable("STOCK_QTY", Double.toString(lStockQty), NewRow);

                    try {

                        ItemID = DataModelL.getValueByVariable("ITEM_CODE", NewRow);

                        if (!clsItem.IsOneTime(EITLERPGLOBAL.gCompanyID, ItemID)) {

                            EITLERPGLOBAL.ChangeCursorToWait(this);

                            tmpConn = data.getConn();

                            DeptID = EITLERPGLOBAL.getComboCode(cmbDept);

                            double PendInspQty = clsMIRRaw.getTotalPendingGRNQty(EITLERPGLOBAL.gCompanyID, ItemID);
                            double PendIndentQty = clsIndent.getTotalPendingIndentQty(EITLERPGLOBAL.gCompanyID, ItemID);
                            double PendPOQty = clsPOGen.getTotalPendingQty(EITLERPGLOBAL.gCompanyID, ItemID);
                            double AAQty = clsIndent.getTotalAlreadyApprovedQty(EITLERPGLOBAL.gCompanyID, ItemID);

                            String LastGRNNo = clsGRN.getLastGRNNo(EITLERPGLOBAL.gCompanyID, ItemID, true);

                            DataModelL.setValueByVariable("LAST_GRN_NO", LastGRNNo, NewRow);

                            stTmp = tmpConn.createStatement();
                            rsTmp = stTmp.executeQuery("SELECT * FROM D_INV_GRN_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND GRN_NO='" + LastGRNNo + "'");
                            rsTmp.first();

                            if (rsTmp.getRow() > 0) {
                                DataModelL.setValueByVariable("LAST_GRN_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE")), NewRow);
                            }

                            stTmp = tmpConn.createStatement();
                            rsTmp = stTmp.executeQuery("SELECT QTY,LANDED_RATE FROM D_INV_GRN_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND GRN_NO='" + LastGRNNo + "' AND ITEM_ID='" + ItemID + "'");
                            rsTmp.first();

                            if (rsTmp.getRow() > 0) {
                                DataModelL.setValueByVariable("LAST_GRN_QTY", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("QTY"), 3)), NewRow);
                                DataModelL.setValueByVariable("LAST_GRN_RATE", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("LANDED_RATE"), 3)), NewRow);
                                DataModelL.setValueByVariable("RATE", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("LANDED_RATE"), 3)), NewRow);
                            }

                            String LastPONo = clsPOGen.getLastPObyItem(EITLERPGLOBAL.gCompanyID, ItemID, LastGRNNo);

                            DataModelL.setValueByVariable("PEND_INSP_QTY", Double.toString(EITLERPGLOBAL.round(PendInspQty, 3)), NewRow);
                            DataModelL.setValueByVariable("PEND_INDENT_QTY", Double.toString(EITLERPGLOBAL.round(PendIndentQty, 3)), NewRow);
                            DataModelL.setValueByVariable("PEND_PO_QTY", Double.toString(EITLERPGLOBAL.round(PendPOQty, 3)), NewRow);
                            DataModelL.setValueByVariable("LAST_PO_NO", LastPONo, NewRow);
                            DataModelL.setValueByVariable("AA_INDENT_QTY", Double.toString(EITLERPGLOBAL.round(AAQty, 3)), NewRow);

                            stTmp = tmpConn.createStatement();
                            rsTmp = stTmp.executeQuery("SELECT * FROM D_PUR_PO_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + LastPONo + "' ");
                            rsTmp.first();

                            if (rsTmp.getRow() > 0) {
                                DataModelL.setValueByVariable("LAST_PO_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE")), NewRow);
                                DataModelL.setValueByVariable("LAST_SUPP_ID", rsTmp.getString("SUPP_ID"), NewRow);
                                DataModelL.setValueByVariable("LAST_SUPP_NAME", clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, rsTmp.getString("SUPP_ID")), NewRow);
                            } else {
                                //DataModelL.setValueByVariable("LAST_PO_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE")), NewRow);
                                DataModelL.setValueByVariable("LAST_PO_DATE", "", NewRow);
                                DataModelL.setValueByVariable("LAST_SUPP_ID", "", NewRow);
                                DataModelL.setValueByVariable("LAST_SUPP_NAME", "", NewRow);
                            }

                            stTmp = tmpConn.createStatement();
                            rsTmp = stTmp.executeQuery("SELECT SUM(QTY) AS THEQTY FROM D_PUR_PO_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + LastPONo + "' AND ITEM_ID='" + ItemID + "'");
                            rsTmp.first();

                            if (rsTmp.getRow() > 0) {
                                DataModelL.setValueByVariable("LAST_PO_QTY", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("THEQTY"), 3)), NewRow);
                            }

                            EITLERPGLOBAL.ChangeCursorToDefault(this);
                        }

                        //tmpConn.close();
                        stTmp.close();
                        rsTmp.close();

                    } catch (Exception e) {
                        e.printStackTrace();
                        EITLERPGLOBAL.ChangeCursorToDefault(this);
                    }

                }

            }

            TableL.repaint();

            DoNotEvaluate = false;

            UpdateAmounts();
            UpdateSrNo();
            DisplayIndicators();

            if (EditMode == 0) {
                DataModelL.TableReadOnly(true);
            }
            //=========================================//

            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List = new HashMap();
            String DocNo = (String) ObjIndent.getAttribute("INDENT_NO").getObj();
            List = ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 3, DocNo);
            for (int i = 1; i <= List.size(); i++) {
                clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
                Object[] rowData = new Object[7];

                rowData[0] = Integer.toString(i);
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
                rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

                DataModelA.addRow(rowData);
            }

            //Showing Audit Trial History
            FormatGridHS();
            HashMap History = clsIndent.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for (int i = 1; i <= History.size(); i++) {
                clsIndent ObjHistory = (clsIndent) History.get(Integer.toString(i));
                Object[] rowData = new Object[5];

                rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2] = EITLERPGLOBAL.formatDate((String) ObjHistory.getAttribute("ENTRY_DATE").getObj());

                String ApprovalStatus = "";

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus = "Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus = "Final Approved";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus = "Waiting";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus = "Rejected";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus = "Pending";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus = "Skiped";
                }

                if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("I")) {
                    ApprovalStatus = "Short Closed";
                }

                rowData[3] = ApprovalStatus;
                rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

                DataModelHS.addRow(rowData);
            }

            //============================================================//
        } catch (Exception e) {
        }

    }

    //Sets data to the Class Object
    private void SetData() {
        ObjIndent.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        ObjIndent.setAttribute("PREFIX", SelPrefix);
        ObjIndent.setAttribute("SUFFIX", SelSuffix);
        ObjIndent.setAttribute("FFNO", FFNo);
        ObjIndent.setAttribute("INDENT_DATE", EITLERPGLOBAL.formatDateDB(txtIndentDate.getText()));
        ObjIndent.setAttribute("FOR_DEPT_ID", EITLERPGLOBAL.getComboCode(cmbDept));
        ObjIndent.setAttribute("PURPOSE", txtPurpose.getText());
        ObjIndent.setAttribute("BUYER", EITLERPGLOBAL.getComboCode(cmbUser));
        ObjIndent.setAttribute("GROSS_AMOUNT", EITLERPGLOBAL.round(Double.parseDouble(txtNetAmount.getText()), 3));
        ObjIndent.setAttribute("STATUS", EITLERPGLOBAL.getCombostrCode(cmbStatus));

        if (chkCancelled.isSelected()) {
            ObjIndent.setAttribute("CANCELED", true);
        } else {
            ObjIndent.setAttribute("CANCELED", false);
        }

        ObjIndent.setAttribute("INDENT_TYPE", EITLERPGLOBAL.getCombostrCode(cmbIndentType)); //Fixed type 2 - Raw Material, 1 - General

        //================Explicitly Sending Document to ED/MD =============== //
        if (panelExplicit.isVisible() && chkSendExplicitly.isSelected()) {
            int EUserID = EITLERPGLOBAL.getComboCode(cmbSendToE);

            HashMap rndUsers = new HashMap();
            clsHierarchy ObjNewUser = new clsHierarchy();

            ObjNewUser.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
            ObjNewUser.setAttribute("MODULE_ID", 3);
            ObjNewUser.setAttribute("DOC_NO", txtIndentNo.getText());
            ObjNewUser.setAttribute("DOC_DATE", EITLERPGLOBAL.formatDateDB(txtIndentDate.getText()));
            ObjNewUser.setAttribute("USER_ID", EUserID);

            rndUsers.put(Integer.toString(rndUsers.size() + 1), ObjNewUser);
            ApprovalFlow.AppendUsers(rndUsers);
        }
        //===================================================================== //

        //----- Update Approval Specific Fields -----------//
        ObjIndent.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjIndent.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjIndent.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjIndent.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        ObjIndent.setAttribute("SEND_DOC_TO", 0);

        if (OpgApprove.isSelected()) {
            ObjIndent.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjIndent.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjIndent.setAttribute("APPROVAL_STATUS", "R");
            ObjIndent.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        }

        if (OpgHold.isSelected()) {
            ObjIndent.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        // ==== Case of Explicit Send To ======== //
        if (panelExplicit.isVisible() && chkSendExplicitly.isSelected()) {
            ObjIndent.setAttribute("SEND_DOC_TO", EITLERPGLOBAL.getComboCode(cmbSendToE));
            ObjIndent.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendToE));
        }
        // ====================================== //

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjIndent.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjIndent.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        } else {
            ObjIndent.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjIndent.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
        }

        if (chkAttachement.isSelected()) {
            ObjIndent.setAttribute("ATTACHEMENT", true);
            ObjIndent.setAttribute("ATTACHEMENT_PATH", txtFile.getText());
        } else {
            ObjIndent.setAttribute("ATTACHEMENT", false);
            ObjIndent.setAttribute("ATTACHEMENT_PATH", "");
        }

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (chkAttachement.isSelected() && (!txtFile.getText().trim().equals(""))) {
                ObjIndent.setAttribute("REFRESH_FILE", true);
                ObjIndent.setAttribute("FILENAME", txtFile.getText().trim());
            }
        } else {
            if (chkAttachement.isSelected() && (!txtFile.getText().trim().equals(""))) {

                if (!OldFileName.trim().toUpperCase().equals(txtFile.getText().trim().toUpperCase())) {
                    ObjIndent.setAttribute("REFRESH_FILE", true);
                    ObjIndent.setAttribute("FILENAME", txtFile.getText().trim());
                }
            }
        }

        ObjIndent.colLineItems.clear();

        for (int i = 0; i < TableL.getRowCount(); i++) {
            clsIndentItem ObjItem = new clsIndentItem();

            ObjItem.setAttribute("SR_NO", Integer.parseInt(DataModelL.getValueByVariable("SR_NO", i)));
            ObjItem.setAttribute("ITEM_CODE", DataModelL.getValueByVariable("ITEM_CODE", i));
            String tmpItemID = DataModelL.getValueByVariable("ITEM_CODE", i);
            ObjItem.setAttribute("ITEM_EXTRA_DESC", DataModelL.getValueByVariable("ITEM_EXTRA_DESC", i));
            /*if(clsItemExtraDescReq.IsItemExtraDescReq(EITLERPGLOBAL.gCompanyID,tmpItemID)) {
             ObjItem.setAttribute("ITEM_EXTRA_DESC",DataModelL.getValueByVariable("ITEM_EXTRA_DESC",i));
             } else {
             ObjItem.setAttribute("ITEM_EXTRA_DESC","");
             }*/
            ObjItem.setAttribute("QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY", i)), 3));
            ObjItem.setAttribute("RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("RATE", i)), 3));
            ObjItem.setAttribute("REQUIRED_DATE", EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("REQUIRED_DATE", i)));
            ObjItem.setAttribute("UNIT", Integer.parseInt(DataModelL.getValueByVariable("UNIT", i)));
            ObjItem.setAttribute("ALLOCATED_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("ALLOCATED_QTY", i)), 3));
            ObjItem.setAttribute("STOCK_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("STOCK_QTY", i)), 3));
            ObjItem.setAttribute("BAL_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("BAL_QTY", i)), 3));
            ObjItem.setAttribute("PO_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("PO_QTY", i)), 3));
            ObjItem.setAttribute("MR_NO", DataModelL.getValueByVariable("MR_NO", i));
            ObjItem.setAttribute("MR_SR_NO", Double.parseDouble(DataModelL.getValueByVariable("MR_SR_NO", i)));
            ObjItem.setAttribute("LAST_SUPP_ID", (String) DataModelL.getValueByVariable("LAST_SUPP_ID", i));
            ObjItem.setAttribute("REMARKS", (String) DataModelL.getValueByVariable("REMARKS", i));
            ObjItem.setAttribute("PEND_INSP_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("PEND_INSP_QTY", i)), 3));
            ObjItem.setAttribute("PEND_INDENT_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("PEND_INDENT_QTY", i)), 3));
            ObjItem.setAttribute("PEND_PO_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("PEND_PO_QTY", i)), 3));
            ObjItem.setAttribute("LAST_PO_NO", DataModelL.getValueByVariable("LAST_PO_NO", i));
            System.out.println("setdata" + EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("LAST_PO_DATE", i)));
            ObjItem.setAttribute("LAST_PO_DATE", EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("LAST_PO_DATE", i)));
            ObjItem.setAttribute("LAST_PO_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("LAST_PO_QTY", i)), 3));
            ObjItem.setAttribute("LAST_GRN_NO", DataModelL.getValueByVariable("LAST_GRN_NO", i));
            System.out.println("setdata" + EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("LAST_GRN_DATE", i)));
            ObjItem.setAttribute("LAST_GRN_DATE", EITLERPGLOBAL.formatDateDB(DataModelL.getValueByVariable("LAST_GRN_DATE", i)));
            ObjItem.setAttribute("LAST_GRN_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("LAST_GRN_QTY", i)), 3));
            ObjItem.setAttribute("LAST_GRN_RATE", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("LAST_GRN_RATE", i)), 3));
            ObjItem.setAttribute("AA_INDENT_QTY", EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("AA_INDENT_QTY", i)), 3));

            if (EditMode == EITLERPGLOBAL.ADD) {
                ObjItem.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
                ObjItem.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            } else {
                ObjItem.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
                ObjItem.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
            }

            //======= Insert Lot Nos. ======//
            ObjItem.colItemDetail.clear();

            try {
                if (!DataModelL.getUserObject(i).equals("")) {
                    HashMap lcolLot = (HashMap) DataModelL.getUserObject(i);

                    for (int l = 1; l <= lcolLot.size(); l++) {
                        clsIndentItemDetail ObjItemDetail = (clsIndentItemDetail) lcolLot.get(Integer.toString(l));

                        ObjItem.colItemDetail.put(Integer.toString(ObjItem.colItemDetail.size() + 1), ObjItemDetail);
                    }
                }
            } catch (Exception l) {
            }
            //======== Lot Insertion Completed =========//

            ObjIndent.colLineItems.put(Integer.toString(ObjIndent.colLineItems.size() + 1), ObjItem);
        }
    }

    private void FormatGrid() {
        HashMap ColList = new HashMap();

        try {

            txtNetAmount.requestFocus();
            DataModelL = new EITLTableModel();

            TableL.removeAll();
            TableL.setModel(DataModelL);

            CellPainter.removeBackColors();
            CellPainter.removeForeColors();

            //Set the table Readonly
            DataModelL.TableReadOnly(false);

            ColList = clsSystemColumn.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=3 AND HIDDEN=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
            for (int i = 1; i <= ColList.size(); i++) {
                clsSystemColumn ObjColumn = (clsSystemColumn) ColList.get(Integer.toString(i));

                //Add Column First
                DataModelL.addColumn((String) ObjColumn.getAttribute("CAPTION").getObj()); //0

                if (ObjColumn.getAttribute("NUMERIC").getBool()) {
                    DataModelL.SetNumeric(TableL.getColumnCount() - 1, true);
                } else {
                    DataModelL.SetNumeric(TableL.getColumnCount() - 1, false);
                }

                String Variable = (String) ObjColumn.getAttribute("VARIABLE").getObj();

                if (Variable.equals("QTY") || Variable.equals("RATE") || Variable.equals("GROSS_AMOUNT") || Variable.equals("NET_AMOUNT")) {
                    DataModelL.SetColID(TableL.getColumnCount() - 1, -99);
                } else {
                    DataModelL.SetColID(TableL.getColumnCount() - 1, 0);
                }

                DataModelL.SetVariable(TableL.getColumnCount() - 1, Variable.trim());
                DataModelL.SetOperation(TableL.getColumnCount() - 1, "-");
                DataModelL.SetInclude(TableL.getColumnCount() - 1, true);

                if (ObjColumn.getAttribute("READONLY").getBool()) {
                    DataModelL.SetReadOnly(TableL.getColumnCount() - 1);
                }
            }

            //Now hide the column 1
            TableColumnModel ColModel = TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            //------- Install Table List Selection Listener ------//
            TableL.getColumnModel().getSelectionModel().addListSelectionListener(
                    new ListSelectionListener() {
                        public void valueChanged(ListSelectionEvent e) {
                            int last = TableL.getSelectedColumn();
                            String strVar = DataModelL.getVariable(last);

                            //=============== Cell Editing Routine =======================//
                            try {
                                cellLastValue = (String) TableL.getValueAt(TableL.getSelectedRow(), TableL.getSelectedColumn());

                                TableL.editCellAt(TableL.getSelectedRow(), TableL.getSelectedColumn());
                                if (TableL.getEditorComponent() instanceof JTextComponent) {
                                    ((JTextComponent) TableL.getEditorComponent()).selectAll();
                                }
                            } catch (Exception cell) {
                            }
                    //============= Cell Editing Routine Ended =================//

                        }
                    }
            );
            //===================================================//

            //----- Install Table Model Event Listener -------//
            TableL.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();

                        //=========== Cell Update Prevention Check ===========//
                        String curValue = (String) TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                        if (curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//

                        //If Item ID has changed
                        if (DoNotEvaluate) {
                            return;
                        }

                        UpdateAmounts();
                        if (col == 1) {
                            try {

                                String lItemID = (String) DataModelL.getValueAt(TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_CODE"));
                                String lItemName = clsItem.getItemName((int) EITLERPGLOBAL.gCompanyID, lItemID);
                                double lStockQty = clsItem.getOnHandQtyOn(lItemID, EITLERPGLOBAL.getCurrentDateDB());
                                double lRate = clsItem.getRate((int) EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(lItemName, TableL.getSelectedRow(), DataModelL.getColFromVariable("ITEM_NAME"));
                                TableL.setValueAt(Double.toString(EITLERPGLOBAL.round(lStockQty, 3)), TableL.getSelectedRow(), DataModelL.getColFromVariable("STOCK_QTY"));
                                TableL.setValueAt(Double.toString(EITLERPGLOBAL.round(lRate, 3)), TableL.getSelectedRow(), DataModelL.getColFromVariable("RATE"));

                                int lItemUnit = clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(Integer.toString(lItemUnit), TableL.getSelectedRow(), DataModelL.getColFromVariable("UNIT"));
                                String lUnitName = clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
                                TableL.setValueAt(lUnitName, TableL.getSelectedRow(), DataModelL.getColFromVariable("UNIT_NAME"));

                                DataModelL.setValueByVariable("LAST_SUPP_ID", "", TableL.getSelectedRow());
                                DataModelL.setValueByVariable("LAST_SUPP_NAME", "", TableL.getSelectedRow());

                                if (!clsItem.IsOneTime(EITLERPGLOBAL.gCompanyID, lItemID)) {
                                    String LastSuppID = clsItem.getLastSupplier(EITLERPGLOBAL.gCompanyID, lItemID);
                                    DataModelL.setValueByVariable("LAST_SUPP_ID", LastSuppID, TableL.getSelectedRow());
                                    String SuppName = clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, LastSuppID);
                                    DataModelL.setValueByVariable("LAST_SUPP_NAME", SuppName, TableL.getSelectedRow());
                                    DisplayHistoryInfo();
                                } else {
                                    DataModelL.setValueByVariable("RATE", "0", TableL.getSelectedRow());
                                }

                                DisplayIndicators();
                            } catch (Exception ex) {
                            }
                        }

                    }
                }
            });

            TableL.getColumnModel().getColumn(DataModelL.getColFromVariable("ITEM_CODE")).setCellRenderer(CellPainter);

            /*int ImportCol=DataModelL.getColFromVariable("IMPORT_CONCESS");
             Renderer.setCustomComponent(ImportCol,"CheckBox");
             JCheckBox aCheckBox=new JCheckBox();
             aCheckBox.setBackground(Color.WHITE);
             TableL.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
             TableL.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);*/
        } catch (Exception e) {

        }
    }

    private void SetNumberFormats() {
        /*        DecimalFormat decimalFormat=new DecimalFormat("0.00");
         NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
         ObjFormater.setAllowsInvalid(false);
         txtNetAmount.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));*/
    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=3");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (EITLERPGLOBAL.gNewUserID == ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 3, txtIndentNo.getText())) {
                List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=3");
            } else {
                List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=3");
            }

        }

        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }

        try {
            cmbHierarchy.setSelectedIndex(0);
        } catch (Exception e) {

        }
        //------------------------------ //

        //----- Generate Department Combo ------- //
        cmbDeptModel = new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);

        List = clsDepartment.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID);
        for (int i = 1; i <= List.size(); i++) {
            clsDepartment ObjDept = (clsDepartment) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text = (String) ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //

        //--- Generate Type Status ------//
        cmbStatusModel = new EITLComboModel();
        cmbStatus.removeAllItems();
        cmbStatus.setModel(cmbStatusModel);

        ComboData aData = new ComboData();
        aData.strCode = "O";
        aData.Text = "Open";
        cmbStatusModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "C";
        aData.Text = "Close";
        cmbStatusModel.addElement(aData);
        //===============================//

        //--- Generate Type Indent Type ------//
        cmbIndentTypeModel = new EITLComboModel();
        cmbIndentType.removeAllItems();
        cmbIndentType.setModel(cmbIndentTypeModel);

        aData.strCode = "R";
        aData.Text = "PURCHASE REQUISITION";
        cmbIndentTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "M";
        aData.Text = "M.O.M";
        cmbIndentTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "S";
        aData.Text = "STOCK TRANSFER";
        cmbIndentTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "O";
        aData.Text = "OTHERS";
        cmbIndentTypeModel.addElement(aData);
        //===============================//

        //--- Generate Type Indent Type ------//
        cmbSendToEModel = new EITLComboModel();
        cmbSendToE.removeAllItems();
        cmbSendToE.setModel(cmbSendToEModel);

        aData = new ComboData();
        aData.Code = 11;
        aData.Text = "Mr. Nimish Patel";
        cmbSendToEModel.addElement(aData);

        aData = new ComboData();
        aData.Code = 72;
        aData.Text = "Mr. B. U. Patel";
        cmbSendToEModel.addElement(aData);
        //===============================//

        //Generates Combo Boxes
    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD || EditMode == EITLERPGLOBAL.EDIT) {
                //----- Generate cmbType ------- //
                cmbSendToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {

                //----- Generate cmbType ------- //
                cmbSendToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);

                List = ApprovalFlow.getRemainingUsers((int) EITLERPGLOBAL.gCompanyID, 3, (String) ObjIndent.getAttribute("INDENT_NO").getObj());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }

            if (EditMode == EITLERPGLOBAL.EDIT && cmbSendTo.getItemCount() <= 0) {

                //----- Generate cmbType ------- //
                cmbSendToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //

            }

        } catch (Exception e) {
        }
    }

    private void UpdateSrNo() {
        int SrCol = DataModelL.getColFromVariable("SR_NO");

        for (int i = 0; i < TableL.getRowCount(); i++) {
            TableL.setValueAt(Integer.toString(i + 1), i, SrCol);
        }
    }

    private void UpdateAmounts() {
        //== Final Pass - Update the Net Amount ==
        double lnQty = 0;
        double lnRate = 0;
        double lnAmt = 0;
        double lnAmt1 = 0;
        int lnQtyCol = 0, lnRateCol = 0;

        lnQtyCol = DataModelL.getColFromVariable("QTY");
        lnRateCol = DataModelL.getColFromVariable("RATE");

        for (int i = 0; i < TableL.getRowCount(); i++) {
            lnQty = Double.parseDouble((String) TableL.getValueAt(i, lnQtyCol));
            lnRate = Double.parseDouble((String) TableL.getValueAt(i, lnRateCol));
            lnAmt = EITLERPGLOBAL.round(lnQty, 3) * EITLERPGLOBAL.round(lnRate, 3);
            lnAmt1 = EITLERPGLOBAL.round(lnAmt1, 3) + EITLERPGLOBAL.round(lnAmt, 3);
        }
        txtNetAmount.setText(Double.toString(EITLERPGLOBAL.round(lnAmt1, 3)));
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIndent.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIndent.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIndent.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIndent.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 491)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 498)) {
            cmdShortClose.setVisible(true);
        } else {
            cmdShortClose.setVisible(false);
        }

        cmdEdit.setEnabled(true);
        // --- Edit Rights --
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,492)) {
         cmdEdit.setEnabled(true);
         }
         else {
         cmdEdit.setEnabled(false);
         }*/

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 493)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 494)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }

    private void SetFields(boolean pStat) {

        chkAttachement.setEnabled(pStat);
        txtFile.setEnabled(pStat);
        cmdBrowse.setEnabled(pStat);

        txtIndentDate.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        cmbUser.setEnabled(pStat);
        cmbIndentType.setEnabled(pStat);
        txtNetAmount.setEnabled(pStat);
        cmbStatus.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        txtIndentNo.setEnabled(pStat);
        txtIndentNo.setEditable(false);

        cmbDept.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        txtSpToRemarks.setEnabled(pStat);

        SetupApproval();

        cmdInsertMR.setEnabled(pStat);
        cmdInsertMOM.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);

        DataModelL.TableReadOnly(!pStat);
    }

    private boolean Validate() {
        int ValidEntryCount = 0;

        //Validates Item Entries
        if (TableL.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please enter at least one item");
            return false;
        }

        int DeptID = EITLERPGLOBAL.getComboCode(cmbDept);
        int UserID = EITLERPGLOBAL.getComboCode(cmbUser);

        if (DeptID == 0) {
            JOptionPane.showMessageDialog(null, "Please select the department.");
            return false;
        }

        if (UserID == 0 || cmbUser.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "Please select the user.");
            return false;
        }

        //Search in Table
        int ItemCol = DataModelL.getColFromVariable("ITEM_CODE");
        int RateCol = DataModelL.getColFromVariable("RATE");
        int QtyCol = DataModelL.getColFromVariable("QTY");
        int AllocateCol = DataModelL.getColFromVariable("ALLOCATED_QTY");
        int StockCol = DataModelL.getColFromVariable("STOCK_QTY");
        int ItemDescCol = DataModelL.getColFromVariable("ITEM_EXTRA_DESC");
        int MrNoCol = DataModelL.getColFromVariable("MR_NO");
        for (int i = 0; i < TableL.getRowCount(); i++) {
            String ItemID = "";
            double Rate = 0, Qty = 0;

            if (TableL.getValueAt(i, ItemCol) != null && TableL.getValueAt(i, RateCol) != null && TableL.getValueAt(i, QtyCol) != null) {
                ItemID = (String) TableL.getValueAt(i, ItemCol);
                Rate = Double.parseDouble((String) TableL.getValueAt(i, RateCol));
                Qty = Double.parseDouble((String) TableL.getValueAt(i, QtyCol));

                String theDate = DataModelL.getValueByVariable("REQUIRED_DATE", i);
                boolean ValidDate = true;

                if (theDate.equals("") || !EITLERPGLOBAL.isDate(theDate)) {
                    ValidDate = false;
                }

                java.sql.Date DocDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtIndentDate.getText()));
                if (!theDate.trim().equals("")) {
                    java.sql.Date ReqDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(theDate));
                    if (DocDate.after(ReqDate)) {
                        JOptionPane.showMessageDialog(null, "Delivery date must be after the document date.");
                        return false;
                    }
                }

                if (EditMode != EITLERPGLOBAL.AMEND) {
                    if (clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID) && Qty > 0 && ValidDate) {
                        ValidEntryCount++;
                    } else {
                        JOptionPane.showMessageDialog(null, "Item entry is not valid. Please be sure to enter following information. \nValid Item ID,Quantity and Delivery Date");
                        TableL.changeSelection(i, 1, false, false);
                        return false;
                    }
                } else {

                    if (clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID) && ValidDate) {
                        ValidEntryCount++;
                    } else {
                        JOptionPane.showMessageDialog(null, "Item entry is not valid. Please be sure to enter following information. \nValid Item ID,Quantity and Delivery Date");
                        TableL.changeSelection(i, 1, false, false);
                        return false;
                    }

                }
                //Validation for the Item Extra Description
                //cannot change the the item extra Description for the item
                /*  Commented due to item extra description is deleted  
                 if(!OpgReject.isSelected()) {
                 String MRNo = (String)TableL.getValueAt(i, MrNoCol);
                 String IndentDesc = (String)TableL.getValueAt(i, ItemDescCol);
                 String MRItemDesc=clsMaterialRequisition.getItemDesc(EITLERPGLOBAL.gCompanyID, MRNo , ItemID, String.valueOf(i+1));
                    
                 if(!clsItemExtraDescReq.IsItemExtraDescReq(EITLERPGLOBAL.gCompanyID,ItemID)) {
                        
                 if(!IndentDesc.equals(MRItemDesc)) {
                 JOptionPane.showMessageDialog(null,"You can not change Item Extra Description of Item :-" + ItemID);
                 TableL.setValueAt(MRItemDesc, i,ItemDescCol);
                 return false;
                 }
                 }
                 }
                 * Commented due to item extra description is deleted  
                 */
                /*if(clsItemExtraDescReq.IsItemExtraDescReq(EITLERPGLOBAL.gCompanyID,tmpItemID)) {
                 ObjItem.setAttribute("ITEM_EXTRA_DESC",DataModelL.getValueByVariable("ITEM_EXTRA_DESC",i));
                 } else {
                 ObjItem.setAttribute("ITEM_EXTRA_DESC","");
                 }*/
                /*try {
                 double Tot_Qty = Double.parseDouble((String) TableL.getValueAt(i,QtyCol));
                 double Tot_Allocate = Double.parseDouble((String) TableL.getValueAt(i,AllocateCol));
                 double Tot_Stock = Double.parseDouble((String) TableL.getValueAt(i,StockCol));
                 
                 
                 if(Tot_Allocate > Tot_Stock) {
                 JOptionPane.showMessageDialog(null,"Allocated Qty Should be less then Stock Qty. Please verify");
                 return false;
                 }
                 }
                 catch(Exception e) {
                 
                 }*/

            }
        }

        if (ValidEntryCount == 0) {
            JOptionPane.showMessageDialog(null, "Item entry is not valid. Please verify");
            return false;
        }

        //Now Header level validations
        if (txtIndentDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Indent Date");
            return false;
        }

        if (EditMode != EITLERPGLOBAL.AMEND) {
            if (cmbHierarchy.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
                return false;
            }

            if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
                JOptionPane.showMessageDialog(null, "Please select the Approval Action");
                return false;
            }

            java.sql.Date docDate = java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtIndentDate.getText()));

            if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
                return false;
            }

            if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
                JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
                return false;
            }
        }

        return true;
    }

    private void Add() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 3;

        if (aList.ShowList()) {
            EditMode = EITLERPGLOBAL.ADD;
            SetFields(true);
            ObjIndent.colLineItems.clear();
            FormatGrid();
            DisableToolbar();
            ClearFields();
            ObjIndent.colItemDetail.clear();
            SelPrefix = aList.Prefix; //Selected Prefix;
            SelSuffix = aList.Suffix;
            FFNo = aList.FirstFreeNo;
            SelNo = aList.DocNo;
            //Display newly generated document no.
            SetupApproval();
            txtIndentNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 3, FFNo, false));
            //txtIndentNo.setText(SelPrefix+txtIndentNo.getText());
            txtIndentDate.setText(EITLERPGLOBAL.getCurrentDate());
            txtIndentDate.requestFocus();

            lblTitle.setText("INDENT - " + txtIndentNo.getText());
            lblTitle.setBackground(Color.BLUE);
        } else {
            JOptionPane.showMessageDialog(null, "You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo = (String) ObjIndent.getAttribute("INDENT_NO").getObj();
        if (ObjIndent.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode = EITLERPGLOBAL.EDIT;

            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//

            if (ApprovalFlow.IsCreator(3, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 492)) {
                SetFields(true);
            } else {
                EnableApproval();
            }

            txtSpToRemarks.setEnabled(true);

            DisableToolbar();
            String Indent_Code = EITLERPGLOBAL.getCombostrCode(cmbIndentType);
            cmdAdd.setEnabled(false);
            cmdInsertMR.setEnabled(false);
            cmdInsertMOM.setEnabled(false);

            if (Indent_Code.equals("R")) {
                cmdAdd.setEnabled(true);
                cmdInsertMR.setEnabled(true);
            }

            if (Indent_Code.equals("M")) {
                cmdAdd.setEnabled(true);
                cmdInsertMOM.setEnabled(true);
            }

            if (Indent_Code.equals("O")) {
                cmdAdd.setEnabled(true);
            }

            cmdAdd.setEnabled(true);
            cmdInsertMR.setEnabled(true);

            //Temporary code - remove this
            cmbIndentType.setEnabled(false);
            cmbDept.setEnabled(false);
            cmbUser.setEnabled(false);

            txtIndentDate.setEnabled(false);
            cmbStatus.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Delete() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo = (String) ObjIndent.getAttribute("INDENT_NO").getObj();

        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record ?", "SDML ERP", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            if (ObjIndent.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if (ObjIndent.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                } else {
                    JOptionPane.showMessageDialog(null, "Error occured while deleting. Error is " + ObjIndent.LastError);
                }
            } else {
                JOptionPane.showMessageDialog(null, "You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }

    private void Save() {
        if (Validate() == false) {
            return; //Validation failed
        }

        EITLERPGLOBAL.ChangeCursorToWait(this);

        UpdateAmounts();
        SetData();

        if (EditMode == EITLERPGLOBAL.ADD) {
            if (ObjIndent.Insert(SelPrefix, SelNo)) {
                MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjIndent.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjIndent.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjIndent.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.AMEND) {
            if (ObjIndent.Amend()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. Error is " + ObjIndent.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();

        ShowMessage("Ready.");
        EITLERPGLOBAL.ChangeCursorToDefault(this);

        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
    }

    private void ClearFields() {
        txtIndentNo.setText("");
        txtIndentDate.setText("");
        txtPurpose.setText("");
        txtNetAmount.setText("0.00");
        txtToRemarks.setText("");
        txtSpToRemarks.setText("");
        chkCancelled.setSelected(false);
        FormatGridA();
        FormatGridHS();
        FormatGrid();

        chkAttachement.setSelected(false);
        txtFile.setText("");
    }

    private void SetupApproval() {

        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 497)) {
            if (EditMode == EITLERPGLOBAL.EDIT) {
                panelExplicit.setVisible(true);
            }

        } else {
            panelExplicit.setVisible(false);
        }

        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,495)) {
         cmbHierarchy.setEnabled(true);
         }
         else {
         cmbHierarchy.setEnabled(false);
         }*/
        if (EditMode == EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        } else {
            cmbHierarchy.setEnabled(false);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = ApprovalFlow.getFromID((int) EITLERPGLOBAL.gCompanyID, 3, (String) ObjIndent.getAttribute("INDENT_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = ApprovalFlow.getFromRemarks((int) EITLERPGLOBAL.gCompanyID, 3, FromUserID, (String) ObjIndent.getAttribute("INDENT_NO").getObj());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        txtSpFrom.setText(txtFrom.getText());
        txtSpFromRemarks.setText(txtFromRemarks.getText());
        //txtSpToRemarks.setText("");

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            // cmbHierarchy.setEnabled(false); //CHANGE #1 : ENABLE HIERARCHY SELECTION COMBO.
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }

        //Special Addition - Only while Editing the Document
        if ((EITLERPGLOBAL.gNewUserID == 10 || EITLERPGLOBAL.gNewUserID == 9 || EITLERPGLOBAL.gNewUserID == 124) && EditMode == EITLERPGLOBAL.EDIT) //10- Auditor Manager
        //if (EITLERPGLOBAL.gNewUserID == 10 && EditMode == EITLERPGLOBAL.EDIT) //10- Auditor Manager
        {
            boolean AllowFinalApproval = true;

            for (int i = 1; i <= ObjIndent.colLineItems.size(); i++) {
                clsIndentItem ObjItem = (clsIndentItem) ObjIndent.colLineItems.get(Integer.toString(i));
                String theItemID = (String) ObjItem.getAttribute("ITEM_CODE").getObj();

                int DeptID = EITLERPGLOBAL.getComboCode(cmbDept);
                String Authority = clsItemCriteria.getApprovalAuthority(theItemID, DeptID);

                if (Authority.trim().equals("A")) {
                    //Don't do anything
                } else {
                    AllowFinalApproval = false;
                }
            }

            if (AllowFinalApproval) {
                OpgFinal.setEnabled(true);
            } else {
                OpgFinal.setEnabled(false);
            }

        }

        //Final Approval rights to Mr. Nimish Patel and Mr. B.U.Patel
        if (EITLERPGLOBAL.gNewUserID == 11 || EITLERPGLOBAL.gNewUserID == 72) {
            OpgFinal.setEnabled(true);
        }

    }

    public void FindEx(int pCompanyID, String pDocNo) {
        ObjIndent.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND INDENT_NO='" + pDocNo + "'", pCompanyID);
        ObjIndent.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        ObjIndent.Filter(" WHERE INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_HEADER,D_COM_DOC_DATA WHERE D_INV_INDENT_HEADER.INDENT_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_INDENT_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_INDENT_HEADER.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND USER_ID=" + EITLERPGLOBAL.gNewUserID + " AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=3)", EITLERPGLOBAL.gCompanyID);
        ObjIndent.MoveLast();
        DisplayData();
    }

    private void Find() {
        Loader ObjLoader = new Loader(this, "EITLERP.Stores.frmIndentfind", true);
        frmIndentfind ObjReturn = (frmIndentfind) ObjLoader.getObj();

        if (ObjReturn.Cancelled == false) {
            if (!ObjIndent.Filter(ObjReturn.strQuery, EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null, "No records found.");
            }
            MoveLast();
        }
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for (int i = 0; i < TableL.getColumnCount(); i++) {
            FieldName = DataModelL.getVariable(i);

            if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            } else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void DisplayHistoryInfo() {
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        String ItemID = "";
        String NewItemID = "";
        int DeptID = 0;

        try {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            tmpConn = data.getConn();

            ItemID = DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());

            NewItemID = ItemID;

            if (ItemID.indexOf(".") != -1) {
                // Item ID Contains .
                NewItemID = ItemID.substring(0, ItemID.indexOf("."));
            }

            DeptID = EITLERPGLOBAL.getComboCode(cmbDept);

            double PendInspQty = clsMIRRaw.getTotalPendingGRNQty(EITLERPGLOBAL.gCompanyID, NewItemID);
            double PendIndentQty = clsIndent.getTotalPendingIndentQty(EITLERPGLOBAL.gCompanyID, NewItemID);
            double PendPOQty = clsPOGen.getTotalPendingQty(EITLERPGLOBAL.gCompanyID, NewItemID);
            double AAQty = clsIndent.getTotalAlreadyApprovedQty(EITLERPGLOBAL.gCompanyID, NewItemID);

            clsStockInfo objStock = (new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID, NewItemID, EITLERPGLOBAL.getCurrentDateDB());
            double lStockQty = objStock.StockQty;

            TableL.setValueAt(Double.toString(lStockQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("STOCK_QTY"));

            int NewRow = TableL.getSelectedRow();

            String LastGRNNo = clsGRN.getLastGRNNo(EITLERPGLOBAL.gCompanyID, NewItemID, true);

            DataModelL.setValueByVariable("LAST_GRN_NO", LastGRNNo, NewRow);

            stTmp = tmpConn.createStatement();
            rsTmp = stTmp.executeQuery("SELECT * FROM D_INV_GRN_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND GRN_NO='" + LastGRNNo + "'");
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                DataModelL.setValueByVariable("LAST_GRN_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE")), NewRow);
            }

            stTmp = tmpConn.createStatement();
            rsTmp = stTmp.executeQuery("SELECT QTY,LANDED_RATE FROM D_INV_GRN_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND GRN_NO='" + LastGRNNo + "' AND ITEM_ID LIKE '" + NewItemID + "%' ORDER BY QTY DESC");
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                DataModelL.setValueByVariable("LAST_GRN_QTY", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("QTY"), 3)), NewRow);
                DataModelL.setValueByVariable("LAST_GRN_RATE", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("LANDED_RATE"), 3)), NewRow);
                DataModelL.setValueByVariable("RATE", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("LANDED_RATE"), 3)), NewRow);
            }

            String LastPONo = clsPOGen.getLastPObyItem(EITLERPGLOBAL.gCompanyID, NewItemID, LastGRNNo);

            DataModelL.setValueByVariable("PEND_INSP_QTY", Double.toString(EITLERPGLOBAL.round(PendInspQty, 3)), NewRow);
            DataModelL.setValueByVariable("PEND_INDENT_QTY", Double.toString(EITLERPGLOBAL.round(PendIndentQty, 3)), NewRow);
            DataModelL.setValueByVariable("PEND_PO_QTY", Double.toString(EITLERPGLOBAL.round(PendPOQty, 3)), NewRow);
            DataModelL.setValueByVariable("LAST_PO_NO", LastPONo, NewRow);
            DataModelL.setValueByVariable("AA_INDENT_QTY", Double.toString(EITLERPGLOBAL.round(AAQty, 3)), NewRow);

            stTmp = tmpConn.createStatement();
            rsTmp = stTmp.executeQuery("SELECT * FROM D_PUR_PO_HEADER WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + LastPONo + "' ");
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                DataModelL.setValueByVariable("LAST_PO_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE")), NewRow);
                DataModelL.setValueByVariable("LAST_SUPP_ID", rsTmp.getString("SUPP_ID"), NewRow);
                DataModelL.setValueByVariable("LAST_SUPP_NAME", clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, rsTmp.getString("SUPP_ID")), NewRow);
            } else {
                DataModelL.setValueByVariable("LAST_PO_DATE", EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE")), NewRow);
                DataModelL.setValueByVariable("LAST_SUPP_ID", "", NewRow);
                DataModelL.setValueByVariable("LAST_SUPP_NAME", "", NewRow);
            }

            stTmp = tmpConn.createStatement();
            rsTmp = stTmp.executeQuery("SELECT SUM(QTY) AS THEQTY FROM D_PUR_PO_DETAIL WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND PO_NO='" + LastPONo + "' AND ITEM_ID LIKE '" + NewItemID + "%'");
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                DataModelL.setValueByVariable("LAST_PO_QTY", Double.toString(EITLERPGLOBAL.round(rsTmp.getDouble("THEQTY"), 3)), NewRow);
            }

            EITLERPGLOBAL.ChangeCursorToDefault(this);

            //tmpConn.close();
            stTmp.close();
            rsTmp.close();

        } catch (Exception e) {
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
    }

    private void PreviewReport() {
        HashMap Params = new HashMap();

        if (chkCancelled.isSelected()) {
            JOptionPane.showMessageDialog(null, "You cannot take printout of cancelled document");
            return;
        }

        Params.put("URL", EITLERPGLOBAL.DatabaseURL);
        Params.put("company_id", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("indent_no", txtIndentNo.getText());

        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/Indent.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtIndentNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Previwing " + e.getMessage());
        }
    }

    private void PreviewAuditReport() {
        HashMap Params = new HashMap();

        Params.put("URL", EITLERPGLOBAL.DatabaseURL);
        Params.put("company_id", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("indent_no", txtIndentNo.getText());

        try {
            URL ReportFile = new URL("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/Reports/rptIndentA.jsp?dbURL=" + EITLERPGLOBAL.DatabaseURL + "&CompanyID=" + EITLERPGLOBAL.gCompanyID + "&DocNo=" + txtIndentNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile, "_blank");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error Previwing " + e.getMessage());
        }
    }

    private void GenerateUserCombo() {

        HashMap List = new HashMap();

        int SelDeptID = EITLERPGLOBAL.getComboCode(cmbDept);

        //-------- Generating Buyer Combo --------//
        cmbUserModel = new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);

        List = clsDepartment.getDeptUsersList(EITLERPGLOBAL.gCompanyID, SelDeptID);
        for (int i = 1; i <= List.size(); i++) {
            clsDeptUsers ObjUser = (clsDeptUsers) List.get(Integer.toString(i));

            ComboData aData = new ComboData();

            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code = (long) ObjUser.getAttribute("USER_ID").getVal();

            cmbUserModel.addElement(aData);
        }

    }

    //Special User Combo for Rejected Documents
    private void GenerateRejectedUserCombo() {
        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();

        //----- Generate cmbType ------- //
        cmbSendToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);

        if (OpgReject.isSelected()) {
            //First add Department Head
            int theDeptID = EITLERPGLOBAL.getComboCode(cmbDept);
            DeptUsers = clsDepartment.getDeptUsersList(EITLERPGLOBAL.gCompanyID, theDeptID);

            for (int i = 1; i <= DeptUsers.size(); i++) {
                clsDeptUsers ObjUser = (clsDeptUsers) DeptUsers.get(Integer.toString(i));
                ComboData aData = new ComboData();
                aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                if (aData.Code != EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }

            }
        }

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            boolean UserFound = false;

            for (int j = 1; j <= DeptUsers.size(); j++) {
                clsDeptUsers ObjDeptUser = (clsDeptUsers) DeptUsers.get(Integer.toString(j));
                int tmpUserID = (int) ObjDeptUser.getAttribute("USER_ID").getVal();

                if (tmpUserID == aData.Code) {
                    UserFound = true;
                }
            }

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 3, txtIndentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 3, txtIndentNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (!UserFound)) {
                    cmbSendToModel.addElement(aData);
                }
            } else {
                if (!UserFound) {
                    cmbSendToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }

        //By default set send to to creator
        if (EditMode == EITLERPGLOBAL.EDIT) {
            int Creator = ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 3, txtIndentNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }

        //------------------------------ //
    }

    private void DisplayIndicators() {
        CellPainterA = new EITLTableCellRenderer();
        CellPainterA.removeBackColors();
        CellPainterA.removeForeColors();

        TableL.getColumnModel().getColumn(DataModelL.getColFromVariable("ITEM_NAME")).setCellRenderer(CellPainterA);

        for (int i = 0; i < TableL.getRowCount(); i++) {

            String ItemID = (String) TableL.getValueAt(i, DataModelL.getColFromVariable("ITEM_CODE"));
            int DeptID = EITLERPGLOBAL.getComboCode(cmbDept);
            String Approval = clsItemCriteria.getApprovalAuthority(ItemID, DeptID);

            if (Approval.equals("M")) {
                CellPainterA.setBackColor(i, DataModelL.getColFromVariable("ITEM_NAME"), Color.BLUE);
                CellPainterA.setForeColor(i, DataModelL.getColFromVariable("ITEM_NAME"), Color.WHITE);
            }

            if (Approval.equals("E")) {
                CellPainterA.setBackColor(i, DataModelL.getColFromVariable("ITEM_NAME"), Color.YELLOW);
                CellPainterA.setForeColor(i, DataModelL.getColFromVariable("ITEM_NAME"), Color.BLACK);
            }

        }

    }

    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while (c != null) {
            if (c instanceof Frame) {
                return (Frame) c;
            }

            c = c.getParent();
        }
        return (Frame) null;
    }

}
