 /*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Stores;

/** 
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmInward.class HEIGHT=500 WIDTH=665></APPLET>*/
 
import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Utils.*;
import java.sql.*;
import java.net.*;

public class frmInward extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsInward ObjInward;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    
    
    private EITLTableModel DataModel;
    private EITLTableModel DataModelL;
    
    private boolean Updating=false;
    
    private String theDocNo="";
    
    private boolean DoNotEvaluate=false;

    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public frmInward() {
        System.gc();
        setSize(665,500);
        initComponents();

        txtFromDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtToDate.setText(EITLERPGLOBAL.getCurrentDate());
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        //((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        
        ObjInward=new clsInward();
        
        if(ObjInward.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjInward.MoveFirst();
            DisplayData();
            SetMenuForRights();
            
            DataModelL.TableReadOnly(true);
        }
        else {
            JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjInward.LastError);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtChalanNo = new javax.swing.JTextField();
        txtSuppID = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cmdReadWeight = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmdShow = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" MATERIAL INWARD ENTRY");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setText("Inward No.");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(32, 17, 76, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setName("GATEPASS_REQ_NO");
        txtDocNo.setNextFocusableComponent(txtDocDate);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(112, 14, 104, 19);

        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(310, 16, 29, 15);

        txtDocDate.setName("GATEPASS_REQ_DATE");
        txtDocDate.setNextFocusableComponent(txtChalanNo);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(344, 16, 102, 19);
        txtDocDate.getAccessibleContext().setAccessibleName("Access");

        txtSuppName.setName("PURPOSE");
        txtSuppName.setEnabled(false);
        txtSuppName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSuppNameFocusGained(evt);
            }
        });

        Tab1.add(txtSuppName);
        txtSuppName.setBounds(217, 84, 396, 19);

        jLabel12.setText("Chalan No.");
        Tab1.add(jLabel12);
        jLabel12.setBounds(37, 53, 73, 15);

        txtChalanNo.setName("PARTY_NAME");
        txtChalanNo.setNextFocusableComponent(txtSuppID);
        txtChalanNo.setEnabled(false);
        Tab1.add(txtChalanNo);
        txtChalanNo.setBounds(112, 52, 158, 19);

        txtSuppID.setName("PARTY_NAME");
        txtSuppID.setNextFocusableComponent(cmdAdd);
        txtSuppID.setEnabled(false);
        txtSuppID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppIDFocusLost(evt);
            }
        });
        txtSuppID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSuppIDKeyPressed(evt);
            }
        });

        Tab1.add(txtSuppID);
        txtSuppID.setBounds(113, 84, 101, 19);

        jLabel16.setText("Supplier");
        Tab1.add(jLabel16);
        jLabel16.setBounds(38, 85, 73, 15);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setNextFocusableComponent(cmdSave);
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
        });

        jScrollPane2.setViewportView(TableL);

        Tab1.add(jScrollPane2);
        jScrollPane2.setBounds(9, 163, 488, 163);

        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab1.add(jPanel1);
        jPanel1.setBounds(6, 126, 627, 4);

        jLabel4.setText("Inward Items");
        Tab1.add(jLabel4);
        jLabel4.setBounds(11, 137, 88, 15);

        cmdReadWeight.setText("Read Weight F5");
        cmdReadWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReadWeightActionPerformed(evt);
            }
        });

        Tab1.add(cmdReadWeight);
        cmdReadWeight.setBounds(504, 167, 134, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        Tab1.add(cmdAdd);
        cmdAdd.setBounds(506, 202, 114, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(TableL);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemove);
        cmdRemove.setBounds(507, 233, 114, 25);

        Tab.addTab("Inward", Tab1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(8, 74, 628, 230);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jPanel3);
        jPanel3.setBounds(7, 24, 632, 6);

        jLabel15.setText("Inward Entries (MIR Not updated)");
        jPanel2.add(jLabel15);
        jLabel15.setBounds(8, 6, 250, 15);

        jLabel5.setText("Date From");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(8, 41, 71, 15);

        jPanel2.add(txtFromDate);
        txtFromDate.setBounds(83, 38, 102, 19);

        jPanel2.add(txtToDate);
        txtToDate.setBounds(223, 38, 108, 19);

        jLabel6.setText("To");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(197, 40, 27, 15);

        cmdShow.setText("Show List");
        cmdShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowActionPerformed(evt);
            }
        });

        jPanel2.add(cmdShow);
        cmdShow.setBounds(353, 38, 125, 25);

        Tab.addTab("Inward Information", jPanel2);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 364);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 433, 650, 22);

    }//GEN-END:initComponents

    private void cmdShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowActionPerformed
        // TODO add your handling code here:
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
                
      /*DataModel.addColumn("Sr."); //0 - Read Only
        DataModel.addColumn("Inward Date");
        DataModel.addColumn("Supp ID");
        DataModel.addColumn("Chalan No.");
        DataModel.addColumn("Item Code"); //1
        DataModel.addColumn("Item Description"); //2 //Read Only
        DataModel.addColumn("Gross Qty"); //3 //Read Only*/
        
        try
        {
         FormatGridP();
         
         tmpConn=data.getConn();
         stTmp=tmpConn.createStatement();
         rsTmp=stTmp.executeQuery("SELECT INWARD_DATE,SUPP_ID,CHALAN_NO,ITEM_ID,GROSS_QTY FROM D_COM_INWARD_HEADER,D_COM_INWARD_DETAIL WHERE D_COM_INWARD_HEADER.COMPANY_ID=D_COM_INWARD_DETAIL.COMPANY_ID AND D_COM_INWARD_HEADER.INWARD_NO=D_COM_INWARD_DETAIL.INWARD_NO AND D_COM_INWARD_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_INWARD_DETAIL.MIR_UPDATED=0 AND D_COM_INWARD_HEADER.INWARD_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND D_COM_INWARD_HEADER.INWARD_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"'");
         rsTmp.first();
         if(rsTmp.getRow()>0)
         {
            while(!rsTmp.isAfterLast())
            {
                Object[] rowData=new Object[7];
                rowData[0]=Integer.toString(Table.getRowCount()+1);
                rowData[1]=EITLERPGLOBAL.formatDate(rsTmp.getString("INWARD_DATE"));
                rowData[2]=rsTmp.getString("SUPP_ID");
                rowData[3]=rsTmp.getString("CHALAN_NO");
                rowData[4]=rsTmp.getString("ITEM_ID");
                rowData[5]=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,rsTmp.getString("ITEM_ID"));
                rowData[6]=Double.toString(rsTmp.getDouble("GROSS_QTY"));
                DataModel.addRow(rowData);                
                
                rsTmp.next();
            }
         }

        //tmpConn.close();
        stTmp.close();
        rsTmp.close();
         
        }
        catch(Exception e)
        {
            //JOptionPane.showMessageDialog(null,e.getMessage());
        }
    }//GEN-LAST:event_cmdShowActionPerformed
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==116) //F5 Key pressed
        {
            try {
                if(TableL.getRowCount()>0) {
                    TableL.setValueAt(SimpleRead.getWeight("COM1"), TableL.getSelectedRow(), 3);
                }
            }
            catch(Exception e) {
                
            }
            
        }
        
        try {
            if(EditMode!=0) //Only Process keys when in editing mode
            {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    if(TableL.getSelectedColumn()==1) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        
                        if(aList.ShowLOV()) {
                            if(TableL.getCellEditor()!=null)
                            {
                              TableL.getCellEditor().stopCellEditing();  
                            }
                            TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),1);
                        }
                    }
                }
                
            }
        }
        catch(Exception e)
        {}
        
        
        
    }//GEN-LAST:event_TableLKeyPressed
    
    private void cmdReadWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReadWeightActionPerformed
        // TODO add your handling code here:
        try {
            if(TableL.getRowCount()>0) {
                TableL.setValueAt(SimpleRead.getWeight("COM1"), TableL.getSelectedRow(), 3);
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdReadWeightActionPerformed
    
    private void txtSuppIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppIDFocusLost
        // TODO add your handling code here:
        if(!txtSuppID.getText().trim().equals("")) {
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppID.getText()));
        }
    }//GEN-LAST:event_txtSuppIDFocusLost
    
    private void txtSuppIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSuppIDKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND BLOCKED='N' AND APPROVED=1 AND ST35_REGISTERED=1 ORDER BY SUPP_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtSuppID.setText(aList.ReturnVal);
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        //=========================================
        
    }//GEN-LAST:event_txtSuppIDKeyPressed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        try {
            DataModelL.removeRow(TableL.getSelectedRow());
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        try {
            Object[] rowData=new Object[1];
            rowData[0]=Integer.toString(TableL.getRowCount()+1);
            DataModelL.addRow(rowData);
            TableL.changeSelection(TableL.getRowCount()-1,1, false,false);
            TableL.requestFocus();
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyReleased
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtSuppNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppNameFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSuppNameFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjInward.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        
              /*Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
              if(Table.getEditorComponent() instanceof JTextComponent)
              {
                  ((JTextComponent)Table.getEditorComponent()).selectAll();
              }*/
        
        try {
            if(EditMode!=0) //Only Process keys when in editing mode
            {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    if(TableL.getSelectedColumn()==1) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        
                        if(aList.ShowLOV()) {
                            TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),1);
                        }
                    }
                }
                
            }
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_TableKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdReadWeight;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShow;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtChalanNo;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtSuppID;
    private javax.swing.JTextField txtSuppName;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        txtSuppID.setEnabled(pStat);
        txtChalanNo.setEnabled(pStat);
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        cmdReadWeight.setEnabled(pStat);
        
        DataModelL.TableReadOnly(!pStat);
        
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtSuppID.setText("");
        txtSuppName.setText("");
        txtChalanNo.setText("");
        FormatGrid();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        txtDocNo.setText(Integer.toString((int)ObjInward.getAttribute("INWARD_NO").getVal()));
        lblTitle.setText("MATERIAL INWARD ENTRY - "+txtDocNo.getText());
        txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjInward.getAttribute("INWARD_DATE").getObj()));
        txtSuppID.setText((String)ObjInward.getAttribute("SUPP_ID").getObj());
        txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,txtSuppID.getText()));
        txtChalanNo.setText((String)ObjInward.getAttribute("CHALAN_NO").getObj());
        FormatGrid();
        
        DoNotEvaluate=true;
        
        //Now Generate Table
        for(int i=1;i<=ObjInward.colItems.size();i++) {
            clsInwardItem ObjItem=(clsInwardItem)ObjInward.colItems.get(Integer.toString(i));
            Object[] rowData=new Object[4];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=(String)ObjItem.getAttribute("ITEM_ID").getObj();
            rowData[2]=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,(String)ObjItem.getAttribute("ITEM_ID").getObj());
            rowData[3]=Double.toString(ObjItem.getAttribute("GROSS_QTY").getVal());
            
            DataModelL.addRow(rowData);
        }
        
        DoNotEvaluate=false;
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjInward.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjInward.setAttribute("INWARD_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjInward.setAttribute("CHALAN_NO",txtChalanNo.getText());
        ObjInward.setAttribute("SUPP_ID",txtSuppID.getText());
        
        
        //======= Set Line part ============
        ObjInward.colItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsInwardItem ObjItem=new clsInwardItem();
            String lItemID=(String)TableL.getValueAt(i, 1);
            
            //Add Only Valid Items
            if(clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, lItemID)) {
                ObjItem.setAttribute("SR_NO",i);
                ObjItem.setAttribute("ITEM_ID",lItemID);
                ObjItem.setAttribute("GROSS_QTY",EITLERPGLOBAL.round(Double.parseDouble((String)TableL.getValueAt(i,3)),3));
                
                ObjInward.colItems.put(Integer.toString(ObjInward.colItems.size()+1), ObjItem);
            }
        }
    }
    
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        DataModelL=new EITLTableModel();
        TableL.removeAll();
        
        TableL.setModel(DataModelL);
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add Columns to it
        DataModelL.addColumn("Sr."); //0 - Read Only
        DataModelL.addColumn("Item Code"); //1
        DataModelL.addColumn("Item Description"); //2 //Read Only
        DataModelL.addColumn("Gross Qty"); //3 //Read Only
        
        DataModelL.TableReadOnly(false);
        DataModelL.SetReadOnly(0);
        DataModelL.SetReadOnly(2);
        
        DataModelL.SetVariable(0,"SR_NO");
        DataModelL.SetVariable(1,"ITEM_CODE");
        DataModelL.SetVariable(2,"ITEM_NAME");
        DataModelL.SetVariable(3,"GROSS_QTY");
        
        DataModelL.SetNumeric(3,true);
        
        //------- Install Table List Selection Listener ------//
        TableL.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableL.getSelectedColumn();
                String strVar=DataModelL.getVariable(last);

                
              //=============== Cell Editing Routine =======================//  
              try
              {
              cellLastValue=(String)TableL.getValueAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                            
              TableL.editCellAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
              if(TableL.getEditorComponent() instanceof JTextComponent)
              {
                  ((JTextComponent)TableL.getEditorComponent()).selectAll();
              }
              }
              catch(Exception cell){}
              //============= Cell Editing Routine Ended =================//
              
                
            }
        }
        );
        //===================================================//
        
        
        
        //----- Install Table Model Event Listener -------//
        TableL.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    
                    //=========== Cell Update Prevention Check ===========//
                    String curValue=(String)TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                    if(curValue.equals(cellLastValue))
                    {
                      return;
                    }
                    //====================================================//
                    
                    
                    if(DoNotEvaluate) {
                        return;
                    }
                    
                    
                    if(col==1){
                        try {
                            String lItemID=(String)TableL.getValueAt(TableL.getSelectedRow(),1);
                            String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                            TableL.setValueAt(lItemName, TableL.getSelectedRow(), 2);
                        }
                        catch(Exception ex){}
                    }
                }
            }
        });
        
        Updating=false;
        //Table formatting completed
    }
    

    private void FormatGridP() {
        
        Updating=true; //Stops recursion
        
        DataModel=new EITLTableModel();
        Table.removeAll();
        
        Table.setModel(DataModel);
        TableColumnModel ColModel=Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //Add Columns to it
        DataModel.addColumn("Sr."); //0 - Read Only
        DataModel.addColumn("Inward Date");
        DataModel.addColumn("Supp ID");
        DataModel.addColumn("Chalan No.");
        DataModel.addColumn("Item Code"); //1
        DataModel.addColumn("Item Description"); //2 //Read Only
        DataModel.addColumn("Gross Qty"); //3 //Read Only
        
        DataModel.TableReadOnly(true);
        
        Updating=false;
        //Table formatting completed
    }
    
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,761)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,762)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,763)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
    }
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        txtDocDate.requestFocus();
        
        lblTitle.setText("MATERIAL INWARD ENTRY - "+txtDocNo.getText());
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        EITLERPGLOBAL.ChangeCursorToWait(this);
        EditMode=EITLERPGLOBAL.EDIT;
        //---New Change ---//
        DisplayData();
        //----------------//
        
        SetFields(true);
        DisableToolbar();
        txtDocDate.requestFocus();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        if(ObjInward.Delete(EITLERPGLOBAL.gUserID)) {
            MoveLast();
        }
    }
    
    private void Save() {
        //Form level validations
        if(txtDocDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter document date");
            return;
        }
        
        if(txtChalanNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Chalan no.");
            return;
        }
        
        
        //Check the no. of items
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter some items.");
            return;
        }
        
        
        //Check negative Qty.
        for(int i=0;i<=TableL.getRowCount()-1;i++) {
            String strItemID=(String)TableL.getValueAt(i,1);
            if(!clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID,strItemID)) {
                JOptionPane.showMessageDialog(null,"Invalid Item code. Please verify the input");
                return;
            }
            
            double theQty=Double.parseDouble((String)TableL.getValueAt(i,3));
            if(theQty<=0) {
                JOptionPane.showMessageDialog(null,"Please enter qty.");
                return;
            }
        }
        
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjInward.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjInward.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjInward.Update()) {
                //Nothing to do
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjInward.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmInward",true);
        frmInward ObjReturn= (frmInward) ObjLoader.getObj();
        
        /*if(ObjReturn.Cancelled==false) {
            if(!ObjGPR.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }*/
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjInward.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjInward.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjInward.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjInward.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,int pDocNo) {
        ObjInward.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND INWARD_NO="+pDocNo,pCompanyID);
        ObjInward.MoveFirst();
        DisplayData();
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
}
