/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmGPR.class HEIGHT=530 WIDTH=665></APPLET>*/

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import EITLERP.Utils.*;

public class frmGPR extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsGPR ObjGPR;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbTypeModel;
    private EITLComboModel cmbForDeptModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbUserModel;
    
    private EITLTableModel DataModel;
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(665,530);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        //((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        
        
        GenerateCombos();
        ObjGPR=new clsGPR();
        SetMenuForRights();
        FormatGrid();
        DataModel.TableReadOnly(true);
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjGPR.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjGPR.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjGPR.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbForDept = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        chkCancelled = new javax.swing.JCheckBox();
        cmdNext1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        txtReturnDate = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtDespatchMode = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtFreightPaidBy = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtAdd1 = new javax.swing.JTextField();
        txtAdd2 = new javax.swing.JTextField();
        txtAdd3 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        cmdPurposeBig = new javax.swing.JButton();
        cmdRemarksBig = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmdInsertDecl = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" GATEPASS REQUISITION");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setText("Requisition No.");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(13, 17, 95, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setName("GATEPASS_REQ_NO");
        txtDocNo.setNextFocusableComponent(txtDocDate);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(112, 14, 104, 19);

        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(310, 16, 29, 15);

        txtDocDate.setName("GATEPASS_REQ_DATE");
        txtDocDate.setNextFocusableComponent(cmbType);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(372, 14, 102, 19);
        txtDocDate.getAccessibleContext().setAccessibleName("Access");

        jLabel4.setText("Type");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Tab1.add(jLabel4);
        jLabel4.setBounds(76, 52, 30, 15);

        cmbForDept.setName("DEST_DEPT_ID");
        cmbForDept.setNextFocusableComponent(cmbUser);
        cmbForDept.setEnabled(false);
        cmbForDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbForDeptItemStateChanged(evt);
            }
        });
        cmbForDept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbForDeptFocusGained(evt);
            }
        });

        Tab1.add(cmbForDept);
        cmbForDept.setBounds(112, 76, 160, 24);

        jLabel5.setText("For Dept.");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel5);
        jLabel5.setBounds(46, 79, 57, 15);

        cmbType.setName("GATEPASS_TYPE");
        cmbType.setNextFocusableComponent(cmbForDept);
        cmbType.setEnabled(false);
        cmbType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTypeFocusGained(evt);
            }
        });

        Tab1.add(cmbType);
        cmbType.setBounds(112, 48, 160, 24);

        jLabel6.setText("Purpose");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(61, 320, 50, 15);

        txtPurpose.setName("PURPOSE");
        txtPurpose.setNextFocusableComponent(txtRemarks);
        txtPurpose.setEnabled(false);
        txtPurpose.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPurposeFocusGained(evt);
            }
        });

        Tab1.add(txtPurpose);
        txtPurpose.setBounds(115, 317, 348, 19);

        jLabel8.setText("Remarks");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(57, 347, 54, 15);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(Table);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(115, 343, 347, 19);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(550, 6, 91, 23);

        cmdNext1.setMnemonic('x');
        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(cmdRemove);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(536, 356, 102, 25);

        jLabel7.setText("User");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel7);
        jLabel7.setBounds(296, 80, 44, 15);

        cmbUser.setName("USER_ID");
        cmbUser.setNextFocusableComponent(txtPartyName);
        cmbUser.setEnabled(false);
        Tab1.add(cmbUser);
        cmbUser.setBounds(348, 76, 160, 24);

        jLabel11.setText("Expected Return Date");
        Tab1.add(jLabel11);
        jLabel11.setBounds(39, 283, 143, 15);

        jLabel12.setText("Party name ");
        Tab1.add(jLabel12);
        jLabel12.setBounds(36, 116, 73, 15);

        txtPartyName.setName("PARTY_NAME");
        txtPartyName.setNextFocusableComponent(txtAdd1);
        txtPartyName.setEnabled(false);
        txtPartyName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyNameKeyPressed(evt);
            }
        });

        Tab1.add(txtPartyName);
        txtPartyName.setBounds(112, 112, 240, 19);

        txtReturnDate.setName("EXP_RETURN_DATE");
        txtReturnDate.setNextFocusableComponent(txtPurpose);
        txtReturnDate.setEnabled(false);
        Tab1.add(txtReturnDate);
        txtReturnDate.setBounds(178, 280, 102, 19);

        jLabel13.setText("Dispatch Mode");
        Tab1.add(jLabel13);
        jLabel13.setBounds(75, 257, 93, 15);

        txtDespatchMode.setName("DESPATCH_MODE");
        txtDespatchMode.setNextFocusableComponent(txtFreightPaidBy);
        txtDespatchMode.setEnabled(false);
        Tab1.add(txtDespatchMode);
        txtDespatchMode.setBounds(177, 256, 158, 19);

        jLabel14.setText("Freight paid by");
        Tab1.add(jLabel14);
        jLabel14.setBounds(346, 258, 104, 15);

        txtFreightPaidBy.setName("FREIGHT_PAID_BY");
        txtFreightPaidBy.setNextFocusableComponent(txtReturnDate);
        txtFreightPaidBy.setEnabled(false);
        Tab1.add(txtFreightPaidBy);
        txtFreightPaidBy.setBounds(449, 256, 102, 19);

        jLabel16.setText("Address");
        Tab1.add(jLabel16);
        jLabel16.setBounds(51, 136, 59, 15);

        txtAdd1.setName("ADD1");
        txtAdd1.setNextFocusableComponent(txtAdd2);
        txtAdd1.setEnabled(false);
        Tab1.add(txtAdd1);
        txtAdd1.setBounds(113, 134, 239, 19);

        txtAdd2.setName("ADD2");
        txtAdd2.setNextFocusableComponent(txtAdd3);
        txtAdd2.setEnabled(false);
        Tab1.add(txtAdd2);
        txtAdd2.setBounds(114, 155, 238, 19);

        txtAdd3.setName("ADD3");
        txtAdd3.setNextFocusableComponent(txtCity);
        txtAdd3.setEnabled(false);
        Tab1.add(txtAdd3);
        txtAdd3.setBounds(114, 176, 237, 19);

        jLabel17.setText("City");
        Tab1.add(jLabel17);
        jLabel17.setBounds(82, 203, 30, 15);

        txtCity.setName("CITY");
        txtCity.setNextFocusableComponent(txtDespatchMode);
        txtCity.setEnabled(false);
        Tab1.add(txtCity);
        txtCity.setBounds(115, 200, 189, 19);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(220, 15, 44, 15);

        cmdPurposeBig.setText("...");
        cmdPurposeBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPurposeBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdPurposeBig);
        cmdPurposeBig.setBounds(465, 317, 33, 21);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(466, 342, 33, 21);

        Tab.addTab("Requisition Information", Tab1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(11, 57, 628, 162);

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jPanel3);
        jPanel3.setBounds(9, 41, 632, 6);

        jLabel15.setText("Requisition Items");
        jPanel2.add(jLabel15);
        jLabel15.setBounds(14, 12, 187, 15);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        jPanel2.add(cmdAdd);
        cmdAdd.setBounds(465, 228, 80, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(cmdNext1);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        jPanel2.add(cmdRemove);
        cmdRemove.setBounds(549, 228, 86, 25);

        jLabel10.setText("Press Ctrl+C to copy selected line.");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(18, 231, 226, 15);

        cmdInsertDecl.setMnemonic('d');
        cmdInsertDecl.setText("Declaration Form");
        cmdInsertDecl.setEnabled(false);
        cmdInsertDecl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertDeclActionPerformed(evt);
            }
        });

        jPanel2.add(cmdInsertDecl);
        cmdInsertDecl.setBounds(485, 11, 150, 25);

        Tab.addTab("Item Information", jPanel2);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 461, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(20, 116, 86, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 169, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdRemove);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(553, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 626, 144);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 208, 475, 148);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 192, 182, 15);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(500, 241, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(500, 272, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(500, 211, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(500, 303, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(505, 333, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 419);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(6, 488, 650, 22);

    }//GEN-END:initComponents

    private void cmdInsertDeclActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertDeclActionPerformed
        // TODO add your handling code here:
        SelectDF ObjDF=new SelectDF();
        
        if(ObjDF.ShowList()) {
            
            //It will contain MIR Item Objects
            if(ObjDF.CopyHeader) {
                
                EITLERPGLOBAL.setComboIndex(cmbForDept,(int)ObjDF.ObjDF.getAttribute("FOR_DEPT_ID").getVal());
                txtPartyName.setText((String)ObjDF.ObjDF.getAttribute("CONTRACTOR_NAME").getObj());
                txtAdd1.setText((String)ObjDF.ObjDF.getAttribute("ADD1").getObj());
                txtAdd2.setText((String)ObjDF.ObjDF.getAttribute("ADD2").getObj());
                txtAdd3.setText((String)ObjDF.ObjDF.getAttribute("ADD3").getObj());
                txtCity.setText((String)ObjDF.ObjDF.getAttribute("CITY").getObj());
            
            }
            
            DoNotEvaluate=true;
            
            for(int i=1;i<=ObjDF.colSelItems.size();i++) {
                clsDeclarationFormItem ObjItem=(clsDeclarationFormItem) ObjDF.colSelItems.get(Integer.toString(i));
                
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModel.addRow(rowData);
                
                int NewRow=Table.getRowCount()-1;
                
                //Copy MIR Lot nos. to GRN Lot nos.
                HashMap colLot=new HashMap();
                
                
                DataModel.setValueByVariable("SR_NO", Integer.toString(i),NewRow);
                DataModel.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_CODE").getObj(),NewRow);
                DataModel.setValueByVariable("ITEM_EXTRA_DESC",(String)ObjItem.getAttribute("DECLARATION_DESC").getObj(),NewRow);
                String lItemID = (String)ObjItem.getAttribute("ITEM_CODE").getObj();
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModel.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModel.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("RECD_QTY").getVal()-ObjItem.getAttribute("RETURNED_QTY").getVal()),NewRow);
                DataModel.setValueByVariable("UNIT_ID",Integer.toString((int)ObjItem.getAttribute("UNIT").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModel.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModel.setValueByVariable("DEC_ID",(String)ObjItem.getAttribute("DECLARATION_ID").getObj(),NewRow);
                DataModel.setValueByVariable("DEC_SR_NO", Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
            }
            
            DoNotEvaluate=false;
        }
        
    }//GEN-LAST:event_cmdInsertDeclActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void txtPartyNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyNameKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT PARTY_ID,PARTY_NAME,SUPPLIER_CODE FROM D_COM_PARTY WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY PARTY_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=3;
            
            if(aList.ShowLOV()) {
                
                int PartyID=Integer.parseInt(aList.ReturnVal);
                
                clsParty tmpObj=new clsParty();
                tmpObj.LoadData(EITLERPGLOBAL.gCompanyID);
                
                
                clsParty theParty=(clsParty)tmpObj.getObject(EITLERPGLOBAL.gCompanyID, PartyID);
                
                //Fill Up other details
                txtPartyName.setText((String)theParty.getAttribute("PARTY_NAME").getObj());
                txtAdd1.setText((String)theParty.getAttribute("ADD1").getObj());
                txtAdd2.setText((String)theParty.getAttribute("ADD2").getObj());
                txtAdd3.setText((String)theParty.getAttribute("ADD3").getObj());
                txtCity.setText((String)theParty.getAttribute("CITY").getObj());
                
                
            }
        }
        //=========================================
        
    }//GEN-LAST:event_txtPartyNameKeyPressed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPurposeBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPurposeBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtPurpose;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdPurposeBigActionPerformed
    
    private void cmbForDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbForDeptItemStateChanged
        // TODO add your handling code here:
        GenerateUserCombo();
    }//GEN-LAST:event_cmbForDeptItemStateChanged
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjGPR.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjGPR.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(Table.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModel.addRow(rowData);
                    int NewRow=Table.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<Table.getColumnCount();i++) {
                        Table.setValueAt(Table.getValueAt(Table.getSelectedRow(),i), NewRow, i);
                    }
                }
            }
        }
    }//GEN-LAST:event_TableKeyReleased
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click on this button to add a new row to table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtPurposeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPurposeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the purpose");
    }//GEN-LAST:event_txtPurposeFocusGained
    
    private void cmbForDeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbForDeptFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the department who wants the gatepass");
    }//GEN-LAST:event_cmbForDeptFocusGained
    
    private void cmbTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the type of gatepass");
    }//GEN-LAST:event_cmbTypeFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter GPR Date");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgReject.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjGPR.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Updating=true;
        Object[] rowData=new Object[8];
        rowData[0]=Integer.toString(Table.getRowCount()+1);
        rowData[1]="";
        rowData[2]="";
        rowData[3]="";
        rowData[4]="";
        rowData[5]="";
        rowData[6]="";
        rowData[7]="";
        DataModel.addRow(rowData);
        Updating=false;
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        
              /*Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
              if(Table.getEditorComponent() instanceof JTextComponent)
              {
                  ((JTextComponent)Table.getEditorComponent()).selectAll();
              }*/
        
        try {
            if(EditMode!=0) //Only Process keys when in editing mode
            {

            //=========== Unit List ===============//
            if(Table.getSelectedColumn()==DataModel.getColFromVariable("UNIT_NAME")) {
                if(evt.getKeyCode()==112) { //F1 Key pressed
                
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT PARA_CODE,D_COM_PARAMETER_MAST.DESC FROM D_COM_PARAMETER_MAST WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND  PARA_ID='UNIT' ORDER BY D_COM_PARAMETER_MAST.DESC";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(Table.getCellEditor()!=null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        
                        
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),DataModel.getColFromVariable("UNIT_ID"));
                        Table.setValueAt(clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT",Integer.parseInt(aList.ReturnVal)), Table.getSelectedRow(),DataModel.getColFromVariable("UNIT_NAME"));
                    }
                }
            }
            //=========================================//
                
                //======== Lot Entry ============
                if(Table.getSelectedColumn()==3) {
                    if(evt.getKeyCode()==112) //F1 Key
                    {
                        EnterGPRLotQty ObjLot=new EnterGPRLotQty();
                        if(DataModel.getUserObject(Table.getSelectedRow()) instanceof String) {
                            ObjLot.colLot=new HashMap();
                        }
                        else {
                            ObjLot.colLot=(HashMap)DataModel.getUserObject(Table.getSelectedRow());
                        }
                        if(ObjLot.ShowList()) //Ok Pressed
                        {
                            DataModel.SetUserObject(Table.getSelectedRow(),ObjLot.colLot);
                            //Show Updated Qty.
                            double TotalQty=0;
                            for(int i=1;i<=ObjLot.colLot.size();i++) {
                                clsGPRLot ObjItemLot=(clsGPRLot)ObjLot.colLot.get(Integer.toString(i));
                                TotalQty=TotalQty+ObjItemLot.getAttribute("LOT_QTY").getVal();
                            }
                            Table.setValueAt(Double.toString(TotalQty), Table.getSelectedRow(), 3);
                        }
                    }
                }
                //=========== Lot Entry Complete ============
                
                
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    if(Table.getSelectedColumn()==DataModel.getColFromVariable("ITEM_CODE")) {
                        LOV aList=new LOV();
                        
                        aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                        aList.ReturnCol=1;
                        aList.ShowReturnCol=true;
                        aList.DefaultSearchOn=2;
                        
                        if(aList.ShowLOV()) {
                            if(Table.getCellEditor()!=null) {
                                Table.getCellEditor().stopCellEditing();
                            }
                            Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(),1);
                        }
                    }
                }
            }
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbForDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInsertDecl;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdPurposeBig;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAdd1;
    private javax.swing.JTextField txtAdd2;
    private javax.swing.JTextField txtAdd3;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDespatchMode;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFreightPaidBy;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtReturnDate;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
        
        
    }
    
    
    private void SetFields(boolean pStat) {
        cmdInsertDecl.setEnabled(pStat);
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        cmbType.setEnabled(pStat);
        cmbForDept.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        cmbUser.setEnabled(pStat);
        txtPartyName.setEnabled(pStat);
        txtAdd1.setEnabled(pStat);
        txtAdd2.setEnabled(pStat);
        txtAdd3.setEnabled(pStat);
        txtCity.setEnabled(pStat);
        txtReturnDate.setEnabled(pStat);
        txtDespatchMode.setEnabled(pStat);
        txtFreightPaidBy.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        DataModel.TableReadOnly(!pStat);
        
        SetupApproval();
        
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        chkCancelled.setSelected(false);
        txtPurpose.setText("");
        txtRemarks.setText("");
        txtFromRemarks.setText("");
        txtPartyName.setText("");
        txtAdd1.setText("");
        txtAdd2.setText("");
        txtAdd3.setText("");
        txtCity.setText("");
        txtReturnDate.setText("");
        txtDespatchMode.setText("");
        txtFreightPaidBy.setText("");
        txtToRemarks.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try
        {
        if(EditMode==0)
        {
           if(ObjGPR.getAttribute("APPROVED").getInt()==1)
           {
            lblTitle.setBackground(Color.BLUE);   
           }
           
           if(ObjGPR.getAttribute("APPROVED").getInt()!=1)
           {
            lblTitle.setBackground(Color.GRAY);   
           }
           
           if(ObjGPR.getAttribute("CANCELLED").getInt()==1)
           {
            lblTitle.setBackground(Color.RED);   
           }

            
        }
        }
        catch(Exception c)
        {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=4;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        GenerateCombos();
        ClearFields();
        txtDocNo.setText((String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj());
        lblTitle.setText("GATEPASS REQUISITION - "+txtDocNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjGPR.getAttribute("REVISION_NO").getVal()));
        txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjGPR.getAttribute("GATEPASS_REQ_DATE").getObj()));
        EITLERPGLOBAL.setComboIndex(cmbForDept,(int)ObjGPR.getAttribute("DEST_DEPT_ID").getVal());
        
        GenerateUserCombo();
        EITLERPGLOBAL.setComboIndex(cmbType,(String)ObjGPR.getAttribute("GATEPASS_TYPE").getObj());
        txtPurpose.setText((String)ObjGPR.getAttribute("PURPOSE").getObj());
        txtRemarks.setText((String)ObjGPR.getAttribute("REMARKS").getObj());
        chkCancelled.setSelected(ObjGPR.getAttribute("CANCELLED").getBool());
        
        EITLERPGLOBAL.setComboIndex(cmbUser,(int)ObjGPR.getAttribute("USER_ID").getVal());
        txtReturnDate.setText(EITLERPGLOBAL.formatDate((String)ObjGPR.getAttribute("EXP_RETURN_DATE").getObj()));
        txtPartyName.setText((String)ObjGPR.getAttribute("PARTY_NAME").getObj());
        
        txtAdd1.setText((String)ObjGPR.getAttribute("ADD1").getObj());
        txtAdd2.setText((String)ObjGPR.getAttribute("ADD2").getObj());
        txtAdd3.setText((String)ObjGPR.getAttribute("ADD3").getObj());
        txtCity.setText((String)ObjGPR.getAttribute("CITY").getObj());
        
        txtDespatchMode.setText((String)ObjGPR.getAttribute("DESPATCH_MODE").getObj());
        txtFreightPaidBy.setText((String)ObjGPR.getAttribute("FREIGHT_PAID_BY").getObj());
        
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjGPR.getAttribute("HIERARCHY_ID").getVal());
        
        DoNotEvaluate=true;
        
        FormatGrid();
        //Now Generate Table
        for(int i=1;i<=ObjGPR.colGPRItems.size();i++) {
            clsGPRItem ObjItem=(clsGPRItem)ObjGPR.colGPRItems.get(Integer.toString(i));
            Object[] rowData=new Object[11];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=(String)ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj();
            rowData[2]=Double.toString(ObjItem.getAttribute("QTY").getVal());
            rowData[3]=Integer.toString((int)ObjItem.getAttribute("UNIT").getVal());
            rowData[4]=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
            rowData[5]=(String)ObjItem.getAttribute("PACKING").getObj();
            rowData[6]=(String)ObjItem.getAttribute("REMARKS").getObj();
            rowData[7]=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
            rowData[8]=clsItem.getItemName(EITLERPGLOBAL.gCompanyID,(String)ObjItem.getAttribute("ITEM_CODE").getObj());
            
            rowData[9]=(String)ObjItem.getAttribute("DEC_ID").getObj();
            rowData[10]=Integer.toString((int)ObjItem.getAttribute("DEC_SR_NO").getVal());
            
            
            DataModel.addRow(rowData);
            
            //Set the User Object - Lot Nos.
            DataModel.SetUserObject(Table.getRowCount()-1, ObjItem.colLot);
        }
        
        DoNotEvaluate=false;
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=(String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 4, DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsGPR.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsGPR ObjHistory=(clsGPR)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjGPR.setAttribute("PREFIX",SelPrefix);
        ObjGPR.setAttribute("SUFFIX",SelSuffix);
        ObjGPR.setAttribute("FFNO",FFNo);
        ObjGPR.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjGPR.setAttribute("GATEPASS_REQ_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjGPR.setAttribute("SOURCE_DEPT_ID",clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID) ) ;
        ObjGPR.setAttribute("DEST_DEPT_ID",EITLERPGLOBAL.getComboCode(cmbForDept));
        ObjGPR.setAttribute("GATEPASS_TYPE",EITLERPGLOBAL.getCombostrCode(cmbType));
        ObjGPR.setAttribute("PURPOSE",txtPurpose.getText());
        ObjGPR.setAttribute("REMARKS",txtRemarks.getText());
        ObjGPR.setAttribute("CANCELLED",chkCancelled.isSelected());
        ObjGPR.setAttribute("USER_ID",EITLERPGLOBAL.getComboCode(cmbUser));
        ObjGPR.setAttribute("EXP_RETURN_DATE",EITLERPGLOBAL.formatDateDB(txtReturnDate.getText()));
        ObjGPR.setAttribute("PARTY_NAME",txtPartyName.getText());
        ObjGPR.setAttribute("ADD1",txtAdd1.getText());
        ObjGPR.setAttribute("ADD2",txtAdd2.getText());
        ObjGPR.setAttribute("ADD3",txtAdd3.getText());
        ObjGPR.setAttribute("CITY",txtCity.getText());
        
        ObjGPR.setAttribute("DESPATCH_MODE",txtDespatchMode.getText());
        ObjGPR.setAttribute("FREIGHT_PAID_BY",txtFreightPaidBy.getText());
        
        //----- Update Approval Specific Fields -----------//
        ObjGPR.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjGPR.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjGPR.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjGPR.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjGPR.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjGPR.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjGPR.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjGPR.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjGPR.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjGPR.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjGPR.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjGPR.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        
        //======= Set Line part ============
        ObjGPR.colGPRItems.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsGPRItem ObjItem=new clsGPRItem();
            String lItemID=DataModel.getValueByVariable("ITEM_CODE", i);
            
            //Add Only Valid Items
            double Qty=0;
            
            if(EITLERPGLOBAL.IsNumber(DataModel.getValueByVariable("QTY", i))) {
                Qty=Double.parseDouble(DataModel.getValueByVariable("QTY", i));
            }
            
            if(Qty<=0) {
                JOptionPane.showMessageDialog(null,"Please enter the qty");
                return;
            }
            
            
            ObjItem.setAttribute("SR_NO",i);
            ObjItem.setAttribute("ITEM_CODE",lItemID);
            ObjItem.setAttribute("ITEM_EXTRA_DESC",DataModel.getValueByVariable("ITEM_EXTRA_DESC",i));
            ObjItem.setAttribute("QTY",EITLERPGLOBAL.round(Qty,3));
            
            if(EITLERPGLOBAL.IsNumber(DataModel.getValueByVariable("UNIT_ID", i))) {
                ObjItem.setAttribute("UNIT",Integer.parseInt(DataModel.getValueByVariable("UNIT_ID", i)));
            }
            else {
                ObjItem.setAttribute("UNIT",0);
            }
            ObjItem.setAttribute("PACKING",DataModel.getValueByVariable("PACKING", i));
            ObjItem.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS", i));
            ObjItem.setAttribute("DEC_ID",DataModel.getValueByVariable("DEC_ID", i));
            ObjItem.setAttribute("DEC_SR_NO",Integer.parseInt(DataModel.getValueByVariable("DEC_SR_NO", i)));
            
            
            //======= Insert Lot Nos. ======//
            HashMap lcolLot=new HashMap();
            
            if(DataModel.getUserObject(i) instanceof HashMap) {
                lcolLot=(HashMap)DataModel.getUserObject(i);
                
                for(int l=1;l<=lcolLot.size();l++) {
                    clsGPRLot ObjLot=new clsGPRLot();
                    
                    clsGPRLot ObjList=(clsGPRLot)lcolLot.get(Integer.toString(l));
                    
                    ObjLot.setAttribute("SR_NO",l);
                    ObjLot.setAttribute("ITEM_LOT_NO",(String)ObjList.getAttribute("ITEM_LOT_NO").getObj());
                    ObjLot.setAttribute("LOT_QTY",ObjList.getAttribute("LOT_QTY").getVal());
                    ObjItem.colLot.put(Integer.toString(ObjItem.colLot.size()+1),ObjLot);
                }
            }
            //======== Lot Insertion Completed =========//
            
            ObjGPR.colGPRItems.put(Integer.toString(ObjGPR.colGPRItems.size()+1), ObjItem);
        }
    }
    
    
    private void FormatGrid() {
        
        Updating=true; //Stops recursion
        
        try {
            
            cmdAdd.requestFocus();
            DataModel=new EITLTableModel();
            Table.removeAll();
            
            Table.setModel(DataModel);
            TableColumnModel ColModel=Table.getColumnModel();
            Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //Add Columns to it
            DataModel.addColumn("Sr."); //0 - Read Only
            DataModel.addColumn("Item Extra Description"); //1 //Read Only
            DataModel.addColumn("Qty"); //2
            DataModel.addColumn("c"); //3 Read Only - Hidden
            DataModel.addColumn("Unit"); //4 Read Only
            DataModel.addColumn("Packing"); //5
            DataModel.addColumn("Remarks"); //6
            DataModel.addColumn("Item Code"); //7
            DataModel.addColumn("Item Description"); //8 //Read Only
            DataModel.addColumn("Declaration Form No.");
            DataModel.addColumn("Declaration Sr. No.");
            
            
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(0);
            DataModel.SetReadOnly(4);
            DataModel.SetReadOnly(9);
            DataModel.SetReadOnly(10);
                        
            DataModel.SetVariable(0,"SR_NO");
            DataModel.SetVariable(1,"ITEM_EXTRA_DESC");
            DataModel.SetVariable(2,"QTY");
            DataModel.SetVariable(3, "UNIT_ID");
            DataModel.SetVariable(4,"UNIT_NAME");
            DataModel.SetVariable(5,"PACKING");
            DataModel.SetVariable(6,"REMARKS");
            DataModel.SetVariable(7,"ITEM_CODE");
            DataModel.SetVariable(8,"ITEM_NAME");
            DataModel.SetVariable(9,"DEC_ID");
            DataModel.SetVariable(10,"DEC_SR_NO");
            
            
            DataModel.SetNumeric(3, true);
            DataModel.SetNumeric(10, true);
            DataModel.SetReadOnly(7);
            DataModel.SetReadOnly(8);
            //Hide Unit Code column
            Table.getColumnModel().getColumn(3).setMinWidth(0);
            Table.getColumnModel().getColumn(3).setMaxWidth(0);
            Table.getColumnModel().getColumn(3).setWidth(0);
            
            
            //------- Install Table List Selection Listener ------//
            Table.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=Table.getSelectedColumn();
                    String strVar=DataModel.getVariable(last);
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue=(String)Table.getValueAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        
                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                    
                    
                    ShowMessage("Ready");
                }
            }
            );
            //===================================================//
            
            
            //----- Install Table Model Event Listener -------//
            Table.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        int col = e.getColumn();
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        
                        
                        if(col==DataModel.getColFromVariable("ITEM_CODE")){
                            try {
                                String lItemID=(String)Table.getValueAt(Table.getSelectedRow(),1);
                                String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                Table.setValueAt(lItemName, Table.getSelectedRow(), 2);
                                
//                                int lItemUnit=clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
//                                Table.setValueAt(Integer.toString(lItemUnit),Table.getSelectedRow(),5);
//                                String lUnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
//                                Table.setValueAt(lUnitName,Table.getSelectedRow(),6);
                            }
                            catch(Exception ex){}
                        }
                    }
                }
            });
        }
        catch(Exception e) {
            
        }
        Updating=false;
        //Table formatting completed
    }
    
    private void GenerateDeptCombo()
    {

        cmbForDeptModel=new EITLComboModel();
        cmbForDept.removeAllItems();
        cmbForDept.setModel(cmbForDeptModel);
        
        HashMap List=clsDepartment.getDeptList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID);

        
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_NAME").getObj();
            cmbForDeptModel.addElement(aData);
        }
        
    }
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=4 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=4 ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate Department Combo ------- //
        cmbForDeptModel=new EITLComboModel();
        cmbForDept.removeAllItems();
        cmbForDept.setModel(cmbForDeptModel);
        
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbForDeptModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //--- Generate Type Combo ------//
        cmbTypeModel=new EITLComboModel();
        cmbType.removeAllItems();
        cmbType.setModel(cmbTypeModel);
        
        ComboData aData=new ComboData();
        aData.strCode="N";
        aData.Text="Non Returnable";
        cmbTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="R";
        aData.Text="Returnable";
        cmbTypeModel.addElement(aData);
        //===============================//
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        clsUser ObjUser=new clsUser();
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        //----------------------------------------//
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 4,(String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,505)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }*/
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 4,(String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,4,FromUserID,(String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,501)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
   /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,502))
   {
      cmdEdit.setEnabled(true);
   }
   else
   {
       cmdEdit.setEnabled(false);
   }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,503)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,504)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=4;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 4, FFNo,  false));
            txtDocDate.requestFocus();
            
            lblTitle.setText("GATEPASS REQUISITION - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
            
            GenerateDeptCombo();
            GenerateUserCombo();
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj();
        if(ObjGPR.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(4,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,502)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            DisableToolbar();
            txtDocDate.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjGPR.getAttribute("GATEPASS_REQ_NO").getObj();
        
        if(ObjGPR.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(ObjGPR.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjGPR.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
    
    private void Save() {
        //Form level validations
        if(txtDocDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter document date");
            return;
        }
        
        if(cmbType.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the type of gatepass");
            return;
        }
        
        if(cmbForDept.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the department");
            return;
        }
        
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return;
        }
        
        //Check the no. of items
        if(Table.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter some items.");
            return;
        }
        
        if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid GPR Date");
            return;
        }
        
        if(!EITLERPGLOBAL.isDate(txtReturnDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Return Date");
            return;
        }
        
        if(txtPartyName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter party name");
            return;
        }
        
        if(txtDespatchMode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter despatch mode");
            return;
        }
        
        if(txtFreightPaidBy.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter freight paid by");
            return;
        }
        
        
        
        
        if(cmbType.getSelectedIndex()==0) {
            //Do not Validate Expected Return Date
        }
        else {
            if(txtReturnDate.getText().trim().equals("")||!EITLERPGLOBAL.isDate(txtReturnDate.getText())) {
                JOptionPane.showMessageDialog(null,"Please enter valid expected return date");
                return;
            }
        }
        
        
        if(txtPurpose.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter purpose");
            return;
        }
        
        //Check negative Qty.
        for(int i=0;i<=Table.getRowCount()-1;i++) {
            String strItemID=(String)Table.getValueAt(i,1);
            /*if(!clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID,strItemID)) {
                JOptionPane.showMessageDialog(null,"Invalid Item code. Please verify the input");
                return;
            }*/
            
            double theQty=Double.parseDouble((String)DataModel.getValueByVariable("QTY", i));
            
            if(theQty<=0) {
                JOptionPane.showMessageDialog(null,"Please enter qty.");
                return;
            }
            
            /*String thePacking=(String)Table.getValueAt(i,7);
            if(thePacking.trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter packing");
                return;
            }*/
            
            int UnitID=Integer.parseInt((String)DataModel.getValueByVariable("UNIT_ID",i));
            
            if(UnitID==0)
            {
              JOptionPane.showMessageDialog(null,"Please select the unit");
              return;
            }
            
            
        }
        
        java.sql.Date docDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        
        
        if(!txtReturnDate.getText().trim().equals("")) {
            java.sql.Date retDate=java.sql.Date.valueOf(EITLERPGLOBAL.formatDateDB(txtReturnDate.getText()));
            if(retDate.before(docDate)) {
                JOptionPane.showMessageDialog(null,"Expected return date must be greater than document date");
                return;
            }
        }
        
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return;
        }
        
        //        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
        //        {
        //          JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
        //          return false;
        //        }
        
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjGPR.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjGPR.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjGPR.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjGPR.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        
        
        try
        {
        frmPA.RefreshView();
        }catch(Exception e){}
                
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmGPRFind",true);
        frmGPRFind ObjReturn= (frmGPRFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjGPR.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjGPR.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjGPR.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjGPR.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjGPR.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjGPR.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND GATEPASS_REQ_NO='"+pDocNo+"'",pCompanyID);
        ObjGPR.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjGPR.Filter(" WHERE GATEPASS_REQ_NO IN(SELECT D_INV_GATEPASS_REQ_HEADER.GATEPASS_REQ_NO FROM D_INV_GATEPASS_REQ_HEADER,D_COM_DOC_DATA WHERE D_INV_GATEPASS_REQ_HEADER.GATEPASS_REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_GATEPASS_REQ_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_GATEPASS_REQ_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID=4)",EITLERPGLOBAL.gCompanyID);
        ObjGPR.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModel.SetReadOnly(i);
            }
        }
        //=======================================================//
        
        
    }
    
    
    private void PreviewReport() {
        
        if(chkCancelled.isSelected())
        {
         JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
         return;
        }
        
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGPR.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
    
    
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGatepassREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void GenerateUserCombo() {
        
        HashMap List=new HashMap();
        
        int SelDeptID=EITLERPGLOBAL.getComboCode(cmbForDept);
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        
        List=clsDepartment.getDeptUsersList(EITLERPGLOBAL.gCompanyID, SelDeptID);
        for(int i=1;i<=List.size();i++) {
            clsDeptUsers ObjUser=(clsDeptUsers)List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        
    }
    
    
    
}
