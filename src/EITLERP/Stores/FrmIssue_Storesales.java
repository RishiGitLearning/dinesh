/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
/*<APPLET CODE=FrmIssue_General.class HEIGHT=500 WIDTH=800*/

package EITLERP.Stores;

/**
 *
 * @author  nhpatel
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Finance.FinanceGlobal;
import EITLERP.Finance.UtilFunctions;
import EITLERP.Finance.clsVoucher;
import EITLERP.Finance.clsVoucherItem;
import EITLERP.Utils.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.sql.*;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;
import java.net.*;


public class FrmIssue_Storesales extends javax.swing.JApplet {
    
    private int EditMode=0;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    
    private clsIssueStoresales ObjIssue;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private String SelNo = ""; //Selected Prefix Number
    private int FFNo=0;
    
    private EITLComboModel cmbDeptModel;
    private EITLComboModel cmbIssueTypeModel;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLTableModel DataModelA;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    
    public frmPendingApprovals frmPA;
    
    private boolean DoNotEvaluate=false;
    
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        //setSize(910,565);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        FormatGrid();
        
        GenerateCombos();
        ObjIssue=new clsIssueStoresales();
        
        //SetupApproval();
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjIssue.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjIssue.MoveLast();
                DisplayData();
                ShowMessage("Ready ..........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjIssue.LastError);
            }
        }
        
        
        lblDept.setVisible(false);
        cmbDept.setVisible(false);
        
        SetFields(false);
        txtAuditRemarks.setVisible(false);
        lblTitle.setForeground(Color.WHITE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatus = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        txtIssueNo = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtIssueDate = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        cmbIssueType = new javax.swing.JComboBox();
        lblDept = new javax.swing.JLabel();
        chkCanceled = new javax.swing.JCheckBox();
        cmbDept = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext_Header = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdPurposeBig = new javax.swing.JButton();
        cmdRemarksBig = new javax.swing.JButton();
        cmdChange = new javax.swing.JButton();
        chkKeep = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtInvoiceNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtInvoiceDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtInvoiceAmt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTransporterName = new javax.swing.JTextField();
        lblGSTIN = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        cmdInsertMR = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        cmdNext_Detail = new javax.swing.JButton();
        cmdPrev_Detail = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmdReadBarcode = new javax.swing.JButton();
        cmdRead = new javax.swing.JButton();
        cmdShowRequisition = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemaksBig = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save Record");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel Record");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 850, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText(" ISSUE (Store Sales)");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 850, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.setLayout(null);

        jLabel37.setText("Issue No.");
        Tab1.add(jLabel37);
        jLabel37.setBounds(42, 30, 62, 20);

        txtIssueNo.setEnabled(false);
        txtIssueNo.setNextFocusableComponent(txtIssueDate);
        txtIssueNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIssueNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIssueNoFocusLost(evt);
            }
        });
        Tab1.add(txtIssueNo);
        txtIssueNo.setBounds(110, 30, 102, 30);

        jLabel38.setDisplayedMnemonic('d');
        jLabel38.setLabelFor(txtIssueDate);
        jLabel38.setText("Date");
        Tab1.add(jLabel38);
        jLabel38.setBounds(265, 30, 42, 20);

        txtIssueDate.setEditable(false);
        txtIssueDate.setEnabled(false);
        txtIssueDate.setName("ISSUE_DATE"); // NOI18N
        txtIssueDate.setNextFocusableComponent(cmbIssueType);
        txtIssueDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtIssueDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIssueDateFocusLost(evt);
            }
        });
        Tab1.add(txtIssueDate);
        txtIssueDate.setBounds(302, 30, 92, 19);

        jLabel39.setText("Issue Type");
        Tab1.add(jLabel39);
        jLabel39.setBounds(32, 97, 80, 20);

        cmbIssueType.setBackground(new java.awt.Color(204, 204, 255));
        cmbIssueType.setEnabled(false);
        cmbIssueType.setName("ISSUE_TYPE"); // NOI18N
        cmbIssueType.setNextFocusableComponent(cmbDept);
        cmbIssueType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbIssueTypeFocusGained(evt);
            }
        });
        cmbIssueType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbIssueTypeItemStateChanged(evt);
            }
        });
        Tab1.add(cmbIssueType);
        cmbIssueType.setBounds(110, 95, 230, 24);

        lblDept.setText("Department");
        Tab1.add(lblDept);
        lblDept.setBounds(30, 133, 74, 20);

        chkCanceled.setForeground(new java.awt.Color(255, 0, 0));
        chkCanceled.setMnemonic('c');
        chkCanceled.setText("Cancelled");
        chkCanceled.setEnabled(false);
        Tab1.add(chkCanceled);
        chkCanceled.setBounds(679, 32, 94, 23);

        cmbDept.setName("FOR_DEPT_ID"); // NOI18N
        cmbDept.setNextFocusableComponent(txtPurpose);
        cmbDept.setEnabled(false);
        cmbDept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbDeptFocusGained(evt);
            }
        });
        Tab1.add(cmbDept);
        cmbDept.setBounds(110, 131, 228, 24);

        jLabel44.setText("Purpose");
        Tab1.add(jLabel44);
        jLabel44.setBounds(50, 180, 58, 20);

        txtPurpose.setEnabled(false);
        txtPurpose.setName("PURPOSE"); // NOI18N
        txtPurpose.setNextFocusableComponent(txtRemarks);
        txtPurpose.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPurposeFocusGained(evt);
            }
        });
        Tab1.add(txtPurpose);
        txtPurpose.setBounds(110, 180, 570, 19);

        jLabel45.setText("Remarks");
        Tab1.add(jLabel45);
        jLabel45.setBounds(40, 220, 58, 20);

        txtRemarks.setEnabled(false);
        txtRemarks.setName("REMARKS"); // NOI18N
        txtRemarks.setNextFocusableComponent(cmdNext_Header);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(110, 210, 570, 19);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next ");
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(680, 380, 90, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(215, 31, 38, 15);

        cmdPurposeBig.setText("...");
        cmdPurposeBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPurposeBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdPurposeBig);
        cmdPurposeBig.setBounds(690, 180, 37, 20);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(690, 210, 37, 20);

        cmdChange.setText("Change");
        cmdChange.setEnabled(false);
        cmdChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdChangeActionPerformed(evt);
            }
        });
        Tab1.add(cmdChange);
        cmdChange.setBounds(125, 55, 88, 20);

        chkKeep.setText("Keep Doc No.");
        Tab1.add(chkKeep);
        chkKeep.setBounds(678, 3, 113, 23);

        jLabel1.setText("Party Code");
        Tab1.add(jLabel1);
        jLabel1.setBounds(30, 320, 90, 15);

        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtPartyCode);
        txtPartyCode.setBounds(110, 310, 130, 30);
        Tab1.add(lblPartyName);
        lblPartyName.setBounds(250, 310, 350, 30);

        jLabel3.setText("Invoice No");
        Tab1.add(jLabel3);
        jLabel3.setBounds(30, 350, 80, 15);
        Tab1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(110, 340, 130, 30);

        jLabel4.setText("Invoice Date");
        Tab1.add(jLabel4);
        jLabel4.setBounds(260, 350, 100, 15);
        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(350, 340, 150, 30);

        jLabel5.setText("Invoice Amt");
        Tab1.add(jLabel5);
        jLabel5.setBounds(30, 380, 90, 15);
        Tab1.add(txtInvoiceAmt);
        txtInvoiceAmt.setBounds(110, 370, 130, 30);

        jLabel6.setText("Transporter Name");
        Tab1.add(jLabel6);
        jLabel6.setBounds(30, 280, 130, 15);

        txtTransporterName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTransporterNameActionPerformed(evt);
            }
        });
        Tab1.add(txtTransporterName);
        txtTransporterName.setBounds(160, 267, 420, 30);
        Tab1.add(lblGSTIN);
        lblGSTIN.setBounds(620, 310, 150, 20);

        jTabbedPane1.addTab("Issue Header", Tab1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setText("Issue Items");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(10, 16, 70, 15);

        cmdInsertMR.setMnemonic('m');
        cmdInsertMR.setText("Issue Requisition");
        cmdInsertMR.setEnabled(false);
        cmdInsertMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertMRActionPerformed(evt);
            }
        });
        jPanel2.add(cmdInsertMR);
        cmdInsertMR.setBounds(428, 8, 170, 25);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableL.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                TableLComponentRemoved(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TableL);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 890, 222);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        jPanel2.add(cmdAdd);
        cmdAdd.setBounds(604, 8, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        jPanel2.add(cmdRemove);
        cmdRemove.setBounds(696, 8, 90, 25);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(jPanel4);
        jPanel4.setBounds(86, 24, 336, 6);

        cmdNext_Detail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdNext_Detail.setMnemonic('x');
        cmdNext_Detail.setText("Next ");
        cmdNext_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_DetailActionPerformed(evt);
            }
        });
        jPanel2.add(cmdNext_Detail);
        cmdNext_Detail.setBounds(696, 300, 90, 25);

        cmdPrev_Detail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdPrev_Detail.setMnemonic('o');
        cmdPrev_Detail.setText("Previous");
        cmdPrev_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrev_DetailActionPerformed(evt);
            }
        });
        jPanel2.add(cmdPrev_Detail);
        cmdPrev_Detail.setBounds(604, 300, 90, 25);

        jLabel2.setText("Press Ctrl+C to copy selected line.");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(12, 268, 214, 15);

        cmdReadBarcode.setText("Read Barcode");
        cmdReadBarcode.setEnabled(false);
        cmdReadBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReadBarcodeActionPerformed(evt);
            }
        });
        jPanel2.add(cmdReadBarcode);
        cmdReadBarcode.setBounds(122, 305, 127, 25);

        cmdRead.setText("Read Weighing F5");
        cmdRead.setEnabled(false);
        cmdRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReadActionPerformed(evt);
            }
        });
        jPanel2.add(cmdRead);
        cmdRead.setBounds(253, 305, 152, 25);

        cmdShowRequisition.setText("Show Requisition");
        cmdShowRequisition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRequisitionActionPerformed(evt);
            }
        });
        jPanel2.add(cmdShowRequisition);
        cmdShowRequisition.setBounds(408, 305, 150, 25);

        jTabbedPane1.addTab("Issue Detail", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(null);

        jLabel31.setText("Hierarchy ");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(26, 18, 66, 20);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(96, 18, 184, 24);

        jLabel32.setText("From");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(26, 48, 56, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(96, 48, 182, 20);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(96, 78, 518, 19);

        jLabel35.setText("Remarks");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(26, 78, 62, 20);

        jLabel36.setText("Your Action  ");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(7, 122, 90, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 167, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(96, 118, 182, 100);

        jLabel33.setText("Send To");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(26, 228, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(98, 228, 184, 24);

        jLabel34.setText("Remarks");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(26, 258, 60, 20);

        txtToRemarks.setNextFocusableComponent(cmdPrev);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(100, 258, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });
        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(692, 298, 90, 25);

        cmdFromRemaksBig.setText("...");
        cmdFromRemaksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemaksBigActionPerformed(evt);
            }
        });
        jPanel3.add(cmdFromRemaksBig);
        cmdFromRemaksBig.setBounds(619, 78, 37, 20);

        jTabbedPane1.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(11, 28, 660, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 178, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(13, 196, 507, 131);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(532, 227, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(532, 257, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });
        jPanel5.add(cmdPreviewA);
        cmdPreviewA.setBounds(532, 198, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(532, 286, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(534, 316, 129, 19);

        jTabbedPane1.addTab("Status", jPanel5);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 66, 920, 460);
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtIssueDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIssueDateFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtIssueDateFocusLost
    
    private void txtIssueNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIssueNoFocusLost
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(clsIssueStoresales.IsIssueExist(EITLERPGLOBAL.gCompanyID,txtIssueNo.getText())) {
                JOptionPane.showMessageDialog(null,"Issue no. already exist. Please specify other issue no.");
            }
        }
    }//GEN-LAST:event_txtIssueNoFocusLost
    
    private void cmdChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdChangeActionPerformed
        // TODO add your handling code here:
        txtIssueNo.setEnabled(false);
        txtIssueNo.setEditable(true);
    }//GEN-LAST:event_cmdChangeActionPerformed
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemaksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemaksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemaksBigActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPurposeBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPurposeBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtPurpose;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdPurposeBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdShowRequisitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRequisitionActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("REQ_NO", TableL.getSelectedRow());
            
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("Issue Requisition");
                aFrame.startAppletEx("EITLERP.Stores.frmIssueReq","Issue Requisition");
                frmIssueReq ObjDoc=(frmIssueReq) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                JOptionPane.showMessageDialog(null,"MR no. not specified");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdShowRequisitionActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjIssue.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtIssueNo.getText();
        ObjIssue.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void cmdReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReadActionPerformed
        // TODO add your handling code here:
        try {
            if(TableL.getRowCount()>0) {
                DataModelL.setValueByVariable("QTY",SimpleRead.getWeight("COM1"),TableL.getSelectedRow());
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdReadActionPerformed
    
    private void cmdReadBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReadBarcodeActionPerformed
        // TODO add your handling code here:
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        
        if(TableL.getRowCount()>0&&TableL.getSelectedRow()>=0) {
            EnterCode aList=new EnterCode();
            if(aList.ShowForm()) {
                /*String GRNNo=aList.ReturnVal.substring(0,10);
                GRNNo=GRNNo.trim();
                int GRNSrNo=Integer.parseInt(aList.ReturnVal.substring(11,13));
                 
                clsGRNGen tmpObj=new clsGRNGen();
                tmpObj.LoadData(EITLERPGLOBAL.gCompanyID);
                clsGRNGen ObjGRN=(clsGRNGen)tmpObj.getObject(EITLERPGLOBAL.gCompanyID,GRNNo,1);
                 
                clsGRNGenItem ObjItem=(clsGRNGenItem)ObjGRN.colGRNItems.get(Integer.toString(GRNSrNo));
                 
                String ItemID=(String)ObjItem.getAttribute("ITEM_ID").getObj();
                double Qty=ObjItem.getAttribute("QTY").getVal();
                 
                int NewRow=TableL.getSelectedRow();
                 
                String CurrentItemID=DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
                 
                if(!ItemID.trim().equals(CurrentItemID)) {
                    JOptionPane.showMessageDialog(null,"Item ID of GRN and Current doesnot match. Please verify that you are issuing right item");
                    return;
                }
                 
                DataModelL.setValueByVariable("GRN_NO",GRNNo,NewRow);
                DataModelL.setValueByVariable("GRN_SR_NO",Integer.toString(GRNSrNo),NewRow);
                DataModelL.setValueByVariable("GRN_TYPE","1",NewRow);*/
                
                String BarcodeString=aList.ReturnVal;
                
                String MIRNo="";
                int MIRSrNo=0;
                int MIRType=0;
                double MIRQty=0,Rate=0;
                String ItemID="";
                
                if(BarcodeString.length()<=15) //Old Type Barcode
                {
                    ItemID=BarcodeString.substring(0,8);
                    ItemID=ItemID.trim();
                    MIRNo=BarcodeString.substring(8);
                    MIRNo=MIRNo.trim();
                    
                    //Finding MIR Sr No. and Type
                    try {
                        double LandedRate=0;
                        tmpConn=data.getConn();
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            MIRSrNo=rsTmp.getInt("SR_NO");
                            MIRType=rsTmp.getInt("MIR_TYPE");
                            MIRQty=rsTmp.getDouble("QTY");
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        
                        //====== Fetching Landed Rate of GRN ======//
                        
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        else {
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE");
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                            }
                            
                        }
                        Rate=LandedRate;
                        //========================================//
                        
                        //tmpConn.close();
                        stTmp.close();
                        rsTmp.close();
                        
                    }
                    catch(Exception e) {
                        
                    }
                }
                
                if(BarcodeString.length()>=23) //New Type Barcode
                {
                    ItemID=BarcodeString.substring(0,10);
                    ItemID=ItemID.trim();
                    MIRNo=BarcodeString.substring(10,20);
                    MIRNo=MIRNo.trim();
                    MIRSrNo=Integer.parseInt(BarcodeString.substring(20,23));
                    
                    
                    //Finding MIR Sr No. and Type
                    try {
                        double LandedRate=0;
                        tmpConn=data.getConn();
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo+" ");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            MIRType=rsTmp.getInt("MIR_TYPE");
                            MIRQty=rsTmp.getDouble("QTY");
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        
                        //====== Fetching Landed Rate of GRN ======//
                        
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        else {
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE");
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                            }
                            
                        }
                        Rate=LandedRate;
                        //========================================//
                        
                    }
                    catch(Exception e) {
                        
                    }
                }
                
                int NewRow=TableL.getSelectedRow();
                
                String CurrentItemID=DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
                
                if(!ItemID.trim().equals(CurrentItemID)) {
                    JOptionPane.showMessageDialog(null,"Item ID of MIR and Current doesnot match. Please verify that you are issuing right item");
                    return;
                }
                
                DataModelL.setValueByVariable("MIR_NO",MIRNo,NewRow);
                DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo),NewRow);
                DataModelL.setValueByVariable("MIR_TYPE","1",NewRow);
                DataModelL.setValueByVariable("RATE",Double.toString(Rate),NewRow);
            }
        }
    }//GEN-LAST:event_cmdReadBarcodeActionPerformed
    
    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0 && cmdAdd.isEnabled()) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(TableL.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModelL.addRow(rowData);
                    int NewRow=TableL.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<TableL.getColumnCount();i++) {
                        TableL.setValueAt(TableL.getValueAt(TableL.getSelectedRow(),i), NewRow, i);
                    }
                    UpdateSrNo();
                }
            }
        }
    }//GEN-LAST:event_TableLKeyReleased
    
    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdPrevActionPerformed
    
    private void cmdPrev_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrev_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrev_DetailActionPerformed
    
    private void cmdNext_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext_DetailActionPerformed
    
    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Remarks name for approval process ..........");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Person name to whom is sent ..........");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy Name from given Hierarchy list ..........");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Remarks if ncessary ..........");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtPurposeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPurposeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter purpose name for which issue is generated ..........");
    }//GEN-LAST:event_txtPurposeFocusGained
    
    private void cmbDeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbDeptFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Department Name for which trasaction is generated ..........");
    }//GEN-LAST:event_cmbDeptFocusGained
    
    private void cmbIssueTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbIssueTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Issue type from given list for further process ..........");
    }//GEN-LAST:event_cmbIssueTypeFocusGained
    
    private void txtIssueDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIssueDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Issue Date in format of DD/MM/YYYY ..........");
    }//GEN-LAST:event_txtIssueDateFocusGained
    
    private void txtIssueNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIssueNoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIssueNoFocusGained
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdInsertMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertMRActionPerformed
        // TODO add your handling code here:
        SelectIssueReq_StoresSales ObjMR=new SelectIssueReq_StoresSales();
        ObjMR.IssueType=1;
        if(ObjMR.ShowList()) {
            
            if(ObjMR.CopyHeader) {
                EITLERPGLOBAL.setComboIndex(cmbDept,(int)ObjMR.ObjMR.getAttribute("DEST_DEPT_ID").getVal());
                txtPurpose.setText((String)ObjMR.ObjMR.getAttribute("PURPOSE").getObj());
            }
            
            //It will contain MIR Item Objects
            
            DoNotEvaluate=true;
            int chkItem = 0; //add on 28/08/2009
            double BalQty = 0; //add on 28/08/2009
            
            for(int i=1;i<=ObjMR.colSelItems.size();i++) {
                clsIssueReqItem ObjItem=(clsIssueReqItem) ObjMR.colSelItems.get(Integer.toString(i));
                ////add on 28/08/2009 start-------------
                for(int j=0;j<TableL.getRowCount();j++) {
                    String ReqNo = DataModelL.getValueByVariable("REQ_NO",j);
                    String ItemID = DataModelL.getValueByVariable("ITEM_CODE",j);
                    String ReqSrNo = DataModelL.getValueByVariable("REQ_SR_NO",j);
                    
                    if ((ObjItem.getAttribute("REQ_NO").getString().trim().equals(ReqNo)) && (ObjItem.getAttribute("ITEM_CODE").getString().trim().equals(ItemID)) && (ObjItem.getAttribute("SR_NO").getString().trim().equals(ReqSrNo))) {
                        JOptionPane.showMessageDialog(null,"Issue Requisition & Item Code alreadey added.");
                        return;
                    }
                    
                    if (ObjItem.getAttribute("ITEM_CODE").getString().trim().equals(ItemID)) {
                        chkItem = 1;
                        BalQty = Double.parseDouble(DataModelL.getValueByVariable("BAL_STOCK_QTY",j));
                    }
                }
                ////-finish -add on 28/08/2009
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                
                int NewRow=TableL.getRowCount()-1;
                
                DataModelL.setValueByVariable("SR_NO", Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_CODE").getObj(),NewRow);
                String lItemID = (String)ObjItem.getAttribute("ITEM_CODE").getObj();
                
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC",(String)ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(),NewRow);
                
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                
                String HSN=clsItem.getHSN(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("HSN",HSN,NewRow);
                
                DataModelL.setValueByVariable("COST_CENTER_ID", "6666",NewRow);
                String lCCName = clsCostCenter.getCostCenterName(EITLERPGLOBAL.gCompanyID, 6666);
                DataModelL.setValueByVariable("COST_CENTER_NAME", lCCName, NewRow);
                
//                DataModelL.setValueByVariable("DEPT_ID", "2", NewRow);
//                DataModelL.setValueByVariable("DEPT_NAME",clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, 2),NewRow);
                DataModelL.setValueByVariable("DEPT_ID", Integer.toString(clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID)), NewRow);
                DataModelL.setValueByVariable("DEPT_NAME",clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID)),NewRow);
                
                
                double Remaining_Qty = EITLERPGLOBAL.round(ObjItem.getAttribute("REQ_QTY").getVal(),3);
                
                DataModelL.setValueByVariable("QTY",Double.toString(EITLERPGLOBAL.round(Remaining_Qty,3)),NewRow);
                //DataModelL.setValueByVariable("QTY_REQD",Double.toString(ObjItem.getAttribute("REQ_QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("QTY_REQD",Double.toString(EITLERPGLOBAL.round(ObjItem.getAttribute("REQ_QTY").getDouble(),3)),NewRow);
                DataModelL.setValueByVariable("UNIT",Integer.toString((int)ObjItem.getAttribute("UNIT").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("REQ_NO",(String)ObjItem.getAttribute("REQ_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("REQ_SRNO", Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
                
                String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                DataModelL.setValueByVariable("WAREHOUSE_ID", lWareHouseID,NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",lLocationID,NewRow);
                String lWarehouseName=clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, lWareHouseID);
                DataModelL.setValueByVariable("WAREHOUSE_NAME",lWarehouseName,NewRow);
                String lLocationName=clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, lLocationID);
                DataModelL.setValueByVariable("LOCATION_NAME",lLocationName,NewRow);
                
                if (chkItem==1) { //condition add on 28/08/2009
                    DataModelL.setValueByVariable("STOCK_QTY",Double.toString(BalQty),NewRow);
                    DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(BalQty-Remaining_Qty),NewRow);
                }
                else {
                    clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID,lItemID,EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()));
                    double StockQty=objStock.StockQty;
                    clsItemStock objItemStock = new clsItemStock();//add on 28/08/2009
                    double unapprovedStock = objItemStock.getOnHandQtyOn_Hold(EITLERPGLOBAL.gCompanyID,lItemID,txtIssueNo.getText().trim());//add on 28/08/2009
                    StockQty = StockQty - unapprovedStock;//add on 28/08/2009]
                    DataModelL.setValueByVariable("STOCK_QTY",Double.toString(StockQty),NewRow);
                    DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(StockQty-Remaining_Qty),NewRow);
                }
            }
            
            DoNotEvaluate=false;
            
            UpdateSrNo();
        }
        
    }//GEN-LAST:event_cmdInsertMRActionPerformed
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        
        if(EditMode!=0) {
            
            
            
            //=========== Cost Center List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("COST_CENTER_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    if(EITLERPGLOBAL.gCompanyID==2) {
                        aList.SQL="SELECT COST_CENTER_ID,COST_CENTER_NAME FROM D_COM_COST_CENTER WHERE COMPANY_ID  = "+EITLERPGLOBAL.gCompanyID+"  AND COST_CENTER_ID NOT IN(1020,1070,1258,2040,2050,2060) ORDER BY COST_CENTER_ID";
                        aList.dbURL="SELECT DATABASE_URL FROM D_COM_FIN_YEAR WHERE COMPANY_ID = "+EITLERPGLOBAL.gCompanyID+" ORDER BY SR_NO DESC LIMIT 1 ";
                    }
                    else if(EITLERPGLOBAL.gCompanyID==3) {
                        aList.SQL="SELECT COST_CENTER_ID,COST_CENTER_NAME FROM D_COM_COST_CENTER WHERE COMPANY_ID  = "+EITLERPGLOBAL.gCompanyID+"  AND COST_CENTER_ID NOT IN(4181,4201,4202,5202,6171,6202) ORDER BY COST_CENTER_ID";
                        aList.dbURL="SELECT DATABASE_URL FROM D_COM_FIN_YEAR WHERE COMPANY_ID = "+EITLERPGLOBAL.gCompanyID+" ORDER BY SR_NO DESC LIMIT 1 ";
                    }
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("COST_CENTER_ID"));
                    }
                }
            }
            //=========================================
            
            
            
            //=========== Department List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("DEPT_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT DEPT_ID,DEPT_DESC FROM D_COM_DEPT_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY DEPT_DESC";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("DEPT_ID"));
                    }
                }
            }
            //=========================================
            
            //=========== Department List ===============
            /*if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("COST_CENTER_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    int DeptID=Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID",TableL.getSelectedRow()));
                    aList.SQL="SELECT COST_CENTER_ID,COST_CENTER_NAME FROM D_COM_COST_CENTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND COST_CENTER_TYPE=1 ORDER BY DEPT_ID, COST_CENTER_ID";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
             
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
             
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("COST_CENTER_ID"));
                    }
                }
            }*/
            //=========================================
            
            
            if(evt.getKeyCode()==116) //F5 Key pressed
            {
                try {
                    if(TableL.getRowCount()>0) {
                        DataModelL.setValueByVariable("QTY",SimpleRead.getWeight("COM1"),TableL.getSelectedRow());
                    }
                }
                catch(Exception e) {
                    
                }
            }
            
            //=========== BOE List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("BOE_NO")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    String ItemID=DataModelL.getValueByVariable("ITEM_CODE",TableL.getSelectedRow());
                    
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT BOE_NO,DATE_FORMAT(BOE_DATE,'%d-%m-%Y') AS BOE_DATE FROM D_INV_ITEM_MASTER,D_INV_ITEM_LOT_MASTER  WHERE D_INV_ITEM_MASTER.COMPANY_ID=D_INV_ITEM_LOT_MASTER.COMPANY_ID AND D_INV_ITEM_MASTER.ITEM_ID=D_INV_ITEM_LOT_MASTER.ITEM_ID AND D_INV_ITEM_MASTER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_INV_ITEM_MASTER.APPROVED=1 AND D_INV_ITEM_MASTER.ITEM_ID='"+ItemID+"' ORDER BY BOE_DATE";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=1;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_NO"));
                        
                        String BOESrNo=clsItem.getBOESrNo(EITLERPGLOBAL.gCompanyID, ItemID, aList.ReturnVal);
                        String BOEDate=EITLERPGLOBAL.formatDate(clsItem.getBOEDate(EITLERPGLOBAL.gCompanyID, ItemID, aList.ReturnVal));
                        
                        TableL.setValueAt(BOESrNo,TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_SR_NO"));
                        TableL.setValueAt(BOEDate,TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_DATE"));
                    }
                }
            }
            //=========================================
            
            
            //=========== Item List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("ITEM_CODE")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_CODE"));
                    }
                }
            }
            //=========================================
            
            
            //=========== Item List ===============
            if(evt.getKeyCode()==114) //F3 Key pressed
            {
                EnterCode aList=new EnterCode();
                if(aList.ShowForm()) {
                    
                    String BarcodeString=aList.ReturnVal;
                    
                    String MIRNo="";
                    int MIRSrNo=0;
                    int MIRType=0;
                    double MIRQty=0,Rate=0;
                    String ItemID="";
                    
                    if(BarcodeString.length()<=15) //Old Type Barcode
                    {
                        ItemID=BarcodeString.substring(0,8);
                        ItemID=ItemID.trim();
                        MIRNo=BarcodeString.substring(8);
                        MIRNo=MIRNo.trim();
                        
                        //Finding MIR Sr No. and Type
                        try {
                            tmpConn=data.getConn();
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                MIRSrNo=rsTmp.getInt("SR_NO");
                                MIRType=rsTmp.getInt("MIR_TYPE");
                                MIRQty=rsTmp.getDouble("QTY");
                            }
                            
                            //====== Fetching Landed Rate of GRN ======//
                            double LandedRate=0;
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                            }
                            Rate=LandedRate;
                            //========================================//
                            
                            //tmpConn.close();
                            stTmp.close();
                            rsTmp.close();
                            
                            
                        }
                        catch(Exception e) {
                            
                        }
                    }
                    
                    if(BarcodeString.length()>=23) //New Type Barcode
                    {
                        ItemID=BarcodeString.substring(0,10);
                        ItemID=ItemID.trim();
                        MIRNo=BarcodeString.substring(10,20);
                        MIRNo=MIRNo.trim();
                        MIRSrNo=Integer.parseInt(BarcodeString.substring(20,23));
                        
                        
                        //Finding MIR Sr No. and Type
                        try {
                            tmpConn=data.getConn();
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo+" ");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                MIRType=rsTmp.getInt("MIR_TYPE");
                                MIRQty=rsTmp.getDouble("QTY");
                            }
                            
                            //====== Fetching Landed Rate of GRN ======//
                            double LandedRate=0;
                            stTmp=tmpConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                            rsTmp.first();
                            if(rsTmp.getRow()>0) {
                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                            }
                            Rate=LandedRate;
                            //========================================//
                            
                            //tmpConn.close();
                            stTmp.close();
                            rsTmp.close();
                            
                        }
                        catch(Exception e) {
                            
                        }
                    }
                    
                    int NewRow=TableL.getSelectedRow();
                    
                    String CurrentItemID=DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
                    
                    if(!ItemID.trim().equals(CurrentItemID)) {
                        JOptionPane.showMessageDialog(null,"Item ID of MIR and Current doesnot match. Please verify that you are issuing right item");
                        return;
                    }
                    
                    DataModelL.setValueByVariable("MIR_NO",MIRNo,NewRow);
                    DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo),NewRow);
                    DataModelL.setValueByVariable("MIR_TYPE","1",NewRow);
                    DataModelL.setValueByVariable("RATE",Double.toString(Rate),NewRow);
                }
                
            }
            //=========================================
            
            //            if(evt.getKeyCode()==155)//Insert Key Pressed
            //            {
            //                Object[] rowData=new Object[1];
            //                DataModelL.addRow(rowData);
            //                DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
            //                TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            //                UpdateSrNo();
            //            }
            
        }
    }//GEN-LAST:event_TableLKeyPressed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Connection tmpConn;
        Statement stTmp;
        ResultSet rsTmp;
        String MIRNo="";
        
        EnterCode aList=new EnterCode();
        if(aList.ShowForm()) {
            String BarcodeString=aList.ReturnVal;
            
            int MIRSrNo=0;
            int MIRType=0;
            double MIRQty=0,Rate=0;
            String ItemID="";
            
            if(BarcodeString.length()<=15) //Old Type Barcode
            {
                ItemID=BarcodeString.substring(0,8);
                ItemID=ItemID.trim();
                MIRNo=BarcodeString.substring(8);
                MIRNo=MIRNo.trim();
                
                double LandedRate=0;
                
                //Finding MIR Sr No. and Type
                try {
                    tmpConn=data.getConn();
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        MIRSrNo=rsTmp.getInt("SR_NO");
                        MIRType=rsTmp.getInt("MIR_TYPE");
                        MIRQty=rsTmp.getDouble("QTY")-rsTmp.getDouble("ISSUED_QTY");
                        LandedRate=rsTmp.getDouble("LANDED_RATE");
                    }
                    
                    //====== Fetching Landed Rate of GRN ======//
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        LandedRate=rsTmp.getDouble("LANDED_RATE");
                    }
                    else {
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                    }
                    Rate=LandedRate;
                    //========================================//
                    
                    //tmpConn.close();
                    stTmp.close();
                    rsTmp.close();
                }
                catch(Exception e) {
                    
                }
            }
            
            if(BarcodeString.length()>=23) //New Type Barcode
            {
                ItemID=BarcodeString.substring(0,10);
                ItemID=ItemID.trim();
                MIRNo=BarcodeString.substring(10,20);
                MIRNo=MIRNo.trim();
                MIRSrNo=Integer.parseInt(BarcodeString.substring(20,23));
                
                
                //Finding MIR Sr No. and Type
                try {
                    double LandedRate=0;
                    
                    tmpConn=data.getConn();
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo+" ");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        MIRType=rsTmp.getInt("MIR_TYPE");
                        MIRQty=rsTmp.getDouble("QTY")-rsTmp.getDouble("ISSUED_QTY");
                        LandedRate=rsTmp.getDouble("LANDED_RATE");
                    }
                    
                    
                    //====== Fetching Landed Rate of GRN ======//
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        LandedRate=rsTmp.getDouble("LANDED_RATE");
                    }
                    else {
                        stTmp=tmpConn.createStatement();
                        rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            LandedRate=rsTmp.getDouble("LANDED_RATE");
                        }
                        
                    }
                    Rate=LandedRate;
                    //========================================//
                    
                    //tmpConn.close();
                    stTmp.close();
                    rsTmp.close();
                    
                }
                catch(Exception e) {
                    
                }
            }
            
            Object[] rowData=new Object[1];
            DataModelL.addRow(rowData);
            TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            
            int NewRow=TableL.getRowCount()-1;
            
            DataModelL.setValueByVariable("MIR_NO",MIRNo,NewRow);
            DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo),NewRow);
            DataModelL.setValueByVariable("MIR_TYPE","1",NewRow);
            DataModelL.setValueByVariable("ITEM_CODE",ItemID,NewRow);
            DataModelL.setValueByVariable("QTY",Double.toString(MIRQty),NewRow);
            DataModelL.setValueByVariable("RATE",Double.toString(Rate),NewRow);
            
            
            
            UpdateSrNo();
        }
        else {
            Object[] rowData=new Object[1];
            DataModelL.addRow(rowData);
            TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            UpdateSrNo();
        }
        
            /*Object[] rowData=new Object[1];
            DataModelL.addRow(rowData);
            TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            UpdateSrNo();*/
        
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableL.getRowCount()>0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjIssue.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmbIssueTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbIssueTypeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbIssueTypeItemStateChanged
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void txtTransporterNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTransporterNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTransporterNameActionPerformed

    private void TableLComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_TableLComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_TableLComponentRemoved

    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
                                    
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) //F1 Key pressed
        {
            LOV aList = new LOV();

            //aList.SQL="SELECT PARTY_CODE,NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER ORDER BY NAME";
            aList.SQL = "SELECT DISTINCT PARTY_CODE,PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE MAIN_ACCOUNT_CODE='210034'";

            aList.ReturnCol = 1;
            aList.ShowReturnCol = true;
            aList.DefaultSearchOn = 1;            
            

            if (aList.ShowLOV()) {
                
                String gstinNo=data.getStringValueFromDB("SELECT GSTIN_NO FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+aList.ReturnVal+"'");
                String partyName=data.getStringValueFromDB("SELECT PARTY_NAME FROM DINESHMILLS.D_SAL_PARTY_MASTER WHERE PARTY_CODE='"+aList.ReturnVal+"'");
                if(gstinNo.equals("") || gstinNo==null){
                 JOptionPane.showMessageDialog(null, "GSTIN No of selected Party does not exits. Kindly add first.");
                 txtPartyCode.setText("");
                 lblPartyName.setText("");
                 lblGSTIN.setText("");
                 return ;   
                }else{                
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(partyName);
                //lblPartyName.setText(clsSales_Party.getPartyName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                lblGSTIN.setText(gstinNo);
                }
            }
        }
    
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCanceled;
    private javax.swing.JCheckBox chkKeep;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbIssueType;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdChange;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemaksBig;
    private javax.swing.JButton cmdInsertMR;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Detail;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPrev_Detail;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdPurposeBig;
    private javax.swing.JButton cmdRead;
    private javax.swing.JButton cmdReadBarcode;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdShowRequisition;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDept;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblGSTIN;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceAmt;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtIssueDate;
    private javax.swing.JTextField txtIssueNo;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtTransporterName;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjIssue.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjIssue.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjIssue.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=800;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try {
            ClearFields();
            txtIssueNo.setText((String)ObjIssue.getAttribute("ISSUE_NO").getObj());
            lblTitle.setText(" ISSUE (Store Sales) - "+txtIssueNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjIssue.getAttribute("REVISION_NO").getVal()));
            txtIssueDate.setText(EITLERPGLOBAL.formatDate((String)ObjIssue.getAttribute("ISSUE_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbIssueType,(String)ObjIssue.getAttribute("ISSUE_TYPE").getObj());
            EITLERPGLOBAL.setComboIndex(cmbDept,(int)ObjIssue.getAttribute("FOR_DEPT_ID").getVal());
            txtRemarks.setText((String)ObjIssue.getAttribute("REMARKS").getObj());
            txtPurpose.setText((String) ObjIssue.getAttribute("PURPOSE").getObj());
            
            txtPartyCode.setText((String) ObjIssue.getAttribute("PARTY_CODE").getObj());
            txtTransporterName.setText((String) ObjIssue.getAttribute("TRANSPORTER_NAME").getObj());
            txtInvoiceNo.setText((String) ObjIssue.getAttribute("INVOICE_NO").getObj());
            txtInvoiceDate.setText((String) ObjIssue.getAttribute("INVOICE_DATE").getObj());
            txtInvoiceAmt.setText((String) ObjIssue.getAttribute("INVOICE_VALUE").getObj());
                    
            
            
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjIssue.getAttribute("HIERARCHY_ID").getVal());
            
            if((boolean) ObjIssue.getAttribute("CANCELED").getBool()) {
                chkCanceled.setSelected(true);
            }else  chkCanceled.setSelected(false);
            //========= Display Line Items =============//
            
            FormatGrid();
            
            DoNotEvaluate=true;
            
            for(int i=1;i<=ObjIssue.colLineItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                int NewRow=TableL.getRowCount()-1;
                
                clsIssueGenItem ObjItem=(clsIssueGenItem)ObjIssue.colLineItems.get(Integer.toString(i));
                
                DataModelL.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_CODE").getObj(),NewRow);
                DataModelL.setValueByVariable("HSN",(String)ObjItem.getAttribute("HSN").getObj(),NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC",(String)ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(),NewRow);
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                String WarehouseName = clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("WAREHOUSE_ID").getObj());
                DataModelL.setValueByVariable("WAREHOUSE_NAME",WarehouseName,NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID",(String)ObjItem.getAttribute("WAREHOUSE_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",(String)ObjItem.getAttribute("LOCATION_ID").getObj(),NewRow);
                String LocationName = clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("LOCATION_ID").getObj());
                DataModelL.setValueByVariable("LOCATION_NAME",LocationName,NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("SALES_QTY",Double.toString(ObjItem.getAttribute("SALES_QTY").getVal()),NewRow);
                
                DataModelL.setValueByVariable("BOE_NO",(String)ObjItem.getAttribute("BOE_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("BOE_SR_NO",(String)ObjItem.getAttribute("BOE_SR_NO").getObj(),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("SHADE",(String)ObjItem.getAttribute("SHADE").getObj(),NewRow);
                DataModelL.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                DataModelL.setValueByVariable("REQ_NO",(String) ObjItem.getAttribute("REQ_NO").getObj(),NewRow);
                if (ObjItem.getAttribute("REQ_SRNO").getVal() > 0) {
                    DataModelL.setValueByVariable("REQ_SRNO",Double.toString(ObjItem.getAttribute("REQ_SRNO").getVal()),NewRow);
                }
                else {
                    DataModelL.setValueByVariable("REQ_SRNO","0",NewRow);
                }
                
                DataModelL.setValueByVariable("QTY_REQD",Double.toString(ObjItem.getAttribute("QTY_REQD").getVal()),NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID",(String)ObjItem.getAttribute("WAREHOUSE_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",(String)ObjItem.getAttribute("LOCATION_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("UNIT",Integer.toString((int) ObjItem.getAttribute("UNIT").getVal()),NewRow);
                
                DataModelL.setValueByVariable("COST_CENTER_ID",Integer.toString((int) ObjItem.getAttribute("COST_CENTER_ID").getVal()),NewRow);
                DataModelL.setValueByVariable("COST_CENTER_NAME",clsCostCenter.getCostCenterName(EITLERPGLOBAL.gCompanyID,(int) ObjItem.getAttribute("COST_CENTER_ID").getVal()),NewRow);
                
                DataModelL.setValueByVariable("GRN_NO",(String)ObjItem.getAttribute("GRN_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("GRN_SR_NO",Integer.toString((int)ObjItem.getAttribute("GRN_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("GRN_TYPE",Integer.toString((int)ObjItem.getAttribute("GRN_TYPE").getVal()),NewRow);
                DataModelL.setValueByVariable("MIR_NO",(String)ObjItem.getAttribute("MIR_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString((int)ObjItem.getAttribute("MIR_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("MIR_TYPE",Integer.toString((int)ObjItem.getAttribute("MIR_TYPE").getVal()),NewRow);
                DataModelL.setValueByVariable("BOE_NO",(String)ObjItem.getAttribute("BOE_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("BOE_SR_NO",(String)ObjItem.getAttribute("BOE_SR_NO").getObj(),NewRow);
                String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("DEPT_ID").getVal());
                DataModelL.setValueByVariable("DEPT_NAME",DeptName,NewRow);
                int DeptCol=DataModelL.getColFromVariable("DEPT_ID");
                int DeptID=(int)ObjItem.getAttribute("DEPT_ID").getVal();
                TableL.setValueAt(Integer.toString(DeptID), NewRow, DeptCol);
                System.out.println(ObjItem.getAttribute("RATE").getVal());
                DataModelL.setValueByVariable("RATE",Double.toString(ObjItem.getAttribute("RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("ISSUE_VALUE",Double.toString(ObjItem.getAttribute("ISSUE_VALUE").getVal()),NewRow);
                DataModelL.setValueByVariable("ZERO_VAL_QTY",Double.toString(ObjItem.getAttribute("ZERO_VAL_QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("STOCK_QTY",Double.toString(ObjItem.getAttribute("STOCK_QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(ObjItem.getAttribute("STOCK_QTY").getVal()-ObjItem.getAttribute("QTY").getVal()),NewRow);
                
                DataModelL.setValueByVariable("SALES_RATE",Double.toString(ObjItem.getAttribute("SALES_RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("SALES_VALUE",Double.toString(ObjItem.getAttribute("SALES_VALUE").getVal()),NewRow);
                DataModelL.setValueByVariable("DISCOUNT",Double.toString(ObjItem.getAttribute("DISCOUNT").getVal()),NewRow);
                DataModelL.setValueByVariable("TAXABLE_VALUE",Double.toString(ObjItem.getAttribute("TAXABLE_VALUE").getVal()),NewRow);
                DataModelL.setValueByVariable("CGST_RATE",Double.toString(ObjItem.getAttribute("CGST_RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("CGST_AMT",Double.toString(ObjItem.getAttribute("CGST_AMT").getVal()),NewRow);
                DataModelL.setValueByVariable("SGST_RATE",Double.toString(ObjItem.getAttribute("SGST_RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("SGST_AMT",Double.toString(ObjItem.getAttribute("SGST_AMT").getVal()),NewRow);
                DataModelL.setValueByVariable("IGST_RATE",Double.toString(ObjItem.getAttribute("IGST_RATE").getVal()),NewRow);
                DataModelL.setValueByVariable("IGST_AMT",Double.toString(ObjItem.getAttribute("IGST_AMT").getVal()),NewRow);
                DataModelL.setValueByVariable("TOTAL",Double.toString(ObjItem.getAttribute("TOTAL").getVal()),NewRow);
                DataModelL.setValueByVariable("DIFFERENCE_VALUE", Double.toString(ObjItem.getAttribute("DIFFERENCE_VALUE").getVal()), NewRow);
                DataModelL.setValueByVariable("ADJUSTMENT_QTY", Double.toString(ObjItem.getAttribute("ADJUSTMENT_QTY").getVal()), NewRow);
                //====Dynamic Stock Display ====//
                int Approved=ObjIssue.getAttribute("APPROVED").getInt();
                int Cancelled=ObjIssue.getAttribute("CANCELED").getInt();
                
                if(Cancelled==0) {
                    String ItemID=(String)ObjItem.getAttribute("ITEM_CODE").getObj();
                    String IssueDate=(String)ObjIssue.getAttribute("ISSUE_DATE").getObj();
                    String BOENo=(String)ObjItem.getAttribute("BOE_NO").getObj();
                    
                    
                    clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID,ItemID,IssueDate);
                    double OnHandStock=objStock.StockQty;
                    clsItemStock objItemStock = new clsItemStock();//add on 28/08/2009
                    double unapprovedStock = objItemStock.getOnHandQtyOn_Hold(EITLERPGLOBAL.gCompanyID,ItemID,txtIssueNo.getText().trim());//add on 28/08/2009
                    OnHandStock = OnHandStock - unapprovedStock;//add on 28/08/2009
                    objStock.StockQty = objStock.StockQty - unapprovedStock;//add on 28/08/2009
                    double IssueQty=ObjItem.getAttribute("QTY").getVal();
                    double BalQty=OnHandStock-IssueQty;
                    
                    if(Approved==1) {
                        OnHandStock+=IssueQty;
                        BalQty=OnHandStock-IssueQty;
                    }
                    
                    DataModelL.setValueByVariable("STOCK_QTY",Double.toString(OnHandStock),NewRow);
                    DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(BalQty),NewRow);
                    
                    
                    if(Approved==0) {
                        double IssueRate=EITLERPGLOBAL.round(objStock.StockValue/objStock.StockQty,2);
                        double IssueValue=EITLERPGLOBAL.round(ObjItem.getAttribute("QTY").getVal()*IssueRate,2);
                        DataModelL.setValueByVariable("RATE",Double.toString(IssueRate),NewRow);
                        DataModelL.setValueByVariable("ISSUE_VALUE",Double.toString(IssueValue),NewRow);
                    }
                }
                
                
            }
            
            UpdateSrNo();
            
            DoNotEvaluate=false;
            
            if(EditMode==0) {
                DataModelL.TableReadOnly(true);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjIssue.getAttribute("ISSUE_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 800, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsIssueStoresales.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsIssueStoresales ObjHistory=(clsIssueStoresales)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            
            //============================================================//
            
            UpdateInvoiceAmount();
        }
        catch(Exception e){
            //JOptionPane.showMessageDialog(null,e.getMessage());
            e.printStackTrace();
        }
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjIssue.UserDocNo=txtIssueNo.isEnabled();
            ObjIssue.setAttribute("ISSUE_NO",txtIssueNo.getText());
        }
        else {
            ObjIssue.UserDocNo=false;
        }
        
        ObjIssue.setAttribute("PREFIX",SelPrefix);
        ObjIssue.setAttribute("SUFFIX",SelSuffix);
        ObjIssue.setAttribute("FFNO",FFNo);
        ObjIssue.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjIssue.setAttribute("ISSUE_NO",txtIssueNo.getText());
        ObjIssue.setAttribute("ISSUE_DATE",EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()));
        ObjIssue.setAttribute("REMARKS",txtRemarks.getText());
        ObjIssue.setAttribute("FOR_STORE","G");
        ObjIssue.setAttribute("ISSUE_TYPE",EITLERPGLOBAL.getCombostrCode(cmbIssueType));
        ObjIssue.setAttribute("FOR_DEPT_ID",EITLERPGLOBAL.getComboCode(cmbDept));
        ObjIssue.setAttribute("PURPOSE",txtPurpose.getText());
        
        ObjIssue.setAttribute("PARTY_CODE",txtPartyCode.getText());
        ObjIssue.setAttribute("TRANSPORTER_NAME",txtTransporterName.getText());
        ObjIssue.setAttribute("INVOICE_NO",txtInvoiceNo.getText());
        ObjIssue.setAttribute("INVOICE_DATE",txtInvoiceDate.getText());
        ObjIssue.setAttribute("INVOICE_VALUE",txtInvoiceAmt.getText());
        ObjIssue.setAttribute("INVOICE_VALUE_IN_WORDS","");
        
        
        
        
        if(chkCanceled.isSelected()) {
            ObjIssue.setAttribute("CANCELED",true);
        }else
            ObjIssue.setAttribute("CANCELED",false);
        
        //----- Update Approval Specific Fields -----------//
        ObjIssue.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjIssue.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjIssue.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjIssue.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjIssue.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjIssue.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjIssue.setAttribute("APPROVAL_STATUS","R");
            ObjIssue.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjIssue.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjIssue.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjIssue.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjIssue.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjIssue.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        ObjIssue.colLineItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsIssueGenItem ObjIssueItem=new clsIssueGenItem();
            
            ObjIssueItem.setAttribute("SR_NO",(String) TableL.getValueAt(i,0));
            ObjIssueItem.setAttribute("ITEM_CODE",DataModelL.getValueByVariable("ITEM_CODE",i));
            ObjIssueItem.setAttribute("ITEM_EXTRA_DESC",DataModelL.getValueByVariable("ITEM_EXTRA_DESC",i));
            ObjIssueItem.setAttribute("WAREHOUSE_ID",DataModelL.getValueByVariable("WAREHOUSE_ID",i));
            ObjIssueItem.setAttribute("LOCATION_ID",DataModelL.getValueByVariable("LOCATION_ID",i));
            ObjIssueItem.setAttribute("QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY",i)),3));
            ObjIssueItem.setAttribute("SALES_QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("SALES_QTY",i)),3));
            
            ObjIssueItem.setAttribute("UNIT",(int) Integer.parseInt(DataModelL.getValueByVariable("UNIT",i)));
            ObjIssueItem.setAttribute("COST_CENTER_ID",(int) Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID",i)));
            ObjIssueItem.setAttribute("REMARKS",DataModelL.getValueByVariable("REMARKS",i));
            ObjIssueItem.setAttribute("REQ_NO",DataModelL.getValueByVariable("REQ_NO",i));
            ObjIssueItem.setAttribute("REQ_SRNO",(double) Double.parseDouble(DataModelL.getValueByVariable("REQ_SRNO",i)));
            ObjIssueItem.setAttribute("QTY_REQD",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY_REQD",i)),3));
            int c=DataModelL.getColFromVariable("BOE_NO");
            ObjIssueItem.setAttribute("BOE_NO",(String)TableL.getValueAt(i,c));
            ObjIssueItem.setAttribute("BOE_SR_NO",DataModelL.getValueByVariable("BOE_SR_NO",i));
            ObjIssueItem.setAttribute("SHADE",DataModelL.getValueByVariable("SHADE",i));
            ObjIssueItem.setAttribute("DEPT_ID",(int) Integer.parseInt((String) TableL.getValueAt(i,DataModelL.getColFromVariable("DEPT_ID"))));
            ObjIssueItem.setAttribute("GRN_NO",DataModelL.getValueByVariable("GRN_NO",i));
//            ObjIssueItem.setAttribute("GRN_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("GRN_SR_NO",i)));
            ObjIssueItem.setAttribute("GRN_TYPE",Integer.parseInt(DataModelL.getValueByVariable("GRN_TYPE",i)));
            ObjIssueItem.setAttribute("MIR_NO",DataModelL.getValueByVariable("MIR_NO",i));
            ObjIssueItem.setAttribute("MIR_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("MIR_SR_NO",i)));
            ObjIssueItem.setAttribute("MIR_TYPE",Integer.parseInt(DataModelL.getValueByVariable("MIR_TYPE",i)));
            System.out.println(Double.parseDouble(DataModelL.getValueByVariable("RATE",i)));
            ObjIssueItem.setAttribute("RATE",Double.parseDouble(DataModelL.getValueByVariable("RATE",i)));
            ObjIssueItem.setAttribute("ISSUE_VALUE",Double.parseDouble(DataModelL.getValueByVariable("ISSUE_VALUE",i)));
            ObjIssueItem.setAttribute("STOCK_QTY",Double.parseDouble(DataModelL.getValueByVariable("STOCK_QTY",i)));
            
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjIssueItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
                ObjIssueItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                ObjIssueItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
                ObjIssueItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
           /* 
            double ItemRate = 0;
            double TotalRate = 0;
            double ItemValue = 0;
            double TotalValue = 0;
            //======= Insert Lot Nos. ======//
            HashMap lcolLot = (HashMap) DataModelL.getUserObject(i);
            for (int l = 1; l <= lcolLot.size(); l++) {
                clsIssueLot ObjLot = new clsIssueLot();
                clsIssueLot ObjList = (clsIssueLot) lcolLot.get(Integer.toString(l));
                ObjLot.setAttribute("COMPANY_ID", ObjList.getAttribute("COMPANY_ID").getInt());
                ObjLot.setAttribute("ISSUE_NO", txtIssueNo.getText().trim());
                ObjLot.setAttribute("ISSUE_SR_NO", i + 1);
                ObjLot.setAttribute("SR_NO", l);
                ObjLot.setAttribute("ITEM_ID", DataModelL.getValueByVariable("ITEM_CODE", i));
                ObjLot.setAttribute("ITEM_LOT_NO", ObjList.getAttribute("ITEM_LOT_NO").getString());
                ObjLot.setAttribute("AUTO_LOT_NO", ObjList.getAttribute("AUTO_LOT_NO").getString());
                ObjLot.setAttribute("ISSUED_LOT_QTY", ObjList.getAttribute("ISSUED_LOT_QTY").getDouble());
                ObjLot.setAttribute("ISSUE_TYPE", 2);

                String AutoLotNo = ObjList.getAttribute("AUTO_LOT_NO").getString();
                String ItemLotNo = ObjList.getAttribute("ITEM_LOT_NO").getString();
                double IssuedQty = ObjList.getAttribute("ISSUED_LOT_QTY").getDouble();
                String ItemId = DataModelL.getValueByVariable("ITEM_CODE", i);
                String GRNNo = data.getStringValueFromDB("SELECT GRN_NO FROM D_INV_GRN_LOT WHERE ITEM_ID='" + ItemId + "' AND AUTO_LOT_NO='" + AutoLotNo + "' ");
                int GRNSrNo = data.getIntValueFromDB("SELECT GRN_SR_NO FROM D_INV_GRN_LOT WHERE ITEM_ID='" + ItemId + "' AND AUTO_LOT_NO='" + AutoLotNo + "' ");
                ItemRate = data.getDoubleValueFromDB("SELECT LANDED_RATE FROM D_INV_GRN_DETAIL WHERE GRN_NO='" + GRNNo + "' AND SR_NO='" + GRNSrNo + "' ");
                TotalRate = EITLERPGLOBAL.round(TotalRate + ItemRate, 3);
                ItemValue = EITLERPGLOBAL.round((ItemRate * IssuedQty), 3);
                TotalValue = EITLERPGLOBAL.round(TotalValue + ItemValue, 3);
                ObjLot.setAttribute("ISSUE_RATE", ItemRate);

                ObjIssueItem.colItemLot.put(Integer.toString(ObjIssueItem.colItemLot.size() + 1), ObjLot);
            }
            //======== Lot Insertion Completed =========//*/
            //================== rate & value of item start =================================================//
            //ObjIssueItem.setAttribute("RATE", TotalValue / Double.parseDouble(DataModelL.getValueByVariable("QTY", i)));//TotalRate
            //ObjIssueItem.setAttribute("ISSUE_VALUE", TotalValue);
            
            ObjIssueItem.setAttribute("HSN",DataModelL.getValueByVariable("HSN",i));
            //ObjIssueItem.setAttribute("RATE", TotalValue / Double.parseDouble(DataModelL.getValueByVariable("QTY", i)));//TotalRate
            //ObjIssueItem.setAttribute("ISSUE_VALUE", TotalValue);
            
            ObjIssueItem.setAttribute("SALES_RATE",Double.parseDouble(DataModelL.getValueByVariable("SALES_RATE",i)));
            ObjIssueItem.setAttribute("SALES_VALUE",Double.parseDouble(DataModelL.getValueByVariable("SALES_VALUE",i)));
            ObjIssueItem.setAttribute("DISCOUNT",Double.parseDouble(DataModelL.getValueByVariable("DISCOUNT",i)));
            ObjIssueItem.setAttribute("TAXABLE_VALUE",Double.parseDouble(DataModelL.getValueByVariable("TAXABLE_VALUE",i)));
            ObjIssueItem.setAttribute("CGST_RATE",Double.parseDouble(DataModelL.getValueByVariable("CGST_RATE",i)));
            ObjIssueItem.setAttribute("CGST_AMT",Double.parseDouble(DataModelL.getValueByVariable("CGST_AMT",i)));
            ObjIssueItem.setAttribute("SGST_RATE",Double.parseDouble(DataModelL.getValueByVariable("SGST_RATE",i)));
            ObjIssueItem.setAttribute("SGST_AMT",Double.parseDouble(DataModelL.getValueByVariable("SGST_AMT",i)));
            ObjIssueItem.setAttribute("IGST_RATE",Double.parseDouble(DataModelL.getValueByVariable("IGST_RATE",i)));
            ObjIssueItem.setAttribute("IGST_AMT",Double.parseDouble(DataModelL.getValueByVariable("IGST_AMT",i)));
            ObjIssueItem.setAttribute("TOTAL",Double.parseDouble(DataModelL.getValueByVariable("TOTAL",i)));
            ObjIssueItem.setAttribute("DIFFERENCE_VALUE", Double.parseDouble(DataModelL.getValueByVariable("DIFFERENCE_VALUE", i)));
            ObjIssueItem.setAttribute("ADJUSTMENT_QTY", Double.parseDouble(DataModelL.getValueByVariable("ADJUSTMENT_QTY", i)));
            ObjIssue.colLineItems.put(Integer.toString(ObjIssue.colLineItems.size()+1),ObjIssueItem);
        }
    }
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=800");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=800");
        }
        
        
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate Department Combo ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String) ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
        //--- Generate Type Gatepass Type ------//
        cmbIssueTypeModel=new EITLComboModel();
        cmbIssueType.removeAllItems();
        cmbIssueType.setModel(cmbIssueTypeModel);
        
        ComboData aData=new ComboData();
        aData.strCode="MAT";
        aData.Text="MATERIAL REQUISITION";
        cmbIssueTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="GEN";
        aData.Text="GENERAL";
        cmbIssueTypeModel.addElement(aData);
        //===============================//
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        
                    }
                    else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 800,(String)ObjIssue.getAttribute("ISSUE_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
    }
    
    
    private void UpdateSrNo() {
        int SrCol=0;
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(cmbHierarchy.getItemCount()>1) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(true);
        }*/
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 800,(String)ObjIssue.getAttribute("ISSUE_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,800,FromUserID,(String)ObjIssue.getAttribute("ISSUE_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
    }
    
    
    private void FormatGrid() {
        HashMap ColList=new HashMap();
        
        try {
            
            cmdShowRequisition.requestFocus();
            DataModelL=new EITLTableModel();
            
            TableL.removeAll();
            TableL.setModel(DataModelL);
            
            //Set the table Readonly
            DataModelL.TableReadOnly(false);
            DataModelL.SetReadOnly(0);
            DataModelL.SetReadOnly(1);
            ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=800 AND HIDDEN=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
            for(int i=1;i<=ColList.size();i++) {
                clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
                
                //Add Column First
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
                
                
                if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                    DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
                }
                else {
                    DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
                }
                
                
                String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
                
                if(Variable.equals("QTY")) {
                    DataModelL.SetColID(TableL.getColumnCount()-1, -99);
                }
                else {
                    DataModelL.SetColID(TableL.getColumnCount()-1, 0);
                }
                
                
                DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                DataModelL.SetInclude(TableL.getColumnCount()-1,true);
                
                if(ObjColumn.getAttribute("READONLY").getBool()) {
                    DataModelL.SetReadOnly(TableL.getColumnCount()-1);
                }
            }
            
            //Now hide the column 1
            TableColumnModel ColModel=TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //------- Install Table List Selection Listener ------//
            TableL.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=TableL.getSelectedColumn();
                    String strVar=DataModelL.getVariable(last);
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue=(String)TableL.getValueAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                        
                        TableL.editCellAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                        if(TableL.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)TableL.getEditorComponent()).selectAll();
                        }
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                }
            }
            );
            //===================================================//
            
            
            
            //----- Install Table Model Event Listener -------//
            TableL.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        
                        int col = e.getColumn();
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        //If Item ID has changed
                        if(col==DataModelL.getColFromVariable("DEPT_ID")) {
                            String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID", TableL.getSelectedRow())));
                            DataModelL.setValueByVariable("DEPT_NAME",DeptName,TableL.getSelectedRow());
                        }
                        
                        
                        if(col==DataModelL.getColFromVariable("COST_CENTER_ID")) {
                            String CostCenterName=clsCostCenter.getCostCenterName(EITLERPGLOBAL.gCompanyID,Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID", TableL.getSelectedRow())));
                            DataModelL.setValueByVariable("COST_CENTER_NAME",CostCenterName,TableL.getSelectedRow());
                            
                            int CostCenterID=Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID",TableL.getSelectedRow()));
                            int DeptID=clsCostCenter.getDeptID(EITLERPGLOBAL.gCompanyID, CostCenterID);
                            String DeptName=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,DeptID);
                            DataModelL.setValueByVariable("DEPT_ID",Integer.toString(DeptID),TableL.getSelectedRow());
                            DataModelL.setValueByVariable("DEPT_NAME",DeptName,TableL.getSelectedRow());
                            
                        }
                        
                        
                        
                        if(col==DataModelL.getColFromVariable("RATE")) {
                            double IssueValue=Double.parseDouble(DataModelL.getValueByVariable("RATE",TableL.getSelectedRow())) * Double.parseDouble(DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                            DataModelL.setValueByVariable("ISSUE_VALUE",Double.toString(IssueValue),TableL.getSelectedRow());
                            
                            double StockQty=Double.parseDouble(DataModelL.getValueByVariable("STOCK_QTY",TableL.getSelectedRow()));
                            double Qty=Double.parseDouble(DataModelL.getValueByVariable("QTY",TableL.getSelectedRow()));
                            
                            DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(StockQty-Qty), TableL.getSelectedRow());
                        }
                        
                        
                        if(col==DataModelL.getColFromVariable("QTY")) {
                            double IssueValue=Double.parseDouble(DataModelL.getValueByVariable("RATE",TableL.getSelectedRow())) * Double.parseDouble(DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                            DataModelL.setValueByVariable("ISSUE_VALUE",Double.toString(IssueValue),TableL.getSelectedRow());
                            
                            double StockQty=Double.parseDouble(DataModelL.getValueByVariable("STOCK_QTY",TableL.getSelectedRow()));
                            double Qty=Double.parseDouble(DataModelL.getValueByVariable("QTY",TableL.getSelectedRow()));
                            
                            DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(StockQty-Qty), TableL.getSelectedRow());
                            
                            //Now display warnin message if enough qty is available to issue
                            String lItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_CODE"));
                            int DeptID=Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID",TableL.getSelectedRow()));
                            
                            
                            double OnHandQty=clsItem.getOnHandQty(EITLERPGLOBAL.gCompanyID,lItemID);
                            double TotalAllocatedQty=clsItem.getAllocatedQty(EITLERPGLOBAL.gCompanyID,lItemID);
                            double DeptAllocatedQty=clsAllocation.getAllocatedQty(EITLERPGLOBAL.gCompanyID,DeptID,lItemID);
                            
                            double TotalAvailableQty=(OnHandQty-TotalAllocatedQty)+DeptAllocatedQty;
                            
                            
                            if(TotalAvailableQty<Qty) {
                                //JOptionPane.showMessageDialog(null,"Item "+lItemID+" does not have enough stock to issue "+Qty+" Qty. ");
                            }
                        }
                        
                        
                        if(col == 1) {
                            try {
                                String lItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_CODE"));
                                String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(lItemName, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_NAME"));
                                TableL.setValueAt(lWareHouseID, TableL.getSelectedRow(),DataModelL.getColFromVariable("WAREHOUSE_ID"));
                                TableL.setValueAt(lLocationID, TableL.getSelectedRow(),DataModelL.getColFromVariable("LOCATION_ID"));
                                
                                int lItemUnit=clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(Integer.toString(lItemUnit),TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT"));
                                String lUnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
                                TableL.setValueAt(lUnitName,TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_NAME"));
                                String lWarehouseName=clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, lWareHouseID);
                                TableL.setValueAt(lWarehouseName,TableL.getSelectedRow(), DataModelL.getColFromVariable("WAREHOUSE_NAME"));
                                String lLocationName=clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, lLocationID);
                                TableL.setValueAt(lLocationName,TableL.getSelectedRow(), DataModelL.getColFromVariable("LOCATION_NAME"));
                                
                                
                                
                                String BOENo=DataModelL.getValueByVariable("BOE_NO", TableL.getSelectedRow());
                                if(BOENo.trim().equals("")) {
                                    BOENo="X";
                                }
                                
                                //double StockQty=clsItem.getOnHandQty(EITLERPGLOBAL.gCompanyID,lItemID,BOENo);
                                clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID,lItemID,EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()));
                                double StockQty=objStock.StockQty;
                                clsItemStock objItemStock = new clsItemStock();//add on 28/08/2009
                                double unapprovedStock = objItemStock.getOnHandQtyOn_Hold(EITLERPGLOBAL.gCompanyID,lItemID,txtIssueNo.getText().trim());//add on 28/08/2009
                                StockQty = StockQty - unapprovedStock;//add on 28/08/2009
                                
                                double Qty=Double.parseDouble(DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                                
                                DataModelL.setValueByVariable("STOCK_QTY",Double.toString(StockQty),TableL.getSelectedRow());
                                DataModelL.setValueByVariable("BAL_STOCK_QTY",Double.toString(StockQty-Qty),TableL.getSelectedRow());
                                DataModelL.setValueByVariable("BOE_NO","X",TableL.getSelectedRow());
                                
                                
                                
                                if(!clsItem.IsOneTime(EITLERPGLOBAL.gCompanyID,lItemID)) {
                                    
                                    String MIRNo=DataModelL.getValueByVariable("MIR_NO", TableL.getSelectedRow());
                                    
                                    if(MIRNo.trim().equals("")) {
                                        //
                                        int MIRSrNo=0;
                                        int MIRType=0;
                                        double MIRQty=0,Rate=0;
                                        String ItemID="";
                                        
                                        ItemID=DataModelL.getValueByVariable("ITEM_CODE", TableL.getSelectedRow());
                                        ItemID=ItemID.trim();
                                        MIRNo=clsMIRGen.getInwardNoFIFO(EITLERPGLOBAL.gCompanyID, ItemID);
                                        MIRNo=MIRNo.trim();
                                        
                                        double LandedRate=0;
                                        
                                        //Finding MIR Sr No. and Type
                                        try {
                                            Connection tmpConn=data.getConn();
                                            Statement stTmp=tmpConn.createStatement();
                                            ResultSet rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"' ");
                                            rsTmp.first();
                                            
                                            if(rsTmp.getRow()>0) {
                                                MIRSrNo=rsTmp.getInt("SR_NO");
                                                MIRType=rsTmp.getInt("MIR_TYPE");
                                                MIRQty=rsTmp.getDouble("QTY")-rsTmp.getDouble("ISSUED_QTY");
                                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                                                
                                                
                                                DataModelL.setValueByVariable("MIR_NO",MIRNo, TableL.getSelectedRow());
                                                DataModelL.setValueByVariable("MIR_SR_NO",Integer.toString(MIRSrNo), TableL.getSelectedRow());
                                                DataModelL.setValueByVariable("MIR_TYPE",Integer.toString(MIRType), TableL.getSelectedRow());
                                            }
                                            
                                            //====== Fetching Landed Rate of GRN ======//
                                            stTmp=tmpConn.createStatement();
                                            rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE AND D_INV_GRN_HEADER.APPROVED=1");
                                            rsTmp.first();
                                            if(rsTmp.getRow()>0) {
                                                LandedRate=rsTmp.getDouble("LANDED_RATE");
                                            }
                                            else {
                                                stTmp=tmpConn.createStatement();
                                                rsTmp=stTmp.executeQuery("SELECT LANDED_RATE FROM D_INV_GRN_HEADER,D_INV_GRN_DETAIL WHERE D_INV_GRN_DETAIL.MIR_NO='"+MIRNo+"' AND D_INV_GRN_DETAIL.MIR_SR_NO="+MIRSrNo+" AND D_INV_GRN_DETAIL.MIR_TYPE="+MIRType+" AND D_INV_GRN_HEADER.COMPANY_ID=D_INV_GRN_DETAIL.COMPANY_ID AND D_INV_GRN_HEADER.GRN_NO=D_INV_GRN_DETAIL.GRN_NO AND D_INV_GRN_HEADER.GRN_TYPE=D_INV_GRN_DETAIL.GRN_TYPE");
                                                rsTmp.first();
                                                if(rsTmp.getRow()>0) {
                                                    LandedRate=rsTmp.getDouble("LANDED_RATE");
                                                }
                                            }
                                            Rate=LandedRate;
                                            DataModelL.setValueByVariable("RATE",Double.toString(Rate),TableL.getSelectedRow());
                                            //========================================//
                                            
                                            //tmpConn.close();
                                            stTmp.close();
                                            rsTmp.close();
                                        }
                                        catch(Exception t) {
                                            
                                        }
                                        
                                    }
                                }
                                
                            }
                            catch(Exception ex){ }
                        }
                        double SalesRate = Double.parseDouble(DataModelL.getValueByVariable("SALES_RATE", TableL.getSelectedRow()));
                        double Qty = Double.parseDouble(DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                        double Salesqty = Double.parseDouble(DataModelL.getValueByVariable("SALES_QTY", TableL.getSelectedRow()));
                        double SalesValue = Double.parseDouble(DataModelL.getValueByVariable("SALES_VALUE", TableL.getSelectedRow()));
                        double CGSTRate = Double.parseDouble(DataModelL.getValueByVariable("CGST_RATE", TableL.getSelectedRow()));
                        double SGSTRate = Double.parseDouble(DataModelL.getValueByVariable("SGST_RATE", TableL.getSelectedRow()));
                        double IGSTRate = Double.parseDouble(DataModelL.getValueByVariable("IGST_RATE", TableL.getSelectedRow()));
                        double CGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("CGST_AMT", TableL.getSelectedRow()));
                        double SGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("SGST_AMT", TableL.getSelectedRow()));
                        double IGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("IGST_AMT", TableL.getSelectedRow()));
                        double Total = Double.parseDouble(DataModelL.getValueByVariable("TOTAL", TableL.getSelectedRow()));
                        double Discount = Double.parseDouble(DataModelL.getValueByVariable("DISCOUNT", TableL.getSelectedRow()));
                        double TaxableValue = Double.parseDouble(DataModelL.getValueByVariable("TAXABLE_VALUE", TableL.getSelectedRow()));
                        double dval = SalesValue - Double.parseDouble(DataModelL.getValueByVariable("ISSUE_VALUE", TableL.getSelectedRow()));
                        //double Adjqty=Qty-Salesqty;
                        double Adjqty=-(Qty-Salesqty);
                        
                        //if (evt.getKeyChar() == KeyEvent.VK_TAB || evt.getKeyChar() == 10) {
                        if (col == DataModelL.getColFromVariable("SALES_RATE")) {
                        SalesRate = Double.parseDouble(DataModelL.getValueByVariable("SALES_RATE", TableL.getSelectedRow()));
                        Qty = Double.parseDouble(DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                        Salesqty = Double.parseDouble(DataModelL.getValueByVariable("SALES_QTY", TableL.getSelectedRow()));
                        System.out.println(SalesRate);
                        System.out.println(Salesqty);
                        //SalesValue = SalesRate * Qty;                        
                        SalesValue = SalesRate * Salesqty;
                        TaxableValue = SalesValue - Discount;
                        CGSTAmt = TaxableValue * (CGSTRate / 100);
                        SGSTAmt = TaxableValue * (SGSTRate / 100);
                        IGSTAmt = TaxableValue * (IGSTRate / 100);
                        Total = TaxableValue + CGSTAmt + SGSTAmt + IGSTAmt;
                        Adjqty=-(Qty-Salesqty);

                        DataModelL.setValueByVariable("SALES_VALUE", Double.toString(SalesValue), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TAXABLE_VALUE", Double.toString(TaxableValue), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("CGST_AMT", Double.toString(CGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("SGST_AMT", Double.toString(SGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("IGST_AMT", Double.toString(IGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TOTAL", Double.toString(Total), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("DIFFERENCE_VALUE", Double.toString(EITLERPGLOBAL.round(dval, 2)), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("ADJUSTMENT_QTY",Double.toString(Adjqty), TableL.getSelectedRow());
                        }
                        //}
                        if (col == DataModelL.getColFromVariable("SALES_QTY")) {
                        SalesRate = Double.parseDouble(DataModelL.getValueByVariable("SALES_RATE", TableL.getSelectedRow()));
                        Qty = Double.parseDouble(DataModelL.getValueByVariable("QTY", TableL.getSelectedRow()));
                        Salesqty = Double.parseDouble(DataModelL.getValueByVariable("SALES_QTY", TableL.getSelectedRow()));
                        System.out.println(SalesRate);
                        System.out.println(Salesqty);
                        //SalesValue = SalesRate * Qty;
                        SalesValue = SalesRate * Salesqty;
                        TaxableValue = SalesValue - Discount;
                        CGSTAmt = TaxableValue * (CGSTRate / 100);
                        SGSTAmt = TaxableValue * (SGSTRate / 100);
                        IGSTAmt = TaxableValue * (IGSTRate / 100);
                        Total = TaxableValue + CGSTAmt + SGSTAmt + IGSTAmt;
                        Adjqty=-(Qty-Salesqty);

                        DataModelL.setValueByVariable("SALES_VALUE", Double.toString(SalesValue), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TAXABLE_VALUE", Double.toString(TaxableValue), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("CGST_AMT", Double.toString(CGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("SGST_AMT", Double.toString(SGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("IGST_AMT", Double.toString(IGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TOTAL", Double.toString(Total), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("DIFFERENCE_VALUE", Double.toString(EITLERPGLOBAL.round(dval, 2)), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("ADJUSTMENT_QTY",Double.toString(Adjqty), TableL.getSelectedRow());
                        }
                        
                        if (col == DataModelL.getColFromVariable("DISCOUNT")) {
                        SalesValue = Double.parseDouble(DataModelL.getValueByVariable("SALES_VALUE", TableL.getSelectedRow()));
                        Discount = Double.parseDouble(DataModelL.getValueByVariable("DISCOUNT", TableL.getSelectedRow()));
                        CGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("CGST_AMT", TableL.getSelectedRow()));
                        SGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("SGST_AMT", TableL.getSelectedRow()));
                        IGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("IGST_AMT", TableL.getSelectedRow()));
                        TaxableValue = SalesValue - Discount;
                        Total = TaxableValue + CGSTAmt + SGSTAmt + IGSTAmt;
                        DataModelL.setValueByVariable("TAXABLE_VALUE", Double.toString(TaxableValue), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TOTAL", Double.toString(Total), TableL.getSelectedRow());
                        }
                        if (col == DataModelL.getColFromVariable("CGST_RATE")) {
                        CGSTRate = Double.parseDouble(DataModelL.getValueByVariable("CGST_RATE", TableL.getSelectedRow()));
                        CGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("CGST_AMT", TableL.getSelectedRow()));
                        SGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("SGST_AMT", TableL.getSelectedRow()));
                        IGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("IGST_AMT", TableL.getSelectedRow()));
                        TaxableValue = Double.parseDouble(DataModelL.getValueByVariable("TAXABLE_VALUE", TableL.getSelectedRow()));
                        CGSTAmt = TaxableValue * (CGSTRate / 100);
                        Total = TaxableValue + CGSTAmt + SGSTAmt + IGSTAmt;
                        DataModelL.setValueByVariable("CGST_AMT", Double.toString(CGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TOTAL", Double.toString(Total), TableL.getSelectedRow());
                        }
                        if (col == DataModelL.getColFromVariable("SGST_RATE")) {
                        SGSTRate = Double.parseDouble(DataModelL.getValueByVariable("SGST_RATE", TableL.getSelectedRow()));
                        CGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("CGST_AMT", TableL.getSelectedRow()));
                        SGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("SGST_AMT", TableL.getSelectedRow()));
                        IGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("IGST_AMT", TableL.getSelectedRow()));
                        TaxableValue = Double.parseDouble(DataModelL.getValueByVariable("TAXABLE_VALUE", TableL.getSelectedRow()));
                        SGSTAmt = TaxableValue * (SGSTRate / 100);
                        Total = TaxableValue + CGSTAmt + SGSTAmt + IGSTAmt;
                        DataModelL.setValueByVariable("SGST_AMT", Double.toString(SGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TOTAL", Double.toString(Total), TableL.getSelectedRow());
                        }
                        if (col == DataModelL.getColFromVariable("IGST_RATE")) {
                        IGSTRate = Double.parseDouble(DataModelL.getValueByVariable("IGST_RATE", TableL.getSelectedRow()));
                        CGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("CGST_AMT", TableL.getSelectedRow()));
                        SGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("SGST_AMT", TableL.getSelectedRow()));
                        IGSTAmt = Double.parseDouble(DataModelL.getValueByVariable("IGST_AMT", TableL.getSelectedRow()));
                        TaxableValue = Double.parseDouble(DataModelL.getValueByVariable("TAXABLE_VALUE", TableL.getSelectedRow()));
                        IGSTAmt = TaxableValue * (IGSTRate / 100);
                        Total = TaxableValue + CGSTAmt + SGSTAmt + IGSTAmt;
                        DataModelL.setValueByVariable("IGST_AMT", Double.toString(IGSTAmt), TableL.getSelectedRow());
                        DataModelL.setValueByVariable("TOTAL", Double.toString(Total), TableL.getSelectedRow());
                        }

                    }
                    UpdateInvoiceAmount();
                }
            });
            
        /*int ImportCol=DataModelL.getColFromVariable("IMPORT_CONCESS");
        Renderer.setCustomComponent(ImportCol,"CheckBox");
        JCheckBox aCheckBox=new JCheckBox();
        aCheckBox.setBackground(Color.WHITE);
        TableL.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
        TableL.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);*/
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIssue.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIssue.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIssue.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjIssue.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void SetFields(boolean pStat) {
        cmdChange.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        //txtIssueDate.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        
        chkCanceled.setEnabled(pStat);
        
        txtTransporterName.setEnabled(pStat);
        txtPartyCode.setEnabled(pStat);
        txtInvoiceAmt.setEnabled(false);
        txtInvoiceNo.setEnabled(false);
        txtInvoiceDate.setEnabled(false);
        
        cmbIssueType.setEnabled(pStat);
        cmbDept.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        
        cmdInsertMR.setEnabled(pStat);
        //cmdAdd.setEnabled(pStat);
        cmdAdd.setEnabled(false);
        cmdRemove.setEnabled(pStat);
        cmdRead.setEnabled(pStat);
        DataModelL.TableReadOnly(!pStat);
        cmdReadBarcode.setEnabled(pStat);
        
        SetupApproval();
    }
    
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1273,12731)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1273,12732)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1273,12733)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1273,12734)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1273,12735)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=800;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            ObjIssue.colLineItems.clear();
            FormatGrid();
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SelNo = aList.DocNo;
            SetupApproval();
            if(chkKeep.isSelected()) {
                
            }
            else {
                txtIssueNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 800, FFNo,  false));
                txtIssueDate.setText(EITLERPGLOBAL.getCurrentDate());
            }
            
            txtIssueDate.requestFocus();
            
            lblTitle.setText(" ISSUE (Store Sales) - "+txtIssueNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void ClearFields() {
        
        //txtIssueNo.setText("");
        //txtIssueDate.setText("");
        chkCanceled.setSelected(false);
        txtRemarks.setText("");
        txtPurpose.setText("");
        txtToRemarks.setText("");
        
        txtPartyCode.setText("");
        txtInvoiceAmt.setText("");
        txtInvoiceDate.setText("");
        txtInvoiceNo.setText("");
        txtTransporterName.setText("");
        lblGSTIN.setText("");
        
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }
    
    
    private void Edit(){
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo=(String)ObjIssue.getAttribute("ISSUE_NO").getObj();
        if(ObjIssue.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            EditMode=EITLERPGLOBAL.EDIT;
            GenerateCombos();
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(800,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 1273,12732)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            DisableToolbar();
            /*String Issue_Code=EITLERPGLOBAL.getCombostrCode(cmbIssueType);
            cmdAdd.setEnabled(false);
            cmdInsertMR.setEnabled(false);
            cmbHierarchy.setEnabled(true);
             
            if(Issue_Code.equals("MAT")) {
                cmdAdd.setEnabled(true);
                cmdInsertMR.setEnabled(true);
            }
             
            if(Issue_Code.equals("GEN")) {
                cmdAdd.setEnabled(true);
            }*/
            cmbDept.requestFocus();
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    
    private void Delete(){
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo=(String)ObjIssue.getAttribute("ISSUE_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjIssue.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(ObjIssue.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjIssue.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjIssue.Insert(SelPrefix,SelNo)) {
                if (OpgFinal.isSelected()) {
                    String DOC_NO = txtIssueNo.getText();
                    String DOC_DATE = txtIssueDate.getText();

                    System.out.println("Posting SJ");
                    //if (PostSJTypeSales(2, txtIssueNo.getText(), EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()))) {
                    if (PostSJTypeSales(EITLERPGLOBAL.gCompanyID, txtIssueNo.getText(), EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()))) {

                    } else {
                        System.out.println(ObjIssue.LastError);
                    }

                }
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjIssue.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjIssue.Update()) {
                if (OpgFinal.isSelected()) {
                    String DOC_NO = txtIssueNo.getText();
                    String DOC_DATE = txtIssueDate.getText();

                    System.out.println("Posting SJ");
                    //if (PostSJTypeSales(2, txtIssueNo.getText(), EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()))) {
                    if (PostSJTypeSales(EITLERPGLOBAL.gCompanyID, txtIssueNo.getText(), EITLERPGLOBAL.formatDateDB(txtIssueDate.getText()))) {

                    } else {
                        System.out.println(ObjIssue.LastError);
                    }

                }
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjIssue.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        ShowMessage("Ready");
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void Find(){
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmIssueGenFind",true);
        frmIssueGenFind ObjReturn= (frmIssueGenFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            //Add PO Type
            if(!ObjReturn.strQuery.trim().equals("")) {
                ObjReturn.strQuery=ObjReturn.strQuery;
            }
            else {
                ObjReturn.strQuery=" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ISSUE_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND ISSUE_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND ISSUE_TYPE = 'GEN' ";
            }
            
            
            if(!ObjIssue.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
        
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        if(OpgReject.isSelected()) {
            return true;
        }
        
        if (txtPartyCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Select Party Code");
            txtPartyCode.requestFocus();
            return false;
        }

        if (txtTransporterName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Transporter");
            txtTransporterName.requestFocus();
            return false;
        }
        
        //        //Check for the duplication of item codes
        //        for(int i=0;i<TableL.getRowCount();i++) {
        //            boolean Found=false;
        //            String ItemID=(String)TableL.getValueAt(i,ItemCol);
        //            String DuplicateItem="";
        //
        //            for(int j=0;j<TableL.getRowCount();j++) {
        //                if(((String)TableL.getValueAt(i,ItemCol)).trim().equals(ItemID.trim())&&j!=i) {
        //                    Found=true;
        //                    DuplicateItem=ItemID;
        //                }
        //            }
        //
        //            if(Found) {
        //                JOptionPane.showMessageDialog(null,"Item Code "+DuplicateItem+" has been entered more than once. Please check");
        //                return false;
        //            }
        //        }
        
        
        
        //Validates Item Entries
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one item");
            return false;
        }
        
         int ItemCol=DataModelL.getColFromVariable("ITEM_CODE");
        int QtyCol=DataModelL.getColFromVariable("QTY");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            String ItemID = DataModelL.getValueByVariable("ITEM_CODE", i);
            
             if (DataModelL.getValueByVariable("HSN", i).equalsIgnoreCase("")) {
                JOptionPane.showMessageDialog(null, "HSN should not blank. " + ItemID);
                return false;
            }
            if (OpgFinal.isSelected()) {
                double mval = 0.0, mcgst, msgst, migst;
                try {
                    mval = Double.parseDouble(DataModelL.getValueByVariable("RATE", i).toString());
                } catch (Exception e) {
                    mval = 0.0;
                }
                if (mval <= 0.0) {
                    JOptionPane.showMessageDialog(null, "Rate should not blank or More than Zero at Item " + ItemID);
                    return false;
                }
                try {
                    mval = Double.parseDouble(DataModelL.getValueByVariable("SALES_RATE", i).toString());
                } catch (Exception e) {
                    mval = 0.0;
                }
                if (mval <= 0.0) {
                    JOptionPane.showMessageDialog(null, "Sales Rate should not blank or More than Zero at Item " + ItemID);
                    return false;
                }
                try {
                    mcgst = Double.parseDouble(DataModelL.getValueByVariable("CGST_RATE", i).toString());
                } catch (Exception e) {
                    mcgst = 0.0;
                }
                try {
                    msgst = Double.parseDouble(DataModelL.getValueByVariable("SGST_RATE", i).toString());
                } catch (Exception e) {
                    msgst = 0.0;
                }
                if (mcgst != msgst) {
                    JOptionPane.showMessageDialog(null, "CGST & SGST should be Same at Item " + ItemID);
                    return false;
                }
            }
            
            //double IssuedQty = Double.parseDouble(TableL.getValueAt(i,7).toString());
            double IssuedQty = EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY", i)),3);
            double TotalIssuedQty = IssuedQty;
            for(int j=0;j<TableL.getRowCount();j++) {
                if(i!=j) {
                    String jItemID = DataModelL.getValueByVariable("ITEM_CODE", j);
                    if(jItemID.equals(ItemID)) {
                        TotalIssuedQty = TotalIssuedQty + EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY", j)),3);
                    }
                }
            }
            //double ReqdQty = Double.parseDouble(DataModelL.getValueByVariable("QTY_REQD", i));
            //REQ_NO
            //REQ_SRNO
            String ReqNo = DataModelL.getValueByVariable("REQ_NO", i);
            int ReqSrNo = (int)Double.parseDouble(DataModelL.getValueByVariable("REQ_SRNO", i).toString());
            double ReqdQty = EITLERPGLOBAL.round(data.getDoubleValueFromDB("SELECT REQ_QTY FROM D_INV_ISSUE_REQ_DETAIL WHERE REQ_NO='"+ReqNo+"' AND SR_NO="+ReqSrNo),3);
            
            clsStockInfo objStock=(new clsItemStock()).getOnHandQtyOn(EITLERPGLOBAL.gCompanyID,ItemID,EITLERPGLOBAL.formatDateDB(txtIssueDate.getText().trim()));
            double OnHand=EITLERPGLOBAL.round(objStock.StockQty,3);
            
            clsItemStock objItemStock = new clsItemStock(); //add on 28/08/2009
            double unapprovedStock = objItemStock.getOnHandQtyOn_Hold(EITLERPGLOBAL.gCompanyID,ItemID,txtIssueNo.getText().trim());//add on 28/08/2009
            OnHand = EITLERPGLOBAL.round(OnHand - unapprovedStock,3);//add on 28/08/2009
            
            //ReqdQty = ReqdQty - EITLERPGLOBAL.round(data.getDoubleValueFromDB("SELECT QTY FROM D_INV_ISSUE_DETAIL WHERE REQ_NO='"+ReqNo+"' AND REQ_SRNO="+ReqSrNo + " AND ISSUE_NO<>'"+txtIssueNo.getText().trim()+"'"),1);
            ReqdQty -= EITLERPGLOBAL.round(data.getDoubleValueFromDB("SELECT B.QTY FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO AND A.COMPANY_ID=B.COMPANY_ID AND A.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND B.REQ_NO='"+ReqNo+"' AND B.REQ_SRNO="+ReqSrNo+" AND A.ISSUE_NO<>'"+txtIssueNo.getText().trim()+"' AND A.CANCELED=0"),3);////add on 28/08/2009
            
            if(TotalIssuedQty > OnHand) {
                JOptionPane.showMessageDialog(null,"Total issued quantity for Item(" + ItemID+") is more than current stock quantity.");
                return false;
            }
            
            //double Allocated=clsItem.getAllocatedQty(EITLERPGLOBAL.gCompanyID, ItemID);
            //double Available=OnHand;
            if(OnHand > 0.0) {
                if(OnHand >= IssuedQty) {
                    //if(ReqdQty!=IssuedQty) {
                    if(ReqdQty>IssuedQty) {
                        if(OnHand >= ReqdQty ) {
                            //JOptionPane.showMessageDialog(null,"Issued quantity is not match with Required quantity in Issue Requisition.--> " + ItemID);
                            JOptionPane.showMessageDialog(null,"On Hand Quantity already exists as much as Required Quantity.--> " + ItemID);
                            return false;
                        }
                    } else if(ReqdQty<IssuedQty) {
                        JOptionPane.showMessageDialog(null,"Required Quantity less then Issued Quantity.--> " + ItemID);
                        return false;
                    }
                } else {
                    JOptionPane.showMessageDialog(null,"On Hand quantity is less then Issued quantity.--> " + ItemID);
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(null,"On Hand Stock Not Available.--> " + ItemID);
                return false;
            }
        }
        
        
        
        
        for(int i=0;i<TableL.getRowCount();i++) {
            String ItemID="";
            double Rate=0,Qty=0;
            
            if(TableL.getValueAt(i, ItemCol)!=null && TableL.getValueAt(i, QtyCol)!=null) {
                ItemID=(String)TableL.getValueAt(i, ItemCol);
                Qty=Double.parseDouble((String)TableL.getValueAt(i,QtyCol));
                String BOENo=DataModelL.getValueByVariable("BOE_NO", i);
                String WarehouseID=clsItem.getItemWareHouseID(EITLERPGLOBAL.gCompanyID, ItemID);
                String LocationID=clsItem.getItemLocationID(EITLERPGLOBAL.gCompanyID, ItemID);
                
                int DeptID=Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID", i));
                int CostCenterID=Integer.parseInt(DataModelL.getValueByVariable("COST_CENTER_ID",i));
                
                double QtyReqd=Double.parseDouble(DataModelL.getValueByVariable("QTY_REQD", i));
                
                if(BOENo.trim().equals("")) {
                    BOENo="X";
                    DataModelL.setValueByVariable("BOE_NO",BOENo,i);
                }
                
                
                /*if(clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID) && Qty>0) {
                    ValidEntryCount++;
                }*/
                
                if(clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID) && Qty>0 && DeptID>0 && CostCenterID>0) {
                    ValidEntryCount++;
                }
                else {
                    JOptionPane.showMessageDialog(null,"Item entry is not valid. Please be sure to enter following information. \nValid Item ID,Quantity,Department,Cost Center");
                    TableL.changeSelection(i, 1, false,false);
                    return false;
                }
                
            }
        }
        
        if(ValidEntryCount==0) {
            JOptionPane.showMessageDialog(null,"Item entry is not valid. Please verify");
            return false;
        }
        
        //Now Header level validations
        if(txtIssueDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Issue Date");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        
        return true;
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                //DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjIssue.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND ISSUE_NO='"+pDocNo+"'",pCompanyID);
        ObjIssue.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjIssue.Filter(" WHERE ISSUE_NO IN (SELECT D_INV_ISSUE_HEADER.ISSUE_NO FROM D_INV_ISSUE_HEADER,D_COM_DOC_DATA WHERE D_INV_ISSUE_HEADER.ISSUE_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_ISSUE_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_ISSUE_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND D_COM_DOC_DATA.MODULE_ID=800)",EITLERPGLOBAL.gCompanyID);
        ObjIssue.MoveLast();
        DisplayData();
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void PreviewReport() {
//        HashMap Params=new HashMap();
//        
//        if(chkCanceled.isSelected()) {
//            JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
//            return;
//        }
//        
//        
//        Params.put("comp_id", new Integer(EITLERPGLOBAL.gCompanyID));
//        Params.put("iss_no",txtIssueNo.getText());
//        
//        try {
//            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptIssueGen.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtIssueNo.getText());
//            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
//        }
//        catch(Exception e) {
//            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
//        }
        if (ObjIssue.getAttribute("APPROVED").getInt() == 1) {
            Connection Conn = null;
            Statement st = null;
            ResultSet rs = null;

            try {
                Conn = data.getConn();
                st = Conn.createStatement();

                HashMap parameterMap = new HashMap();
//                parameterMap.put("CONTEXT","http://200.0.0.230:8080/SDMLERP/");
                ReportRegister rpt = new ReportRegister(parameterMap, Conn);

                //String strSQL = "SELECT *,@A:=@A+1 AS 'SR_NO' FROM (SELECT @A:= 0) AS A,(SELECT H.ISSUE_NO,H.ISSUE_DATE,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_VALUE,H.INVOICE_VALUE_IN_WORDS,H.PARTY_CODE,H.TRANSPORTER_NAME,D.ITEM_CODE,D.HSN,D.QTY_REQD,D.UNIT,D.SALES_RATE,D.SALES_VALUE,D.DISCOUNT,D.TAXABLE_VALUE,D.CGST_RATE,D.CGST_AMT,D.SGST_RATE,D.SGST_AMT,D.IGST_RATE,D.IGST_AMT FROM DINESHMILLS.D_INV_ISSUE_HEADER H, DINESHMILLS.D_INV_ISSUE_DETAIL D WHERE H.ISSUE_NO=D.ISSUE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND H.ISSUE_NO='" + txtIssueNo.getText().trim() + "' AND H.ISSUE_DATE='" + EITLERPGLOBAL.formatDateDB(txtIssueDate.getText().trim()) + "') AS ISS LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,STATE,STATE_GST_CODE,GSTIN_NO FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM ON ISS.PARTY_CODE=PM.PARTY_CODE LEFT JOIN (SELECT ITEM_ID,ITEM_DESCRIPTION FROM DINESHMILLS.D_INV_ITEM_MASTER WHERE CANCELLED=0) AS IM ON ISS.ITEM_CODE=IM.ITEM_ID LEFT JOIN (SELECT PARA_CODE,`DESC` AS UNIT_NAME FROM DINESHMILLS.D_COM_PARAMETER_MAST WHERE PARA_ID='UNIT') AS PA ON PA.PARA_CODE=ISS.UNIT ";
                //String strSQL = "SELECT *,@A:=@A+1 AS 'SR_NO' FROM (SELECT @A:= 0) AS A,(SELECT H.ISSUE_NO,H.ISSUE_DATE,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_VALUE,H.INVOICE_VALUE_IN_WORDS,H.PARTY_CODE,H.TRANSPORTER_NAME,D.ITEM_CODE,D.HSN,D.QTY,D.UNIT,D.SALES_RATE,D.SALES_VALUE,D.DISCOUNT,D.TAXABLE_VALUE,D.CGST_RATE,D.CGST_AMT,D.SGST_RATE,D.SGST_AMT,D.IGST_RATE,D.IGST_AMT FROM D_INV_ISSUE_HEADER H, D_INV_ISSUE_DETAIL D WHERE H.COMPANY_ID=D.COMPANY_ID AND D.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND H.ISSUE_NO=D.ISSUE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND H.ISSUE_NO='" + txtIssueNo.getText().trim() + "' AND H.ISSUE_DATE='" + EITLERPGLOBAL.formatDateDB(txtIssueDate.getText().trim()) + "') AS ISS LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,STATE,STATE_GST_CODE,GSTIN_NO FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM ON ISS.PARTY_CODE=PM.PARTY_CODE LEFT JOIN (SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND CANCELLED=0) AS IM ON ISS.ITEM_CODE=IM.ITEM_ID LEFT JOIN (SELECT PARA_CODE,`DESC` AS UNIT_NAME FROM DINESHMILLS.D_COM_PARAMETER_MAST WHERE PARA_ID='UNIT') AS PA ON PA.PARA_CODE=ISS.UNIT ";
                String strSQL = "SELECT *,@A:=@A+1 AS 'SR_NO' FROM (SELECT @A:= 0) AS A,(SELECT H.ISSUE_NO,H.ISSUE_DATE,H.INVOICE_NO,H.INVOICE_DATE,H.INVOICE_VALUE,H.INVOICE_VALUE_IN_WORDS,H.PARTY_CODE,H.TRANSPORTER_NAME,D.ITEM_CODE,D.HSN,D.SALES_QTY,D.UNIT,D.SALES_RATE,D.SALES_VALUE,D.DISCOUNT,D.TAXABLE_VALUE,D.CGST_RATE,D.CGST_AMT,D.SGST_RATE,D.SGST_AMT,D.IGST_RATE,D.IGST_AMT FROM D_INV_ISSUE_HEADER H, D_INV_ISSUE_DETAIL D WHERE H.COMPANY_ID=D.COMPANY_ID AND D.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND H.ISSUE_NO=D.ISSUE_NO AND H.APPROVED=1 AND H.CANCELED=0 AND H.ISSUE_NO='" + txtIssueNo.getText().trim() + "' AND H.ISSUE_DATE='" + EITLERPGLOBAL.formatDateDB(txtIssueDate.getText().trim()) + "') AS ISS LEFT JOIN (SELECT PARTY_CODE,PARTY_NAME,ADDRESS1,ADDRESS2,PINCODE,STATE,STATE_GST_CODE,GSTIN_NO FROM DINESHMILLS.D_SAL_PARTY_MASTER) AS PM ON ISS.PARTY_CODE=PM.PARTY_CODE LEFT JOIN (SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND CANCELLED=0) AS IM ON ISS.ITEM_CODE=IM.ITEM_ID LEFT JOIN (SELECT PARA_CODE,`DESC` AS UNIT_NAME FROM DINESHMILLS.D_COM_PARAMETER_MAST WHERE PARA_ID='UNIT') AS PA ON PA.PARA_CODE=ISS.UNIT ";

                System.out.println("SQL QUERY : " + strSQL);
                rpt.setReportName("/EITLERP/Stores/IssueSalesInvoice.jrxml", 1, strSQL); //productlist is the name of my jasper file.
                rpt.callReport();

            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    st.close();
                    Conn.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptISSUE1A.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtIssueNo.getText()+"&DocType=G");
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbSendToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbSendToModel);
        
        for(int r=0;r<TableL.getRowCount();r++) {
            int theDeptID=Integer.parseInt(DataModelL.getValueByVariable("DEPT_ID",r));
            
            if(theDeptID!=0) {
                DeptList=clsDepartment.getApproverList(EITLERPGLOBAL.gCompanyID, 48, theDeptID);
                
                for(int i=1;i<=DeptList.size();i++) {
                    clsDeptUsers ObjUser=new clsDeptUsers();
                    
                    DeptUsers.put(Integer.toString(DeptUsers.size()+1),ObjUser);
                }
            }
        }
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=ApprovalFlow.getUserList((int)EITLERPGLOBAL.gCompanyID,800,txtIssueNo.getText());
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            boolean UserFound=false;
            
            for(int j=1;j<=DeptUsers.size();j++) {
                clsDeptUsers ObjDeptUser=(clsDeptUsers)DeptUsers.get(Integer.toString(j));
                int tmpUserID=(int)ObjDeptUser.getAttribute("USER_ID").getVal();
                
                if(tmpUserID==aData.Code) {
                    UserFound=true;
                }
            }
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 800, txtIssueNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 800, txtIssueNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbSendToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbSendToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 800, txtIssueNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    private void UpdateInvoiceAmount() {
            //===================== Update Totals ========================//
            try {

            double NetAmount = 0;

            for (int i = 0; i < TableL.getRowCount(); i++) {
            NetAmount = NetAmount + UtilFunctions.CDbl(DataModelL.getValueByVariable("TOTAL", i));
            }

            //NetAmount = EITLERPGLOBAL.round(NetAmount, 2);
            NetAmount = EITLERPGLOBAL.round(NetAmount, 0);

            txtInvoiceAmt.setText(Double.toString(NetAmount));

            } catch (Exception v) {
            v.printStackTrace();
            }
            //==================================================================//
    }

    public boolean PostSJTypeSales(int CompanyID, String DocNo, String DocDate) {
        ResultSet rsTmp, rsDetail;
        Connection tmpConn = data.getConn();
        Statement tmpStmt;

        try {
            //String strSQL = "SELECT * FROM DINESHMILLS.D_INV_ISSUE_HEADER WHERE COMPANY_ID=" + CompanyID + " AND ISSUE_NO='" + DocNo + "' AND ISSUE_DATE='" + DocDate + "' ";
            String strSQL = "SELECT * FROM D_INV_ISSUE_HEADER WHERE COMPANY_ID=" + CompanyID + " AND ISSUE_NO='" + DocNo + "' AND ISSUE_DATE='" + DocDate + "' ";
            rsTmp = data.getResult(strSQL);
            rsTmp.first();

            if (rsTmp.getRow() > 0) {
                while (!rsTmp.isAfterLast()) {
                    clsVoucher objVoucher = new clsVoucher();

                    String InvoiceNo = rsTmp.getString("INVOICE_NO");
                    String InvoiceDate = rsTmp.getString("INVOICE_DATE");
                    double NetAmount = rsTmp.getDouble("INVOICE_VALUE");

                    double SGSTAmount = 0;
                    double CGSTAmount = 0;
                    double IGSTAmount = 0;

                    String SGSTCode = "";
                    String CGSTCode = "";
                    String IGSTCode = "";

                    double GSTAmount = data.getDoubleValueFromDB("SELECT SUM(CGST_AMT+SGST_AMT+IGST_AMT) AS GROSS_AMT FROM D_INV_ISSUE_DETAIL WHERE COMPANY_ID=" + CompanyID + " AND ISSUE_NO='" + DocNo + "' GROUP BY ISSUE_NO");
                    //double GrossAmount = NetAmount - GSTAmount;
                    double GrossAmount= EITLERPGLOBAL.round(NetAmount, 0)-EITLERPGLOBAL.round(GSTAmount, 0);

                    String PartyCode = rsTmp.getString("PARTY_CODE");
                    String ICType = "";
                    String SalesAccountCode = "";

                    String SelPrefix = "";
                    String SelSuffix = "";
                    int FFNo = 0;

                    //ResultSet rsVoucher = data.getResult("SELECT * FROM D_COM_FIRSTFREE WHERE MODULE_ID=" + clsVoucher.SalesJournalVoucherModuleID);
                    ResultSet rsVoucher = data.getResult("SELECT * FROM D_COM_FIRSTFREE WHERE COMPANY_ID="+CompanyID+" AND  MODULE_ID=" + clsVoucher.SalesJournalVoucherModuleID);
                    //ResultSet rsVoucher = data.getResult("SELECT * FROM DINESHMILLS.D_COM_FIRSTFREE WHERE MODULE_ID=" + clsVoucher.SalesJournalVoucherModuleID);
                    rsVoucher.first();

                    if (rsVoucher.getRow() > 0) {
                        SelPrefix = rsVoucher.getString("PREFIX_CHARS");
                        SelSuffix = rsVoucher.getString("SUFFIX_CHARS");
                        FFNo = rsVoucher.getInt("FIRSTFREE_NO");
                    }

                    int VoucherSrNo = 0;

                    objVoucher = new clsVoucher();
                    //objVoucher.LoadDataEx(2);
                    objVoucher.LoadDataEx(CompanyID);

                    objVoucher.setAttribute("PREFIX", SelPrefix);
                    objVoucher.setAttribute("SUFFIX", SelSuffix);
                    objVoucher.setAttribute("FFNO", FFNo);
                    //objVoucher.setAttribute("COMPANY_ID", 2);
                    objVoucher.setAttribute("COMPANY_ID", CompanyID);
                    objVoucher.setAttribute("VOUCHER_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));

                    if(CompanyID==2){
                    objVoucher.setAttribute("BOOK_CODE", "05");
                    } else if(CompanyID==3){
                        objVoucher.setAttribute("BOOK_CODE", "06");
                    }
                    SalesAccountCode = "315026";

                    System.out.println("Invoice " + InvoiceNo + " 1");
                    objVoucher.setAttribute("VOUCHER_TYPE", FinanceGlobal.TYPE_SALES_JOURNAL);
                    objVoucher.setAttribute("CHEQUE_NO", "");
                    objVoucher.setAttribute("CHEQUE_DATE", "");
                    objVoucher.setAttribute("BANK_NAME", "");
                    objVoucher.setAttribute("PO_NO", "");
                    objVoucher.setAttribute("PO_DATE", "");
                    objVoucher.setAttribute("INVOICE_NO", "");
                    objVoucher.setAttribute("INVOICE_DATE", "");
                    objVoucher.setAttribute("GRN_NO", "");
                    objVoucher.setAttribute("GRN_DATE", "");
                    objVoucher.setAttribute("ST_CATEGORY", "");
                    objVoucher.setAttribute("MODULE_ID", 800);
                    objVoucher.setAttribute("REMARKS", "");
                    if(CompanyID==2){
                    objVoucher.setAttribute("HIERARCHY_ID", 3794);
                    }else if(CompanyID==3){
                    objVoucher.setAttribute("HIERARCHY_ID", 749);    
                    }                    
                    if(CompanyID==2){
                    int FirstUserID = data.getIntValueFromDB("SELECT USER_ID FROM D_COM_HIERARCHY_RIGHTS WHERE COMPANY_ID="+CompanyID+" AND HIERARCHY_ID=3794 AND SR_NO=1");
                    objVoucher.setAttribute("FROM", FirstUserID);                    
                    objVoucher.setAttribute("TO", FirstUserID);
                    objVoucher.setAttribute("CREATED_BY", FirstUserID);   //New attribute set
                    }else if(CompanyID==3){
                        int FirstUserID = data.getIntValueFromDB("SELECT USER_ID FROM D_COM_HIERARCHY_RIGHTS WHERE COMPANY_ID="+CompanyID+" AND  HIERARCHY_ID=749 AND SR_NO=1");
                    objVoucher.setAttribute("FROM", FirstUserID);
                    objVoucher.setAttribute("TO", FirstUserID);
                    //objVoucher.setAttribute("CREATED_BY", FirstUserID);   //New attribute set
                    }
                    objVoucher.setAttribute("FROM_REMARKS", "");
                    objVoucher.setAttribute("APPROVAL_STATUS", "H"); //Hold Voucher

                    objVoucher.colVoucherItems.clear();

                    String PartyMainCode = "210034";

                    if (NetAmount > 0) {
                        VoucherSrNo++;
                        clsVoucherItem objVoucherItem = new clsVoucherItem();
                        objVoucherItem.setAttribute("SR_NO", VoucherSrNo);
                        objVoucherItem.setAttribute("EFFECT", "D");
                        objVoucherItem.setAttribute("ACCOUNT_ID", 1);
                        objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE", PartyMainCode);
                        objVoucherItem.setAttribute("SUB_ACCOUNT_CODE", PartyCode);
                        //objVoucherItem.setAttribute("AMOUNT", NetAmount);
                        objVoucherItem.setAttribute("AMOUNT", EITLERPGLOBAL.round(NetAmount, 0));
                        objVoucherItem.setAttribute("REMARKS", "");
                        objVoucherItem.setAttribute("PO_NO", "");
                        objVoucherItem.setAttribute("PO_DATE", "");
                        objVoucherItem.setAttribute("INVOICE_NO", InvoiceNo);
                        objVoucherItem.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                        objVoucherItem.setAttribute("INVOICE_AMOUNT", 0);
                        objVoucherItem.setAttribute("GRN_NO", "");
                        objVoucherItem.setAttribute("GRN_DATE", "");
                        objVoucherItem.setAttribute("MODULE_ID", 800);
                        objVoucherItem.setAttribute("REF_COMPANY_ID", CompanyID);
                        objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size() + 1), objVoucherItem);
                    }

                    if (GrossAmount > 0) {
                        VoucherSrNo++;
                        clsVoucherItem objVoucherItem = new clsVoucherItem();
                        objVoucherItem.setAttribute("SR_NO", VoucherSrNo);
                        objVoucherItem.setAttribute("EFFECT", "C");
                        objVoucherItem.setAttribute("ACCOUNT_ID", 1);
                        objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE", SalesAccountCode);
                        objVoucherItem.setAttribute("SUB_ACCOUNT_CODE", "");
                        //objVoucherItem.setAttribute("AMOUNT", GrossAmount);
                        objVoucherItem.setAttribute("AMOUNT", GrossAmount);
                        objVoucherItem.setAttribute("REMARKS", "");
                        objVoucherItem.setAttribute("PO_NO", "");
                        objVoucherItem.setAttribute("PO_DATE", "");
                        objVoucherItem.setAttribute("INVOICE_NO", InvoiceNo);
                        objVoucherItem.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                        objVoucherItem.setAttribute("INVOICE_AMOUNT", 0);
                        objVoucherItem.setAttribute("GRN_NO", "");
                        objVoucherItem.setAttribute("GRN_DATE", "");
                        objVoucherItem.setAttribute("MODULE_ID", 800);
                        objVoucherItem.setAttribute("REF_COMPANY_ID", CompanyID);
                        objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size() + 1), objVoucherItem);
                    }

                    tmpStmt = tmpConn.createStatement();
                    //rsDetail = tmpStmt.executeQuery("SELECT ISSUE_NO,CGST_RATE,SUM(CGST_AMT) AS CGST_AMT,SGST_RATE,SUM(SGST_AMT) AS SGST_AMT,IGST_RATE,SUM(IGST_AMT) AS IGST_AMT FROM DINESHMILLS.D_INV_ISSUE_DETAIL WHERE COMPANY_ID=" + CompanyID + " AND ISSUE_NO='" + DocNo + "' GROUP BY CGST_RATE,SGST_RATE,IGST_RATE");
                    rsDetail = tmpStmt.executeQuery("SELECT ISSUE_NO,CGST_RATE,SUM(CGST_AMT) AS CGST_AMT,SGST_RATE,SUM(SGST_AMT) AS SGST_AMT,IGST_RATE,SUM(IGST_AMT) AS IGST_AMT FROM D_INV_ISSUE_DETAIL WHERE COMPANY_ID=" + CompanyID + " AND ISSUE_NO='" + DocNo + "' GROUP BY CGST_RATE,SGST_RATE,IGST_RATE");
                    rsDetail.first();
                    if (rsDetail.getRow() > 0) {
                        while (!rsDetail.isAfterLast()) {

                            SGSTAmount = rsDetail.getDouble("SGST_AMT");
                            CGSTAmount = rsDetail.getDouble("CGST_AMT");
                            IGSTAmount = rsDetail.getDouble("IGST_AMT");

//                            SGSTCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_GL WHERE COMPANY_ID=2 AND GST_PERCENT=" + rsDetail.getString("SGST_RATE") + " AND GST_CATG='SGST'");
//                            CGSTCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_GL WHERE COMPANY_ID=2 AND GST_PERCENT=" + rsDetail.getString("CGST_RATE") + " AND GST_CATG='CGST'");
//                            IGSTCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_GL WHERE COMPANY_ID=2 AND GST_PERCENT=" + rsDetail.getString("IGST_RATE") + " AND GST_CATG='IGST'");
//                            
                            SGSTCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_GL WHERE GST_PERCENT=" + rsDetail.getString("SGST_RATE") + " AND GST_CATG='SGST'");
                            CGSTCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_GL WHERE GST_PERCENT=" + rsDetail.getString("CGST_RATE") + " AND GST_CATG='CGST'");
                            IGSTCode = data.getStringValueFromDB("SELECT MAIN_ACCOUNT_CODE FROM FINANCE.D_FIN_GL WHERE GST_PERCENT=" + rsDetail.getString("IGST_RATE") + " AND GST_CATG='IGST'");
                            
                            if (SGSTCode.equals(""))
                                SGSTCode="<SGST>";
                            if (CGSTCode.equals(""))
                                CGSTCode="<CGST>";
                            if (IGSTCode.equals(""))
                                IGSTCode="<IGST>";

                            if (IGSTAmount > 0) {
                                VoucherSrNo++;
                                clsVoucherItem objVoucherItem = new clsVoucherItem();
                                objVoucherItem.setAttribute("SR_NO", VoucherSrNo);
                                objVoucherItem.setAttribute("EFFECT", "C");
                                objVoucherItem.setAttribute("ACCOUNT_ID", 1);
                                objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE", IGSTCode);
                                objVoucherItem.setAttribute("SUB_ACCOUNT_CODE", "");
                                //objVoucherItem.setAttribute("AMOUNT", IGSTAmount);
                                objVoucherItem.setAttribute("AMOUNT", EITLERPGLOBAL.round(IGSTAmount, 0));
                                objVoucherItem.setAttribute("REMARKS", "");
                                objVoucherItem.setAttribute("PO_NO", "");
                                objVoucherItem.setAttribute("PO_DATE", "");
                                objVoucherItem.setAttribute("INVOICE_NO", InvoiceNo);
                                objVoucherItem.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                                objVoucherItem.setAttribute("INVOICE_AMOUNT", 0);
                                objVoucherItem.setAttribute("GRN_NO", "");
                                objVoucherItem.setAttribute("GRN_DATE", "");
                                objVoucherItem.setAttribute("MODULE_ID", 800);
                                objVoucherItem.setAttribute("REF_COMPANY_ID", CompanyID);
                                objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size() + 1), objVoucherItem);
                            }
                            if (CGSTAmount > 0) {
                                VoucherSrNo++;
                                clsVoucherItem objVoucherItem = new clsVoucherItem();
                                objVoucherItem.setAttribute("SR_NO", VoucherSrNo);
                                objVoucherItem.setAttribute("EFFECT", "C");
                                objVoucherItem.setAttribute("ACCOUNT_ID", 1);
                                objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE", CGSTCode);
                                objVoucherItem.setAttribute("SUB_ACCOUNT_CODE", "");
                                //objVoucherItem.setAttribute("AMOUNT", CGSTAmount);
                                objVoucherItem.setAttribute("AMOUNT", EITLERPGLOBAL.round(CGSTAmount, 0));
                                objVoucherItem.setAttribute("REMARKS", "");
                                objVoucherItem.setAttribute("PO_NO", "");
                                objVoucherItem.setAttribute("PO_DATE", "");
                                objVoucherItem.setAttribute("INVOICE_NO", InvoiceNo);
                                objVoucherItem.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                                objVoucherItem.setAttribute("INVOICE_AMOUNT", 0);
                                objVoucherItem.setAttribute("GRN_NO", "");
                                objVoucherItem.setAttribute("GRN_DATE", "");
                                objVoucherItem.setAttribute("MODULE_ID", 800);
                                objVoucherItem.setAttribute("REF_COMPANY_ID", CompanyID);
                                objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size() + 1), objVoucherItem);
                            }

                            if (SGSTAmount > 0) {
                                VoucherSrNo++;
                                clsVoucherItem objVoucherItem = new clsVoucherItem();
                                objVoucherItem.setAttribute("SR_NO", VoucherSrNo);
                                objVoucherItem.setAttribute("EFFECT", "C");
                                objVoucherItem.setAttribute("ACCOUNT_ID", 1);
                                objVoucherItem.setAttribute("MAIN_ACCOUNT_CODE", SGSTCode);
                                objVoucherItem.setAttribute("SUB_ACCOUNT_CODE", "");
                                //objVoucherItem.setAttribute("AMOUNT", SGSTAmount);
                                objVoucherItem.setAttribute("AMOUNT",EITLERPGLOBAL.round(SGSTAmount, 0));
                                objVoucherItem.setAttribute("REMARKS", "");
                                objVoucherItem.setAttribute("PO_NO", "");
                                objVoucherItem.setAttribute("PO_DATE", "");
                                objVoucherItem.setAttribute("INVOICE_NO", InvoiceNo);
                                objVoucherItem.setAttribute("INVOICE_DATE", EITLERPGLOBAL.formatDate(InvoiceDate));
                                objVoucherItem.setAttribute("INVOICE_AMOUNT", 0);
                                objVoucherItem.setAttribute("GRN_NO", "");
                                objVoucherItem.setAttribute("GRN_DATE", "");
                                objVoucherItem.setAttribute("MODULE_ID", 800);
                                objVoucherItem.setAttribute("REF_COMPANY_ID", CompanyID);
                                objVoucher.colVoucherItems.put(Integer.toString(objVoucher.colVoucherItems.size() + 1), objVoucherItem);
                            }

                            rsDetail.next();
                        }
                    }

                    objVoucher.DoNotValidateAccounts = true;

                    if (objVoucher.Insert()) {
                        System.out.println("Sales Invoice SJ Posted ");
//                        return true;
                    } else {
//                        return false;
                    }

                    rsTmp.next();
                }
            }
            rsTmp.close();
            return false;
        } catch (Exception e) {
            return false;
        }
    }
  
    
}


