/*
 * frmRptGroupwiseStock.java
 *
 * Created on January 12, 2006, 12:24 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */
import EITLERP.*;
import java.sql.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import EITLERP.Utils.*;
import java.net.*;
import EITLERP.Finance.UtilFunctions;
import TReportWriter.*;
import javax.swing.*;
import java.util.*;
import java.util.Date;
import java.text.*;

public class frmRMGroupStock extends javax.swing.JApplet {
    
    private EITLComboModel cmbItemTypeModel=new EITLComboModel();
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    
    
    /** Initializes the applet frmRptGroupwiseStock */
    public void init() {
        setSize(450,185);
        initComponents();
        GenerateCombo();
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ReportOptions = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        cmdSummary = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbItemType = new javax.swing.JComboBox();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel5.setText("To");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(180, 70, 20, 15);

        txtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtToDateFocusLost(evt);
            }
        });

        getContentPane().add(txtToDate);
        txtToDate.setBounds(210, 70, 90, 20);

        cmdPrint.setText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPrint);
        cmdPrint.setBounds(330, 40, 100, 30);

        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        getContentPane().add(cmdExit);
        cmdExit.setBounds(330, 120, 100, 25);

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("RM Groupwise Stock Value Report");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(8, 8, 269, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(1, 0, 450, 30);

        jLabel6.setText("From Date");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 70, 70, 15);

        txtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFromDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFromDateFocusLost(evt);
            }
        });

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(80, 70, 90, 20);

        cmdSummary.setText("Summary");
        cmdSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSummaryActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSummary);
        cmdSummary.setBounds(330, 80, 100, 30);

        jLabel2.setText("Item Type");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 40, 70, 15);

        getContentPane().add(cmbItemType);
        cmbItemType.setBounds(80, 40, 170, 24);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 160, 450, 22);

    }//GEN-END:initComponents
    
    private void txtToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusLost
        // TODO add your handling code here:
        lblStatus.setText("");
    }//GEN-LAST:event_txtToDateFocusLost
    
    private void txtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToDateFocusGained
        // TODO add your handling code here:
        lblStatus.setText("Please Enter To Date");
    }//GEN-LAST:event_txtToDateFocusGained
    
    private void txtFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusLost
        // TODO add your handling code here:
        lblStatus.setText("");
    }//GEN-LAST:event_txtFromDateFocusLost
    
    private void txtFromDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFromDateFocusGained
        // TODO add your handling code here:
        lblStatus.setText("Please Enter From Date");
    }//GEN-LAST:event_txtFromDateFocusGained
    
    private void cmdSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSummaryActionPerformed
        // TODO add your handling code here:
        
        if(!Validate()) {
            return;
        }
        
        GenerateReportWAvgRMItems();
        try {
            if(EITLERPGLOBAL.getComboCode(cmbItemType)==2) {
                GenerateStockReportRMSummary();
            }
            else if(EITLERPGLOBAL.getComboCode(cmbItemType)==3)
                GenerateStockReportSummarySTM();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdSummaryActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        
        //synchronized(this) {
        if(!Validate()) {
            return;
        }
        
        HashMap list = new clsCheckIssueValue().checkIssueValue(EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim()), EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim()));
        if(list.size()>0) {
            GenerateErrorReport(list);
            
            int Conform = JOptionPane.showConfirmDialog(null,"Error in Issue Value Do You want to Continue....","Message..",JOptionPane.YES_NO_OPTION);
            if(Conform != JOptionPane.YES_OPTION) {
                return;
            }
            
        }
        
        GenerateReportWAvgRMItems();
        
        try {
            if(EITLERPGLOBAL.getComboCode(cmbItemType)==2) {
                GenerateStockReport();
            }
            else if(EITLERPGLOBAL.getComboCode(cmbItemType)==3)
                GenerateStockReportSTM();
            //GenerateStockJobworkReport();
        }
        catch(Exception e) {
            
        }
        // }
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ReportOptions;
    private javax.swing.JComboBox cmbItemType;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSummary;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateReportWAvgRMItems() {
        
        //DELEETE FROM D_COM_REPORT_MASTER WHERE USER ID
        data.Execute("DELETE FROM D_COM_REPORT_MASTER WHERE COMPANY_ID = "+EITLERPGLOBAL.gCompanyID+" AND USER_ID = "+EITLERPGLOBAL.gUserID+" ");
        
        //new Thread() {
        
        //public void run() {
        ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsSource,rsCategory,rsMainCategory;
        
        String strSQL="";
        String strCondition="";
        Connection tmpConn;
        tmpConn=data.getConn();
        
        long StockEntryNo=0;
        String StockEntryDate="";
        
        clsItemStock objItemStock=new clsItemStock();
        
        try {
            
            
            
            //======= Find the last cut-off date stock entry =================//
            rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ORDER BY ENTRY_DATE DESC");
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                StockEntryNo=rsTmp.getLong("ENTRY_NO");
                StockEntryDate=rsTmp.getString("ENTRY_DATE");
            }
            //================================================================//
            
            
            
            
            
            //============ Processing Categorywise Valuation =============//
            double TotalOpening=0;
            double TotalReceipt=0;
            double TotalIssue=0;
            double TotalValue=0;
            double writeoffTotal=0;
            double finalTotal=0;
            double TotalOpeningQty=0;
            double TotalReceiptQty=0;
            double TotalIssueQty=0;
            double TotalExcise=0;
            
            String Exception1="";
            String Exception2="";
            String MainCategory="";
            
            
            int ItemType = EITLERPGLOBAL.getComboCode(cmbItemType);
            String Condition = "";
            if(ItemType == 2) {
                Condition=" AND CATEGORY_ID <> 13 ";
            }
            else if(ItemType == 3) {
                Condition=" AND CATEGORY_ID = 13 ";
            }
            
            
            rsCategory=data.getResult("SELECT * FROM D_INV_ITEM_CATEGORY WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND CATEGORY_TYPE= 2 " + Condition + " ORDER BY CATEGORY_ID");
            rsCategory.first();
            
            if(rsCategory.getRow()>0) {
                while(!rsCategory.isAfterLast()) {
                    
                    TotalOpening=0;
                    TotalReceipt=0;
                    TotalIssue=0;
                    TotalOpeningQty=0;
                    TotalReceiptQty=0;
                    TotalIssueQty=0;
                    writeoffTotal=0;
                    finalTotal=0;
                    TotalExcise=0;
                    
                    String CategoryID=rsCategory.getString("CATEGORY_ID");
                    String groupID=rsCategory.getString("CATEGORY_ID");
                    
                    rsItem=data.getResult("SELECT ITEM_ID FROM D_INV_ITEM_MASTER WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND CATEGORY_ID="+CategoryID+" AND APPROVED = 1 AND CANCELLED=0");
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        
                        while(!rsItem.isAfterLast()) {
                            
                            String ItemID=rsItem.getString("ITEM_ID");
                            
                            if(ItemID.equals("RM12125003")) {
                                boolean halt=true;
                            }
                            
                            //Opening Value
                            strSQL="SELECT ROUND(SUM(A.OPENING_VALUE),3) AS OPENING_VALUE,ROUND(SUM(A.OPENING_QTY),3) AS OPENING_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_COM_OPENING_STOCK_DETAIL A, ";
                            strSQL+="D_INV_ITEM_MASTER B ";
                            strSQL+="WHERE ";
                            strSQL+=" A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " ";
                            strSQL+="AND A.ITEM_ID=B.ITEM_ID AND ";
                            strSQL+="B.APPROVED=1 AND B.CANCELLED=0 ";
                            strSQL+="AND ENTRY_NO="+StockEntryNo+" AND A.ITEM_ID = '"+ItemID+"' ";
                            
                            rsTmp=data.getResult(strSQL);
                            TotalOpening=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0.0),3);
                            TotalOpeningQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0.0),3);
                            
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),3) AS RECEIPT_VALUE,ROUND(SUM(B.QTY),3) AS RECEIPT_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                            
                            rsTmp=data.getResult(strSQL);
                            TotalOpening=EITLERPGLOBAL.round(TotalOpening + UtilFunctions.getDouble(rsTmp,"RECEIPT_VALUE", 0.0),3);
                            TotalOpeningQty=EITLERPGLOBAL.round(TotalOpeningQty + UtilFunctions.getDouble(rsTmp,"RECEIPT_QTY", 0.0),3);
                            
                            
                            //Get Issues
                            strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),3) AS ISSUE_VALUE,ROUND(SUM(B.QTY),3) AS ISSUE_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_ISSUE_HEADER A, ";
                            strSQL+="D_INV_ISSUE_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                            strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                            strSQL+="A.ISSUE_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="B.ITEM_CODE = '"+ItemID+"' ";
                            
                            rsTmp=data.getResult(strSQL);
                            TotalOpening=EITLERPGLOBAL.round(TotalOpening-(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0.0)),3);
                            TotalOpeningQty=EITLERPGLOBAL.round(TotalOpeningQty-(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0.0)),3);
                            
                            //Get STM Issues
                            strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),3) AS ISSUE_VALUE,ROUND(SUM(B.QTY),3) AS ISSUE_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+StockEntryDate+"' AND ";
                            strSQL+="A.STM_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                            
                            rsTmp=data.getResult(strSQL);
                            TotalOpening=EITLERPGLOBAL.round(TotalOpening-(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0.0)),3);
                            TotalOpeningQty=EITLERPGLOBAL.round(TotalOpeningQty-(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0.0)),3);
                            
                            
                            //Now get Actual Receipts
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),3) AS RECEIPT_VALUE,ROUND(SUM(QTY),3) AS RECEIPT_QTY,ROUND(SUM(B.COLUMN_8_AMT),3) AS MODVAT ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                            strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                            
                            
                            
                            rsTmp=data.getResult(strSQL);
                            TotalReceipt=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"RECEIPT_VALUE",0),3);
                            TotalReceiptQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"RECEIPT_QTY",0),3);
                            TotalExcise=0;//EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"MODVAT", 0),3);
                            
                            
                            
                            //Get Issues
                            strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),3) AS ISSUE_VALUE,ROUND(SUM(QTY),3) AS ISSUE_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_ISSUE_HEADER A, ";
                            strSQL+="D_INV_ISSUE_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                            strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                            strSQL+="A.ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_CODE = '"+ItemID+"' ";
                            
                            rsTmp=data.getResult(strSQL);
                            TotalIssue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0),3);
                            TotalIssueQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0),3);
                            
                            //Get STM Issues
                            strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),3) AS ISSUE_VALUE,ROUND(SUM(QTY),3) AS ISSUE_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                            strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                            
                            rsTmp=data.getResult(strSQL);
                            
                            TotalIssue=EITLERPGLOBAL.round(TotalIssue+UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0),3);
                            TotalIssueQty=EITLERPGLOBAL.round(TotalIssueQty+UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0),3);
                            
                            finalTotal=EITLERPGLOBAL.round(TotalOpening+TotalReceipt-TotalIssue,3);
                            double finalQty=EITLERPGLOBAL.round(TotalOpeningQty+TotalReceiptQty-TotalIssueQty,3);
                            
                            
                            String qry="INSERT INTO D_COM_REPORT_MASTER (COMPANY_ID,USER_ID,COLUMN_1,COLUMN_2,COLUMN_3,COLUMN_4,COLUMN_5,COLUMN_6,COLUMN_7,COLUMN_8)" +
                            "VALUES('"+EITLERPGLOBAL.gCompanyID+"','"+EITLERPGLOBAL.gUserID+"','"+ItemID.trim()+"','"+TotalOpeningQty+"','"+TotalOpening+"','"+TotalReceiptQty+"','"+TotalReceipt+"','"+TotalIssueQty+"','"+TotalIssue+"','"+TotalExcise+"')";
                            data.Execute(qry);
                            
                            // by muffy 06/05/2010
                            //data.Execute("UPDATE D_INV_ITEM_MASTER SET OPENING_VALUE=0.0,RECEIPT_VALUE=0.0,ISSUE_VALUE=0.0,OPENING_QTY=0.0,TOTAL_RECEIPT_QTY=0.0,TOTAL_ISSUED_QTY=0.0,EXCISE=0.0 WHERE ITEM_ID='"+ItemID.trim()+"' ");
                            
                            // data.Execute("UPDATE D_INV_ITEM_MASTER SET OPENING_VALUE="+TotalOpening+",RECEIPT_VALUE="+TotalReceipt+",ISSUE_VALUE="+TotalIssue+",OPENING_QTY="+TotalOpeningQty+",TOTAL_RECEIPT_QTY="+TotalReceiptQty+",TOTAL_ISSUED_QTY="+TotalIssueQty+",EXCISE="+TotalExcise+" WHERE ITEM_ID='"+ItemID.trim()+"' ");
                            
                            rsItem.next();
                        }
                        
                    }
                    
                    
                    rsCategory.next();
                }
            }
            //==============================================================//
            
        }
        catch(Exception e) {
            e.printStackTrace();
            
            
        }
    }
    
    private void GenerateStockReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            int ItemType = EITLERPGLOBAL.getComboCode(cmbItemType);
            String Condition = "";
            if(ItemType == 2) {
                Condition = " A.CATEGORY_ID <> '13' ";
            }
            else if(ItemType == 3) {
                Condition = " A.CATEGORY_ID = '13' ";
            }
            
            
            strSQL="SELECT E.COLUMN_1,A.ITEM_DESCRIPTION,B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,ROUND(E.COLUMN_3,3) AS OPENING_VALUE, "+
            "ROUND(E.COLUMN_5,3) AS RECEIPT_VALUE,ROUND(E.COLUMN_7,3) AS ISSUE_VALUE, "+
            "IF((ROUND(E.COLUMN_3+E.COLUMN_5-E.COLUMN_7,3) >0), ROUND(E.COLUMN_3+E.COLUMN_5-E.COLUMN_7,3),0) AS CLOSING_VALUE, "+
            "ROUND(E.COLUMN_2,3) AS OPENING_QTY, ROUND(E.COLUMN_4,3) AS TOTAL_RECEIPT_QTY,ROUND(E.COLUMN_6,3) AS TOTAL_ISSUED_QTY, "+
            "ROUND(E.COLUMN_2+E.COLUMN_4-E.COLUMN_6,3) AS CLOSING_QTY,ROUND(E.COLUMN_8,3) AS EXCISE,A.COMPANY_ID  "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C, "+
            "D_COM_COMPANY_MASTER D,D_COM_REPORT_MASTER E "+
            "WHERE A.CANCELLED = 0 AND E.USER_ID = "+EITLERPGLOBAL.gUserID+" AND A.APPROVED = 1 AND A.COMPANY_ID =D.COMPANY_ID AND E.COLUMN_1 = A.ITEM_ID "+
            "AND SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND C.CATEGORY_ID =A.CATEGORY_ID AND " + Condition + "  "+
            "AND  SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" "+
            //"AND (A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0)  "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            System.out.println("sql="+strSQL);
            
            
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            String PrintLine = "CATEGORY" + "~" + "ITEM_ID" + "~"+ "ITEM_DESCRIPTION" + "~" + "OPENING_QTY" + "~" + "OPENING_VALUE"+"~"+
            "RECEIPT QTY" + "~" + "RECEIPT VALUE" + "~" + "RECEIPT STM QTY" + "~" + "RECEIPT STM VALUE" + "~" + "ISSUE QTY" + "~" + "ISSUE VALUE" +"~" + 
            "CLOSING QTY" +"~"+ "CLOSING VALUE" ;
            System.out.println(PrintLine);
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"COLUMN_1","");
                    
                    if(ItemID.equals("RM11147001")) {
                        boolean t = false;
                    }
                    //String Category =
                    if(UtilFunctions.getString(rsTmp,"CATEGORY_NAME","").equals("Import Yarn")){
                        boolean t = true;
                    }
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    //MAKE COMMENT BY PRATHMESH ON 05-05-2010
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),3) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),3)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (ROUND(SUM(QTY),3) IS NULL,0,ROUND(SUM(QTY),3)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    strSQL+="AND A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),3);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),3);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")) - ReceiptSTMQty,3);
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")) - ReceiptSTMValue,3);
                    
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),3) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),3)) AS ISSUE_VALUE, ";
                    strSQL+="IF (ROUND(SUM(QTY),3) IS NULL,0,ROUND(SUM(QTY),3)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),3);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),3);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")) - IssueSTMQty,3);
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")) - IssueSTMValue,3);
                    
                    if(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3) > 0.0 && EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3) <=0) {
                        JOptionPane.showMessageDialog(null,"Opening Value is for the Item ID:"+ItemID+" is less than or equal to zero ");
                    }
                    if(ReceiptQty > 0 && ReceiptValue <=0) {
                        JOptionPane.showMessageDialog(null,"Receipt Value is for the Item ID:"+ItemID+" is less than or equal to zero ");
                    }
                    if(IssueQty > 0 && IssueValue <=0) {
                        JOptionPane.showMessageDialog(null,"Issue Value is for the Item ID:"+ItemID+" is less than or equal to zero ");
                    }
                    if(IssueSTMQty > 0 && IssueSTMValue <=0) {
                        JOptionPane.showMessageDialog(null,"Issue STM Value is for the Item ID:"+ItemID+" is less than or equal to zero ");
                    }
                    
                    
                    if(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3) ==0 && ReceiptQty==0 && ReceiptSTMQty==0 && IssueQty==0 && IssueSTMQty==0 && EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),3) == 0 && EITLERPGLOBAL.round(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),3) - IssueQty,3) == 0 ) {
                        rsTmp.next();
                        continue;
                    }
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"COLUMN_1",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3)));
                    if(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY",""))==0) {
                        objRow.setValue("OPENING_VALUE","0");
                    } else {
                        objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3)));
                    }
                    
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    if(ReceiptQty==0) {
                        objRow.setValue("RECEIPT_VALUE","0");
                        ReceiptValue=0;
                    } else {
                        objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    }
                    
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    if(ReceiptSTMQty==0) {
                        objRow.setValue("RECEIPT_STM_VALUE","0");
                        ReceiptSTMValue=0;
                    } else {
                        objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    }
                    
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    if(IssueQty==0) {
                        objRow.setValue("ISSUE_VALUE","0");
                        IssueValue=0;
                    } else {
                        objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    }
                    
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    if(IssueSTMQty==0) {
                        objRow.setValue("ISSUE_STM_VALUE","0");
                        IssueSTMValue=0;
                    } else {
                        objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    }
                    
                    
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),3)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),3)));
                    double CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),3) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),3) - IssueQty,3));
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,3)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),3) - IssueValue,3)));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    objReportData.AddRow(objRow);
                    PrintLine = UtilFunctions.getString(rsTmp,"CATEGORY_NAME","") + "~" + UtilFunctions.getString(rsTmp,"COLUMN_1","") + "~" +
                    UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION","")+"~"+UtilFunctions.getString(rsTmp,"OPENING_QTY","")+"~"+UtilFunctions.getString(rsTmp,"OPENING_VALUE","")+"~"+
                    ReceiptQty+"~"+ReceiptValue+"~"+ReceiptSTMQty+"~"+ReceiptSTMValue+"~"+IssueQty+"~"+IssueValue+"~"+CloseQty+"~"+EITLERPGLOBAL.round(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),3) - IssueValue,3);
                    System.out.println(PrintLine);
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    
    
    
    private void GenerateStockReportRMSummary() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            int ItemType = EITLERPGLOBAL.getComboCode(cmbItemType);
            String Condition = "";
            if(ItemType == 2) {
                Condition = " A.CATEGORY_ID <> '13' ";
            }
            else if(ItemType == 3) {
                Condition = " A.CATEGORY_ID = '13' ";
            }
            
            
            strSQL="SELECT B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,SUM(E.COLUMN_3) AS OPENING_VALUE, "+
            "SUM(E.COLUMN_5) AS RECEIPT_VALUE,SUM(E.COLUMN_7) AS ISSUE_VALUE, "+
            "IF(((SUM(E.COLUMN_3)+SUM(E.COLUMN_5)-SUM(E.COLUMN_7)) >0), SUM(E.COLUMN_3)+SUM(E.COLUMN_5)-SUM(E.COLUMN_7),0) AS CLOSING_VALUE, "+
            "SUM(E.COLUMN_2) AS OPENING_QTY, SUM(E.COLUMN_4) AS TOTAL_RECEIPT_QTY,SUM(E.COLUMN_6) AS TOTAL_ISSUED_QTY, "+
            "(SUM(E.COLUMN_2)+SUM(E.COLUMN_4)-SUM(E.COLUMN_6)) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID  "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C, "+
            "D_COM_COMPANY_MASTER D,D_COM_REPORT_MASTER E "+
            "WHERE A.CANCELLED = 0 AND E.USER_ID = "+EITLERPGLOBAL.gUserID+" AND APPROVED = 1 AND A.COMPANY_ID =D.COMPANY_ID AND E.COLUMN_1 = A.ITEM_ID "+
            "AND SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND C.CATEGORY_ID =A.CATEGORY_ID AND " + Condition + "  "+
            "AND  SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" "+
            //"AND (A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0)  "+
            "GROUP BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"COLUMN_1","");
                    
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    //MAKE COMMENT BY PRATHMESH ON 05-05-2010
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),3) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),3)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (ROUND(SUM(QTY),3) IS NULL,0,ROUND(SUM(QTY),3)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    strSQL+="AND A.SUPP_ID IN('888888','999999') ";
                    System.out.println(strSQL);
                    
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),3);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),3);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),3) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),3) - ReceiptSTMValue;
                    
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),3) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),3)) AS ISSUE_VALUE, ";
                    strSQL+="IF (ROUND(SUM(QTY),3) IS NULL,0,ROUND(SUM(QTY),3)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),3);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),3);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),3) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),3) - IssueSTMValue;
                    if(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3) > 0.0 && EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3) <=0) {
                        JOptionPane.showMessageDialog(null,"Opening Value is for the Item ID:"+UtilFunctions.getString(rsTmp,"ITEM_ID","")+" is less than or equal to zero ");
                    }
                    
                    if(ReceiptQty > 0 && ReceiptValue <=0) {
                        JOptionPane.showMessageDialog(null,"Receipt Value is for the Item ID:"+UtilFunctions.getString(rsTmp,"ITEM_ID","")+" is less than or equal to zero ");
                    }
                    if(IssueQty > 0 && IssueValue <=0) {
                        JOptionPane.showMessageDialog(null,"Issue Value is for the Item ID:"+UtilFunctions.getString(rsTmp,"ITEM_ID","")+" is less than or equal to zero ");
                    }
                    if(IssueSTMQty > 0 && IssueSTMValue <=0) {
                        JOptionPane.showMessageDialog(null,"Issue STM Value is for the Item ID:"+UtilFunctions.getString(rsTmp,"ITEM_ID","")+" is less than or equal to zero ");
                    }
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"COLUMN_1",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),3)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),3)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),3) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),3) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,3)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),3) - IssueValue));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItemsSummary.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void GenerateStockReportSTM() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            int ItemType = EITLERPGLOBAL.getComboCode(cmbItemType);
            String Condition = "";
            if(ItemType == 2) {
                Condition = " A.CATEGORY_ID <> '13' ";
            }
            else if(ItemType == 3) {
                Condition = " A.CATEGORY_ID = '13' ";
            }
            
            
            strSQL="SELECT E.COLUMN_1,A.ITEM_DESCRIPTION,B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,E.COLUMN_3 AS OPENING_VALUE, "+
            "E.COLUMN_5 AS RECEIPT_VALUE,E.COLUMN_7 AS ISSUE_VALUE, "+
            "IF(((E.COLUMN_3+E.COLUMN_5-E.COLUMN_7) >0), E.COLUMN_3+E.COLUMN_5-E.COLUMN_7,0) AS CLOSING_VALUE, "+
            "E.COLUMN_2 AS OPENING_QTY, E.COLUMN_4 AS TOTAL_RECEIPT_QTY,E.COLUMN_6 AS TOTAL_ISSUED_QTY,D.CITY, "+
            "(E.COLUMN_2+E.COLUMN_4-E.COLUMN_6) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID  "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C, "+
            "D_COM_COMPANY_MASTER D,D_COM_REPORT_MASTER E "+
            "WHERE A.CANCELLED = 0 AND E.USER_ID = "+EITLERPGLOBAL.gUserID+" AND APPROVED = 1 AND A.COMPANY_ID =D.COMPANY_ID AND E.COLUMN_1 = A.ITEM_ID "+
            "AND SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND C.CATEGORY_ID =A.CATEGORY_ID AND " + Condition + "  "+
            "AND  SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" "+
            //"AND (A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0)  "+ //updated by ashutosh on basis of requirement of Deepak shah    //condition commented because some items not coming in report which are received from ankleshwar during 01/09/2018 to 30/11/2018 
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"COLUMN_1","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),3) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),3)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        //ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),3);
                        //ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),3);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),3) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),3) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),3) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),3)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        //IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),3);
                        //IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),3);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),3) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),3) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"COLUMN_1",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),3)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),3)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),3) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),3) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,3)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),3) - IssueValue ));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void GenerateStockReportSummarySTM() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            int ItemType = EITLERPGLOBAL.getComboCode(cmbItemType);
            String Condition = "";
            if(ItemType == 2) {
                Condition = " A.CATEGORY_ID <> '13' ";
            }
            else if(ItemType == 3) {
                Condition = " A.CATEGORY_ID = '13' ";
            }
            
            
            strSQL="SELECT B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,SUM(E.COLUMN_3) AS OPENING_VALUE, "+
            "SUM(E.COLUMN_5) AS RECEIPT_VALUE,SUM(E.COLUMN_7) AS ISSUE_VALUE, "+
            "IF(((SUM(E.COLUMN_3)+SUM(E.COLUMN_5)-SUM(E.COLUMN_7)) >0), SUM(E.COLUMN_3)+SUM(E.COLUMN_5)-SUM(E.COLUMN_7),0) AS CLOSING_VALUE, "+
            "SUM(E.COLUMN_2) AS OPENING_QTY, SUM(E.COLUMN_4) AS TOTAL_RECEIPT_QTY,SUM(E.COLUMN_6) AS TOTAL_ISSUED_QTY, "+
            "(SUM(E.COLUMN_2)+SUM(E.COLUMN_4)-SUM(E.COLUMN_6)) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID  "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C, "+
            "D_COM_COMPANY_MASTER D,D_COM_REPORT_MASTER E "+
            "WHERE A.CANCELLED = 0 AND E.USER_ID = "+EITLERPGLOBAL.gUserID+" AND APPROVED = 1 AND A.COMPANY_ID =D.COMPANY_ID AND E.COLUMN_1 = A.ITEM_ID "+
            "AND SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND C.CATEGORY_ID =A.CATEGORY_ID AND " + Condition + "  "+
            "AND  SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" "+
            "AND (A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0)  "+
            "GROUP BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            
            System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"ITEM_ID","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),3) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),3)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        //ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),3);
                        //ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),3);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),3) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),3) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),3) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),3)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        //IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),3);
                        //IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),3);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),3) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),3) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"ITEM_ID",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),3)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),3)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),3) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),3) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,3)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),3) - IssueValue ));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItemsSummary.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void GenerateStockJobworkReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            strSQL = "SELECT A.ITEM_ID,A.ITEM_DESCRIPTION,B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,A.OPENING_VALUE, "+
            "A.RECEIPT_VALUE,A.ISSUE_VALUE,IF(((A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE) >0), "+
            "A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE,0) AS CLOSING_VALUE,A.OPENING_QTY, "+
            "A.TOTAL_RECEIPT_QTY,A.TOTAL_ISSUED_QTY,D.CITY, "+
            "(A.OPENING_QTY+A.TOTAL_RECEIPT_QTY-A.TOTAL_ISSUED_QTY) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D "+
            "WHERE A.ITEM_ID LIKE 'RM%' AND A.APPROVED = 1 AND A.CANCELLED = 0 AND A.COMPANY_ID =D.COMPANY_ID AND "+
            "SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND "+
            "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND  "+
            "SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND "+
            "A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND A.CATEGORY_ID = '14' AND "+
            "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            
            //System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"ITEM_ID","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),3) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),3)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),3);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),3);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),3) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),3) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),3) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),3)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND A.STM_TYPE=B.STM_TYPE AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),3);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),3);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),3) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),3) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"ITEM_ID",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),3)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),3)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),3)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),3)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),3) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),3) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,3)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),3) - IssueValue));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),3)));
                    }
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    
    private void GenerateCombo() {
        try {
            
            cmbItemTypeModel=new EITLComboModel();
            cmbItemType.removeAll();
            cmbItemType.setModel(cmbItemTypeModel);
            
            ComboData objData1=new ComboData();
            objData1.Code=2;
            objData1.Text="Raw Material";
            cmbItemTypeModel.addElement(objData1);
            
            objData1=new ComboData();
            objData1.Code=3;
            objData1.Text="Raw Material STM";
            cmbItemTypeModel.addElement(objData1);
            
        }
        catch(Exception e) {
            
        }
    }
    
    private void GenerateErrorReport(HashMap ReportList) {
        try {
            
            TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
            
            objData.AddColumn("SR_NO");
            objData.AddColumn("ISSUE_NO");
            objData.AddColumn("ISSUE_DATE");
            objData.AddColumn("ISSUE_SR_NO");
            objData.AddColumn("QTY");
            objData.AddColumn("ITEM_ID");
            objData.AddColumn("ITEM_DESC");
            
            
            TReportWriter.SimpleDataProvider.TRow objRow=objData.newRow();
            clsCheckIssueValue ObjItem = new clsCheckIssueValue();
            
            for(int i=1;i<=ReportList.size();i++) {
                ObjItem = (clsCheckIssueValue)ReportList.get(Integer.toString(i));
                objRow=objData.newRow();
                objRow.setValue("SR_NO",ObjItem.getAttribute("SR_NO").getString());
                objRow.setValue("ISSUE_NO",ObjItem.getAttribute("ISSUE_NO").getString());
                objRow.setValue("ISSUE_DATE",EITLERPGLOBAL.formatDate(ObjItem.getAttribute("ISSUE_DATE").getString()));
                objRow.setValue("ISSUE_SR_NO",ObjItem.getAttribute("ISSUE_SR_NO").getString());
                objRow.setValue("QTY",ObjItem.getAttribute("ISSUE_QTY").getString());
                objRow.setValue("ITEM_ID",ObjItem.getAttribute("ITEM_ID").getString());
                objRow.setValue("ITEM_DESC",clsItem.getItemName(EITLERPGLOBAL.gCompanyID,ObjItem.getAttribute("ITEM_ID").getString()));
                
                objData.AddRow(objRow);
            }
            
            HashMap Parameters=new HashMap();
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptIssueErrorReport.rpt",Parameters,objData);
            
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
    private boolean Validate() {
        try {
            
            if((!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                JOptionPane.showMessageDialog(null,"Invalid To date. Please enter valid date");
                return false;
            }
            
            if((!EITLERPGLOBAL.isDate(txtFromDate.getText()))) {
                JOptionPane.showMessageDialog(null,"Invalid From date. Please enter valid date");
                return false;
            }
            
            if(txtFromDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter From Date");
                return false;
            }
            
            if(txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please Enter To Date");
                return false;
            }
            
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            Date fromDate = df.parse(txtFromDate.getText());
            Date RestrictDate = df.parse("01/10/2009");
            
            
            if(fromDate.before(RestrictDate)) {
                JOptionPane.showMessageDialog(null,"From Date must be equals or after 01/10/2009");
                return false;
            }
        }
        catch(Exception e) {
            return false;
        }
        return true;
    }
    
}

