/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
//23/08/2020
package EITLERP.Stores;

/**
 *
 * @author  komal
 */

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.*;
import EITLERP.FeltSales.common.MailNotification;
import java.io.*;
import java.sql.ResultSet;


public class frmPaymentRequisition extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsPaymentRequisition ObjPaymentReq;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbForDeptModel;
    private EITLComboModel cmbBuyerModel;
    private EITLTableModel DataModelA;
    private EITLTableModel DataModelPaidAmt;
    
    private EITLTableModel DataModel=new EITLTableModel();
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    private EITLTableCellRenderer CellPainter=new EITLTableCellRenderer();
    
    private String OldFileName="";
    
    String cellLastValue="";
    int hierarchySelected =0;
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        //setSize(665,570);
        GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
        int scrwidth = gd.getDisplayMode().getWidth();
        int scrheight = gd.getDisplayMode().getHeight();
        setSize(scrwidth, scrheight);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        // ((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        
        GenerateCombos();
        ObjPaymentReq=new clsPaymentRequisition();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjPaymentReq.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjPaymentReq.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjPaymentReq.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);
        
        cmdOpenDoc.setVisible(false); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        mnuGSTUploaded = new javax.swing.JMenuItem();
        mnuGSTNotUploaded = new javax.swing.JMenuItem();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPayReqSlipNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPayReqSlipDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtSupplierCode = new javax.swing.JTextField();
        cmdOpenDoc = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtPJVAmt = new javax.swing.JTextField();
        txtGRNDate = new javax.swing.JTextField();
        txtBillNo = new javax.swing.JTextField();
        txtBillDate = new javax.swing.JTextField();
        txtPJV = new javax.swing.JTextField();
        txtPJVDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtGRN = new javax.swing.JTextField();
        txtPONo = new javax.swing.JTextField();
        txtPODate = new javax.swing.JTextField();
        txtDueDate = new javax.swing.JTextField();
        lblSupplierName = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        opgFromPJV = new javax.swing.JRadioButton();
        opgFromPO = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePaidAmounts = new javax.swing.JTable();
        chkTaxable = new javax.swing.JCheckBox();
        chkIGST = new javax.swing.JCheckBox();
        txtPaidAmt = new javax.swing.JTextField();
        txtTaxable = new javax.swing.JTextField();
        txtCGST = new javax.swing.JTextField();
        chkCGST = new javax.swing.JCheckBox();
        chkSGST = new javax.swing.JCheckBox();
        txtSGST = new javax.swing.JTextField();
        txtPayableAmt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtIGST = new javax.swing.JTextField();
        lblRemainingPaidAmt = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        mnuGSTUploaded.setText("GST UPLOADED");
        mnuGSTUploaded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGSTUploadedActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuGSTUploaded);

        mnuGSTNotUploaded.setText("GST NOT UPLOADED");
        mnuGSTNotUploaded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGSTNotUploadedActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mnuGSTNotUploaded);

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 700, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        lblTitle.setText("PAYMENT REQUISITION SLIP");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 700, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("PO Date:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(270, 210, 98, 20);

        txtPayReqSlipNo.setEditable(false);
        txtPayReqSlipNo.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        txtPayReqSlipNo.setNextFocusableComponent(txtPayReqSlipDate);
        Tab1.add(txtPayReqSlipNo);
        txtPayReqSlipNo.setBounds(150, 10, 104, 19);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Slip Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(290, 10, 98, 20);

        txtPayReqSlipDate.setEditable(false);
        txtPayReqSlipDate.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        txtPayReqSlipDate.setName("REQ_DATE"); // NOI18N
        txtPayReqSlipDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayReqSlipDateActionPerformed(evt);
            }
        });
        txtPayReqSlipDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPayReqSlipDateFocusGained(evt);
            }
        });
        Tab1.add(txtPayReqSlipDate);
        txtPayReqSlipDate.setBounds(400, 10, 102, 19);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Due Date :");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(30, 370, 98, 20);

        txtRemarks.setEnabled(false);
        txtRemarks.setName("REMARKS"); // NOI18N
        txtRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRemarksActionPerformed(evt);
            }
        });
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(140, 410, 366, 19);

        cmdNext1.setMnemonic('X');
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(580, 440, 102, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(260, 15, 20, 20);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(520, 410, 33, 21);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Supplier Code :");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel4);
        jLabel4.setBounds(20, 40, 120, 20);

        txtSupplierCode.setEnabled(false);
        txtSupplierCode.setName("REQ_DATE"); // NOI18N
        txtSupplierCode = new JTextFieldHint(new JTextField(),"Press F1");
        txtSupplierCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSupplierCodeActionPerformed(evt);
            }
        });
        txtSupplierCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSupplierCodeFocusGained(evt);
            }
        });
        txtSupplierCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSupplierCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtSupplierCode);
        txtSupplierCode.setBounds(150, 43, 102, 19);

        cmdOpenDoc.setText("Open Document");
        cmdOpenDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenDocActionPerformed(evt);
            }
        });
        Tab1.add(cmdOpenDoc);
        cmdOpenDoc.setBounds(430, 440, 138, 25);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Payable Amount :");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel5);
        jLabel5.setBounds(240, 340, 130, 20);

        txtPJVAmt.setEnabled(false);
        txtPJVAmt.setName("REQ_DATE"); // NOI18N
        txtPJVAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPJVAmtActionPerformed(evt);
            }
        });
        Tab1.add(txtPJVAmt);
        txtPJVAmt.setBounds(140, 250, 102, 20);

        txtGRNDate.setEnabled(false);
        txtGRNDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGRNDateActionPerformed(evt);
            }
        });
        Tab1.add(txtGRNDate);
        txtGRNDate.setBounds(380, 180, 100, 19);

        txtBillNo.setEnabled(false);
        Tab1.add(txtBillNo);
        txtBillNo.setBounds(140, 140, 100, 19);

        txtBillDate.setEnabled(false);
        txtBillDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBillDateActionPerformed(evt);
            }
        });
        Tab1.add(txtBillDate);
        txtBillDate.setBounds(380, 140, 100, 19);

        txtPJV.setEnabled(false);
        txtPJV = new JTextFieldHint(new JTextField(),"Press F1");
        txtPJV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPJVKeyPressed(evt);
            }
        });
        Tab1.add(txtPJV);
        txtPJV.setBounds(140, 110, 100, 19);

        txtPJVDate.setEnabled(false);
        txtPJVDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPJVDateActionPerformed(evt);
            }
        });
        Tab1.add(txtPJVDate);
        txtPJVDate.setBounds(380, 110, 100, 19);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Slip No :");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(40, 10, 98, 20);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Bill/Inv. No.");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel7);
        jLabel7.setBounds(30, 140, 98, 20);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("PJV No :");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel9);
        jLabel9.setBounds(30, 110, 98, 15);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("GRN No :");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel10);
        jLabel10.setBounds(30, 180, 100, 20);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Bill/Inv Date :");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel11);
        jLabel11.setBounds(280, 140, 98, 20);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("PJV Date :");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel12);
        jLabel12.setBounds(270, 110, 98, 20);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("GRN Date:");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel13);
        jLabel13.setBounds(270, 180, 98, 20);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("PO No:");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel14);
        jLabel14.setBounds(30, 210, 98, 20);

        txtGRN.setEnabled(false);
        txtGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGRNActionPerformed(evt);
            }
        });
        Tab1.add(txtGRN);
        txtGRN.setBounds(140, 180, 100, 19);

        txtPONo.setEnabled(false);
        txtPONo = new JTextFieldHint(new JTextField(),"Press F1");
        txtPONo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPONoActionPerformed(evt);
            }
        });
        txtPONo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPONoKeyPressed(evt);
            }
        });
        Tab1.add(txtPONo);
        txtPONo.setBounds(140, 210, 100, 19);

        txtPODate.setEnabled(false);
        txtPODate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPODateActionPerformed(evt);
            }
        });
        Tab1.add(txtPODate);
        txtPODate.setBounds(380, 210, 100, 19);

        txtDueDate.setEnabled(false);
        txtDueDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDueDateActionPerformed(evt);
            }
        });
        Tab1.add(txtDueDate);
        txtDueDate.setBounds(140, 370, 100, 19);

        lblSupplierName.setBackground(new java.awt.Color(255, 255, 255));
        lblSupplierName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Tab1.add(lblSupplierName);
        lblSupplierName.setBounds(260, 40, 260, 20);

        jPanel4.setLayout(null);

        buttonGroup2.add(opgFromPJV);
        opgFromPJV.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        opgFromPJV.setText("From PJV");
        opgFromPJV.setEnabled(false);
        opgFromPJV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgFromPJVActionPerformed(evt);
            }
        });
        jPanel4.add(opgFromPJV);
        opgFromPJV.setBounds(0, 10, 100, 20);

        buttonGroup2.add(opgFromPO);
        opgFromPO.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        opgFromPO.setText("From PO");
        opgFromPO.setEnabled(false);
        opgFromPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgFromPOActionPerformed(evt);
            }
        });
        jPanel4.add(opgFromPO);
        opgFromPO.setBounds(120, 10, 130, 20);

        jLabel15.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel15.setText("/");
        jPanel4.add(jLabel15);
        jLabel15.setBounds(104, 10, 10, 20);

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.add(jPanel5);
        jPanel5.setBounds(10, 40, 760, 5);

        Tab1.add(jPanel4);
        jPanel4.setBounds(140, 70, 290, 40);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Remarks :");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel16);
        jLabel16.setBounds(30, 410, 98, 20);

        TablePaidAmounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablePaidAmounts);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(260, 240, 420, 80);

        chkTaxable.setText("Taxable");
        chkTaxable.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkTaxableItemStateChanged(evt);
            }
        });
        Tab1.add(chkTaxable);
        chkTaxable.setBounds(50, 280, 80, 23);

        chkIGST.setText("IGST");
        chkIGST.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkIGSTItemStateChanged(evt);
            }
        });
        Tab1.add(chkIGST);
        chkIGST.setBounds(50, 340, 70, 23);

        txtPaidAmt.setEnabled(false);
        txtPaidAmt.setName("REQ_DATE"); // NOI18N
        txtPaidAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPaidAmtActionPerformed(evt);
            }
        });
        Tab1.add(txtPaidAmt);
        txtPaidAmt.setBounds(590, 340, 90, 20);

        txtTaxable.setEnabled(false);
        txtTaxable.setName("REQ_DATE"); // NOI18N
        txtTaxable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTaxableActionPerformed(evt);
            }
        });
        Tab1.add(txtTaxable);
        txtTaxable.setBounds(140, 280, 102, 20);

        txtCGST.setEnabled(false);
        txtCGST.setName("REQ_DATE"); // NOI18N
        txtCGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCGSTActionPerformed(evt);
            }
        });
        Tab1.add(txtCGST);
        txtCGST.setBounds(140, 300, 102, 20);

        chkCGST.setText("CGST");
        chkCGST.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkCGSTItemStateChanged(evt);
            }
        });
        Tab1.add(chkCGST);
        chkCGST.setBounds(50, 300, 70, 23);

        chkSGST.setText("SGST");
        chkSGST.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkSGSTItemStateChanged(evt);
            }
        });
        Tab1.add(chkSGST);
        chkSGST.setBounds(50, 320, 70, 23);

        txtSGST.setEnabled(false);
        txtSGST.setName("REQ_DATE"); // NOI18N
        txtSGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSGSTActionPerformed(evt);
            }
        });
        Tab1.add(txtSGST);
        txtSGST.setBounds(140, 320, 102, 20);

        txtPayableAmt.setEnabled(false);
        txtPayableAmt.setName("REQ_DATE"); // NOI18N
        txtPayableAmt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayableAmtActionPerformed(evt);
            }
        });
        Tab1.add(txtPayableAmt);
        txtPayableAmt.setBounds(380, 340, 100, 20);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("PJV Amount :");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel17);
        jLabel17.setBounds(20, 250, 110, 20);

        txtIGST.setEnabled(false);
        txtIGST.setName("REQ_DATE"); // NOI18N
        txtIGST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIGSTActionPerformed(evt);
            }
        });
        Tab1.add(txtIGST);
        txtIGST.setBounds(140, 340, 102, 20);

        lblRemainingPaidAmt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemainingPaidAmt.setText("...");
        lblRemainingPaidAmt.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(lblRemainingPaidAmt);
        lblRemainingPaidAmt.setBounds(590, 370, 90, 20);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Paid Amount :");
        jLabel19.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel19);
        jLabel19.setBounds(490, 340, 100, 20);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Remaining Paid Amount :");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel20);
        jLabel20.setBounds(380, 370, 200, 20);

        Tab.addTab("Detail", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 86, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });
        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 334, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 700, 500);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(0, 580, 650, 22);
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtSupplierCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSupplierCodeKeyPressed
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {   
                LOV aList=new LOV();
                
                aList.SQL="SELECT SUPPLIER_CODE,SUPP_NAME FROM DINESHMILLS.D_COM_SUPP_MASTER WHERE APPROVED=1 AND CANCELLED=0";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=2;
                
                if(aList.ShowLOV()) {
                    txtSupplierCode.setText(aList.ReturnVal);
                    lblSupplierName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, aList.ReturnVal));
                }
        }
        //=========================================
    }//GEN-LAST:event_txtSupplierCodeKeyPressed
    
    private void cmdOpenDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenDocActionPerformed
        // TODO add your handling code here:
        if(!txtSupplierCode.getText().equals("")) {
            if(txtSupplierCode.getText().trim().substring(0,2).toUpperCase().equals("RM")) {
                clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, clsSTMRaw.ModuleId , txtSupplierCode.getText().trim(),0);
            }else {
                String Flag = txtPayReqSlipNo.getText().trim().substring(0,1);
                String GatepassNo = Flag + txtSupplierCode.getText().trim();
                clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId, GatepassNo,0);
            }
        }
    }//GEN-LAST:event_cmdOpenDocActionPerformed
    
    private void txtSupplierCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSupplierCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Supplier Code");
    }//GEN-LAST:event_txtSupplierCodeFocusGained
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        // PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjPaymentReq.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtPayReqSlipNo.getText();
        ObjPaymentReq.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtPayReqSlipDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtPayReqSlipDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPayReqSlipDateFocusGained
        // TODO add your handling code here:        
    }//GEN-LAST:event_txtPayReqSlipDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsPaymentRequisition.nModuleId,txtPayReqSlipNo.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
        
        
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjPaymentReq.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void UpdateSrNo() {
        int SrCol=DataModel.getColFromVariable("SR_NO");
    }
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void txtGRNDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGRNDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGRNDateActionPerformed

    private void txtPJVDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPJVDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPJVDateActionPerformed

    private void txtGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGRNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGRNActionPerformed

    private void txtPONoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPONoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPONoActionPerformed

    private void txtPODateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPODateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPODateActionPerformed

    private void txtDueDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDueDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDueDateActionPerformed

    private void txtPayReqSlipDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayReqSlipDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPayReqSlipDateActionPerformed

    private void opgFromPJVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgFromPJVActionPerformed
        if (txtSupplierCode.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Select Supplier Code first.");
            txtSupplierCode.requestFocus();
            opgFromPJV.setSelected(false);
        } else {
            if (opgFromPJV.isSelected()) {
                //opgFromPJV.setSelected(true);
                opgFromPO.setSelected(false);
                
                txtPJV.setText("");
                txtPJVDate.setText("");
                txtBillNo.setText("");
                txtBillDate.setText("");
                txtGRN.setText("");
                txtGRNDate.setText("");
                txtPJVAmt.setText("");
                txtRemarks.setText("");
                txtPONo.setText("");
                txtPODate.setText("");
                txtDueDate.setText("");
                
            }
            txtPJV.requestFocus();
        }
    }//GEN-LAST:event_opgFromPJVActionPerformed

    private void opgFromPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgFromPOActionPerformed
        if (txtSupplierCode.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Select Supplier Code first.");
            txtSupplierCode.requestFocus();
            opgFromPO.setSelected(false);
        } else {
            if (opgFromPO.isSelected()) {
                //opgFromPO.setSelected(true);
                opgFromPJV.setSelected(false);
                
                txtPJV.setText("");
                txtPJVDate.setText("");
                txtBillNo.setText("");
                txtBillDate.setText("");
                txtGRN.setText("");
                txtGRNDate.setText("");
                txtPJVAmt.setText("0.00");
                txtRemarks.setText("");
                txtPONo.setText("");
                txtPODate.setText("");
                txtDueDate.setText("");
                txtCGST.setText("0.00");
                txtTaxable.setText("0.00");
                txtSGST.setText("0.00");
                txtIGST.setText("0.00");
                txtPaidAmt.setText("0.00");
            }
            txtPONo.requestFocus();
        }
    }//GEN-LAST:event_opgFromPOActionPerformed

    private void txtPJVKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPJVKeyPressed
        //=========== Supplier List ===============
        if (!txtSupplierCode.getText().equals("")) {
        if (opgFromPJV.isSelected()) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {   
               /////                
              try {
                    String sql;
                  sql = "DELETE FROM FINANCE.TEMP_PENDING_PAYMENT_DETAIL";
                  data.Execute(sql);
                    ResultSet t;
                    double paymentAmt=0;
                    String sqlTemp="SELECT SUM(AMOUNT) AMOUNT,D.INVOICE_NO,D.INVOICE_DATE,D.INVOICE_AMOUNT FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PJ') AND VOUCHER_DATE>='2017-07-01' GROUP BY INVOICE_NO,INVOICE_DATE ORDER BY INVOICE_DATE,INVOICE_NO";
                    t = data.getResult(sqlTemp);
                    t.first();
                    if (t.getRow() > 0) {
                        while (!t.isAfterLast()) {
//                            System.out.println(t.getDouble("AMOUNT"));
//                            System.out.println(t.getString("INVOICE_NO"));
//                            System.out.println(t.getString("INVOICE_DATE"));
//                            System.out.println(t.getString("INVOICE_AMOUNT"));
                            paymentAmt=data.getDoubleValueFromDB("SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('DN','PY') AND INVOICE_NO='"+t.getString("INVOICE_NO")+"' AND INVOICE_DATE='"+t.getString("INVOICE_DATE")+"' GROUP BY INVOICE_NO,INVOICE_DATE");
                            if(paymentAmt<t.getDouble("AMOUNT")){
                                System.out.println(t.getDouble("AMOUNT"));
                                System.out.println(t.getString("INVOICE_NO"));
                                System.out.println(t.getString("INVOICE_DATE"));
                                System.out.println(t.getString("INVOICE_AMOUNT"));
                                System.out.println("Payment Amt Due");
                                String insertSQL="INSERT INTO FINANCE.TEMP_PENDING_PAYMENT_DETAIL(VOUCHER_NO,VOUCHER_DATE,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,GRN_NO,PO_NO,GRN_DATE)  "
                                        + "SELECT H.VOUCHER_NO,H.VOUCHER_DATE,D.INVOICE_NO,D.INVOICE_DATE,SUM(D.INVOICE_AMOUNT),D.GRN_NO,D.PO_NO,D.GRN_DATE FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PJ') AND INVOICE_NO='"+t.getString("INVOICE_NO")+"' AND INVOICE_DATE='"+t.getString("INVOICE_DATE")+"' ";
                                System.out.println(insertSQL);
                                data.Execute(insertSQL);
                                data.Execute("UPDATE FINANCE.TEMP_PENDING_PAYMENT_DETAIL TMP,DINESHMILLS.D_INV_GRN_HEADER H,DINESHMILLS.D_INV_GRN_DETAIL D SET TMP.MIR_NO=D.MIR_NO WHERE H.GRN_NO=D.GRN_NO AND TMP.GRN_NO=D.GRN_NO\n"
                                        + "AND TMP.GRN_DATE=H.GRN_DATE");
                            }                         
                            
                            t.next();
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
               ///// 
                
                
                LOV aList = new LOV();

                //aList.SQL = "SELECT DISTINCT H.VOUCHER_NO,H.VOUCHER_DATE FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO" +
                // " AND H.APPROVED=1 AND H.CANCELLED=0 AND SUBSTRING(H.VOUCHER_NO,1,2)='PJ' AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"' ";
                //aList.SQL = "SELECT DISTINCT H.VOUCHER_NO,H.VOUCHER_DATE,D.INVOICE_NO,D.INVOICE_DATE,D.INVOICE_AMOUNT,D.PO_NO,D.PO_DATE FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO" +
                // " AND H.APPROVED=1 AND H.CANCELLED=0 AND SUBSTRING(H.VOUCHER_NO,1,2)='PJ' AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"' ";
                /*aList.SQL = "SELECT * FROM "
                        + "(SELECT DISTINCT H.VOUCHER_NO,H.VOUCHER_DATE,D.INVOICE_NO,D.INVOICE_DATE,D.INVOICE_AMOUNT,D.GRN_NO,D.PO_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO "
                        + " AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText()+"' "
                        + " AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY','PJ') GROUP BY INVOICE_NO,INVOICE_DATE HAVING COUNT(INVOICE_NO)=1 ORDER BY INVOICE_NO,INVOICE_DATE) AS A WHERE VOUCHER_NO LIKE 'PJ%'";
                */
                /*aList.SQL = "SELECT\n"
                        + "VOUCHER_NO,VOUCHER_DATE,MIR_NO,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,B.GRN_NO,PO_NO\n"
                        + "FROM \n"
                        + "(SELECT * FROM (SELECT DISTINCT H.VOUCHER_NO,H.VOUCHER_DATE,D.INVOICE_NO,D.INVOICE_DATE,D.INVOICE_AMOUNT,D.GRN_NO,D.GRN_DATE,D.PO_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='619258'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY','PJ') GROUP BY INVOICE_NO,INVOICE_DATE HAVING COUNT(INVOICE_NO)=1 ORDER BY INVOICE_NO,INVOICE_DATE) AS A WHERE VOUCHER_NO LIKE 'PJ%') AS B\n"
                        + "LEFT JOIN\n"
                        + "(SELECT DISTINCT D.GRN_NO,H.GRN_DATE,MIR_NO FROM DINESHMILLS.D_INV_GRN_HEADER H,\n"
                        + "DINESHMILLS.D_INV_GRN_DETAIL D WHERE H.GRN_NO=D.GRN_NO) AS C\n"
                        + "ON B.GRN_NO=C.GRN_NO AND B.GRN_DATE=C.GRN_DATE";
                */
                aList.SQL="SELECT VOUCHER_NO,VOUCHER_DATE,MIR_NO,INVOICE_NO,INVOICE_DATE,INVOICE_AMOUNT,GRN_NO,PO_NO FROM FINANCE.TEMP_PENDING_PAYMENT_DETAIL";
                aList.ReturnCol = 1;
                aList.SecondCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    txtPJV.setText(aList.ReturnVal);
                    txtPJVDate.setText(aList.SecondVal);
                    
                    txtBillNo.setText(data.getStringValueFromDB("SELECT DISTINCT INVOICE_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"'"));
                    txtBillDate.setText(data.getStringValueFromDB("SELECT DISTINCT DATE_FORMAT(INVOICE_DATE,'%d/%m/%Y') FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"'"));
                    
                    txtGRN.setText(data.getStringValueFromDB("SELECT DISTINCT GRN_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"'"));
                    txtGRNDate.setText(data.getStringValueFromDB("SELECT DISTINCT DATE_FORMAT(GRN_DATE,'%d/%m/%Y') FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"'"));
                    
                    txtPONo.setText(data.getStringValueFromDB("SELECT DISTINCT PO_NO FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"'"));
                    txtPODate.setText(data.getStringValueFromDB("SELECT DISTINCT DATE_FORMAT(PO_DATE,'%d/%m/%Y') FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"'"));
   
                    int paymentDays=0;
                    paymentDays=data.getIntValueFromDB("SELECT PAYMENT_DAYS FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID+"");
                    if (paymentDays > 0) {
                        String DueDate = EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(EITLERPGLOBAL.formatDateDB(txtBillDate.getText()), paymentDays, "yyyy-MM-dd"));
                        txtDueDate.setText(DueDate);
                    }
                    
                    //txtPayableAmt.setText(data.getStringValueFromDB("SELECT SUM(AMOUNT) FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='"+aList.ReturnVal+"' AND MAIN_ACCOUNT_CODE='403036' "));
                    String sqlTotalAmt="SELECT SUM(AMOUNT) FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE IN ('125019','125033') \n"
                            + " AND EFFECT='C' AND SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"' ";
                    System.out.println(sqlTotalAmt);
                    txtPJVAmt.setText(data.getStringValueFromDB(sqlTotalAmt));
                    
                    String sqlTaxableAmt="SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE IN ('403036') \n"
                            + " AND EFFECT='D'  ";
                    System.out.println(sqlTaxableAmt);
                    txtTaxable.setText(data.getStringValueFromDB(sqlTaxableAmt));
                    
                    String sqlCGSTAmt="SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE IN ('231756','231774','231772','231770','231768') \n"
                            + " AND EFFECT='D' ";
                    System.out.println(sqlCGSTAmt);
                    txtCGST.setText(data.getStringValueFromDB(sqlCGSTAmt));
                    
                    String sqlSGSTAmt="SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE IN ('231757','231775','231773','231771','231769') \n"
                            + " AND EFFECT='D' ";
                    System.out.println(sqlSGSTAmt);
                    txtSGST.setText(data.getStringValueFromDB(sqlSGSTAmt));
                    
                    String sqlIGSTAmt="SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL WHERE VOUCHER_NO='" + aList.ReturnVal + "' AND MAIN_ACCOUNT_CODE IN ('231758','231780','231778','231777','231776') \n"
                            + " AND EFFECT='D' ";
                    System.out.println(sqlIGSTAmt);
                    txtIGST.setText(data.getStringValueFromDB(sqlIGSTAmt));
                    
                    
                    displayPaymentDetails(txtSupplierCode.getText().trim(),txtBillNo.getText().trim(),txtBillDate.getText().trim());
                    double paidAmt=data.getDoubleValueFromDB("SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY') AND INVOICE_NO='"+txtBillNo.getText().trim()+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(txtBillDate.getText().trim())+"'");
                    txtPaidAmt.setText(Double.toString(paidAmt));
                    
                    double payableAmt=0.0;
                    if(paidAmt>0){
                        payableAmt=Double.parseDouble(txtPJVAmt.getText().trim())-paidAmt;
                    }else{
                        txtPayableAmt.setText("0.00");
                    }
                    
                    txtPayableAmt.setText(Double.toString(payableAmt));
                    lblRemainingPaidAmt.setText(Double.toString(payableAmt));
                    /*lblDueDate.setText("");
                if(objVoucher.getAttribute("APPROVED").getInt()==0&&(!GRNNo.trim().equals(""))) {
                    String PartyCode="";
                    String MIRNo="";
                    String MIRDate="";
                    int PaymentDays=0;
                 
                    ResultSet rsTmp=data.getResult("SELECT DISTINCT(MIR_NO) AS MIR_NO FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"' AND MIR_NO<>'' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                    rsTmp.first();
                 
                    if(rsTmp.getRow()>0) {
                        MIRNo=rsTmp.getString("MIR_NO");
                 
                        rsTmp=data.getResult("SELECT MIR_DATE,SUPP_ID FROM D_INV_MIR_HEADER WHERE MIR_NO='"+MIRNo+"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                        rsTmp.first();
                 
                        if(rsTmp.getRow()>0) {
                            PartyCode=rsTmp.getString("SUPP_ID");
                            MIRDate=rsTmp.getString("MIR_DATE");
                 
                            rsTmp=data.getResult("SELECT PAYMENT_DAYS FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+PartyCode+"' AND COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
                            rsTmp.first();
                 
                            if(rsTmp.getRow()>0) {
                                PaymentDays=rsTmp.getInt("PAYMENT_DAYS");
                 
                                if(PaymentDays>0) {
                                    String DueDate=EITLERPGLOBAL.formatDate(EITLERPGLOBAL.addDaysToDate(MIRDate, PaymentDays, "yyyy-MM-dd"));
                                    lblDueDate.setText("Payment Due Date :"+DueDate);
                 
                                }
                            }
                 
                        }
                    }
                }*/
                }
            }
        }else{
            //JOptionPane.showMessageDialog(null,"Select Supplier Code first.");
            JOptionPane.showMessageDialog(null,"Select From PJV Option first.");
            //txtSupplierCode.requestFocus();
        }
        }
        else{
            JOptionPane.showMessageDialog(null,"Select Supplier Code first.");
            txtSupplierCode.requestFocus();
        }
        //=========================================
    }//GEN-LAST:event_txtPJVKeyPressed

    private void txtBillDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBillDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBillDateActionPerformed

    private void txtPONoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPONoKeyPressed
//if (!txtSupplierCode.getText().equals("")) {
        if (opgFromPO.isSelected()) {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                LOV aList = new LOV();

                aList.SQL = "SELECT PO_NO,PO_DATE FROM DINESHMILLS.D_PUR_PO_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND SUPP_ID='"+txtSupplierCode.getText().trim()+"' ";
                aList.ReturnCol = 1;
                aList.SecondCol = 2;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 2;

                if (aList.ShowLOV()) {
                    txtPONo.setText(aList.ReturnVal);
                    txtPODate.setText(aList.SecondVal);
                                        
                }
            }
        }else{
            //JOptionPane.showMessageDialog(null,"Select Supplier Code first.");
            JOptionPane.showMessageDialog(null,"Select From Option first.");
            txtSupplierCode.requestFocus();
        }
    }//GEN-LAST:event_txtPONoKeyPressed

    private void txtSupplierCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSupplierCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSupplierCodeActionPerformed

    private void txtRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRemarksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRemarksActionPerformed

    private void txtPJVAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPJVAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPJVAmtActionPerformed

    private void mnuGSTUploadedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGSTUploadedActionPerformed
hierarchySelected=4326;
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsPaymentRequisition.nModuleId ;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            //SetPOFields(false);
            //SetPJVFields(false);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtPayReqSlipNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId , FFNo,  false));
            txtSupplierCode.requestFocus();
            
            lblTitle.setText("PAYMENT REQUISITION SLIP - "+txtPayReqSlipNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_mnuGSTUploadedActionPerformed

    private void mnuGSTNotUploadedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGSTNotUploadedActionPerformed
 hierarchySelected=4327;
         //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsPaymentRequisition.nModuleId ;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            //SetPOFields(false);
            //SetPJVFields(false);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtPayReqSlipNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId , FFNo,  false));
            txtSupplierCode.requestFocus();
            
            lblTitle.setText("PAYMENT REQUISITION SLIP - "+txtPayReqSlipNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_mnuGSTNotUploadedActionPerformed

    private void txtPaidAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPaidAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPaidAmtActionPerformed

    private void txtTaxableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTaxableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTaxableActionPerformed

    private void txtCGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCGSTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCGSTActionPerformed

    private void txtSGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSGSTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSGSTActionPerformed

    private void txtPayableAmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayableAmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPayableAmtActionPerformed

    private void txtIGSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIGSTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIGSTActionPerformed

    private void chkTaxableItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkTaxableItemStateChanged
        //double taxableAmt=Double.parseDouble(txtTaxable.getText());
        //double payableAmt=Double.parseDouble(txtPayableAmt.getText());
        double taxableAmt=ParseDouble(txtTaxable.getText());
        double payableAmt=ParseDouble(txtPayableAmt.getText());
        
        if(chkTaxable.isSelected()==true){            
            payableAmt+=taxableAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }else{
            payableAmt-=taxableAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }
    }//GEN-LAST:event_chkTaxableItemStateChanged

    private void chkCGSTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkCGSTItemStateChanged
        double cgstAmt=ParseDouble(txtCGST.getText());
        double payableAmt=ParseDouble(txtPayableAmt.getText());
        
        if(chkCGST.isSelected()==true){            
            payableAmt+=cgstAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }else{        
            payableAmt-=cgstAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }
    }//GEN-LAST:event_chkCGSTItemStateChanged

    private void chkSGSTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkSGSTItemStateChanged
        double sgstAmt=ParseDouble(txtSGST.getText());
        double payableAmt=ParseDouble(txtPayableAmt.getText());
        
        if(chkSGST.isSelected()==true){            
            payableAmt+=sgstAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }else{        
            payableAmt-=sgstAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }
    }//GEN-LAST:event_chkSGSTItemStateChanged

    private void chkIGSTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkIGSTItemStateChanged
        double igstAmt=ParseDouble(txtIGST.getText());
        double payableAmt=ParseDouble(txtPayableAmt.getText());
        
        if(chkIGST.isSelected()==true){            
            payableAmt+=igstAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }else{        
            payableAmt-=igstAmt;
            txtPayableAmt.setText(Double.toString(payableAmt));
        }
    }//GEN-LAST:event_chkIGSTItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TablePaidAmounts;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkCGST;
    private javax.swing.JCheckBox chkIGST;
    private javax.swing.JCheckBox chkSGST;
    private javax.swing.JCheckBox chkTaxable;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdOpenDoc;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRemainingPaidAmt;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSupplierName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuGSTNotUploaded;
    private javax.swing.JMenuItem mnuGSTUploaded;
    private javax.swing.JRadioButton opgFromPJV;
    private javax.swing.JRadioButton opgFromPO;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtBillDate;
    private javax.swing.JTextField txtBillNo;
    private javax.swing.JTextField txtCGST;
    private javax.swing.JTextField txtDueDate;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGRN;
    private javax.swing.JTextField txtGRNDate;
    private javax.swing.JTextField txtIGST;
    private javax.swing.JTextField txtPJV;
    private javax.swing.JTextField txtPJVAmt;
    private javax.swing.JTextField txtPJVDate;
    private javax.swing.JTextField txtPODate;
    private javax.swing.JTextField txtPONo;
    private javax.swing.JTextField txtPaidAmt;
    private javax.swing.JTextField txtPayReqSlipDate;
    private javax.swing.JTextField txtPayReqSlipNo;
    private javax.swing.JTextField txtPayableAmt;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSGST;
    private javax.swing.JTextField txtSupplierCode;
    private javax.swing.JTextField txtTaxable;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        txtPayReqSlipNo.setEnabled(pStat);
        txtPayReqSlipDate.setEnabled(pStat);
        txtSupplierCode.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtPJVAmt.setEnabled(pStat);
        txtPayableAmt.setEnabled(pStat);
        //txtTaxable.setEnabled(pStat);
        //txtCGST.setEnabled(pStat);
        //txtSGST.setEnabled(pStat);
        //txtIGST.setEnabled(pStat);        
        
        opgFromPJV.setEnabled(pStat);
        opgFromPO.setEnabled(pStat);
        
        txtPJV.setEnabled(pStat);        
        txtPJVDate.setEnabled(pStat);
        txtBillNo.setEnabled(pStat);
        txtBillDate.setEnabled(pStat);
        txtGRN.setEnabled(pStat);
        txtGRNDate.setEnabled(pStat);
        txtPONo.setEnabled(pStat);
        txtPODate.setEnabled(pStat); 
        txtDueDate.setEnabled(pStat);
        
        
        
        
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
        
    }
    private void SetPOFields(boolean pStat) {
        
        txtPONo.setEnabled(pStat);
        txtPODate.setEnabled(pStat);
        
    }
    private void SetPJVFields(boolean pStat) {
        
        txtPJV.setEnabled(pStat);
        txtPJVDate.setEnabled(pStat);
        txtBillNo.setEnabled(pStat);
        txtBillDate.setEnabled(pStat);
        
    }
    
    private void ClearFields() {
        txtPayReqSlipNo.setText("");
        txtPayReqSlipDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtSupplierCode.setText("");
        txtPJVAmt.setText("");
        txtRemarks.setText("");
        txtBillNo.setText("");
        txtBillDate.setText("");
        txtGRN.setText("");
        txtGRNDate.setText("");
        txtPJV.setText("");
        txtPJVDate.setText("");
        txtPONo.setText("");
        txtPODate.setText("");
        opgFromPJV.setSelected(false);
        opgFromPO.setSelected(false);
        
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        //FormatGrid();
        FormatGridA();
        FormatGridHS();
        FormatGridPaidAmounts();
        
        txtPayableAmt.setText("");
        txtPaidAmt.setText("");
        txtTaxable.setText("");
        txtCGST.setText("");
        txtSGST.setText("");
        txtIGST.setText("");
        txtDueDate.setText("");
        
        chkCGST.setSelected(false);
        chkSGST.setSelected(false);
        chkIGST.setSelected(false);
        chkTaxable.setSelected(false);
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjPaymentReq.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjPaymentReq.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjPaymentReq.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsPaymentRequisition.nModuleId;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        txtPayReqSlipNo.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj());
        lblTitle.setText("PAYMENT REQUISITION SLIP - "+txtPayReqSlipNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjPaymentReq.getAttribute("REVISION_NO").getVal()));
        txtPayReqSlipDate.setText(EITLERPGLOBAL.formatDate((String)ObjPaymentReq.getAttribute("PAY_REQ_DATE").getObj()));
        txtSupplierCode.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_PARTY_CODE").getObj());
        txtPayableAmt.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_AMOUNT").getVal()));
        txtRemarks.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_REMARKS").getObj());
        txtPJV.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_PJV_NO").getObj());
        txtPJVDate.setText(EITLERPGLOBAL.formatDate((String)ObjPaymentReq.getAttribute("PAY_REQ_PJV_DATE").getObj()));
        txtBillNo.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_INV_NO").getObj());
        txtBillDate.setText(EITLERPGLOBAL.formatDate((String)ObjPaymentReq.getAttribute("PAY_REQ_INV_DATE").getObj()));
        txtGRN.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_GRN_NO").getObj());
        txtGRNDate.setText(EITLERPGLOBAL.formatDate((String)ObjPaymentReq.getAttribute("PAY_REQ_GRN_DATE").getObj()));
        txtPONo.setText((String)ObjPaymentReq.getAttribute("PAY_REQ_PO_NO").getObj());
        txtPODate.setText(EITLERPGLOBAL.formatDate((String)ObjPaymentReq.getAttribute("PAY_REQ_PO_DATE").getObj()));
        txtDueDate.setText(EITLERPGLOBAL.formatDate((String)ObjPaymentReq.getAttribute("PAY_REQ_DUE_DATE").getObj()));
        
        if (ObjPaymentReq.getAttribute("PAY_REQ_TYPE").getString().equals("PJV")) {
            opgFromPJV.setSelected(true);
        }
        if (ObjPaymentReq.getAttribute("PAY_REQ_TYPE").getString().equals("PO")) {
            opgFromPO.setSelected(true);
        }
        
        chkTaxable.setSelected(ObjPaymentReq.getAttribute("PAY_REQ_CHK_TAXABLE_AMT").getBool());
        chkCGST.setSelected(ObjPaymentReq.getAttribute("PAY_REQ_CHK_CGST_AMT").getBool());
        chkSGST.setSelected(ObjPaymentReq.getAttribute("PAY_REQ_CHK_SGST_AMT").getBool());
        chkIGST.setSelected(ObjPaymentReq.getAttribute("PAY_REQ_CHK_IGST_AMT").getBool());
        
        txtPJVAmt.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_PJV_AMT").getVal()));
        txtPaidAmt.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_PAID_AMT").getVal()));
        txtTaxable.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_TAXABLE_AMT").getVal()));
        txtCGST.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_CGST_AMT").getVal()));
        txtSGST.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_SGST_AMT").getVal()));
        txtIGST.setText(Double.toString(ObjPaymentReq.getAttribute("PAY_REQ_IGST_AMT").getVal()));
        
        
        displayPaymentDetails(txtSupplierCode.getText().trim(),txtBillNo.getText().trim(),txtBillDate.getText().trim());
                    double paidAmt=data.getDoubleValueFromDB("SELECT COALESCE(SUM(AMOUNT),0) FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+txtSupplierCode.getText().trim()+"'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY') AND INVOICE_NO='"+txtBillNo.getText().trim()+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(txtBillDate.getText().trim())+"'");
                    txtPaidAmt.setText(Double.toString(paidAmt));
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjPaymentReq.getAttribute("HIERARCHY_ID").getVal());
        
        DoNotEvaluate=false;
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=(String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId, DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsPaymentRequisition.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsPaymentRequisition ObjHistory=(clsPaymentRequisition)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        
        //DisplayIndicators();
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjPaymentReq.setAttribute("PREFIX",SelPrefix);
        ObjPaymentReq.setAttribute("FFNO",FFNo);
        ObjPaymentReq.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjPaymentReq.setAttribute("PAY_REQ_NO",txtPayReqSlipNo.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_DATE",EITLERPGLOBAL.formatDateDB(txtPayReqSlipDate.getText()));
        ObjPaymentReq.setAttribute("PAY_REQ_PARTY_CODE",txtSupplierCode.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_AMOUNT",txtPayableAmt.getText());
        ObjPaymentReq.setAttribute("PAY_REQ_PJV_NO",txtPJV.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_PJV_DATE",EITLERPGLOBAL.formatDateDB(txtPJVDate.getText()));
        ObjPaymentReq.setAttribute("PAY_REQ_INV_NO",txtBillNo.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_INV_DATE",EITLERPGLOBAL.formatDateDB(txtBillDate.getText()));
        ObjPaymentReq.setAttribute("PAY_REQ_GRN_NO",txtGRN.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_GRN_DATE",EITLERPGLOBAL.formatDateDB(txtGRNDate.getText()));
        ObjPaymentReq.setAttribute("PAY_REQ_PO_NO",txtPONo.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_PO_DATE",EITLERPGLOBAL.formatDateDB(txtPODate.getText()));
        ObjPaymentReq.setAttribute("PAY_REQ_PJV_NO",txtPJV.getText().trim());
        ObjPaymentReq.setAttribute("PAY_REQ_PJV_DATE",EITLERPGLOBAL.formatDateDB(txtPJVDate.getText()));                
        ObjPaymentReq.setAttribute("PAY_REQ_DUE_DATE",EITLERPGLOBAL.formatDateDB(txtDueDate.getText()));                
        
        if(opgFromPJV.isSelected()) {
            ObjPaymentReq.setAttribute("PAY_REQ_TYPE","PJV");
        }
        if(opgFromPO.isSelected()) {
            ObjPaymentReq.setAttribute("PAY_REQ_TYPE","PO");
        }
        
        if(chkTaxable.isSelected()) {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_TAXABLE_AMT",true);
        }
        else {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_TAXABLE_AMT",false);
        }
        
        if(chkCGST.isSelected()) {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_CGST_AMT",true);
        }
        else {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_CGST_AMT",false);
        }
        
        if(chkSGST.isSelected()) {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_SGST_AMT",true);
        }
        else {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_SGST_AMT",false);
        }
        
        if(chkIGST.isSelected()) {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_IGST_AMT",true);
        }
        else {
            ObjPaymentReq.setAttribute("PAY_REQ_CHK_IGST_AMT",false);
        }
        
        ObjPaymentReq.setAttribute("PAY_REQ_TAXABLE_AMT",txtTaxable.getText());
        ObjPaymentReq.setAttribute("PAY_REQ_CGST_AMT",txtCGST.getText());
        ObjPaymentReq.setAttribute("PAY_REQ_SGST_AMT",txtSGST.getText());
        ObjPaymentReq.setAttribute("PAY_REQ_IGST_AMT",txtIGST.getText());
        ObjPaymentReq.setAttribute("PAY_REQ_PJV_AMT",txtPJVAmt.getText());
        ObjPaymentReq.setAttribute("PAY_REQ_PAID_AMT",txtPaidAmt.getText());
        
        
        ObjPaymentReq.setAttribute("PAY_REQ_REMARKS",txtRemarks.getText());
        //ObjPaymentReq.setAttribute("CANCELLED",chkCancelled.isSelected());
        
        //----- Update Approval Specific Fields -----------//
        ObjPaymentReq.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjPaymentReq.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjPaymentReq.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjPaymentReq.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjPaymentReq.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjPaymentReq.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjPaymentReq.setAttribute("APPROVAL_STATUS","R");
            ObjPaymentReq.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjPaymentReq.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjPaymentReq.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjPaymentReq.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjPaymentReq.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjPaymentReq.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ clsPaymentRequisition.nModuleId +" ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ clsPaymentRequisition.nModuleId +" ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId ,(String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,5051)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        //int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        //EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,hierarchySelected);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId ,(String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsPaymentRequisition.nModuleId ,FromUserID,(String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,5051)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,72)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,50513)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,50514)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
        cmdPreview.setEnabled(true);
    }
    
    private void Add() {
    // jPopupMenu1.show(cmdNew, 0, 30);           
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsPaymentRequisition.nModuleId ;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            //SetPOFields(false);
            //SetPJVFields(false);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtPayReqSlipNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId , FFNo,  false));
            txtSupplierCode.requestFocus();
            
            lblTitle.setText("PAYMENT REQUISITION SLIP - "+txtPayReqSlipNo.getText());
            lblTitle.setBackground(Color.GRAY);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
                
        //OpgFinal.setSelected(true);
        OpgHold.setSelected(true);
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj();
        if(ObjPaymentReq.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsPaymentRequisition.nModuleId ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,5051)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtPayReqSlipDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjPaymentReq.getAttribute("PAY_REQ_NO").getObj();
        
        if(ObjPaymentReq.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(ObjPaymentReq.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjPaymentReq.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
    
    private boolean Validate() {
        //Form level validations
        if(txtPayReqSlipDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtPayReqSlipDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Date in DD/MM/YYYY format.");
            return false;
        }
        
        
        if(opgFromPJV.isSelected()){
        double paidAmt=Double.parseDouble(txtPaidAmt.getText());
        double pjvAmt=Double.parseDouble(txtPJVAmt.getText());
        double payableAmt=Double.parseDouble(txtPayableAmt.getText());
        
        if(payableAmt==0){
                JOptionPane.showMessageDialog(null,"You can not create Payment Req Slip with 0 payable amount. ");
                return false;    
        }
        if((payableAmt+paidAmt)>pjvAmt){
                JOptionPane.showMessageDialog(null,"Payable amount can not be more than pjv amount.");
                return false;         
        }
        
        if(paidAmt==pjvAmt){
            if(payableAmt>0){
                JOptionPane.showMessageDialog(null,"You can not create more Payment Req Slip as PJV amount equals Paid amount. ");
                return false;
            }
        }
        }
        
//        if(txtSupplierCode.getText().trim().substring(0,2).toUpperCase().equals("RM")) {
//            String Qry="SELECT * FROM D_INV_STM_HEADER WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND STM_NO = '" + txtSupplierCode.getText().trim() + "' AND APPROVED = 1 AND CANCELLED=0 ";
//            if(!data.IsRecordExist(Qry)) {
//                JOptionPane.showMessageDialog(null,"Invalid STM No ");
//                return false;
//            }
//        }
        
        if(txtPayReqSlipDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Payment Req date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtPayReqSlipDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Payment Req date in DD/MM/YYYY format.");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return false;
        }
        
        return true;
    }
    
    private void Save() {
        
        if ( ! Validate()) {
            return;
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjPaymentReq.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjPaymentReq.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjPaymentReq.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjPaymentReq.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmPaymentReqFind",true);
        frmPaymentReqFind ObjReturn= (frmPaymentReqFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjPaymentReq.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        ObjPaymentReq.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjPaymentReq.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjPaymentReq.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjPaymentReq.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjPaymentReq.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND PAY_REQ_NO='"+pDocNo+"'",pCompanyID);
        ObjPaymentReq.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjPaymentReq.Filter(" WHERE PAY_REQ_NO IN (SELECT D_INV_PAYMENT_REQ.PAY_REQ_NO FROM D_INV_PAYMENT_REQ,D_COM_DOC_DATA WHERE D_INV_PAYMENT_REQ.PAY_REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_PAYMENT_REQ.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_PAYMENT_REQ.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsPaymentRequisition.nModuleId +")",EITLERPGLOBAL.gCompanyID);
        ObjPaymentReq.MoveLast();
        DisplayData();
    }
    
    private void FormatGridPaidAmounts() {
        DataModelPaidAmt = new EITLTableModel();
        
        TablePaidAmounts.removeAll();
        TablePaidAmounts.setModel(DataModelPaidAmt);
        
        //Set the table Readonly
        DataModelPaidAmt.TableReadOnly(true);
        
        //Add the columns
        DataModelPaidAmt.addColumn("Sr.");
        DataModelPaidAmt.addColumn("PY Voucher");
        DataModelPaidAmt.addColumn("Date");
        DataModelPaidAmt.addColumn("Effect");
        DataModelPaidAmt.addColumn("Main Code");
        DataModelPaidAmt.addColumn("Party Code");
        DataModelPaidAmt.addColumn("Amount");                
        
        TablePaidAmounts.setAutoResizeMode(TablePaidAmounts.AUTO_RESIZE_OFF);
        
        
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
/*        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
 
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModel.SetReadOnly(i);
            }
        }*/
        //=======================================================//
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    /*
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptMaterialREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
     */
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId , txtPayReqSlipNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId , txtPayReqSlipNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsPaymentRequisition.nModuleId ,txtPayReqSlipNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    private void Mail() {
        System.out.println("MIR date + Cr days has been over = " + ObjPaymentReq.getAttribute("APPROVAL_STATUS").getString());
        String pBody = "", pSubject = "", recievers = "", pcc = "";
        
        pSubject = "Notification : MIR date + Cr days has been over  :" + txtPayReqSlipNo.getText() + " ";
        pBody="Dear User,<br><br>";
        

        try {
            
            pBody += "Payment Requisition Slip : " + txtPayReqSlipNo.getText() + " <br><br>";
            //pBody += "Document No.  : " + lbldoc.getText() + " <br>";
            //pBody += "Remark        : " + txtReason.getText() + " <br>";

            //String sql="SELECT * FROM SDMLATTPAY.EMP_DESG_DEPT_SHIFT_VIEW WHERE PAY_EMP_NO='"+txtempcd.getText()+"' LIMIT 1";
            //ResultSet rs=data.getResult(sql);            
            //rs.first();
            //pBody += "Employee Name  : " + rs.getString("EMP_NAME") + " <br>";
            //pBody += "Remark        : " + rs.getString("DEPARTMENT") + "  <br>";
                        
            int srNo = 0;
            String sql1 = "SELECT * FROM D_INV_PAYMENT_REQ WHERE PAY_REQ_NO='" + txtPayReqSlipNo.getText() + "'";

            ResultSet rsdata=data.getResult(sql1);
            rsdata.first();
            if (rsdata.getRow() > 0) {
                srNo = 0;
                pBody += "<br>";
                pBody += "<table border=1>";
                pBody += "<tr>"
                        + "<td align='center'><b>PJV No</b></td>"
                        + "<td align='center'><b>PJV Date</b></td>"
                        + "<td align='center'><b>Bill/Inv No</b></td>"
                        + "<td align='center'><b>Bill/Inv Date</b></td>"
                        + "<td align='center'><b>PO No</b></td>"
                        + "<td align='center'><b>PO Date</b></td>"
                        + "<td align='center'><b>Payable Amt</b></td>"
                        + "<td align='center'><b>Due Date</b></td>"                        
                        + "</tr>";
                while (!rsdata.isAfterLast()) {
                    srNo++;
                    pBody += "<tr>";                    
                    pBody += "<td>" + rsdata.getString("PAY_REQ_PJV_NO") + "</td>";                    
                    pBody += "<td>" + EITLERPGLOBAL.formatDate(rsdata.getString("PAY_REQ_PJV_DATE")) + "</td>";
                    pBody += "<td>" + rsdata.getString("PAY_REQ_INV_NO") + "</td>";                    
                    pBody += "<td>" + EITLERPGLOBAL.formatDate(rsdata.getString("PAY_REQ_INV_DATE")) + "</td>";
                    pBody += "<td>" + rsdata.getString("PAY_REQ_PO_NO") + "</td>";
                    pBody += "<td>" + EITLERPGLOBAL.formatDate(rsdata.getString("PAY_REQ_PO_DATE")) + "</td>";
                    pBody += "<td>" + rsdata.getString("PAY_REQ_AMOUNT") + "</td>";
                    pBody += "<td>" + EITLERPGLOBAL.formatDate(rsdata.getString("PAY_REQ_DUE_DATE")) + "</td>";
                    pBody += "</tr>";
                    rsdata.next();
                }
                pBody += "</table>";                
                pBody += "<br>";
            }

            pBody += "<br><br>";

            recievers = "ashutosh@dineshmills.com";
            /*HashMap hmSendToList;
            hmSendToList = clsHierarchy.getUserList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbHierarchy), EITLERPGLOBAL.gNewUserID, true);
            for (int i = 1; i <= hmSendToList.size(); i++) {
                clsUser ObjUser = (clsUser) hmSendToList.get(Integer.toString(i));
                int U_ID = ObjUser.getAttribute("USER_ID").getInt();

                String to = clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, U_ID);

                System.out.println("USERID : " + U_ID + ", send_to : " + to);
                if (!to.equals("")) {
                    recievers = recievers + "," + to;
                }
                
            }*/            
            String to=clsUser.getExternalEMail(EITLERPGLOBAL.gCompanyID, data.getIntValueFromDB("SELECT USER_ID FROM D_COM_DOC_DATA WHERE MODULE_ID=204 AND TYPE='C' AND DOC_NO='"+txtPayReqSlipNo.getText()+"'"));
            
            if (!to.equals("")) {
                    recievers = recievers + "," + to;
                }
            
            pBody += "<br><br><br>**** This is an auto-generated email, please do not reply ****<br><br>";

            //String responce = MailNotification.sendNotificationMail(811, pSubject, pBody, recievers, pcc, EITLERPGLOBAL.getComboCode(cmbHierarchy));
            String responce = MailNotification.sendNotificationMail(811, pSubject, pBody, recievers, pcc, 0);
            System.out.println("Send Mail Responce : " + responce);

        } catch (Exception e) {
            e.printStackTrace();
        }
        //}
    }
    
    
    /*
    private void DisplayIndicators() {
        CellPainter=new EITLTableCellRenderer();
        CellPainter.removeBackColors();
        CellPainter.removeForeColors();
     
        Table.getColumnModel().getColumn(1).setCellRenderer(CellPainter);
     
        for(int i=0;i<Table.getRowCount();i++) {
     
            String ItemDesc=(String)Table.getValueAt(i,1);
     
            if(Approval.equals("M")) {
                CellPainter.setBackColor(i,1, Color.BLUE);
                CellPainter.setForeColor(i,1,Color.WHITE);
            }
     
            if(Approval.equals("E")) {
                CellPainter.setBackColor(i,1, Color.YELLOW);
                CellPainter.setForeColor(i,1, Color.BLACK);
            }
     
        }
     
    }
     */
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    /*
     
        private void PreviewReport() {
        HashMap Params=new HashMap();
     
        if(chkCancelled.isSelected())
        {
         JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
         return;
        }
     
     
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptPR.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
     */
    
    private void displayPaymentDetails(String subCode,String invNo,String invDate) {
        try {
            FormatGridPaidAmounts();
            ResultSet t;
            
            t = data.getResult("SELECT D.VOUCHER_NO,H.VOUCHER_DATE,EFFECT,MAIN_ACCOUNT_CODE,SUB_ACCOUNT_CODE,AMOUNT FROM FINANCE.D_FIN_VOUCHER_DETAIL D,FINANCE.D_FIN_VOUCHER_HEADER H WHERE H.VOUCHER_NO=D.VOUCHER_NO  AND H.APPROVED=1 AND H.CANCELLED=0 AND D.SUB_ACCOUNT_CODE='"+subCode+"'  AND SUBSTRING(H.VOUCHER_NO,1,2) IN ('PY') AND INVOICE_NO='"+txtBillNo.getText().trim()+"' AND INVOICE_DATE='"+EITLERPGLOBAL.formatDateDB(invDate)+"' ");
            t.first();
            int i=0;
            if (t.getRow() > 0) {
                while (!t.isAfterLast()) {
                    Object[] rowData = new Object[10];
                    rowData[0] = ++i;                    
                    rowData[1] = t.getString("VOUCHER_NO");                    
                    rowData[2] = EITLERPGLOBAL.formatDate(t.getString("VOUCHER_DATE"));                                       
                    rowData[3] = t.getString("EFFECT");
                    rowData[4] = t.getString("MAIN_ACCOUNT_CODE");                    
                    rowData[5] = t.getString("SUB_ACCOUNT_CODE");                    
                    rowData[6] = t.getString("AMOUNT");                    
                    DataModelPaidAmt.addRow(rowData);
                    t.next();
                }
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    } 
    
    double ParseDouble(String strNumber){
        if(strNumber!=null && strNumber.length()>0){
            try{
                return Double.parseDouble(strNumber);
            }catch(Exception e){
                e.printStackTrace();
                return -1;
            }
        }else{
            return 0;
        }
    }
}
