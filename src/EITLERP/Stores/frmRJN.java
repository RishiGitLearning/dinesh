/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Stores;

/** 
 *
 * @author  nhpatel
 */

/*<APPLET CODE=frmRJN.class HEIGHT=525 WIDTH=773></APPLET>*/


import javax.swing.*;
import java.awt.*;
import java.util.*; 
import EITLERP.*;
import EITLERP.Utils.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.net.*;

 
/**
 *
 */
public class frmRJN extends javax.swing.JApplet {
    
    private int EditMode=0;
    
    private EITLTableModel DataModelH;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    
    private HashMap colVariables=new HashMap();
    private HashMap colVariables_H=new HashMap();
    clsTaxColumn ObjTax=new clsTaxColumn();
    clsColumn ObjColumn=new clsColumn();
    
    private JEP myParser=new JEP();
    private boolean Updating=false;
    private boolean Updating_H=false;
    private boolean DoNotEvaluate=false;
    
    private clsRJN ObjRJN;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbTransportModel;
    private EITLComboModel cmbCurrencyModel;
    private EITLComboModel cmbTransportModeModel;
    private EITLComboModel cmbGatepassTypeModel;
    private EITLTableModel DataModelA;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;    
   
    public frmPendingApprovals frmPA;
    
    String cellLastValueL="";
    String cellLastValueH="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        
        setSize(773,525);
        
        
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        ObjTax.LoadData((int)EITLERPGLOBAL.gCompanyID);
        ObjColumn.LoadData((int)EITLERPGLOBAL.gCompanyID);
        
        FormatGrid();
        FormatGrid_H();
        SetNumberFormats();
        
        GenerateCombos();
        ObjRJN=new clsRJN();
        
        SetMenuForRights();
        
        if(getName().equals("Link"))
        {
            
        }
        else
        {
        if(ObjRJN.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjRJN.MoveLast();
            DisplayData();
        }
        else {
            JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjRJN.LastError);
        }
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSuppCode = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmbTransporter = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        txtGatepassNo = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cmbCurrency = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        chkCancelled = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cmbTransportMode = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        cmbGatepassType = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtGatepassDate = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        txtCurrencyRate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        cmdChange = new javax.swing.JButton();
        Tab2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        HeaderPane = new javax.swing.JScrollPane();
        TableH = new javax.swing.JTable();
        cmdInsert = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmdNext2 = new javax.swing.JButton();
        cmdBack2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmdShowGRN = new javax.swing.JButton();
        Tab3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack3 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        Tab4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" REJECTION MEMO (Raw Material)");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });

        jLabel2.setText("RJN No.");
        Tab1.add(jLabel2);
        jLabel2.setBounds(52, 18, 56, 15);

        txtDocNo.setEditable(false);
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(114, 14, 101, 19);

        jLabel3.setText("Date");
        Tab1.add(jLabel3);
        jLabel3.setBounds(254, 18, 29, 15);

        txtDocDate.setName("RJN_DATE");
        txtDocDate.setNextFocusableComponent(txtSuppCode);
        txtDocDate.setEnabled(false);
        txtDocDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDocDateFocusGained(evt);
            }
        });

        Tab1.add(txtDocDate);
        txtDocDate.setBounds(290, 16, 100, 19);

        jLabel4.setText("Supplier");
        Tab1.add(jLabel4);
        jLabel4.setBounds(54, 76, 52, 15);

        txtSuppCode.setName("SUPP_ID");
        txtSuppCode.setNextFocusableComponent(cmbTransportMode);
        txtSuppCode.setEnabled(false);
        txtSuppCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSuppCodeActionPerformed(evt);
            }
        });
        txtSuppCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSuppCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppCodeFocusLost(evt);
            }
        });
        txtSuppCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSuppCodeKeyPressed(evt);
            }
        });

        Tab1.add(txtSuppCode);
        txtSuppCode.setBounds(114, 72, 62, 19);

        txtSuppName.setEnabled(false);
        Tab1.add(txtSuppName);
        txtSuppName.setBounds(178, 72, 212, 19);

        jLabel11.setText("Transporter ");
        Tab1.add(jLabel11);
        jLabel11.setBounds(36, 140, 84, 15);

        cmbTransporter.setName("TRANSPORTER");
        cmbTransporter.setNextFocusableComponent(cmbGatepassType);
        cmbTransporter.setEnabled(false);
        cmbTransporter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransporterFocusGained(evt);
            }
        });

        Tab1.add(cmbTransporter);
        cmbTransporter.setBounds(114, 136, 274, 24);

        jLabel12.setText("Gatepass No.");
        Tab1.add(jLabel12);
        jLabel12.setBounds(26, 208, 92, 15);

        txtGatepassNo.setEditable(false);
        txtGatepassNo.setName("GATEPASS_NO");
        txtGatepassNo.setNextFocusableComponent(txtGatepassDate);
        txtGatepassNo.setEnabled(false);
        txtGatepassNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusLost(evt);
            }
        });
        txtGatepassNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtGatepassNoKeyPressed(evt);
            }
        });

        Tab1.add(txtGatepassNo);
        txtGatepassNo.setBounds(114, 204, 114, 19);

        jLabel13.setText("Currency");
        Tab1.add(jLabel13);
        jLabel13.setBounds(48, 244, 56, 15);

        cmbCurrency.setName("CURRENCY_ID");
        cmbCurrency.setNextFocusableComponent(txtCurrencyRate);
        cmbCurrency.setEnabled(false);
        cmbCurrency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCurrencyFocusGained(evt);
            }
        });

        Tab1.add(cmbCurrency);
        cmbCurrency.setBounds(114, 240, 134, 24);

        jLabel14.setText("Currency Rate");
        Tab1.add(jLabel14);
        jLabel14.setBounds(18, 276, 92, 15);

        chkCancelled.setText("Cancelled");
        chkCancelled.setNextFocusableComponent(txtRemarks);
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(656, 10, 85, 23);

        jLabel21.setText("Remarks");
        Tab1.add(jLabel21);
        jLabel21.setBounds(16, 318, 86, 15);

        txtRemarks.setName("REMARKS");
        txtRemarks.setNextFocusableComponent(cmdNext1);
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(16, 340, 434, 19);

        jLabel15.setText("Transport Mode");
        Tab1.add(jLabel15);
        jLabel15.setBounds(12, 110, 116, 15);

        cmbTransportMode.setName("MODE_TRANSPORT");
        cmbTransportMode.setNextFocusableComponent(cmbTransporter);
        cmbTransportMode.setEnabled(false);
        cmbTransportMode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransportModeFocusGained(evt);
            }
        });

        Tab1.add(cmbTransportMode);
        cmbTransportMode.setBounds(114, 106, 274, 24);

        jLabel16.setText("Gatepass Type ");
        Tab1.add(jLabel16);
        jLabel16.setBounds(16, 176, 96, 15);

        cmbGatepassType.setName("GATEPASS_TYPE");
        cmbGatepassType.setNextFocusableComponent(txtGatepassNo);
        cmbGatepassType.setEnabled(false);
        cmbGatepassType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbGatepassTypeFocusGained(evt);
            }
        });

        Tab1.add(cmbGatepassType);
        cmbGatepassType.setBounds(114, 172, 172, 24);

        jLabel5.setText("Date");
        Tab1.add(jLabel5);
        jLabel5.setBounds(246, 206, 29, 15);

        txtGatepassDate.setEditable(false);
        txtGatepassDate.setNextFocusableComponent(cmbCurrency);
        txtGatepassDate.setEnabled(false);
        txtGatepassDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGatepassDateFocusGained(evt);
            }
        });

        Tab1.add(txtGatepassDate);
        txtGatepassDate.setBounds(282, 204, 100, 19);

        cmdNext1.setText("Next >>");
        cmdNext1.setNextFocusableComponent(txtDocDate);
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext1);
        cmdNext1.setBounds(630, 282, 102, 25);

        txtCurrencyRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCurrencyRate.setName("CURRENCY_RATE");
        txtCurrencyRate.setNextFocusableComponent(txtRemarks);
        txtCurrencyRate.setEnabled(false);
        Tab1.add(txtCurrencyRate);
        txtCurrencyRate.setBounds(116, 274, 130, 19);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(220, 15, 33, 15);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(455, 339, 37, 20);

        cmdChange.setText("Change");
        cmdChange.setEnabled(false);
        cmdChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdChangeActionPerformed(evt);
            }
        });

        Tab1.add(cmdChange);
        cmdChange.setBounds(129, 38, 88, 20);

        Tab.addTab("Header ", Tab1);

        Tab2.setLayout(null);

        Tab2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setNextFocusableComponent(TableH);
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(TableL);

        Tab2.add(jScrollPane1);
        jScrollPane1.setBounds(6, 38, 732, 176);

        TableH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableH.setNextFocusableComponent(cmdNext2);
        HeaderPane.setViewportView(TableH);

        Tab2.add(HeaderPane);
        HeaderPane.setBounds(6, 240, 254, 124);

        cmdInsert.setMnemonic('I');
        cmdInsert.setText("Insert from GRN");
        cmdInsert.setNextFocusableComponent(TableL);
        cmdInsert.setEnabled(false);
        cmdInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertActionPerformed(evt);
            }
        });
        cmdInsert.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdInsertFocusGained(evt);
            }
        });

        Tab2.add(cmdInsert);
        cmdInsert.setBounds(407, 8, 140, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(TableL);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        cmdAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdAddFocusGained(evt);
            }
        });

        Tab2.add(cmdAdd);
        cmdAdd.setBounds(554, 8, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(TableL);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        cmdRemove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmdRemoveFocusGained(evt);
            }
        });

        Tab2.add(cmdRemove);
        cmdRemove.setBounds(646, 8, 92, 25);

        jLabel20.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel20.setText("Rejected Items");
        Tab2.add(jLabel20);
        jLabel20.setBounds(10, 14, 96, 15);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab2.add(jPanel4);
        jPanel4.setBounds(100, 18, 294, 5);

        cmdNext2.setText("Next >>");
        cmdNext2.setNextFocusableComponent(cmdBack2);
        cmdNext2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdNext2);
        cmdNext2.setBounds(630, 322, 102, 25);

        cmdBack2.setText("<< Back");
        cmdBack2.setNextFocusableComponent(cmdInsert);
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });

        Tab2.add(cmdBack2);
        cmdBack2.setBounds(524, 322, 102, 25);

        jLabel6.setText("Press Ctrl+C to copy selected line.");
        Tab2.add(jLabel6);
        jLabel6.setBounds(8, 216, 288, 15);

        cmdShowGRN.setText("Show GRN");
        cmdShowGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowGRNActionPerformed(evt);
            }
        });

        Tab2.add(cmdShowGRN);
        cmdShowGRN.setBounds(361, 226, 113, 25);

        Tab.addTab("Item Information", Tab2);

        Tab3.setLayout(null);

        Tab3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Tab3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab3FocusGained(evt);
            }
        });

        jLabel31.setText("Hierarchy ");
        Tab3.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setEditable(true);
        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        Tab3.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab3.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab3.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab3.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab3.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 518, 19);

        jLabel36.setText("Your Action  ");
        Tab3.add(jLabel36);
        jLabel36.setBounds(8, 124, 76, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 169, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                OpgHoldFocusLost(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab3.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab3.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        Tab3.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 24);

        jLabel34.setText("Remarks");
        Tab3.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack3);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        Tab3.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 19);

        cmdBack3.setText("<< Back");
        cmdBack3.setNextFocusableComponent(cmbHierarchy);
        cmdBack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack3ActionPerformed(evt);
            }
        });

        Tab3.add(cmdBack3);
        cmdBack3.setBounds(634, 322, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        Tab3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(609, 77, 37, 20);

        Tab.addTab("Approval", Tab3);

        Tab4.setLayout(null);

        Tab4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        Tab4.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        Tab4.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 694, 144);

        jLabel9.setText("Document Update History");
        Tab4.add(jLabel9);
        jLabel9.setBounds(14, 190, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        Tab4.add(jScrollPane3);
        jScrollPane3.setBounds(14, 206, 538, 133);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        Tab4.add(cmdViewHistory);
        cmdViewHistory.setBounds(569, 236, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        Tab4.add(cmdNormalView);
        cmdNormalView.setBounds(569, 269, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        Tab4.add(cmdPreviewA);
        cmdPreviewA.setBounds(569, 204, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        Tab4.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(569, 301, 132, 24);

        txtAuditRemarks.setEnabled(false);
        Tab4.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(569, 338, 129, 19);

        Tab.addTab("Status", Tab4);

        getContentPane().add(Tab);
        Tab.setBounds(4, 68, 752, 398);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 466, 752, 22);

    }//GEN-END:initComponents

    private void cmdChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdChangeActionPerformed
        // TODO add your handling code here:
        txtDocNo.setEnabled(false);
        txtDocNo.setEditable(false);        
    }//GEN-LAST:event_cmdChangeActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0)
        {
          txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
          BigEdit bigEdit=new BigEdit();
          bigEdit.theText=txtAuditRemarks;
          bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBigActionPerformed

    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed

    private void cmdShowGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowGRNActionPerformed
        // TODO add your handling code here:
        try
        {
                String DocNo=DataModelL.getValueByVariable("GRN_NO",TableL.getSelectedRow());
                if(!DocNo.trim().equals(""))
                {
                AppletFrame aFrame=new AppletFrame("GRN");
                aFrame.startAppletEx("EITLERP.Stores.frmGRN","GRN");
                frmGRN ObjDoc=(frmGRN) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
                }
                else
                {
                  JOptionPane.showMessageDialog(null,"GRN no. not specified");  
                }
        }
        catch(Exception e)
        {
            
        }
        
    }//GEN-LAST:event_cmdShowGRNActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjRJN.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjRJN.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(TableL.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModelL.addRow(rowData);
                    int NewRow=TableL.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<TableL.getColumnCount();i++) {
                        TableL.setValueAt(TableL.getValueAt(TableL.getSelectedRow(),i), NewRow, i);
                    }
                    UpdateSrNo();
                }
            }
        }
        
    }//GEN-LAST:event_TableLKeyReleased
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgHoldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldFocusLost
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void cmdRemoveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdRemoveFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to remove selected row from the table");
    }//GEN-LAST:event_cmdRemoveFocusGained
    
    private void cmdAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdAddFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to add a new row to the table");
    }//GEN-LAST:event_cmdAddFocusGained
    
    private void cmdInsertFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmdInsertFocusGained
        // TODO add your handling code here:
        ShowMessage("Click this button to bring GRN item dialog box");
    }//GEN-LAST:event_cmdInsertFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void cmbCurrencyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCurrencyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the currency");
    }//GEN-LAST:event_cmbCurrencyFocusGained
    
    private void txtGatepassDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Shows date of gatepass selected");
    }//GEN-LAST:event_txtGatepassDateFocusGained
    
    private void txtGatepassNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter gatepass no. Press F1 for the list of gatepasses");
    }//GEN-LAST:event_txtGatepassNoFocusGained
    
    private void cmbGatepassTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbGatepassTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select type of gatepass");
    }//GEN-LAST:event_cmbGatepassTypeFocusGained
    
    private void cmbTransporterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransporterFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the transporter");
    }//GEN-LAST:event_cmbTransporterFocusGained
    
    private void cmbTransportModeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransportModeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select mode of transport");
    }//GEN-LAST:event_cmbTransportModeFocusGained
    
    private void txtSuppCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter supplier id. Press F1 for the list of suppliers");
    }//GEN-LAST:event_txtSuppCodeFocusGained
    
    private void txtDocDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDocDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Date in DD/MM/YYYY");
    }//GEN-LAST:event_txtDocDateFocusGained
    
    private void Tab3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab3FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab3FocusGained
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmdInsert.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtDocDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void cmdBack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack3ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdBack3ActionPerformed
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void txtGatepassNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGatepassNoKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            if(EITLERPGLOBAL.getCombostrCode(cmbGatepassType).equals("R")) {
                aList.SQL="SELECT GATEPASS_NO,DATE_FORMAT(GATEPASS_DATE,'%d/%m/%Y') AS Date FROM D_INV_RGP_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 ORDER BY GATEPASS_NO";
            }
            else {
                aList.SQL="SELECT GATEPASS_NO,DATE_FORMAT(GATEPASS_DATE,'%d/%m/%Y') AS Date FROM D_INV_NRGP_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 ORDER BY GATEPASS_NO";
            }
            
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=1;
            
            if(aList.ShowLOV()) {
                
                txtGatepassNo.setText(aList.ReturnVal);
            }
        }
        //=========================================
        
    }//GEN-LAST:event_txtGatepassNoKeyPressed
    
    private void txtGatepassNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGatepassNoFocusLost
    
    private void txtSuppCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSuppCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSuppCodeActionPerformed
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled())
        {
          OpgHold.setSelected(true);  
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjColumn.Close();
        ObjTax.Close();
        ObjRJN.Close();
        
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void txtSuppCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSuppCodeKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND BLOCKED='N' AND APPROVED=1 ORDER BY SUPP_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtSuppCode.setText(aList.ReturnVal);
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        //=========================================
        
    }//GEN-LAST:event_txtSuppCodeKeyPressed
    
    private void txtSuppCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCodeFocusLost
        // TODO add your handling code here:
        if(!txtSuppCode.getText().trim().equals("")) {
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
        }
        
        //Special Addition
        if(txtSuppCode.getText().trim().equals("000000"))
        {
          //Allow to enter party name  
          txtSuppName.setEnabled(true);
          txtSuppName.requestFocus();
          txtSuppName.selectAll();
        }
        else
        {
          txtSuppName.setEnabled(false);  
        }
        
    }//GEN-LAST:event_txtSuppCodeFocusLost
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableL.getRowCount()>0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost
        // TODO add your handling code here:
        
        //Update Header Custom Columns
//        for(int i=0;i<TableH.getRowCount();i++) {
//            UpdateResults_H(i);
//        }
        
    }//GEN-LAST:event_TableLFocusLost
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[1];
        DataModelL.addRow(rowData);
        DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
        TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
        UpdateSrNo();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        if(EditMode!=0) {
            //=========== Rejected Reason List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("REJECTED_REASON_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT PARA_CODE,D_COM_PARAMETER_MAST.DESC FROM D_COM_PARAMETER_MAST WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PARA_ID='REJECTED_REASON' ORDER BY PARA_CODE";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null)
                        {
                          TableL.getCellEditor().stopCellEditing();  
                        }
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("REJECTED_REASON_ID"));
                    }
                }
            }
            //=========================================
            
            
            if(evt.getKeyCode()==122) //F11 Key pressed
            {
                String lItemID=(String)TableL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                
                frmItemHistory ObjItem=new frmItemHistory();
                ObjItem.ShowForm(lItemID);
            }
            
            
            //======== Lot Entry ============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("QTY")) {
                if(evt.getKeyCode()==112) //F1 Key
                {
                    EnterRJNLotQty ObjLot=new EnterRJNLotQty();
                    ObjLot.ItemID=DataModelL.getValueByVariable("ITEM_ID", TableL.getSelectedRow());
                    ObjLot.BOENo=DataModelL.getValueByVariable("BOE_NO",TableL.getSelectedRow());
                    ObjLot.WareHouseID=DataModelL.getValueByVariable("WAREHOUSE_ID",TableL.getSelectedRow());
                    ObjLot.LocationID=DataModelL.getValueByVariable("LOCATION_ID",TableL.getSelectedRow());
                    
                    ObjLot.colLot=(HashMap)DataModelL.getUserObject(TableL.getSelectedRow());
                    
                    if(ObjLot.ShowList()) //Ok Pressed
                    {
                        DataModelL.SetUserObject(TableL.getSelectedRow(),ObjLot.colLot);
                        //Show Updated Qty.
                        double TotalQty=0;
                        for(int i=1;i<=ObjLot.colLot.size();i++) {
                            clsRJNLot ObjItemLot=(clsRJNLot)ObjLot.colLot.get(Integer.toString(i));
                            TotalQty=TotalQty+ObjItemLot.getAttribute("LOT_QTY").getVal();
                        }
                        TableL.setValueAt(Double.toString(TotalQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("QTY"));
                    }
                }
            }
            //=========== Lot Entry Complete ============
            
            
            //=========== Item List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("ITEM_ID")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null)
                        {
                          TableL.getCellEditor().stopCellEditing();  
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                    }
                }
            }
            //=========================================//
            
            
            //=========== BOE List ===============
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("BOE_NO")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    String ItemID=DataModelL.getValueByVariable("ITEM_ID",TableL.getSelectedRow());
                    
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT BOE_NO,DATE_FORMAT(BOE_DATE,'%d-%m-%Y') AS BOE_DATE FROM D_INV_ITEM_MASTER,D_INV_ITEM_LOT_MASTER  WHERE D_INV_ITEM_MASTER.COMPANY_ID=D_INV_ITEM_LOT_MASTER.COMPANY_ID AND D_INV_ITEM_MASTER.ITEM_ID=D_INV_ITEM_LOT_MASTER.ITEM_ID AND D_INV_ITEM_MASTER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_INV_ITEM_MASTER.APPROVED=1 AND D_INV_ITEM_MASTER.ITEM_ID='"+ItemID+"' ORDER BY BOE_DATE";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=1;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null)
                        {
                          TableL.getCellEditor().stopCellEditing();  
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_NO"));
                        
                        String BOESrNo=clsItem.getBOESrNo(EITLERPGLOBAL.gCompanyID, ItemID, aList.ReturnVal);
                        String BOEDate=EITLERPGLOBAL.formatDate(clsItem.getBOEDate(EITLERPGLOBAL.gCompanyID, ItemID, aList.ReturnVal));
                        
                        TableL.setValueAt(BOESrNo,TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_SR_NO"));
                        TableL.setValueAt(BOEDate,TableL.getSelectedRow(),DataModelL.getColFromVariable("BOE_DATE"));
                    }
                }
            }
            //=========================================
            
            
//            if(evt.getKeyCode()==155)//Insert Key Pressed
//            {
//                Object[] rowData=new Object[1];
//                DataModelL.addRow(rowData);
//                DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
//                TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
//                UpdateSrNo();
//            }
            
        }
    }//GEN-LAST:event_TableLKeyPressed
    
    private void cmdInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertActionPerformed
        // TODO add your handling code here:
        SelectGRN ObjGRN=new SelectGRN();
        ObjGRN.GRNType=2; //Raw Material GRNs
        if(ObjGRN.ShowList()) {
            DoNotEvaluate=true;
            
            if(ObjGRN.CopyHeader) {
                txtSuppCode.setText((String)ObjGRN.ObjGRN.getAttribute("SUPP_ID").getObj());
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
                
                if(txtSuppCode.getText().trim().equals("000000"))
                {
                  txtSuppName.setText((String)ObjGRN.ObjGRN.getAttribute("PARTY_NAME").getObj());  
                }
                
                
                EITLERPGLOBAL.setComboIndex(cmbCurrency,(int)ObjGRN.ObjGRN.getAttribute("CURRENCY_ID").getVal());
                txtCurrencyRate.setText(Double.toString(ObjGRN.ObjGRN.getAttribute("CURRENCY_RATE").getVal()));
            }
            
            for(int i=1;i<=ObjGRN.colSelItems.size();i++) {
                clsGRNItem ObjItem=(clsGRNItem)ObjGRN.colSelItems.get(Integer.toString(i));
                
                for(int r=0;r<TableL.getRowCount();r++) {
                    String GRNNo=(String)ObjItem.getAttribute("GRN_NO").getObj();
                    int GRNSrNo=(int)ObjItem.getAttribute("SR_NO").getVal();
                    
                    String tGRNNo=(String)DataModelL.getValueByVariable("GRN_NO",r);
                    int tGRNSrNo=Integer.parseInt((String)DataModelL.getValueByVariable("GRN_SR_NO",r));
                    
                    if(GRNNo.equals(tGRNNo)&&(GRNSrNo==tGRNSrNo)) {
                        JOptionPane.showMessageDialog(null,"GRN No. "+GRNNo+" Sr. "+GRNSrNo+" already exist");
                        return;
                    }
                }
            }
            
            DoNotEvaluate=true;
            
            //It will contain GRN Item Objects
            for(int i=1;i<=ObjGRN.colSelItems.size();i++) {
                clsGRNItem ObjItem=(clsGRNItem)ObjGRN.colSelItems.get(Integer.toString(i));
                
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                
                
                int NewRow=TableL.getRowCount()-1;
                
                //Copy GRN Lot nos. to GRN Lot nos.
                HashMap colLot=new HashMap();
                
                for(int lot=1;lot<=ObjItem.colItemLot.size();lot++) {
                    clsRJNLot ObjLot=new clsRJNLot();
                    
                    clsGRNLot ObjGRNLot=(clsGRNLot)ObjItem.colItemLot.get(Integer.toString(lot));
                    ObjLot.setAttribute("SR_NO",(int)ObjGRNLot.getAttribute("SR_NO").getVal());
                    ObjLot.setAttribute("ITEM_LOT_NO",(String)ObjGRNLot.getAttribute("ITEM_LOT_NO").getObj());
                    ObjLot.setAttribute("LOT_QTY",0);
                    colLot.put(Integer.toString(lot),ObjLot);
                }
                //Set Lot Collection to Table Row
                DataModelL.SetUserObject(NewRow,colLot);
                //Completed
                
                DataModelL.setValueByVariable("SR_NO", Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("ITEM_ID",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC",(String)ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(),NewRow);
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                //DataModelL.setValueByVariable("QTY","0",NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("REJECTED_QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("UNIT_ID",Integer.toString((int)ObjItem.getAttribute("UNIT").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("BOE_NO",(String)ObjItem.getAttribute("BOE_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("BOE_SR_NO",(String)ObjItem.getAttribute("BOE_SR_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("BOE_DATE",EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("BOE_DATE").getObj()),NewRow);
                DataModelL.setValueByVariable("REMARKS","",NewRow);
                
                DataModelL.setValueByVariable("REJECTED_REASON_ID",Integer.toString((int)ObjItem.getAttribute("REJECTED_REASON_ID").getVal()),NewRow);
                DataModelL.setValueByVariable("REJECTED_REASON",clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"REJECTED_REASON",(int)ObjItem.getAttribute("REJECTED_REASON_ID").getVal()),NewRow);
                
                DataModelL.setValueByVariable("WAREHOUSE_ID",(String)ObjItem.getAttribute("WAREHOUSE_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",(String)ObjItem.getAttribute("LOCATION_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("GRN_NO",(String)ObjItem.getAttribute("GRN_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("GRN_SR_NO",Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("PO_NO",(String)ObjItem.getAttribute("PO_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("PO_SR_NO",Integer.toString((int)ObjItem.getAttribute("PO_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("PO_TYPE",Integer.toString((int)ObjItem.getAttribute("PO_TYPE").getVal()),NewRow);
                
                //========= Import Tax Columns - Match both columns with variable name ==========//
                for(int c=1;c<=10;c++) {
                    //Get the Column ID
                    int lnColID=(int)ObjItem.getAttribute("COLUMN_"+c+"_ID").getVal();
                    String strVariable="";
                    double lnPercentValue=0,lnValue=0;
                    
                    //Record the values
                    lnPercentValue=ObjItem.getAttribute("COLUMN_"+c+"_PER").getVal();
                    lnValue=ObjItem.getAttribute("COLUMN_"+c+"_AMT").getVal();
                    
                    if(lnColID>0) //Column ID set .. Continue
                    {
                        //Get the Variable Name
                        strVariable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, lnColID);
                    }
                    
                    //We have variable Name - Get the column no. of this form
                    int lnDestCol=DataModelL.getColFromVariable(strVariable);
                    
                    if(lnDestCol>=0) //We have found the column
                    {
                        //Replace the value of this form
                        DataModelL.setValueAt(Double.toString(lnValue), NewRow, lnDestCol);
                        
                        //Now check that percentage is used
                        int lnTaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, lnColID);
                        if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, lnTaxID)) {
                            DataModelL.setValueAt(Double.toString(lnPercentValue), NewRow, lnDestCol-1);
                        }
                    }
                }
                //===================== Import Completed =================//
                
                DoNotEvaluate=false;
                TableL.changeSelection(NewRow, 0,false,false);
                UpdateResults(DataModelL.getColFromVariable("QTY"));
                DoNotEvaluate=true;
                
                
            }
            
            UpdateSrNo();
            DoNotEvaluate=false;
        }
    }//GEN-LAST:event_cmdInsertActionPerformed
    
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane HeaderPane;
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JPanel Tab3;
    private javax.swing.JPanel Tab4;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableH;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbCurrency;
    private javax.swing.JComboBox cmbGatepassType;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbTransportMode;
    private javax.swing.JComboBox cmbTransporter;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdBack3;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdChange;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInsert;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNext2;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowGRN;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCurrencyRate;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGatepassDate;
    private javax.swing.JTextField txtGatepassNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSuppCode;
    private javax.swing.JTextField txtSuppName;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try
        {
        if(EditMode==0)
        {
           if(ObjRJN.getAttribute("APPROVED").getInt()==1)
           {
            lblTitle.setBackground(Color.BLUE);   
           }
           
           if(ObjRJN.getAttribute("APPROVED").getInt()!=1)
           {
            lblTitle.setBackground(Color.GRAY);   
           }
           
           if(ObjRJN.getAttribute("CANCELLED").getInt()==1)
           {
            lblTitle.setBackground(Color.RED);   
           }

            
        }
        }
        catch(Exception c)
        {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=10;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try {
            ClearFields();
            txtDocNo.setText((String)ObjRJN.getAttribute("RJN_NO").getObj());
            lblTitle.setText("REJECTION MEMO (Raw Material) - "+txtDocNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjRJN.getAttribute("REVISION_NO").getVal()));
            txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjRJN.getAttribute("RJN_DATE").getObj()));
            txtSuppCode.setText((String)ObjRJN.getAttribute("SUPP_ID").getObj());
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
            
            if(txtSuppCode.getText().trim().equals("000000"))
            {
              txtSuppName.setText((String)ObjRJN.getAttribute("PARTY_NAME").getObj());  
            }
            
            EITLERPGLOBAL.setComboIndex(cmbTransporter,(int)ObjRJN.getAttribute("TRANSPORTER").getVal());
            EITLERPGLOBAL.setComboIndex(cmbTransportMode,(int)ObjRJN.getAttribute("MODE_TRANSPORT").getVal());
            EITLERPGLOBAL.setComboIndex(cmbGatepassType,(String)ObjRJN.getAttribute("GATEPASS_TYPE").getObj());
            txtGatepassNo.setText((String)ObjRJN.getAttribute("GATEPASS_NO").getObj());
            txtGatepassDate.setText(EITLERPGLOBAL.formatDate((String)ObjRJN.getAttribute("GATEPASS_DATE").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbCurrency,(int)ObjRJN.getAttribute("CURRENCY_ID").getVal());
            txtCurrencyRate.setText(Double.toString(ObjRJN.getAttribute("CURRENCY_RATE").getVal()));
            chkCancelled.setSelected(ObjRJN.getAttribute("CANCELLED").getBool());
            txtRemarks.setText((String)ObjRJN.getAttribute("REMARKS").getObj());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjRJN.getAttribute("HIERARCHY_ID").getVal());
            
            //============= Display Custom Columns ========================
            for(int i=1;i<=10;i++) {
                int ColID=(int)ObjRJN.getAttribute("COLUMN_"+Integer.toString(i)+"_ID").getVal();
                int Col=DataModelH.getColFromID(ColID);
                int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);
                
                
                if(ColID!=0) {
                    //Set the Formula
                    if(ObjRJN.getAttribute("COLUMN_"+Integer.toString(i)+"_FORMULA").getObj()!=null) {
                        DataModelH.SetFormula(Col, (String)ObjRJN.getAttribute("COLUMN_"+Integer.toString(i)+"_FORMULA").getObj());
                    }
                    else {
                        DataModelH.SetFormula(Col, "");
                    }
                    
                    
                    //Set the Percentage. If there
                    if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        DataModelH.setValueByVariableEx("P_"+ColID, Double.toString(ObjRJN.getAttribute("COLUMN_"+Integer.toString(i)+"_PER").getVal()),1);
                    }
                    
                    //Set the Value
                    DataModelH.setValueByVariableEx(Variable, Double.toString(ObjRJN.getAttribute("COLUMN_"+Integer.toString(i)+"_AMT").getVal()), 1);
                }
                
            }
            //=================================================================//
            
            
            
            //========= Display Line Items =============//
            FormatGrid();
            
            DoNotEvaluate=true;
            
            for(int i=1;i<=ObjRJN.colRJNItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                int NewRow=TableL.getRowCount()-1;
                
                clsRJNItem ObjItem=(clsRJNItem)ObjRJN.colRJNItems.get(Integer.toString(i));
                
                //Set the User Object - Lot Nos.
                DataModelL.SetUserObject(NewRow, ObjItem.colItemLot);
                
                DataModelL.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_ID",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("ITEM_EXTRA_DESC",(String)ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(),NewRow);
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("UNIT_ID",Integer.toString((int)ObjItem.getAttribute("UNIT").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("BOE_NO",(String)ObjItem.getAttribute("BOE_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("BOE_SR_NO",(String)ObjItem.getAttribute("BOE_SR_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("BOE_DATE",EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("BOE_DATE").getObj()),NewRow);
                DataModelL.setValueByVariable("REJECTED_REASON_ID",Integer.toString((int)ObjItem.getAttribute("REJECTED_REASON_ID").getVal()),NewRow);
                DataModelL.setValueByVariable("REJECTED_REASON",clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"REJECTED_REASON",(int)ObjItem.getAttribute("REJECTED_REASON_ID").getVal()),NewRow);
                DataModelL.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID",(String)ObjItem.getAttribute("WAREHOUSE_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",(String)ObjItem.getAttribute("LOCATION_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("GRN_NO",(String)ObjItem.getAttribute("GRN_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("GRN_SR_NO",Integer.toString((int)ObjItem.getAttribute("GRN_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("PO_NO",(String)ObjItem.getAttribute("PO_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("PO_SR_NO",Integer.toString((int)ObjItem.getAttribute("PO_SR_NO").getVal()),NewRow);
                DataModelL.setValueByVariable("PO_TYPE",Integer.toString((int)ObjItem.getAttribute("PO_TYPE").getVal()),NewRow);
                
                //============= Display Custom Columns ========================
                for(int c=1;c<=10;c++) {
                    int ColID=(int)ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_ID").getVal();
                    int Col=DataModelL.getColFromID(ColID);
                    int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                    String Variable=ObjColumn.getVariableName(EITLERPGLOBAL.gCompanyID, ColID);
                    
                    if(ColID!=0) {
                        //Set the Formula
                        if(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_FORMULA").getObj()!=null) {
                            DataModelL.SetFormula(Col, (String)ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_FORMULA").getObj());
                        }
                        else {
                            DataModelL.SetFormula(Col, "");
                        }
                        
                        //Set the Percentage. If there
                        if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                            DataModelL.setValueByVariable("P_"+ColID, Double.toString(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_PER").getVal()),NewRow);
                        }
                        
                        //Set the Value
                        DataModelL.setValueByVariable(Variable, Double.toString(ObjItem.getAttribute("COLUMN_"+Integer.toString(c)+"_AMT").getVal()), NewRow);
                    }
                }
                //=================================================================//
            }
            
            DoNotEvaluate=false;
            
            //UpdateResults_H(0);
            UpdateAmounts();
            UpdateSrNo();
            
            if(EditMode==0) {
                DataModelL.TableReadOnly(true);
                DataModelH.TableReadOnly(true);
            }
            //=========================================//
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjRJN.getAttribute("RJN_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 10, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsRJN.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsRJN ObjHistory=(clsRJN)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
            
            
            //============================================================//
            
            
            ShowMessage("Ready");
        }
        catch(Exception e) {
            
        }
    }
    
    //Sets data to the Class Object
    private void SetData() {
        //Header Fields
        
        if(EditMode==EITLERPGLOBAL.ADD)
        {
        ObjRJN.UserDocNo=txtDocNo.isEnabled();  
        ObjRJN.setAttribute("RJN_NO",txtDocNo.getText());
        }
        else
        {
        ObjRJN.UserDocNo=false;      
        }
        
        ObjRJN.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjRJN.setAttribute("PREFIX",SelPrefix);
        ObjRJN.setAttribute("SUFFIX",SelSuffix);
        ObjRJN.setAttribute("FFNO",FFNo);
        ObjRJN.setAttribute("RJN_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjRJN.setAttribute("SUPP_ID",txtSuppCode.getText());
        
        ObjRJN.setAttribute("PARTY_NAME","");
        if(txtSuppCode.getText().trim().equals("000000"))
        {
            ObjRJN.setAttribute("PARTY_NAME",txtSuppName.getText());
        }
        
        ObjRJN.setAttribute("MODE_TRANSPORTER",EITLERPGLOBAL.getComboCode(cmbTransportMode));
        ObjRJN.setAttribute("TRANSPORTER",EITLERPGLOBAL.getComboCode(cmbTransporter));
        ObjRJN.setAttribute("GATEPASS_TYPE",EITLERPGLOBAL.getCombostrCode(cmbGatepassType));
        ObjRJN.setAttribute("GATEPASS_NO",txtGatepassNo.getText());
        ObjRJN.setAttribute("GATEPASS_DATE",EITLERPGLOBAL.formatDate(txtGatepassDate.getText()));
        ObjRJN.setAttribute("CURRENCY_ID",EITLERPGLOBAL.getComboCode(cmbCurrency));
        ObjRJN.setAttribute("CURRENCY_RATE",EITLERPGLOBAL.round(Double.parseDouble(txtCurrencyRate.getText()),5));
        
        if(chkCancelled.isSelected()) {
            ObjRJN.setAttribute("CANCELLED",true);
        }
        else {
            ObjRJN.setAttribute("CANCELLED",false);
        }
        
        ObjRJN.setAttribute("RJN_TYPE",2); //Fixed type 2 - Raw Material, 1 - General
        ObjRJN.setAttribute("FOR_STORE",clsUser.getDeptID(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
        ObjRJN.setAttribute("REMARKS",txtRemarks.getText());
        
        //----- Update Approval Specific Fields -----------//
        ObjRJN.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjRJN.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjRJN.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjRJN.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjRJN.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjRJN.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjRJN.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjRJN.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjRJN.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjRJN.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjRJN.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjRJN.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //============= Set Custom Columns ========================
        int ColCounter=0;
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lnPercentValue=0;
            int ColID=DataModelH.getColID(i);
            int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
            String Variable=DataModelH.getVariable(i);
            
            if( (ColID!=0) && (ColID!=-99) && (!Variable.substring(0,2).equals("P_"))) {
                ColCounter++;
                ObjRJN.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_ID",ColID);
                ObjRJN.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_FORMULA",DataModelH.getFormula(i));
                
                if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                    lnPercentValue=Double.parseDouble(DataModelH.getValueByVariableEx("P_"+ColID,1));
                    ObjRJN.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_PER",EITLERPGLOBAL.round(lnPercentValue,3));
                }
                ObjRJN.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_AMT",EITLERPGLOBAL.round(Double.parseDouble(DataModelH.getValueByVariableEx(Variable, 1)),5));
                ObjRJN.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_CAPTION",(String)TableH.getValueAt(i, 0));
            }
        }
        //=================================================================
        
        
        
        //=================== Setting up Line Items ==================//
        
        ObjRJN.colRJNItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsRJNItem ObjItem=new clsRJNItem();
            
            ObjItem.setAttribute("SR_NO",DataModelL.getValueByVariable("SR_NO",i));
            ObjItem.setAttribute("ITEM_ID",DataModelL.getValueByVariable("ITEM_ID",i));
            ObjItem.setAttribute("ITEM_EXTRA_DESC",DataModelL.getValueByVariable("ITEM_EXTRA_DESC",i));
            ObjItem.setAttribute("QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY",i)),3));
            ObjItem.setAttribute("UNIT",Integer.parseInt(DataModelL.getValueByVariable("UNIT_ID",i)));
            ObjItem.setAttribute("REJECTED_REASON_ID",Integer.parseInt(DataModelL.getValueByVariable("REJECTED_REASON_ID",i)));
            ObjItem.setAttribute("BOE_NO",DataModelL.getValueByVariable("BOE_NO",i));
            ObjItem.setAttribute("BOE_SR_NO",DataModelL.getValueByVariable("BOE_SR_NO",i));
            ObjItem.setAttribute("BOE_DATE",EITLERPGLOBAL.formatDate(DataModelL.getValueByVariable("BOE_DATE",i)));
            ObjItem.setAttribute("REMARKS",DataModelL.getValueByVariable("REMARKS",i));
            ObjItem.setAttribute("WAREHOUSE_ID",DataModelL.getValueByVariable("WAREHOUSE_ID",i));
            ObjItem.setAttribute("LOCATION_ID",DataModelL.getValueByVariable("LOCATION_ID",i));
            ObjItem.setAttribute("PO_NO",DataModelL.getValueByVariable("PO_NO",i));
            ObjItem.setAttribute("PO_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("PO_SR_NO",i)));
            ObjItem.setAttribute("PO_TYPE",Integer.parseInt(DataModelL.getValueByVariable("PO_TYPE",i)));
            ObjItem.setAttribute("GRN_NO",DataModelL.getValueByVariable("GRN_NO",i));
            ObjItem.setAttribute("GRN_SR_NO",Integer.parseInt(DataModelL.getValueByVariable("GRN_SR_NO",i)));
            
            //============= Set Custom Columns ========================//
            ColCounter=0;
            
            for(int c=0;c<TableL.getColumnCount()-1;c++) {
                double lnPercentValue=0;
                int ColID=DataModelL.getColID(c);
                int TaxID=ObjColumn.getTaxID(EITLERPGLOBAL.gCompanyID, ColID);
                String Variable=DataModelL.getVariable(c);
                
                if( (ColID!=0) && (ColID!=-99) && (!Variable.substring(0,2).equals("P_"))) {
                    ColCounter++;
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_ID",ColID);
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_FORMULA",DataModelL.getFormula(c));
                    
                    if(ObjTax.getUsePercentage(EITLERPGLOBAL.gCompanyID, TaxID)) {
                        lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+ColID,i));
                        ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_PER",EITLERPGLOBAL.round(lnPercentValue,3));
                    }
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_AMT",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable(Variable, i)),5));
                    ObjItem.setAttribute("COLUMN_"+Integer.toString(ColCounter)+"_CAPTION",TableL.getColumnName(c));
                }
            }
            //===========================================================//
            
            
            //======= Insert Lot Nos. ======//
            HashMap lcolLot=(HashMap)DataModelL.getUserObject(i);
            
            for(int l=1;l<=lcolLot.size();l++) {
                clsRJNLot ObjLot=new clsRJNLot();
                
                clsRJNLot ObjList=(clsRJNLot)lcolLot.get(Integer.toString(l));
                
                ObjLot.setAttribute("SR_NO",l);
                ObjLot.setAttribute("ITEM_LOT_NO",(String)ObjList.getAttribute("ITEM_LOT_NO").getObj());
                ObjLot.setAttribute("LOT_QTY",ObjList.getAttribute("LOT_QTY").getVal());
                
                ObjItem.colItemLot.put(Integer.toString(ObjItem.colItemLot.size()+1),ObjLot);
            }
            //======== Lot Insertion Completed =========//
            
            ObjRJN.colRJNItems.put(Integer.toString(ObjRJN.colRJNItems.size()+1),ObjItem);
        }
        //======================Completed ===========================//
    }
    
    
    private void SetupColumns() {
        HashMap List=new HashMap();
        HashMap ColList=new HashMap();
        
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=10 AND HEADER_LINE='L' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableL.getColumnModel();
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelL.SetVariable(TableL.getColumnCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1, true);
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
                
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
            else {
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                DataModelL.SetNumeric(TableL.getColumnCount()-1,true);
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelL.SetFormula(TableL.getColumnCount()-1, (String)ObjTax.getAttribute("FORMULA").getObj());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
        }
        
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableL.setRowSelectionAllowed(true);
        TableL.setColumnSelectionAllowed(true);
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=10 AND HIDDEN=0 AND SHOW_LAST=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
            
            
            if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
            }
            else {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
            }
            
            
            String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
            
            if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount()-1, -99);
            }
            else {
                DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            }
            
            DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            if(ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            }
        }
        
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=10 AND HIDDEN=1 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //
            DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE").getObj());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            DataModelL.SetNumeric(TableL.getColumnCount()-1,ObjColumn.getAttribute("NUMERIC").getBool());
            
            DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            
            //Hide the Column
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMaxWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setMinWidth(0);
            TableL.getColumnModel().getColumn(TableL.getColumnCount()-1).setWidth(0);
        }
    }
    
    private void FormatGrid() {
        HashMap ColList=new HashMap();
        
        try
        {
            
        cmdShowGRN.requestFocus();
        
        DataModelL=new EITLTableModel();
        
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(false);
        
        ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=10 AND HIDDEN=0 AND SHOW_LAST=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
        for(int i=1;i<=ColList.size();i++) {
            clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
            
            //Add Column First
            DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
            
            
            if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
            }
            else {
                DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
            }
            
            
            String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
            
            if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                DataModelL.SetColID(TableL.getColumnCount()-1, -99);
            }
            else {
                DataModelL.SetColID(TableL.getColumnCount()-1, 0);
            }
            
            DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
            DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
            DataModelL.SetInclude(TableL.getColumnCount()-1,true);
            
            if(ObjColumn.getAttribute("READONLY").getBool()) {
                DataModelL.SetReadOnly(TableL.getColumnCount()-1);
            }
        }
        
        SetupColumns();
        
        //Now hide the column 1
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //------- Install Table List Selection Listener ------//
        TableL.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableL.getSelectedColumn();
                String strVar=DataModelL.getVariable(last);
                
              //=============== Cell Editing Routine =======================//  
              try
              {
              cellLastValueL=(String)TableL.getValueAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                            
              TableL.editCellAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
              if(TableL.getEditorComponent() instanceof JTextComponent)
              {
                  ((JTextComponent)TableL.getEditorComponent()).selectAll();
              }
              }
              catch(Exception cell){}
              //============= Cell Editing Routine Ended =================//
                
                
                ShowMessage("Ready");
                try
                {
                if(strVar.equals("ITEM_ID")) {
                    ShowMessage("Enter item id. Press F1 to for the list of items");
                }
                
                if(strVar.equals("QTY")) {
                    ShowMessage("Press F1 to specify lotwise qty");
                }
                
                if(strVar.equals("RATE")) {
                    ShowMessage("Enter Rate");
                }
                
                if(strVar.equals("BOE_NO")) {
                    ShowMessage("Enter BOE No. Press F1 for the list of BOE Nos. of selected item");
                }
                }
                catch(Exception v)
                {
                    
                }
            }
        }
        );
        //===================================================//
        
        
        //----- Install Table Model Event Listener -------//
        TableL.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    
                    //=========== Cell Update Prevention Check ===========//
                    String curValue=(String)TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                    if(curValue.equals(cellLastValueL))
                    {
                      return;
                    }
                    //====================================================//
                    
                    
                    
                    if(DoNotEvaluate)
                    {
                      return;  
                    }
                    
                    if(!Updating) {
                        UpdateResults(col);
                    }
                    
                    if(col==DataModelL.getColFromVariable("REJECTED_REASON_ID")) {
                        String Reason=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"REJECTED_REASON",Integer.parseInt(DataModelL.getValueByVariable("REJECTED_REASON_ID", TableL.getSelectedRow())));
                        DataModelL.setValueByVariable("REJECTED_REASON",Reason,TableL.getSelectedRow());
                    }
                    
                    
                    //If Item ID has changed
                    if(col==DataModelL.getColFromVariable("ITEM_ID")) {
                        try {
                            DoNotEvaluate=true; //Stops Formula Evaluation
                            String lItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                            String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                            String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                            String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                            TableL.setValueAt(lItemName, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_NAME"));
                            TableL.setValueAt(lWareHouseID, TableL.getSelectedRow(),DataModelL.getColFromVariable("WAREHOUSE_ID"));
                            TableL.setValueAt(lLocationID, TableL.getSelectedRow(),DataModelL.getColFromVariable("LOCATION_ID"));
                            
                            int lItemUnit=clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                            TableL.setValueAt(Integer.toString(lItemUnit),TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_ID"));
                            String lUnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
                            TableL.setValueAt(lUnitName,TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_NAME"));
                            DoNotEvaluate=false;
                        }
                        catch(Exception ex){DoNotEvaluate=false;}
                    }
                }
            }
        });
        
        }
        catch(Exception e)
        {
            
        }
    }
    
    
    private void GatherVariableValues_H() {
        String strVariable="";
        int varCol=0;
        double lnValue=0,lnSum=0;
        
        //Scan the table and gather values for variables
        colVariables_H.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lValue=0;
            if(DataModelH.getVariable(i)!=null) {
                if(!DataModelH.getVariable(i).equals(""))    //If Variable not blank
                {
                    colVariables_H.put(DataModelH.getVariable(i),(String)TableH.getValueAt(i, 1));
                    
                    //Add variable Value to Parser Table
                    if((TableH.getValueAt( i,1)!=null)&&(!TableH.getValueAt( i,1).toString().equals(""))) {
                        lValue=Double.parseDouble((String)TableH.getValueAt( i,1));
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelH.getVariable(i),lValue);
                }
            }
        }
        
        
        //Gather Variables - sum of line columns
        for(int c=0;c<TableL.getColumnCount();c++) {
            strVariable=DataModelL.getVariable(c);
            strVariable=strVariable.trim();
            
            if((strVariable!=null) && (!strVariable.equals(""))) {
                varCol=DataModelL.getColFromVariable(strVariable);
                
                //Do the sum
                lnSum=0;
                
                try {
                    for(int r=0;r<TableL.getRowCount();r++) {
                        String theVal=(String)DataModelL.getValueAt(r,varCol);
                        
                        if(theVal==null) {
                        }
                        else {
                            lnValue=Double.parseDouble(TableL.getValueAt(r, varCol).toString());
                            lnSum=lnSum+lnValue;
                        }
                    }
                }
                catch(Exception e) {
                }
                //Sum Complete. Add to Parser Table
                myParser.addVariable("SUM_"+strVariable,lnSum);
            }
        }
    }
    
    private void SetupColumns_H() {
        HashMap List=new HashMap();
        Object[] rowData;
        
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=10 AND HEADER_LINE='H' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableH.getColumnModel();
        
        TableH.removeAll();
        
        if(List.size()<=0) {
            HeaderPane.setVisible(false);
        }
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                //DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj()+"%";
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelH.SetVariable(TableH.getRowCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1, true);
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
                
            }
            else {
                //DataModelH.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                //Set Column ID
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Set Formula
                DataModelH.SetFormula(TableH.getRowCount()-1,(String)ObjTax.getAttribute("FORMULA").getObj());
            }
        }
    }
    
    private void FormatGrid_H() {
        DataModelH=new EITLTableModel();
        
        EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
        
        TableH.removeAll();
        TableH.setModel(DataModelH);
        
        Renderer.setColor(0, 0, Color.LIGHT_GRAY);
        
        //Set the table Readonly
        DataModelH.TableReadOnly(false);
        DataModelH.SetReadOnly(0);
        
        //Add Default Columns
        DataModelH.addColumn("Column");
        DataModelH.addColumn("Value");
        DataModelH.SetNumeric(1,true);
        
        TableH.getColumnModel().getColumn(0).setCellRenderer(Renderer);
        SetupColumns_H();
        
        TableColumnModel ColModel=TableH.getColumnModel();
        TableH.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //------- Install Table List Selection Listener ------//
        TableH.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int last=TableH.getSelectedColumn();
                String strVar=DataModelH.getVariable(last);

                
              //=============== Cell Editing Routine =======================//  
              try
              {
              cellLastValueH=(String)TableH.getValueAt(TableH.getSelectedRow(),TableH.getSelectedColumn());
                            
              TableH.editCellAt(TableH.getSelectedRow(),TableH.getSelectedColumn());
              if(TableH.getEditorComponent() instanceof JTextComponent)
              {
                  ((JTextComponent)TableH.getEditorComponent()).selectAll();
              }
              }
              catch(Exception cell){}
              //============= Cell Editing Routine Ended =================//
              
                
            }
        }
        );
        //===================================================//
        
        
        //----- Install Table Model Event Listener -------//
        TableH.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    
                    //=========== Cell Update Prevention Check ===========//
                    String curValue=(String)TableH.getValueAt(TableH.getSelectedRow(), e.getColumn());
                    if(curValue.equals(cellLastValueH))
                    {
                      return;
                    }
                    //====================================================//
                    
                    int col = e.getColumn();
                    int row=e.getLastRow();
                    if(!Updating_H)
                    {UpdateResults_H(row);}
                }
            }
        });
    }
    
    private void UpdateResults_H(int pCol) {
        try {
            int ColID=0,TaxID=0,UpdateCol=0;
            String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
            double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
            Object result;
            boolean updateIt=true;
            int QtyCol=0,RateCol=0,GAmountCol=0;
            
            Updating_H=true; //Stops Recursion
            
            srcVariable=DataModelH.getVariable(pCol); //Variable name of currently updated Column
            
            //If this column is percentage column. Variable name would be P_XXX
            //We shoule use actual variable name, it will be found on it's associated next column
            if(srcVariable.substring(0,2).equals("P_")) {
                srcVariable=DataModelH.getVariable(pCol+1);
            }
            
            GatherVariableValues_H();
            
            for(int i=0;i<TableH.getRowCount();i++) {
                strVariable=DataModelH.getVariable(i);
                
                ColID=DataModelH.getColID(i);
                
                TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                
                //Exclude Percentage Columns and System Columns
                if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)) {
                    //If percentage is used
                    if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                        
                        //Load the Formula for calculation
                        if((EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                            strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        }
                        else {
                            strFormula=DataModelH.getFormula(i);
                        }
                        
                        
                        //Now Read Associated Percentage Column
                        lnPercentValue=Double.parseDouble(DataModelH.getValueByVariableEx("P_"+Integer.toString(ColID),1));
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                            //Update the Column
                            srcVar2=DataModelH.getVariable(pCol+1);
                            
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(UpdateCol==pCol+1) {
                                    updateIt=true;
                                }
                                else {
                                    if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                        updateIt=true; //Then update it
                                    }
                                    else {
                                        if((strFormula.indexOf("QTY")!=-1)||(strFormula.indexOf("RATE")!=-1)||(strFormula.indexOf("GROSS_AMOUNT")!=-1)) {
                                            if(pCol==QtyCol||pCol==RateCol||pCol==GAmountCol)
                                            { updateIt=true;  }
                                        }
                                    }
                                }
                                
                                 //============ New Change In Parser =============//   
                                //Now Condition. First check whether percentage has been entered
                                if(lnPercentValue>0)
                                {
                                   //Yes Percentage Entered. Then we must update the associated column
                                   updateIt=true;
                                }
                                else
                                {
                                  //If not Percentage entered than check whether any value is there
                                  //Otherwise go with the Dependent decision
                                }
                                //=================================================//
                                
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                    else //Percentage Not Used
                    {
                        
                        //Load the Formula for calculation
                        if((EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                            strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        }
                        else {
                            strFormula=DataModelH.getFormula(i);
                        }
                        
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=Double.parseDouble(result.toString());
                            //Update the Column
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(strFormula.indexOf(srcVariable)!=-1) {
                                    updateIt=true;
                                }
                                else {updateIt=true;
                                }
                                
                                 //============ New Change In Parser =============//   
                                //Now Condition. First check whether percentage has been entered
                                if(lnPercentValue>0)
                                {
                                   //Yes Percentage Entered. Then we must update the associated column
                                   updateIt=true;
                                }
                                else
                                {
                                  //If not Percentage entered than check whether any value is there
                                  //Otherwise go with the Dependent decision
                                    updateIt=false;
                                }
                                //=================================================//
                                
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                }
            }
            Updating_H=false;
            UpdateAmounts();
        }
        catch(Exception e) {
            Updating_H=false;
        }
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=10");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=10");
        }
        
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate Department Combo ------- //
        cmbCurrencyModel=new EITLComboModel();
        cmbCurrency.removeAllItems();
        cmbCurrency.setModel(cmbCurrencyModel);
        
        List=clsCurrency.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsCurrency ObjCurrency=(clsCurrency) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjCurrency.getAttribute("CURRENCY_ID").getVal();
            aData.Text=(String)ObjCurrency.getAttribute("CURRENCY_DESC").getObj();
            cmbCurrencyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbTransportModel=new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransportModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransportModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate cmbType ------- //
        cmbTransportModeModel=new EITLComboModel();
        cmbTransportMode.removeAllItems();
        cmbTransportMode.setModel(cmbTransportModeModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT_MODE'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransportModeModel.addElement(aData);
        }
        //------------------------------ //
        
        //--- Generate Type Combo ------//
        cmbGatepassTypeModel=new EITLComboModel();
        cmbGatepassType.removeAllItems();
        cmbGatepassType.setModel(cmbGatepassTypeModel);
        
        ComboData aData=new ComboData();
        aData.strCode="N";
        aData.Text="Non Returnable";
        cmbGatepassTypeModel.addElement(aData);
        
        aData=new ComboData();
        aData.strCode="R";
        aData.Text="Returnable";
        cmbGatepassTypeModel.addElement(aData);
        //===============================//
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 10,(String)ObjRJN.getAttribute("RJN_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,565)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }*/
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 10,(String)ObjRJN.getAttribute("RJN_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,10,FromUserID,(String)ObjRJN.getAttribute("RJN_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,561)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
   /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,562))
   {
      cmdEdit.setEnabled(true);
   }
   else
   {
       cmdEdit.setEnabled(false);
   }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,563)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,564)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void UpdateSrNo() {
        int SrCol=DataModelL.getColFromVariable("SR_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void UpdateAmounts() {
        
        //Nothing to do in this form
    }
    
    private void ClearFields() {
        txtDocDate.setText("");
        txtSuppCode.setText("");
        txtSuppName.setText("");
        txtGatepassNo.setText("");
        txtGatepassDate.setText("");
        txtCurrencyRate.setText("0.00");
        txtRemarks.setText("");
        txtToRemarks.setText("");
        chkCancelled.setSelected(false);
        txtToRemarks.setText("");
        FormatGrid();
        FormatGrid_H();
        FormatGridA();
        FormatGridHS();
    }
    
    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(false);
        txtDocDate.setEnabled(pStat);
        txtSuppCode.setEnabled(pStat);
        cmdChange.setEnabled(pStat);
        
        if(pStat&&txtSuppCode.getText().trim().equals("000000"))
        {
          txtSuppName.setEnabled(pStat);  
        }
        
        cmbTransporter.setEnabled(pStat);
        cmbTransportMode.setEnabled(pStat);
        txtGatepassNo.setEnabled(pStat);
        //cmbGatepassType.setEnabled(pStat);
        cmbCurrency.setEnabled(pStat);
        txtCurrencyRate.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        cmdInsert.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        SetupApproval();
        
        DataModelH.TableReadOnly(!pStat);
        DataModelL.TableReadOnly(!pStat);
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        //Validates Item Entries
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one item");
            return false;
        }
        
        if(txtSuppCode.getText().trim().equals("000000")&&txtSuppName.getText().trim().equals(""))
        {
           JOptionPane.showMessageDialog(null,"Please enter party name");
           return false;
        }
        
        
        //Search in Table
        int ItemCol=DataModelL.getColFromVariable("ITEM_ID");
        int QtyCol=DataModelL.getColFromVariable("QTY");
        int BOECol=DataModelL.getColFromVariable("BOE_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            String ItemID="";
            double Rate=0,Qty=0;
            
            if(TableL.getValueAt(i, ItemCol)!=null && TableL.getValueAt(i, QtyCol)!=null) {
                ItemID=(String)TableL.getValueAt(i, ItemCol);
                Qty=Double.parseDouble((String)TableL.getValueAt(i,QtyCol));
                String WareHouseID=DataModelL.getValueByVariable("WAREHOUSE_ID", i);
                String LocationID=DataModelL.getValueByVariable("LOCATION_ID", i);
                String BOENo=DataModelL.getValueByVariable("BOE_NO",i);
                
                if(BOENo.trim().equals("")) {
                    BOENo="X"; //Get Default BOE No.
                }
                
                if(clsItem.IsEntryExist(EITLERPGLOBAL.gCompanyID,ItemID,BOENo,WareHouseID,LocationID) && Qty>0) {
                    ValidEntryCount++;
                }
                else
                {
                   JOptionPane.showMessageDialog(null,"Item entry is not valid. Please be sure to enter following information. \nValid Item ID,Quantity");
                   TableL.changeSelection(i,1,false,false);
                   return false;
                }
                
                    
            }
            
            //Replace X wherever BOE No. is Blank
            if(DataModelL.getValueAt(i,BOECol).toString().trim().equals("")) {
                DataModelL.setValueAt("X", i, BOECol);
            }
        }
        
        if(ValidEntryCount==0) {
            JOptionPane.showMessageDialog(null,"Item entry is not valid. Please verify");
            return false;
        }
        
        //Now Header level validations
        if(txtDocDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Rejection Memo Date");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
                if(!txtSuppCode.getText().trim().equals("000000")) {
        if(!clsSupplier.IsValidSuppCodeEx(EITLERPGLOBAL.gCompanyID,txtSuppCode.getText())) {
            JOptionPane.showMessageDialog(null,"Please enter valid supplier code");
            return false;
        }
                }
        if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid RJN date");
            return false;
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtCurrencyRate.getText())) {
            txtCurrencyRate.setText("0");
        }
        
      if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals(""))
        {
          JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
          return false;
        }
        
//        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
//        {
//          JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
//          return false;
//        }                      
        
        return true;
    }
    
    
    private void SetNumberFormats() {
        /*DecimalFormat decimalFormat=new DecimalFormat("0.00");
        NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
        ObjFormater.setAllowsInvalid(false);
        txtCurrencyRate.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));*/
    }
    
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=10;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 10, FFNo,  false));
            txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
            
            txtDocDate.requestFocus();
            
            lblTitle.setText("REJECTION MEMO (Raw Material) - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        String lDocNo=(String)ObjRJN.getAttribute("RJN_NO").getObj();
        if(ObjRJN.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(10,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,562)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtDocDate.requestFocus();
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        
        //== Financial Year Validation-------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        String lDocNo=(String)ObjRJN.getAttribute("RJN_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjRJN.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(ObjRJN.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjRJN.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save() {
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjRJN.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjRJN.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjRJN.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjRJN.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try
        {
        frmPA.RefreshView();
        }catch(Exception e){}
        ShowMessage("Ready");
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmRJNFind",true);
        frmRJNFind ObjReturn= (frmRJNFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjRJN.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        ObjRJN.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjRJN.MovePrevious();
        DisplayData();
    }
    
    
    private void MoveNext() {
        ObjRJN.MoveNext();
        DisplayData();
    }
    
    
    private void MoveLast() {
        ObjRJN.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjRJN.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND RJN_NO='"+pDocNo+"' AND RJN_TYPE=2",pCompanyID);
        ObjRJN.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        ObjRJN.Filter(" WHERE RJN_NO IN(SELECT D_INV_RJN_HEADER.RJN_NO FROM D_INV_RJN_HEADER,D_COM_DOC_DATA WHERE D_INV_RJN_HEADER.RJN_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_RJN_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_RJN_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND D_INV_RJN_HEADER.RJN_TYPE=2 AND MODULE_ID=10)",EITLERPGLOBAL.gCompanyID);
        ObjRJN.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void UpdateResults(int pCol) {
        if(!DoNotEvaluate) {
            try {
                int ColID=0,TaxID=0,UpdateCol=0;
                String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
                double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
                Object result;
                boolean updateIt=true;
                int QtyCol=0,RateCol=0,GAmountCol=0;
                
                Updating=true; //Stops Recursion
                
                srcVariable=DataModelL.getVariable(pCol); //Variable name of currently updated Column
                
                //If this column is percentage column. Variable name would be P_XXX
                //We shoule use actual variable name, it will be found on it's associated next column
                if(srcVariable.substring(0,2).equals("P_")) {
                    srcVariable=DataModelL.getVariable(pCol+1);
                }
                
                QtyCol=DataModelL.getColFromVariable("QTY"); //Index of Qty Column
                RateCol=DataModelL.getColFromVariable("RATE"); //Index of Rate Column
                GAmountCol=DataModelL.getColFromVariable("GROSS_AMOUNT"); //Index of Gross Amount Column
                
                //======= Read the Item ID - To be used when accessing item specific formula ===//
                String cellValue=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                if(cellValue==null) {
                    strItemID="";
                }
                else {
                    strItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_ID"));
                }
                //================================================================================
                
                GatherVariableValues();
                
                //====== Update Gross Amount =======
                myParser.parseExpression("QTY*RATE");
                result=myParser.getValueAsObject();
                if(result!=null) {
                    String RoundNum=Double.toString(EITLERPGLOBAL.round(Double.parseDouble(result.toString()),5));
                    DataModelL.setValueByVariable("GROSS_AMOUNT", RoundNum,TableL.getSelectedRow());
                }
                //=================================
                
                for(int i=0;i<TableL.getColumnCount();i++) {
                    strVariable=DataModelL.getVariable(i);
                    
                    ColID=DataModelL.getColID(i);
                    
                    TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                    
                    //Exclude Percentage Columns and System Columns
                    if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)&&(ColID!=-99)) {
                        //If percentage is used
                        if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                            
                            //Load the Formula for calculation
                            if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                            }
                            else {
                                strFormula=DataModelL.getFormula(i);
                            }
                            
                            //Now Read Associated Percentage Column
                            lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+Integer.toString(ColID),TableL.getSelectedRow()));
                            
                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result=myParser.getValueAsObject();
                            if(result!=null) {
                                //Now get the percentage of the main result
                                lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                                //Update the Column
                                srcVar2=DataModelL.getVariable(pCol+1);
                                
                                UpdateCol=DataModelL.getColFromVariable(strVariable);
                                
                                updateIt=false;
                                
                                if(UpdateCol!=pCol) {
                                    if(UpdateCol==pCol+1) {
                                        updateIt=true;
                                    }
                                    else {
                                        if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                            updateIt=true; //Then update it
                                        }
                                        else {
                                            
                                            //Check whether the formula is dependent on any system Columns
                                            boolean Dependent=false;
                                            int dCol=0;
                                            
                                            for(int d=0;d<=TableL.getColumnCount()-1;d++) {
                                                if(DataModelL.getColID(d)==0) //It's System Column
                                                {
                                                    String dVariable=DataModelL.getVariable(d);
                                                    if(strFormula.indexOf(dVariable)!=-1) {
                                                        if(pCol==d) {
                                                            Dependent=true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                        }
                                    }
                                    
                                 //============ New Change In Parser =============//   
                                //Now Condition. First check whether percentage has been entered
                                if(lnPercentValue>0)
                                {
                                   //Yes Percentage Entered. Then we must update the associated column
                                   updateIt=true;
                                }
                                else
                                {
                                  //If not Percentage entered than check whether any value is there
                                  //Otherwise go with the Dependent decision
                                }
                                //=================================================//
                                    
                                    
                                }
                                
                                if(updateIt) {
                                    DataModelL.setValueByVariable(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                        else //Percentage Not Used
                        {
                            //Load the Formula for calculation
                            if((!EITLERPGLOBAL.UseCurrentFormula)&&(EditMode!=EITLERPGLOBAL.ADD)) {
                                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                            }
                            else {
                                strFormula=DataModelL.getFormula(i);
                            }
                            
                            //Now Parse Main expression
                            myParser.parseExpression(strFormula);
                            result=myParser.getValueAsObject();
                            if(result!=null) {
                                //Now get the percentage of the main result
                                lnFinalResult=Double.parseDouble(result.toString());
                                //Update the Column
                                UpdateCol=DataModelL.getColFromVariable(strVariable);
                                
                                updateIt=false;
                                
                                if(UpdateCol!=pCol) {
                                    if(strFormula.indexOf(srcVariable)!=-1) {
                                        updateIt=true;
                                    }
                                    else {
                                        
                                        //Check whether the formula is dependent on any system Columns
                                        boolean Dependent=false;
                                        int dCol=0;
                                        
                                        for(int d=0;d<=TableL.getColumnCount()-1;d++) {
                                            if(DataModelL.getColID(d)==0) //It's System Column
                                            {
                                                String dVariable=DataModelL.getVariable(d);
                                                
                                                if(strFormula.indexOf(dVariable)!=-1) {
                                                    if(pCol==d) {
                                                        Dependent=true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        
                                        if(Dependent) {
                                            updateIt=true;
                                        }
                                        
                                    }
                                    
                                 //============ New Change In Parser =============//   
                                //Now Condition. First check whether percentage has been entered
                                if(lnPercentValue>0)
                                {
                                   //Yes Percentage Entered. Then we must update the associated column
                                   updateIt=true;
                                }
                                else
                                {
                                  //If not Percentage entered than check whether any value is there
                                  //Otherwise go with the Dependent decision
                                }
                                //=================================================//
                                    
                                }
                                if(updateIt) {
                                    DataModelL.setValueByVariable(strVariable,Double.toString(EITLERPGLOBAL.round(lnFinalResult,3)),TableL.getSelectedRow());
                                }
                                //Re Gather Fresh Variable Values
                                GatherVariableValues();
                            }
                        }
                    }
                }
                
                
                //== Final Pass - Update the Net Amount ==
                lnNetAmount=0;
                double lnColValue=0;
                double lnGrossAmount=0;
                
                lnGrossAmount=Double.parseDouble((String)DataModelL.getValueAt(TableL.getSelectedRow(), GAmountCol));
                
                for(int c=0;c<TableL.getColumnCount();c++) {
                    
                    //To be included in Calculation or not
                    if(DataModelL.getInclude(c)==false) {
                        //Read column value
                        if(TableL.getValueAt(TableL.getSelectedRow(), c).toString().equals("")) {
                            lnColValue=0;
                        }
                        else {
                            lnColValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), c));
                        }
                        
                        if(DataModelL.getOperation(c).equals("+")) //Add
                        {
                            lnGrossAmount=lnGrossAmount+lnColValue;
                        }
                        else //Substract
                        {
                            lnGrossAmount=lnGrossAmount-lnColValue;
                        }
                    }
                }
                
                //Now update the Net Amount
                DataModelL.setValueByVariable("NET_AMOUNT",Double.toString(EITLERPGLOBAL.round(lnGrossAmount,5)),TableL.getSelectedRow());
                
                Updating=false;
                
                //=======================================================//
                //======= New Change. Reverse Calculation ===============//
                //Calculate Percentage based on Amount
                ColID=DataModelL.getColID(pCol);
                int AsColID=DataModelL.getColID(pCol-1);
                
                if(ColID!=0&&ColID!=-99&&ColID==AsColID)
                {
                TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                //Read the formula
                strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                double EnteredValue=Double.parseDouble((String)DataModelL.getValueAt(TableL.getSelectedRow(),pCol));
                
                
                 //Now Parse Main expression
                 myParser.parseExpression(strFormula);
                 result=myParser.getValueAsObject();
                 if(result!=null) {
                     //x=(Gross Amount*Percent)/100
                     
                     //Reverse
                     // x*100/Gross amount=Percent
                     double percentValue=0;
                     double val=0;
                     
                     val=Double.parseDouble(result.toString());
                     
                     if(val!=0)
                     {
                     percentValue=EITLERPGLOBAL.round((EnteredValue*100)/val,3);
                     DoNotEvaluate=true;
                     TableL.setValueAt(Double.toString(percentValue), TableL.getSelectedRow(), pCol-1);
                     DoNotEvaluate=false;
                     }
                 }                
                }
                //======================================================//
                //============= End of Reverse Procedure ===============//
                
                UpdateResults_H(0);
                UpdateAmounts();
            }
            catch(Exception e) {
                Updating=false;
            }
        }// Do not Evaluate
    }
    
    
    
    
    
    
    
    
    
    private void GatherVariableValues() {
        //Scan the table and gather values for variables
        colVariables.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableL.getColumnCount();i++) {
            double lValue=0;
            if(DataModelL.getVariable(i)!=null) {
                //if((!DataModelL.getVariable(i).trim().equals(""))&&(DataModelL.getColID(i)!=0))    //If Variable not blank
                if((!DataModelL.getVariable(i).trim().equals(""))) {
                    //colVariables.put(DataModelL.getVariable(i),(String)DataModelL.getValueAt(TableL.getSelectedRow(), i));
                    
                    //Add variable Value to Parser Table
                    if((TableL.getValueAt(TableL.getSelectedRow(), i)!=null)&&(!TableL.getValueAt(TableL.getSelectedRow(), i).toString().equals(""))) {
                        if(TableL.getValueAt(TableL.getSelectedRow(), i) instanceof Boolean) {
                            if(DataModelL.getBoolValueByVariable(DataModelL.getVariable(i),TableL.getSelectedRow())) {
                                lValue=1;
                            }
                            else {
                                lValue=0;
                            }
                        }
                        else {
                            if(EITLERPGLOBAL.IsNumber((String)TableL.getValueAt(TableL.getSelectedRow(), i))) {
                                lValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), i));
                            }
                        }
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelL.getVariable(i),lValue);
                }
            }
        }
        
        myParser.addFunction("IIF", new IIF(myParser));
    }
    
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

private void PreviewAuditReport()
{
   try
   {
      URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptRJN2A.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText()+"&DocType=2");
      EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
   }
   catch(Exception e)
   {
     JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
   }
}


private void PreviewReport()
{
   HashMap Params=new HashMap();
   
        if(chkCancelled.isSelected())
        {
         JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
         return;
        }
   
   
   Params.put("comp_id", new Integer(EITLERPGLOBAL.gCompanyID));
   Params.put("rjn_no",txtDocNo.getText());

   try
   {
     URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptRJNRaw.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
     EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
   }
   catch(Exception e)
   {
     JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
   }
}


}



