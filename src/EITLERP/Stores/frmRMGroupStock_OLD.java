/*
 * frmRptGroupwiseStock.java
 *
 * Created on January 12, 2006, 12:24 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */
import EITLERP.*;
import java.sql.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import EITLERP.Utils.*;
import java.net.*;
import EITLERP.Finance.UtilFunctions;
import TReportWriter.*;
import javax.swing.*;
import java.util.*;
import java.util.Date;
import java.text.*;

public class frmRMGroupStock_OLD extends javax.swing.JApplet {
    
    private EITLComboModel cmbItemTypeModel=new EITLComboModel();
    private TReportEngine objEngine=new TReportEngine();
    private TReportWriter.SimpleDataProvider.TTable objData=new TReportWriter.SimpleDataProvider.TTable();
    
    
    /** Initializes the applet frmRptGroupwiseStock */
    public void init() {
        setSize(487,286);
        initComponents();
        chkReprocess.setVisible(false);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ReportOptions = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        chkReprocess = new javax.swing.JCheckBox();
        lblItem = new javax.swing.JLabel();
        Bar = new javax.swing.JProgressBar();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        cmdSummary = new javax.swing.JButton();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel5.setText("To");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(200, 40, 20, 15);

        getContentPane().add(txtToDate);
        txtToDate.setBounds(220, 40, 112, 20);

        chkReprocess.setText("Re Process Stock Valuation");
        getContentPane().add(chkReprocess);
        chkReprocess.setBounds(10, 80, 205, 23);

        lblItem.setText(".");
        getContentPane().add(lblItem);
        lblItem.setBounds(10, 110, 347, 15);

        getContentPane().add(Bar);
        Bar.setBounds(10, 130, 200, 18);

        cmdPrint.setText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        getContentPane().add(cmdPrint);
        cmdPrint.setBounds(359, 39, 119, 29);

        cmdExit.setText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        getContentPane().add(cmdExit);
        cmdExit.setBounds(360, 71, 116, 25);

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("RM Groupwise Stock Value Report");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(8, 8, 269, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(1, 0, 581, 30);

        jLabel6.setText("From Date");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 40, 70, 15);

        getContentPane().add(txtFromDate);
        txtFromDate.setBounds(80, 40, 112, 20);

        cmdSummary.setText("Summary");
        cmdSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSummaryActionPerformed(evt);
            }
        });

        getContentPane().add(cmdSummary);
        cmdSummary.setBounds(360, 100, 119, 29);

    }//GEN-END:initComponents
    
    private void cmdSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSummaryActionPerformed
        // TODO add your handling code here:
        try {
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            Date fromDate = df.parse(txtFromDate.getText());
            Date RestrictDate = df.parse("01/10/2009");
            
            
            if(fromDate.before(RestrictDate)) {
                JOptionPane.showMessageDialog(null,"From Date must be equals or after 01/10/2009");
                return;
            }
        }
        catch(Exception e) {
            
        }
        GenerateReportWAvgRMItems();
        try {
            GenerateStockReportSummary();
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdSummaryActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_formMouseClicked
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        try {
            DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
            Date fromDate = df.parse(txtFromDate.getText());
            Date RestrictDate = df.parse("01/10/2009");
            
            
            if(fromDate.before(RestrictDate)) {
                JOptionPane.showMessageDialog(null,"From Date must be equals or after 01/10/2009");
                return;
            }
        }
        catch(Exception e) {
            
        }
        GenerateReportWAvgRMItems();
        try {
            GenerateStockReport();
            GenerateStockJobworkReport();
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.ButtonGroup ReportOptions;
    private javax.swing.JCheckBox chkReprocess;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSummary;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblItem;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    
    private void GenerateReportWAvgRMItems() {
        
        new Thread() {
            
            public void run() {
                ResultSet rsTmp,rsItem,rsRcpt,rsIssue,rsSource,rsCategory,rsMainCategory;
                
                String strSQL="";
                String strCondition="";
                Connection tmpConn;
                tmpConn=data.getConn();
                
                long StockEntryNo=0;
                String StockEntryDate="";
                
                clsItemStock objItemStock=new clsItemStock();
                
                try {
                    
                    if((!EITLERPGLOBAL.isDate(txtToDate.getText()))) {
                        JOptionPane.showMessageDialog(null,"Invalid date. Please enter valid date");
                        return;
                    }
                    
                    
                    //======= Find the last cut-off date stock entry =================//
                    rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ENTRY_DATE<='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' ORDER BY ENTRY_DATE DESC");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        StockEntryNo=rsTmp.getLong("ENTRY_NO");
                        StockEntryDate=rsTmp.getString("ENTRY_DATE");
                    }
                    //================================================================//
                    
                    
                    
                    if(chkReprocess.isSelected()) {
                        objItemStock.ProcessLedger(StockEntryDate, EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
                        
                        while(!objItemStock.ProcessDone) {
                            //Wait ....
                        }
                    }
                    
                    
                    //============ Processing Categorywise Valuation =============//
                    double TotalOpening=0;
                    double TotalReceipt=0;
                    double TotalIssue=0;
                    double TotalValue=0;
                    double writeoffTotal=0;
                    double finalTotal=0;
                    double TotalOpeningQty=0;
                    double TotalReceiptQty=0;
                    double TotalIssueQty=0;
                    double TotalExcise=0;
                    
                    String Exception1="";
                    String Exception2="";
                    String MainCategory="";
                    
                    
                    
                    rsCategory=data.getResult("SELECT * FROM D_INV_ITEM_CATEGORY WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND CATEGORY_TYPE= 2 ORDER BY CATEGORY_ID");
                    rsCategory.first();
                    
                    if(rsCategory.getRow()>0) {
                        while(!rsCategory.isAfterLast()) {
                            
                            TotalOpening=0;
                            TotalReceipt=0;
                            TotalIssue=0;
                            TotalOpeningQty=0;
                            TotalReceiptQty=0;
                            TotalIssueQty=0;
                            writeoffTotal=0;
                            finalTotal=0;
                            TotalExcise=0;
                            
                            String CategoryID=rsCategory.getString("CATEGORY_ID");
                            String groupID=rsCategory.getString("CATEGORY_ID");
                            
                            rsItem=data.getResult("SELECT ITEM_ID FROM D_INV_ITEM_MASTER WHERE COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND CATEGORY_ID="+CategoryID+" AND CANCELLED=0");
                            rsItem.first();
                            
                            if(rsItem.getRow()>0) {
                                
                                while(!rsItem.isAfterLast()) {
                                    
                                    String ItemID=rsItem.getString("ITEM_ID");
                                    
                                    lblItem.setText("Processing Item "+ItemID);
                                    
                                    //Opening Value
                                    strSQL="SELECT ROUND(SUM(A.OPENING_VALUE),2) AS OPENING_VALUE,SUM(A.OPENING_QTY) AS OPENING_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_COM_OPENING_STOCK_DETAIL A, ";
                                    strSQL+="D_INV_ITEM_MASTER B ";
                                    strSQL+="WHERE ";
                                    strSQL+=" A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " ";
                                    strSQL+="AND A.ITEM_ID=B.ITEM_ID AND ";
                                    strSQL+="B.APPROVED=1 AND B.CANCELLED=0 ";
                                    strSQL+="AND ENTRY_NO="+StockEntryNo+" AND A.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening=UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0);
                                    TotalOpeningQty=UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0);
                                    
                                    //Get Receipts and Issues between the opening date and from date
                                    strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),2) AS RECEIPT_VALUE,SUM(B.QTY) AS RECEIPT_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_GRN_HEADER A, ";
                                    strSQL+="D_INV_GRN_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE ";
                                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                                    strSQL+="A.GRN_DATE>='"+StockEntryDate+"' AND ";
                                    strSQL+="A.GRN_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening+=UtilFunctions.getDouble(rsTmp,"RECEIPT_VALUE", 0);
                                    TotalOpeningQty+=UtilFunctions.getDouble(rsTmp,"RECEIPT_QTY", 0);
                                    
                                    
                                    //Get Issues
                                    strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),2) AS ISSUE_VALUE,SUM(B.QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_ISSUE_HEADER A, ";
                                    strSQL+="D_INV_ISSUE_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                                    strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                                    strSQL+="A.ISSUE_DATE>='"+StockEntryDate+"' AND ";
                                    strSQL+="A.ISSUE_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_CODE = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening=TotalOpening-(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0));
                                    TotalOpeningQty=TotalOpeningQty-(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0));
                                    
                                    //Get STM Issues
                                    strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),2) AS ISSUE_VALUE,SUM(B.QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_STM_HEADER A, ";
                                    strSQL+="D_INV_STM_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="A.STM_NO=B.STM_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="A.STM_DATE>='"+StockEntryDate+"' AND ";
                                    strSQL+="A.STM_DATE<'"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalOpening=TotalOpening-(UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0));
                                    TotalOpeningQty=TotalOpeningQty-(UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0));
                                    
                                    
                                    //Now get Actual Receipts
                                    //Get Receipts and Issues between the opening date and from date
                                    strSQL="SELECT ROUND(SUM(B.LANDED_RATE*B.QTY),2) AS RECEIPT_VALUE,SUM(QTY) AS RECEIPT_QTY,ROUND(SUM(B.COLUMN_8_AMT),2) AS MODVAT ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_GRN_HEADER A, ";
                                    strSQL+="D_INV_GRN_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE ";
                                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalReceipt=UtilFunctions.getDouble(rsTmp,"RECEIPT_VALUE",0);
                                    TotalReceiptQty=UtilFunctions.getDouble(rsTmp,"RECEIPT_QTY",0);
                                    TotalExcise=UtilFunctions.getDouble(rsTmp,"MODVAT", 0);
                                    
                                    
                                    
                                    //Get Issues
                                    strSQL="SELECT ROUND(SUM(B.ISSUE_VALUE),2) AS ISSUE_VALUE,SUM(QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_ISSUE_HEADER A, ";
                                    strSQL+="D_INV_ISSUE_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="A.ISSUE_NO=B.ISSUE_NO AND ";
                                    strSQL+="B.ITEM_CODE=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELED=0 AND ";
                                    strSQL+="A.ISSUE_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="A.ISSUE_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_CODE = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalIssue=UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0);
                                    TotalIssueQty=UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0);
                                    
                                    //Get STM Issues
                                    strSQL="SELECT ROUND(SUM(B.NET_AMOUNT),2) AS ISSUE_VALUE,SUM(QTY) AS ISSUE_QTY ";
                                    strSQL+="FROM ";
                                    strSQL+="D_INV_STM_HEADER A, ";
                                    strSQL+="D_INV_STM_DETAIL B, ";
                                    strSQL+="D_INV_ITEM_MASTER I ";
                                    strSQL+="WHERE  ";
                                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                                    strSQL+="A.STM_NO=B.STM_NO AND ";
                                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                                    
                                    rsTmp=data.getResult(strSQL);
                                    TotalIssue=TotalIssue+UtilFunctions.getDouble(rsTmp,"ISSUE_VALUE",0);
                                    TotalIssueQty=TotalIssueQty+UtilFunctions.getDouble(rsTmp,"ISSUE_QTY",0);
                                    
                                    finalTotal=TotalOpening+TotalReceipt-TotalIssue;
                                    double finalQty=TotalOpeningQty+TotalReceiptQty-TotalIssueQty;
                                    
                                    data.Execute("UPDATE D_INV_ITEM_MASTER SET OPENING_VALUE="+TotalOpening+",RECEIPT_VALUE="+TotalReceipt+",ISSUE_VALUE="+TotalIssue+",OPENING_QTY="+TotalOpeningQty+",TOTAL_RECEIPT_QTY="+TotalReceiptQty+",TOTAL_ISSUED_QTY="+TotalIssueQty+",EXCISE="+TotalExcise+" WHERE ITEM_ID='"+ItemID.trim()+"' ");
                                    
                                    rsItem.next();
                                }
                                
                            }
                            
                            
                            rsCategory.next();
                        }
                    }
                    //==============================================================//
                    
                    
                    lblItem.setText("Done");
                    Bar.setVisible(false);
                    
                    
                  /*  try {
                        GenerateStockReport();
                        GenerateStockJobworkReport();
                        //System.out.println("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+txtFromDate.getText()+"&ToDate="+txtToDate.getText());
                        //URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&FromDate="+txtFromDate.getText()+"&ToDate="+txtToDate.getText());
                        //EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
                    }
                    catch(Exception e) {
                   
                    }
                   */
                    
                }
                catch(Exception e) {
                    e.printStackTrace();
                    Bar.setVisible(false);
                    lblItem.setVisible(false);
                }
                
            };
        }.start();
    }
    
    private void GenerateStockReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            strSQL = "SELECT A.ITEM_ID,A.ITEM_DESCRIPTION,B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,A.OPENING_VALUE, "+
            "A.RECEIPT_VALUE,A.ISSUE_VALUE,IF(((A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE) >0), "+
            "A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE,0) AS CLOSING_VALUE,A.OPENING_QTY, "+
            "A.TOTAL_RECEIPT_QTY,A.TOTAL_ISSUED_QTY,D.CITY, "+
            "(A.OPENING_QTY+A.TOTAL_RECEIPT_QTY-A.TOTAL_ISSUED_QTY) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D "+
            "WHERE A.ITEM_ID LIKE 'RM%' AND A.CANCELLED = 0 AND APPROVED = 1 AND A.COMPANY_ID =D.COMPANY_ID AND "+
            "SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND "+
            "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND  "+
            "SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND "+
            "A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND A.CATEGORY_ID <> '14' AND "+
            //"A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND A.ITEM_ID NOT LIKE 'RM22266%' AND "+
            //"A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND "+
            "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            //                strSQL = "SELECT A.CATEGORY_ID,A.ITEM_ID,A.ITEM_DESCRIPTION,C.CATEGORY_NAME,A.OPENING_VALUE, "+
            //                    "A.RECEIPT_VALUE,A.ISSUE_VALUE,IF(((A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE) >0), "+
            //                    "A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE,0) AS CLOSING_VALUE,A.OPENING_QTY, "+
            //                    "A.TOTAL_RECEIPT_QTY,A.TOTAL_ISSUED_QTY,D.CITY, "+
            //                    "(A.OPENING_QTY+A.TOTAL_RECEIPT_QTY-A.TOTAL_ISSUED_QTY) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID "+
            //                    "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D "+
            //                    "WHERE A.ITEM_ID LIKE 'RM%' AND A.COMPANY_ID =D.COMPANY_ID AND "+
            //                    "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND "+
            //                    "A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND "+
            //                    "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) "+
            //                    "ORDER BY A.CATEGORY_ID,A.ITEM_ID";
            
            
            System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"ITEM_ID","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),2) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),2)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),2);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),2);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),2) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),2) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),2) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),2)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),2);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),2);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),2) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),2) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"ITEM_ID",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),2)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),2)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),2)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),2)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),2) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),2) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,2)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),2) - IssueValue));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    private void GenerateStockReportSummary() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("AVG_OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("AVG_RECEIPT_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("AVG_ISSUE_VALUE");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("AVG_CLOSING_VALUE");
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("AVG_OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("AVG_RECEIPT_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("AVG_ISSUE_VALUE","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("AVG_CLOSING_VALUE","");
            String CategoryId="",CategoryName="";
            //DISTINCT CATEGORY
            String strSQL = "SELECT DISTINCT B.CATEGORY_MAIN_ID,B.CATEGORY_NAME "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D  "+
            "WHERE A.ITEM_ID LIKE 'RM%' AND A.COMPANY_ID =D.COMPANY_ID AND  "+
            "SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND "+
            "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND "+
            "SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND  "+
            "A.COMPANY_ID = 2 AND A.CATEGORY_ID <> '14'  AND  "+
            "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            ResultSet rsCategory=data.getResult(strSQL);
            rsCategory.first();
            int Counter = 0;
            if(rsCategory.getRow()>0) {
                while(!rsCategory.isAfterLast()) {
                    double OpeningValue=0.0,OpeningQty=0.0,avgOpeningValue=0.0;
                    double ClosingValue=0.0,ClosingQty=0.0,avgClosingValue=0.0;
                    double ReceiptSTMValue=0.0,ReceiptSTMQty=0.0;
                    double ReceiptValue=0.0,ReceiptQty=0.0,avgReceiptValue=0.0;
                    double IssueValue=0.0,IssueQty=0.0,avgIssueValue=0.0;
                    double IssueSTMQty=0.0,IssueSTMValue=0.0;
                    CategoryId = UtilFunctions.getString(rsCategory,"CATEGORY_MAIN_ID", "0");
                    CategoryName = UtilFunctions.getString(rsCategory,"CATEGORY_NAME", "0");
                    System.out.println(""+ CategoryId + " " +  CategoryName);
                    //OPENING VALUE , OPENING QTY
                    strSQL="SELECT SUM(A.OPENING_VALUE) AS OPENING_VALUE, SUM(A.RECEIPT_VALUE) AS RECEIPT_VALUE,SUM(A.ISSUE_VALUE) AS ISSUED_VALUE, "+
                    "SUM(A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE) AS CLOSING_VALUE,SUM(A.OPENING_QTY) AS OPENING_QTY, "+
                    "SUM(A.TOTAL_RECEIPT_QTY) AS RECEIPT_QTY,SUM(A.TOTAL_ISSUED_QTY) AS ISSUED_QTY,  "+
                    "SUM((A.OPENING_QTY+A.TOTAL_RECEIPT_QTY-A.TOTAL_ISSUED_QTY)) AS CLOSING_QTY "+
                    "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D  "+
                    "WHERE A.ITEM_ID LIKE 'RM%' AND A.COMPANY_ID =D.COMPANY_ID AND  "+
                    "SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND  "+
                    "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND   "+
                    "SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND  "+
                    "A.COMPANY_ID = 2 AND A.CATEGORY_ID <> '14' AND  "+
                    "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0)  "+
                    "AND B.CATEGORY_MAIN_ID = " + CategoryId + " "+
                    "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
                    ResultSet rsOpening=data.getResult(strSQL);
                    rsOpening.first();
                    if(rsOpening.getRow()>0) {
                        while(!rsOpening.isAfterLast()) {
                            OpeningQty= UtilFunctions.getDouble(rsOpening,"OPENING_QTY", 0.0);
                            OpeningValue= UtilFunctions.getDouble(rsOpening,"OPENING_VALUE", 0.0);
                            avgOpeningValue=EITLERPGLOBAL.round(OpeningValue/OpeningQty,2);
                            ReceiptQty=UtilFunctions.getDouble(rsOpening,"RECEIPT_QTY", 0.0);
                            ReceiptValue=UtilFunctions.getDouble(rsOpening,"RECEIPT_VALUE", 0.0);
                            IssueQty=UtilFunctions.getDouble(rsOpening,"ISSUED_QTY", 0.0);
                            IssueValue=UtilFunctions.getDouble(rsOpening,"ISSUED_VALUE", 0.0);
                            ClosingQty= UtilFunctions.getDouble(rsOpening,"CLOSING_QTY", 0.0);
                            ClosingValue= UtilFunctions.getDouble(rsOpening,"CLOSING_VALUE", 0.0);
                            avgClosingValue = ClosingValue / ClosingQty;
                            rsOpening.next();
                        }
                    }
                    // ITEM ID OF CATEGORY WISE
                    strSQL="SELECT A.ITEM_ID "+
                    "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D   "+
                    "WHERE A.ITEM_ID LIKE 'RM%' AND A.COMPANY_ID =D.COMPANY_ID AND   "+
                    "SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND  "+
                    "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND  "+
                    "SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND   "+
                    "A.COMPANY_ID = 2 AND A.CATEGORY_ID <> '14'  AND   "+
                    //"(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) AND "+
                    "B.CATEGORY_MAIN_ID = " + CategoryId + " "+
                    "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID  ";
                    ResultSet rsItem=data.getResult(strSQL);
                    rsItem.first();
                    if(rsItem.getRow()>0) {
                        while(!rsItem.isAfterLast()) {
                            String ItemId= UtilFunctions.getString(rsItem,"ITEM_ID", "");
                            //Now get STM Receipts
                            //Get Receipts and Issues between the opening date and from date
                            strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),2) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),2)) AS RECEIPT_VALUE, ";
                            strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_GRN_HEADER A, ";
                            strSQL+="D_INV_GRN_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE ";
                            strSQL+="A.GRN_NO=B.GRN_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="I.APPROVED=1 AND ";
                            strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                            strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                            strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID = '"+ItemId+"' AND ";
                            strSQL+="A.SUPP_ID IN('888888','999999') ";
                            ResultSet rsGRNTmp=data.getResult(strSQL);
                            rsGRNTmp.first();
                            if(rsGRNTmp.getRow()>0) {
                                ReceiptSTMValue +=UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0.0);
                                ReceiptSTMQty +=UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0.0);
                                //System.out.println("ItemId = "+ItemId+"Receipt Value="+rsGRNTmp.getString("RECEIPT_VALUE")+ "Receipt Qty=" + rsGRNTmp.getString("RECEIPT_QTY"));
                            }
                            //Get STM Issues
                            strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),2) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),2)) AS ISSUE_VALUE, ";
                            strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                            strSQL+="FROM ";
                            strSQL+="D_INV_STM_HEADER A, ";
                            strSQL+="D_INV_STM_DETAIL B, ";
                            strSQL+="D_INV_ITEM_MASTER I ";
                            strSQL+="WHERE  ";
                            strSQL+="A.STM_NO=B.STM_NO AND ";
                            strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                            strSQL+="I.APPROVED=1 AND ";
                            strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                            strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                            strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                            strSQL+="B.ITEM_ID = '"+ItemId+"' ";
                            ResultSet rsSTMTmp=data.getResult(strSQL);
                            rsSTMTmp.first();
                            if(rsSTMTmp.getRow()>0) {
                                IssueSTMValue +=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),2);
                                IssueSTMQty +=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),2);
                            }
                            rsItem.next();
                        }
                    }
                    //OPENING_QTY + ReceiptQty + ReceiptSTMQty),2) - IssueQty) - IssueSTMQty;
                    ReceiptQty -= ReceiptSTMQty;
                    ReceiptValue -= ReceiptSTMValue;
                    avgReceiptValue  = ReceiptValue / ReceiptQty ;
                    IssueQty -=IssueSTMQty;
                    IssueValue -= IssueSTMValue;
                    avgIssueValue = IssueValue / IssueQty ;
                    //System.out.println("Opening qty=" + OpeningQty + "Opening Value=" + OpeningValue + "avg=" + avgOpeningValue);
                    //System.out.println("Receipt Value="+ReceiptQty+ "Receipt Qty=" + ReceiptValue);
                    //System.out.println("Issue Value="+IssueQty+ "Issue Qty=" + IssueValue);
                    objRow=objReportData.newRow();
                    objRow.setValue("CATEGORY_ID",CategoryId);
                    objRow.setValue("CATEGORY_NAME",CategoryName);
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(OpeningQty,2)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(OpeningValue,2)));
                    objRow.setValue("AVG_OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(avgOpeningValue,2)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(EITLERPGLOBAL.round(ReceiptQty,2)));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(EITLERPGLOBAL.round(ReceiptValue,2)));
                    objRow.setValue("AVG_RECEIPT_VALUE",Double.toString(EITLERPGLOBAL.round(avgReceiptValue,2)));
                    objRow.setValue("ISSUE_QTY",Double.toString(EITLERPGLOBAL.round(IssueQty,2)));
                    objRow.setValue("ISSUE_VALUE",Double.toString(EITLERPGLOBAL.round(IssueValue,2)));
                    objRow.setValue("AVG_ISSUE_VALUE",Double.toString(EITLERPGLOBAL.round(avgIssueValue,2)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(ClosingQty,2)));
                    objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(ClosingValue,2)));
                    objRow.setValue("AVG_CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(avgClosingValue,2)));
                    objReportData.AddRow(objRow);
                    rsCategory.next();
                }
            }
            String City ="";
            if (EITLERPGLOBAL.gCompanyID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            //objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.rpt",Parameters,objReportData);
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItemsSummary.rpt",Parameters,objReportData);
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    
    private void GenerateStockJobworkReport() {
        try {
            TReportWriter.SimpleDataProvider.TRow objRow;
            TReportWriter.SimpleDataProvider.TTable objReportData=new TReportWriter.SimpleDataProvider.TTable();
            
            objReportData.AddColumn("SR_NO");
            objReportData.AddColumn("CATEGORY_ID");
            objReportData.AddColumn("CATEGORY_MAIN_ID");
            objReportData.AddColumn("CATEGORY_NAME");
            objReportData.AddColumn("ITEM_ID");
            objReportData.AddColumn("ITEM_NAME");
            objReportData.AddColumn("OPENING_QTY");
            objReportData.AddColumn("OPENING_VALUE");
            objReportData.AddColumn("RECEIPT_QTY");
            objReportData.AddColumn("RECEIPT_VALUE");
            objReportData.AddColumn("RECEIPT_STM_QTY");
            objReportData.AddColumn("RECEIPT_STM_VALUE");
            objReportData.AddColumn("ISSUE_QTY");
            objReportData.AddColumn("ISSUE_VALUE");
            objReportData.AddColumn("ISSUE_STM_QTY");
            objReportData.AddColumn("ISSUE_STM_VALUE");
            objReportData.AddColumn("MODVAT");
            objReportData.AddColumn("CLOSING_QTY");
            objReportData.AddColumn("CLOSING_VALUE");
            objReportData.AddColumn("CLOSEQTY");
            objReportData.AddColumn("CLOSEVALUE");
            
            TReportWriter.SimpleDataProvider.TRow objOpeningRow=objReportData.newRow();
            objOpeningRow.setValue("SR_NO","");
            objOpeningRow.setValue("CATEGORY_ID","");
            objOpeningRow.setValue("CATEGORY_MAIN_ID", "");
            objOpeningRow.setValue("CATEGORY_NAME","");
            objOpeningRow.setValue("ITEM_ID","");
            objOpeningRow.setValue("ITEM_NAME","");
            objOpeningRow.setValue("OPENING_QTY","");
            objOpeningRow.setValue("OPENING_VALUE","");
            objOpeningRow.setValue("RECEIPT_QTY","");
            objOpeningRow.setValue("RECEIPT_VALUE","");
            objOpeningRow.setValue("RECEIPT_STM_QTY","");
            objOpeningRow.setValue("RECEIPT_STM_VALUE","");
            objOpeningRow.setValue("ISSUE_QTY","");
            objOpeningRow.setValue("ISSUE_VALUE","");
            objOpeningRow.setValue("ISSUE_STM_QTY","");
            objOpeningRow.setValue("ISSUE_STM_VALUE","");
            objOpeningRow.setValue("MODVAT","");
            objOpeningRow.setValue("CLOSING_QTY","");
            objOpeningRow.setValue("CLOSING_VALUE","");
            objOpeningRow.setValue("CLOSEQTY","");
            objOpeningRow.setValue("CLOSEVALUE","");
            
            String strSQL = "",ItemID="";
            double ReceiptQty=0,ReceiptValue=0,ReceiptSTMQty=0,ReceiptSTMValue=0;
            double IssueQty=0,IssueValue=0,IssueSTMQty=0,IssueSTMValue=0;
            
            strSQL = "SELECT A.ITEM_ID,A.ITEM_DESCRIPTION,B.CATEGORY_NAME,B.CATEGORY_MAIN_ID,A.OPENING_VALUE, "+
            "A.RECEIPT_VALUE,A.ISSUE_VALUE,IF(((A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE) >0), "+
            "A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE,0) AS CLOSING_VALUE,A.OPENING_QTY, "+
            "A.TOTAL_RECEIPT_QTY,A.TOTAL_ISSUED_QTY,D.CITY, "+
            "(A.OPENING_QTY+A.TOTAL_RECEIPT_QTY-A.TOTAL_ISSUED_QTY) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID "+
            "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_GROUP B,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D "+
            "WHERE A.ITEM_ID LIKE 'RM%' AND A.APPROVED = 1 AND A.CANCELLED = 0 AND A.COMPANY_ID =D.COMPANY_ID AND "+
            "SUBSTRING(A.ITEM_ID,7,1) =B.CATEGORY_SUB_ID AND "+
            "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND  "+
            "SUBSTRING(A.ITEM_ID,4,1) =B.CATEGORY_ID AND "+
            "A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND A.CATEGORY_ID = '14' AND "+
            "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) "+
            "ORDER BY B.CATEGORY_MAIN_ID,B.CATEGORY_ID,B.CATEGORY_SUB_ID,A.ITEM_ID ";
            
            //                "A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND A.ITEM_ID LIKE 'RM22266%' AND "+
            
            //                strSQL = "SELECT A.CATEGORY_ID,A.ITEM_ID,A.ITEM_DESCRIPTION,C.CATEGORY_NAME,A.OPENING_VALUE, "+
            //                    "A.RECEIPT_VALUE,A.ISSUE_VALUE,IF(((A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE) >0), "+
            //                    "A.OPENING_VALUE+A.RECEIPT_VALUE-A.ISSUE_VALUE,0) AS CLOSING_VALUE,A.OPENING_QTY, "+
            //                    "A.TOTAL_RECEIPT_QTY,A.TOTAL_ISSUED_QTY,D.CITY, "+
            //                    "(A.OPENING_QTY+A.TOTAL_RECEIPT_QTY-A.TOTAL_ISSUED_QTY) AS CLOSING_QTY,A.EXCISE,A.COMPANY_ID "+
            //                    "FROM D_INV_ITEM_MASTER A,D_INV_ITEM_CATEGORY C,D_COM_COMPANY_MASTER D "+
            //                    "WHERE A.ITEM_ID LIKE 'RM%' AND A.COMPANY_ID =D.COMPANY_ID AND "+
            //                    "C.CATEGORY_ID =A.CATEGORY_ID AND A.CATEGORY_ID <> '13' AND "+
            //                    "A.COMPANY_ID = "+ EITLERPGLOBAL.gCompanyID +" AND "+
            //                    "(A.OPENING_QTY>0 OR A.TOTAL_RECEIPT_QTY>0 OR A.TOTAL_ISSUED_QTY>0) "+
            //                    "ORDER BY A.CATEGORY_ID,A.ITEM_ID";
            
            
            //System.out.println("sql="+strSQL);
            
            ResultSet rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            int Counter = 0;
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Counter ++;
                    ReceiptQty=0;ReceiptValue=0;ReceiptSTMQty=0;ReceiptSTMValue=0;
                    IssueQty=0;IssueValue=0;IssueSTMQty=0;IssueSTMValue=0;
                    
                    ItemID = UtilFunctions.getString(rsTmp,"ITEM_ID","");
                    
                    //System.out.println("ItemID="+ItemID);
                    
                    //Now get STM Receipts
                    //Get Receipts and Issues between the opening date and from date
                    strSQL="SELECT IF (ROUND(SUM(B.LANDED_RATE*B.QTY),2) IS NULL,0,ROUND(SUM(B.LANDED_RATE*B.QTY),2)) AS RECEIPT_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS RECEIPT_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_GRN_HEADER A, ";
                    strSQL+="D_INV_GRN_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.GRN_NO=B.GRN_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.GRN_TYPE=B.GRN_TYPE AND ";
                    strSQL+="A.GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText()) +"' AND ";
                    strSQL+="A.GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' AND ";
                    strSQL+="A.SUPP_ID IN('888888','999999') ";
                    //System.out.println(strSQL);
                    
                    ResultSet rsGRNTmp=data.getResult(strSQL);
                    rsGRNTmp.first();
                    if(rsGRNTmp.getRow()>0) {
                        ReceiptSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_VALUE",0),2);
                        ReceiptSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsGRNTmp,"RECEIPT_QTY",0),2);
                    }
                    else {
                        ReceiptSTMQty = 0.0;
                        ReceiptSTMValue = 0.0;
                    }
                    
                    ReceiptQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_RECEIPT_QTY","")),2) - ReceiptSTMQty;
                    ReceiptValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"RECEIPT_VALUE","")),2) - ReceiptSTMValue;
                    
                    //Get STM Issues
                    strSQL="SELECT IF (ROUND(SUM(B.NET_AMOUNT),2) IS NULL,0,ROUND(SUM(B.NET_AMOUNT),2)) AS ISSUE_VALUE, ";
                    strSQL+="IF (SUM(QTY) IS NULL,0,SUM(QTY)) AS ISSUE_QTY ";
                    strSQL+="FROM ";
                    strSQL+="D_INV_STM_HEADER A, ";
                    strSQL+="D_INV_STM_DETAIL B, ";
                    strSQL+="D_INV_ITEM_MASTER I ";
                    strSQL+="WHERE  ";
                    strSQL+="A.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="I.COMPANY_ID = " + EITLERPGLOBAL.gCompanyID + " AND ";
                    strSQL+="A.STM_NO=B.STM_NO AND ";
                    strSQL+="B.ITEM_ID=I.ITEM_ID AND ";
                    strSQL+="I.APPROVED=1 AND I.CANCELLED=0 AND ";
                    strSQL+="A.APPROVED=1 AND A.CANCELLED=0 AND ";
                    strSQL+="A.STM_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDate.getText())+"' AND ";
                    strSQL+="A.STM_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDate.getText())+"' AND ";
                    strSQL+="B.ITEM_ID = '"+ItemID+"' ";
                    
                    ResultSet rsSTMTmp=data.getResult(strSQL);
                    rsSTMTmp.first();
                    if(rsSTMTmp.getRow()>0) {
                        IssueSTMValue=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_VALUE",0),2);
                        IssueSTMQty=EITLERPGLOBAL.round(UtilFunctions.getDouble(rsSTMTmp,"ISSUE_QTY",0),2);
                    }
                    else {
                        IssueSTMQty = 0.0;
                        IssueSTMValue = 0.0;
                    }
                    
                    IssueQty=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"TOTAL_ISSUED_QTY","")),2) - IssueSTMQty;
                    IssueValue=EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"ISSUE_VALUE","")),2) - IssueSTMValue;
                    
                    objRow=objReportData.newRow();
                    
                    objRow.setValue("SR_NO",Integer.toString(Counter));
                    objRow.setValue("CATEGORY_ID",UtilFunctions.getString(rsTmp,"CATEGORY_ID",""));
                    objRow.setValue("CATEGORY_MAIN_ID", UtilFunctions.getString(rsTmp,"CATEGORY_MAIN_ID",""));
                    objRow.setValue("CATEGORY_NAME",UtilFunctions.getString(rsTmp,"CATEGORY_NAME",""));
                    objRow.setValue("ITEM_ID",UtilFunctions.getString(rsTmp,"ITEM_ID",""));
                    objRow.setValue("ITEM_NAME",UtilFunctions.getString(rsTmp,"ITEM_DESCRIPTION",""));
                    objRow.setValue("OPENING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_QTY","")),2)));
                    objRow.setValue("OPENING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"OPENING_VALUE","")),2)));
                    objRow.setValue("RECEIPT_QTY",Double.toString(ReceiptQty));
                    objRow.setValue("RECEIPT_VALUE",Double.toString(ReceiptValue));
                    objRow.setValue("RECEIPT_STM_QTY",Double.toString(ReceiptSTMQty));
                    objRow.setValue("RECEIPT_STM_VALUE",Double.toString(ReceiptSTMValue));
                    objRow.setValue("ISSUE_QTY",Double.toString(IssueQty));
                    objRow.setValue("ISSUE_VALUE",Double.toString(IssueValue));
                    objRow.setValue("ISSUE_STM_QTY",Double.toString(IssueSTMQty));
                    objRow.setValue("ISSUE_STM_VALUE",Double.toString(IssueSTMValue));
                    objRow.setValue("MODVAT",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"EXCISE","")),2)));
                    objRow.setValue("CLOSING_QTY",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY","")),2)));
                    //objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    double CloseQty = 0;//Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_QTY",""));
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty + ReceiptSTMQty),2) - IssueQty) - IssueSTMQty;
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSING_VALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSING_VALUE",Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    
                    CloseQty = 0;
                    CloseQty = (EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_QTY",0) + ReceiptQty),2) - IssueQty);
                    objRow.setValue("CLOSEQTY",Double.toString(EITLERPGLOBAL.round(CloseQty,2)));
                    
                    if (CloseQty == 0) {
                        objRow.setValue("CLOSEVALUE","0");
                    }
                    else {
                        objRow.setValue("CLOSEVALUE",Double.toString(EITLERPGLOBAL.round((UtilFunctions.getDouble(rsTmp,"OPENING_VALUE",0) + ReceiptValue),2) - IssueValue));
                        //Double.toString(EITLERPGLOBAL.round(Double.parseDouble(UtilFunctions.getString(rsTmp,"CLOSING_VALUE","")),2)));
                    }
                    
                    objReportData.AddRow(objRow);
                    
                    rsTmp.next();
                }
            }
            
            int Comp_ID = EITLERPGLOBAL.gCompanyID;
            String City ="";
            if (Comp_ID == 2) {
                City = "VADODARA";
            }
            else {
                City = "ANKLESHWAR";
            }
            
            HashMap Parameters=new HashMap();
            Parameters.put("COMPANY_ID",Integer.toString(Comp_ID));
            Parameters.put("SYS_DATE",EITLERPGLOBAL.getCurrentDate());
            Parameters.put("FROM_DATE",txtFromDate.getText().trim());
            Parameters.put("TO_DATE",txtToDate.getText().trim());
            Parameters.put("CITY",City);
            
            objEngine.PreviewReport("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGroupRMItems.rpt",Parameters,objReportData);
            
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
}
