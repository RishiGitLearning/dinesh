/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */
/*<APPLET CODE=FrmRGP_General.class HEIGHT=500 WIDTH=720*/

package EITLERP.Stores;

/**
 *
 * @author  nhpatel
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.text.*;
import java.io.*;
import java.net.*;
import java.sql.*;
import EITLERP.Utils.*;


public class FrmRGP_General extends javax.swing.JApplet {
    
    private int EditMode=0;
    private EITLTableModel DataModelL;
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    
    private clsRGP ObjRGP;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private String SelNo = ""; //Selected Prefix Number
    private int FFNo=0;
    
    private EITLComboModel cmbDeptModel;
    private EITLComboModel cmbUserModel;
    private EITLComboModel cmbGatepassTypeModel;
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbSendToModel;
    private EITLComboModel cmbTrasnportModel;
    private EITLComboModel cmbTransporterModel;
    private EITLTableModel DataModelA;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(790,500);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        FormatGrid();
        SetNumberFormats();
        
        GenerateCombos();
        ObjRGP=new clsRGP();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjRGP.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjRGP.MoveLast();
                DisplayData();
                ShowMessage("Ready...........");
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjRGP.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        txtGatepassNo = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        txtGatepassDate = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        cmbGatepassType = new javax.swing.JComboBox();
        jLabel40 = new javax.swing.JLabel();
        chkCanceled = new javax.swing.JCheckBox();
        cmbDept = new javax.swing.JComboBox();
        txtSuppCode = new javax.swing.JTextField();
        txtSuppName = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        cmbTransportMode = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        cmbTransporter = new javax.swing.JComboBox();
        jLabel44 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        chkLot = new javax.swing.JCheckBox();
        cmdNext_Header = new javax.swing.JButton();
        txtNetAmount = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtPartyName = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtAdd1 = new javax.swing.JTextField();
        txtAdd2 = new javax.swing.JTextField();
        txtAdd3 = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtReturnDate = new javax.swing.JTextField();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksbig = new javax.swing.JButton();
        chkKeep = new javax.swing.JCheckBox();
        jLabel46 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        cmdRemarksBig1 = new javax.swing.JButton();
        txtDespatchMode = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        cmdInsertRej = new javax.swing.JButton();
        cmdInsertGatepass = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        cmdInsertDecl = new javax.swing.JButton();
        cmdNext_Detail = new javax.swing.JButton();
        cmdPrev_Detail = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmdShowRJN = new javax.swing.JButton();
        cmdShowGPR = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPacking = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtGrossWeight = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdPrev = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblOutwardNo = new javax.swing.JLabel();
        txtOutwardNo = new javax.swing.JTextField();
        lblOutwardDate = new javax.swing.JLabel();
        txtOutwardDate = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText(" RETURNABLE GATEPASS");
        lblTitle.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 804, 25);

        Tab1.setLayout(null);

        Tab1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel37.setText("Gatepass No.");
        Tab1.add(jLabel37);
        jLabel37.setBounds(24, 10, 89, 20);

        txtGatepassNo.setBackground(new java.awt.Color(204, 204, 255));
        txtGatepassNo.setEditable(false);
        txtGatepassNo.setNextFocusableComponent(cmbGatepassType);
        txtGatepassNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtGatepassNoFocusLost(evt);
            }
        });

        Tab1.add(txtGatepassNo);
        txtGatepassNo.setBounds(114, 10, 113, 21);

        jLabel38.setDisplayedMnemonic('d');
        jLabel38.setLabelFor(txtGatepassDate);
        jLabel38.setText("Date");
        Tab1.add(jLabel38);
        jLabel38.setBounds(314, 10, 58, 20);

        txtGatepassDate.setName("GATEPASS_DATE");
        txtGatepassDate.setNextFocusableComponent(cmbGatepassType);
        txtGatepassDate.setEnabled(false);
        txtGatepassDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGatepassDateFocusGained(evt);
            }
        });

        Tab1.add(txtGatepassDate);
        txtGatepassDate.setBounds(346, 10, 80, 21);

        jLabel39.setText("Type");
        Tab1.add(jLabel39);
        jLabel39.setBounds(72, 65, 37, 20);

        cmbGatepassType.setBackground(new java.awt.Color(204, 204, 255));
        cmbGatepassType.setName("GATEPASS_TYPE");
        cmbGatepassType.setNextFocusableComponent(cmbDept);
        cmbGatepassType.setEnabled(false);
        cmbGatepassType.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbGatepassTypeFocusGained(evt);
            }
        });
        cmbGatepassType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGatepassTypeItemStateChanged(evt);
            }
        });

        Tab1.add(cmbGatepassType);
        cmbGatepassType.setBounds(115, 64, 232, 21);

        jLabel40.setText("Department");
        Tab1.add(jLabel40);
        jLabel40.setBounds(30, 92, 78, 20);

        chkCanceled.setForeground(new java.awt.Color(255, 0, 0));
        chkCanceled.setMnemonic('c');
        chkCanceled.setText("Cancelled");
        chkCanceled.setEnabled(false);
        Tab1.add(chkCanceled);
        chkCanceled.setBounds(656, 26, 85, 23);

        cmbDept.setName("FOR_DEPT");
        cmbDept.setNextFocusableComponent(txtSuppCode);
        cmbDept.setEnabled(false);
        cmbDept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbDeptFocusGained(evt);
            }
        });
        cmbDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDeptItemStateChanged(evt);
            }
        });

        Tab1.add(cmbDept);
        cmbDept.setBounds(115, 91, 232, 21);

        txtSuppCode.setName("SUPP_ID");
        txtSuppCode.setNextFocusableComponent(txtPartyName);
        txtSuppCode.setEnabled(false);
        txtSuppCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSuppCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuppCodeFocusLost(evt);
            }
        });
        txtSuppCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSuppCodeKeyPressed(evt);
            }
        });

        Tab1.add(txtSuppCode);
        txtSuppCode.setBounds(115, 120, 67, 21);

        txtSuppName.setEditable(false);
        Tab1.add(txtSuppName);
        txtSuppName.setBounds(185, 120, 385, 21);

        jLabel41.setText("Supplier");
        Tab1.add(jLabel41);
        jLabel41.setBounds(53, 120, 58, 20);

        jLabel42.setText("Transport Mode");
        Tab1.add(jLabel42);
        jLabel42.setBounds(7, 263, 107, 20);

        cmbTransportMode.setName("MODE_TRANSPORT");
        cmbTransportMode.setNextFocusableComponent(cmbTransporter);
        cmbTransportMode.setEnabled(false);
        cmbTransportMode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransportModeFocusGained(evt);
            }
        });

        Tab1.add(cmbTransportMode);
        cmbTransportMode.setBounds(115, 263, 244, 21);

        jLabel43.setText("Transporter");
        Tab1.add(jLabel43);
        jLabel43.setBounds(426, 264, 77, 20);

        cmbTransporter.setName("TRANSPORTER");
        cmbTransporter.setNextFocusableComponent(txtPurpose);
        cmbTransporter.setEnabled(false);
        cmbTransporter.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTransporterFocusGained(evt);
            }
        });

        Tab1.add(cmbTransporter);
        cmbTransporter.setBounds(506, 263, 250, 24);

        jLabel44.setText("Remarks");
        Tab1.add(jLabel44);
        jLabel44.setBounds(54, 326, 60, 20);

        txtRemarks.setName("REMARKS");
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });

        Tab1.add(txtRemarks);
        txtRemarks.setBounds(115, 326, 558, 21);

        jLabel45.setText("Net Amount");
        Tab1.add(jLabel45);
        jLabel45.setBounds(35, 355, 76, 20);

        chkLot.setForeground(new java.awt.Color(51, 51, 255));
        chkLot.setMnemonic('l');
        chkLot.setText("Against Lot No.");
        chkLot.setEnabled(false);
        Tab1.add(chkLot);
        chkLot.setBounds(359, 62, 135, 23);

        cmdNext_Header.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Header.setMnemonic('n');
        cmdNext_Header.setText("Next ");
        cmdNext_Header.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_HeaderActionPerformed(evt);
            }
        });

        Tab1.add(cmdNext_Header);
        cmdNext_Header.setBounds(678, 356, 90, 25);

        txtNetAmount.setBackground(new java.awt.Color(255, 255, 204));
        txtNetAmount.setEditable(false);
        Tab1.add(txtNetAmount);
        txtNetAmount.setBounds(115, 353, 140, 21);

        jLabel12.setText("Party name ");
        Tab1.add(jLabel12);
        jLabel12.setBounds(35, 154, 73, 15);

        txtPartyName.setName("PARTY_NAME");
        txtPartyName.setNextFocusableComponent(txtAdd1);
        txtPartyName.setEnabled(false);
        Tab1.add(txtPartyName);
        txtPartyName.setBounds(115, 150, 244, 21);

        jLabel16.setText("Address");
        Tab1.add(jLabel16);
        jLabel16.setBounds(52, 174, 59, 15);

        txtAdd1.setName("ADD1");
        txtAdd1.setNextFocusableComponent(txtAdd2);
        txtAdd1.setEnabled(false);
        Tab1.add(txtAdd1);
        txtAdd1.setBounds(115, 172, 244, 21);

        txtAdd2.setName("ADD2");
        txtAdd2.setNextFocusableComponent(txtAdd3);
        txtAdd2.setEnabled(false);
        Tab1.add(txtAdd2);
        txtAdd2.setBounds(115, 193, 244, 21);

        txtAdd3.setName("ADD3");
        txtAdd3.setNextFocusableComponent(txtDespatchMode);
        txtAdd3.setEnabled(false);
        Tab1.add(txtAdd3);
        txtAdd3.setBounds(115, 214, 244, 21);

        txtCity.setName("CITY");
        txtCity.setNextFocusableComponent(txtReturnDate);
        txtCity.setEnabled(false);
        Tab1.add(txtCity);
        txtCity.setBounds(115, 238, 158, 21);

        jLabel17.setText("City");
        Tab1.add(jLabel17);
        jLabel17.setBounds(81, 241, 30, 15);

        cmbUser.setName("USER_ID");
        cmbUser.setEnabled(false);
        Tab1.add(cmbUser);
        cmbUser.setBounds(411, 89, 160, 24);

        jLabel7.setText("User");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel7);
        jLabel7.setBounds(359, 93, 44, 15);

        jLabel18.setText("Exp. Return Date");
        Tab1.add(jLabel18);
        jLabel18.setBounds(395, 241, 109, 15);

        txtReturnDate.setName("EXP_RETURN_DATE");
        txtReturnDate.setNextFocusableComponent(cmbTransportMode);
        txtReturnDate.setEnabled(false);
        Tab1.add(txtReturnDate);
        txtReturnDate.setBounds(506, 239, 158, 21);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(233, 13, 38, 15);

        cmdRemarksbig.setText("...");
        cmdRemarksbig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksbigActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksbig);
        cmdRemarksbig.setBounds(673, 328, 40, 20);

        chkKeep.setText("Keep Doc No.");
        Tab1.add(chkKeep);
        chkKeep.setBounds(654, 2, 113, 23);

        jLabel46.setText("Purpose");
        Tab1.add(jLabel46);
        jLabel46.setBounds(53, 298, 60, 20);

        txtPurpose.setName("REMARKS");
        txtPurpose.setNextFocusableComponent(txtRemarks);
        txtPurpose.setEnabled(false);
        Tab1.add(txtPurpose);
        txtPurpose.setBounds(116, 298, 564, 21);

        cmdRemarksBig1.setText("...");
        cmdRemarksBig1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBig1ActionPerformed(evt);
            }
        });

        Tab1.add(cmdRemarksBig1);
        cmdRemarksBig1.setBounds(681, 299, 39, 21);

        txtDespatchMode.setName("CITY");
        txtDespatchMode.setNextFocusableComponent(txtCity);
        txtDespatchMode.setEnabled(false);
        Tab1.add(txtDespatchMode);
        txtDespatchMode.setBounds(507, 212, 247, 21);

        jLabel19.setText("Despatch Mode");
        Tab1.add(jLabel19);
        jLabel19.setBounds(401, 215, 102, 15);

        jTabbedPane1.addTab("RGP Header", Tab1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel22.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel22.setText("RGP Items");
        jPanel2.add(jLabel22);
        jLabel22.setBounds(8, 18, 81, 15);

        cmdInsertRej.setMnemonic('r');
        cmdInsertRej.setText("Rejection Memo");
        cmdInsertRej.setEnabled(false);
        cmdInsertRej.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertRejActionPerformed(evt);
            }
        });

        jPanel2.add(cmdInsertRej);
        cmdInsertRej.setBounds(178, 10, 139, 25);

        cmdInsertGatepass.setMnemonic('I');
        cmdInsertGatepass.setText("Gatepass Req.");
        cmdInsertGatepass.setEnabled(false);
        cmdInsertGatepass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertGatepassActionPerformed(evt);
            }
        });

        jPanel2.add(cmdInsertGatepass);
        cmdInsertGatepass.setBounds(328, 10, 130, 25);

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        TableL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableLKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableLKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(TableL);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(8, 42, 750, 230);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        jPanel2.add(cmdAdd);
        cmdAdd.setBounds(580, 10, 88, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        jPanel2.add(cmdRemove);
        cmdRemove.setBounds(668, 10, 90, 25);

        cmdInsertDecl.setMnemonic('D');
        cmdInsertDecl.setText("Declaration");
        cmdInsertDecl.setEnabled(false);
        cmdInsertDecl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdInsertDeclActionPerformed(evt);
            }
        });

        jPanel2.add(cmdInsertDecl);
        cmdInsertDecl.setBounds(458, 10, 120, 25);

        cmdNext_Detail.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdNext_Detail.setMnemonic('x');
        cmdNext_Detail.setText("Next ");
        cmdNext_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext_DetailActionPerformed(evt);
            }
        });

        jPanel2.add(cmdNext_Detail);
        cmdNext_Detail.setBounds(668, 318, 90, 25);

        cmdPrev_Detail.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev_Detail.setMnemonic('o');
        cmdPrev_Detail.setText("Previous");
        cmdPrev_Detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrev_DetailActionPerformed(evt);
            }
        });

        jPanel2.add(cmdPrev_Detail);
        cmdPrev_Detail.setBounds(574, 318, 90, 25);

        jLabel2.setText("Press Ctrl+C to copy selected line.");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(527, 277, 230, 15);

        cmdShowRJN.setFont(new java.awt.Font("Dialog", 0, 11));
        cmdShowRJN.setText("Show Rejection");
        cmdShowRJN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRJNActionPerformed(evt);
            }
        });

        jPanel2.add(cmdShowRJN);
        cmdShowRJN.setBounds(311, 281, 134, 24);

        cmdShowGPR.setFont(new java.awt.Font("Dialog", 0, 11));
        cmdShowGPR.setText("Show Requisition");
        cmdShowGPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowGPRActionPerformed(evt);
            }
        });

        jPanel2.add(cmdShowGPR);
        cmdShowGPR.setBounds(311, 310, 134, 24);

        jLabel1.setText("Packing");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(23, 278, 71, 15);

        txtPacking.setNextFocusableComponent(txtGrossWeight);
        txtPacking.setEnabled(false);
        jPanel2.add(txtPacking);
        txtPacking.setBounds(96, 276, 170, 19);

        jLabel3.setText("Gross Weight");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(6, 306, 88, 15);

        txtGrossWeight.setEnabled(false);
        jPanel2.add(txtGrossWeight);
        txtGrossWeight.setBounds(96, 304, 170, 19);

        jTabbedPane1.addTab("RGP Detail", jPanel2);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel31.setText("Hierarchy ");
        jPanel3.add(jLabel31);
        jLabel31.setBounds(28, 18, 66, 20);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });

        jPanel3.add(cmbHierarchy);
        cmbHierarchy.setBounds(98, 18, 184, 24);

        jLabel32.setText("From");
        jPanel3.add(jLabel32);
        jLabel32.setBounds(28, 48, 56, 20);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.add(txtFrom);
        txtFrom.setBounds(98, 48, 182, 19);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        jPanel3.add(txtFromRemarks);
        txtFromRemarks.setBounds(98, 78, 518, 19);

        jLabel35.setText("Remarks");
        jPanel3.add(jLabel35);
        jLabel35.setBounds(28, 78, 62, 20);

        jLabel36.setText("Your Action  ");
        jPanel3.add(jLabel36);
        jLabel36.setBounds(28, 128, 76, 15);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        OpgApprove.setText("Approve & Forward");
        buttonGroup1.add(OpgApprove);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });

        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 168, 23);

        OpgFinal.setText("Final Approve");
        buttonGroup1.add(OpgFinal);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });

        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        OpgReject.setText("Reject");
        buttonGroup1.add(OpgReject);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });

        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        buttonGroup1.add(OpgHold);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });

        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        jPanel3.add(jPanel6);
        jPanel6.setBounds(98, 118, 182, 100);

        jLabel33.setText("Send To");
        jPanel3.add(jLabel33);
        jLabel33.setBounds(28, 228, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });

        jPanel3.add(cmbSendTo);
        cmbSendTo.setBounds(100, 228, 184, 24);

        jLabel34.setText("Remarks");
        jPanel3.add(jLabel34);
        jLabel34.setBounds(28, 258, 60, 20);

        txtToRemarks.setNextFocusableComponent(cmdPrev);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });

        jPanel3.add(txtToRemarks);
        txtToRemarks.setBounds(100, 258, 516, 19);

        cmdPrev.setFont(new java.awt.Font("Tahoma", 1, 12));
        cmdPrev.setMnemonic('p');
        cmdPrev.setText("Previous");
        cmdPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrevActionPerformed(evt);
            }
        });

        jPanel3.add(cmdPrev);
        cmdPrev.setBounds(672, 320, 90, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });

        jPanel3.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(622, 77, 40, 20);

        jTabbedPane1.addTab("Approval Hierarchy", jPanel3);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jLabel26.setText("Document Approval Status");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 650, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel5.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 193, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(13, 209, 501, 119);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });

        jPanel5.add(cmdViewHistory);
        cmdViewHistory.setBounds(523, 241, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });

        jPanel5.add(cmdNormalView);
        cmdNormalView.setBounds(523, 272, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });

        jPanel5.add(cmdPreviewA);
        cmdPreviewA.setBounds(523, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(523, 304, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel5.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(537, 327, 129, 19);

        lblOutwardNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOutwardNo.setText("Outward No");
        jPanel5.add(lblOutwardNo);
        lblOutwardNo.setBounds(270, 10, 90, 15);

        txtOutwardNo.setEnabled(false);
        jPanel5.add(txtOutwardNo);
        txtOutwardNo.setBounds(370, 10, 100, 19);

        lblOutwardDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOutwardDate.setText("Outward Date");
        jPanel5.add(lblOutwardDate);
        lblOutwardDate.setBounds(500, 10, 90, 15);

        txtOutwardDate.setEnabled(false);
        jPanel5.add(txtOutwardDate);
        txtOutwardDate.setBounds(600, 10, 100, 19);

        jTabbedPane1.addTab("Status", jPanel5);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 66, 776, 411);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(2, 482, 774, 22);

    }//GEN-END:initComponents

    private void cmdRemarksBig1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBig1ActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtPurpose;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksBig1ActionPerformed

    private void txtGatepassNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassNoFocusLost
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD)
        {
          if(clsRGP.IsRGPExist(EITLERPGLOBAL.gCompanyID,txtGatepassNo.getText()))
          {
            JOptionPane.showMessageDialog(null,"RGP no. already exist. Please specify other no.");   
          }
        }
    }//GEN-LAST:event_txtGatepassNoFocusLost
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdRemarksbigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksbigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdRemarksbigActionPerformed
    
    private void cmbDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDeptItemStateChanged
        // TODO add your handling code here:
        GenerateUserCombo();
    }//GEN-LAST:event_cmbDeptItemStateChanged
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdShowGPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowGPRActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("GATEPASSREQ_NO", TableL.getSelectedRow());
            
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("Gatepass Requisition");
                aFrame.startAppletEx("EITLERP.Stores.frmGPR","Gatepass Requisition");
                frmGPR ObjDoc=(frmGPR) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            else {
                JOptionPane.showMessageDialog(null,"Gatepass requisition no. not specified");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdShowGPRActionPerformed
    
    private void cmdShowRJNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRJNActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=DataModelL.getValueByVariable("RJN_NO",TableL.getSelectedRow());
            
            if(!DocNo.trim().equals("")) {
                AppletFrame aFrame=new AppletFrame("Rejection Memo");
                
                int RJNType=clsRJN.getRJNType(EITLERPGLOBAL.gCompanyID, DocNo);
                
                if(RJNType==1) {
                    aFrame.startAppletEx("EITLERP.Stores.frmRJNGen","Rejection Memo");
                    frmRJNGen ObjDoc=(frmRJNGen) aFrame.ObjApplet;
                    ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
                }
                else {
                    aFrame.startAppletEx("EITLERP.Stores.frmRJN","Rejection Memo");
                    frmRJN ObjDoc=(frmRJN) aFrame.ObjApplet;
                    ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"Rejection memo no. not specified");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdShowRJNActionPerformed
    
    private void cmdInsertDeclActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertDeclActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdInsertDeclActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjRGP.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtGatepassNo.getText();
        ObjRGP.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void TableLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyReleased
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(evt.getKeyCode()==67&&evt.getModifiersEx()==128) //Ctrl+C Key Combonation
            {
                //Check that any row exist
                if(TableL.getRowCount()>0) {
                    //First Add new row
                    Object[] rowData=new Object[1];
                    DataModelL.addRow(rowData);
                    int NewRow=TableL.getRowCount()-1;
                    
                    //Copy New row with Previous one
                    for(int i=0;i<TableL.getColumnCount();i++) {
                        TableL.setValueAt(TableL.getValueAt(TableL.getSelectedRow(),i), NewRow, i);
                    }
                    UpdateSrNo();
                }
            }
        }
    }//GEN-LAST:event_TableLKeyReleased
    
    private void cmdNext_HeaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_HeaderActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext_HeaderActionPerformed
    
    private void cmdPrev_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrev_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_cmdPrev_DetailActionPerformed
    
    private void cmdNext_DetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext_DetailActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_cmdNext_DetailActionPerformed
    
    private void cmdPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrevActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_cmdPrevActionPerformed
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify remarks if necessary ...........");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select a person for further Approval ...........");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Hierarchy list from given Hiearachy Names ...........");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify Remarks for furher Approval process ...........");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void cmbTransporterFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransporterFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify Transporter Name from given list...........");
    }//GEN-LAST:event_cmbTransporterFocusGained
    
    private void cmbTransportModeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTransportModeFocusGained
        // TODO add your handling code here:
        ShowMessage("Specify Mode of trasnport for RGP is generated ...........");
    }//GEN-LAST:event_cmbTransportModeFocusGained
    
    private void txtSuppCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Press F1 for Supplier selection ...........");
    }//GEN-LAST:event_txtSuppCodeFocusGained
    
    private void cmbDeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbDeptFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Department name for which RGP is Generated ...........");
    }//GEN-LAST:event_cmbDeptFocusGained
    
    private void cmbGatepassTypeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbGatepassTypeFocusGained
        // TODO add your handling code here:
        ShowMessage("Select Gatepass type for further generation ...........");
    }//GEN-LAST:event_cmbGatepassTypeFocusGained
    
    private void txtGatepassDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGatepassDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter RGP Gatepass Date in DD/MM/YYYY ...........");
    }//GEN-LAST:event_txtGatepassDateFocusGained
    
    private void TableLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableLKeyPressed
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(chkLot.isSelected()) {
                if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("QTY")) {
                    if(evt.getKeyCode()==112) //F1 Key
                    {
                        String Type = EITLERPGLOBAL.getCombostrCode(cmbGatepassType);
                        if(Type.equals("GPR")) {
                            FrmLot_RGP ObjLot=new FrmLot_RGP();
                            ObjLot.Docno = (String) TableL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("GATEPASSREQ_NO"));
                            ObjLot.DocSrno = (int) Integer.parseInt((String) TableL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("GAETPASSREQ_SRNO")));
                            ObjLot.Type = Type;
                            
                            if(DataModelL.getUserObject(TableL.getSelectedRow()) instanceof HashMap) {
                                ObjLot.colLot=(HashMap)DataModelL.getUserObject(TableL.getSelectedRow());
                            }
                            else {
                                ObjLot.colLot=new HashMap();
                            }
                            if(ObjLot.ShowList()) //Ok Pressed
                            {
                                DataModelL.SetUserObject(TableL.getSelectedRow(),ObjLot.colLot);
                                //Show Updated Qty.
                                double TotalQty=0;
                                for(int i=1;i<=ObjLot.colLot.size();i++) {
                                    clsRGPItemDetail ObjItemLot=(clsRGPItemDetail) ObjLot.colLot.get(Integer.toString(i));
                                    TotalQty=TotalQty+ObjItemLot.getAttribute("LOT_QTY").getVal();
                                }
                                TableL.setValueAt(Double.toString(TotalQty), TableL.getSelectedRow(), DataModelL.getColFromVariable("QTY"));
                            }
                        }
                    }
                }
            }
            //=========== Lot Entry Complete ============
            //=========== Item List ===============
            
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("ITEM_CODE")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_CODE"));
                    }
                }
            }
            //=========================================
            
            //            if(evt.getKeyCode()==155)//Insert Key Pressed
            //            {
            //                Object[] rowData=new Object[1];
            //                DataModelL.addRow(rowData);
            //                DataModelL.SetUserObject(TableL.getRowCount()-1,new HashMap());
            //                TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
            //                UpdateSrNo();
            //            }
            
            //=========== Unit List ===============//
            if(TableL.getSelectedColumn()==DataModelL.getColFromVariable("UNIT")) {
                if(evt.getKeyCode()==112) //F1 Key pressed
                {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT PARA_CODE,D_COM_PARAMETER_MAST.DESC FROM D_COM_PARAMETER_MAST WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND  PARA_ID='UNIT' ORDER BY D_COM_PARAMETER_MAST.DESC";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=false;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        if(TableL.getCellEditor()!=null) {
                            TableL.getCellEditor().stopCellEditing();
                        }
                        
                        TableL.setValueAt(aList.ReturnVal, TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT"));
                        TableL.setValueAt(clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT",Integer.parseInt(aList.ReturnVal)), TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_NAME"));
                    }
                }
            }
            //=========================================//
            
            
        }
    }//GEN-LAST:event_TableLKeyPressed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[1];
        DataModelL.addRow(rowData);
        TableL.changeSelection(TableL.getRowCount()-1, 1, false,false);
        UpdateSrNo();
        UpdateAmounts();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(TableL.getRowCount()>0) {
            DataModelL.removeRow(TableL.getSelectedRow());
            UpdateSrNo();
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        SetupApproval();
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(false);
        OpgHold.setSelected(true);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(false);
        OpgFinal.setSelected(false);
        OpgReject.setSelected(true);
        OpgHold.setSelected(false);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjRGP.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmbGatepassTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGatepassTypeItemStateChanged
        // TODO add your handling code here:
        // TODO add your handling code here:
        if(EditMode != 0) {
            String Gate_Code=EITLERPGLOBAL.getCombostrCode(cmbGatepassType);
            
            cmdAdd.setEnabled(false);
            cmdInsertDecl.setEnabled(false);
            cmdInsertGatepass.setEnabled(false);
            cmdInsertRej.setEnabled(false);
            
            if(Gate_Code.equals("GPR")) {
                cmdAdd.setEnabled(true);
                cmdInsertGatepass.setEnabled(true);
            }
            
            if(Gate_Code.equals("RJN")) {
                cmdAdd.setEnabled(true);
                cmdInsertRej.setEnabled(true);
            }
            
            if(Gate_Code.equals("DFO")) {
                cmdAdd.setEnabled(true);
                cmdInsertDecl.setEnabled(true);
            }
            
            if(Gate_Code.equals("GEN")) {
                cmdAdd.setEnabled(true);
            }
        }
    }//GEN-LAST:event_cmbGatepassTypeItemStateChanged
    
    private void txtSuppCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSuppCodeFocusLost
        // TODO add your handling code here:
        if(!txtSuppCode.getText().trim().equals("")) {
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
            
                try
                {
                clsSupplier objSupp=(clsSupplier)clsSupplier.getObjectEx(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText());
                
                txtPartyName.setText(txtSuppName.getText());                
                txtAdd1.setText((String)objSupp.getAttribute("ADD1").getObj());
                txtAdd2.setText((String)objSupp.getAttribute("ADD2").getObj());
                txtAdd3.setText((String)objSupp.getAttribute("ADD3").getObj());
                txtCity.setText((String)objSupp.getAttribute("CITY").getObj());
                }
                catch(Exception e)
                {
                    
                }
            
        }
    }//GEN-LAST:event_txtSuppCodeFocusLost
    
    private void txtSuppCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSuppCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND ST35_REGISTERED=1 AND BLOCKED='N' AND APPROVED=1 ORDER BY SUPP_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtSuppCode.setText(aList.ReturnVal);
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
                txtPartyName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
                
                try
                {
                clsSupplier objSupp=(clsSupplier)clsSupplier.getObjectEx(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText());
                
                txtAdd1.setText((String)objSupp.getAttribute("ADD1").getObj());
                txtAdd2.setText((String)objSupp.getAttribute("ADD2").getObj());
                txtAdd3.setText((String)objSupp.getAttribute("ADD3").getObj());
                txtCity.setText((String)objSupp.getAttribute("CITY").getObj());
                }
                catch(Exception e)
                {
                    
                }
                
            }
        }
    }//GEN-LAST:event_txtSuppCodeKeyPressed
    
    private void cmdInsertGatepassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertGatepassActionPerformed
        // TODO add your handling code here:
        SelectGatepassReq ObjGPR=new SelectGatepassReq();
        
        ObjGPR.GatepassType="R";
        
        if(ObjGPR.ShowList()) {
            
            if(ObjGPR.CopyHeader) {
                EITLERPGLOBAL.setComboIndex(cmbGatepassType,"GPR");
                int UserID = (int)ObjGPR.ObjGPR.getAttribute("USER_ID").getVal();
                EITLERPGLOBAL.setComboIndex(cmbUser,UserID);
                EITLERPGLOBAL.setComboIndex(cmbDept,(int)ObjGPR.ObjGPR.getAttribute("DEST_DEPT_ID").getVal());
                txtPartyName.setText((String)ObjGPR.ObjGPR.getAttribute("PARTY_NAME").getObj());
                txtAdd1.setText((String)ObjGPR.ObjGPR.getAttribute("ADD1").getObj());
                txtAdd2.setText((String)ObjGPR.ObjGPR.getAttribute("ADD2").getObj());
                txtAdd3.setText((String)ObjGPR.ObjGPR.getAttribute("ADD3").getObj());
                txtCity.setText((String)ObjGPR.ObjGPR.getAttribute("CITY").getObj());
                txtReturnDate.setText(EITLERPGLOBAL.formatDate((String)ObjGPR.ObjGPR.getAttribute("EXP_RETURN_DATE").getObj()));
                
                txtPurpose.setText((String)ObjGPR.ObjGPR.getAttribute("PURPOSE").getObj());
                txtRemarks.setText((String)ObjGPR.ObjGPR.getAttribute("REMARKS").getObj());
                txtDespatchMode.setText((String)ObjGPR.ObjGPR.getAttribute("DESPATCH_MODE").getObj());
                System.out.println("userID="+UserID);
                EITLERPGLOBAL.setComboIndex(cmbUser,UserID);
            }
            
            //It will contain MIR Item Objects
            
            DoNotEvaluate=true;
            
            for(int i=1;i<=ObjGPR.colSelItems.size();i++) {
                clsGPRItem ObjItem=(clsGPRItem) ObjGPR.colSelItems.get(Integer.toString(i));
                
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                
                int NewRow=TableL.getRowCount()-1;
                
                //Copy MIR Lot nos. to GRN Lot nos.
                HashMap colLot=new HashMap();
                DataModelL.SetUserObject(NewRow,ObjItem.colLot);
                
                DataModelL.setValueByVariable("SR_NO", Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_CODE").getObj(),NewRow);
                String lItemID = (String)ObjItem.getAttribute("ITEM_CODE").getObj();
                
                DataModelL.setValueByVariable("RGP_DESC",(String)ObjItem.getAttribute("ITEM_EXTRA_DESC").getObj(),NewRow);
                DataModelL.setValueByVariable("PACKING",(String)ObjItem.getAttribute("PACKING").getObj(),NewRow);
                DataModelL.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
            
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("UNIT",Integer.toString((int)ObjItem.getAttribute("UNIT").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("GATEPASSREQ_NO",(String)ObjItem.getAttribute("GATEPASS_REQ_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("GATEPASSREQ_SRNO", Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
                double lRate= clsItem.getRate((int) EITLERPGLOBAL.gCompanyID,(String) ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("RATE",Double.toString(lRate),NewRow);
                
                String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                DataModelL.setValueByVariable("WAREHOUSE_ID", lWareHouseID,NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",lLocationID,NewRow);
                String lWarehouseName=clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, lWareHouseID);
                DataModelL.setValueByVariable("WAREHOUSE_NAME",lWarehouseName,NewRow);
                String lLocationName=clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, lLocationID);
                DataModelL.setValueByVariable("LOCATION_NAME",lLocationName,NewRow);
                
                DataModelL.setValueByVariable("PACKING",(String)ObjItem.getAttribute("PACKING").getObj(),NewRow);
            }
            
            DoNotEvaluate=false;
            
            UpdateSrNo();
            UpdateAmounts();
        }
    }//GEN-LAST:event_cmdInsertGatepassActionPerformed
    
    private void cmdInsertRejActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdInsertRejActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        SelectRJN ObjRJN=new SelectRJN();
        
        if(chkLot.isSelected()) {
            ObjRJN.RJNType=2;
        }
        else {
            ObjRJN.RJNType=1;
        }
        
        if(ObjRJN.ShowList()) {
            
            if(ObjRJN.CopyHeader) {
                if(ObjRJN.RJNType==2) {
                    txtSuppCode.setText((String)ObjRJN.ObjRJN.getAttribute("SUPP_ID").getObj());
                }
                else {
                    txtSuppCode.setText((String)ObjRJN.ObjRJNGen.getAttribute("SUPP_ID").getObj());
                }
                
                txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSuppCode.getText()));
            }
            
            //It will contain MIR Item Objects
            
            for(int i=1;i<=ObjRJN.colSelItems.size();i++) {
                clsRJNItem ObjItem=(clsRJNItem) ObjRJN.colSelItems.get(Integer.toString(i));
                
                //Add Blank Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                
                int NewRow=TableL.getRowCount()-1;
                
                //Copy MIR Lot nos. to GRN Lot nos.
                HashMap colLot=new HashMap();
                
                for(int lot=1;lot<=ObjItem.colItemLot.size();lot++) {
                    clsRGPItemDetail ObjLot=new clsRGPItemDetail();
                    
                    clsRJNLot ObjRJNLot=(clsRJNLot)ObjItem.colItemLot.get(Integer.toString(lot));
                    ObjLot.setAttribute("SR_NO",(int)ObjRJNLot.getAttribute("SR_NO").getVal());
                    ObjLot.setAttribute("LOT_NO",(String)ObjRJNLot.getAttribute("ITEM_LOT_NO").getObj());
                    ObjLot.setAttribute("LOT_QTY",ObjRJNLot.getAttribute("LOT_QTY").getVal());
                    colLot.put(Integer.toString(lot),ObjLot);
                }
                //Set Lot Collection to Table Row
                DataModelL.SetUserObject(NewRow,colLot);
                
                DataModelL.setValueByVariable("SR_NO", Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_ID").getObj(),NewRow);
                String lItemID = (String)ObjItem.getAttribute("ITEM_ID").getObj();
                
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("BAL_QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("UNIT",Integer.toString((int)ObjItem.getAttribute("UNIT").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("RJN_NO",(String)ObjItem.getAttribute("RJN_NO").getObj(),NewRow);
                DataModelL.setValueByVariable("RJN_SRNO", Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal()),NewRow);
                double lRate= clsItem.getRate((int) EITLERPGLOBAL.gCompanyID,(String) ObjItem.getAttribute("ITEM_ID").getObj());
                DataModelL.setValueByVariable("RATE",Double.toString(lRate),NewRow);
                
                String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                DataModelL.setValueByVariable("WAREHOUSE_ID", lWareHouseID,NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",lLocationID,NewRow);
                String lWarehouseName=clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, lWareHouseID);
                DataModelL.setValueByVariable("WAREHOUSE_NAME",lWarehouseName,NewRow);
                String lLocationName=clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, lLocationID);
                DataModelL.setValueByVariable("LOCATION_NAME",lLocationName,NewRow);
            }
            
            UpdateSrNo();
            UpdateAmounts();
        }
    }//GEN-LAST:event_cmdInsertRejActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JPanel Tab1;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JTable TableL;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCanceled;
    private javax.swing.JCheckBox chkKeep;
    private javax.swing.JCheckBox chkLot;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbGatepassType;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbTransportMode;
    private javax.swing.JComboBox cmbTransporter;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdInsertDecl;
    private javax.swing.JButton cmdInsertGatepass;
    private javax.swing.JButton cmdInsertRej;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext_Detail;
    private javax.swing.JButton cmdNext_Header;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPrev;
    private javax.swing.JButton cmdPrev_Detail;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig1;
    private javax.swing.JButton cmdRemarksbig;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowGPR;
    private javax.swing.JButton cmdShowRJN;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblOutwardDate;
    private javax.swing.JLabel lblOutwardNo;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAdd1;
    private javax.swing.JTextField txtAdd2;
    private javax.swing.JTextField txtAdd3;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDespatchMode;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtGatepassDate;
    private javax.swing.JTextField txtGatepassNo;
    private javax.swing.JTextField txtGrossWeight;
    private javax.swing.JTextField txtNetAmount;
    private javax.swing.JTextField txtOutwardDate;
    private javax.swing.JTextField txtOutwardNo;
    private javax.swing.JTextField txtPacking;
    private javax.swing.JTextField txtPartyName;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtReturnDate;
    private javax.swing.JTextField txtSuppCode;
    private javax.swing.JTextField txtSuppName;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try
        {
        if(EditMode==0)
        {
           if(ObjRGP.getAttribute("APPROVED").getInt()==1)
           {
            lblTitle.setBackground(Color.BLUE);   
           }
           
           if(ObjRGP.getAttribute("APPROVED").getInt()!=1)
           {
            lblTitle.setBackground(Color.GRAY);   
           }
           
           if(ObjRGP.getAttribute("CANCELED").getInt()==1)
           {
            lblTitle.setBackground(Color.RED);   
           }

            
        }
        }
        catch(Exception c)
        {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=12;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        try {
            ClearFields();
            txtGatepassNo.setText((String)ObjRGP.getAttribute("GATEPASS_NO").getObj());
            lblTitle.setText("RETURNABLE GATEPASS - "+txtGatepassNo.getText());
            lblRevNo.setText(Integer.toString((int)ObjRGP.getAttribute("REVISION_NO").getVal()));
            txtGatepassDate.setText(EITLERPGLOBAL.formatDate((String)ObjRGP.getAttribute("GATEPASS_DATE").getObj()));
            txtSuppCode.setText((String)ObjRGP.getAttribute("SUPP_ID").getObj());
            txtSuppName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, (String)ObjRGP.getAttribute("SUPP_ID").getObj()));
            EITLERPGLOBAL.setComboIndex(cmbGatepassType,(String)ObjRGP.getAttribute("GATEPASS_TYPE").getObj());
            EITLERPGLOBAL.setComboIndex(cmbDept,(int)ObjRGP.getAttribute("FOR_DEPT").getVal());
            GenerateUserCombo();
            EITLERPGLOBAL.setComboIndex(cmbTransportMode,(int) ObjRGP.getAttribute("MODE_TRANSPORT").getVal());
            EITLERPGLOBAL.setComboIndex(cmbTransporter,(int)ObjRGP.getAttribute("TRANSPORTER").getVal());
            txtRemarks.setText((String)ObjRGP.getAttribute("REMARKS").getObj());
            
            
            EITLERPGLOBAL.setComboIndex(cmbUser,(int)ObjRGP.getAttribute("USER_ID").getVal());
            txtPartyName.setText((String)ObjRGP.getAttribute("PARTY_NAME").getObj());
            txtAdd1.setText((String)ObjRGP.getAttribute("ADD1").getObj());
            txtAdd2.setText((String)ObjRGP.getAttribute("ADD2").getObj());
            txtAdd3.setText((String)ObjRGP.getAttribute("ADD3").getObj());
            txtCity.setText((String)ObjRGP.getAttribute("CITY").getObj());
            txtReturnDate.setText(EITLERPGLOBAL.formatDate((String)ObjRGP.getAttribute("EXP_RETURN_DATE").getObj()));
            
            txtPacking.setText((String)ObjRGP.getAttribute("PACKING").getObj());
            txtPurpose.setText((String)ObjRGP.getAttribute("PURPOSE").getObj());
            
            txtDespatchMode.setText((String)ObjRGP.getAttribute("DESPATCH_MODE").getObj());
            txtGrossWeight.setText((String)ObjRGP.getAttribute("GROSS_WEIGHT").getObj());
            
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjRGP.getAttribute("HIERARCHY_ID").getVal());
            
            if((boolean) ObjRGP.getAttribute("CANCELED").getBool()) {
                chkCanceled.setSelected(true);
            }else  chkCanceled.setSelected(false);
            
            if((boolean) ObjRGP.getAttribute("RGP_WITH_LOT").getBool()) {
                chkLot.setSelected(true);
            }else  chkLot.setSelected(false);
            //========= Display Line Items =============//
            
            DoNotEvaluate=true;
            
            FormatGrid();
            
            for(int i=1;i<=ObjRGP.colLineItems.size();i++) {
                //Insert New Row
                Object[] rowData=new Object[1];
                DataModelL.addRow(rowData);
                int NewRow=TableL.getRowCount()-1;
                
                clsRGPItem ObjItem=(clsRGPItem)ObjRGP.colLineItems.get(Integer.toString(i));
                
                DataModelL.setValueByVariable("SR_NO",Integer.toString(i),NewRow);
                DataModelL.setValueByVariable("ITEM_CODE",(String)ObjItem.getAttribute("ITEM_CODE").getObj(),NewRow);
                String ItemName=clsItem.getItemName(EITLERPGLOBAL.gCompanyID, (String)ObjItem.getAttribute("ITEM_CODE").getObj());
                DataModelL.setValueByVariable("ITEM_NAME",ItemName,NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID",(String)ObjItem.getAttribute("WAREHOUSE_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",(String)ObjItem.getAttribute("LOCATION_ID").getObj(),NewRow);
                String WarehouseName = clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("WAREHOUSE_ID").getObj());
                DataModelL.setValueByVariable("WAREHOUSE_NAME",WarehouseName,NewRow);
                String LocationName = clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, (String) ObjItem.getAttribute("LOCATION_ID").getObj());
                DataModelL.setValueByVariable("LOCATION_NAME",LocationName,NewRow);
                DataModelL.setValueByVariable("RGP_DESC",(String)ObjItem.getAttribute("RGP_DESC").getObj(),NewRow);
                DataModelL.setValueByVariable("QTY",Double.toString(ObjItem.getAttribute("QTY").getVal()),NewRow);
                DataModelL.setValueByVariable("RATE",Double.toString(ObjItem.getAttribute("RATE").getVal()),NewRow);
                String UnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",(int)ObjItem.getAttribute("UNIT").getVal());
                DataModelL.setValueByVariable("UNIT_NAME",UnitName,NewRow);
                DataModelL.setValueByVariable("REMARKS",(String)ObjItem.getAttribute("REMARKS").getObj(),NewRow);
                DataModelL.setValueByVariable("RJN_NO",(String) ObjItem.getAttribute("RJN_NO").getObj(),NewRow);
                if (ObjItem.getAttribute("RJN_SRNO").getVal() > 0) {
                    DataModelL.setValueByVariable("RJN_SRNO",Double.toString(ObjItem.getAttribute("RJN_SRNO").getVal()),NewRow);
                }
                else  DataModelL.setValueByVariable("RJN_SRNO","0",NewRow);
                DataModelL.setValueByVariable("GATEPASSREQ_NO",(String) ObjItem.getAttribute("GATEPASSREQ_NO").getObj(),NewRow);
                if (ObjItem.getAttribute("GATEPASSREQ_SRNO").getVal() > 0) {
                    DataModelL.setValueByVariable("GATEPASSREQ_SRNO",Double.toString(ObjItem.getAttribute("GATEPASSREQ_SRNO").getVal()),NewRow);
                }
                else DataModelL.setValueByVariable("GATEPASSREQ_SRNO","0",NewRow);
                DataModelL.setValueByVariable("DECLARATION_ID",(String) ObjItem.getAttribute("DECLARATION_ID").getObj(),NewRow);
                if (ObjItem.getAttribute("DECLARATION_SRNO").getVal() > 0) {
                    DataModelL.setValueByVariable("DECLARATION_SRNO",Double.toString(ObjItem.getAttribute("DECLARATION_SRNO").getVal()),NewRow);
                }
                else DataModelL.setValueByVariable("DECLARATION_SRNO","0",NewRow);
                DataModelL.setValueByVariable("WAREHOUSE_ID",(String)ObjItem.getAttribute("WAREHOUSE_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("LOCATION_ID",(String)ObjItem.getAttribute("LOCATION_ID").getObj(),NewRow);
                DataModelL.setValueByVariable("UNIT",Integer.toString((int) ObjItem.getAttribute("UNIT").getVal()),NewRow);
                DataModelL.setValueByVariable("PACKING",(String)ObjItem.getAttribute("PACKING").getObj(),NewRow);
                
                DataModelL.SetUserObject(NewRow, ObjItem.colItemLot);
            }
            
            DoNotEvaluate=false;
            
            UpdateAmounts();
            UpdateSrNo();
            
            if(EditMode==0) {
                DataModelL.TableReadOnly(true);
            }
            
            //======== Generating Grid for Document Approval Flow ========//
            FormatGridA();
            HashMap List=new HashMap();
            String DocNo=(String)ObjRGP.getAttribute("GATEPASS_NO").getObj();
            List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 12, DocNo);
            for(int i=1;i<=List.size();i++) {
                clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
                Object[] rowData=new Object[7];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
                rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
                rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
                rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
                rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
                rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
                
                DataModelA.addRow(rowData);
            }
            
            //Showing Audit Trial History
            FormatGridHS();
            HashMap History=clsRGP.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
            for(int i=1;i<=History.size();i++) {
                clsRGP ObjHistory=(clsRGP)History.get(Integer.toString(i));
                Object[] rowData=new Object[5];
                
                rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
                rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
                rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
                
                String ApprovalStatus="";
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                    ApprovalStatus="Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                    ApprovalStatus="Final Approved";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                    ApprovalStatus="Waiting";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                    ApprovalStatus="Rejected";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                    ApprovalStatus="Pending";
                }
                
                if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                    ApprovalStatus="Skiped";
                }
                
                
                rowData[3]=ApprovalStatus;
                rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
                
                DataModelHS.addRow(rowData);
            }
            
            
            //============================================================//
            
            
            //coding for display Outward detail***************
            int chkData = 0;
            String strQry = "";
            strQry = "SELECT COUNT(*) FROM D_INV_GATE_OUTWARD_HEADER "+
            "WHERE COMPANY_ID="+ EITLERPGLOBAL.gCompanyID +" AND APPROVED=1 AND CANCELLED=0 "+
            "AND RGP_NRGP='R' AND GATEPASS_NO='"+ txtGatepassNo.getText().trim() +"'";
            chkData = data.getIntValueFromDB(strQry);
            if (chkData > 0) {
                lblOutwardNo.setVisible(true);
                lblOutwardDate.setVisible(true);
                txtOutwardNo.setVisible(true);
                txtOutwardDate.setVisible(true);
                
                
                strQry = "SELECT * FROM D_INV_GATE_OUTWARD_HEADER "+
                "WHERE COMPANY_ID="+ EITLERPGLOBAL.gCompanyID +" AND APPROVED=1 AND CANCELLED=0 "+
                "AND RGP_NRGP='R' AND GATEPASS_NO='"+ txtGatepassNo.getText().trim() +"'";
                
                Connection tmpConn;
                tmpConn=data.getCreatedConn();
                Statement tmpStmt;
                ResultSet rsOutData;
                
                tmpStmt=tmpConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
                rsOutData=tmpStmt.executeQuery(strQry);
                
                rsOutData.first();
                txtOutwardNo.setText(rsOutData.getString("OUTWARD_NO"));
                txtOutwardDate.setText(EITLERPGLOBAL.formatDate(rsOutData.getString("GATE_OUTWARD_DATE")));
                
                rsOutData.close();
            }
            else {
                lblOutwardNo.setVisible(false);
                lblOutwardDate.setVisible(false);
                txtOutwardNo.setVisible(false);
                txtOutwardDate.setVisible(false);
            }
            
            //***************coding for display Outward detail

        }
        catch(Exception e){}
    }
    
    //Sets data to the Class Object
    private void SetData() {
   
        if(EditMode==EITLERPGLOBAL.ADD)
        {
        ObjRGP.UserDocNo=txtGatepassNo.isEnabled();  
        ObjRGP.setAttribute("GATEPASS_NO",txtGatepassNo.getText());
        }
        else
        {
        ObjRGP.UserDocNo=false;      
        }        
        
        
        ObjRGP.UserDocNo=false;      
        
        ObjRGP.setAttribute("PREFIX",SelPrefix);
        ObjRGP.setAttribute("SUFFIX",SelSuffix);
        ObjRGP.setAttribute("FFNO",FFNo);
        ObjRGP.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjRGP.setAttribute("GATEPASS_NO",txtGatepassNo.getText());
        ObjRGP.setAttribute("GATEPASS_DATE",EITLERPGLOBAL.formatDateDB(txtGatepassDate.getText()));
        ObjRGP.setAttribute("SUPP_ID",txtSuppCode.getText());
        ObjRGP.setAttribute("REMARKS",txtRemarks.getText());
        ObjRGP.setAttribute("TOTAL_AMOUNT",EITLERPGLOBAL.round(Double.parseDouble(txtNetAmount.getText()),5));
        ObjRGP.setAttribute("GATEPASS_TYPE",EITLERPGLOBAL.getCombostrCode(cmbGatepassType));
        ObjRGP.setAttribute("FOR_DEPT",EITLERPGLOBAL.getComboCode(cmbDept));
        ObjRGP.setAttribute("MODE_TRANSPORT",EITLERPGLOBAL.getComboCode(cmbTransportMode));
        ObjRGP.setAttribute("TRANSPORTER",EITLERPGLOBAL.getComboCode(cmbTransporter));
        ObjRGP.setAttribute("USER_ID",EITLERPGLOBAL.getComboCode(cmbUser));
        ObjRGP.setAttribute("PARTY_NAME",txtPartyName.getText());
        ObjRGP.setAttribute("ADD1",txtAdd1.getText());
        ObjRGP.setAttribute("ADD2",txtAdd2.getText());
        ObjRGP.setAttribute("ADD3",txtAdd3.getText());
        ObjRGP.setAttribute("CITY",txtCity.getText());
        ObjRGP.setAttribute("EXP_RETURN_DATE",EITLERPGLOBAL.formatDateDB(txtReturnDate.getText()));
        
        ObjRGP.setAttribute("PACKING",txtPacking.getText());
        ObjRGP.setAttribute("PURPOSE",txtPurpose.getText());
        ObjRGP.setAttribute("DESPATCH_MODE",txtDespatchMode.getText());
        ObjRGP.setAttribute("GROSS_WEIGHT",txtGrossWeight.getText());
        
        if(chkLot.isSelected()) {
            ObjRGP.setAttribute("RGP_WITH_LOT",true);
        }else  ObjRGP.setAttribute("RGP_WITH_LOT",false);
        
        if(chkCanceled.isSelected()) {
            ObjRGP.setAttribute("CANCELED",true);
        }else
            ObjRGP.setAttribute("CANCELED",false);
        
        //----- Update Approval Specific Fields -----------//
        ObjRGP.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjRGP.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjRGP.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjRGP.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjRGP.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjRGP.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjRGP.setAttribute("APPROVAL_STATUS","R");
        }
        
        if(OpgHold.isSelected()) {
            ObjRGP.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjRGP.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjRGP.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjRGP.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjRGP.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        //=================== Setting up Line Items ==================//
        
        ObjRGP.colLineItems.clear();
        
        for(int i=0;i<TableL.getRowCount();i++) {
            clsRGPItem ObjRGPItem=new clsRGPItem();
            
            ObjRGPItem.setAttribute("SR_NO",Integer.parseInt(DataModelL.getValueByVariable("SR_NO",i)));
            ObjRGPItem.setAttribute("ITEM_CODE",DataModelL.getValueByVariable("ITEM_CODE",i));
            ObjRGPItem.setAttribute("WAREHOUSE_ID",DataModelL.getValueByVariable("WAREHOUSE_ID",i));
            ObjRGPItem.setAttribute("LOCATION_ID",DataModelL.getValueByVariable("LOCATION_ID",i));
            ObjRGPItem.setAttribute("RGP_DESC",DataModelL.getValueByVariable("RGP_DESC",i));
            ObjRGPItem.setAttribute("QTY",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("QTY",i)),3));
            ObjRGPItem.setAttribute("UNIT",(int)Double.parseDouble(DataModelL.getValueByVariable("UNIT",i)));
            ObjRGPItem.setAttribute("RATE",EITLERPGLOBAL.round(Double.parseDouble(DataModelL.getValueByVariable("RATE",i)),5));
            ObjRGPItem.setAttribute("REMARKS",DataModelL.getValueByVariable("REMARKS",i));
            ObjRGPItem.setAttribute("RJN_NO",DataModelL.getValueByVariable("RJN_NO",i));
            ObjRGPItem.setAttribute("RJN_SRNO",(int)Double.parseDouble(DataModelL.getValueByVariable("RJN_SRNO",i)));
            ObjRGPItem.setAttribute("GATEPASSREQ_NO",DataModelL.getValueByVariable("GATEPASSREQ_NO",i));
            ObjRGPItem.setAttribute("GATEPASSREQ_SRNO",(int)Double.parseDouble(DataModelL.getValueByVariable("GATEPASSREQ_SRNO",i)));
            ObjRGPItem.setAttribute("DECLARATION_ID",DataModelL.getValueByVariable("DECLARATION_ID",i));
            ObjRGPItem.setAttribute("DECLARATION_SRNO",(int)Double.parseDouble(DataModelL.getValueByVariable("DECLARATION_SRNO",i)));
            ObjRGPItem.setAttribute("PACKING",DataModelL.getValueByVariable("PACKING",i));
            
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                ObjRGPItem.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
                ObjRGPItem.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            else {
                ObjRGPItem.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
                ObjRGPItem.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
            }
            
            //================ For Lot Items corrospondese to Detail
            
            
            
            if(DataModelL.getUserObject(i) instanceof HashMap) {
                HashMap lcolLot=(HashMap)DataModelL.getUserObject(i);
                
                for(int l=1;l<=lcolLot.size();l++) {
                    clsRGPItemDetail ObjLot=new clsRGPItemDetail();
                    
                    Object theObj=lcolLot.get(Integer.toString(l));
                    
                    if(theObj instanceof clsRGPItemDetail) {
                        clsRGPItemDetail  ObjList=(clsRGPItemDetail)lcolLot.get(Integer.toString(l));
                        
                        ObjLot.setAttribute("SR_NO",l);
                        ObjLot.setAttribute("LOT_NO",(String)ObjList.getAttribute("ITEM_LOT_NO").getObj());
                        ObjLot.setAttribute("LOT_QTY",ObjList.getAttribute("LOT_QTY").getVal());
                        
                    }
                    
                    if(theObj instanceof clsGPRLot) {
                        clsGPRLot ObjList=(clsGPRLot)lcolLot.get(Integer.toString(l));
                        
                        ObjLot.setAttribute("SR_NO",l);
                        ObjLot.setAttribute("LOT_NO",(String)ObjList.getAttribute("ITEM_LOT_NO").getObj());
                        ObjLot.setAttribute("LOT_QTY",ObjList.getAttribute("LOT_QTY").getVal());
                        
                    }
                    
                    
                    if(EditMode==EITLERPGLOBAL.ADD) {
                        ObjLot.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
                        ObjLot.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                    }
                    else {
                        ObjLot.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
                        ObjLot.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
                    }
                    
                    ObjRGPItem.colItemLot.put(Integer.toString(ObjRGPItem.colItemLot.size()+1),ObjLot);
                }
            }
            //======== Lot Insertion Completed =========//
            
            
            ObjRGP.colLineItems.put(Integer.toString(ObjRGP.colLineItems.size()+1),ObjRGPItem);
        }
    }
    
    private void SetNumberFormats() {
        /*DecimalFormat decimalFormat=new DecimalFormat("0.00");
        NumberFormatter ObjFormater=new NumberFormatter(decimalFormat);
        ObjFormater.setAllowsInvalid(false);
        txtNetAmount.setFormatterFactory(new DefaultFormatterFactory(ObjFormater));*/
    }
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=12");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=12");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate Department Combo ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String) ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
        //--- Generate Type Gatepass Type ------//
        cmbGatepassTypeModel=new EITLComboModel();
        cmbGatepassType.removeAllItems();
        cmbGatepassType.setModel(cmbGatepassTypeModel);
        
        ComboData aData=new ComboData();
        aData.strCode="GPR";
        aData.Text="GATEPASS REQUISITION";
        cmbGatepassTypeModel.addElement(aData);
        
        /*aData=new ComboData();
        aData.strCode="RJN";
        aData.Text="REJECTION MEMO";
        cmbGatepassTypeModel.addElement(aData);
         
        aData=new ComboData();
        aData.strCode="DFO";
        aData.Text="DECLARATION FORM";
        cmbGatepassTypeModel.addElement(aData);*/
        
        aData=new ComboData();
        aData.strCode="GEN";
        aData.Text="GENERAL";
        cmbGatepassTypeModel.addElement(aData);
        //===============================//
        
        cmbTransporterModel=new EITLComboModel();
        cmbTransporter.removeAllItems();
        cmbTransporter.setModel(cmbTransporterModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTransporterModel.addElement(aData);
        }
        
        cmbTrasnportModel=new EITLComboModel();
        cmbTransportMode.removeAllItems();
        cmbTransportMode.setModel(cmbTrasnportModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND PARA_ID='TRANSPORT_MODE'";
        
        List=clsParameter.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsParameter ObjPara=(clsParameter) List.get(Integer.toString(i));
            aData=new ComboData();
            aData.Code=(int) ObjPara.getAttribute("PARA_CODE").getVal();
            aData.Text=(String)ObjPara.getAttribute("DESC").getObj();
            aData.strCode="";
            cmbTrasnportModel.addElement(aData);
        }
        //Generates Combo Boxes
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        clsUser ObjUser=new clsUser();
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        
    }
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbSendToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbSendToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbSendToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 12,(String)ObjRGP.getAttribute("GATEPASS_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbSendToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
    }
    
    private void UpdateSrNo() {
        int SrCol=0;
        
        for(int i=0;i<TableL.getRowCount();i++) {
            TableL.setValueAt(Integer.toString(i+1), i, SrCol);
        }
    }
    
    private void UpdateAmounts() {
        //== Final Pass - Update the Net Amount ==
        double lnQty=0;
        double lnRate=0;
        double lnAmt = 0;
        double lnAmt1 = 0;
        int lnQtyCol=0,lnRateCol=0;
        
        lnQtyCol=DataModelL.getColFromVariable("QTY");
        lnRateCol=DataModelL.getColFromVariable("RATE");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            lnQty = Double.parseDouble((String) TableL.getValueAt(i,lnQtyCol));
            lnRate = Double.parseDouble((String) TableL.getValueAt(i,lnRateCol));
            lnAmt=lnQty * lnRate;
            lnAmt1=lnAmt1+lnAmt;
        }
        txtNetAmount.setText(Double.toString(EITLERPGLOBAL.round(lnAmt1,5)));
    }
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,585)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }*/
        if(EditMode==EITLERPGLOBAL.ADD) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 12,(String)ObjRGP.getAttribute("GATEPASS_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,12,FromUserID,(String)ObjRGP.getAttribute("GATEPASS_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void FormatGrid() {
        HashMap ColList=new HashMap();
        
        try {
            cmdShowRJN.requestFocus();
            DataModelL=new EITLTableModel();
            
            TableL.removeAll();
            TableL.setModel(DataModelL);
            
            //Set the table Readonly
            DataModelL.TableReadOnly(false);
            
            ColList=clsSystemColumn.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=12 AND HIDDEN=0 ORDER BY D_COM_SYSTEM_COLUMNS.ORDER");
            for(int i=1;i<=ColList.size();i++) {
                clsSystemColumn ObjColumn=(clsSystemColumn)ColList.get(Integer.toString(i));
                
                //Add Column First
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()); //0
                
                
                if(ObjColumn.getAttribute("NUMERIC").getBool()) {
                    DataModelL.SetNumeric(TableL.getColumnCount()-1, true);
                }
                else {
                    DataModelL.SetNumeric(TableL.getColumnCount()-1, false);
                }
                
                
                String Variable=(String)ObjColumn.getAttribute("VARIABLE").getObj();
                
                if(Variable.equals("QTY")||Variable.equals("RATE")||Variable.equals("GROSS_AMOUNT")||Variable.equals("NET_AMOUNT")) {
                    DataModelL.SetColID(TableL.getColumnCount()-1, -99);
                }
                else {
                    DataModelL.SetColID(TableL.getColumnCount()-1, 0);
                }
                
                
                DataModelL.SetVariable(TableL.getColumnCount()-1,Variable.trim());
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                DataModelL.SetInclude(TableL.getColumnCount()-1,true);
                
                if(ObjColumn.getAttribute("READONLY").getBool()) {
                    DataModelL.SetReadOnly(TableL.getColumnCount()-1);
                }
            }
            
            //Now hide the column 1
            TableColumnModel ColModel=TableL.getColumnModel();
            TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            //------- Install Table List Selection Listener ------//
            TableL.getColumnModel().getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent e) {
                    int last=TableL.getSelectedColumn();
                    String strVar=DataModelL.getVariable(last);
                    
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue=(String)TableL.getValueAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                        
                        TableL.editCellAt(TableL.getSelectedRow(),TableL.getSelectedColumn());
                        if(TableL.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)TableL.getEditorComponent()).selectAll();
                        }
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                    
                    
                }
            }
            );
            //===================================================//
            
            
            
            //----- Install Table Model Event Listener -------//
            TableL.getModel().addTableModelListener(new TableModelListener() {
                public void tableChanged(TableModelEvent e) {
                    if (e.getType() == TableModelEvent.UPDATE) {
                        
                        //=========== Cell Update Prevention Check ===========//
                        String curValue=(String)TableL.getValueAt(TableL.getSelectedRow(), e.getColumn());
                        if(curValue.equals(cellLastValue)) {
                            return;
                        }
                        //====================================================//
                        
                        
                        
                        int col = e.getColumn();
                        
                        if(DoNotEvaluate) {
                            return;
                        }
                        
                        
                        if(col==DataModelL.getColFromVariable("UNIT")) {
                            DataModelL.setValueByVariable("UNIT_NAME",clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID,"UNIT",Integer.parseInt(DataModelL.getValueByVariable("UNIT",TableL.getSelectedRow()))),TableL.getSelectedRow());
                        }
                        
                        
                        //If Item ID has changed
                        if(col == 1) {
                            try {
                                String lItemID=(String)DataModelL.getValueAt(TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_CODE"));
                                String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                String lWareHouseID=clsItem.getItemWareHouseID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                String lLocationID=clsItem.getItemLocationID((int)EITLERPGLOBAL.gCompanyID, lItemID);
                                double lRate= clsItem.getRate((int) EITLERPGLOBAL.gCompanyID,lItemID);
                                TableL.setValueAt(lItemName, TableL.getSelectedRow(),DataModelL.getColFromVariable("ITEM_NAME"));
                                TableL.setValueAt(Double.toString(lRate),TableL.getSelectedRow(),DataModelL.getColFromVariable("RATE"));
                                TableL.setValueAt(lWareHouseID, TableL.getSelectedRow(),DataModelL.getColFromVariable("WAREHOUSE_ID"));
                                TableL.setValueAt(lLocationID, TableL.getSelectedRow(),DataModelL.getColFromVariable("LOCATION_ID"));
                                
                                int lItemUnit=clsItem.getItemUnit(EITLERPGLOBAL.gCompanyID, lItemID);
                                TableL.setValueAt(Integer.toString(lItemUnit),TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT"));
                                String lUnitName=clsParameter.getParaDescription(EITLERPGLOBAL.gCompanyID, "UNIT", lItemUnit);
                                TableL.setValueAt(lUnitName,TableL.getSelectedRow(),DataModelL.getColFromVariable("UNIT_NAME"));
                                String lWarehouseName=clsWarehouse.getWarehouseName(EITLERPGLOBAL.gCompanyID, lWareHouseID);
                                TableL.setValueAt(lWarehouseName,TableL.getSelectedRow(), DataModelL.getColFromVariable("WAREHOUSE_NAME"));
                                String lLocationName=clsLocation.getLocationName(EITLERPGLOBAL.gCompanyID, lLocationID);
                                TableL.setValueAt(lLocationName,TableL.getSelectedRow(), DataModelL.getColFromVariable("LOCATION_NAME"));
                                
                            }
                            catch(Exception ex){ }
                        }
                    }
                }
            });
            int ImportCol=DataModelL.getColFromVariable("IMPORT_CONCESS");
            Renderer.setCustomComponent(ImportCol,"CheckBox");
            JCheckBox aCheckBox=new JCheckBox();
            aCheckBox.setBackground(Color.WHITE);
            TableL.getColumnModel().getColumn(ImportCol).setCellEditor(new DefaultCellEditor(aCheckBox));
            TableL.getColumnModel().getColumn(ImportCol).setCellRenderer(Renderer);
        }
        catch(Exception e) {
            
        }
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjRGP.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjRGP.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjRGP.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjRGP.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    
    private void SetFields(boolean pStat) {
        txtGatepassNo.setEnabled(false);

        
        txtNetAmount.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtGatepassNo.setEnabled(pStat);
        txtGatepassDate.setEnabled(pStat);
        txtSuppCode.setEnabled(pStat);
        txtDespatchMode.setEnabled(pStat);
        txtGrossWeight.setEnabled(pStat);
        
        chkCanceled.setEnabled(pStat);
        chkLot.setEnabled(pStat);
        
        cmbGatepassType.setEnabled(pStat);
        cmbDept.setEnabled(pStat);
        cmbTransportMode.setEnabled(pStat);
        cmbTransporter.setEnabled(pStat);
        cmbHierarchy.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        txtPacking.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        
        SetupApproval();
        
        cmdInsertRej.setEnabled(pStat);
        cmdInsertDecl.setEnabled(pStat);
        cmdInsertGatepass.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
        
        DataModelL.TableReadOnly(!pStat);
        
        cmbUser.setEnabled(pStat);
        txtPartyName.setEnabled(pStat);
        txtAdd1.setEnabled(pStat);
        txtAdd2.setEnabled(pStat);
        txtAdd3.setEnabled(pStat);
        txtCity.setEnabled(pStat);
        txtReturnDate.setEnabled(pStat);
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,581)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,582)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,583)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,584)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=12;
        chkLot.setEnabled(true);
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            ObjRGP.colLineItems.clear();
            FormatGrid();
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SelNo = aList.DocNo;
            SetupApproval();
            
            if(chkKeep.isSelected())
            {
                
            }
            else
            {
            txtGatepassNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 12, SelPrefix,SelSuffix,  false));
            txtGatepassDate.setText(EITLERPGLOBAL.getCurrentDate());
            }
            
            lblTitle.setText("RETURNABLE GATEPASS - "+txtGatepassNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
    }
    
    private void ClearFields() {
        //txtGatepassNo.setText("");
        //txtGatepassDate.setText("");
        chkCanceled.setSelected(false);
        txtRemarks.setText("");
        txtSuppCode.setText("");
        txtSuppName.setText("");
        txtNetAmount.setText("0.00");
        txtPartyName.setText("");
        txtAdd1.setText("");
        txtAdd2.setText("");
        txtAdd3.setText("");
        txtCity.setText("");
        txtToRemarks.setText("");
        txtReturnDate.setText("");
        
        txtPacking.setText("");
        txtPurpose.setText("");
        txtDespatchMode.setText("");
        txtGrossWeight.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }
    
    private void Edit(){
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo=(String)ObjRGP.getAttribute("GATEPASS_NO").getObj();
        if(ObjRGP.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            chkLot.setEnabled(false);
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(12,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,582)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            String Gatepass_code=EITLERPGLOBAL.getCombostrCode(cmbGatepassType);
            cmdAdd.setEnabled(false);
            cmdInsertDecl.setEnabled(false);
            cmdInsertGatepass.setEnabled(false);
            cmdInsertRej.setEnabled(false);
            
            if(Gatepass_code.equals("GPR")) {
                cmdAdd.setEnabled(true);
                cmdInsertGatepass.setEnabled(true);
            }
            
            if(Gatepass_code.equals("RJN")) {
                cmdAdd.setEnabled(true);
                cmdInsertRej.setEnabled(true);
            }
            
            if(Gatepass_code.equals("DFO")) {
                cmdAdd.setEnabled(true);
                cmdInsertDecl.setEnabled(true);
            }
            
            if(Gatepass_code.equals("GEN")) {
                cmdAdd.setEnabled(true);
            }
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete(){
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        String lDocNo=(String)ObjRGP.getAttribute("GATEPASS_NO").getObj();
        
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(ObjRGP.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
                if(ObjRGP.Delete(EITLERPGLOBAL.gNewUserID)) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjRGP.LastError);
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
            }
        }
    }
    
    private void Save(){
        //Form level validations
        if(Validate()==false) {
            return; //Validation failed
        }
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjRGP.Insert(SelPrefix,SelNo)) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjRGP.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjRGP.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjRGP.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try
        {
        frmPA.RefreshView();
        }catch(Exception e){}
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find(){
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmRGPFind",true);
        frmRGPFind ObjReturn= (frmRGPFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjRGP.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
        
        
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        //Validates Item Entries
        if(TableL.getRowCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please enter at least one item");
            return false;
        }
        
        if(txtPartyName.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter party name or supplier code");
            return false;
        }
        
        if(txtCity.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter city");
            return false;
        }
        
        
        //Search in Table
        int ItemCol=DataModelL.getColFromVariable("ITEM_CODE");
        int RateCol=DataModelL.getColFromVariable("RATE");
        int QtyCol=DataModelL.getColFromVariable("QTY");
        int DescCol=DataModelL.getColFromVariable("RGP_DESC");
        
        //        int BOECol=DataModelL.getColFromVariable("BOE_NO");
        
        for(int i=0;i<TableL.getRowCount();i++) {
            String ItemID="";
            double Rate=0,Qty=0;
            
            if(TableL.getValueAt(i, ItemCol)!=null && TableL.getValueAt(i, RateCol)!=null && TableL.getValueAt(i, QtyCol)!=null) {
                ItemID=(String)TableL.getValueAt(i, ItemCol);
                Rate=Double.parseDouble((String)TableL.getValueAt(i,RateCol));
                Qty=Double.parseDouble((String)TableL.getValueAt(i,QtyCol));
                
                String Desc=((String)TableL.getValueAt(i,DescCol)).trim();
                
                if((clsItem.IsValidItemID(EITLERPGLOBAL.gCompanyID, ItemID)||!Desc.equals("")) && Qty>0) {
                    ValidEntryCount++;
                }
                else {
                    JOptionPane.showMessageDialog(null,"Item entry is not valid. Please be sure to enter following information. \nValid Item ID or Item Description,Quantity");
                    TableL.changeSelection(i, 1, false,false);
                    return false;
                }
                
            }
        }
        
        if(ValidEntryCount==0) {
            JOptionPane.showMessageDialog(null,"Item entry is not valid. Please verify");
            return false;
        }
        
        //Now Header level validations
        if(txtGatepassDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter gatepass Date");
            return false;
        }
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        /*if(!clsSupplier.IsValidSuppCode(EITLERPGLOBAL.gCompanyID,txtSuppCode.getText())) {
            JOptionPane.showMessageDialog(null,"Please enter valid supplier code");
            return false;
        }*/
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        //        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
        //        {
        //          JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
        //          return false;
        //        }
        
        
        return true;
    }
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
        DataModelL.ClearAllReadOnly();
        for(int i=0;i<TableL.getColumnCount();i++) {
            FieldName=DataModelL.getVariable(i);
            
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModelL.SetReadOnly(i);
            }
        }
        //=======================================================//
        
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjRGP.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND GATEPASS_NO='"+pDocNo+"'",pCompanyID);
        ObjRGP.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjRGP.Filter(" WHERE GATEPASS_NO IN (SELECT D_INV_RGP_HEADER.GATEPASS_NO FROM D_INV_RGP_HEADER,D_COM_DOC_DATA WHERE D_INV_RGP_HEADER.GATEPASS_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_RGP_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_RGP_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND D_COM_DOC_DATA.MODULE_ID=12)",EITLERPGLOBAL.gCompanyID);
        ObjRGP.MoveLast();
        DisplayData();
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    private void PreviewReport() {
        HashMap Params=new HashMap();
        
        if(chkCanceled.isSelected())
        {
         JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
         return;
        }
        
        Params.put("COMP_ID", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("RGP_NO",txtGatepassNo.getText());
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptRGP.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtGatepassNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
    
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptRgpA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtGatepassNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void GenerateUserCombo() {
        
        HashMap List=new HashMap();
        
        int SelDeptID=EITLERPGLOBAL.getComboCode(cmbDept);
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        
        List=clsDepartment.getDeptUsersList(EITLERPGLOBAL.gCompanyID, SelDeptID);
        for(int i=1;i<=List.size();i++) {
            clsDeptUsers ObjUser=(clsDeptUsers)List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        
    }
    
}
