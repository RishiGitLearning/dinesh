/*
 * EnterLotQty.java
 *
 * Created on May 12, 2004, 4:54 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  nrpithva
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Utils.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import EITLERP.Finance.UtilFunctions;


public class EnterMIRLotQty extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    
    public boolean Cancelled=true;
    public HashMap colLot=new HashMap();
    private JDialog aDialog;
    
    public String lMIRNo="";
    public int lMIRSrNo=0;
    public String lItemID="";
    public boolean Editdata=true;
    String cellLastValue="";
    public int lEditMode=0;
    
    public EnterMIRLotQty() {
        System.gc();
        initComponents();
    }
    
    /** Initializes the applet EnterLotQty */
    public void init() {
        System.gc();
        initComponents();
        GenerateGrid();
        if(Editdata) {
            cmdAdd.setEnabled(true);
            cmdRemove.setEnabled(true);
            cmdRead.setEnabled(true);
        } else {
            cmdAdd.setEnabled(false);
            cmdRemove.setEnabled(false);
            cmdRead.setEnabled(false);
        }
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmdRead = new javax.swing.JButton();
        lblColumnTotal = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Enter Lot no. and Qty");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 212, 15);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(6, 30, 662, 6);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdOK);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 46, 378, 210);

        cmdOK.setText("OK");
        cmdOK.setNextFocusableComponent(cmdCancel);
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        getContentPane().add(cmdOK);
        cmdOK.setBounds(418, 50, 80, 25);

        cmdCancel.setText("Cancel");
        cmdCancel.setNextFocusableComponent(cmdOK);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(418, 82, 79, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(Table);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        getContentPane().add(cmdAdd);
        cmdAdd.setBounds(10, 310, 80, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(Table);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        getContentPane().add(cmdRemove);
        cmdRemove.setBounds(100, 310, 90, 25);

        jLabel2.setText("Press Insert - to add new row, Delete - to delete row");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 340, 370, 15);

        cmdRead.setText("Read Weighing F5");
        cmdRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdReadActionPerformed(evt);
            }
        });

        getContentPane().add(cmdRead);
        cmdRead.setBounds(200, 310, 152, 25);

        lblColumnTotal.setText("...");
        getContentPane().add(lblColumnTotal);
        lblColumnTotal.setBounds(10, 260, 130, 15);

        lblStatus.setText("...");
        getContentPane().add(lblStatus);
        lblStatus.setBounds(10, 290, 370, 15);

    }//GEN-END:initComponents
    
    private void cmdReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdReadActionPerformed
        // TODO add your handling code here:
        try {
            if(Table.getRowCount()>0) {
                Table.setValueAt(SimpleRead.getWeight("COM1"), Table.getSelectedRow(), 2 );
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdReadActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        //        if(evt.getKeyCode()==155) //Insert Key Pressed
        //        {
        //            Object[] rowData=new Object[3];
        //            DataModel.addRow(rowData);
        //            UpdateSrNo();
        //            Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        //            Table.requestFocus();
        //        }
        
        
        if(evt.getKeyCode()==116)//F5 Key pressed
        {
            try {
                if(Table.getRowCount()>0) {
                    Table.setValueAt(SimpleRead.getWeight("COM1"), Table.getSelectedRow(), 2 );
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        
        //        if(evt.getKeyCode()==127) //Delete key pressed
        //        {
        //            if(Table.getRowCount()>0) {
        //                DataModel.removeRow(Table.getSelectedRow());
        //                UpdateSrNo();
        //            }
        //        }
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(Validate()) {
            SetLot();
            Cancelled=false;
            aDialog.dispose();
        }
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        DataModel.removeRow(Table.getSelectedRow());
        UpdateSrNo();
        //UpdateLOTNo();
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[6];
        rowData[0]="";
        rowData[1]="";
        rowData[2]="";
        rowData[3]="0.0";
        rowData[4]="0.0";
        rowData[5]="0.0";
        DataModel.addRow(rowData);
        UpdateSrNo();
        if(lEditMode==EITLERPGLOBAL.ADD) {
            UpdateLOTNo();
        }
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdRead;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblColumnTotal;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModel.addColumn("Sr."); //0
        DataModel.addColumn("Batch No.");//1
        DataModel.addColumn("Receipt No.");//2
        DataModel.addColumn("Lot Received Qty.");//3
        DataModel.addColumn("Lot Rejected Qty.");//4
        DataModel.addColumn("Lot Accepted Qty.");//5
        
        DataModel.SetVariable(0,"SR_NO");
        DataModel.SetVariable(1,"ITEM_LOT_NO");
        DataModel.SetVariable(2,"AUTO_LOT_NO");
        DataModel.SetVariable(3,"LOT_RECEIVED_QTY");
        DataModel.SetVariable(4,"LOT_REJECTED_QTY");
        DataModel.SetVariable(5,"LOT_ACCEPTED_QTY");
        
        DataModel.SetNumeric(3,true);
        DataModel.SetNumeric(4,true);
        DataModel.SetNumeric(5,true);
        DataModel.SetReadOnly(0);
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(5);
        
        Table.getColumnModel().getSelectionModel().addListSelectionListener(
        new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                try {
                    int last=Table.getSelectedColumn();
                    String strVar=DataModel.getVariable(last);
                    
                    //=============== Cell Editing Routine =======================//
                    try {
                        cellLastValue=(String)Table.getValueAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        
                        Table.editCellAt(Table.getSelectedRow(),Table.getSelectedColumn());
                        if(Table.getEditorComponent() instanceof JTextComponent) {
                            ((JTextComponent)Table.getEditorComponent()).selectAll();
                        }
                        
                        
                        //=========Display Column Total ===============//
                        double ColTotal=0;
                        for(int i=0;i<Table.getRowCount();i++) {
                            if(EITLERPGLOBAL.IsNumber(Table.getValueAt(i, last).toString())) {
                                ColTotal=ColTotal+Double.parseDouble(Table.getValueAt(i, last).toString());
                            }
                        }
                        lblColumnTotal.setText(Double.toString(EITLERPGLOBAL.round(ColTotal,3)));
                        //============================================//
                    }
                    catch(Exception cell){}
                    //============= Cell Editing Routine Ended =================//
                    
                    ShowMessage("Ready");
                    
                    if(strVar.equals("ITEM_LOT_NO")) {
                        ShowMessage("Enter item lot no if any.");
                    }
                    
                    if(strVar.equals("AUTO_LOT_NO")) {
                        ShowMessage("AUTO GENERATED LOT NO.");
                    }
                    
                    if(strVar.equals("LOT_RECEIVED_QTY")) {
                        ShowMessage("Enter received qty of current lot.");
                    }
                    
                    if(strVar.equals("LOT_REJECTED_QTY")) {
                        ShowMessage("Enter rejected qty of current lot.");
                    }
                    
                } catch(Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        
        Table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    
                    //=========== Cell Update Prevention Check ===========//
                    String curValue=(String)Table.getValueAt(Table.getSelectedRow(), e.getColumn());
                    if(curValue.equals(cellLastValue)) {
                        return;
                    }
                    //====================================================//
                    
                    //                    if(DoNotEvaluate) {
                    //                        return;
                    //                    }
                    
                    if(col==DataModel.getColFromVariable("LOT_RECEIVED_QTY")) {
                        double receivedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_RECEIVED_QTY", Table.getSelectedRow()));
                        double rejectedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_REJECTED_QTY", Table.getSelectedRow()));
                        double acceptedQty = receivedQty - rejectedQty;
                        DataModel.setValueByVariable("LOT_ACCEPTED_QTY",Double.toString(acceptedQty),Table.getSelectedRow());
                    }
                    
                    if(col==DataModel.getColFromVariable("LOT_REJECTED_QTY")) {
                        double receivedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_RECEIVED_QTY", Table.getSelectedRow()));
                        double rejectedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_REJECTED_QTY", Table.getSelectedRow()));
                        double acceptedQty = receivedQty - rejectedQty;
                        DataModel.setValueByVariable("LOT_ACCEPTED_QTY",Double.toString(acceptedQty),Table.getSelectedRow());
                    }
                }
            }
        });
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        if(Table.getRowCount()<0) {
            JOptionPane.showMessageDialog(this,"Please enter at least one record.");
            return false;
        }
        
        for(int i=0;i<Table.getRowCount();i++) {
            
            String BatchNo = DataModel.getValueByVariable("ITEM_LOT_NO",i);
            if(BatchNo.indexOf('/')!=-1 || BatchNo.indexOf('\\')!=-1) {
                JOptionPane.showMessageDialog(this,"Batch No can not contain / or \\ at serial no("+(i+1)+") ");
                return false;
            }
            for(int j=0;j<Table.getRowCount();j++) {
                if(j==i) {
                    continue;
                } else {
                    String newBatchNo = DataModel.getValueByVariable("ITEM_LOT_NO",j);
                    if(newBatchNo.equals(BatchNo)) {
                        JOptionPane.showMessageDialog(this,"Batch No can not be same at serial no("+(i+1)+") and serial no("+(j+1)+")");
                        return false;
                    }
                }
            }
            
            if(DataModel.getValueByVariable("ITEM_LOT_NO",i).equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter item lot no at serial no.="+(i+1));
                return false;
            }
            
            double ReceivedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_RECEIVED_QTY", i));
            if(ReceivedQty <= 0) {
                JOptionPane.showMessageDialog(this,"Received qty must be greater then zero at serial no.="+(i+1));
                return false;
            }
            
            double RejectedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_REJECTED_QTY", i));
            if(RejectedQty < 0) {
                JOptionPane.showMessageDialog(this,"Rejected qty must be either greater or equal to zero at serial no.="+(i+1));
                return false;
            }
            
            double AcceptedQty = Double.parseDouble(DataModel.getValueByVariable("LOT_ACCEPTED_QTY", i));
            if(AcceptedQty < 0) {
                JOptionPane.showMessageDialog(this,"Accepted qty can not less then zero at serial no.="+(i+1));
                return false;
            }
        }
        return true;
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private void GenerateGrid() {
        //Generates Grid from the
        FormatGrid();
        
        for(int i=1;i<=colLot.size();i++) {
            clsMIRRawItemDetail ObjLot=(clsMIRRawItemDetail)colLot.get(Integer.toString(i));
            Object[] rowData=new Object[6];
            
            rowData[0]=Integer.toString(ObjLot.getAttribute("SR_NO").getInt());
            rowData[1]=ObjLot.getAttribute("ITEM_LOT_NO").getString();
            rowData[2]=ObjLot.getAttribute("AUTO_LOT_NO").getString();
            rowData[3]=Double.toString(ObjLot.getAttribute("LOT_RECEIVED_QTY").getDouble());
            rowData[4]=Double.toString(ObjLot.getAttribute("LOT_REJECTED_QTY").getDouble());
            rowData[5]=Double.toString(ObjLot.getAttribute("LOT_ACCEPTED_QTY").getDouble());
            DataModel.addRow(rowData);
        }
        UpdateSrNo();
    }
    
    private void SetLot() {
        colLot.clear();
        int Counter=0;
        for(int i=0;i<Table.getRowCount();i++) {
            clsMIRRawItemDetail  ObjLot=new clsMIRRawItemDetail();
            Counter++;
            ObjLot.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            ObjLot.setAttribute("MIR_NO",lMIRNo);
            ObjLot.setAttribute("MIR_SR_NO",lMIRSrNo);
            ObjLot.setAttribute("SR_NO",Counter);
            ObjLot.setAttribute("ITEM_ID",lItemID);
            ObjLot.setAttribute("ITEM_LOT_NO",DataModel.getValueByVariable("ITEM_LOT_NO",i));
            ObjLot.setAttribute("AUTO_LOT_NO",DataModel.getValueByVariable("AUTO_LOT_NO",i));
            ObjLot.setAttribute("LOT_RECEIVED_QTY",Double.parseDouble(DataModel.getValueByVariable("LOT_RECEIVED_QTY",i)));
            ObjLot.setAttribute("LOT_REJECTED_QTY",Double.parseDouble(DataModel.getValueByVariable("LOT_REJECTED_QTY",i)));
            ObjLot.setAttribute("LOT_ACCEPTED_QTY",Double.parseDouble(DataModel.getValueByVariable("LOT_ACCEPTED_QTY",i)));
            //ObjLot.setAttribute("LOT_QTY",EITLERPGLOBAL.round(LotQty,3));
            
            colLot.put(Integer.toString(colLot.size()+1),ObjLot);
        }
    }
    
    
    public boolean ShowList() {
        try {
            GenerateGrid();
            setSize(530 ,370);
            Frame f=findParentFrame(this);
            aDialog=new JDialog(f,"MIR Lot Qty",true);
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            if(Editdata) {
                cmdAdd.setEnabled(true);
                cmdRemove.setEnabled(true);
                cmdRead.setEnabled(true);
            } else {
                cmdAdd.setEnabled(false);
                cmdRemove.setEnabled(false);
                cmdRead.setEnabled(false);
            }
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    private void UpdateSrNo() {
        for(int i=0;i<Table.getRowCount();i++) {
            Table.setValueAt(Integer.toString(i+1),i,0);
        }
    }
    
    private void UpdateLOTNo() {
        String newLotNo = "";
        if(lEditMode==EITLERPGLOBAL.ADD) {
            for(int i=0;i<Table.getRowCount();i++) {
                newLotNo = EnterMIRLotQty.getNextLOTNo(EITLERPGLOBAL.gCompanyID);
                DataModel.setValueByVariable("AUTO_LOT_NO", newLotNo,i);
            }
        } else {
            newLotNo = EnterMIRLotQty.getNextLOTNo(EITLERPGLOBAL.gCompanyID);
            DataModel.setValueByVariable("AUTO_LOT_NO", newLotNo,Table.getRowCount()-1);
        }
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    public static String getNextLOTNo(int CompanyID) {
        String newLotNo="";
        String Prefix ="";
        String URL = "";
        try {
            URL = clsFinYear.getDBURL(CompanyID,EITLERPGLOBAL.FinYearFrom);
            Prefix = Integer.toString(EITLERPGLOBAL.getCurrentFinYear()).substring(2,4);
            String strSQL="SELECT MAX(SUBSTRING(AUTO_LOT_NO,LENGTH('"+Prefix+"')+1)) AS MAX_NO FROM D_INV_MIR_LOT WHERE AUTO_LOT_NO LIKE '"+Prefix+"%' AND CANCELLED=0 ";
            int MaxNo=UtilFunctions.CInt(data.getStringValueFromDB(strSQL, URL))+1;
            String strMaxNo=Integer.toString(MaxNo);
            strMaxNo=EITLERPGLOBAL.Padding(strMaxNo,4,"0");
            newLotNo=Prefix+strMaxNo;
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        return newLotNo;
    }
    
    
    public static String getLastLotNo(int CompanyID) {
        String lastLotNo="";
        String Prefix ="";
        String URL = "";
        try {
            URL = clsFinYear.getDBURL(CompanyID,EITLERPGLOBAL.FinYearFrom);
            Prefix = Integer.toString(EITLERPGLOBAL.getCurrentFinYear()).substring(2,4);
            String strSQL="SELECT MAX(SUBSTRING(AUTO_LOT_NO,LENGTH('"+Prefix+"')+1)) AS MAX_NO FROM D_INV_MIR_LOT WHERE AUTO_LOT_NO LIKE '"+Prefix+"%' AND CANCELLED=0 ";
            int MaxNo=UtilFunctions.CInt(data.getStringValueFromDB(strSQL, URL));
            String strMaxNo=Integer.toString(MaxNo);
            strMaxNo=EITLERPGLOBAL.Padding(strMaxNo,4,"0");
            lastLotNo=Prefix+strMaxNo;
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        return lastLotNo;
    }
    
    public static String getNextLOTNo(int CompanyID, String LotNo) {
        String newLotNo="";
        String Prefix ="";
        try {
            Prefix = Integer.toString(EITLERPGLOBAL.getCurrentFinYear()).substring(2,4);
            int MaxNo=UtilFunctions.CInt(LotNo.substring(2))+1;
            String strMaxNo=Integer.toString(MaxNo);
            strMaxNo=EITLERPGLOBAL.Padding(strMaxNo,4,"0");
            newLotNo=Prefix+strMaxNo;
        }
        catch(Exception e) {
            e.printStackTrace();
        }
        return newLotNo;
    }
}
