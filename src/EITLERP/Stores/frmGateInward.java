/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  komal
 */

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import EITLERP.Utils.*;
import java.io.*;


public class frmGateInward extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsGateInward ObjGateInward;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbStatusModel;
    private EITLComboModel cmbForDeptModel;
    private EITLComboModel cmbBuyerModel;
    private EITLTableModel DataModelA;
    
    private EITLTableModel DataModel=new EITLTableModel();
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    public frmPendingApprovals frmPA;
    
    private EITLTableCellRenderer CellPainter=new EITLTableCellRenderer();
    
    private String OldFileName="";
    
    String cellLastValue="";
    
    /** Creates new form frmTemplate */
    public void init() {
        System.gc();
        setSize(665,570);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        // ((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        
        GenerateCombos();
        ObjGateInward=new clsGateInward();
        
        SetMenuForRights();
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjGateInward.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjGateInward.MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while loading data. Error is "+ObjGateInward.LastError);
            }
        }
        
        txtAuditRemarks.setVisible(false);
        DataModel.TableReadOnly(true);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtInwardNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtInwardDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        cmdNext1 = new javax.swing.JButton();
        lblRevNo = new javax.swing.JLabel();
        cmdRemarksBig = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSupplierCode = new javax.swing.JTextField();
        txtChalanNo = new javax.swing.JTextField();
        txtChalanDate = new javax.swing.JTextField();
        txtInvoiceDate = new javax.swing.JTextField();
        txtInvoiceNo = new javax.swing.JTextField();
        txtSupplierName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        OpjGeneral = new javax.swing.JRadioButton();
        OpjRawmaterial = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtSTMNo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSTMDate = new javax.swing.JTextField();
        OpjNone = new javax.swing.JRadioButton();
        chkforSTM = new javax.swing.JCheckBox();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        lblDocumentHistory = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        cmdPreviewA = new javax.swing.JButton();
        cmdShowRemarks = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("GATE INWARD");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab1FocusGained(evt);
            }
        });
        Tab1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tab1MouseClicked(evt);
            }
        });
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Inward No :");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(8, 30, 110, 15);

        txtInwardNo.setEditable(false);
        txtInwardNo.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtInwardNo.setNextFocusableComponent(txtInwardDate);
        Tab1.add(txtInwardNo);
        txtInwardNo.setBounds(120, 30, 104, 21);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(260, 30, 98, 15);

        txtInwardDate.setEditable(false);
        txtInwardDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtInwardDate.setName("REQ_DATE"); // NOI18N
        txtInwardDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInwardDateFocusGained(evt);
            }
        });
        Tab1.add(txtInwardDate);
        txtInwardDate.setBounds(370, 30, 102, 21);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Remarks :");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(10, 290, 110, 15);

        txtRemarks.setName("REMARKS"); // NOI18N
        txtRemarks.setEnabled(false);
        txtRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtRemarksFocusGained(evt);
            }
        });
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(120, 290, 366, 19);

        cmdNext1.setMnemonic('X');
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(530, 380, 102, 25);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(230, 30, 44, 15);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(490, 290, 33, 21);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Chalan No :");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel4);
        jLabel4.setBounds(8, 90, 110, 15);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Chalan Date :");
        Tab1.add(jLabel5);
        jLabel5.setBounds(260, 90, 98, 15);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Invoice No :");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(8, 120, 110, 15);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Invoice Date :");
        Tab1.add(jLabel11);
        jLabel11.setBounds(260, 120, 98, 15);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Supplier Code :");
        Tab1.add(jLabel12);
        jLabel12.setBounds(8, 60, 110, 15);

        txtSupplierCode.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtSupplierCode.setEnabled(false);
        txtSupplierCode.setName("REQ_DATE"); // NOI18N
        txtSupplierCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSupplierCodeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSupplierCodeFocusLost(evt);
            }
        });
        txtSupplierCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSupplierCodeKeyPressed(evt);
            }
        });
        Tab1.add(txtSupplierCode);
        txtSupplierCode.setBounds(120, 60, 102, 21);

        txtChalanNo.setName("REQ_DATE"); // NOI18N
        txtChalanNo.setEnabled(false);
        txtChalanNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtChalanNoFocusGained(evt);
            }
        });
        Tab1.add(txtChalanNo);
        txtChalanNo.setBounds(120, 90, 102, 19);

        txtChalanDate.setName("REQ_DATE"); // NOI18N
        txtChalanDate.setEnabled(false);
        txtChalanDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtChalanDateFocusGained(evt);
            }
        });
        Tab1.add(txtChalanDate);
        txtChalanDate.setBounds(370, 90, 102, 19);

        txtInvoiceDate.setName("REQ_DATE"); // NOI18N
        txtInvoiceDate.setEnabled(false);
        txtInvoiceDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceDateFocusGained(evt);
            }
        });
        Tab1.add(txtInvoiceDate);
        txtInvoiceDate.setBounds(370, 120, 102, 19);

        txtInvoiceNo.setName("REQ_DATE"); // NOI18N
        txtInvoiceNo.setEnabled(false);
        txtInvoiceNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtInvoiceNoFocusGained(evt);
            }
        });
        Tab1.add(txtInvoiceNo);
        txtInvoiceNo.setBounds(120, 120, 102, 19);

        txtSupplierName.setEditable(false);
        txtSupplierName.setBackground(new java.awt.Color(255, 255, 255));
        txtSupplierName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txtSupplierName.setEnabled(false);
        txtSupplierName.setName("REQ_DATE"); // NOI18N
        Tab1.add(txtSupplierName);
        txtSupplierName.setBounds(240, 60, 400, 21);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("TEST"); // NOI18N
        jPanel2.setEnabled(false);
        jPanel2.setLayout(null);

        jLabel9.setText("Select STM Type :");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(20, 10, 110, 15);

        buttonGroup2.add(OpjGeneral);
        OpjGeneral.setText("General");
        OpjGeneral.setEnabled(false);
        jPanel2.add(OpjGeneral);
        OpjGeneral.setBounds(140, 10, 81, 20);

        buttonGroup2.add(OpjRawmaterial);
        OpjRawmaterial.setText("Raw Material");
        OpjRawmaterial.setEnabled(false);
        jPanel2.add(OpjRawmaterial);
        OpjRawmaterial.setBounds(220, 10, 118, 20);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("STM No :");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(0, 40, 110, 15);

        txtSTMNo.setEnabled(false);
        txtSTMNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSTMNoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSTMNoFocusLost(evt);
            }
        });
        txtSTMNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSTMNoKeyPressed(evt);
            }
        });
        jPanel2.add(txtSTMNo);
        txtSTMNo.setBounds(130, 40, 100, 19);

        jLabel7.setText("STM Date :");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(270, 40, 76, 15);

        txtSTMDate.setEnabled(false);
        jPanel2.add(txtSTMDate);
        txtSTMDate.setBounds(340, 40, 100, 19);

        buttonGroup2.add(OpjNone);
        OpjNone.setText("None");
        OpjNone.setEnabled(false);
        jPanel2.add(OpjNone);
        OpjNone.setBounds(330, 10, 62, 20);

        Tab1.add(jPanel2);
        jPanel2.setBounds(40, 210, 560, 70);

        chkforSTM.setText("Use for STM");
        chkforSTM.setEnabled(false);
        chkforSTM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkforSTMItemStateChanged(evt);
            }
        });
        Tab1.add(chkforSTM);
        chkforSTM.setBounds(110, 170, 110, 23);

        Tab.addTab("Gate Inward Information", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tab2FocusGained(evt);
            }
        });
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setNextFocusableComponent(OpgApprove);
        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbHierarchyFocusGained(evt);
            }
        });
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 468, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(10, 120, 86, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.setNextFocusableComponent(OpgFinal);
        OpgApprove.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgApproveFocusGained(evt);
            }
        });
        OpgApprove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgApproveItemStateChanged(evt);
            }
        });
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 171, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.setNextFocusableComponent(OpgReject);
        OpgFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgFinalFocusGained(evt);
            }
        });
        OpgFinal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgFinalItemStateChanged(evt);
            }
        });
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.setNextFocusableComponent(OpgHold);
        OpgReject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgRejectItemStateChanged(evt);
            }
        });
        OpgReject.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgRejectFocusGained(evt);
            }
        });
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.setNextFocusableComponent(cmbSendTo);
        OpgHold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OpgHoldItemStateChanged(evt);
            }
        });
        OpgHold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OpgHoldFocusGained(evt);
            }
        });
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 232, 60, 15);

        cmbSendTo.setNextFocusableComponent(txtToRemarks);
        cmbSendTo.setEnabled(false);
        cmbSendTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbSendToFocusGained(evt);
            }
        });
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(88, 228, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setNextFocusableComponent(cmdBack2);
        txtToRemarks.setEnabled(false);
        txtToRemarks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtToRemarksFocusGained(evt);
            }
        });
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(90, 260, 516, 19);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(559, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 614, 144);

        lblDocumentHistory.setText("Document Update History");
        jPanel1.add(lblDocumentHistory);
        lblDocumentHistory.setBounds(13, 191, 182, 15);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(13, 207, 473, 148);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(498, 242, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(498, 273, 132, 24);

        cmdPreviewA.setText("Preview Report");
        cmdPreviewA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewAActionPerformed(evt);
            }
        });
        jPanel1.add(cmdPreviewA);
        cmdPreviewA.setBounds(498, 209, 132, 24);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 305, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 334, 129, 19);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 448);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(4, 517, 650, 22);
    }// </editor-fold>//GEN-END:initComponents
    
    private void chkforSTMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkforSTMItemStateChanged
        // TODO add your handling code here:
        if(EditMode!=0) {
            if(chkforSTM.isSelected()){
                jPanel2.setEnabled(true);
                OpjGeneral.setEnabled(true);
                OpjRawmaterial.setEnabled(true);
                OpjNone.setEnabled(true);
                txtSTMNo.setEnabled(true);
                txtSTMDate.setEnabled(true);
            }
            else{
                jPanel2.setEnabled(false);
                OpjGeneral.setEnabled(false);
                OpjRawmaterial.setEnabled(false);
                OpjNone.setEnabled(false);
                OpjNone.setSelected(true);
                txtSTMNo.setEnabled(false);
                txtSTMDate.setEnabled(false);
                txtSTMNo.setText("");
                txtSTMDate.setText("");
            }
        }
        
    }//GEN-LAST:event_chkforSTMItemStateChanged
    
    private void txtSTMNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSTMNoFocusLost
        // TODO add your handling code here:
        if(EITLERPGLOBAL.gCompanyID == 3) {
            txtSTMDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT STM_DATE FROM DINESHMILLS.D_INV_STM_HEADER WHERE STM_NO = '" + txtSTMNo.getText().trim() + "' ")));
            txtSupplierCode.setText("999999");
            txtSupplierName.setText(clsSupplier.getSupplierName(3,"999999"));
        }
        else {
            txtSTMDate.setText(EITLERPGLOBAL.formatDate(data.getStringValueFromDB("SELECT STM_DATE FROM DINESHMILLSA.D_INV_STM_HEADER WHERE STM_NO = '" + txtSTMNo.getText().trim() + "' ")));
            txtSupplierCode.setText("888888");
            txtSupplierName.setText(clsSupplier.getSupplierName(2,"888888"));
        }
        
    }//GEN-LAST:event_txtSTMNoFocusLost
    
    private void txtSTMNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSTMNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter STM NO.");
    }//GEN-LAST:event_txtSTMNoFocusGained
    
    private void txtSTMNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSTMNoKeyPressed
        // TODO add your handling code here:
        
        //=========== STM NO LIST ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            String Date="";
            String Type="";
            LOV aList=new LOV();
            if(OpjGeneral.isSelected()) {
                Date="2010-07-15";
                Type="1";
            }
            else if(OpjRawmaterial.isSelected()) {
                Date="2009-10-01";
                Type="2";
            }
            if(EITLERPGLOBAL.gCompanyID == 3) {
                aList.SQL="SELECT DISTINCT A.STM_NO,A.STM_DATE FROM DINESHMILLS.D_INV_STM_HEADER A,DINESHMILLS.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLSA.D_INV_GATE_INWARD_HEADER B) ";
            }
            else {
                if(EITLERPGLOBAL.gCompanyID == 2) {
                    aList.SQL="SELECT DISTINCT A.STM_NO,A.STM_DATE FROM DINESHMILLSA.D_INV_STM_HEADER A,DINESHMILLSA.D_INV_STM_DETAIL B "+
                    "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                    "AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLS.D_INV_GATE_INWARD_HEADER B) ";
                }
            }
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.SecondCol =2;
            
            if(aList.ShowLOV()) {
                txtSTMNo.setText(aList.ReturnVal);
                txtSTMDate.setText(aList.SecondVal);
                
                if(EITLERPGLOBAL.gCompanyID ==2) {
                    txtSupplierCode.setText("888888");
                    txtSupplierName.setText(clsSupplier.getSupplierName(2,"888888"));
                    //888888
                }else if(EITLERPGLOBAL.gCompanyID ==3) {
                    txtSupplierCode.setText("999999");
                    txtSupplierName.setText(clsSupplier.getSupplierName(3,"999999"));
                    //999999
                }
                
                
            }
        }
        //=========================================
    }//GEN-LAST:event_txtSTMNoKeyPressed
    
    private void txtSupplierCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSupplierCodeKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND BLOCKED='N' AND APPROVED=1 ORDER BY SUPP_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtSupplierCode.setText(aList.ReturnVal);
                txtSupplierName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
            
            String MSMEUAN=data.getStringValueFromDB("SELECT MSME_UAN FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+aList.ReturnVal+"'");
            if(!MSMEUAN.equals("")){
                if(!MSMEUAN.equals("N/A")){
                   JOptionPane.showMessageDialog(null, "This party "+aList.ReturnVal+" is MSME Party. Please proceed immediately");
             
                }
            }
            String MSMEDIC=data.getStringValueFromDB("SELECT MSME_DIC_NO FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+aList.ReturnVal+"'");
            if(!MSMEDIC.equals("")){
                if(!MSMEDIC.equals("N/A")){
                   JOptionPane.showMessageDialog(null, "This party "+aList.ReturnVal+" is MSME Party. Please proceed immediately");
             
                }
            }
            int MSME=data.getIntValueFromDB("SELECT MSME FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+aList.ReturnVal+"'");
            if(MSME==1){
                   JOptionPane.showMessageDialog(null, "This party "+aList.ReturnVal+" is MSME Party. Please proceed immediately");
             
            }
        }
        //=========================================
    }//GEN-LAST:event_txtSupplierCodeKeyPressed
    
    private void txtSupplierCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSupplierCodeFocusLost
        // TODO add your handling code here:
        if(!txtSupplierCode.getText().trim().equals("")) {
            txtSupplierName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSupplierCode.getText()));
        }
        
        //Special Addition
        if(txtSupplierCode.getText().trim().equals("000000")) {
            //Allow to enter party name
            txtSupplierName.setEnabled(true);
            txtSupplierName.requestFocus();
            txtSupplierName.selectAll();
        }
        else {
            txtSupplierName.setEnabled(false);
        }
    }//GEN-LAST:event_txtSupplierCodeFocusLost
    
    private void txtInvoiceNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Chalan No.");
    }//GEN-LAST:event_txtInvoiceNoFocusGained
    
    private void txtInvoiceDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInvoiceDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Invoice Date");
    }//GEN-LAST:event_txtInvoiceDateFocusGained
    
    private void txtChalanDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChalanDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Chalan Date");
    }//GEN-LAST:event_txtChalanDateFocusGained
    
    private void txtChalanNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChalanNoFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the Chalan No.");
    }//GEN-LAST:event_txtChalanNoFocusGained
    
    private void txtSupplierCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSupplierCodeFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter supplier id. Press F1 for the list of suppliers");
    }//GEN-LAST:event_txtSupplierCodeFocusGained
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
        
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPreviewAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewAActionPerformed
        // TODO add your handling code here:
        // PreviewAuditReport();
    }//GEN-LAST:event_cmdPreviewAActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjGateInward.LoadData(EITLERPGLOBAL.gCompanyID);
        MoveLast();
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtInwardNo.getText();
        ObjGateInward.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void Tab2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab2FocusGained
        // TODO add your handling code here:
        cmbHierarchy.requestFocus();
    }//GEN-LAST:event_Tab2FocusGained
    
    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed
    
    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed
    
    private void Tab1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tab1FocusGained
        // TODO add your handling code here:
        txtInwardDate.requestFocus();
    }//GEN-LAST:event_Tab1FocusGained
    
    private void txtToRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtToRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for next user");
    }//GEN-LAST:event_txtToRemarksFocusGained
    
    private void cmbSendToFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbSendToFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the user to whom document to be forwarded");
    }//GEN-LAST:event_cmbSendToFocusGained
    
    private void OpgHoldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgHoldFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgHoldFocusGained
    
    private void OpgRejectFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgRejectFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgRejectFocusGained
    
    private void OpgFinalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgFinalFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgFinalFocusGained
    
    private void OpgApproveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OpgApproveFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the approval action");
    }//GEN-LAST:event_OpgApproveFocusGained
    
    private void cmbHierarchyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbHierarchyFocusGained
        // TODO add your handling code here:
        ShowMessage("Select the hierarchy for approval");
    }//GEN-LAST:event_cmbHierarchyFocusGained
    
    private void txtRemarksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRemarksFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter the remarks for this document");
    }//GEN-LAST:event_txtRemarksFocusGained
    
    private void txtInwardDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInwardDateFocusGained
        // TODO add your handling code here:
        ShowMessage("Enter Gate Inward Date");
    }//GEN-LAST:event_txtInwardDateFocusGained
    
    private void Tab1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tab1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Tab1MouseClicked
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            OpgHold.setSelected(true);
        }
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        SetupApproval();
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            GenerateRejectedUserCombo();
            if(ApprovalFlow.IsOnceRejectedDoc(EITLERPGLOBAL.gCompanyID,clsGateInward.nModuleId,txtInwardNo.getText())) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
        }
        
        
        if(cmbSendTo.getItemCount()<=0) {
            GenerateFromCombo();
        }
        
        
        
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void OpgHoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgHoldItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgHoldItemStateChanged
    
    private void OpgRejectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgRejectItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_OpgRejectItemStateChanged
    
    private void OpgFinalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgFinalItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgFinalItemStateChanged
    
    private void OpgApproveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OpgApproveItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_OpgApproveItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjGateInward.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        // PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            Delete();
        }
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void UpdateSrNo() {
        int SrCol=DataModel.getColFromVariable("SR_NO");
    }
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        //Set Default Send to User
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JRadioButton OpjGeneral;
    private javax.swing.JRadioButton OpjNone;
    private javax.swing.JRadioButton OpjRawmaterial;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkforSTM;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPreviewA;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDocumentHistory;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtChalanDate;
    private javax.swing.JTextField txtChalanNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtInvoiceDate;
    private javax.swing.JTextField txtInvoiceNo;
    private javax.swing.JTextField txtInwardDate;
    private javax.swing.JTextField txtInwardNo;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtSTMDate;
    private javax.swing.JTextField txtSTMNo;
    private javax.swing.JTextField txtSupplierCode;
    private javax.swing.JTextField txtSupplierName;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    
    private void SetFields(boolean pStat) {
        
        txtInwardNo.setEnabled(pStat);
        txtInwardDate.setEnabled(pStat);
        txtChalanNo.setEnabled(pStat);
        txtChalanDate.setEnabled(pStat);
        txtInvoiceNo.setEnabled(pStat);
        txtInvoiceDate.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        txtSupplierCode.setEnabled(pStat);
        if(EditMode==0) {
            txtSTMNo.setEnabled(pStat);
            OpjGeneral.setEnabled(pStat);
            OpjRawmaterial.setEnabled(pStat);
            txtSTMDate.setEnabled(pStat);
            OpjNone.setEnabled(pStat);
        }
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        chkforSTM.setEnabled(pStat);
        SetupApproval();
        
    }
    
    private void ClearFields() {
        txtInwardNo.setText("");
        txtInwardDate.setText(EITLERPGLOBAL.getCurrentDate());
        txtSupplierCode.setText("");
        txtSupplierName.setText("");
        txtChalanNo.setText("");
        txtChalanDate.setText("");
        txtInvoiceNo.setText("");
        txtInvoiceDate.setText("");
        txtRemarks.setText("");
        txtFromRemarks.setText("");
        txtToRemarks.setText("");
        txtSTMNo.setText("");
        txtSTMDate.setText("");
        //FormatGrid();
        FormatGridA();
        FormatGridHS();
        
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjGateInward.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                    lblTitle.setForeground(Color.WHITE);
                }
                
                if(ObjGateInward.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjGateInward.getAttribute("CANCELED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=clsGateInward.nModuleId;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        
        ClearFields();
        txtInwardNo.setText((String)ObjGateInward.getAttribute("INWARD_NO").getObj());
        lblTitle.setText("GATE INWARD - "+txtInwardNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjGateInward.getAttribute("REVISION_NO").getVal()));
        txtInwardDate.setText(EITLERPGLOBAL.formatDate((String)ObjGateInward.getAttribute("INWARD_DATE").getObj()));
        txtSupplierCode.setText((String)ObjGateInward.getAttribute("SUPPLIER_CODE").getObj());
        txtSupplierName.setText(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID, txtSupplierCode.getText().trim()));
        txtChalanNo.setText((String)ObjGateInward.getAttribute("CHALAN_NO").getObj());
        txtChalanDate.setText(EITLERPGLOBAL.formatDate((String)ObjGateInward.getAttribute("CHALAN_DATE").getObj()));
        txtInvoiceNo.setText((String)ObjGateInward.getAttribute("INVOICE_NO").getObj());
        txtInvoiceDate.setText(EITLERPGLOBAL.formatDate((String)ObjGateInward.getAttribute("INVOICE_DATE").getObj()));
        txtRemarks.setText((String)ObjGateInward.getAttribute("REMARKS").getObj());
        if(!ObjGateInward.getAttribute("STM_NO").getString().equals("")) {
            chkforSTM.setSelected(true);
        } else {
            chkforSTM.setSelected(false);
        }
        txtSTMNo.setText((String)ObjGateInward.getAttribute("STM_NO").getObj());
        txtSTMDate.setText(EITLERPGLOBAL.formatDate((String)ObjGateInward.getAttribute("STM_DATE").getObj()));
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjGateInward.getAttribute("HIERARCHY_ID").getVal());
        
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=(String)ObjGateInward.getAttribute("INWARD_NO").getObj();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId, DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsGateInward.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsGateInward ObjHistory=(clsGateInward)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        
        //DisplayIndicators();
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjGateInward.setAttribute("PREFIX",SelPrefix);
        ObjGateInward.setAttribute("FFNO",FFNo);
        ObjGateInward.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjGateInward.setAttribute("INWARD_DATE",EITLERPGLOBAL.formatDateDB(txtInwardDate.getText()));
        if(!txtSTMNo.getText().trim().equals("")) {
            if(EITLERPGLOBAL.gCompanyID ==2) {
                txtSupplierCode.setText("888888");
                txtSupplierName.setText(clsSupplier.getSupplierName(2,"888888"));
                
            } else {
                if(EITLERPGLOBAL.gCompanyID ==3) {
                    txtSupplierCode.setText("999999");
                    txtSupplierName.setText(clsSupplier.getSupplierName(2,"999999"));
                    
                }
            }
        }
        ObjGateInward.setAttribute("SUPPLIER_CODE",txtSupplierCode.getText().trim());
        ObjGateInward.setAttribute("CHALAN_NO",txtChalanNo.getText().trim());
        ObjGateInward.setAttribute("CHALAN_DATE",EITLERPGLOBAL.formatDateDB(txtChalanDate.getText()));
        ObjGateInward.setAttribute("INVOICE_NO",txtInvoiceNo.getText().trim());
        ObjGateInward.setAttribute("INVOICE_DATE",EITLERPGLOBAL.formatDateDB(txtInvoiceDate.getText()));
        ObjGateInward.setAttribute("REMARKS",txtRemarks.getText());
        
        ObjGateInward.setAttribute("STM_NO",txtSTMNo.getText().trim());
        ObjGateInward.setAttribute("STM_DATE",EITLERPGLOBAL.formatDateDB(txtSTMDate.getText().trim()));
        
        //ObjGateInward.setAttribute("CANCELLED",chkCancelled.isSelected());
        
        //----- Update Approval Specific Fields -----------//
        ObjGateInward.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjGateInward.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjGateInward.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjGateInward.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjGateInward.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjGateInward.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjGateInward.setAttribute("APPROVAL_STATUS","R");
            ObjGateInward.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjGateInward.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjGateInward.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjGateInward.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjGateInward.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjGateInward.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ clsGateInward.nModuleId +" ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ clsGateInward.nModuleId +" ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId ,(String)ObjGateInward.getAttribute("INWARD_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    
    private void SetupApproval() {
        // --- Hierarchy Change Rights Check --------
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1097)) {
            cmbHierarchy.setEnabled(true);
        }
        else {
            cmbHierarchy.setEnabled(false);
        }
        
        //Set Default Hierarchy ID for User
        int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            lnFromID=(int)EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        }
        else {
            
            int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId ,(String)ObjGateInward.getAttribute("INWARD_NO").getObj());
            lnFromID=FromUserID;
            String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,clsGateInward.nModuleId ,FromUserID,(String)ObjGateInward.getAttribute("INWARD_NO").getObj());
            
            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }
        
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
        
        //In Edit Mode Hierarchy Should be disabled
        if(EditMode==EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }
        
        if(EditMode==0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1097)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
        /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,72)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10973)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,10974)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
        
        cmdPreview.setEnabled(true);
    }
    
    private void Add() {
        
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=clsGateInward.nModuleId ;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            chkforSTM.setSelected(false);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtInwardNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId , FFNo,  false));
            txtInwardDate.requestFocus();
            
            lblTitle.setText("GATE INWARD - "+txtInwardNo.getText());
            lblTitle.setBackground(Color.BLUE);
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        OpgFinal.setSelected(true);
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjGateInward.getAttribute("INWARD_NO").getObj();
        if(ObjGateInward.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            EditMode=EITLERPGLOBAL.EDIT;
            
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(clsGateInward.nModuleId ,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,1097)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            DisableToolbar();
            txtInwardDate.requestFocus();
            
            String MSMEUAN=data.getStringValueFromDB("SELECT MSME_UAN FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"'");
            if(!MSMEUAN.equals("")){
                if(!MSMEUAN.equals("N/A")){
                   JOptionPane.showMessageDialog(null, "This party "+txtSupplierCode.getText()+" is MSME Party. Please proceed immediately");
             
                }
            }
            String MSMEDIC=data.getStringValueFromDB("SELECT MSME_DIC_NO FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"'");
            if(!MSMEDIC.equals("")){
                if(!MSMEDIC.equals("N/A")){
                   JOptionPane.showMessageDialog(null, "This party "+txtSupplierCode.getText()+" is MSME Party. Please proceed immediately");
             
                }
            }
            int MSME=data.getIntValueFromDB("SELECT MSME FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"'");
            if(MSME==1){
                   JOptionPane.showMessageDialog(null, "This party "+txtSupplierCode.getText()+" is MSME Party. Please proceed immediately");
             
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjGateInward.getAttribute("INWARD_NO").getObj();
        
        if(ObjGateInward.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(ObjGateInward.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while deleting. Error is "+ObjGateInward.LastError);
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
    
    private boolean Validate() {
        //Form level validations
        if(txtInwardDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter inward date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtInwardDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Inward Date in DD/MM/YYYY format.");
            return false;
        }
        /*
        if(txtSupplierCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter supplier code");
            return false;
        }
         
        if (txtChalanNo.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Chalan No.");
            return false;
        }
         
        if(clsSupplier.IsSupplierExist(EITLERPGLOBAL.gCompanyID,txtSupplierCode.getText())) {
            JOptionPane.showMessageDialog(null,"Please Enter valid Supplier Code.");
            return false;
        }
         
        if(txtSupplierCode.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Enter valid Supplier Code.");
            return false;
        }
         
        if(!txtSTMNo.getText().trim().equals("")) {
            if(EITLERPGLOBAL.gCompanyID==2) {
                if(!clsSTMRaw.IsApprovedDoc(3,txtSTMNo.getText())) {
                    JOptionPane.showMessageDialog(null,"Please Enter STM No.");
                    return false;
                }
            }
        }
         if(txtChalanDate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter Chalan Date");
            return false;
        } else if(!EITLERPGLOBAL.isDate(txtChalanDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Chalan Date in DD/MM/YYYY format.");
            return false;
        }*/
        
        
        //CHANGED BY MUFFY
        
        String Date="";
        String Type="";
        if(OpjGeneral.isSelected()) {
            Date="2010-07-15";
            Type="1";
        }
        else if(OpjRawmaterial.isSelected()) {
            Date="2009-10-01";
            Type="2";
        }
        if(!txtSTMNo.getText().trim().equals("")) {
            if(txtSTMNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter STM NO");
                return false;
            }
            if(EITLERPGLOBAL.gCompanyID==2) {
                /*if(!clsSTMRaw.IsApprovedDoc(3,txtSTMNo.getText().trim()) ) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM NO");
                    return false;
                }*/
                if(txtSupplierCode.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null,"Please enter Supplier Id");
                    return false;
                }
                if(EITLERPGLOBAL.gCompanyID==2) {
                    if(!txtSupplierCode.getText().trim().equals("888888")) {
                        JOptionPane.showMessageDialog(null,"Please enter Valid Supplier Id");
                        return false;
                    }
                }
                
                int i = data.getIntValueFromDB("SELECT COUNT(*) AS TOTAL FROM DINESHMILLSA.D_INV_STM_HEADER A,DINESHMILLSA.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO = '" + txtSTMNo.getText().trim() + "' AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLSA.D_INV_GATE_INWARD_HEADER B) ");
                if(i==0) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM No");
                    return false;
                }
                
                
            } else if (EITLERPGLOBAL.gCompanyID==3){
                /*if(!clsSTMRaw.IsApprovedDoc(2,txtSTMNo.getText()) ) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM NO");
                    return false;
                }*/
                
                if(txtSupplierCode.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(null,"Please enter Supplier Id");
                    return false;
                }
                
                if(!txtSupplierCode.getText().trim().equals("999999")) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid Supplier Id");
                    return false;
                }
                
                
                /*Below code block is commented by vivek on 10/03/2014 due to Ankleshwar gate inward entry problem of stm no RM00012.
                int i = data.getIntValueFromDB("SELECT COUNT(*) AS TOTAL FROM DINESHMILLS.D_INV_STM_HEADER A,DINESHMILLS.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO = '" + txtSTMNo.getText().trim() + "' AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLS.D_INV_GATE_INWARD_HEADER B) ");
                if(i==0) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM No");
                    return false;
                }
                 */
                
                //new code for code block commented by vivek on 10/03/2014. start
                int i = data.getIntValueFromDB("SELECT COUNT(*) AS TOTAL FROM DINESHMILLS.D_INV_STM_HEADER A,DINESHMILLS.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO = '" + txtSTMNo.getText().trim() + "' AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLSA.D_INV_GATE_INWARD_HEADER B) ");
                if(i==0) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM No");
                    return false;
                }
                // new code end
            }
            
            if(EITLERPGLOBAL.gCompanyID==2) {
                int i = data.getIntValueFromDB("SELECT COUNT(*) AS TOTAL FROM DINESHMILLSA.D_INV_STM_HEADER A,DINESHMILLSA.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLSA.D_INV_GATE_INWARD_HEADER B) ");
                if(i==0) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM No");
                    return false;
                }
            }
            
            /* Below code is commented by vivek on 10/03/2014 due to Ankleshwar gate inward entry problem of stm no RM00012.
                if(EITLERPGLOBAL.gCompanyID==3) {
                int i = data.getIntValueFromDB("SELECT COUNT(*) AS TOTAL FROM DINESHMILLS.D_INV_STM_HEADER A,DINESHMILLS.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLS.D_INV_GATE_INWARD_HEADER B) ");
                if(i==0) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM No");
                    return false;
                }
             }
             */
            
            //new code for code block commented by vivek on 10/03/2014. start
            if(EITLERPGLOBAL.gCompanyID==3) {
                int i = data.getIntValueFromDB("SELECT COUNT(*) AS TOTAL FROM DINESHMILLS.D_INV_STM_HEADER A,DINESHMILLS.D_INV_STM_DETAIL B "+
                "WHERE A.STM_NO = B.STM_NO AND B.ITEM_ID NOT LIKE 'RM3%' AND A.STM_DATE >='" + Date + "' AND A.APPROVED =1 AND A.CANCELLED = 0 AND A.STM_TYPE = '" + Type + "' "+
                "AND A.STM_NO NOT IN (SELECT B.STM_NO FROM DINESHMILLSA.D_INV_GATE_INWARD_HEADER B) ");
                if(i==0) {
                    JOptionPane.showMessageDialog(null,"Please enter Valid STM No");
                    return false;
                }
            }
            // new code end
            
        } else {
            if(txtSupplierCode.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter supplier code");
                return false;
            }
            
            if (txtChalanNo.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null,"Please enter Chalan No.");
                return false;
            }
            
            if(!clsSupplier.IsSupplierExist(EITLERPGLOBAL.gCompanyID,txtSupplierCode.getText())) {
                JOptionPane.showMessageDialog(null,"Please Enter valid Supplier Code.");
                return false;
            }
        }
        
        if (!txtChalanDate.getText().trim().equals("")) {
            if(!EITLERPGLOBAL.isDate(txtChalanDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid Chalan Date in DD/MM/YYYY format.");
                return false;
            }
        }
        
        if (!txtInvoiceDate.getText().trim().equals("")) {
            if(!EITLERPGLOBAL.isDate(txtInvoiceDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid Invoice Date in DD/MM/YYYY format.");
                return false;
            }
        }
        
        /*if(!txtInvoiceDate.getText().trim().equals("")) {
            if(!EITLERPGLOBAL.isDate(txtInvoiceDate.getText())) {
                JOptionPane.showMessageDialog(null,"Invalid Invoice Date");
                return false;
            }
        }*/
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return false;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return false;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return false;
        }
        
        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0) {
            JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
            return false;
        }
        
        return true;
    }
    
    private void Save() {
        if (!txtSupplierCode.getText().trim().equals("")) {
            String MSMEUAN=data.getStringValueFromDB("SELECT MSME_UAN FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"'");
            if(!MSMEUAN.equals("")){
                if(!MSMEUAN.equals("N/A")){
                   JOptionPane.showMessageDialog(null, "This party "+txtSupplierCode.getText()+" is MSME Party. Please proceed immediately");
             
                }
            }
            String MSMEDIC=data.getStringValueFromDB("SELECT MSME_DIC_NO FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"'");
            if(!MSMEDIC.equals("")){
                if(!MSMEDIC.equals("N/A")){
                   JOptionPane.showMessageDialog(null, "This party "+txtSupplierCode.getText()+" is MSME Party. Please proceed immediately");
             
                }
            }
            int MSME=data.getIntValueFromDB("SELECT MSME FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+txtSupplierCode.getText()+"'");
            if(MSME==1){
                   JOptionPane.showMessageDialog(null, "This party "+txtSupplierCode.getText()+" is MSME Party. Please proceed immediately");
             
            }
         }
        
        
        if ( ! Validate()) {
            return;
        }
        //set supplier code if STm no is inserted
       /*
        */
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjGateInward.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjGateInward.LastError);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjGateInward.Update()) {
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjGateInward.LastError);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.Stores.frmGateInwardFind",true);
        frmGateInwardFind ObjReturn= (frmGateInwardFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjGateInward.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
    }
    
    private void MoveFirst() {
        ObjGateInward.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjGateInward.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjGateInward.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjGateInward.MoveLast();
        DisplayData();
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjGateInward.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND INWARD_NO='"+pDocNo+"'",pCompanyID);
        ObjGateInward.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjGateInward.Filter(" WHERE INWARD_NO IN (SELECT D_INV_GATE_INWARD_HEADER.INWARD_NO FROM D_INV_GATE_INWARD_HEADER,D_COM_DOC_DATA WHERE D_INV_GATE_INWARD_HEADER.INWARD_NO=D_COM_DOC_DATA.DOC_NO AND D_INV_GATE_INWARD_HEADER.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_INV_GATE_INWARD_HEADER.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND MODULE_ID="+clsGateInward.nModuleId +")",EITLERPGLOBAL.gCompanyID);
        ObjGateInward.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        //=============== Setting Table Fields ==================//
/*        DataModel.ClearAllReadOnly();
        for(int i=0;i<Table.getColumnCount();i++) {
            FieldName=DataModel.getVariable(i);
 
            if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "L", FieldName)) {
                //Do Nothing
            }
            else {
                DataModel.SetReadOnly(i);
            }
        }*/
        //=======================================================//
        
    }
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    /*
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptMaterialREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
     */
    private void GenerateRejectedUserCombo() {
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId , txtInwardNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId , txtInwardNo.getText(), (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, clsGateInward.nModuleId ,txtInwardNo.getText());
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    /*
    private void DisplayIndicators() {
        CellPainter=new EITLTableCellRenderer();
        CellPainter.removeBackColors();
        CellPainter.removeForeColors();
     
        Table.getColumnModel().getColumn(1).setCellRenderer(CellPainter);
     
        for(int i=0;i<Table.getRowCount();i++) {
     
            String ItemDesc=(String)Table.getValueAt(i,1);
     
            if(Approval.equals("M")) {
                CellPainter.setBackColor(i,1, Color.BLUE);
                CellPainter.setForeColor(i,1,Color.WHITE);
            }
     
            if(Approval.equals("E")) {
                CellPainter.setBackColor(i,1, Color.YELLOW);
                CellPainter.setForeColor(i,1, Color.BLACK);
            }
     
        }
     
    }
     */
    
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    /*
     
        private void PreviewReport() {
        HashMap Params=new HashMap();
     
        if(chkCancelled.isSelected())
        {
         JOptionPane.showMessageDialog(null,"You cannot take printout of cancelled document");
         return;
        }
     
     
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptPR.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
     */
}
