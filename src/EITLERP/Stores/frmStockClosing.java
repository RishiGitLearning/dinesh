/*
 * frmStockClosing.java
 *
 * Created on November 22, 2005, 4:39 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  root
 */

import javax.swing.*;
import java.awt.*;
import EITLERP.*;
import java.sql.*;

public class frmStockClosing extends javax.swing.JApplet {
    
    private EITLTableModel DataModel=new EITLTableModel();
    
    /** Initializes the applet frmStockClosing */
    public void init() {
        setSize(510,474);
        initComponents();
        FormatGrid();
        GenerateGrid();
        
        if(EITLERPGLOBAL.gUserID!=1 && EITLERPGLOBAL.gUserID!=98) {
            cmdClose.setEnabled(false);
            cmdUpdate.setEnabled(false);
        }
        //======= Find closing from date =================//
        try{
            ResultSet rsTmp=data.getResult("SELECT ENTRY_NO,ENTRY_DATE FROM D_COM_OPENING_STOCK_HEADER ORDER BY ENTRY_DATE DESC");
            rsTmp.first();
            if(rsTmp.getRow()>0) {
                String StockEntryDate=rsTmp.getString("ENTRY_DATE");
                txtFromDate.setText(EITLERPGLOBAL.formatDate(StockEntryDate));
            }
        } catch(Exception e) {
        }
        //================================================================//
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdRemove = new javax.swing.JButton();
        txtExit = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        cmdClose = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtItemID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtClosingValue = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtNewValue = new javax.swing.JTextField();
        cmdUpdate = new javax.swing.JButton();

        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setText("MANAGE CLOSING STOCK");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(9, 7, 179, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-2, 0, 502, 28);

        jLabel2.setText("Closing Stocks");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(4, 31, 103, 18);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(7, 55, 483, 145);

        cmdRemove.setText("Remove Closing Stock");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        getContentPane().add(cmdRemove);
        cmdRemove.setBounds(8, 205, 192, 25);

        txtExit.setText("Exit");
        txtExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExitActionPerformed(evt);
            }
        });

        getContentPane().add(txtExit);
        txtExit.setBounds(372, 425, 113, 25);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        jLabel3.setText("Create Closing Entry");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(18, 16, 136, 15);

        jLabel4.setText("From Date :");
        jPanel3.add(jLabel4);
        jLabel4.setBounds(17, 52, 76, 15);

        txtFromDate.setEditable(false);
        txtFromDate.setEnabled(false);
        jPanel3.add(txtFromDate);
        txtFromDate.setBounds(93, 50, 117, 21);

        jLabel5.setText("To Date :");
        jPanel3.add(jLabel5);
        jLabel5.setBounds(231, 53, 62, 15);

        jPanel3.add(txtToDate);
        txtToDate.setBounds(297, 51, 117, 21);

        cmdClose.setText("Close Stock");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        jPanel3.add(cmdClose);
        cmdClose.setBounds(360, 114, 113, 24);

        jTabbedPane1.addTab("Closing Stock", jPanel3);

        jPanel4.setLayout(null);

        jPanel4.setBorder(new javax.swing.border.EtchedBorder());
        jLabel6.setText("Give effect on closing value as on :");
        jPanel4.add(jLabel6);
        jLabel6.setBounds(15, 9, 222, 18);

        lblDate.setText("-");
        jPanel4.add(lblDate);
        lblDate.setBounds(243, 11, 175, 15);

        jLabel8.setText("Item ID :");
        jPanel4.add(jLabel8);
        jLabel8.setBounds(58, 46, 61, 15);

        txtItemID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDFocusLost(evt);
            }
        });
        txtItemID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDKeyPressed(evt);
            }
        });

        jPanel4.add(txtItemID);
        txtItemID.setBounds(121, 43, 129, 20);

        jLabel9.setText("Closing Value :");
        jPanel4.add(jLabel9);
        jLabel9.setBounds(15, 75, 102, 15);

        txtClosingValue.setEditable(false);
        jPanel4.add(txtClosingValue);
        txtClosingValue.setBounds(120, 73, 129, 20);

        jLabel10.setText("New Value :");
        jPanel4.add(jLabel10);
        jLabel10.setBounds(37, 104, 80, 15);

        jPanel4.add(txtNewValue);
        txtNewValue.setBounds(121, 101, 129, 20);

        cmdUpdate.setText("Update Value");
        cmdUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUpdateActionPerformed(evt);
            }
        });

        jPanel4.add(cmdUpdate);
        cmdUpdate.setBounds(338, 114, 131, 25);

        jTabbedPane1.addTab("Write Off Value", jPanel4);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(9, 243, 485, 176);

    }//GEN-END:initComponents
    
    private void txtExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExitActionPerformed
        // TODO add your handling code here:
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_txtExitActionPerformed
    
    private void cmdUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUpdateActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()<=0) {
            return;
        }
        
        if(Table.getSelectedRow()<0) {
            return;
        }
        
        try {
            int EntryNo=Integer.parseInt((String)Table.getValueAt(Table.getSelectedRow(),0));
            String ItemID=txtItemID.getText();
            
            if(EITLERPGLOBAL.IsNumber(txtNewValue.getText())) {
                double NewValue=Double.parseDouble(txtNewValue.getText());
                
                data.Execute("UPDATE D_COM_OPENING_STOCK_DETAIL SET ORIGINAL_VALUE=OPENING_VALUE,OPENING_VALUE="+NewValue+",CHANGED=1,CHANGED_DATE=CURDATE() WHERE ENTRY_NO="+EntryNo+" AND ITEM_ID="+ItemID);
            }
            else {
                JOptionPane.showMessageDialog(null,"Please enter number in new value");
            }
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdUpdateActionPerformed
    
    private void txtItemIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDFocusLost
        // TODO add your handling code here:
        
        if(Table.getRowCount()<=0) {
            return;
        }
        
        if(Table.getSelectedRow()<0) {
            return;
        }
        
        try {
            int EntryNo=Integer.parseInt((String)Table.getValueAt(Table.getSelectedRow(),0));
            String ItemID=txtItemID.getText();
            
            
            // '' Retrive Original Stock Value '' //
            ResultSet rsTmp=data.getResult("SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE ENTRY_NO="+EntryNo+" AND ITEM_ID='"+ItemID+"'");
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                txtClosingValue.setText(Double.toString(rsTmp.getDouble("OPENING_VALUE")));
            }
            
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_txtItemIDFocusLost
    
    private void txtItemIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList = new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemID.setText(aList.ReturnVal);
            }
        }
        
    }//GEN-LAST:event_txtItemIDKeyPressed
    
    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        if(Table.getRowCount()>0) {
            lblDate.setText((String)Table.getValueAt(Table.getSelectedRow(),1));
        }
    }//GEN-LAST:event_TableMouseClicked
    
    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
        // TODO add your handling code here:
        try {
            
            if(!Validate()) {
                return;
            }
            //(new clsItemStock()).CloseStockTemp(EITLERPGLOBAL.formatDateDB(txtFromDate.getText()),EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
            (new clsItemStock()).CloseStockGen(EITLERPGLOBAL.formatDateDB(txtFromDate.getText()),EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
            (new clsItemStock()).CloseStockRaw(EITLERPGLOBAL.formatDateDB(txtFromDate.getText()),EITLERPGLOBAL.formatDateDB(txtToDate.getText()));
            //(new clsItemStock()).CloseStockRemove();
            data.Execute("UPDATE D_COM_OPENING_STOCK_HEADER SET STATUS=1 ", clsFinYear.getDBURL(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.FinYearFrom));
            JOptionPane.showMessageDialog(this,"Processing completed");
            GenerateGrid();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }//GEN-LAST:event_cmdCloseActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete records of selected closing ?","Confirmation",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
            if(Table.getRowCount()>0) {
                int EntryNo=Integer.parseInt((String)Table.getValueAt(Table.getSelectedRow(), 0));
                data.Execute("DELETE FROM D_COM_OPENING_STOCK_HEADER WHERE ENTRY_NO="+EntryNo);
                data.Execute("DELETE FROM D_COM_OPENING_STOCK_DETAIL WHERE ENTRY_NO="+EntryNo);
                GenerateGrid();
            }
        }
        
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JTextField txtClosingValue;
    private javax.swing.JButton txtExit;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtItemID;
    private javax.swing.JTextField txtNewValue;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
    
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModel.addColumn("Sr No.");
        DataModel.addColumn("Closing Date");
        DataModel.addColumn("Status");
        DataModel.TableReadOnly(true);
    }
    
    
    private void GenerateGrid() {
        try {
            FormatGrid();
            ResultSet rsTmp=data.getResult("SELECT * FROM D_COM_OPENING_STOCK_HEADER ORDER BY ENTRY_DATE");
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    int EntryNo=rsTmp.getInt("ENTRY_NO");
                    String EntryDate=EITLERPGLOBAL.formatDate(rsTmp.getString("ENTRY_DATE"));
                    int Status = rsTmp.getInt("STATUS");
                    Object[] rowData=new Object[3];
                    rowData[0]=Integer.toString(EntryNo);
                    rowData[1]=EntryDate;
                    if(Status==1) {
                        rowData[2]="Close";
                    } else {
                        rowData[2]="Open";
                    }
                    DataModel.addRow(rowData);
                    rsTmp.next();
                }
            }
        } catch(Exception e) {
        }
    }
    
    private boolean Validate() {
        boolean Found = false;
        try {
            if(txtToDate.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this,"Please enter TO date.");
                return false;
            }
            
            if(!EITLERPGLOBAL.isDate(txtFromDate.getText())) {
                JOptionPane.showMessageDialog(this,"Please enter valid from date");
                return false;
            }
            
            if(!EITLERPGLOBAL.isDate(txtToDate.getText())) {
                JOptionPane.showMessageDialog(this,"Please enter valid to date");
                return false;
            }
            
            String FromDate = EITLERPGLOBAL.formatDateDB(txtFromDate.getText().trim());
            String ToDate = EITLERPGLOBAL.formatDateDB(txtToDate.getText().trim());
            String SQL = "SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE GRN_DATE>='"+FromDate+"' AND GRN_DATE<='"+ToDate+"' " +
            "AND APPROVED=0 AND CANCELLED=0 AND GRN_NO NOT LIKE 'M%' ";
            ResultSet rsData = data.getResult(SQL,EITLERPGLOBAL.DatabaseURL);
            rsData.first();
            if(rsData.getRow()>0) {
                while(!rsData.isAfterLast()) {
                    String GRNNo = rsData.getString("GRN_NO");
                    JOptionPane.showMessageDialog(this,"GRN NO. : " + GRNNo + " is pending for approval.");
                    Found = true;
                    rsData.next();
                }
            }
            SQL = "SELECT ISSUE_NO FROM D_INV_ISSUE_HEADER WHERE ISSUE_DATE>='"+FromDate+"' AND ISSUE_DATE<='"+ToDate+"' " +
            "AND APPROVED=0 AND CANCELED=0 ";
            rsData = data.getResult(SQL,EITLERPGLOBAL.DatabaseURL);
            rsData.first();
            if(rsData.getRow()>0) {
                while(!rsData.isAfterLast()) {
                    String IssueNo = rsData.getString("ISSUE_NO");
                    JOptionPane.showMessageDialog(this,"ISSUE NO. : " + IssueNo +" is pending for approval.");
                    Found = true;
                    rsData.next();
                }
            }
            
            SQL = "SELECT STM_NO FROM D_INV_STM_HEADER WHERE STM_DATE>='"+FromDate+"' AND STM_DATE<='"+ToDate+"' " +
            "AND APPROVED=0 AND CANCELLED=0 ";
            rsData = data.getResult(SQL,EITLERPGLOBAL.DatabaseURL);
            rsData.first();
            if(rsData.getRow()>0) {
                while(!rsData.isAfterLast()) {
                    String StmNo = rsData.getString("STM_NO");
                    JOptionPane.showMessageDialog(this,"STM NO. : " + StmNo +" is pending for approval.");
                    Found = true;
                    rsData.next();
                }
            }
            
            
            if(Found) {
                return false;
            }
        } catch(Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
}
