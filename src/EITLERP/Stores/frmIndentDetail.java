/*
 * EnterLotQty.java
 *
 * Created on May 12, 2004, 4:54 PM
 */

package EITLERP.Stores;

/**
 *
 * @author  nrpithva
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.*;
import EITLERP.Utils.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import java.sql.*;


public class frmIndentDetail extends javax.swing.JApplet {
    
    private EITLTableModel DataModel;
    private EITLComboModel cmbSectionModel;
    
    private EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
    
    public boolean Cancelled=true;
    public HashMap colLot=new HashMap();
    private JDialog aDialog;
    
    public String IndentNo="";
    public int IndentSrNo=0;
    public String forItemID="";
    public boolean AllowEdit=true;
    public int forDeptID=0;
    
    
    public frmIndentDetail() {
        System.gc();
        initComponents();
    }
    
    /** Initializes the applet EnterLotQty */
    public void init() {
        initComponents();
        GenerateGrid();
        GenerateCombos();
        
        if(!AllowEdit) {
            DataModel.TableReadOnly(true);
            cmdOK.setEnabled(false);
            txtNoEligible.setEnabled(false);
            txtNoLastYear.setEnabled(false);
            txtNoThisYear.setEnabled(false);
            cmdAdd.setEnabled(false);
            cmdRemove.setEnabled(false);
        }
        else {
            
            try {
                ResultSet rsTmp=null;
                
                if(forItemID.trim().equals("")) {
                    rsTmp=data.getResult("SELECT NO_THIS_YEAR AS THECOUNT FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO=0 ORDER BY INDENT_DATE DESC");
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        txtNoLastYear.setText(Integer.toString(rsTmp.getInt("THECOUNT")));
                    }
                }
                else {
                    rsTmp=data.getResult("SELECT NO_THIS_YEAR AS THECOUNT FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO="+IndentSrNo+" AND B.ITEM_CODE='"+forItemID+"' ORDER BY INDENT_DATE DESC");
                    rsTmp.first();
                    if(rsTmp.getRow()>0) {
                        txtNoLastYear.setText(Integer.toString(rsTmp.getInt("THECOUNT")));
                    }
                }
                
            }
            catch(Exception e) {
                
            }
        }
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNoEligible = new javax.swing.JTextField();
        txtNoLastYear = new javax.swing.JTextField();
        txtNoThisYear = new javax.swing.JTextField();
        lblItem = new javax.swing.JLabel();
        cmbSection = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmdAddDept = new javax.swing.JButton();
        chkErase = new javax.swing.JCheckBox();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Item Distribution Details");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(9, 39, 212, 15);

        jPanel4.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jPanel4);
        jPanel4.setBounds(8, 67, 706, 5);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdOK);
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(12, 83, 599, 266);

        cmdOK.setText("OK");
        cmdOK.setNextFocusableComponent(cmdCancel);
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });

        getContentPane().add(cmdOK);
        cmdOK.setBounds(621, 82, 80, 25);

        cmdCancel.setText("Cancel");
        cmdCancel.setNextFocusableComponent(cmdOK);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        getContentPane().add(cmdCancel);
        cmdCancel.setBounds(621, 114, 79, 25);

        cmdAdd.setMnemonic('A');
        cmdAdd.setText("Add Row");
        cmdAdd.setNextFocusableComponent(Table);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        getContentPane().add(cmdAdd);
        cmdAdd.setBounds(13, 358, 157, 25);

        cmdRemove.setMnemonic('R');
        cmdRemove.setText("Remove Row");
        cmdRemove.setNextFocusableComponent(Table);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        getContentPane().add(cmdRemove);
        cmdRemove.setBounds(13, 421, 157, 25);

        jLabel2.setText("No. of positions eligible for ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(344, 363, 187, 15);

        jLabel3.setText("No. of persons recommended last year");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(276, 389, 250, 15);

        jLabel4.setText("No. of persons recommended this year");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(274, 416, 251, 15);

        getContentPane().add(txtNoEligible);
        txtNoEligible.setBounds(529, 362, 84, 19);

        getContentPane().add(txtNoLastYear);
        txtNoLastYear.setBounds(529, 387, 82, 19);

        getContentPane().add(txtNoThisYear);
        txtNoThisYear.setBounds(529, 413, 81, 19);

        lblItem.setForeground(new java.awt.Color(0, 51, 204));
        lblItem.setText("-");
        getContentPane().add(lblItem);
        lblItem.setBounds(12, 13, 400, 15);

        getContentPane().add(cmbSection);
        cmbSection.setBounds(475, 9, 222, 24);

        jLabel9.setText("Section");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(422, 14, 49, 15);

        cmdAddDept.setMnemonic('D');
        cmdAddDept.setText("Add from Dept");
        cmdAddDept.setNextFocusableComponent(Table);
        cmdAddDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddDeptActionPerformed(evt);
            }
        });

        getContentPane().add(cmdAddDept);
        cmdAddDept.setBounds(12, 390, 157, 25);

        chkErase.setText("Do not remove existing rows");
        getContentPane().add(chkErase);
        chkErase.setBounds(478, 42, 220, 23);

    }//GEN-END:initComponents
    
    private void cmdAddDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddDeptActionPerformed
        // TODO add your handling code here:
        try {
            
            if(!chkErase.isSelected())
            {
            FormatGrid();
            }
            
            HashMap List=clsEmployee.getSectionList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getCombostrCode(cmbSection));
            
            for(int i=1;i<=List.size();i++) {
                clsEmployee ObjEmp=(clsEmployee)List.get(Integer.toString(i));
                Object[] rowData=new Object[1];
                DataModel.addRow(rowData);
                
                int NewRow=Table.getRowCount()-1;
                
                DataModel.setValueByVariable("SR_NO",Integer.toString(NewRow),NewRow);
                DataModel.setValueByVariable("POSITION_DESC",(String)ObjEmp.getAttribute("DESIGNATION_NAME").getObj(),NewRow);
                DataModel.setValueByVariable("POSITION_NO",(String)ObjEmp.getAttribute("DESIGNATION_ID").getObj(),NewRow);
                DataModel.setValueByVariable("NAME",(String)ObjEmp.getAttribute("EMPLOYEE_NAME").getObj(),NewRow);
                DataModel.setValueByVariable("SHOE_SIZE","",NewRow);
                DataModel.setValueByVariable("REMARKS","",NewRow);
                DataModel.setValueByVariable("CARD_NO",(String)ObjEmp.getAttribute("EMPLOYEE_ID").getObj(),NewRow);
            }
            
            UpdateSrNo();
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdAddDeptActionPerformed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        
        if(Table.getSelectedColumn()==DataModel.getColFromVariable("POSITION_NO")) {
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                LOV aList=new LOV();
                
                aList.SQL="SELECT DESIGNATION_ID,DESIGNATION_NAME FROM D_COM_DESIGNATION_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY DESIGNATION_ID";
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=1;
                
                if(aList.ShowLOV()) {
                    DataModel.setValueByVariable("POSITION_NO",(String)aList.ReturnVal,Table.getSelectedRow());
                }
            }
        }
        
        
        if(Table.getSelectedColumn()==DataModel.getColFromVariable("CARD_NO")) {
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                
                String DesignationID=(String)DataModel.getValueByVariable("POSITION_NO", Table.getSelectedRow());
                
                LOV aList=new LOV();
                
                if(DesignationID.trim().equals("")) {
                    aList.SQL="SELECT EMPLOYEE_ID,EMPLOYEE_NAME FROM D_COM_EMPLOYEE_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY EMPLOYEE_ID";
                }
                else {
                    aList.SQL="SELECT EMPLOYEE_ID,EMPLOYEE_NAME FROM D_COM_EMPLOYEE_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND DESIGNATION_ID='"+DesignationID+"' ORDER BY EMPLOYEE_ID";
                }
                
                aList.ReturnCol=1;
                aList.ShowReturnCol=true;
                aList.DefaultSearchOn=1;
                
                
                if(aList.ShowLOV()) {
                    DataModel.setValueByVariable("CARD_NO",(String)aList.ReturnVal,Table.getSelectedRow());
                    
                    if(DesignationID.trim().equals("")) {
                        DesignationID=clsEmployee.getEmpDesignation(EITLERPGLOBAL.gCompanyID,(String)aList.ReturnVal);
                        DataModel.setValueByVariable("POSITION_NO",DesignationID,Table.getSelectedRow());
                    }
                }
            }
        }
        
    }//GEN-LAST:event_TableKeyPressed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancelled=true;
        aDialog.dispose();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOKActionPerformed
        // TODO add your handling code here:
        if(Validate()) {
            SetLot();
            Cancelled=false;
            aDialog.dispose();
        }
    }//GEN-LAST:event_cmdOKActionPerformed
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        DataModel.removeRow(Table.getSelectedRow());
        UpdateSrNo();
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[3];
        DataModel.addRow(rowData);
        UpdateSrNo();
        Table.changeSelection(Table.getRowCount()-1, 1, false,false);
        Table.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JCheckBox chkErase;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdAddDept;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOK;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblItem;
    private javax.swing.JTextField txtNoEligible;
    private javax.swing.JTextField txtNoLastYear;
    private javax.swing.JTextField txtNoThisYear;
    // End of variables declaration//GEN-END:variables
    
    private void FormatGrid() {
        
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        
        Table.setModel(DataModel);
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        DataModel.addColumn("Sr.");
        DataModel.addColumn("Position No.");
        DataModel.addColumn("Position Name");
        DataModel.addColumn("Card No.");
        DataModel.addColumn("Name");
        DataModel.addColumn("Shoe Size");
        DataModel.addColumn("Given Last Year");
        DataModel.addColumn("Remarks");
        
        DataModel.SetNumeric(0,true);
        DataModel.SetReadOnly(0);
        
        DataModel.SetVariable(0,"SR_NO");
        DataModel.SetVariable(1,"POSITION_NO");
        DataModel.SetVariable(2,"POSITION_DESC");
        DataModel.SetVariable(3,"CARD_NO");
        DataModel.SetVariable(4,"NAME");
        DataModel.SetVariable(5,"SHOE_SIZE");
        DataModel.SetVariable(6,"GIVEN_LAST_YEAR");
        DataModel.SetVariable(7,"REMARKS");
        
        
        Renderer.setCustomComponent(6,"CheckBox");
        JCheckBox aCheckBox=new JCheckBox();
        aCheckBox.setBackground(Color.WHITE);
        Table.getColumnModel().getColumn(6).setCellEditor(new DefaultCellEditor(aCheckBox));
        Table.getColumnModel().getColumn(6).setCellRenderer(Renderer);
        
        DataModel.SetReadOnly(2);
        DataModel.SetReadOnly(4);
        
        
        
        //----- Install Table Model Event Listener -------//
        Table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    
                    if(col==DataModel.getColFromVariable("POSITION_NO")) {
                        DataModel.setValueByVariable("POSITION_DESC", clsDesignation.getDesignationName(EITLERPGLOBAL.gCompanyID, DataModel.getValueByVariable("POSITION_NO",Table.getSelectedRow())),Table.getSelectedRow());
                    }
                    
                    
                    if(col==DataModel.getColFromVariable("CARD_NO")) {
                        DataModel.setValueByVariable("NAME", clsEmployee.getEmployeeName(EITLERPGLOBAL.gCompanyID, DataModel.getValueByVariable("CARD_NO",Table.getSelectedRow())),Table.getSelectedRow());
                        String DesignationID=DataModel.getValueByVariable("POSITION_NO", Table.getSelectedRow());
                        String empDesignationID=clsEmployee.getEmpDesignation(EITLERPGLOBAL.gCompanyID,DataModel.getValueByVariable("CARD_NO",Table.getSelectedRow()));
                        
                        if(!DesignationID.trim().equals(empDesignationID)) {
                            DataModel.setValueByVariable("POSITION_NO",empDesignationID,Table.getSelectedRow());
                        }
                        
                        ResultSet rsTmp=null;
                        //Get detail whether given last year or not
                        try {
                            
                            
                            String empID=DataModel.getValueByVariable("CARD_NO", Table.getSelectedRow());
                            
                            if(forItemID.trim().equals("")) {
                                rsTmp=data.getResult("SELECT C.* FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO=0 AND C.CARD_NO='"+empID+"' ORDER BY INDENT_DATE DESC");
                                rsTmp.first();
                                if(rsTmp.getRow()>0) {
                                    DataModel.setValueByVariable("GIVEN_LAST_YEAR",Boolean.valueOf(true), Table.getSelectedRow());
                                }
                                else {
                                    DataModel.setValueByVariable("GIVEN_LAST_YEAR",Boolean.valueOf(false), Table.getSelectedRow());
                                }
                            }
                            else {
                                rsTmp=data.getResult("SELECT C.* FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B,D_INV_INDENT_ITEM_DETAIL C WHERE A.INDENT_NO=B.INDENT_NO AND B.SR_NO=C.INDENT_SR_NO AND B.INDENT_NO=C.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND C.INDENT_SR_NO="+IndentSrNo+" AND B.ITEM_CODE='"+forItemID+"' AND C.CARD_NO='"+empID+"' ORDER BY INDENT_DATE DESC");
                                rsTmp.first();
                                if(rsTmp.getRow()>0) {
                                    DataModel.setValueByVariable("GIVEN_LAST_YEAR",Boolean.valueOf(true), Table.getSelectedRow());
                                }
                                else {
                                    DataModel.setValueByVariable("GIVEN_LAST_YEAR",Boolean.valueOf(false), Table.getSelectedRow());
                                }
                            }
                            
                            
                        }
                        catch(Exception f) {
                            
                        }
                        
                        
                    }
                }
            }
        });
    }
    
    private boolean Validate() {
        int ValidEntryCount=0;
        
        int NoEligible=0;
        int NoLastYear=0;
        int NoThisYear=0;
        
      
        
        if(txtNoEligible.getText().trim().equals("")) {
            txtNoEligible.setText("0");
        }
        
        if(txtNoLastYear.getText().trim().equals("")) {
            txtNoLastYear.setText("0");
        }
        
        if(txtNoThisYear.getText().trim().equals("")) {
            txtNoThisYear.setText("0");
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtNoEligible.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Please enter number in : No. of persons eligible");
            return false;
        }
        
        
        if(!EITLERPGLOBAL.IsNumber(txtNoLastYear.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Please enter number in : No. of persons recommended last year");
            return false;
        }
        
        if(!EITLERPGLOBAL.IsNumber(txtNoThisYear.getText().trim())) {
            JOptionPane.showMessageDialog(null,"Please enter number in : No. of persons recommended this year");
            return false;
        }
        
        for(int i=0;i<Table.getRowCount();i++) {
            String PositionName=DataModel.getValueByVariable("POSITION_DESC",i);
            String Name=DataModel.getValueByVariable("NAME",i);
            
            if((!PositionName.trim().equals(""))&&(!Name.trim().equals(""))) {
                ValidEntryCount++;
            }
            else {
                JOptionPane.showMessageDialog(null,"Please enter position name and person name");
                return false;
            }
        }
        
      
        
        boolean Found=false;
        
        for(int i=0;i<Table.getRowCount();i++) {
            Found=false;
            String EmpID=DataModel.getValueByVariable("CARD_NO", i);
            
            
            for(int j=0;j<=Table.getRowCount();j++) {
                String EmpID2=DataModel.getValueByVariable("CARD_NO", j);
                if(i!=j) {
                    if(EmpID.trim().equals(EmpID2)) {
                        Found=true;
                    }
                }
                
            }
            
            if(Found) {
                JOptionPane.showMessageDialog(null,"Employee ID "+EmpID+" Has been entered more than once.");
                return false;
            }
            
        }
        
        return true;
    }
    
    //Recurses through the hierarchy of classes
    //until it finds Frame
    private Frame findParentFrame(JApplet pApplet) {
        Container c = (Container) pApplet;
        while(c != null) {
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    private void GenerateGrid() {
        //Generates Grid from the
        FormatGrid();
        
        int NoEligible=0;
        int NoLastYear=0;
        int NoThisYear=0;
        
        for(int i=1;i<=colLot.size();i++) {
            clsIndentItemDetail ObjLot=(clsIndentItemDetail)colLot.get(Integer.toString(i));
            Object[] rowData=new Object[1];
            DataModel.addRow(rowData);
            
            int NewRow=Table.getRowCount()-1;
            
            DataModel.setValueByVariable("SR_NO",Integer.toString(NewRow),NewRow);
            DataModel.setValueByVariable("POSITION_DESC",(String)ObjLot.getAttribute("POSITION_DESC").getObj(),NewRow);
            DataModel.setValueByVariable("POSITION_NO",(String)ObjLot.getAttribute("POSITION_NO").getObj(),NewRow);
            DataModel.setValueByVariable("CARD_NO",(String)ObjLot.getAttribute("CARD_NO").getObj(),NewRow);
            DataModel.setValueByVariable("NAME",(String)ObjLot.getAttribute("NAME").getObj(),NewRow);
            DataModel.setValueByVariable("SHOE_SIZE",(String)ObjLot.getAttribute("SHOE_SIZE").getObj(),NewRow);
            DataModel.setValueByVariable("GIVEN_LAST_YEAR",Boolean.valueOf(ObjLot.getAttribute("GIVEN_LAST_YEAR").getBool()),NewRow);
            DataModel.setValueByVariable("REMARKS",(String)ObjLot.getAttribute("REMARKS").getObj(),NewRow);
            
            if(i==1) {
                NoEligible=(int)ObjLot.getAttribute("NO_ELIGIBLE").getVal();
                NoLastYear=(int)ObjLot.getAttribute("NO_LAST_YEAR").getVal();
                NoThisYear=(int)ObjLot.getAttribute("NO_THIS_YEAR").getVal();
                
                txtNoEligible.setText(Integer.toString(NoEligible));
                txtNoLastYear.setText(Integer.toString(NoLastYear));
                txtNoThisYear.setText(Integer.toString(NoThisYear));
            }
        }
        UpdateSrNo();
    }
    
    private void SetLot() {
        colLot.clear();
        for(int i=0;i<Table.getRowCount();i++) {
            clsIndentItemDetail ObjLot=new clsIndentItemDetail();
            
            ObjLot.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
            ObjLot.setAttribute("INDENT_NO",IndentNo);
            ObjLot.setAttribute("INDENT_SR_NO",IndentSrNo);
            ObjLot.setAttribute("SR_NO",i);
            ObjLot.setAttribute("POSITION_DESC",DataModel.getValueByVariable("POSITION_DESC",i));
            ObjLot.setAttribute("POSITION_NO",DataModel.getValueByVariable("POSITION_NO",i));
            ObjLot.setAttribute("CARD_NO",DataModel.getValueByVariable("CARD_NO",i));
            ObjLot.setAttribute("NAME",DataModel.getValueByVariable("NAME",i));
            ObjLot.setAttribute("SHOE_SIZE",DataModel.getValueByVariable("SHOE_SIZE",i));
            ObjLot.setAttribute("GIVEN_LAST_YEAR",DataModel.getBoolValueByVariable("GIVEN_LAST_YEAR",i));
            ObjLot.setAttribute("REMARKS",DataModel.getValueByVariable("REMARKS",i));
            ObjLot.setAttribute("NO_ELIGIBLE",Integer.parseInt(txtNoEligible.getText().trim()));
            ObjLot.setAttribute("NO_LAST_YEAR",Integer.parseInt(txtNoLastYear.getText().trim()));
            ObjLot.setAttribute("NO_THIS_YEAR",Integer.parseInt(txtNoThisYear.getText().trim()));
            
            colLot.put(Integer.toString(colLot.size()+1),ObjLot);
        }
    }
    
    
    public boolean ShowList() {
        try {
            GenerateGrid();
            GenerateCombos();
            
            
            if(!AllowEdit) {
                DataModel.TableReadOnly(true);
                cmdOK.setEnabled(false);
                txtNoEligible.setEnabled(false);
                txtNoLastYear.setEnabled(false);
                txtNoThisYear.setEnabled(false);
                cmdAdd.setEnabled(false);
                cmdRemove.setEnabled(false);
                cmdAddDept.setEnabled(false);
            }
            
            lblItem.setText(forItemID+" : "+clsItem.getItemName(EITLERPGLOBAL.gCompanyID,forItemID));
            setSize(730 ,472);
            
            Frame f=findParentFrame(this);
            
            aDialog=new JDialog(f,"Worker Details",true);
            
            aDialog.getContentPane().add("Center",this);
            Dimension appletSize = this.getSize();
            aDialog.setSize(appletSize);
            aDialog.setResizable(false);
            
            //Place it to center of the screen
            Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();
            aDialog.setLocation((int)(screenSize.width-appletSize.getWidth())/2,(int)(screenSize.height-appletSize.getHeight())/2);
            
            aDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
            aDialog.show();
        }
        catch(Exception e) {
        }
        return !Cancelled;
    }
    
    
    private void UpdateSrNo() {
        for(int i=0;i<Table.getRowCount();i++) {
            Table.setValueAt(Integer.toString(i+1),i,0);
        }
    }
    
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        
        //----- Generate cmbType ------- //
        cmbSectionModel=new EITLComboModel();
        cmbSection.removeAllItems();
        cmbSection.setModel(cmbSectionModel);
        
        String strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ";
                
        List=clsSection.getList(strCondition);
        
        for(int i=1;i<=List.size();i++) {
            clsSection ObjDes=(clsSection) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=0;
            aData.Text=(String)ObjDes.getAttribute("SECTION_NAME").getObj();
            aData.strCode=(String) ObjDes.getAttribute("SECTION_ID").getObj();
            cmbSectionModel.addElement(aData);
        }
        //------------------------------ //
    }
    
}
