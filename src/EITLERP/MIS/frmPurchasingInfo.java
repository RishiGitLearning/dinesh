/*
 * frmPurchasingInfo.java
 *
 * Created on July 14, 2005, 1:16 PM
 */

package EITLERP.MIS;

/**
 *
 * @author  root
 */

import EITLERP.*;
import java.sql.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import EITLERP.Finance.*;


public class frmPurchasingInfo extends javax.swing.JApplet {
    
    private EITLTableModel DataModelPR=new EITLTableModel();
    private EITLTableModel DataModelIndent=new EITLTableModel();
    private EITLTableModel DataModelPO =new EITLTableModel();
    private EITLTableModel DataModelMIR =new EITLTableModel();
    private EITLTableModel DataModelJob =new EITLTableModel();
    private EITLTableModel DataModelGRN =new EITLTableModel();
    private EITLTableModel DataModelRIA =new EITLTableModel();
    private EITLTableModel DataModelPJV =new EITLTableModel();
    private EITLTableModel DataModelPayment =new EITLTableModel();
    
    private EITLTableCellRenderer RendPR=new EITLTableCellRenderer();
    private EITLTableCellRenderer RendIndent=new EITLTableCellRenderer();
    private EITLTableCellRenderer RendPO =new EITLTableCellRenderer();
    private EITLTableCellRenderer RendMIR =new EITLTableCellRenderer();
    private EITLTableCellRenderer RendJob =new EITLTableCellRenderer();
    
    
    private EITLTableModel DataModelSupp =new EITLTableModel();
    private EITLTableModel DataModelSuppAmend =new EITLTableModel();
    private EITLTableModel DataModelItem =new EITLTableModel();
    private EITLTableModel DataModelItemAmend =new EITLTableModel();
    
    private EITLComboModel cmbUserModel=new EITLComboModel();
    private EITLComboModel cmbDeptModel=new EITLComboModel();
    
    private String RefDocNo="";
    
    private String UserString="";
    
    private int LevelNo=0;
    
    
    /** Initializes the applet frmPurchasingInfo */
    public void init() {
        setSize(803, 580);
        initComponents();
        
        GenerateCombo();
        FormatPRGrid();
        FormatIndentGrid();
        FormatPOGrid();
        FormatMIRGrid();
        FormatGRNGrid();
        FormatRIAGrid();
        FormatSuppGrid();
        FormatSuppAmendGrid();
        FormatItemGrid();
        FormatItemAmendGrid();
        
        EITLERPGLOBAL.setComboIndex(cmbUser,EITLERPGLOBAL.gUserID);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        gpPR = new javax.swing.ButtonGroup();
        gpIndent = new javax.swing.ButtonGroup();
        gpPO = new javax.swing.ButtonGroup();
        gpMIR = new javax.swing.ButtonGroup();
        gpGRN = new javax.swing.ButtonGroup();
        opgRIA = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Pane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        opgCreatedPR = new javax.swing.JRadioButton();
        opgReleasedPR = new javax.swing.JRadioButton();
        chkPR = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtFromDatePR = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtToDatePR = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePR = new javax.swing.JTable();
        cmdShowPR = new javax.swing.JButton();
        cmdOpenPR = new javax.swing.JButton();
        cmdNextPR = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtDocNoPR = new javax.swing.JTextField();
        chkApprovedPR = new javax.swing.JCheckBox();
        chkUnApprovedPR = new javax.swing.JCheckBox();
        chkExecutedPR = new javax.swing.JCheckBox();
        jLabel21 = new javax.swing.JLabel();
        txtItemIDPR = new javax.swing.JTextField();
        lblItemNamePR = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        chkIndent = new javax.swing.JCheckBox();
        opgCreatedIndent = new javax.swing.JRadioButton();
        opgReleasedIndent = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        txtFromDateIndent = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtToDateIndent = new javax.swing.JTextField();
        cmdShowIndent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableIndent = new javax.swing.JTable();
        cmdOpenIndent = new javax.swing.JButton();
        cmdNextIndent = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txtDocNoIndent = new javax.swing.JTextField();
        chkApprovedIndent = new javax.swing.JCheckBox();
        chkUnApprovedIndent = new javax.swing.JCheckBox();
        chkExecutedIndent = new javax.swing.JCheckBox();
        lblItemNameIndent = new javax.swing.JLabel();
        txtItemIDIndent = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        chkPO = new javax.swing.JCheckBox();
        opgCreatedPO = new javax.swing.JRadioButton();
        chkReleasedPO = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        txtFromDatePO = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtToDatePO = new javax.swing.JTextField();
        cmdShowPO = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablePO = new javax.swing.JTable();
        cmdOpenPO = new javax.swing.JButton();
        cmdNextPO = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        txtDocNoPO = new javax.swing.JTextField();
        chkApprovedPO = new javax.swing.JCheckBox();
        chkUnApprovedPO = new javax.swing.JCheckBox();
        chkExecutedPO = new javax.swing.JCheckBox();
        lblItemNamePO = new javax.swing.JLabel();
        txtItemIDPO = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        cmdNextPO1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        chkMIR = new javax.swing.JCheckBox();
        opgCreatedMIR = new javax.swing.JRadioButton();
        opgReleasedMIR = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        txtFromDateMIR = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtToDateMIR = new javax.swing.JTextField();
        cmdShowMIR = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableMIR = new javax.swing.JTable();
        cmdOpenMIR = new javax.swing.JButton();
        cmdNextMIR = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtDocNoMIR = new javax.swing.JTextField();
        chkApprovedMIR = new javax.swing.JCheckBox();
        chkUnApprovedMIR = new javax.swing.JCheckBox();
        chkExecutedMIR = new javax.swing.JCheckBox();
        lblItemNameMIR = new javax.swing.JLabel();
        txtItemIDMIR = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        chkGRN = new javax.swing.JCheckBox();
        opgCreatedGRN = new javax.swing.JRadioButton();
        opgReleasedGRN = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        txtFromDateGRN = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtToDateGRN = new javax.swing.JTextField();
        cmdShowGRN = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableGRN = new javax.swing.JTable();
        cmdOpenGRN = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        txtDocNoGRN = new javax.swing.JTextField();
        chkApprovedGRN = new javax.swing.JCheckBox();
        chkUnApprovedGRN = new javax.swing.JCheckBox();
        chkExecutedGRN = new javax.swing.JCheckBox();
        lblItemNameGRN = new javax.swing.JLabel();
        txtItemIDGRN = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        cmdNextGRN = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        opgCreatedVoucher = new javax.swing.JRadioButton();
        opgReleasedVoucher = new javax.swing.JRadioButton();
        jLabel41 = new javax.swing.JLabel();
        txtFromDateVoucher = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        txtToDateVoucher = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        txtDocNoVoucher = new javax.swing.JTextField();
        chkApprovedVoucher = new javax.swing.JCheckBox();
        chkUnApprovedVoucher = new javax.swing.JCheckBox();
        jLabel44 = new javax.swing.JLabel();
        txtPartyCode = new javax.swing.JTextField();
        lblPartyName = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        TablePJV = new javax.swing.JTable();
        cmdNext = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        TablePayment = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        txtGRNNo = new javax.swing.JTextField();
        cmdShowVoucher = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        chkItemAmend = new javax.swing.JCheckBox();
        txtDocNoItemAmend = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        opgReleasedItemAmend = new javax.swing.JRadioButton();
        opgCreatedItemAmend = new javax.swing.JRadioButton();
        jLabel37 = new javax.swing.JLabel();
        txtFromDateItemAmend = new javax.swing.JTextField();
        txtToDateItemAmend = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        chkApprovedItemAmend = new javax.swing.JCheckBox();
        chkUnApprovedItemAmend = new javax.swing.JCheckBox();
        jScrollPane10 = new javax.swing.JScrollPane();
        TableItemAmend = new javax.swing.JTable();
        cmdOpenItemAmend = new javax.swing.JButton();
        cmdShowItemAmend = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        chkItem = new javax.swing.JCheckBox();
        txtDocNoItem = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        opgReleasedItem = new javax.swing.JRadioButton();
        opgCreatedItem = new javax.swing.JRadioButton();
        jLabel34 = new javax.swing.JLabel();
        txtFromDateItem = new javax.swing.JTextField();
        txtToDateItem = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        chkApprovedItem = new javax.swing.JCheckBox();
        chkUnApprovedItem = new javax.swing.JCheckBox();
        jScrollPane9 = new javax.swing.JScrollPane();
        TableItem = new javax.swing.JTable();
        cmdOpenItem = new javax.swing.JButton();
        cmdShowItem = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        chkSuppAmend = new javax.swing.JCheckBox();
        txtDocNoSuppAmend = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        opgReleasedSuppAmend = new javax.swing.JRadioButton();
        opgCreatedSuppAmend = new javax.swing.JRadioButton();
        jLabel31 = new javax.swing.JLabel();
        txtFromDateSuppAmend = new javax.swing.JTextField();
        txtToDateSuppAmend = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        chkApprovedSuppAmend = new javax.swing.JCheckBox();
        chkUnApprovedSuppAmend = new javax.swing.JCheckBox();
        jScrollPane8 = new javax.swing.JScrollPane();
        TableSuppAmend = new javax.swing.JTable();
        cmdOpenSuppAmend = new javax.swing.JButton();
        cmdShowSuppAmend = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        chkSupp = new javax.swing.JCheckBox();
        txtDocNoSupp = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        opgReleasedSupp = new javax.swing.JRadioButton();
        opgCreatedSupp = new javax.swing.JRadioButton();
        jLabel28 = new javax.swing.JLabel();
        txtFromDateSupp = new javax.swing.JTextField();
        txtToDateSupp = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        chkApprovedSupp = new javax.swing.JCheckBox();
        chkUnApprovedSupp = new javax.swing.JCheckBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        TableSupp = new javax.swing.JTable();
        cmdOpenSupp = new javax.swing.JButton();
        cmdShowSupp = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        chkRIA = new javax.swing.JCheckBox();
        opgCreatedRIA = new javax.swing.JRadioButton();
        opgReleasedRIA = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        txtDocNoRIA = new javax.swing.JTextField();
        chkApprovedRIA = new javax.swing.JCheckBox();
        chkUnApprovedRIA = new javax.swing.JCheckBox();
        chkExecutedRIA = new javax.swing.JCheckBox();
        txtToDateRIA = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtFromDateRIA = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableRIA = new javax.swing.JTable();
        cmdOpenRIA = new javax.swing.JButton();
        cmdShowRIA = new javax.swing.JButton();
        lblItemNameRIA = new javax.swing.JLabel();
        txtItemIDRIA = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        cmbDept = new javax.swing.JComboBox();
        chkDept = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        chkJob = new javax.swing.JCheckBox();
        opgCreatedJob = new javax.swing.JRadioButton();
        opgReleasedJob = new javax.swing.JRadioButton();
        jLabel46 = new javax.swing.JLabel();
        txtFromDateJob = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        txtToDateJob = new javax.swing.JTextField();
        txtItemIDJob = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        TableJob = new javax.swing.JTable();
        jLabel49 = new javax.swing.JLabel();
        txtDocNoJob = new javax.swing.JTextField();
        chkApprovedJob = new javax.swing.JCheckBox();
        chkUnApprovedJob = new javax.swing.JCheckBox();
        chkExecutedJob = new javax.swing.JCheckBox();
        cmdShowJob = new javax.swing.JButton();
        cmdOpenJob = new javax.swing.JButton();
        cmdNextJob = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));
        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ITEM PURCHASING FLOW");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(8, 7, 312, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 852, 29);

        Pane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        opgCreatedPR.setSelected(true);
        opgCreatedPR.setText("Created");
        gpPR.add(opgCreatedPR);
        jPanel2.add(opgCreatedPR);
        opgCreatedPR.setBounds(13, 39, 81, 23);

        opgReleasedPR.setText("Released");
        gpPR.add(opgReleasedPR);
        jPanel2.add(opgReleasedPR);
        opgReleasedPR.setBounds(103, 39, 81, 23);

        chkPR.setSelected(true);
        chkPR.setText("Show PR of current user only");
        jPanel2.add(chkPR);
        chkPR.setBounds(5, 6, 236, 23);

        jLabel3.setText("From Date");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(12, 73, 72, 15);

        jPanel2.add(txtFromDatePR);
        txtFromDatePR.setBounds(84, 73, 91, 21);

        jLabel4.setText("To");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(180, 77, 20, 15);

        jPanel2.add(txtToDatePR);
        txtToDatePR.setBounds(206, 73, 91, 21);

        TablePR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablePR);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(8, 178, 749, 187);

        cmdShowPR.setText("Show");
        cmdShowPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowPRActionPerformed(evt);
            }
        });

        jPanel2.add(cmdShowPR);
        cmdShowPR.setBounds(667, 77, 88, 25);

        cmdOpenPR.setText("Show Document");
        cmdOpenPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenPRActionPerformed(evt);
            }
        });

        jPanel2.add(cmdOpenPR);
        cmdOpenPR.setBounds(480, 373, 136, 25);

        cmdNextPR.setText("Next");
        cmdNextPR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextPRActionPerformed(evt);
            }
        });

        jPanel2.add(cmdNextPR);
        cmdNextPR.setBounds(621, 373, 136, 25);

        jLabel13.setText("Doc No.");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(343, 15, 58, 15);

        jPanel2.add(txtDocNoPR);
        txtDocNoPR.setBounds(397, 13, 91, 21);

        chkApprovedPR.setText("Only Approved Documents");
        jPanel2.add(chkApprovedPR);
        chkApprovedPR.setBounds(340, 37, 218, 23);

        chkUnApprovedPR.setText("Only UnApproved Documents");
        jPanel2.add(chkUnApprovedPR);
        chkUnApprovedPR.setBounds(340, 57, 212, 23);

        chkExecutedPR.setText("Only Executed Documents");
        jPanel2.add(chkExecutedPR);
        chkExecutedPR.setBounds(340, 77, 188, 23);

        jLabel21.setText("Item ID");
        jPanel2.add(jLabel21);
        jLabel21.setBounds(33, 120, 46, 15);

        txtItemIDPR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDPRFocusLost(evt);
            }
        });
        txtItemIDPR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDPRKeyPressed(evt);
            }
        });

        jPanel2.add(txtItemIDPR);
        txtItemIDPR.setBounds(84, 116, 91, 21);

        jPanel2.add(lblItemNamePR);
        lblItemNamePR.setBounds(176, 118, 364, 17);

        Pane.addTab("PR", jPanel2);

        jPanel3.setLayout(null);

        jPanel3.setBorder(new javax.swing.border.EtchedBorder());
        chkIndent.setSelected(true);
        chkIndent.setText("Show Indents of current user only");
        jPanel3.add(chkIndent);
        chkIndent.setBounds(5, 6, 275, 23);

        opgCreatedIndent.setSelected(true);
        opgCreatedIndent.setText("Created");
        gpIndent.add(opgCreatedIndent);
        jPanel3.add(opgCreatedIndent);
        opgCreatedIndent.setBounds(13, 39, 81, 23);

        opgReleasedIndent.setText("Released");
        gpIndent.add(opgReleasedIndent);
        jPanel3.add(opgReleasedIndent);
        opgReleasedIndent.setBounds(103, 39, 81, 23);

        jLabel5.setText("From Date");
        jPanel3.add(jLabel5);
        jLabel5.setBounds(12, 73, 72, 15);

        jPanel3.add(txtFromDateIndent);
        txtFromDateIndent.setBounds(84, 73, 91, 21);

        jLabel6.setText("To");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(180, 77, 20, 15);

        jPanel3.add(txtToDateIndent);
        txtToDateIndent.setBounds(206, 73, 91, 21);

        cmdShowIndent.setText("Show");
        cmdShowIndent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowIndentActionPerformed(evt);
            }
        });

        jPanel3.add(cmdShowIndent);
        cmdShowIndent.setBounds(666, 78, 88, 25);

        TableIndent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableIndent);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(8, 178, 749, 187);

        cmdOpenIndent.setText("Show Document");
        cmdOpenIndent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenIndentActionPerformed(evt);
            }
        });

        jPanel3.add(cmdOpenIndent);
        cmdOpenIndent.setBounds(480, 373, 136, 25);

        cmdNextIndent.setText("Next");
        cmdNextIndent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextIndentActionPerformed(evt);
            }
        });

        jPanel3.add(cmdNextIndent);
        cmdNextIndent.setBounds(621, 373, 136, 25);

        jLabel14.setText("Doc No.");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(343, 15, 58, 15);

        jPanel3.add(txtDocNoIndent);
        txtDocNoIndent.setBounds(397, 13, 91, 21);

        chkApprovedIndent.setText("Only Approved Documents");
        jPanel3.add(chkApprovedIndent);
        chkApprovedIndent.setBounds(340, 37, 218, 23);

        chkUnApprovedIndent.setText("Only UnApproved Documents");
        jPanel3.add(chkUnApprovedIndent);
        chkUnApprovedIndent.setBounds(340, 57, 212, 23);

        chkExecutedIndent.setText("Only Executed Documents");
        jPanel3.add(chkExecutedIndent);
        chkExecutedIndent.setBounds(340, 77, 188, 23);

        jPanel3.add(lblItemNameIndent);
        lblItemNameIndent.setBounds(176, 118, 364, 17);

        txtItemIDIndent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDIndentFocusLost(evt);
            }
        });
        txtItemIDIndent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDIndentKeyPressed(evt);
            }
        });

        jPanel3.add(txtItemIDIndent);
        txtItemIDIndent.setBounds(84, 116, 91, 21);

        jLabel22.setText("Item ID");
        jPanel3.add(jLabel22);
        jLabel22.setBounds(33, 120, 46, 15);

        Pane.addTab("Indent", jPanel3);

        jPanel4.setLayout(null);

        jPanel4.setBorder(new javax.swing.border.EtchedBorder());
        chkPO.setSelected(true);
        chkPO.setText("Show PO of current user only");
        jPanel4.add(chkPO);
        chkPO.setBounds(5, 6, 236, 23);

        opgCreatedPO.setSelected(true);
        opgCreatedPO.setText("Created");
        gpPO.add(opgCreatedPO);
        jPanel4.add(opgCreatedPO);
        opgCreatedPO.setBounds(13, 39, 81, 23);

        chkReleasedPO.setText("Released");
        gpPO.add(chkReleasedPO);
        jPanel4.add(chkReleasedPO);
        chkReleasedPO.setBounds(103, 39, 81, 23);

        jLabel7.setText("From Date");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(12, 73, 72, 15);

        jPanel4.add(txtFromDatePO);
        txtFromDatePO.setBounds(84, 73, 91, 21);

        jLabel8.setText("To");
        jPanel4.add(jLabel8);
        jLabel8.setBounds(180, 77, 20, 15);

        jPanel4.add(txtToDatePO);
        txtToDatePO.setBounds(206, 73, 91, 21);

        cmdShowPO.setText("Show");
        cmdShowPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowPOActionPerformed(evt);
            }
        });

        jPanel4.add(cmdShowPO);
        cmdShowPO.setBounds(665, 79, 88, 25);

        TablePO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TablePO);

        jPanel4.add(jScrollPane3);
        jScrollPane3.setBounds(8, 178, 748, 187);

        cmdOpenPO.setText("Show Document");
        cmdOpenPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenPOActionPerformed(evt);
            }
        });

        jPanel4.add(cmdOpenPO);
        cmdOpenPO.setBounds(337, 372, 136, 25);

        cmdNextPO.setText("Next (MIR)");
        cmdNextPO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextPOActionPerformed(evt);
            }
        });

        jPanel4.add(cmdNextPO);
        cmdNextPO.setBounds(620, 373, 136, 25);

        jLabel15.setText("Doc No.");
        jPanel4.add(jLabel15);
        jLabel15.setBounds(343, 15, 58, 15);

        jPanel4.add(txtDocNoPO);
        txtDocNoPO.setBounds(397, 13, 91, 21);

        chkApprovedPO.setText("Only Approved Documents");
        jPanel4.add(chkApprovedPO);
        chkApprovedPO.setBounds(340, 37, 218, 23);

        chkUnApprovedPO.setText("Only UnApproved Documents");
        jPanel4.add(chkUnApprovedPO);
        chkUnApprovedPO.setBounds(340, 57, 212, 23);

        chkExecutedPO.setText("Only Executed Documents");
        jPanel4.add(chkExecutedPO);
        chkExecutedPO.setBounds(340, 77, 188, 23);

        jPanel4.add(lblItemNamePO);
        lblItemNamePO.setBounds(176, 118, 364, 17);

        txtItemIDPO.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDPOFocusLost(evt);
            }
        });
        txtItemIDPO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDPOKeyPressed(evt);
            }
        });

        jPanel4.add(txtItemIDPO);
        txtItemIDPO.setBounds(84, 116, 91, 21);

        jLabel23.setText("Item ID");
        jPanel4.add(jLabel23);
        jLabel23.setBounds(33, 120, 46, 15);

        cmdNextPO1.setText("Next (Job)");
        cmdNextPO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextPO1ActionPerformed(evt);
            }
        });

        jPanel4.add(cmdNextPO1);
        cmdNextPO1.setBounds(479, 372, 136, 25);

        Pane.addTab("PO", jPanel4);

        jPanel5.setLayout(null);

        jPanel5.setBorder(new javax.swing.border.EtchedBorder());
        chkMIR.setSelected(true);
        chkMIR.setText("Show MIR of current user only");
        jPanel5.add(chkMIR);
        chkMIR.setBounds(5, 6, 236, 23);

        opgCreatedMIR.setSelected(true);
        opgCreatedMIR.setText("Created");
        gpMIR.add(opgCreatedMIR);
        jPanel5.add(opgCreatedMIR);
        opgCreatedMIR.setBounds(13, 39, 81, 23);

        opgReleasedMIR.setText("Released");
        gpMIR.add(opgReleasedMIR);
        jPanel5.add(opgReleasedMIR);
        opgReleasedMIR.setBounds(103, 39, 81, 23);

        jLabel9.setText("From Date");
        jPanel5.add(jLabel9);
        jLabel9.setBounds(12, 73, 72, 15);

        jPanel5.add(txtFromDateMIR);
        txtFromDateMIR.setBounds(84, 73, 91, 21);

        jLabel10.setText("To");
        jPanel5.add(jLabel10);
        jLabel10.setBounds(180, 77, 20, 15);

        jPanel5.add(txtToDateMIR);
        txtToDateMIR.setBounds(206, 73, 91, 21);

        cmdShowMIR.setText("Show");
        cmdShowMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowMIRActionPerformed(evt);
            }
        });

        jPanel5.add(cmdShowMIR);
        cmdShowMIR.setBounds(667, 78, 88, 25);

        TableMIR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TableMIR);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(8, 178, 750, 187);

        cmdOpenMIR.setText("Show Document");
        cmdOpenMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenMIRActionPerformed(evt);
            }
        });

        jPanel5.add(cmdOpenMIR);
        cmdOpenMIR.setBounds(480, 374, 136, 25);

        cmdNextMIR.setText("Next");
        cmdNextMIR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextMIRActionPerformed(evt);
            }
        });

        jPanel5.add(cmdNextMIR);
        cmdNextMIR.setBounds(621, 374, 136, 25);

        jLabel16.setText("Doc No.");
        jPanel5.add(jLabel16);
        jLabel16.setBounds(343, 15, 58, 15);

        jPanel5.add(txtDocNoMIR);
        txtDocNoMIR.setBounds(397, 13, 91, 21);

        chkApprovedMIR.setText("Only Approved Documents");
        jPanel5.add(chkApprovedMIR);
        chkApprovedMIR.setBounds(340, 37, 218, 23);

        chkUnApprovedMIR.setText("Only UnApproved Documents");
        jPanel5.add(chkUnApprovedMIR);
        chkUnApprovedMIR.setBounds(340, 57, 212, 23);

        chkExecutedMIR.setText("Only Executed Documents");
        jPanel5.add(chkExecutedMIR);
        chkExecutedMIR.setBounds(340, 77, 188, 23);

        jPanel5.add(lblItemNameMIR);
        lblItemNameMIR.setBounds(176, 118, 364, 17);

        txtItemIDMIR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDMIRFocusLost(evt);
            }
        });
        txtItemIDMIR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDMIRKeyPressed(evt);
            }
        });

        jPanel5.add(txtItemIDMIR);
        txtItemIDMIR.setBounds(84, 116, 91, 21);

        jLabel24.setText("Item ID");
        jPanel5.add(jLabel24);
        jLabel24.setBounds(33, 120, 46, 15);

        Pane.addTab("MIR", jPanel5);

        jPanel6.setLayout(null);

        jPanel6.setBorder(new javax.swing.border.EtchedBorder());
        chkGRN.setSelected(true);
        chkGRN.setText("Show GRN of current user only");
        jPanel6.add(chkGRN);
        chkGRN.setBounds(5, 6, 236, 23);

        opgCreatedGRN.setSelected(true);
        opgCreatedGRN.setText("Created");
        gpGRN.add(opgCreatedGRN);
        jPanel6.add(opgCreatedGRN);
        opgCreatedGRN.setBounds(13, 39, 81, 23);

        opgReleasedGRN.setText("Released");
        gpGRN.add(opgReleasedGRN);
        jPanel6.add(opgReleasedGRN);
        opgReleasedGRN.setBounds(103, 39, 81, 23);

        jLabel11.setText("From Date");
        jPanel6.add(jLabel11);
        jLabel11.setBounds(12, 73, 72, 15);

        jPanel6.add(txtFromDateGRN);
        txtFromDateGRN.setBounds(84, 73, 91, 21);

        jLabel12.setText("To");
        jPanel6.add(jLabel12);
        jLabel12.setBounds(180, 77, 20, 15);

        jPanel6.add(txtToDateGRN);
        txtToDateGRN.setBounds(206, 73, 91, 21);

        cmdShowGRN.setText("Show");
        cmdShowGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowGRNActionPerformed(evt);
            }
        });

        jPanel6.add(cmdShowGRN);
        cmdShowGRN.setBounds(668, 78, 88, 25);

        TableGRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TableGRN);

        jPanel6.add(jScrollPane5);
        jScrollPane5.setBounds(8, 178, 750, 187);

        cmdOpenGRN.setText("Show Document");
        cmdOpenGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenGRNActionPerformed(evt);
            }
        });

        jPanel6.add(cmdOpenGRN);
        cmdOpenGRN.setBounds(476, 374, 136, 25);

        jLabel17.setText("Doc No.");
        jPanel6.add(jLabel17);
        jLabel17.setBounds(343, 15, 58, 15);

        jPanel6.add(txtDocNoGRN);
        txtDocNoGRN.setBounds(397, 13, 91, 21);

        chkApprovedGRN.setText("Only Approved Documents");
        jPanel6.add(chkApprovedGRN);
        chkApprovedGRN.setBounds(340, 37, 218, 23);

        chkUnApprovedGRN.setText("Only UnApproved Documents");
        jPanel6.add(chkUnApprovedGRN);
        chkUnApprovedGRN.setBounds(340, 57, 212, 23);

        chkExecutedGRN.setText("Only Executed Documents");
        jPanel6.add(chkExecutedGRN);
        chkExecutedGRN.setBounds(340, 77, 188, 23);

        jPanel6.add(lblItemNameGRN);
        lblItemNameGRN.setBounds(176, 118, 364, 17);

        txtItemIDGRN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDGRNFocusLost(evt);
            }
        });
        txtItemIDGRN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDGRNKeyPressed(evt);
            }
        });

        jPanel6.add(txtItemIDGRN);
        txtItemIDGRN.setBounds(84, 116, 91, 21);

        jLabel25.setText("Item ID");
        jPanel6.add(jLabel25);
        jLabel25.setBounds(33, 120, 46, 15);

        cmdNextGRN.setText("Next");
        cmdNextGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextGRNActionPerformed(evt);
            }
        });

        jPanel6.add(cmdNextGRN);
        cmdNextGRN.setBounds(621, 374, 136, 25);

        Pane.addTab("GRN", jPanel6);

        jPanel14.setLayout(null);

        jPanel14.setBorder(new javax.swing.border.EtchedBorder());
        opgCreatedVoucher.setSelected(true);
        opgCreatedVoucher.setText("Created");
        gpGRN.add(opgCreatedVoucher);
        jPanel14.add(opgCreatedVoucher);
        opgCreatedVoucher.setBounds(10, 12, 81, 23);

        opgReleasedVoucher.setText("Released");
        gpGRN.add(opgReleasedVoucher);
        jPanel14.add(opgReleasedVoucher);
        opgReleasedVoucher.setBounds(100, 12, 81, 23);

        jLabel41.setText("From Date");
        jPanel14.add(jLabel41);
        jLabel41.setBounds(9, 46, 72, 15);

        jPanel14.add(txtFromDateVoucher);
        txtFromDateVoucher.setBounds(81, 46, 91, 21);

        jLabel42.setText("To");
        jPanel14.add(jLabel42);
        jLabel42.setBounds(177, 50, 20, 15);

        jPanel14.add(txtToDateVoucher);
        txtToDateVoucher.setBounds(203, 46, 91, 21);

        jLabel43.setText("Doc No.");
        jPanel14.add(jLabel43);
        jLabel43.setBounds(343, 15, 58, 15);

        jPanel14.add(txtDocNoVoucher);
        txtDocNoVoucher.setBounds(397, 13, 91, 21);

        chkApprovedVoucher.setText("Only Approved Documents");
        jPanel14.add(chkApprovedVoucher);
        chkApprovedVoucher.setBounds(340, 37, 218, 23);

        chkUnApprovedVoucher.setText("Only UnApproved Documents");
        jPanel14.add(chkUnApprovedVoucher);
        chkUnApprovedVoucher.setBounds(340, 57, 212, 23);

        jLabel44.setText("Party Code");
        jPanel14.add(jLabel44);
        jLabel44.setBounds(5, 89, 70, 15);

        txtPartyCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPartyCodeFocusLost(evt);
            }
        });
        txtPartyCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPartyCodeKeyPressed(evt);
            }
        });

        jPanel14.add(txtPartyCode);
        txtPartyCode.setBounds(83, 86, 91, 21);

        jPanel14.add(lblPartyName);
        lblPartyName.setBounds(179, 89, 364, 17);

        jPanel15.setLayout(null);

        jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel16.setLayout(null);

        jPanel16.setBorder(new javax.swing.border.EtchedBorder());
        TablePJV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(TablePJV);

        jPanel16.add(jScrollPane11);
        jScrollPane11.setBounds(5, 5, 720, 160);

        jPanel15.add(jPanel16);
        jPanel16.setBounds(3, 3, 730, 170);

        cmdNext.setText("Next >>");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        jPanel15.add(cmdNext);
        cmdNext.setBounds(646, 181, 88, 25);

        Tab.addTab("PJV List", jPanel15);

        jPanel17.setLayout(null);

        jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel18.setLayout(null);

        jPanel18.setBorder(new javax.swing.border.EtchedBorder());
        TablePayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(TablePayment);

        jPanel18.add(jScrollPane12);
        jScrollPane12.setBounds(5, 5, 730, 170);

        jPanel17.add(jPanel18);
        jPanel18.setBounds(1, 3, 740, 180);

        Tab.addTab("Payment Voucher List", jPanel17);

        jPanel14.add(Tab);
        Tab.setBounds(10, 160, 750, 240);

        jLabel45.setText("GRN No.");
        jPanel14.add(jLabel45);
        jLabel45.setBounds(16, 118, 58, 15);

        jPanel14.add(txtGRNNo);
        txtGRNNo.setBounds(84, 115, 91, 21);

        cmdShowVoucher.setText("Show");
        cmdShowVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowVoucherActionPerformed(evt);
            }
        });

        jPanel14.add(cmdShowVoucher);
        cmdShowVoucher.setBounds(669, 130, 88, 25);

        Pane.addTab("Vouchers", jPanel14);

        jPanel11.setLayout(null);

        jPanel11.setBorder(new javax.swing.border.EtchedBorder());
        chkItemAmend.setSelected(true);
        chkItemAmend.setText("Show Item Amendment of current user only");
        jPanel11.add(chkItemAmend);
        chkItemAmend.setBounds(5, 6, 310, 23);

        jPanel11.add(txtDocNoItemAmend);
        txtDocNoItemAmend.setBounds(397, 13, 91, 21);

        jLabel36.setText("Doc No.");
        jPanel11.add(jLabel36);
        jLabel36.setBounds(343, 15, 58, 15);

        opgReleasedItemAmend.setText("Released");
        gpPR.add(opgReleasedItemAmend);
        jPanel11.add(opgReleasedItemAmend);
        opgReleasedItemAmend.setBounds(103, 39, 81, 23);

        opgCreatedItemAmend.setSelected(true);
        opgCreatedItemAmend.setText("Created");
        gpPR.add(opgCreatedItemAmend);
        jPanel11.add(opgCreatedItemAmend);
        opgCreatedItemAmend.setBounds(13, 39, 81, 23);

        jLabel37.setText("From Date");
        jPanel11.add(jLabel37);
        jLabel37.setBounds(12, 73, 72, 15);

        jPanel11.add(txtFromDateItemAmend);
        txtFromDateItemAmend.setBounds(84, 73, 91, 21);

        jPanel11.add(txtToDateItemAmend);
        txtToDateItemAmend.setBounds(206, 73, 91, 21);

        jLabel38.setText("To");
        jPanel11.add(jLabel38);
        jLabel38.setBounds(180, 77, 20, 15);

        chkApprovedItemAmend.setText("Only Approved Documents");
        jPanel11.add(chkApprovedItemAmend);
        chkApprovedItemAmend.setBounds(340, 37, 218, 23);

        chkUnApprovedItemAmend.setText("Only UnApproved Documents");
        jPanel11.add(chkUnApprovedItemAmend);
        chkUnApprovedItemAmend.setBounds(340, 57, 212, 23);

        TableItemAmend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(TableItemAmend);

        jPanel11.add(jScrollPane10);
        jScrollPane10.setBounds(8, 178, 749, 187);

        cmdOpenItemAmend.setText("Show Document");
        cmdOpenItemAmend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenItemAmendActionPerformed(evt);
            }
        });

        jPanel11.add(cmdOpenItemAmend);
        cmdOpenItemAmend.setBounds(620, 371, 136, 25);

        cmdShowItemAmend.setText("Show");
        cmdShowItemAmend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowItemAmendActionPerformed(evt);
            }
        });

        jPanel11.add(cmdShowItemAmend);
        cmdShowItemAmend.setBounds(667, 77, 88, 25);

        Pane.addTab("Item Amendment", jPanel11);

        jPanel10.setLayout(null);

        jPanel10.setBorder(new javax.swing.border.EtchedBorder());
        chkItem.setSelected(true);
        chkItem.setText("Show Item of current user only");
        jPanel10.add(chkItem);
        chkItem.setBounds(5, 6, 236, 23);

        jPanel10.add(txtDocNoItem);
        txtDocNoItem.setBounds(397, 13, 91, 21);

        jLabel33.setText("Doc No.");
        jPanel10.add(jLabel33);
        jLabel33.setBounds(343, 15, 58, 15);

        opgReleasedItem.setText("Released");
        gpPR.add(opgReleasedItem);
        jPanel10.add(opgReleasedItem);
        opgReleasedItem.setBounds(103, 39, 81, 23);

        opgCreatedItem.setSelected(true);
        opgCreatedItem.setText("Created");
        gpPR.add(opgCreatedItem);
        jPanel10.add(opgCreatedItem);
        opgCreatedItem.setBounds(13, 39, 81, 23);

        jLabel34.setText("From Date");
        jPanel10.add(jLabel34);
        jLabel34.setBounds(12, 73, 72, 15);

        jPanel10.add(txtFromDateItem);
        txtFromDateItem.setBounds(84, 73, 91, 21);

        jPanel10.add(txtToDateItem);
        txtToDateItem.setBounds(206, 73, 91, 21);

        jLabel35.setText("To");
        jPanel10.add(jLabel35);
        jLabel35.setBounds(180, 77, 20, 15);

        chkApprovedItem.setText("Only Approved Documents");
        jPanel10.add(chkApprovedItem);
        chkApprovedItem.setBounds(340, 37, 218, 23);

        chkUnApprovedItem.setText("Only UnApproved Documents");
        jPanel10.add(chkUnApprovedItem);
        chkUnApprovedItem.setBounds(340, 57, 212, 23);

        TableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TableItem);

        jPanel10.add(jScrollPane9);
        jScrollPane9.setBounds(8, 178, 749, 187);

        cmdOpenItem.setText("Show Document");
        cmdOpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenItemActionPerformed(evt);
            }
        });

        jPanel10.add(cmdOpenItem);
        cmdOpenItem.setBounds(619, 374, 136, 25);

        cmdShowItem.setText("Show");
        cmdShowItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowItemActionPerformed(evt);
            }
        });

        jPanel10.add(cmdShowItem);
        cmdShowItem.setBounds(667, 77, 88, 25);

        Pane.addTab("Item", jPanel10);

        jPanel9.setLayout(null);

        jPanel9.setBorder(new javax.swing.border.EtchedBorder());
        chkSuppAmend.setSelected(true);
        chkSuppAmend.setText("Show Supplier Amendment of current user only");
        jPanel9.add(chkSuppAmend);
        chkSuppAmend.setBounds(5, 6, 331, 23);

        jPanel9.add(txtDocNoSuppAmend);
        txtDocNoSuppAmend.setBounds(397, 13, 91, 21);

        jLabel30.setText("Doc No.");
        jPanel9.add(jLabel30);
        jLabel30.setBounds(343, 15, 58, 15);

        opgReleasedSuppAmend.setText("Released");
        gpPR.add(opgReleasedSuppAmend);
        jPanel9.add(opgReleasedSuppAmend);
        opgReleasedSuppAmend.setBounds(103, 39, 81, 23);

        opgCreatedSuppAmend.setSelected(true);
        opgCreatedSuppAmend.setText("Created");
        gpPR.add(opgCreatedSuppAmend);
        jPanel9.add(opgCreatedSuppAmend);
        opgCreatedSuppAmend.setBounds(13, 39, 81, 23);

        jLabel31.setText("From Date");
        jPanel9.add(jLabel31);
        jLabel31.setBounds(12, 73, 72, 15);

        jPanel9.add(txtFromDateSuppAmend);
        txtFromDateSuppAmend.setBounds(84, 73, 91, 21);

        jPanel9.add(txtToDateSuppAmend);
        txtToDateSuppAmend.setBounds(206, 73, 91, 21);

        jLabel32.setText("To");
        jPanel9.add(jLabel32);
        jLabel32.setBounds(180, 77, 20, 15);

        chkApprovedSuppAmend.setText("Only Approved Documents");
        jPanel9.add(chkApprovedSuppAmend);
        chkApprovedSuppAmend.setBounds(340, 37, 218, 23);

        chkUnApprovedSuppAmend.setText("Only UnApproved Documents");
        jPanel9.add(chkUnApprovedSuppAmend);
        chkUnApprovedSuppAmend.setBounds(340, 57, 212, 23);

        TableSuppAmend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(TableSuppAmend);

        jPanel9.add(jScrollPane8);
        jScrollPane8.setBounds(8, 178, 749, 187);

        cmdOpenSuppAmend.setText("Show Document");
        cmdOpenSuppAmend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenSuppAmendActionPerformed(evt);
            }
        });

        jPanel9.add(cmdOpenSuppAmend);
        cmdOpenSuppAmend.setBounds(619, 373, 136, 25);

        cmdShowSuppAmend.setText("Show");
        cmdShowSuppAmend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowSuppAmendActionPerformed(evt);
            }
        });

        jPanel9.add(cmdShowSuppAmend);
        cmdShowSuppAmend.setBounds(667, 77, 88, 25);

        Pane.addTab("Supplier Amendment", jPanel9);

        jPanel8.setLayout(null);

        jPanel8.setBorder(new javax.swing.border.EtchedBorder());
        chkSupp.setSelected(true);
        chkSupp.setText("Show Supplier of current user only");
        jPanel8.add(chkSupp);
        chkSupp.setBounds(5, 6, 268, 23);

        jPanel8.add(txtDocNoSupp);
        txtDocNoSupp.setBounds(397, 13, 91, 21);

        jLabel27.setText("Doc No.");
        jPanel8.add(jLabel27);
        jLabel27.setBounds(343, 15, 58, 15);

        opgReleasedSupp.setText("Released");
        gpPR.add(opgReleasedSupp);
        jPanel8.add(opgReleasedSupp);
        opgReleasedSupp.setBounds(103, 39, 81, 23);

        opgCreatedSupp.setSelected(true);
        opgCreatedSupp.setText("Created");
        gpPR.add(opgCreatedSupp);
        jPanel8.add(opgCreatedSupp);
        opgCreatedSupp.setBounds(13, 39, 81, 23);

        jLabel28.setText("From Date");
        jPanel8.add(jLabel28);
        jLabel28.setBounds(12, 73, 72, 15);

        jPanel8.add(txtFromDateSupp);
        txtFromDateSupp.setBounds(84, 73, 91, 21);

        jPanel8.add(txtToDateSupp);
        txtToDateSupp.setBounds(206, 73, 91, 21);

        jLabel29.setText("To");
        jPanel8.add(jLabel29);
        jLabel29.setBounds(180, 77, 20, 15);

        chkApprovedSupp.setText("Only Approved Documents");
        jPanel8.add(chkApprovedSupp);
        chkApprovedSupp.setBounds(340, 37, 218, 23);

        chkUnApprovedSupp.setText("Only UnApproved Documents");
        jPanel8.add(chkUnApprovedSupp);
        chkUnApprovedSupp.setBounds(340, 57, 212, 23);

        TableSupp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TableSupp);

        jPanel8.add(jScrollPane7);
        jScrollPane7.setBounds(8, 178, 749, 187);

        cmdOpenSupp.setText("Show Document");
        cmdOpenSupp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenSuppActionPerformed(evt);
            }
        });

        jPanel8.add(cmdOpenSupp);
        cmdOpenSupp.setBounds(620, 372, 136, 25);

        cmdShowSupp.setText("Show");
        cmdShowSupp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowSuppActionPerformed(evt);
            }
        });

        jPanel8.add(cmdShowSupp);
        cmdShowSupp.setBounds(667, 77, 88, 25);

        Pane.addTab("Supplier", jPanel8);

        jPanel7.setLayout(null);

        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        chkRIA.setSelected(true);
        chkRIA.setText("Show RIA of current user only");
        jPanel7.add(chkRIA);
        chkRIA.setBounds(5, 6, 236, 23);

        opgCreatedRIA.setSelected(true);
        opgCreatedRIA.setText("Created");
        opgRIA.add(opgCreatedRIA);
        jPanel7.add(opgCreatedRIA);
        opgCreatedRIA.setBounds(13, 39, 81, 23);

        opgReleasedRIA.setText("Released");
        opgRIA.add(opgReleasedRIA);
        jPanel7.add(opgReleasedRIA);
        opgReleasedRIA.setBounds(103, 39, 81, 23);

        jLabel18.setText("Doc No.");
        jPanel7.add(jLabel18);
        jLabel18.setBounds(343, 15, 58, 15);

        jPanel7.add(txtDocNoRIA);
        txtDocNoRIA.setBounds(397, 13, 91, 21);

        chkApprovedRIA.setText("Only Approved Documents");
        jPanel7.add(chkApprovedRIA);
        chkApprovedRIA.setBounds(340, 37, 218, 23);

        chkUnApprovedRIA.setText("Only UnApproved Documents");
        jPanel7.add(chkUnApprovedRIA);
        chkUnApprovedRIA.setBounds(340, 57, 212, 23);

        chkExecutedRIA.setText("Only Executed Documents");
        jPanel7.add(chkExecutedRIA);
        chkExecutedRIA.setBounds(340, 77, 188, 23);

        jPanel7.add(txtToDateRIA);
        txtToDateRIA.setBounds(206, 73, 91, 21);

        jLabel19.setText("To");
        jPanel7.add(jLabel19);
        jLabel19.setBounds(180, 77, 20, 15);

        jPanel7.add(txtFromDateRIA);
        txtFromDateRIA.setBounds(84, 73, 91, 21);

        jLabel20.setText("From Date");
        jPanel7.add(jLabel20);
        jLabel20.setBounds(12, 73, 72, 15);

        TableRIA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(TableRIA);

        jPanel7.add(jScrollPane6);
        jScrollPane6.setBounds(8, 178, 750, 187);

        cmdOpenRIA.setText("Show Document");
        cmdOpenRIA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenRIAActionPerformed(evt);
            }
        });

        jPanel7.add(cmdOpenRIA);
        cmdOpenRIA.setBounds(622, 374, 136, 25);

        cmdShowRIA.setText("Show");
        cmdShowRIA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRIAActionPerformed(evt);
            }
        });

        jPanel7.add(cmdShowRIA);
        cmdShowRIA.setBounds(668, 78, 88, 25);

        jPanel7.add(lblItemNameRIA);
        lblItemNameRIA.setBounds(176, 118, 364, 17);

        txtItemIDRIA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemIDRIAFocusLost(evt);
            }
        });
        txtItemIDRIA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemIDRIAKeyPressed(evt);
            }
        });

        jPanel7.add(txtItemIDRIA);
        txtItemIDRIA.setBounds(84, 116, 91, 21);

        jLabel26.setText("Item ID");
        jPanel7.add(jLabel26);
        jLabel26.setBounds(33, 120, 46, 15);

        cmbDept.setEnabled(false);
        jPanel7.add(cmbDept);
        cmbDept.setBounds(85, 146, 345, 24);

        chkDept.setText("Dept");
        chkDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkDeptItemStateChanged(evt);
            }
        });

        jPanel7.add(chkDept);
        chkDept.setBounds(9, 147, 70, 23);

        Pane.addTab("RIA", jPanel7);

        jPanel19.setLayout(null);

        chkJob.setSelected(true);
        chkJob.setText("Show Jobwork of current user only");
        jPanel19.add(chkJob);
        chkJob.setBounds(5, 6, 254, 23);

        opgCreatedJob.setSelected(true);
        opgCreatedJob.setText("Created");
        gpMIR.add(opgCreatedJob);
        jPanel19.add(opgCreatedJob);
        opgCreatedJob.setBounds(13, 39, 81, 23);

        opgReleasedJob.setText("Released");
        gpMIR.add(opgReleasedJob);
        jPanel19.add(opgReleasedJob);
        opgReleasedJob.setBounds(103, 39, 81, 23);

        jLabel46.setText("From Date");
        jPanel19.add(jLabel46);
        jLabel46.setBounds(12, 73, 72, 15);

        jPanel19.add(txtFromDateJob);
        txtFromDateJob.setBounds(84, 73, 91, 21);

        jLabel47.setText("To");
        jPanel19.add(jLabel47);
        jLabel47.setBounds(180, 77, 20, 15);

        jPanel19.add(txtToDateJob);
        txtToDateJob.setBounds(206, 73, 91, 21);

        jPanel19.add(txtItemIDJob);
        txtItemIDJob.setBounds(84, 116, 91, 21);

        jLabel48.setText("Item ID");
        jPanel19.add(jLabel48);
        jLabel48.setBounds(33, 120, 46, 15);

        TableJob.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(TableJob);

        jPanel19.add(jScrollPane13);
        jScrollPane13.setBounds(8, 178, 750, 187);

        jLabel49.setText("Doc No.");
        jPanel19.add(jLabel49);
        jLabel49.setBounds(343, 15, 58, 15);

        jPanel19.add(txtDocNoJob);
        txtDocNoJob.setBounds(397, 13, 91, 21);

        chkApprovedJob.setText("Only Approved Documents");
        jPanel19.add(chkApprovedJob);
        chkApprovedJob.setBounds(340, 37, 218, 23);

        chkUnApprovedJob.setText("Only UnApproved Documents");
        jPanel19.add(chkUnApprovedJob);
        chkUnApprovedJob.setBounds(340, 57, 212, 23);

        chkExecutedJob.setText("Only Executed Documents");
        jPanel19.add(chkExecutedJob);
        chkExecutedJob.setBounds(340, 77, 188, 23);

        cmdShowJob.setText("Show");
        jPanel19.add(cmdShowJob);
        cmdShowJob.setBounds(667, 78, 88, 25);

        cmdOpenJob.setText("Show Document");
        cmdOpenJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenJobActionPerformed(evt);
            }
        });

        jPanel19.add(cmdOpenJob);
        cmdOpenJob.setBounds(480, 374, 136, 25);

        cmdNextJob.setText("Next");
        jPanel19.add(cmdNextJob);
        cmdNextJob.setBounds(621, 374, 136, 25);

        Pane.addTab("Jobwork", jPanel19);

        getContentPane().add(Pane);
        Pane.setBounds(8, 76, 795, 433);

        jLabel2.setText("User");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(12, 45, 37, 15);

        getContentPane().add(cmbUser);
        cmbUser.setBounds(48, 42, 345, 24);

        jPanel12.setBackground(new java.awt.Color(255, 255, 0));
        getContentPane().add(jPanel12);
        jPanel12.setBounds(10, 517, 38, 20);

        jLabel39.setText("Fully Executed");
        getContentPane().add(jLabel39);
        jLabel39.setBounds(55, 520, 105, 15);

        jLabel40.setText("Partially Executed");
        getContentPane().add(jLabel40);
        jLabel40.setBounds(213, 521, 129, 15);

        jPanel13.setBackground(new java.awt.Color(0, 255, 102));
        getContentPane().add(jPanel13);
        jPanel13.setBounds(168, 518, 38, 20);

    }//GEN-END:initComponents
    
    private void cmdOpenJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenJobActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableJob.getValueAt(TableJob.getSelectedRow(),1);
            AppletFrame aFrame=new AppletFrame("Job work");
            aFrame.startAppletEx("EITLERP.Stores.frmJobwork","Job work");
            frmJobwork ObjDoc=(frmJobwork) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdOpenJobActionPerformed
    
    private void cmdNextPO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextPO1ActionPerformed
        // TODO add your handling code here:
        if(TablePO.getRowCount()>0&&TablePO.getSelectedRow()>=0) {
            RefDocNo=(String)TablePO.getValueAt(TablePO.getSelectedRow(), 1);
            
            //Manually de-select all options of Indent
            chkJob.setSelected(false);
            opgCreatedJob.setSelected(true);
            txtFromDateJob.setText("");
            txtToDateJob.setText("");
            txtDocNoJob.setText("");
            chkApprovedJob.setSelected(false);
            chkUnApprovedJob.setSelected(false);
            chkExecutedJob.setSelected(false);
            
            //Now Generate the Indent Grid
            GenerateJobGrid();
            Pane.setSelectedIndex(11);
        }
        
    }//GEN-LAST:event_cmdNextPO1ActionPerformed
    
    private void cmdNextGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextGRNActionPerformed
        // TODO add your handling code here:
        try {
            
            if(TableGRN.getRowCount()>0&&TableGRN.getSelectedRow()>=0) {
                RefDocNo=(String)TableGRN.getValueAt(TableGRN.getSelectedRow(), 1);
                
                txtGRNNo.setText(RefDocNo);
                String PartyCode=data.getStringValueFromDB("SELECT SUPP_ID FROM D_INV_GRN_HEADER WHERE GRN_NO='"+RefDocNo+"'");
                
                txtPartyCode.setText(PartyCode);
                opgCreatedVoucher.setSelected(true);
                txtFromDateVoucher.setText("");
                txtToDateVoucher.setText("");
                txtDocNoVoucher.setText("");
                chkApprovedVoucher.setSelected(false);
                chkUnApprovedVoucher.setSelected(false);
                
                GenerateGridPJV();
                Pane.setSelectedIndex(5);
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdNextGRNActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        try {
            
            if(TablePJV.getSelectedRow()>=0) {
                txtGRNNo.setText(DataModelPJV.getValueByVariable("GRN_NO",TablePJV.getSelectedRow()));
                GenerateGridPayment();
                Tab.setSelectedIndex(1);
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdShowVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowVoucherActionPerformed
        // TODO add your handling code here:
        try {
            if(Tab.getSelectedIndex()==0) {
                GenerateGridPJV();
            }
            else {
                GenerateGridPayment();
            }
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdShowVoucherActionPerformed
    
    private void txtPartyCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPartyCodeFocusLost
        // TODO add your handling code here:
        lblPartyName.setText(clsPartyMaster.getAccountName("",txtPartyCode.getText()));
    }//GEN-LAST:event_txtPartyCodeFocusLost
    
    private void txtPartyCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPartyCodeKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) {
            LOV aList=new LOV();
            
            aList.SQL="SELECT PARTY_CODE,PARTY_NAME FROM D_FIN_PARTY_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 ORDER BY PARTY_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            aList.UseSpecifiedConn=true;
            aList.dbURL=FinanceGlobal.FinURL;
            
            if(aList.ShowLOV()) {
                txtPartyCode.setText(aList.ReturnVal);
                lblPartyName.setText(clsPartyMaster.getAccountName("",txtPartyCode.getText()));
            }
            
        }
        
    }//GEN-LAST:event_txtPartyCodeKeyPressed
    
    private void chkDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkDeptItemStateChanged
        // TODO add your handling code here:
        cmbDept.setEnabled(chkDept.isSelected());
    }//GEN-LAST:event_chkDeptItemStateChanged
    
    private void cmdOpenItemAmendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenItemAmendActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableItemAmend.getValueAt(TableItemAmend.getSelectedRow(),1);
            AppletFrame aFrame=new AppletFrame("Item Master Updation");
            aFrame.startAppletEx("EITLERP.frmItemAmend","Item Master Updation");
            frmItemAmend ObjDoc=(frmItemAmend) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,Integer.parseInt(DocNo));
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenItemAmendActionPerformed
    
    private void cmdOpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenItemActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableItem.getValueAt(TableItem.getSelectedRow(),1);
            AppletFrame aFrame=new AppletFrame("Item Master");
            aFrame.startAppletEx("EITLERP.frmItem","Item Master");
            frmItem ObjDoc=(frmItem) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenItemActionPerformed
    
    private void cmdOpenSuppAmendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenSuppAmendActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableSuppAmend.getValueAt(TableSuppAmend.getSelectedRow(),1);
            AppletFrame aFrame=new AppletFrame("Supplier Amendment");
            aFrame.startAppletEx("EITLERP.frmSupplierAmend","Supplier Amendment");
            frmSupplierAmend ObjDoc=(frmSupplierAmend) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdOpenSuppAmendActionPerformed
    
    private void cmdOpenSuppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenSuppActionPerformed
        // TODO add your handling code here:
        
        try {
            String DocNo=(String)TableSupp.getValueAt(TableSupp.getSelectedRow(),1);
            AppletFrame aFrame=new AppletFrame("Supplier");
            aFrame.startAppletEx("EITLERP.frmSupplier","Supplier");
            frmSupplier ObjDoc=(frmSupplier) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            
        }
        catch(Exception e) {
            
        }
        
        
    }//GEN-LAST:event_cmdOpenSuppActionPerformed
    
    private void cmdShowItemAmendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowItemAmendActionPerformed
        // TODO add your handling code here:
        GenerateItemAmendGrid();
    }//GEN-LAST:event_cmdShowItemAmendActionPerformed
    
    private void cmdShowItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowItemActionPerformed
        // TODO add your handling code here:
        GenerateItemGrid();
    }//GEN-LAST:event_cmdShowItemActionPerformed
    
    private void cmdShowSuppAmendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowSuppAmendActionPerformed
        // TODO add your handling code here:
        GenerateSuppAmendGrid();
    }//GEN-LAST:event_cmdShowSuppAmendActionPerformed
    
    private void cmdShowSuppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowSuppActionPerformed
        // TODO add your handling code here:
        GenerateSuppGrid();
    }//GEN-LAST:event_cmdShowSuppActionPerformed
    
    private void txtItemIDRIAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDRIAFocusLost
        // TODO add your handling code here:
        lblItemNameRIA.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemIDRIA.getText()));
    }//GEN-LAST:event_txtItemIDRIAFocusLost
    
    private void txtItemIDRIAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDRIAKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemIDRIA.setText(aList.ReturnVal);
                lblItemNameRIA.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        
    }//GEN-LAST:event_txtItemIDRIAKeyPressed
    
    private void txtItemIDGRNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDGRNFocusLost
        // TODO add your handling code here:
        lblItemNameGRN.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemIDGRN.getText()));
    }//GEN-LAST:event_txtItemIDGRNFocusLost
    
    private void txtItemIDGRNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDGRNKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemIDGRN.setText(aList.ReturnVal);
                lblItemNameGRN.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        
    }//GEN-LAST:event_txtItemIDGRNKeyPressed
    
    private void txtItemIDMIRFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDMIRFocusLost
        // TODO add your handling code here:
        lblItemNameMIR.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemIDMIR.getText()));
    }//GEN-LAST:event_txtItemIDMIRFocusLost
    
    private void txtItemIDMIRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDMIRKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemIDMIR.setText(aList.ReturnVal);
                lblItemNameMIR.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        
    }//GEN-LAST:event_txtItemIDMIRKeyPressed
    
    private void txtItemIDPOFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDPOFocusLost
        // TODO add your handling code here:
        lblItemNamePO.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemIDPO.getText()));
    }//GEN-LAST:event_txtItemIDPOFocusLost
    
    private void txtItemIDPOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDPOKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemIDPO.setText(aList.ReturnVal);
                lblItemNamePO.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        
    }//GEN-LAST:event_txtItemIDPOKeyPressed
    
    private void txtItemIDIndentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDIndentFocusLost
        // TODO add your handling code here:
        lblItemNameIndent.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemIDIndent.getText()));
    }//GEN-LAST:event_txtItemIDIndentFocusLost
    
    private void txtItemIDIndentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDIndentKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemIDIndent.setText(aList.ReturnVal);
                lblItemNameIndent.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        
    }//GEN-LAST:event_txtItemIDIndentKeyPressed
    
    private void txtItemIDPRFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemIDPRFocusLost
        // TODO add your handling code here:
        lblItemNamePR.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,txtItemIDPR.getText()));
    }//GEN-LAST:event_txtItemIDPRFocusLost
    
    private void txtItemIDPRKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemIDPRKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==112) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND APPROVED=1 AND CANCELLED=0 ORDER BY ITEM_ID";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=2;
            
            if(aList.ShowLOV()) {
                txtItemIDPR.setText(aList.ReturnVal);
                lblItemNamePR.setText(clsItem.getItemName(EITLERPGLOBAL.gCompanyID,aList.ReturnVal));
            }
        }
        
    }//GEN-LAST:event_txtItemIDPRKeyPressed
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
                                                    }//GEN-LAST:event_formMouseClicked
    
    private void cmdOpenRIAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenRIAActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableRIA.getValueAt(TableRIA.getSelectedRow(),1);
            AppletFrame aFrame=new AppletFrame("Rate Approval");
            aFrame.startAppletEx("EITLERP.Purchase.frmRateApproval","Rate Approval");
            frmRateApproval ObjDoc=(frmRateApproval) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenRIAActionPerformed
    
    private void cmdShowRIAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRIAActionPerformed
        // TODO add your handling code here:
        //chkRIA.setSelected(true);
        GenerateRIAGrid();
    }//GEN-LAST:event_cmdShowRIAActionPerformed
    
    private void cmdOpenGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenGRNActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableGRN.getValueAt(TableGRN.getSelectedRow(),1);
            int GRNType=clsGRN.getGRNType(EITLERPGLOBAL.gCompanyID,DocNo);
            
            if(GRNType==1) {
                AppletFrame aFrame=new AppletFrame("GRN General");
                aFrame.startAppletEx("EITLERP.Stores.frmGRNGen","GRN General");
                frmGRNGen ObjDoc=(frmGRNGen) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            
            //==========*
            if(GRNType==2) {
                AppletFrame aFrame=new AppletFrame("GRN Raw Material");
                aFrame.startAppletEx("EITLERP.Stores.frmGRN","GRN Raw Material");
                frmGRN ObjDoc=(frmGRN) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            
        }
        catch(Exception e) {
            
        }
        
    }//GEN-LAST:event_cmdOpenGRNActionPerformed
    
    private void cmdShowGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowGRNActionPerformed
        // TODO add your handling code here:
        RefDocNo="";
        chkGRN.setSelected(true);
        GenerateGRNGrid();
    }//GEN-LAST:event_cmdShowGRNActionPerformed
    
    private void cmdNextMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextMIRActionPerformed
        // TODO add your handling code here:
        if(TableMIR.getRowCount()>0&&TableMIR.getSelectedRow()>=0) {
            RefDocNo=(String)TableMIR.getValueAt(TableMIR.getSelectedRow(), 1);
            
            //Manually de-select all options of Indent
            chkGRN.setSelected(false);
            opgCreatedGRN.setSelected(true);
            txtFromDateGRN.setText("");
            txtToDateGRN.setText("");
            txtDocNoGRN.setText("");
            chkApprovedGRN.setSelected(false);
            chkUnApprovedGRN.setSelected(false);
            chkExecutedGRN.setSelected(false);
            
            //Now Generate the Indent Grid
            GenerateGRNGrid();
            Pane.setSelectedIndex(4);
        }
    }//GEN-LAST:event_cmdNextMIRActionPerformed
    
    private void cmdOpenMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenMIRActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableMIR.getValueAt(TableMIR.getSelectedRow(),1);
            int MIRType=clsMIRGen.getMIRType(EITLERPGLOBAL.gCompanyID,DocNo);
            
            if(MIRType==1) {
                AppletFrame aFrame=new AppletFrame("MIR General");
                aFrame.startAppletEx("EITLERP.Stores.frmMIRGen","MIR General");
                frmMIRGen ObjDoc=(frmMIRGen) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
            
            //======*
            if(MIRType==2) {
                AppletFrame aFrame=new AppletFrame("MIR Raw Material");
                aFrame.startAppletEx("EITLERP.Stores.frmMIR","MIR Raw Material");
                frmMIR ObjDoc=(frmMIR) aFrame.ObjApplet;
                ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            }
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenMIRActionPerformed
    
    private void cmdShowMIRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowMIRActionPerformed
        // TODO add your handling code here:
        RefDocNo="";
        chkMIR.setSelected(true);
        GenerateMIRGrid();
    }//GEN-LAST:event_cmdShowMIRActionPerformed
    
    private void cmdNextPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextPOActionPerformed
        // TODO add your handling code here:
        if(TablePO.getRowCount()>0&&TablePO.getSelectedRow()>=0) {
            RefDocNo=(String)TablePO.getValueAt(TablePO.getSelectedRow(), 1);
            
            //Manually de-select all options of Indent
            chkMIR.setSelected(false);
            opgCreatedMIR.setSelected(true);
            txtFromDateMIR.setText("");
            txtToDateMIR.setText("");
            txtDocNoMIR.setText("");
            chkApprovedMIR.setSelected(false);
            chkUnApprovedMIR.setSelected(false);
            chkExecutedMIR.setSelected(false);
            
            //Now Generate the Indent Grid
            GenerateMIRGrid();
            Pane.setSelectedIndex(3);
        }
    }//GEN-LAST:event_cmdNextPOActionPerformed
    
    private void cmdOpenPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenPOActionPerformed
        // TODO add your handling code here:
        try {
            
            String PONo=(String)TablePO.getValueAt(TablePO.getSelectedRow(),1);
            
            int POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID,PONo);
            AppletFrame aFrame=new AppletFrame("Purchase Order");
            aFrame.startAppletEx("EITLERP.Purchase.frmPOGen","Purchase Order");
            frmPOGen ObjDoc=(frmPOGen) aFrame.ObjApplet;
            ObjDoc.POType=POType;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,PONo);
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenPOActionPerformed
    
    private void cmdShowPOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowPOActionPerformed
        // TODO add your handling code here:
        RefDocNo="";
        chkPO.setSelected(true);
        GeneratePOGrid();
    }//GEN-LAST:event_cmdShowPOActionPerformed
    
    private void cmdNextIndentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextIndentActionPerformed
        // TODO add your handling code here:
        if(TableIndent.getRowCount()>0&&TableIndent.getSelectedRow()>=0) {
            RefDocNo=(String)TableIndent.getValueAt(TableIndent.getSelectedRow(), 1);
            
            //Manually de-select all options of Indent
            chkPO.setSelected(false);
            opgCreatedPO.setSelected(true);
            txtFromDatePO.setText("");
            txtToDatePO.setText("");
            txtDocNoPO.setText("");
            chkApprovedPO.setSelected(false);
            chkUnApprovedPO.setSelected(false);
            chkExecutedPO.setSelected(false);
            
            //Now Generate the Indent Grid
            GeneratePOGrid();
            Pane.setSelectedIndex(2);
            
        }
        
    }//GEN-LAST:event_cmdNextIndentActionPerformed
    
    private void cmdShowIndentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowIndentActionPerformed
        // TODO add your handling code here:
        RefDocNo="";
        chkIndent.setSelected(true);
        GenerateIndentGrid();
    }//GEN-LAST:event_cmdShowIndentActionPerformed
    
    private void cmdOpenIndentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenIndentActionPerformed
        // TODO add your handling code here:
        try {
            String DocNo=(String)TableIndent.getValueAt(TableIndent.getSelectedRow(), 1);
            
            AppletFrame aFrame=new AppletFrame("Indent");
            aFrame.startAppletEx("EITLERP.Stores.FrmIndent","Indent");
            FrmIndent ObjDoc=(FrmIndent) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenIndentActionPerformed
    
    private void cmdOpenPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenPRActionPerformed
        // TODO add your handling code here:
        try {
            
            String DocNo=(String)TablePR.getValueAt(TablePR.getSelectedRow(),1);
            
            AppletFrame aFrame=new AppletFrame("Purchase Requisition");
            aFrame.startAppletEx("EITLERP.Stores.frmMR","Purchase Requisition");
            frmMR ObjDoc=(frmMR) aFrame.ObjApplet;
            ObjDoc.FindEx((int)EITLERPGLOBAL.gCompanyID,DocNo);
            
        }
        catch(Exception e) {
            
        }
    }//GEN-LAST:event_cmdOpenPRActionPerformed
    
    private void cmdNextPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextPRActionPerformed
        // TODO add your handling code here:
        if(TablePR.getRowCount()>0&&TablePR.getSelectedRow()>=0) {
            RefDocNo=(String)TablePR.getValueAt(TablePR.getSelectedRow(), 1);
            
            //Manually de-select all options of Indent
            chkIndent.setSelected(false);
            opgCreatedIndent.setSelected(true);
            txtFromDateIndent.setText("");
            txtToDateIndent.setText("");
            txtDocNoIndent.setText("");
            chkApprovedIndent.setSelected(false);
            chkUnApprovedIndent.setSelected(false);
            chkExecutedIndent.setSelected(false);
            
            //Now Generate the Indent Grid
            GenerateIndentGrid();
            Pane.setSelectedIndex(1);
            
        }
    }//GEN-LAST:event_cmdNextPRActionPerformed
    
    private void cmdShowPRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowPRActionPerformed
        // TODO add your handling code here:
        chkPR.setSelected(true);
        GeneratePRGrid();
    }//GEN-LAST:event_cmdShowPRActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Pane;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JTable TableGRN;
    private javax.swing.JTable TableIndent;
    private javax.swing.JTable TableItem;
    private javax.swing.JTable TableItemAmend;
    private javax.swing.JTable TableJob;
    private javax.swing.JTable TableMIR;
    private javax.swing.JTable TablePJV;
    private javax.swing.JTable TablePO;
    private javax.swing.JTable TablePR;
    private javax.swing.JTable TablePayment;
    private javax.swing.JTable TableRIA;
    private javax.swing.JTable TableSupp;
    private javax.swing.JTable TableSuppAmend;
    private javax.swing.JCheckBox chkApprovedGRN;
    private javax.swing.JCheckBox chkApprovedIndent;
    private javax.swing.JCheckBox chkApprovedItem;
    private javax.swing.JCheckBox chkApprovedItemAmend;
    private javax.swing.JCheckBox chkApprovedJob;
    private javax.swing.JCheckBox chkApprovedMIR;
    private javax.swing.JCheckBox chkApprovedPO;
    private javax.swing.JCheckBox chkApprovedPR;
    private javax.swing.JCheckBox chkApprovedRIA;
    private javax.swing.JCheckBox chkApprovedSupp;
    private javax.swing.JCheckBox chkApprovedSuppAmend;
    private javax.swing.JCheckBox chkApprovedVoucher;
    private javax.swing.JCheckBox chkDept;
    private javax.swing.JCheckBox chkExecutedGRN;
    private javax.swing.JCheckBox chkExecutedIndent;
    private javax.swing.JCheckBox chkExecutedJob;
    private javax.swing.JCheckBox chkExecutedMIR;
    private javax.swing.JCheckBox chkExecutedPO;
    private javax.swing.JCheckBox chkExecutedPR;
    private javax.swing.JCheckBox chkExecutedRIA;
    private javax.swing.JCheckBox chkGRN;
    private javax.swing.JCheckBox chkIndent;
    private javax.swing.JCheckBox chkItem;
    private javax.swing.JCheckBox chkItemAmend;
    private javax.swing.JCheckBox chkJob;
    private javax.swing.JCheckBox chkMIR;
    private javax.swing.JCheckBox chkPO;
    private javax.swing.JCheckBox chkPR;
    private javax.swing.JCheckBox chkRIA;
    private javax.swing.JRadioButton chkReleasedPO;
    private javax.swing.JCheckBox chkSupp;
    private javax.swing.JCheckBox chkSuppAmend;
    private javax.swing.JCheckBox chkUnApprovedGRN;
    private javax.swing.JCheckBox chkUnApprovedIndent;
    private javax.swing.JCheckBox chkUnApprovedItem;
    private javax.swing.JCheckBox chkUnApprovedItemAmend;
    private javax.swing.JCheckBox chkUnApprovedJob;
    private javax.swing.JCheckBox chkUnApprovedMIR;
    private javax.swing.JCheckBox chkUnApprovedPO;
    private javax.swing.JCheckBox chkUnApprovedPR;
    private javax.swing.JCheckBox chkUnApprovedRIA;
    private javax.swing.JCheckBox chkUnApprovedSupp;
    private javax.swing.JCheckBox chkUnApprovedSuppAmend;
    private javax.swing.JCheckBox chkUnApprovedVoucher;
    private javax.swing.JComboBox cmbDept;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNextGRN;
    private javax.swing.JButton cmdNextIndent;
    private javax.swing.JButton cmdNextJob;
    private javax.swing.JButton cmdNextMIR;
    private javax.swing.JButton cmdNextPO;
    private javax.swing.JButton cmdNextPO1;
    private javax.swing.JButton cmdNextPR;
    private javax.swing.JButton cmdOpenGRN;
    private javax.swing.JButton cmdOpenIndent;
    private javax.swing.JButton cmdOpenItem;
    private javax.swing.JButton cmdOpenItemAmend;
    private javax.swing.JButton cmdOpenJob;
    private javax.swing.JButton cmdOpenMIR;
    private javax.swing.JButton cmdOpenPO;
    private javax.swing.JButton cmdOpenPR;
    private javax.swing.JButton cmdOpenRIA;
    private javax.swing.JButton cmdOpenSupp;
    private javax.swing.JButton cmdOpenSuppAmend;
    private javax.swing.JButton cmdShowGRN;
    private javax.swing.JButton cmdShowIndent;
    private javax.swing.JButton cmdShowItem;
    private javax.swing.JButton cmdShowItemAmend;
    private javax.swing.JButton cmdShowJob;
    private javax.swing.JButton cmdShowMIR;
    private javax.swing.JButton cmdShowPO;
    private javax.swing.JButton cmdShowPR;
    private javax.swing.JButton cmdShowRIA;
    private javax.swing.JButton cmdShowSupp;
    private javax.swing.JButton cmdShowSuppAmend;
    private javax.swing.JButton cmdShowVoucher;
    private javax.swing.ButtonGroup gpGRN;
    private javax.swing.ButtonGroup gpIndent;
    private javax.swing.ButtonGroup gpMIR;
    private javax.swing.ButtonGroup gpPO;
    private javax.swing.ButtonGroup gpPR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblItemNameGRN;
    private javax.swing.JLabel lblItemNameIndent;
    private javax.swing.JLabel lblItemNameMIR;
    private javax.swing.JLabel lblItemNamePO;
    private javax.swing.JLabel lblItemNamePR;
    private javax.swing.JLabel lblItemNameRIA;
    private javax.swing.JLabel lblPartyName;
    private javax.swing.JRadioButton opgCreatedGRN;
    private javax.swing.JRadioButton opgCreatedIndent;
    private javax.swing.JRadioButton opgCreatedItem;
    private javax.swing.JRadioButton opgCreatedItemAmend;
    private javax.swing.JRadioButton opgCreatedJob;
    private javax.swing.JRadioButton opgCreatedMIR;
    private javax.swing.JRadioButton opgCreatedPO;
    private javax.swing.JRadioButton opgCreatedPR;
    private javax.swing.JRadioButton opgCreatedRIA;
    private javax.swing.JRadioButton opgCreatedSupp;
    private javax.swing.JRadioButton opgCreatedSuppAmend;
    private javax.swing.JRadioButton opgCreatedVoucher;
    private javax.swing.ButtonGroup opgRIA;
    private javax.swing.JRadioButton opgReleasedGRN;
    private javax.swing.JRadioButton opgReleasedIndent;
    private javax.swing.JRadioButton opgReleasedItem;
    private javax.swing.JRadioButton opgReleasedItemAmend;
    private javax.swing.JRadioButton opgReleasedJob;
    private javax.swing.JRadioButton opgReleasedMIR;
    private javax.swing.JRadioButton opgReleasedPR;
    private javax.swing.JRadioButton opgReleasedRIA;
    private javax.swing.JRadioButton opgReleasedSupp;
    private javax.swing.JRadioButton opgReleasedSuppAmend;
    private javax.swing.JRadioButton opgReleasedVoucher;
    private javax.swing.JTextField txtDocNoGRN;
    private javax.swing.JTextField txtDocNoIndent;
    private javax.swing.JTextField txtDocNoItem;
    private javax.swing.JTextField txtDocNoItemAmend;
    private javax.swing.JTextField txtDocNoJob;
    private javax.swing.JTextField txtDocNoMIR;
    private javax.swing.JTextField txtDocNoPO;
    private javax.swing.JTextField txtDocNoPR;
    private javax.swing.JTextField txtDocNoRIA;
    private javax.swing.JTextField txtDocNoSupp;
    private javax.swing.JTextField txtDocNoSuppAmend;
    private javax.swing.JTextField txtDocNoVoucher;
    private javax.swing.JTextField txtFromDateGRN;
    private javax.swing.JTextField txtFromDateIndent;
    private javax.swing.JTextField txtFromDateItem;
    private javax.swing.JTextField txtFromDateItemAmend;
    private javax.swing.JTextField txtFromDateJob;
    private javax.swing.JTextField txtFromDateMIR;
    private javax.swing.JTextField txtFromDatePO;
    private javax.swing.JTextField txtFromDatePR;
    private javax.swing.JTextField txtFromDateRIA;
    private javax.swing.JTextField txtFromDateSupp;
    private javax.swing.JTextField txtFromDateSuppAmend;
    private javax.swing.JTextField txtFromDateVoucher;
    private javax.swing.JTextField txtGRNNo;
    private javax.swing.JTextField txtItemIDGRN;
    private javax.swing.JTextField txtItemIDIndent;
    private javax.swing.JTextField txtItemIDJob;
    private javax.swing.JTextField txtItemIDMIR;
    private javax.swing.JTextField txtItemIDPO;
    private javax.swing.JTextField txtItemIDPR;
    private javax.swing.JTextField txtItemIDRIA;
    private javax.swing.JTextField txtPartyCode;
    private javax.swing.JTextField txtToDateGRN;
    private javax.swing.JTextField txtToDateIndent;
    private javax.swing.JTextField txtToDateItem;
    private javax.swing.JTextField txtToDateItemAmend;
    private javax.swing.JTextField txtToDateJob;
    private javax.swing.JTextField txtToDateMIR;
    private javax.swing.JTextField txtToDatePO;
    private javax.swing.JTextField txtToDatePR;
    private javax.swing.JTextField txtToDateRIA;
    private javax.swing.JTextField txtToDateSupp;
    private javax.swing.JTextField txtToDateSuppAmend;
    private javax.swing.JTextField txtToDateVoucher;
    // End of variables declaration//GEN-END:variables
    
    private void GenerateCombo() {
        HashMap List=new HashMap();
        
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        
        List=(new clsUser()).getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        
        for(int i=1;i<=List.size();i++) {
            clsUser ObjItem=(clsUser)List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            aData.Code=(int)ObjItem.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjItem.getAttribute("USER_NAME").getObj();
            
            cmbUserModel.addElement(aData);
        }
        
        
        //----- Generate Department Combo ------- //
        cmbDeptModel=new EITLComboModel();
        cmbDept.removeAllItems();
        cmbDept.setModel(cmbDeptModel);
        
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String) ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbDeptModel.addElement(aData);
        }
        //------------------------------ //
        
        
    }
    
    private void FormatPRGrid() {
        DataModelPR=new EITLTableModel();
        TablePR.removeAll();
        TablePR.setModel(DataModelPR);
        
        DataModelPR.addColumn("Sr.");
        DataModelPR.addColumn("Doc No.");
        DataModelPR.addColumn("Doc Date");
        DataModelPR.addColumn("Creator");
        DataModelPR.addColumn("Approved ?");
        DataModelPR.addColumn("Final Approved On");
        DataModelPR.addColumn("Waiting User");
        DataModelPR.addColumn("Received Date");
        DataModelPR.addColumn("Executed ?");
        
        TablePR.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);
        DataModelPR.TableReadOnly(true);
        
        
    }
    
    
    private void FormatRIAGrid() {
        DataModelRIA=new EITLTableModel();
        TableRIA.removeAll();
        TableRIA.setModel(DataModelRIA);
        
        DataModelRIA.addColumn("Sr.");
        DataModelRIA.addColumn("Doc No.");
        DataModelRIA.addColumn("Doc Date");
        DataModelRIA.addColumn("Creator");
        DataModelRIA.addColumn("Approved ?");
        DataModelRIA.addColumn("Final Approved On");
        DataModelRIA.addColumn("Waiting User");
        DataModelRIA.addColumn("Received Date");
        DataModelRIA.addColumn("Executed ?");
        
        TableRIA.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);
        DataModelRIA.TableReadOnly(true);
    }
    
    
    private void FormatSuppGrid() {
        DataModelSupp=new EITLTableModel();
        TableSupp.removeAll();
        TableSupp.setModel(DataModelSupp);
        
        DataModelSupp.addColumn("Sr.");
        DataModelSupp.addColumn("Doc No.");
        DataModelSupp.addColumn("Creator");
        DataModelSupp.addColumn("Approved ?");
        DataModelSupp.addColumn("Final Approved On");
        DataModelSupp.addColumn("Waiting User");
        DataModelSupp.addColumn("Received Date");
        
        TableSupp.setAutoResizeMode(TableSupp.AUTO_RESIZE_OFF);
        DataModelSupp.TableReadOnly(true);
    }
    
    
    private void FormatSuppAmendGrid() {
        DataModelSuppAmend=new EITLTableModel();
        TableSuppAmend.removeAll();
        TableSuppAmend.setModel(DataModelSuppAmend);
        
        DataModelSuppAmend.addColumn("Sr.");
        DataModelSuppAmend.addColumn("Doc No.");
        DataModelSuppAmend.addColumn("Doc Date");
        DataModelSuppAmend.addColumn("Creator");
        DataModelSuppAmend.addColumn("Approved ?");
        DataModelSuppAmend.addColumn("Final Approved On");
        DataModelSuppAmend.addColumn("Waiting User");
        DataModelSuppAmend.addColumn("Received Date");
        
        TableSuppAmend.setAutoResizeMode(TableSuppAmend.AUTO_RESIZE_OFF);
        DataModelSuppAmend.TableReadOnly(true);
    }
    
    
    private void FormatItemGrid() {
        DataModelItem=new EITLTableModel();
        TableItem.removeAll();
        TableItem.setModel(DataModelItem);
        
        DataModelItem.addColumn("Sr.");
        DataModelItem.addColumn("Doc No.");
        DataModelItem.addColumn("Creator");
        DataModelItem.addColumn("Approved ?");
        DataModelItem.addColumn("Final Approved On");
        DataModelItem.addColumn("Waiting User");
        DataModelItem.addColumn("Received Date");
        
        TableItem.setAutoResizeMode(TableItem.AUTO_RESIZE_OFF);
        DataModelItem.TableReadOnly(true);
    }
    
    
    private void FormatItemAmendGrid() {
        DataModelItemAmend=new EITLTableModel();
        TableItemAmend.removeAll();
        TableItemAmend.setModel(DataModelItemAmend);
        
        DataModelItemAmend.addColumn("Sr.");
        DataModelItemAmend.addColumn("Doc No.");
        DataModelItemAmend.addColumn("Doc Date");
        DataModelItemAmend.addColumn("Creator");
        DataModelItemAmend.addColumn("Approved ?");
        DataModelItemAmend.addColumn("Final Approved On");
        DataModelItemAmend.addColumn("Waiting User");
        DataModelItemAmend.addColumn("Received Date");
        
        TableItemAmend.setAutoResizeMode(TableItemAmend.AUTO_RESIZE_OFF);
        DataModelItemAmend.TableReadOnly(true);
    }
    
    
    
    private void FormatIndentGrid() {
        DataModelIndent=new EITLTableModel();
        TableIndent.removeAll();
        TableIndent.setModel(DataModelIndent);
        
        DataModelIndent.addColumn("Sr.");
        DataModelIndent.addColumn("Doc No.");
        DataModelIndent.addColumn("Doc Date");
        DataModelIndent.addColumn("Creator");
        DataModelIndent.addColumn("Approved ?");
        DataModelIndent.addColumn("Final Approved On");
        DataModelIndent.addColumn("Waiting User");
        DataModelIndent.addColumn("Received Date");
        DataModelIndent.addColumn("Executed ?");
        
        TableIndent.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);
        DataModelIndent.TableReadOnly(true);
    }
    
    
    private void FormatPOGrid() {
        DataModelPO=new EITLTableModel();
        TablePO.removeAll();
        TablePO.setModel(DataModelPO);
        
        DataModelPO.addColumn("Sr.");
        DataModelPO.addColumn("Doc No.");
        DataModelPO.addColumn("Doc Date");
        DataModelPO.addColumn("Creator");
        DataModelPO.addColumn("Approved ?");
        DataModelPO.addColumn("Final Approved On");
        DataModelPO.addColumn("Waiting User");
        DataModelPO.addColumn("Received Date");
        DataModelPO.addColumn("Executed ?");
        
        TablePO.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);
        DataModelPO.TableReadOnly(true);
    }
    
    
    private void FormatMIRGrid() {
        DataModelMIR=new EITLTableModel();
        TableMIR.removeAll();
        TableMIR.setModel(DataModelMIR);
        
        DataModelMIR.addColumn("Sr.");
        DataModelMIR.addColumn("Doc No.");
        DataModelMIR.addColumn("Doc Date");
        DataModelMIR.addColumn("Creator");
        DataModelMIR.addColumn("Approved ?");
        DataModelMIR.addColumn("Final Approved On");
        DataModelMIR.addColumn("Waiting User");
        DataModelMIR.addColumn("Received Date");
        DataModelMIR.addColumn("Executed ?");
        
        TableMIR.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);
        DataModelMIR.TableReadOnly(true);
    }
    
    
    private void FormatJobGrid() {
        DataModelJob=new EITLTableModel();
        TableJob.removeAll();
        TableJob.setModel(DataModelJob);
        
        DataModelJob.addColumn("Sr.");
        DataModelJob.addColumn("Doc No.");
        DataModelJob.addColumn("Doc Date");
        DataModelJob.addColumn("Creator");
        DataModelJob.addColumn("Approved ?");
        DataModelJob.addColumn("Final Approved On");
        DataModelJob.addColumn("Waiting User");
        DataModelJob.addColumn("Received Date");
        DataModelJob.addColumn("Executed ?");
        
        TableJob.setAutoResizeMode(TableJob.AUTO_RESIZE_OFF);
        DataModelJob.TableReadOnly(true);
    }
    
    private void FormatGRNGrid() {
        DataModelGRN=new EITLTableModel();
        TableGRN.removeAll();
        TableGRN.setModel(DataModelGRN);
        
        DataModelGRN.addColumn("Sr.");
        DataModelGRN.addColumn("Doc No.");
        DataModelGRN.addColumn("Doc Date");
        DataModelGRN.addColumn("Creator");
        DataModelGRN.addColumn("Approved ?");
        DataModelGRN.addColumn("Final Approved On");
        DataModelGRN.addColumn("Waiting User");
        DataModelGRN.addColumn("Received Date");
        DataModelGRN.addColumn("Executed ?");
        
        TableGRN.setAutoResizeMode(TablePR.AUTO_RESIZE_OFF);
        DataModelGRN.TableReadOnly(true);
    }
    
    
    private void GeneratePRGrid() {
        String strSQL="";
        String MainSQL="";
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        
        try {
            
            FormatPRGrid();
            
            RendPR=new EITLTableCellRenderer();
            RendPR.removeBackColors();
            RendPR.removeForeColors();
            
            TablePR.getColumnModel().getColumn(8).setCellRenderer(RendPR);
            
            
            MainSQL="SELECT * FROM D_INV_REQ_HEADER WHERE REQ_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND REQ_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELED=0 ";
            
            strSQL="SELECT * FROM D_INV_REQ_HEADER WHERE REQ_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND REQ_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELED=0 ";
            
            if(chkPR.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(!txtItemIDPR.getText().trim().equals("")) {
                strSQL=strSQL+" AND REQ_NO IN (SELECT REQ_NO FROM D_INV_REQ_DETAIL WHERE ITEM_CODE='"+txtItemIDPR.getText()+"')";
            }
            
            if(opgCreatedPR.isSelected()) {
                
                if(!txtFromDatePR.getText().trim().equals("")) {
                    strSQL=strSQL+" AND REQ_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDatePR.getText())+"' ";
                }
                
                if(!txtToDatePR.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND REQ_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDatePR.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDatePR.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDatePR.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDatePR.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDatePR.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedPR.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedPR.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            if(!txtDocNoPR.getText().trim().equals("")) {
                strSQL=MainSQL+" AND REQ_NO='"+txtDocNoPR.getText()+"'";
            }
            
            System.out.println(strSQL);
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("REQ_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("REQ_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 2, rsTmp.getString("REQ_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 2, rsTmp.getString("REQ_NO")));
                    }
                    
                    //Check that any indent made from this pr
                    rsExe=data.getResult("SELECT MR_NO,MR_SR_NO FROM D_INV_INDENT_DETAIL WHERE MR_NO='"+rsTmp.getString("REQ_NO")+"'");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        
                        rowData[8]="Y";
                        Executed=true;
                        
                        double exeQty=0;
                        String MRNo=rsExe.getString("MR_NO");
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_INDENT_DETAIL WHERE MR_NO='"+rsTmp.getString("REQ_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            exeQty=rsExe.getDouble("SUMQTY");
                        }
                        
                        
                        rsExe=data.getResult("SELECT SUM(REQ_QTY) AS SUMQTY FROM D_INV_REQ_DETAIL WHERE REQ_NO='"+rsTmp.getString("REQ_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            if( (rsExe.getDouble("SUMQTY")-exeQty)<=0) //fully executed
                            {
                                RendPR.setBackColor(TablePR.getRowCount(), 8, Color.YELLOW);
                            }
                            else {
                                RendPR.setBackColor(TablePR.getRowCount(), 8, Color.GREEN);
                            }
                            
                        }
                        
                    }
                    else {
                        rowData[8]="";
                        Executed=false;
                    }
                    
                    
                    
                    if(chkExecutedPR.isSelected()) {
                        if(Executed) {
                            DataModelPR.addRow(rowData);
                        }
                    }
                    else {
                        DataModelPR.addRow(rowData);
                    }
                    
                    rsTmp.next();
                }
            }
            
            
            if(TablePR.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void GenerateIndentGrid() {
        
        String strSQL="";
        String MainSQL="";
        String DateCondition="";
        
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            
            FormatIndentGrid();
            
            RendIndent=new EITLTableCellRenderer();
            RendIndent.removeBackColors();
            RendIndent.removeForeColors();
            
            TableIndent.getColumnModel().getColumn(8).setCellRenderer(RendIndent);
            
            DateCondition=" AND INDENT_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND INDENT_DATE<='"+EITLERPGLOBAL.FinToDateDB+"'";
            
            MainSQL="SELECT * FROM D_INV_INDENT_HEADER WHERE CANCELED=0 ";
            strSQL="SELECT * FROM D_INV_INDENT_HEADER WHERE CANCELED=0 ";
            
            if(chkIndent.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(!txtItemIDIndent.getText().trim().equals("")) {
                strSQL=strSQL+" AND INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_DETAIL WHERE ITEM_CODE='"+txtItemIDIndent.getText()+"')";
            }
            
            if(opgCreatedIndent.isSelected()) {
                
                if(!txtFromDateIndent.getText().trim().equals("")) {
                    strSQL=strSQL+" AND INDENT_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateIndent.getText())+"' ";
                }
                
                if(!txtToDateIndent.getText().trim().equals("")) {
                    strSQL=strSQL+" AND INDENT_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateIndent.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateIndent.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateIndent.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateIndent.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateIndent.getText())+"' AND APPROVED=1";
                }
            }
            
            
            if(chkApprovedIndent.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedIndent.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            //Additional Condition of reference document no.
            if(!RefDocNo.trim().equals("")) {
                strSQL=strSQL+" AND INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_DETAIL WHERE MR_NO='"+RefDocNo+"')";
            }
            else {
                strSQL=strSQL+" "+DateCondition;
            }
            
            if(!txtDocNoIndent.getText().trim().equals("")) {
                strSQL=MainSQL+" AND INDENT_NO='"+txtDocNoIndent.getText()+"'";
            }
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("INDENT_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("INDENT_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 3, rsTmp.getString("INDENT_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 3, rsTmp.getString("INDENT_NO")));
                    }
                    
                    //Check that any indent made from this pr
                    rsExe=data.getResult("SELECT INDENT_NO,INDENT_SR_NO,QTY FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+rsTmp.getString("INDENT_NO")+"'");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        rowData[8]="Y";
                        Executed=true;
                        
                        double exeQty=0;
                        
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+rsTmp.getString("INDENT_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            exeQty=rsExe.getDouble("SUMQTY");
                        }
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+rsTmp.getString("INDENT_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            if((rsExe.getDouble("SUMQTY")-exeQty)<=0) //fully executed
                            {
                                RendIndent.setBackColor(TableIndent.getRowCount(), 8, Color.YELLOW);
                            }
                            else {
                                RendIndent.setBackColor(TableIndent.getRowCount(), 8, Color.GREEN);
                            }
                            
                        }
                        
                    }
                    else {
                        rowData[8]="";
                        Executed=false;
                    }
                    
                    
                    if(chkExecutedIndent.isSelected()) {
                        if(Executed) {
                            DataModelIndent.addRow(rowData);
                        }
                    }
                    else {
                        DataModelIndent.addRow(rowData);
                    }
                    
                    rsTmp.next();
                }
                
                
            }
            
            
            if(TableIndent.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void GeneratePOGrid() {
        
        String strSQL="";
        String MainSQL="";
        String DateCondition="";
        
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatPOGrid();
            
            RendPO=new EITLTableCellRenderer();
            RendPO.removeBackColors();
            RendPO.removeForeColors();
            
            TablePO.getColumnModel().getColumn(8).setCellRenderer(RendPO);
            
            DateCondition=" AND PO_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND PO_DATE<='"+EITLERPGLOBAL.FinToDateDB+"'";
            MainSQL="SELECT * FROM D_PUR_PO_HEADER WHERE CANCELLED=0 ";
            strSQL="SELECT * FROM D_PUR_PO_HEADER WHERE CANCELLED=0 ";
            
            if(chkPO.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(!txtItemIDPO.getText().trim().equals("")) {
                strSQL=strSQL+" AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_DETAIL WHERE ITEM_ID='"+txtItemIDPO.getText()+"')";
            }
            
            if(opgCreatedPO.isSelected()) {
                
                if(!txtFromDatePO.getText().trim().equals("")) {
                    strSQL=strSQL+" AND PO_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDatePO.getText())+"' ";
                }
                
                if(!txtToDatePO.getText().trim().equals("")) {
                    strSQL=strSQL+" AND PO_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDatePO.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDatePO.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDatePO.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDatePO.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDatePO.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedPO.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedPO.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            //Additional Condition of reference document no.
            if(!RefDocNo.trim().equals("")) {
                strSQL=strSQL+" AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+RefDocNo+"')";
            }
            else {
                strSQL=strSQL+" "+DateCondition;
            }
            
            if(!txtDocNoPO.getText().trim().equals("")) {
                strSQL=MainSQL+" AND PO_NO='"+txtDocNoPO.getText()+"'";
            }
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                
                
                while(!rsTmp.isAfterLast()) {
                    
                    int POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, rsTmp.getString("PO_NO"));
                    int ModuleID=POType+20;
                    
                    if(POType==8) {
                        ModuleID=46;
                    }
                    
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("PO_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("PO_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("PO_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("PO_NO")));
                    }
                    
                    
                    
                    rsExe=data.getResult("SELECT PO_NO,PO_SR_NO FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.MIR_NO = B.MIR_NO AND PO_NO='"+rsTmp.getString("PO_NO")+"' AND A.CANCELLED=0 ");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        rowData[8]="Y";
                        Executed=true;
                        
                        double exeQty=0;
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.MIR_NO = B.MIR_NO AND PO_NO='"+rsTmp.getString("PO_NO")+"' AND A.CANCELLED=0 ");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            exeQty=rsExe.getDouble("SUMQTY");
                        }
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_PUR_PO_DETAIL WHERE PO_NO='"+rsTmp.getString("PO_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            if( (rsExe.getDouble("SUMQTY")-exeQty)<=0) //fully executed
                            {
                                RendPO.setBackColor(TablePO.getRowCount(), 8, Color.YELLOW);
                            }
                            else {
                                RendPO.setBackColor(TablePO.getRowCount(), 8, Color.GREEN);
                            }
                            
                        }
                        
                    }
                    else {
                        rowData[8]="";
                        Executed=false;
                    }
                    
                    if(!Executed) {
                        
                        
                        rsExe=data.getResult("SELECT PO_NO,PO_SR_NO FROM D_INV_JOB_DETAIL WHERE PO_NO='"+rsTmp.getString("PO_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            rowData[8]="Y";
                            Executed=true;
                            
                            double exeQty=0;
                            
                            rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_JOB_DETAIL WHERE PO_NO='"+rsTmp.getString("PO_NO")+"'");
                            rsExe.first();
                            
                            if(rsExe.getRow()>0) {
                                exeQty=rsExe.getDouble("SUMQTY");
                            }
                            
                            rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_PUR_PO_DETAIL WHERE PO_NO='"+rsTmp.getString("PO_NO")+"'");
                            rsExe.first();
                            
                            if(rsExe.getRow()>0) {
                                if( (rsExe.getDouble("SUMQTY")-exeQty)<=0) //fully executed
                                {
                                    RendPO.setBackColor(TablePO.getRowCount(), 8, Color.YELLOW);
                                }
                                else {
                                    RendPO.setBackColor(TablePO.getRowCount(), 8, Color.GREEN);
                                }
                                
                            }
                            
                        }
                        else {
                            rowData[8]="";
                            Executed=false;
                        }
                    }
                    
                    
                    if(chkExecutedPO.isSelected()) {
                        if(Executed) {
                            DataModelPO.addRow(rowData);
                        }
                    }
                    else {
                        DataModelPO.addRow(rowData);
                    }
                    
                    rsTmp.next();
                }
                
                
            }
            
            
            if(TablePO.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private void GenerateMIRGrid() {
        
        String strSQL="";
        String MainSQL="";
        String DateCondition="";
        
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatMIRGrid();
            
            RendMIR=new EITLTableCellRenderer();
            RendMIR.removeBackColors();
            RendMIR.removeForeColors();
            
            TableMIR.getColumnModel().getColumn(8).setCellRenderer(RendMIR);
            
            DateCondition=" AND MIR_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND MIR_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ";
            
            MainSQL="SELECT * FROM D_INV_MIR_HEADER WHERE CANCELLED=0";
            strSQL="SELECT * FROM D_INV_MIR_HEADER WHERE CANCELLED=0";
            
            if(chkMIR.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            
            if(!txtItemIDMIR.getText().trim().equals("")) {
                strSQL=strSQL+" AND MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_DETAIL WHERE ITEM_ID='"+txtItemIDMIR.getText()+"')";
            }
            
            if(opgCreatedMIR.isSelected()) {
                
                if(!txtFromDateMIR.getText().trim().equals("")) {
                    strSQL=strSQL+" AND MIR_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateMIR.getText())+"' ";
                }
                
                if(!txtToDateMIR.getText().trim().equals("")) {
                    strSQL=strSQL+" AND MIR_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateMIR.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateMIR.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateMIR.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateMIR.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateMIR.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedMIR.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedMIR.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            //Additional Condition of reference document no.
            if(!RefDocNo.trim().equals("")) {
                strSQL=strSQL+" AND MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_DETAIL WHERE PO_NO='"+RefDocNo+"')";
            }
            else {
                strSQL=strSQL+" "+DateCondition;
            }
            
            if(!txtDocNoMIR.getText().trim().equals("")) {
                strSQL=MainSQL+" AND MIR_NO='"+txtDocNoMIR.getText()+"'";
            }
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    int MIRType=clsMIRGen.getMIRType(EITLERPGLOBAL.gCompanyID,rsTmp.getString("MIR_NO"));
                    int ModuleID=4+MIRType;
                    
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("MIR_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("MIR_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("MIR_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("MIR_NO")));
                    }
                    
                    //Check that any indent made from this pr
                    rsExe=data.getResult("SELECT MIR_NO FROM D_INV_GRN_DETAIL WHERE MIR_NO='"+rsTmp.getString("MIR_NO")+"'");
                    rsExe.first();
                    
                    if(rsExe.getRow()>0) {
                        rowData[8]="Y";
                        Executed=true;
                        
                        double exeQty=0;
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_GRN_DETAIL WHERE MIR_NO='"+rsTmp.getString("MIR_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            exeQty=rsExe.getDouble("SUMQTY");
                        }
                        
                        rsExe=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+rsTmp.getString("MIR_NO")+"'");
                        rsExe.first();
                        
                        if(rsExe.getRow()>0) {
                            if((rsExe.getDouble("SUMQTY")-exeQty)<=0) //fully executed
                            {
                                RendMIR.setBackColor(TableMIR.getRowCount(), 8, Color.YELLOW);
                            }
                            else {
                                RendMIR.setBackColor(TableMIR.getRowCount(), 8, Color.GREEN);
                            }
                        }
                    }
                    else {
                        rowData[8]="";
                        Executed=false;
                    }
                    
                    
                    if(chkExecutedMIR.isSelected()) {
                        if(Executed) {
                            DataModelMIR.addRow(rowData);
                        }
                    }
                    else {
                        DataModelMIR.addRow(rowData);
                    }
                    
                    rsTmp.next();
                }
                
            }
            
            
            if(TableMIR.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    
    private void GenerateJobGrid() {
        
        String strSQL="";
        String MainSQL="";
        String DateCondition="";
        
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatJobGrid();
            
            RendJob=new EITLTableCellRenderer();
            RendJob.removeBackColors();
            RendJob.removeForeColors();
            
            TableJob.getColumnModel().getColumn(8).setCellRenderer(RendJob);
            
            DateCondition=" AND JOB_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND JOB_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' ";
            
            MainSQL="SELECT * FROM D_INV_JOB_HEADER WHERE CANCELLED=0";
            strSQL="SELECT * FROM D_INV_JOB_HEADER WHERE CANCELLED=0";
            
            if(chkJob.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            
            if(!txtItemIDJob.getText().trim().equals("")) {
                strSQL=strSQL+" AND JOB_NO IN (SELECT JOB_NO FROM D_INV_JOB_DETAIL WHERE ITEM_ID='"+txtItemIDJob.getText()+"')";
            }
            
            if(opgCreatedJob.isSelected()) {
                
                if(!txtFromDateJob.getText().trim().equals("")) {
                    strSQL=strSQL+" AND JOB_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateJob.getText())+"' ";
                }
                
                if(!txtToDateJob.getText().trim().equals("")) {
                    strSQL=strSQL+" AND JOB_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateJob.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateJob.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateJob.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateJob.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateJob.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedJob.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedJob.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            //Additional Condition of reference document no.
            if(!RefDocNo.trim().equals("")) {
                strSQL=strSQL+" AND JOB_NO IN (SELECT JOB_NO FROM D_INV_JOB_DETAIL WHERE PO_NO='"+RefDocNo+"')";
            }
            else {
                strSQL=strSQL+" "+DateCondition;
            }
            
            if(!txtDocNoJob.getText().trim().equals("")) {
                strSQL=MainSQL+" AND JOB_NO='"+txtDocNoJob.getText()+"'";
            }
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    int ModuleID=48;
                    
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("JOB_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("JOB_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("JOB_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("JOB_NO")));
                    }
                    
                    rowData[8]="N/A";
                    DataModelJob.addRow(rowData);
                    
                    rsTmp.next();
                }
                
            }
            
            if(TableJob.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    
    private void GenerateGRNGrid() {
        
        String strSQL="";
        String MainSQL="";
        String DateCondition="";
        
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatGRNGrid();
            
            DateCondition=" AND GRN_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND GRN_DATE<='"+EITLERPGLOBAL.FinToDateDB+"'";
            
            MainSQL="SELECT * FROM D_INV_GRN_HEADER WHERE CANCELLED=0 ";
            strSQL="SELECT * FROM D_INV_GRN_HEADER WHERE CANCELLED=0 ";
            
            if(chkGRN.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(!txtItemIDGRN.getText().trim().equals("")) {
                strSQL=strSQL+" AND GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_DETAIL WHERE ITEM_ID='"+txtItemIDGRN.getText()+"')";
            }
            
            
            if(opgCreatedGRN.isSelected()) {
                
                if(!txtFromDateGRN.getText().trim().equals("")) {
                    strSQL=strSQL+" AND GRN_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateGRN.getText())+"' ";
                }
                
                if(!txtToDateGRN.getText().trim().equals("")) {
                    strSQL=strSQL+" AND GRN_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateGRN.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateGRN.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateGRN.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateGRN.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateGRN.getText())+"' AND APPROVED=1";
                }
            }
            
            
            if(chkApprovedGRN.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedGRN.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            
            //Additional Condition of reference document no.
            if(!RefDocNo.trim().equals("")) {
                strSQL=strSQL+" AND GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_DETAIL WHERE MIR_NO='"+RefDocNo+"')";
            }
            else {
                strSQL=strSQL+" "+DateCondition;
            }
            
            if(!txtDocNoGRN.getText().trim().equals("")) {
                strSQL=MainSQL+" AND GRN_NO='"+txtDocNoGRN.getText()+"'";
            }
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    int GRNType=clsGRN.getGRNType(EITLERPGLOBAL.gCompanyID,rsTmp.getString("GRN_NO"));
                    int ModuleID=6+GRNType;
                    
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("GRN_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("GRN_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, ModuleID, rsTmp.getString("GRN_NO")));
                    }
                    
                    
                    rowData[8]=""; //OVERRIDDEN ASSIGNMNENT
                    
                    //Check that any indent made from this pr
                    /*rsExe=data.getResult("SELECT MIR_NO FROM D_INV_GRN_DETAIL WHERE MIR_NO='"+rsTmp.getString("MIR_NO")+"'");
                    rsExe.first();
                     
                    if(rsExe.getRow()>0) {
                        rowData[8]="Y";
                        Executed=true;
                    }
                    else {
                        rowData[8]="";
                        Executed=false;
                    }*/
                    
                    Executed=true; // OVERRIDDEN ASSIGNMENT
                    
                    
                    if(chkExecutedGRN.isSelected()) {
                        if(Executed) {
                            DataModelGRN.addRow(rowData);
                        }
                    }
                    else {
                        DataModelGRN.addRow(rowData);
                    }
                    
                    rsTmp.next();
                }
                
            }
            
            
            if(TableGRN.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
        }
        catch(Exception e) {
            
        }
        
    }
    
    
    private String buildUserString() {
        ResultSet rsTmp,rsUsers;
        
        try {
            
            this.LevelNo=0;
            
            UserString=","+EITLERPGLOBAL.getComboCode(cmbUser);
            int UserID=EITLERPGLOBAL.getComboCode(cmbUser);
            
            FindUsers(UserID);
            
            if(!UserString.trim().equals("")) {
                UserString="("+UserString.substring(1)+")";
            }
        }
        catch(Exception e) {
            
        }
        
        return UserString;
    }
    
    
    private void FindUsers(int pUserID) {
        ResultSet rsTmp;
        
        try {
            
            LevelNo++;
            
            if(LevelNo<=10) {
                rsTmp=data.getResult("SELECT USER_ID FROM D_COM_USER_MASTER WHERE SUPERIOR_ID="+pUserID);
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    while(!rsTmp.isAfterLast()) {
                        int UserID=rsTmp.getInt("USER_ID");
                        UserString=UserString+","+UserID;
                        FindUsers(UserID); //Recurse throught hierarchy
                        rsTmp.next();
                    }
                }
            }
            
        }
        catch(Exception e) {
            
        }
        
        
        
    }
    
    
    private void GenerateRIAGrid() {
        String strSQL="";
        String MainSQL="";
        ResultSet rsTmp,rsExe;
        int DeptID=0;
        boolean Executed=false;
        
        try {
            
            FormatRIAGrid();
            
            MainSQL="SELECT * FROM D_PUR_RATE_APPROVAL_HEADER WHERE APPROVAL_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND APPROVAL_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED=0";
            strSQL="SELECT * FROM D_PUR_RATE_APPROVAL_HEADER WHERE APPROVAL_DATE>='"+EITLERPGLOBAL.FinFromDateDB+"' AND APPROVAL_DATE<='"+EITLERPGLOBAL.FinToDateDB+"' AND CANCELLED=0";
            
            if(chkRIA.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(!txtItemIDRIA.getText().trim().equals("")) {
                strSQL=strSQL+" AND APPROVAL_NO IN (SELECT APPROVAL_NO FROM D_PUR_RATE_APPROVAL_DETAIL WHERE ITEM_ID='"+txtItemIDRIA.getText()+"')";
            }
            
            if(chkDept.isSelected()) {
                DeptID=EITLERPGLOBAL.getComboCode(cmbDept);
                strSQL=strSQL+" AND INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_HEADER WHERE FOR_DEPT_ID="+DeptID+")";
            }
            
            if(opgCreatedRIA.isSelected()) {
                if(!txtFromDateRIA.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVAL_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateRIA.getText())+"' ";
                }
                
                if(!txtToDateRIA.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND APPROVAL_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateRIA.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateRIA.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateRIA.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDatePR.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateRIA.getText())+"' AND APPROVED=1";
                }
            }
            
            
            if(chkApprovedRIA.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedRIA.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            if(!txtDocNoRIA.getText().trim().equals("")) {
                strSQL=MainSQL+" AND APPROVAL_NO='"+txtDocNoRIA.getText()+"'";
            }
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[9];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=rsTmp.getString("APPROVAL_NO");
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVAL_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 38, rsTmp.getString("APPROVAL_NO")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 38, rsTmp.getString("APPROVAL_NO")));
                    }
                    
                    rowData[8]="";
                    
                    
                    DataModelRIA.addRow(rowData);
                    
                    rsTmp.next();
                }
                
                
            }
            
            if(TableRIA.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    
    private void GenerateSuppGrid() {
        String strSQL="";
        String MainSQL="";
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatSuppGrid();
            
            MainSQL="SELECT * FROM D_COM_SUPP_MASTER WHERE BLOCKED='N' AND CANCELLED=0 ";
            strSQL="SELECT * FROM D_COM_SUPP_MASTER WHERE BLOCKED='N' AND CANCELLED=0 ";
            
            if(chkSupp.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(opgCreatedSupp.isSelected()) {
                
                if(!txtFromDateSupp.getText().trim().equals("")) {
                    strSQL=strSQL+" AND CREATED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateSupp.getText())+"' ";
                }
                
                if(!txtToDateSupp.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND CREATED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateSupp.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateSupp.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateSupp.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateSupp.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateSupp.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedSupp.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedSupp.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            if(!txtDocNoSupp.getText().trim().equals("")) {
                strSQL=MainSQL+" AND SUPPLIER_CODE='"+txtDocNoSupp.getText()+"'";
            }
            
            
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[7];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=Integer.toString(rsTmp.getInt("SUPP_ID"));
                    rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                        rowData[4]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[5]="";
                        rowData[6]="";
                    }
                    else {
                        rowData[3]="N";
                        rowData[4]="";
                        rowData[5]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 37, Integer.toString(rsTmp.getInt("SUPP_ID"))));
                        rowData[6]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 37, Integer.toString(rsTmp.getInt("SUPP_ID"))));
                    }
                    
                    DataModelSupp.addRow(rowData);
                    
                    rsTmp.next();
                }
                
                
            }
            
            if(TableSupp.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    
    private void GenerateItemGrid() {
        String strSQL="";
        String MainSQL="";
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatItemGrid();
            
            MainSQL="SELECT * FROM D_INV_ITEM_MASTER WHERE CANCELLED=0 ";
            strSQL="SELECT * FROM D_INV_ITEM_MASTER WHERE CANCELLED=0 ";
            
            if(chkItem.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(opgCreatedItem.isSelected()) {
                
                if(!txtFromDateItem.getText().trim().equals("")) {
                    strSQL=strSQL+" AND CREATED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateItem.getText())+"' ";
                }
                
                if(!txtToDateItem.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND CREATED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateItem.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateItem.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateItem.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateItem.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateItem.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedItem.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedItem.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            if(!txtDocNoItem.getText().trim().equals("")) {
                strSQL=MainSQL+" AND SUPPLIER_CODE='"+txtDocNoItem.getText()+"'";
            }
            
            
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[7];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=Integer.toString(rsTmp.getInt("ITEM_ID"));
                    rowData[2]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[3]="Y";
                        rowData[4]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[5]="";
                        rowData[6]="";
                    }
                    else {
                        rowData[3]="N";
                        rowData[4]="";
                        rowData[5]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 1, rsTmp.getString("ITEM_ID")));
                        rowData[6]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 1, rsTmp.getString("ITEM_ID")));
                    }
                    
                    DataModelItem.addRow(rowData);
                    
                    rsTmp.next();
                }
                
                
            }
            
            if(TableItem.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    
    private void GenerateItemAmendGrid() {
        String strSQL="";
        String MainSQL="";
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatItemAmendGrid();
            
            MainSQL="SELECT * FROM D_INV_ITEM_MASTER_AMEND WHERE CANCELLED=0 ";
            strSQL="SELECT * FROM D_INV_ITEM_MASTER_AMEND WHERE CANCELLED=0 ";
            
            if(chkItemAmend.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(opgCreatedItemAmend.isSelected()) {
                
                if(!txtFromDateItemAmend.getText().trim().equals("")) {
                    strSQL=strSQL+" AND CREATED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateItemAmend.getText())+"' ";
                }
                
                if(!txtToDateItemAmend.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND CREATED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateItemAmend.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateItemAmend.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateItemAmend.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateItemAmend.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateItemAmend.getText())+"' AND APPROVED=1";
                }
                
                
            }
            
            
            if(chkApprovedItemAmend.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedItemAmend.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            if(!txtDocNoItemAmend.getText().trim().equals("")) {
                strSQL=MainSQL+" AND ITEM_ID='"+txtDocNoItemAmend.getText()+"'";
            }
            
            
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[8];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=Integer.toString(rsTmp.getInt("AMEND_ID"));
                    rowData[2]=EITLERPGLOBAL.formatDate(rsTmp.getString("AMEND_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 51, rsTmp.getString("ITEM_ID")));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 51, rsTmp.getString("ITEM_ID")));
                    }
                    
                    DataModelItemAmend.addRow(rowData);
                    
                    rsTmp.next();
                }
                
                
            }
            
            if(TableItemAmend.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void GenerateSuppAmendGrid() {
        String strSQL="";
        String MainSQL="";
        ResultSet rsTmp,rsExe;
        boolean Executed=false;
        
        try {
            
            FormatSuppAmendGrid();
            
            MainSQL="SELECT * FROM D_COM_SUPP_AMEND_MASTER WHERE CANCELLED=0 ";
            strSQL="SELECT * FROM D_COM_SUPP_AMEND_MASTER WHERE CANCELLED=0 ";
            
            if(chkSuppAmend.isSelected()) {
                strSQL=strSQL+" AND CREATED_BY IN "+buildUserString();
            }
            
            if(opgCreatedSuppAmend.isSelected()) {
                
                if(!txtFromDateSuppAmend.getText().trim().equals("")) {
                    strSQL=strSQL+" AND CREATED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateSuppAmend.getText())+"' ";
                }
                
                if(!txtToDateSuppAmend.getText().trim().equals("")) {
                    
                    strSQL=strSQL+" AND CREATED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateSuppAmend.getText())+"'";
                }
            }
            else {
                
                if(!txtFromDateSuppAmend.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE>='"+EITLERPGLOBAL.formatDateDB(txtFromDateSuppAmend.getText())+"' AND APPROVED=1";
                }
                
                if(!txtToDateSuppAmend.getText().trim().equals("")) {
                    strSQL=strSQL+" AND APPROVED_DATE<='"+EITLERPGLOBAL.formatDateDB(txtToDateSuppAmend.getText())+"' AND APPROVED=1";
                }
            }
            
            
            if(chkApprovedSuppAmend.isSelected()) {
                strSQL=strSQL+" AND APPROVED=1";
            }
            
            if(chkUnApprovedSuppAmend.isSelected()) {
                strSQL=strSQL+" AND APPROVED=0";
            }
            
            if(!txtDocNoSuppAmend.getText().trim().equals("")) {
                strSQL=MainSQL+" AND SUPPLIER_CODE='"+txtDocNoSuppAmend.getText()+"'";
            }
            
            
            
            rsTmp=data.getResult(strSQL);
            rsTmp.first();
            
            
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    Object[] rowData=new Object[8];
                    
                    rowData[0]=Integer.toString(rsTmp.getRow());
                    rowData[1]=Integer.toString(rsTmp.getInt("AMEND_ID"));
                    rowData[2]= EITLERPGLOBAL.formatDate(rsTmp.getString("AMEND_DATE"));
                    rowData[3]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,rsTmp.getInt("CREATED_BY"));
                    
                    if(rsTmp.getBoolean("APPROVED")) {
                        rowData[4]="Y";
                        rowData[5]=EITLERPGLOBAL.formatDate(rsTmp.getString("APPROVED_DATE"));
                        rowData[6]="";
                        rowData[7]="";
                    }
                    else {
                        rowData[4]="N";
                        rowData[5]="";
                        rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, 50, Integer.toString(rsTmp.getInt("AMEND_ID"))));
                        rowData[7]=EITLERPGLOBAL.formatDate(ApprovalFlow.getWaitingReceivedDate(EITLERPGLOBAL.gCompanyID, 50, Integer.toString(rsTmp.getInt("AMEND_ID"))));
                    }
                    
                    DataModelSuppAmend.addRow(rowData);
                    
                    rsTmp.next();
                }
                
                
            }
            
            if(TableSuppAmend.getRowCount()<=0) {
                JOptionPane.showMessageDialog(null,"No entries found");
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void FormatGridPJV() {
        try {
            
            DataModelPJV=new EITLTableModel();
            TablePJV.removeAll();
            
            TablePJV.setModel(DataModelPJV);
            TablePJV.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelPJV.addColumn("Sr."); //0 - Read Only
            DataModelPJV.addColumn("Voucher No."); //1
            DataModelPJV.addColumn("Voucher Date"); //2 //Read Only
            DataModelPJV.addColumn("Amount"); //3
            DataModelPJV.addColumn("Amount Paid"); //3
            DataModelPJV.addColumn("GRN No."); //4
            DataModelPJV.addColumn("GRN Date"); //5
            DataModelPJV.addColumn("PO No."); //6
            DataModelPJV.addColumn("PO Date"); //7
            DataModelPJV.addColumn("Remarks"); //8
            
            DataModelPJV.addColumn("Approved ?");//9
            DataModelPJV.addColumn("Approved On");//9
            DataModelPJV.addColumn("Waiting User");//10
            DataModelPJV.addColumn("Received Date");//9
            
            DataModelPJV.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelPJV.SetVariable(1,"VOUCHER_NO"); //1
            DataModelPJV.SetVariable(2,"VOUCHER_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(3,"AMOUNT"); //2 //Read Only
            DataModelPJV.SetVariable(4,"AMOUNT_PAID"); //2 //Read Only
            DataModelPJV.SetVariable(5,"GRN_NO"); //2 //Read Only
            DataModelPJV.SetVariable(6,"GRN_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(7,"PO_NO"); //2 //Read Only
            DataModelPJV.SetVariable(8,"PO_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(9,"REMARKS"); //2 //Read Only
            DataModelPJV.SetVariable(10,"APPROVED"); //2 //Read Only
            DataModelPJV.SetVariable(11,"APPROVED_DATE"); //2 //Read Only
            DataModelPJV.SetVariable(12,"WAITING_USER"); //2 //Read Only
            DataModelPJV.SetVariable(13,"RECEIVED_DATE"); //2 //Read Only
            
            DataModelPJV.TableReadOnly(true);
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void FormatGridPayment() {
        try {
            
            DataModelPayment=new EITLTableModel();
            TablePayment.removeAll();
            
            TablePayment.setModel(DataModelPayment);
            TablePayment.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            DataModelPayment.addColumn("Sr."); //0 - Read Only
            DataModelPayment.addColumn("Voucher No."); //1
            DataModelPayment.addColumn("Voucher Date"); //2 //Read Only
            DataModelPayment.addColumn("Amount"); //3
            DataModelPayment.addColumn("GRN No."); //4
            DataModelPayment.addColumn("GRN Date"); //5
            DataModelPayment.addColumn("PO No."); //6
            DataModelPayment.addColumn("PO Date"); //7
            DataModelPayment.addColumn("Remarks"); //8
            DataModelPayment.addColumn("Approved ?");//9
            DataModelPayment.addColumn("Approved On");//9
            DataModelPayment.addColumn("Waiting User");//10
            DataModelPayment.addColumn("Received Date");//9
            
            DataModelPayment.SetVariable(0,"SR_NO"); //0 - Read Only
            DataModelPayment.SetVariable(1,"VOUCHER_NO"); //1
            DataModelPayment.SetVariable(2,"VOUCHER_DATE"); //2 //Read Only
            DataModelPayment.SetVariable(3,"AMOUNT"); //2 //Read Only
            DataModelPayment.SetVariable(4,"GRN_NO"); //2 //Read Only
            DataModelPayment.SetVariable(5,"GRN_DATE"); //2 //Read Only
            DataModelPayment.SetVariable(6,"PO_NO"); //2 //Read Only
            DataModelPayment.SetVariable(7,"PO_DATE"); //2 //Read Only
            DataModelPayment.SetVariable(8,"REMARKS"); //2 //Read Only
            
            DataModelPayment.SetVariable(9,"APPROVED"); //2 //Read Only
            DataModelPayment.SetVariable(10,"APPROVED_DATE"); //2 //Read Only
            DataModelPayment.SetVariable(11,"WAITING_USER"); //2 //Read Only
            DataModelPayment.SetVariable(12,"RECEIVED_DATE"); //2 //Read Only
            
            DataModelPayment.TableReadOnly(true);
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void GenerateGridPJV() {
        try {
            HashMap List=new HashMap();
            
            FormatGridPJV();
            
            
            String Approval="";
            String Creation="C";
            
            if(opgCreatedVoucher.isSelected()) {
                Creation="C";
            }
            else {
                Creation="A";
            }
            
            if(chkApprovedVoucher.isSelected()) {
                Approval="A";
            }
            
            if(chkUnApprovedVoucher.isSelected()) {
                Approval="U";
            }
            
            List=clsAccount.getPartyPayableDetailMIS(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText(), txtGRNNo.getText(), EITLERPGLOBAL.formatDateDB(txtFromDateVoucher.getText()), EITLERPGLOBAL.formatDateDB(txtToDateVoucher.getText()), Approval, Creation, txtDocNoVoucher.getText());
            
            for(int i=1;i<=List.size();i++) {
                clsVoucher objItem=(clsVoucher)List.get(Integer.toString(i));
                
                Object[] rowData=new Object[14];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=objItem.getAttribute("VOUCHER_NO").getString();
                rowData[2]=objItem.getAttribute("VOUCHER_DATE").getString();
                rowData[3]=Double.toString(objItem.getAttribute("AMOUNT").getDouble());
                rowData[4]=Double.toString(objItem.getAttribute("AMOUNT_PAID").getDouble());
                rowData[5]=objItem.getAttribute("GRN_NO").getString();
                rowData[6]=objItem.getAttribute("GRN_DATE").getString();
                rowData[7]=objItem.getAttribute("PO_NO").getString();
                rowData[8]=objItem.getAttribute("PO_DATE").getString();
                rowData[9]=objItem.getAttribute("REMARKS").getString();
                rowData[10]=objItem.getAttribute("APPROVED").getString();
                rowData[11]=objItem.getAttribute("APPROVED_DATE").getString();
                rowData[12]=objItem.getAttribute("WAITING_USER").getString();
                rowData[13]=objItem.getAttribute("RECEIVED_DATE").getString();
                
                DataModelPJV.addRow(rowData);
            }
        }
        catch(Exception e) {
            
        }
    }
    
    private void GenerateGridPayment() {
        try {
            HashMap List=new HashMap();
            
            FormatGridPayment();
            
            String Approval="";
            String Creation="C";
            
            if(opgCreatedVoucher.isSelected()) {
                Creation="C";
            }
            else {
                Creation="A";
            }
            
            if(chkApprovedVoucher.isSelected()) {
                Approval="A";
            }
            
            if(chkUnApprovedVoucher.isSelected()) {
                Approval="U";
            }
            
            List=clsAccount.getPartyPaymentDetailMIS(EITLERPGLOBAL.gCompanyID, txtPartyCode.getText(), txtGRNNo.getText(), EITLERPGLOBAL.formatDateDB(txtFromDateVoucher.getText()), EITLERPGLOBAL.formatDateDB(txtToDateVoucher.getText()), Approval, Creation, txtDocNoVoucher.getText());
            
            for(int i=1;i<=List.size();i++) {
                clsVoucher objItem=(clsVoucher)List.get(Integer.toString(i));
                
                Object[] rowData=new Object[14];
                
                rowData[0]=Integer.toString(i);
                rowData[1]=objItem.getAttribute("VOUCHER_NO").getString();
                rowData[2]=objItem.getAttribute("VOUCHER_DATE").getString();
                rowData[3]=Double.toString(objItem.getAttribute("AMOUNT").getDouble());
                rowData[4]=Double.toString(objItem.getAttribute("AMOUNT_PAID").getDouble());
                rowData[5]=objItem.getAttribute("GRN_NO").getString();
                rowData[6]=objItem.getAttribute("GRN_DATE").getString();
                rowData[7]=objItem.getAttribute("PO_NO").getString();
                rowData[8]=objItem.getAttribute("PO_DATE").getString();
                rowData[9]=objItem.getAttribute("REMARKS").getString();
                rowData[10]=objItem.getAttribute("APPROVED").getString();
                rowData[11]=objItem.getAttribute("APPROVED_DATE").getString();
                rowData[12]=objItem.getAttribute("WAITING_USER").getString();
                rowData[13]=objItem.getAttribute("RECEIVED_DATE").getString();
                
                DataModelPayment.addRow(rowData);
            }
        }
        catch(Exception e) {
            
        }
    }
}
