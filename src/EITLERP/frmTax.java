/*
 * frmTemplate.java
 *
 * Created on April 7, 2004, 3:10 PM
 */

package EITLERP;

/** 
 *
 * @author  nhpatel
 */
/*<APPLET CODE=frmTax.class HEIGHT=415 WIDTH=507></APPLET>*/
 
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.util.*;
 
public class frmTax extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsTaxColumn ObjTax;
    private EITLTableModel DataModel;
    
    private EITLComboModel cmbModuleModel=new EITLComboModel();
    private EITLComboModel cmbOperationModel=new EITLComboModel();
    private EITLComboModel cmbInputModel=new EITLComboModel();
    
    
    /** Creates new form frmTemplate */
    public frmTax() {
        System.gc();
        setSize(507,415);
        initComponents();
        
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        //Create a new Business Object
        GenerateCombo();
        
        ObjTax=new clsTaxColumn();
        
        if(ObjTax.LoadData((int)EITLERPGLOBAL.gCompanyID)) {
            ObjTax.MoveFirst();
            DisplayData();
            //------- Set the menu for User rights ----- //
            SetMenuForRights();
        }
        else {
            JOptionPane.showMessageDialog(null,"Error loading item data. Error is "+ObjTax.LastError);
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbModule = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtCaption = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbOperation = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbInput = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtFormula = new javax.swing.JTextField();
        chkShowColumn = new javax.swing.JCheckBox();
        chkCalculate = new javax.swing.JCheckBox();
        chkUsePercent = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });

        ToolBar.add(cmdTop);

        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        ToolBar.add(cmdBack);

        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNext);

        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });

        ToolBar.add(cmdLast);

        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdNew);

        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });

        ToolBar.add(cmdEdit);

        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });

        ToolBar.add(cmdDelete);

        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });

        ToolBar.add(cmdSave);

        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        ToolBar.add(cmdCancel);

        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });

        ToolBar.add(cmdFilter);

        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPreview);

        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });

        ToolBar.add(cmdPrint);

        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });

        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText(" CUSTOM COLUMNS MASTER");
        jLabel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 40, 650, 25);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel2.setText("Module ");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(19, 20, 64, 15);

        cmbModule.setNextFocusableComponent(txtCaption);
        cmbModule.setEnabled(false);
        jPanel1.add(cmbModule);
        cmbModule.setBounds(88, 16, 222, 24);

        jLabel3.setText("Caption");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(18, 50, 65, 15);

        txtCaption.setNextFocusableComponent(cmbOperation);
        txtCaption.setEnabled(false);
        jPanel1.add(txtCaption);
        txtCaption.setBounds(88, 48, 204, 19);

        jLabel4.setText("Operation");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(14, 80, 69, 15);

        cmbOperation.setNextFocusableComponent(cmbInput);
        cmbOperation.setEnabled(false);
        jPanel1.add(cmbOperation);
        cmbOperation.setBounds(88, 78, 74, 24);

        jLabel5.setText("Input");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(40, 116, 44, 15);

        cmbInput.setNextFocusableComponent(txtFormula);
        cmbInput.setEnabled(false);
        jPanel1.add(cmbInput);
        cmbInput.setBounds(88, 112, 132, 24);

        jLabel6.setText("Formula  ");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(21, 146, 64, 15);

        txtFormula.setNextFocusableComponent(chkShowColumn);
        txtFormula.setEnabled(false);
        jPanel1.add(txtFormula);
        txtFormula.setBounds(88, 144, 324, 19);

        chkShowColumn.setText(" Show column in the form");
        chkShowColumn.setNextFocusableComponent(chkCalculate);
        chkShowColumn.setEnabled(false);
        jPanel1.add(chkShowColumn);
        chkShowColumn.setBounds(88, 184, 194, 23);

        chkCalculate.setText("Do not use column in calculations");
        chkCalculate.setNextFocusableComponent(chkUsePercent);
        chkCalculate.setEnabled(false);
        jPanel1.add(chkCalculate);
        chkCalculate.setBounds(88, 212, 236, 23);

        chkUsePercent.setText("Use Percentage ");
        chkUsePercent.setNextFocusableComponent(cmbModule);
        chkUsePercent.setEnabled(false);
        jPanel1.add(chkUsePercent);
        chkUsePercent.setBounds(88, 242, 156, 23);

        jTabbedPane1.addTab("Column Information", jPanel1);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setNextFocusableComponent(cmdAdd);
        Table.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                HierarchyChanged(evt);
            }
        });
        Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                TableCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(Table);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(8, 66, 474, 190);

        cmdAdd.setText("Add");
        cmdAdd.setNextFocusableComponent(cmdRemove);
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });

        jPanel2.add(cmdAdd);
        cmdAdd.setBounds(314, 262, 82, 25);

        cmdRemove.setText("Remove");
        cmdRemove.setNextFocusableComponent(Table);
        cmdRemove.setEnabled(false);
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });

        jPanel2.add(cmdRemove);
        cmdRemove.setBounds(402, 262, 84, 25);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel7.setForeground(new java.awt.Color(0, 153, 153));
        jLabel7.setText("Press Insert to Add new row, Delete - Remove row");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(10, 262, 294, 14);

        jTabbedPane1.addTab("Item Specific Information", jPanel2);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(-2, 68, 500, 320);

    }//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1MouseClicked
    
    private void TableCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_TableCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_TableCaretPositionChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjTax.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        // TODO add your handling code here:
        try
        {
        if(EditMode!=0) //Only Process keys when in editing mode
        {
            if(evt.getKeyCode()==112) //F1 Key pressed
            {
                if(Table.getSelectedColumn()==0) {
                    LOV aList=new LOV();
                    
                    aList.SQL="SELECT ITEM_ID,ITEM_DESCRIPTION FROM D_INV_ITEM_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND CANCELLED=0 ORDER BY ITEM_ID";
                    aList.ReturnCol=1;
                    aList.ShowReturnCol=true;
                    aList.DefaultSearchOn=2;
                    
                    if(aList.ShowLOV()) {
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), 0);
                    }
                }
            }
            
            if(evt.getKeyCode()==155)//Insert Key Pressed
            {
                Object[] rowData=new Object[3];
                rowData[0]="";
                rowData[1]="";
                rowData[2]="";
                DataModel.addRow(rowData);
            }
            
            if(evt.getKeyCode()==127) //Delete key pressed
            {
                if(Table.getRowCount()>0) {
                    DataModel.removeRow(Table.getSelectedRow());
                }
            }
        }
        }
        catch(Exception e)
        {}
    }//GEN-LAST:event_TableKeyPressed
    
    private void HierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_HierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_HierarchyChanged
    
    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if(Table.getRowCount()>0) {
            DataModel.removeRow(Table.getSelectedRow());
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed
    
    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:
        Object[] rowData=new Object[3];
        rowData[0]="";
        rowData[1]="";
        rowData[2]="";
        DataModel.addRow(rowData);
    }//GEN-LAST:event_cmdAddActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JCheckBox chkCalculate;
    private javax.swing.JCheckBox chkShowColumn;
    private javax.swing.JCheckBox chkUsePercent;
    private javax.swing.JComboBox cmbInput;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JComboBox cmbOperation;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField txtCaption;
    private javax.swing.JTextField txtFormula;
    // End of variables declaration//GEN-END:variables
    
    private void SetFields(boolean pStat) {
        cmbModule.setEnabled(pStat);
        txtCaption.setEnabled(pStat);
        cmbOperation.setEnabled(pStat);
        cmbInput.setEnabled(pStat);
        txtFormula.setEnabled(pStat);
        chkShowColumn.setEnabled(pStat);
        chkCalculate.setEnabled(pStat);
        chkUsePercent.setEnabled(pStat);
        
        if(pStat) {
            DataModel.TableReadOnly(false);
            DataModel.SetReadOnly(1);
        }
        else {
            DataModel.TableReadOnly(true);
        }
        
        cmdAdd.setEnabled(pStat);
        cmdRemove.setEnabled(pStat);
    }
    
    private void ClearFields() {
        txtCaption.setText("");
        txtFormula.setText("");
        chkShowColumn.setSelected(false);
        chkCalculate.setSelected(false);
        chkUsePercent.setSelected(false);
        
        FormatGrid();
    }
    
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
    }
    
    private void MoveFirst() {
        ObjTax.MoveFirst();
        DisplayData();
    }
    
    private void MovePrevious() {
        ObjTax.MovePrevious();
        DisplayData();
    }
    
    private void MoveNext() {
        ObjTax.MoveNext();
        DisplayData();
    }
    
    private void MoveLast() {
        ObjTax.MoveLast();
        DisplayData();
    }
    
    private void Add() {
        EditMode=EITLERPGLOBAL.ADD;
        SetFields(true);
        ClearFields();
        DisableToolbar();
    }
    
    private void Edit() {
        EditMode=EITLERPGLOBAL.EDIT;
        SetFields(true);
        DisableToolbar();
    }
    
    private void Delete() {
        try {
            if(JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this record ?","SDML ERP",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
                if(ObjTax.Delete()) {
                    MoveLast();
                }
                else {
                    JOptionPane.showMessageDialog(null,ObjTax.LastError);
                }
            }
        }
        catch(Exception e) {
        }
    }
    
    private void Save() {
        //Form level validations
        if(cmbModule.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the module");
            return;
        }
        
        if(txtCaption.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter some caption for column");
            return;
        }
        
        if(cmbOperation.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the operation");
            return;
        }
        
        if(cmbInput.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the Input method.");
            return;
        }
        
        
        
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjTax.Insert()) {
                MoveLast();
            }
            else {
                JOptionPane.showMessageDialog(null,ObjTax.LastError);
            }
            
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjTax.Update())
            {}
            else {
                JOptionPane.showMessageDialog(null,ObjTax.LastError);
            }
        }
        
        EditMode=0;
        EnableToolbar();
        SetFields(false);
    }
    
    private void Cancel() {
        DisplayData();
        EditMode=0;
        EnableToolbar();
        SetFields(false);
    }
    
    
    
    //Didplay data on the Screen
    private void DisplayData() {
        EITLERPGLOBAL.setComboIndex(cmbModule,(int)ObjTax.getAttribute("MODULE_ID").getVal());
        txtCaption.setText((String)ObjTax.getAttribute("CAPTION").getObj());
        EITLERPGLOBAL.setComboIndex(cmbOperation,(String)ObjTax.getAttribute("OPERATION").getObj());
        EITLERPGLOBAL.setComboIndex(cmbInput,(int)ObjTax.getAttribute("INPUT").getVal());
        txtFormula.setText((String)ObjTax.getAttribute("FORMULA").getObj());
        
        if((boolean)ObjTax.getAttribute("VISIBLE_ON_FORM").getBool())
        {chkShowColumn.setSelected(true);}
        else
        {chkShowColumn.setSelected(false);}
        
        if((boolean)ObjTax.getAttribute("NO_CALCULATION").getBool())
        {chkCalculate.setSelected(true);}
        else
        {chkCalculate.setSelected(false);}
        
        if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool())
        {chkUsePercent.setSelected(true);}
        else
        {chkUsePercent.setSelected(false);}
        
        //Now Generate Table
        GenerateGrid();
    }
    
    //Sets data to the Class Object
    private void SetData() {
        
        ObjTax.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjTax.setAttribute("MODULE_ID",EITLERPGLOBAL.getComboCode(cmbModule));
        ObjTax.setAttribute("CAPTION",txtCaption.getText());
        
        if(chkShowColumn.isSelected())
        {ObjTax.setAttribute("VISIBLE_ON_FORM",true);}
        else
        {ObjTax.setAttribute("VISIBLE_ON_FORM",false);}
        
        ObjTax.setAttribute("OPERATION",EITLERPGLOBAL.getCombostrCode(cmbOperation));
        ObjTax.setAttribute("INPUT",EITLERPGLOBAL.getComboCode(cmbInput));
        ObjTax.setAttribute("FORMULA",txtFormula.getText());
        
        if(chkCalculate.isSelected())
        {ObjTax.setAttribute("NO_CALCULATION",true);}
        else
        {ObjTax.setAttribute("NO_CALCULATION",false);}
        
        if(chkUsePercent.isSelected())
        {ObjTax.setAttribute("USE_PERCENT",true);}
        else
        {ObjTax.setAttribute("USE_PERCENT",false);}
        
        
        //Now Table Data
        ObjTax.colItems.clear();
        
        for(int i=0;i<Table.getRowCount();i++) {
            clsTaxItem ObjItem=new clsTaxItem();
            
            //Include only valid items.
            String lItemID=(String)Table.getValueAt(i,0);
            
            if((!lItemID.equals(""))&&(clsItem.IsValidItemID((int)EITLERPGLOBAL.gCompanyID,lItemID))) {
                ObjItem.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                ObjItem.setAttribute("ITEM_ID",(String)Table.getValueAt(i,0));
                ObjItem.setAttribute("FORMULA",(String)Table.getValueAt(i,2));
                
                ObjTax.colItems.put(Integer.toString(ObjTax.colItems.size()+1),ObjItem);
            }
        }
        
    }
    
    
    private void SetMenuForRights() {
        
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,241)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
         
        // --- Edit Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,242)) {
            cmdEdit.setEnabled(true);
        }
        else {
            cmdEdit.setEnabled(false);
        }
         
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,243)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
         
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,244)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void GenerateGrid() {
        
        FormatGrid();
        
        //Populates Table with data from Collection
        for(int i=1;i<=ObjTax.colItems.size();i++) {
            
            clsTaxItem ObjItem=(clsTaxItem)ObjTax.colItems.get(Integer.toString(i));
            Object[] rowData=new Object[3];
            
            String lItemID=(String)ObjItem.getAttribute("ITEM_ID").getObj();
            rowData[0]=lItemID;
            rowData[1]=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID,lItemID);
            rowData[2]=(String)ObjItem.getAttribute("FORMULA").getObj();
            
            DataModel.addRow(rowData);
        }
    }
    
    
    private void FormatGrid() {
        DataModel=new EITLTableModel();
        
        Table.removeAll();
        Table.setModel(DataModel);
        
        //Set the table Readonly
        DataModel.TableReadOnly(false);
        DataModel.SetReadOnly(1); //Only Item Name column will be read-only
        
        //Add Columns
        DataModel.addColumn("Item ID");
        DataModel.addColumn("Item Name");
        DataModel.addColumn("Formula");
        
        
        //----- Install Table Model Event Listener -------//
        Table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    if(col==0) {
                        try
                        {
                        String lItemID=(String)Table.getValueAt(Table.getSelectedRow(),0);
                        String lItemName=clsItem.getItemName((int)EITLERPGLOBAL.gCompanyID, lItemID);
                        Table.setValueAt(lItemName, Table.getSelectedRow(), 1);
                        }
                        catch(Exception ex){}
                    }
                }
            }
        });
        
        
        
    }
    
    
    private void GenerateCombo() {
    
        HashMap List=new HashMap();
        String strCondition="";
                
        //----- Generate cmbType ------- //
        cmbModuleModel=new EITLComboModel();
        cmbModule.removeAllItems();
        cmbModule.setModel(cmbModuleModel);
        
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ORDER BY MODULE_ID";
        
        List=clsModules.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
            //Check that Module Access Rights are given
            int ModuleID=(int)ObjModules.getAttribute("MODULE_ID").getVal();
            int MenuID=clsMenu.getMenuIDFromModule(EITLERPGLOBAL.gCompanyID, ModuleID);
            
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,MenuID)) {
                ComboData aData=new ComboData();
                aData.Text=(String) ObjModules.getAttribute("MODULE_DESC").getObj();
                aData.Code=(int) ObjModules.getAttribute("MODULE_ID").getVal();
                cmbModuleModel.addElement(aData);
            }
        }

        
        //-------------- Operation ------------- //
        cmbOperationModel=new EITLComboModel();
        
        cmbOperation.setModel(cmbOperationModel);
        
        ComboData aData=new ComboData();
        aData.Text="+";
        aData.strCode="+";
        cmbOperationModel.addElement(aData);
        
        aData=new ComboData();
        aData.Text="-";
        aData.strCode="-";
        cmbOperationModel.addElement(aData);
        //----------------------------------------//
        
        
        //----------------- Input -----------------//
        cmbInputModel=new EITLComboModel();
        cmbInput.setModel(cmbInputModel);
        
        aData=new ComboData();
        aData.Text="Entry";
        aData.Code=1;
        cmbInputModel.addElement(aData);
        
        aData=new ComboData();
        aData.Text="Calculate";
        aData.Code=2;
        cmbInputModel.addElement(aData);
        //----------------------------------------//
        
    }
    
    private void Find() {
        Loader ObjLoader=new Loader(this,"EITLERP.frmColumnFind",true);
        frmColumnFind ObjReturn= (frmColumnFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjTax.Filter(ObjReturn.strQuery)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveFirst();
        }
    }
    
}
