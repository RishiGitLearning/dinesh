/*
 * frmColTest.java
 *
 * Created on May 4, 2004, 9:06 AM
 */

package EITLERP;

/**
 *
 * @author  nrpithva
 */ 
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.util.*;
import org.nfunk.jep.*;
import org.nfunk.jep.type.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.text.*;
import javax.swing.text.*;
  

public class frmColTest extends javax.swing.JApplet {
    
    /** Initializes the applet frmColTest */
    private EITLTableModel DataModelH;
    private EITLTableModel DataModelL;
    
    private HashMap colVariables=new HashMap();
    private HashMap colVariables_H=new HashMap();
    clsTaxColumn ObjTax=new clsTaxColumn();
    clsColumn ObjColumn=new clsColumn();
    
    private JEP myParser=new JEP();
    private boolean Updating=false;
    private boolean Updating_H=false;
    
    public void init() {
        initComponents();
        FormatGrid();
        FormatGrid_H();
        ObjTax.LoadData((int)EITLERPGLOBAL.gCompanyID);
        ObjColumn.LoadData((int)EITLERPGLOBAL.gCompanyID);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableL = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableH = new javax.swing.JTable();

        getContentPane().setLayout(null);

        jLabel1.setText("Customer Columns Testing - MIR");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 400, 16);

        jScrollPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jScrollPane1FocusLost(evt);
            }
        });

        TableL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TableLFocusLost(evt);
            }
        });

        jScrollPane1.setViewportView(TableL);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(6, 44, 618, 172);

        TableH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableH);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(12, 258, 390, 132);

    }//GEN-END:initComponents
    
    private void TableLFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TableLFocusLost
        // TODO add your handling code here:
        UpdateResults_H(0);
    }//GEN-LAST:event_TableLFocusLost
    
    private void jScrollPane1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jScrollPane1FocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jScrollPane1FocusLost
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableH;
    private javax.swing.JTable TableL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    
    private void GatherVariableValues() {
        //Scan the table and gather values for variables
        colVariables.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableL.getColumnCount();i++) {
            double lValue=0;
            if(DataModelL.getVariable(i)!=null) {
                if(!DataModelL.getVariable(i).trim().equals(""))    //If Variable not blank
                {
                    colVariables.put(DataModelL.getVariable(i),(String)TableL.getValueAt(TableL.getSelectedRow(), i));
                    
                    //Add variable Value to Parser Table
                    if((TableL.getValueAt(TableL.getSelectedRow(), i)!=null)&&(!TableL.getValueAt(TableL.getSelectedRow(), i).toString().equals(""))) {
                        lValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), i));
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelL.getVariable(i),lValue);
                }
            }
        }
    }
    
    private void SetupColumns() {
        HashMap List=new HashMap();
        
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=2 AND HEADER_LINE='L' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableL.getColumnModel();
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelL.SetVariable(TableL.getColumnCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1, true);
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
                
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                
                
                //Set the Operation Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
            else {
                DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                //Set Column ID
                DataModelL.SetColID(TableL.getColumnCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
                }
                else {
                    DataModelL.SetVariable(TableL.getColumnCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operationg Add/Substract
                DataModelL.SetOperation(TableL.getColumnCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelL.SetInclude(TableL.getColumnCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
                
                //Control Column Visibility
                if(!ObjTax.getAttribute("VISIBLE_ON_FORM").getBool()) {
                    ColModel.getColumn(TableL.getColumnCount()-1).setMinWidth(0);
                    ColModel.getColumn(TableL.getColumnCount()-1).setPreferredWidth(0);
                }
            }
        }
        
        DataModelL.addColumn("Net Amount");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"NET_AMOUNT");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
    }
    
    private void FormatGrid() {
        DataModelL=new EITLTableModel();
        
        TableL.removeAll();
        TableL.setModel(DataModelL);
        
        //Set the table Readonly
        DataModelL.TableReadOnly(false);
        
        //Add Default Columns
        DataModelL.addColumn("Sr.");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        DataModelL.addColumn("Item ID");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        DataModelL.addColumn("Description");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        
        DataModelL.addColumn("Qty");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"QTY");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        
        DataModelL.addColumn("Unit");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"  ");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        
        DataModelL.addColumn("Rate");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"RATE");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        
        DataModelL.addColumn("Gross Amount");
        DataModelL.SetColID(TableL.getColumnCount()-1, 0);
        DataModelL.SetVariable(TableL.getColumnCount()-1,"GROSS_AMOUNT");
        DataModelL.SetOperation(TableL.getColumnCount()-1, "-");
        DataModelL.SetInclude(TableL.getColumnCount()-1,true);
        
        SetupColumns();
        
        //Now hide the column 1
        TableColumnModel ColModel=TableL.getColumnModel();
        TableL.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //----- Install Table Model Event Listener -------//
        TableL.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    if(!Updating)
                    {UpdateResults(col);}
                }
            }
        });
        
        Object[] rowData=new Object[10];
        DataModelL.addRow(rowData);
        DataModelL.addRow(rowData);
        DataModelL.addRow(rowData);
    }
    
    private void UpdateResults(int pCol) {
        try {
            int ColID=0,TaxID=0,UpdateCol=0;
            String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
            double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
            Object result;
            boolean updateIt=true;
            int QtyCol=0,RateCol=0,GAmountCol=0;
            
            Updating=true; //Stops Recursion
            
            srcVariable=DataModelL.getVariable(pCol); //Variable name of currently updated Column
            
            //If this column is percentage column. Variable name would be P_XXX
            //We shoule use actual variable name, it will be found on it's associated next column
            if(srcVariable.substring(0,2).equals("P_")) {
                srcVariable=DataModelL.getVariable(pCol+1);
            }
            
            QtyCol=DataModelL.getColFromVariable("QTY"); //Index of Qty Column
            RateCol=DataModelL.getColFromVariable("RATE"); //Index of Rate Column
            GAmountCol=DataModelL.getColFromVariable("GROSS_AMOUNT"); //Index of Gross Amount Column
            
            //======= Read the Item ID - To be used when accessing item specific formula ===//
            String cellValue=(String)TableL.getValueAt(TableL.getSelectedRow(),1);
            if(cellValue==null)
            {
                strItemID="";   
            }
            else
            {
                strItemID=(String)TableL.getValueAt(TableL.getSelectedRow(), 1);
            }
            //================================================================================
            
            //====== Update Gross Amount =======
            myParser.parseExpression("QTY*RATE");
            result=myParser.getValueAsObject();
            if(result!=null) {
                DataModelL.setValueByVariable("GROSS_AMOUNT", result.toString(),TableL.getSelectedRow());
            }
            //=================================
            
            GatherVariableValues();
            
            for(int i=0;i<TableL.getColumnCount();i++) {
                strVariable=DataModelL.getVariable(i);
                
                ColID=DataModelL.getColID(i);
                
                TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                
                //Exclude Percentage Columns and System Columns
                if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)) {
                    //If percentage is used
                    if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                        //First parse the main expression
                        strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                        
                        //Now Read Associated Percentage Column
                        lnPercentValue=Double.parseDouble(DataModelL.getValueByVariable("P_"+Integer.toString(ColID),TableL.getSelectedRow()));
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                            //Update the Column
                            srcVar2=DataModelL.getVariable(pCol+1);
                            
                            UpdateCol=DataModelL.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(UpdateCol==pCol+1) {
                                    updateIt=true;
                                }
                                else {
                                    if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                        updateIt=true; //Then update it
                                    }
                                    else {
                                        if((strFormula.indexOf("QTY")!=-1)||(strFormula.indexOf("RATE")!=-1)||(strFormula.indexOf("GROSS_AMOUNT")!=-1)) {
                                            if(pCol==QtyCol||pCol==RateCol||pCol==GAmountCol)
                                            { updateIt=true;  }
                                        }
                                    }
                                }
                            }
                            
                            if(updateIt) {
                                DataModelL.setValueByVariable(strVariable,Double.toString(lnFinalResult),TableL.getSelectedRow());
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues();
                        }
                    }
                    else //Percentage Not Used
                    {
                        //First parse the main expression
                        strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                        
                        if(TaxID==6)
                        {
                           strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID,strItemID);
                           //JOptionPane.showMessageDialog(null," Formula is"+strFormula) ;
                        }
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=Double.parseDouble(result.toString());
                            //Update the Column
                            UpdateCol=DataModelL.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(strFormula.indexOf(srcVariable)!=-1) {
                                    updateIt=true;
                                }
                                else {
                                    if((strFormula.indexOf("QTY")!=-1)||(strFormula.indexOf("RATE")!=-1)||(strFormula.indexOf("GROSS_AMOUNT")!=-1)) {
                                        if(pCol==QtyCol||pCol==RateCol||pCol==GAmountCol)
                                        {updateIt=true;}
                                    }
                                }
                            }
                            if(updateIt) {
                                DataModelL.setValueByVariable(strVariable,Double.toString(lnFinalResult),TableL.getSelectedRow());
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues();
                        }
                    }
                }
            }
            
            
            //== Final Pass - Update the Net Amount ==
            lnNetAmount=0;
            double lnColValue=0;
            double lnGrossAmount=0;
            
            lnGrossAmount=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), GAmountCol));
            
            for(int c=0;c<TableL.getColumnCount();c++) {
                
                //To be included in Calculation or not
                if(DataModelL.getInclude(c)==false) {
                    //Read column value
                    if(TableL.getValueAt(TableL.getSelectedRow(), c).toString().equals("")) {
                        lnColValue=0;
                    }
                    else {
                        lnColValue=Double.parseDouble((String)TableL.getValueAt(TableL.getSelectedRow(), c));
                    }
                    
                    if(DataModelL.getOperation(c).equals("+")) //Add
                    {
                        lnGrossAmount=lnGrossAmount+lnColValue;
                    }
                    else //Substract
                    {
                        lnGrossAmount=lnGrossAmount-lnColValue;
                    }
                }
            }
            
            //Now update the Net Amount
            DataModelL.setValueByVariable("NET_AMOUNT",Double.toString(lnGrossAmount),TableL.getSelectedRow());
            
            Updating=false;
        }
        catch(Exception e) {
            Updating=false;
        }
    }
    
    private void GatherVariableValues_H() {
        String strVariable="";
        int varCol=0;
        double lnValue=0,lnSum=0;
        
        //Scan the table and gather values for variables
        colVariables_H.clear();
        
        myParser.initSymTab(); // clear the contents of the symbol table
        myParser.addStandardConstants();
        myParser.addComplex(); // among other things adds i to the symbol table
        
        for(int i=0;i<TableH.getRowCount();i++) {
            double lValue=0;
            if(DataModelH.getVariable(i)!=null) {
                if(!DataModelH.getVariable(i).equals(""))    //If Variable not blank
                {
                    colVariables_H.put(DataModelH.getVariable(i),(String)TableH.getValueAt(i, 1));
                    
                    //Add variable Value to Parser Table
                    if((TableH.getValueAt( i,1)!=null)&&(!TableH.getValueAt( i,1).toString().equals(""))) {
                        lValue=Double.parseDouble((String)TableH.getValueAt( i,1));
                    }
                    else {
                        lValue=0;
                    }
                    myParser.addVariable(DataModelH.getVariable(i),lValue);
                }
            }
        }
        
        
        //Gather Variables - sum of line columns
        for(int c=0;c<TableL.getColumnCount();c++) {
            strVariable=DataModelL.getVariable(c);
            strVariable=strVariable.trim();
            
            if((strVariable!=null) && (!strVariable.equals(""))) {
                varCol=DataModelL.getColFromVariable(strVariable);
                
                //Do the sum
                lnSum=0;
                
                try {
                    for(int r=0;r<TableL.getRowCount();r++) {
                        String theVal=(String)TableL.getValueAt(r,varCol);
                        
                        if(theVal==null) {
                        }
                        else {
                            lnValue=Double.parseDouble(TableL.getValueAt(r, varCol).toString());
                            lnSum=lnSum+lnValue;
                        }
                    }
                }
                catch(Exception e) {
                }
                //Sum Complete. Add to Parser Table
                myParser.addVariable("SUM_"+strVariable,lnSum);
            }
        }
    }
    
    private void SetupColumns_H() {
        HashMap List=new HashMap();
        Object[] rowData;
        
        
        List=clsColumn.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID=2 AND HEADER_LINE='H' ORDER BY COL_ORDER");
        TableColumnModel ColModel=TableH.getColumnModel();
        
        TableH.removeAll();
        
        for(int i=1;i<=List.size();i++) {
            clsColumn ObjColumn=(clsColumn)List.get(Integer.toString(i));
            int lTaxID=(int)ObjColumn.getAttribute("TAX_ID").getVal();
            int lColID=(int)ObjColumn.getAttribute("SR_NO").getVal();
            
            clsTaxColumn ObjTax = (clsTaxColumn)clsTaxColumn.getObject((int)EITLERPGLOBAL.gCompanyID,lTaxID);
            if((boolean)ObjTax.getAttribute("USE_PERCENT").getBool()) {
                //Add Percentage Column
                //DataModelL.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj()+"%");
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj()+"%";
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable for % Column. It will be P_ID
                DataModelH.SetVariable(TableH.getRowCount()-1,"P_"+Integer.toString(lColID));
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1, "-");
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1, true);
                
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                
                //Set Column ID
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()!=null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
            }
            else {
                //DataModelH.addColumn((String)ObjColumn.getAttribute("CAPTION").getObj());
                //Set Column ID
                
                rowData=new Object[2];
                rowData[0]=(String)ObjColumn.getAttribute("CAPTION").getObj();
                rowData[1]="0.00";
                DataModelH.addRow(rowData);
                
                DataModelH.SetColID(TableH.getRowCount()-1, lColID);
                
                //Set Variable
                if(ObjColumn.getAttribute("VARIABLE_NAME").getObj()==null) {
                    DataModelH.SetVariable(TableH.getRowCount()-1,"  ");
                }
                else {
                    DataModelH.SetVariable(TableH.getRowCount()-1,(String)ObjColumn.getAttribute("VARIABLE_NAME").getObj());
                }
                
                //Set the Operationg Add/Substract
                DataModelH.SetOperation(TableH.getRowCount()-1,(String)ObjTax.getAttribute("OPERATION").getObj());
                
                //Set stat - Include it in calculation or not
                DataModelH.SetInclude(TableH.getRowCount()-1,(boolean)ObjTax.getAttribute("NO_CALCULATION").getBool());
            }
        }
    }
    
    private void FormatGrid_H() {
        DataModelH=new EITLTableModel();
        
        EITLTableCellRenderer Renderer=new EITLTableCellRenderer();
        
        TableH.removeAll();
        TableH.setModel(DataModelH);
        
        Renderer.setColor(0, 0, Color.LIGHT_GRAY);
        
        //Set the table Readonly
        DataModelH.TableReadOnly(false);
        DataModelH.SetReadOnly(0);
        
        //Add Default Columns
        DataModelH.addColumn("Column");
        DataModelH.addColumn("Value");

        TableH.getColumnModel().getColumn(0).setCellRenderer(Renderer);
        SetupColumns_H();
        
        TableColumnModel ColModel=TableH.getColumnModel();
        TableH.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        //----- Install Table Model Event Listener -------//
        TableH.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int col = e.getColumn();
                    int row=e.getLastRow();
                    if(!Updating_H)
                    {UpdateResults_H(row);}
                }
            }
        });
    }
    
    private void UpdateResults_H(int pCol) {
        try {
            int ColID=0,TaxID=0,UpdateCol=0;
            String strFormula="",strItemID="",strVariable="",srcVariable="",srcVar2="";
            double lnPercentValue=0,lnFinalResult=0,lnNetAmount=0;
            Object result;
            boolean updateIt=true;
            int QtyCol=0,RateCol=0,GAmountCol=0;
            
            Updating_H=true; //Stops Recursion
            
            srcVariable=DataModelH.getVariable(pCol); //Variable name of currently updated Column
            
            //If this column is percentage column. Variable name would be P_XXX
            //We shoule use actual variable name, it will be found on it's associated next column
            if(srcVariable.substring(0,2).equals("P_")) {
                srcVariable=DataModelH.getVariable(pCol+1);
            }
            
            GatherVariableValues_H();
            
            for(int i=0;i<TableH.getRowCount();i++) {
                strVariable=DataModelH.getVariable(i);
                
                ColID=DataModelH.getColID(i);
                
                TaxID=ObjColumn.getTaxID((int)EITLERPGLOBAL.gCompanyID,ColID);
                
                //Exclude Percentage Columns and System Columns
                if((!strVariable.substring(0,2).equals("P_"))&&(ColID!=0)) {
                    //If percentage is used
                    if(ObjTax.getUsePercentage((int)EITLERPGLOBAL.gCompanyID,TaxID)) {
                        //First parse the main expression
                        strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        
                        //Now Read Associated Percentage Column
                        lnPercentValue=Double.parseDouble(DataModelH.getValueByVariable("P_"+Integer.toString(ColID),1));
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=(Double.parseDouble(result.toString())*lnPercentValue)/100;
                            //Update the Column
                            srcVar2=DataModelH.getVariable(pCol+1);
                            
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(UpdateCol==pCol+1) {
                                    updateIt=true;
                                }
                                else {
                                    if((strFormula.indexOf(srcVariable)!=-1)) { //If this column is dependent on updated column
                                        updateIt=true; //Then update it
                                    }
                                    else {
                                        if((strFormula.indexOf("QTY")!=-1)||(strFormula.indexOf("RATE")!=-1)||(strFormula.indexOf("GROSS_AMOUNT")!=-1)) {
                                            if(pCol==QtyCol||pCol==RateCol||pCol==GAmountCol)
                                            { updateIt=true;  }
                                        }
                                    }
                                }
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(lnFinalResult),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                    else //Percentage Not Used
                    {
                        //First parse the main expression
                        strFormula=clsTaxColumn.getFormula((int)EITLERPGLOBAL.gCompanyID,TaxID);
                        
                        //Now Parse Main expression
                        myParser.parseExpression(strFormula);
                        result=myParser.getValueAsObject();
                        if(result!=null) {
                            //Now get the percentage of the main result
                            lnFinalResult=Double.parseDouble(result.toString());
                            //Update the Column
                            UpdateCol=DataModelH.getColFromVariable(strVariable);
                            
                            updateIt=false;
                            
                            if(UpdateCol!=pCol) {
                                if(strFormula.indexOf(srcVariable)!=-1) {
                                    updateIt=true;
                                }
                                else {updateIt=true;
                                }
                            }
                            if(updateIt) {
                                DataModelH.setValueByVariableEx(strVariable,Double.toString(lnFinalResult),1);
                            }
                            //Re Gather Fresh Variable Values
                            GatherVariableValues_H();
                        }
                    }
                }
            }
            Updating_H=false;
        }
        catch(Exception e) {
            Updating_H=false;
        }
    }
    
}
