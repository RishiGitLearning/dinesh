/*
 * frmDocCancel.java
 *
 * Created on December 11, 2004, 2:37 PM
 */

package EITLERP;

/**
 *
 * @author  root
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.event.*;
import java.awt.event.*;
import javax.swing.text.*;
import java.net.*;
import java.io.*;
import EITLERP.Utils.*;
import java.sql.*;


public class frmDocCancel extends javax.swing.JApplet {
    
    private int EditMode=0;
    private clsDocCancel ObjDoc;
    
    private int SelHierarchyID=0; //Selected Hierarchy
    private int lnFromID=0;
    private String SelPrefix=""; //Selected Prefix
    private String SelSuffix=""; //Selected Prefix
    private int FFNo=0;
    
    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLComboModel cmbModuleModel;
    private EITLComboModel cmbForDeptModel;
    private EITLTableModel DataModelA;
    private EITLComboModel cmbUserModel;
    private EITLComboModel cmbMainCodeModel;
    
    private EITLTableModel DataModel;
    private boolean Updating=false;
    
    private boolean HistoryView=false;
    private String theDocNo="";
    private EITLTableModel DataModelHS;
    
    private boolean DoNotEvaluate=false;
    
    String cellLastValue="";
    
    public frmPendingApprovals frmPA;
    
    public frmDocCancel() {
        
    }
    
    /** Initializes the applet frmDocCancel */
    public void init() {
        System.gc();
        setSize(665,530);
        initComponents();
        lblMainCode.setVisible(false);
        cmbMainCode.setVisible(false);
        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));
        
        //((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        GenerateCombos();
        ObjDoc=new clsDocCancel();
        SetMenuForRights();
        
        
        
        if(getName().equals("Link")) {
            
        }
        else {
            if(ObjDoc.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjDoc.MoveLast();
                DisplayData();
                
            }
            else {
            }
        }
        
        txtAuditRemarks.setVisible(false);
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDocNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbForDept = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbModule = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtPurpose = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRemarks = new javax.swing.JTextField();
        chkCancelled = new javax.swing.JCheckBox();
        cmdNext1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox();
        lblRevNo = new javax.swing.JLabel();
        cmdPurposeBig = new javax.swing.JButton();
        cmdRemarksBig = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtDoc = new javax.swing.JTextField();
        cmdOpenDoc = new javax.swing.JButton();
        cmbMainCode = new javax.swing.JComboBox();
        lblMainCode = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("DOCUMENT CANCELLATION REQUISITION");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.setLayout(null);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Requisition No. :");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel2);
        jLabel2.setBounds(5, 17, 105, 15);

        txtDocNo.setEditable(false);
        txtDocNo.setName("GATEPASS_REQ_NO"); // NOI18N
        Tab1.add(txtDocNo);
        txtDocNo.setBounds(120, 14, 104, 19);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Date :");
        Tab1.add(jLabel3);
        jLabel3.setBounds(305, 16, 60, 15);

        txtDocDate.setName("REQ_DATE"); // NOI18N
        txtDocDate.setEnabled(false);
        Tab1.add(txtDocDate);
        txtDocDate.setBounds(372, 14, 102, 19);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Document :");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Tab1.add(jLabel4);
        jLabel4.setBounds(5, 60, 105, 15);

        cmbForDept.setName("DEPT_ID"); // NOI18N
        cmbForDept.setEnabled(false);
        cmbForDept.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbForDeptItemStateChanged(evt);
            }
        });
        Tab1.add(cmbForDept);
        cmbForDept.setBounds(120, 88, 212, 24);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Dept. :");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel5);
        jLabel5.setBounds(5, 91, 105, 15);

        cmbModule.setEnabled(false);
        cmbModule.setName("MODULE_ID"); // NOI18N
        cmbModule.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbModuleItemStateChanged(evt);
            }
        });
        Tab1.add(cmbModule);
        cmbModule.setBounds(120, 56, 390, 24);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Purpose :");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel6);
        jLabel6.setBounds(5, 205, 105, 15);

        txtPurpose.setName("PURPOSE"); // NOI18N
        txtPurpose.setEnabled(false);
        Tab1.add(txtPurpose);
        txtPurpose.setBounds(120, 202, 348, 21);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Remarks :");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel8);
        jLabel8.setBounds(5, 251, 105, 15);

        txtRemarks.setName("REMARKS"); // NOI18N
        txtRemarks.setEnabled(false);
        Tab1.add(txtRemarks);
        txtRemarks.setBounds(120, 247, 347, 20);

        chkCancelled.setText("Cancelled");
        chkCancelled.setEnabled(false);
        Tab1.add(chkCancelled);
        chkCancelled.setBounds(550, 6, 91, 23);

        cmdNext1.setMnemonic('x');
        cmdNext1.setText("Next >>");
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(536, 356, 102, 25);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("User :");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Tab1.add(jLabel7);
        jLabel7.setBounds(5, 127, 105, 15);

        cmbUser.setName("USER_ID"); // NOI18N
        cmbUser.setEnabled(false);
        Tab1.add(cmbUser);
        cmbUser.setBounds(120, 120, 214, 24);

        lblRevNo.setText("...");
        Tab1.add(lblRevNo);
        lblRevNo.setBounds(235, 15, 44, 15);

        cmdPurposeBig.setText("...");
        cmdPurposeBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPurposeBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdPurposeBig);
        cmdPurposeBig.setBounds(470, 202, 33, 21);

        cmdRemarksBig.setText("...");
        cmdRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemarksBigActionPerformed(evt);
            }
        });
        Tab1.add(cmdRemarksBig);
        cmdRemarksBig.setBounds(470, 247, 33, 21);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Doc. No. :");
        Tab1.add(jLabel1);
        jLabel1.setBounds(5, 165, 105, 15);

        txtDoc.setName("DOC_NO"); // NOI18N
        txtDoc.setEnabled(false);
        txtDoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDocKeyPressed(evt);
            }
        });
        Tab1.add(txtDoc);
        txtDoc.setBounds(120, 161, 145, 23);

        cmdOpenDoc.setText("Open Document");
        cmdOpenDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOpenDocActionPerformed(evt);
            }
        });
        Tab1.add(cmdOpenDoc);
        cmdOpenDoc.setBounds(280, 160, 138, 25);

        cmbMainCode.setEnabled(false);
        cmbMainCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMainCodeItemStateChanged(evt);
            }
        });
        Tab1.add(cmbMainCode);
        cmbMainCode.setBounds(520, 60, 120, 24);

        lblMainCode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMainCode.setText("Main Code :");
        lblMainCode.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        Tab1.add(lblMainCode);
        lblMainCode.setBounds(520, 40, 100, 15);

        Tab.addTab("Requisition Information", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.setLayout(null);

        jLabel31.setText("Hierarchy ");
        Tab2.add(jLabel31);
        jLabel31.setBounds(16, 18, 66, 15);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(86, 14, 184, 24);

        jLabel32.setText("From");
        Tab2.add(jLabel32);
        jLabel32.setBounds(20, 52, 56, 15);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(86, 50, 182, 19);

        jLabel35.setText("Remarks");
        Tab2.add(jLabel35);
        jLabel35.setBounds(20, 82, 62, 15);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        txtFromRemarks.setEnabled(false);
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(86, 78, 461, 19);

        jLabel36.setText("Your Action  ");
        Tab2.add(jLabel36);
        jLabel36.setBounds(5, 120, 86, 15);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 163, 23);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(88, 120, 182, 100);

        jLabel33.setText("Send To");
        Tab2.add(jLabel33);
        jLabel33.setBounds(18, 228, 60, 15);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(84, 224, 184, 24);

        jLabel34.setText("Remarks");
        Tab2.add(jLabel34);
        jLabel34.setBounds(16, 264, 60, 15);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(84, 260, 516, 19);

        cmdBack2.setText("<< Back");
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 25);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(553, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 15);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 626, 144);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(14, 207, 477, 148);

        jLabel9.setText("Document Update History");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(14, 191, 182, 15);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(497, 209, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(497, 239, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 339, 129, 19);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 269, 132, 24);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(2, 66, 654, 419);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(6, 488, 650, 22);
    }// </editor-fold>//GEN-END:initComponents
    
    private void cmbMainCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMainCodeItemStateChanged
        // TODO add your handling code here:
        if(EditMode==EITLERPGLOBAL.ADD || EditMode==EITLERPGLOBAL.EDIT) {
            if(cmbMainCode.isVisible()) {
                clsModuleInterface.cancelMainCode = cmbMainCode.getSelectedItem().toString();
            } else {
                clsModuleInterface.cancelMainCode = "";
            }
        }
    }//GEN-LAST:event_cmbMainCodeItemStateChanged
    
    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if(TableHS.getRowCount()>0&&TableHS.getSelectedRow()>=0) {
            txtAuditRemarks.setText((String)TableHS.getValueAt(TableHS.getSelectedRow(),4));
            BigEdit bigEdit=new BigEdit();
            bigEdit.theText=txtAuditRemarks;
            bigEdit.ShowEdit();
        }
    }//GEN-LAST:event_cmdShowRemarksActionPerformed
    
    private void txtDocKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocKeyPressed
        // TODO add your handling code here:
        //=========== Supplier List ===============
        int SelModule=EITLERPGLOBAL.getComboCode(cmbModule);
        if(evt.getKeyCode()==112&&SelModule==37) //F1 Key pressed
        {
            LOV aList=new LOV();
            
            aList.SQL="SELECT SUPP_ID,SUPPLIER_CODE,SUPP_NAME FROM D_COM_SUPP_MASTER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" ORDER BY SUPP_NAME";
            aList.ReturnCol=1;
            aList.ShowReturnCol=true;
            aList.DefaultSearchOn=3;
            
            if(aList.ShowLOV()) {
                txtDoc.setText(aList.ReturnVal);
            }
        }
        //=========================================
        
    }//GEN-LAST:event_txtDocKeyPressed
    
    private void cmbModuleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbModuleItemStateChanged
        // TODO add your handling code here:
        SetupApproval();
        
        if(EITLERPGLOBAL.getComboCode(cmbModule)==72) {
            lblMainCode.setVisible(true);
            cmbMainCode.setVisible(true);
        } else {
            lblMainCode.setVisible(false);
            cmbMainCode.setVisible(false);
        }
        
    }//GEN-LAST:event_cmbModuleItemStateChanged
    
    private void cmdOpenDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOpenDocActionPerformed
        // TODO add your handling code here:
       /* if(!txtDoc.getText().equals("")) {
            clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbModule), txtDoc.getText().trim(),EITLERPGLOBAL.getComboCode(cmbMainCode));
        }*/
        //Bhavesh
        if(!Validate()) {
            return;
        }
    }//GEN-LAST:event_cmdOpenDocActionPerformed
    
    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjDoc.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed
    
    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo=txtDocNo.getText();
        ObjDoc.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();
        
    }//GEN-LAST:event_cmdViewHistoryActionPerformed
    
    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);
        
    }//GEN-LAST:event_OpgHoldMouseClicked
    
    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);
    }//GEN-LAST:event_OpgRejectMouseClicked
    
    private void GenerateRejectedUserCombo() {
        
        HashMap List=new HashMap();
        HashMap DeptList=new HashMap();
        HashMap DeptUsers=new HashMap();
        String DocNo=txtDocNo.getText();
        
        //----- Generate cmbType ------- //
        cmbToModel=new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);
        
        
        //Now Add other hierarchy Users
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        int ModuleID = EITLERPGLOBAL.getComboCode(cmbModule);
        List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID,true);
        for(int i=1;i<=List.size();i++) {
            clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
            
            
            
            /// NEW CODE ///
            boolean IncludeUser=false;
            //Decide to include user or not
            if(EditMode==EITLERPGLOBAL.EDIT) {
                if(OpgApprove.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInApproval(EITLERPGLOBAL.gCompanyID, 44, DocNo, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(OpgReject.isSelected()) {
                    IncludeUser=ApprovalFlow.IncludeUserInRejection(EITLERPGLOBAL.gCompanyID, 44, DocNo, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }
                
                if(IncludeUser&&(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            }
            else {
                if(((int) ObjUser.getAttribute("USER_ID").getVal())!=EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///
            
            
        }
        //------------------------------ //
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            DocNo=ObjDoc.getAttribute("REQ_NO").getString();
            int Creator=ApprovalFlow.getCreator(EITLERPGLOBAL.gCompanyID, 44, DocNo);
            EITLERPGLOBAL.setComboIndex(cmbSendTo,Creator);
        }
        
    }
    
    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);
        
        if(!OpgFinal.isEnabled()) {
            //OpgFinal.setSelected(false);
            OpgHold.setSelected(true);
            
        }
        
    }//GEN-LAST:event_OpgFinalMouseClicked
    
    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgReject.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);
        
    }//GEN-LAST:event_OpgApproveMouseClicked
    
    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtFromRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed
    
    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();
        
        if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        }
        else {
            cmbSendTo.setEnabled(false);
        }
        
        if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        }
        else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }
        
    }//GEN-LAST:event_cmbHierarchyItemStateChanged
    
    private void cmdRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtRemarks;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdRemarksBigActionPerformed
    
    private void cmdPurposeBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPurposeBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit=new BigEdit();
        bigEdit.theText=txtPurpose;
        bigEdit.ShowEdit();
        
    }//GEN-LAST:event_cmdPurposeBigActionPerformed
    
    private void cmbForDeptItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbForDeptItemStateChanged
        // TODO add your handling code here:
        GenerateUserCombo();
    }//GEN-LAST:event_cmbForDeptItemStateChanged
    
    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjDoc.Close();
        ((JFrame)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed
    
    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmdPrintActionPerformed
    
    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed
    
    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed
    
    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
    }//GEN-LAST:event_cmdCancelActionPerformed
    
    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
    }//GEN-LAST:event_cmdSaveActionPerformed
    
    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:
        Delete();
    }//GEN-LAST:event_cmdDeleteActionPerformed
    
    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed
    
    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed
    
    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed
    
    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed
    
    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed
    
    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCancelled;
    private javax.swing.JComboBox cmbForDept;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbMainCode;
    private javax.swing.JComboBox cmbModule;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdOpenDoc;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdPurposeBig;
    private javax.swing.JButton cmdRemarksBig;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblMainCode;
    private javax.swing.JLabel lblRevNo;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtDoc;
    private javax.swing.JTextField txtDocDate;
    private javax.swing.JTextField txtDocNo;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtPurpose;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtToRemarks;
    // End of variables declaration//GEN-END:variables
    
    
    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }
    
    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);
        
        
    }
    
    
    private void SetFields(boolean pStat) {
        txtDocNo.setEnabled(pStat);
        txtDocDate.setEnabled(pStat);
        chkCancelled.setEnabled(pStat);
        cmbModule.setEnabled(pStat);
        txtDoc.setEnabled(pStat);
        cmbForDept.setEnabled(pStat);
        txtPurpose.setEnabled(pStat);
        txtRemarks.setEnabled(pStat);
        cmbMainCode.setEnabled(pStat);
        cmbUser.setEnabled(pStat);
        
        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        
        SetupApproval();
        
        
    }
    
    private void ClearFields() {
        txtDocNo.setText("");
        txtDocDate.setText(EITLERPGLOBAL.getCurrentDate());
        chkCancelled.setSelected(false);
        txtPurpose.setText("");
        txtRemarks.setText("");
        txtFromRemarks.setText("");
        txtDoc.setText("");
        
        FormatGridA();
        FormatGridHS();
    }
    
    //Didplay data on the Screen
    private void DisplayData() {
        
        //=========== Color Indication ===============//
        try {
            if(EditMode==0) {
                if(ObjDoc.getAttribute("APPROVED").getInt()==1) {
                    lblTitle.setBackground(Color.BLUE);
                }
                
                if(ObjDoc.getAttribute("APPROVED").getInt()!=1) {
                    lblTitle.setBackground(Color.GRAY);
                }
                
                if(ObjDoc.getAttribute("CANCELLED").getInt()==1) {
                    lblTitle.setBackground(Color.RED);
                }
                
                
            }
        }
        catch(Exception c) {
            
        }
        //============================================//
        
        
        //========= Authority Delegation Check =====================//
        if(EITLERPGLOBAL.gAuthorityUserID!=EITLERPGLOBAL.gUserID) {
            int ModuleID=44;
            
            if(clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID,EITLERPGLOBAL.gUserID,EITLERPGLOBAL.gAuthorityUserID,ModuleID)) {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gAuthorityUserID;
            }
            else {
                EITLERPGLOBAL.gNewUserID=EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//
        
        GenerateCombos();
        txtDocNo.setText((String)ObjDoc.getAttribute("REQ_NO").getObj());
        lblTitle.setText("DOCUMENT CANCELLATION REQUISITION - "+txtDocNo.getText());
        lblRevNo.setText(Integer.toString((int)ObjDoc.getAttribute("REVISION_NO").getVal()));
        txtDoc.setText((String)ObjDoc.getAttribute("DOC_NO").getObj());
        txtDocDate.setText(EITLERPGLOBAL.formatDate((String)ObjDoc.getAttribute("REQ_DATE").getObj()));
        EITLERPGLOBAL.setComboIndex(cmbForDept,(int)ObjDoc.getAttribute("DEPT_ID").getVal());
        GenerateUserCombo();
        EITLERPGLOBAL.setComboIndex(cmbModule,(int)ObjDoc.getAttribute("MODULE_ID").getVal());
        if(ObjDoc.getAttribute("MAIN_CODE").getString().equals("")) {
            EITLERPGLOBAL.setComboIndex(cmbMainCode,0);
        } else {
            EITLERPGLOBAL.setComboIndex(cmbMainCode,Integer.parseInt(ObjDoc.getAttribute("MAIN_CODE").getString()));
        }
        txtPurpose.setText((String)ObjDoc.getAttribute("PURPOSE").getObj());
        txtRemarks.setText((String)ObjDoc.getAttribute("REMARKS").getObj());
        EITLERPGLOBAL.setComboIndex(cmbUser,(int)ObjDoc.getAttribute("USER_ID").getVal());
        
        EITLERPGLOBAL.setComboIndex(cmbHierarchy,(int)ObjDoc.getAttribute("HIERARCHY_ID").getVal());
        
        chkCancelled.setSelected(ObjDoc.getAttribute("CANCELLED").getBool());
        
        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List=new HashMap();
        String DocNo=(String)ObjDoc.getAttribute("REQ_NO").getObj();
        List=ApprovalFlow.getDocumentFlow(EITLERPGLOBAL.gCompanyID, 44, DocNo);
        for(int i=1;i<=List.size();i++) {
            clsDocFlow ObjFlow=(clsDocFlow)List.get(Integer.toString(i));
            Object[] rowData=new Object[7];
            
            rowData[0]=Integer.toString(i);
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2]=(String)ObjFlow.getAttribute("STATUS").getObj();
            rowData[3]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int)ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5]=EITLERPGLOBAL.formatDate((String)ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6]=(String)ObjFlow.getAttribute("REMARKS").getObj();
            
            DataModelA.addRow(rowData);
        }
        
        
        
        //Showing Audit Trial History
        FormatGridHS();
        HashMap History=clsDocCancel.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for(int i=1;i<=History.size();i++) {
            clsDocCancel ObjHistory=(clsDocCancel)History.get(Integer.toString(i));
            Object[] rowData=new Object[5];
            
            rowData[0]=Integer.toString((int)ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(long)ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2]=EITLERPGLOBAL.formatDate((String)ObjHistory.getAttribute("ENTRY_DATE").getObj());
            
            String ApprovalStatus="";
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus="Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus="Final Approved";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus="Waiting";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus="Rejected";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus="Pending";
            }
            
            if(((String)ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus="Skiped";
            }
            
            
            rowData[3]=ApprovalStatus;
            rowData[4]=(String)ObjHistory.getAttribute("APPROVER_REMARKS").getObj();
            
            DataModelHS.addRow(rowData);
        }
        //============================================================//
    }
    
    //Sets data to the Class Object
    private void SetData() {
        ObjDoc.setAttribute("PREFIX",SelPrefix);
        ObjDoc.setAttribute("SUFFIX",SelSuffix);
        ObjDoc.setAttribute("FFNO",FFNo);
        ObjDoc.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
        ObjDoc.setAttribute("REQ_DATE",EITLERPGLOBAL.formatDateDB(txtDocDate.getText()));
        ObjDoc.setAttribute("DOC_NO",txtDoc.getText());
        
        ObjDoc.setAttribute("PURPOSE",txtPurpose.getText());
        ObjDoc.setAttribute("REMARKS",txtRemarks.getText());
        
        ObjDoc.setAttribute("USER_ID",EITLERPGLOBAL.getComboCode(cmbUser));
        ObjDoc.setAttribute("DEPT_ID",EITLERPGLOBAL.getComboCode(cmbForDept));
        ObjDoc.setAttribute("MODULE_ID",EITLERPGLOBAL.getComboCode(cmbModule));
        ObjDoc.setAttribute("MAIN_CODE",cmbMainCode.getSelectedItem().toString());
        
        //----- Update Approval Specific Fields -----------//
        ObjDoc.setAttribute("HIERARCHY_ID",EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjDoc.setAttribute("FROM",EITLERPGLOBAL.gNewUserID);
        ObjDoc.setAttribute("TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjDoc.setAttribute("FROM_REMARKS",txtToRemarks.getText());
        
        if(OpgApprove.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS","A");
        }
        
        if(OpgFinal.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS","F");
        }
        
        if(OpgReject.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS","R");
            ObjDoc.setAttribute("SEND_DOC_TO",EITLERPGLOBAL.getComboCode(cmbSendTo));
        }
        
        if(OpgHold.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS","H");
        }
        //-------------------------------------------------//
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            ObjDoc.setAttribute("CREATED_BY",EITLERPGLOBAL.gNewUserID);
            ObjDoc.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        else {
            ObjDoc.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gNewUserID);
            ObjDoc.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        }
        
        
    }
    
    
    private void GenerateDeptCombo() {
        //----- Generate Department Combo ------- //
        cmbForDeptModel=new EITLComboModel();
        cmbForDept.removeAllItems();
        cmbForDept.setModel(cmbForDeptModel);
        
        HashMap List=clsDepartment.getDeptList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_NAME").getObj();
            cmbForDeptModel.addElement(aData);
        }
        //------------------------------ //
        
    }
    
    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        String strCondition="";
        
        //----- Generate cmbType ------- //
        cmbHierarchyModel=new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);
        
        List=clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=44 ");
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            List=clsHierarchy.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID=44 ");
        }
        for(int i=1;i<=List.size();i++) {
            clsHierarchy ObjHierarchy=(clsHierarchy) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text=(String)ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //----- Generate Department Combo ------- //
        cmbForDeptModel=new EITLComboModel();
        cmbForDept.removeAllItems();
        cmbForDept.setModel(cmbForDeptModel);
        
        List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
        for(int i=1;i<=List.size();i++) {
            clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
            ComboData aData=new ComboData();
            aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
            aData.Text=(String)ObjDept.getAttribute("DEPT_DESC").getObj();
            cmbForDeptModel.addElement(aData);
        }
        //------------------------------ //
        
        
        //--- Module Combo ------//
        cmbModuleModel=new EITLComboModel();
        cmbModule.removeAllItems();
        cmbModule.setModel(cmbModuleModel);
        
        //strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID NOT IN (7,8,48) ORDER BY MODULE_ID";
        //strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID NOT IN (54)  ORDER BY MODULE_ID";
        strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" AND MODULE_ID NOT IN (54)  ORDER BY MODULE_DESC";
        
        List=clsModules.getList(strCondition);
        for(int i=1;i<=List.size();i++) {
            clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
            //Check that Module Access Rights are given
            int ModuleID=(int)ObjModules.getAttribute("MODULE_ID").getVal();
            int MenuID=clsMenu.getMenuIDFromModule(EITLERPGLOBAL.gCompanyID, ModuleID);
            
            //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,MenuID)) {
            ComboData aData=new ComboData();
            aData.Text=(String) ObjModules.getAttribute("MODULE_DESC").getObj();
            aData.Code=(int) ObjModules.getAttribute("MODULE_ID").getVal();
            cmbModuleModel.addElement(aData);
            //}
        }
        //===============================//
        
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        clsUser ObjUser=new clsUser();
        List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
        for(int i=1;i<=List.size();i++) {
            ObjUser=(clsUser) List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        //----------------------------------------//
        
        //--- Module Combo ------//
        cmbMainCodeModel=new EITLComboModel();
        cmbMainCode.removeAllItems();
        cmbMainCode.setModel(cmbMainCodeModel);
        
        
        ComboData aData=new ComboData();
        aData.Code=0;
        aData.Text="";
        cmbMainCodeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=210027;
        aData.Text="210027";
        cmbMainCodeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=210010;
        aData.Text="210010";
        cmbMainCodeModel.addElement(aData);
        
        aData=new ComboData();
        aData.Code=210072;
        aData.Text="210072";
        cmbMainCodeModel.addElement(aData);
        
        
        
        //===============================//
        
        
    }
    
    
    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List=new HashMap();
        
        try {
            if(EditMode==EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=clsHierarchy.getUserList((int)EITLERPGLOBAL.gCompanyID,SelHierarchyID,EITLERPGLOBAL.gNewUserID);
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    
                    if(ObjUser.getAttribute("USER_ID").getVal()==EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    }
                    else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            }
            else {
                //----- Generate cmbType ------- //
                cmbToModel=new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);
                
                List=ApprovalFlow.getRemainingUsers((int)EITLERPGLOBAL.gCompanyID, 44,(String)ObjDoc.getAttribute("REQ_NO").getObj());
                for(int i=1;i<=List.size();i++) {
                    clsUser ObjUser=(clsUser) List.get(Integer.toString(i));
                    ComboData aData=new ComboData();
                    aData.Code=(int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text=(String)ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        }
        catch(Exception e)
        {}
        
    }
    
    
    private void SetupApproval() {
        boolean GrantFinal=false;
        
        try {
            OpgHold.setSelected(true);
            // --- Hierarchy Change Rights Check --------
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,805)) {
                cmbHierarchy.setEnabled(true);
            }
            else {
                cmbHierarchy.setEnabled(false);
            }
            
            //Set Default Hierarchy ID for User
            int DefaultID=clsHierarchy.getDefaultHierarchy((int)EITLERPGLOBAL.gCompanyID);
            EITLERPGLOBAL.setComboIndex(cmbHierarchy,DefaultID);
            
            if(EditMode==EITLERPGLOBAL.ADD) {
                lnFromID=(int)EITLERPGLOBAL.gNewUserID;
                txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
                txtFromRemarks.setText("Creator of Document");
            }
            else {
                
                int FromUserID=ApprovalFlow.getFromID((int)EITLERPGLOBAL.gCompanyID, 44 ,(String)ObjDoc.getAttribute("REQ_NO").getObj());
                lnFromID=FromUserID;
                String strFromUser=clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
                String strFromRemarks=ApprovalFlow.getFromRemarks( (int)EITLERPGLOBAL.gCompanyID,44,FromUserID,(String)ObjDoc.getAttribute("REQ_NO").getObj());
                
                txtFrom.setText(strFromUser);
                txtFromRemarks.setText(strFromRemarks);
            }
            
            SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
            GenerateFromCombo();
            
            if(clsHierarchy.CanSkip((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
                cmbSendTo.setEnabled(true);
            }
            else {
                cmbSendTo.setEnabled(false);
            }
            
            /*if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
                OpgFinal.setEnabled(true);
            }
            else {
                OpgFinal.setEnabled(false);
                OpgFinal.setSelected(false);
            }*/
            
            
            //In Edit Mode Hierarchy Should be disabled
            if(EditMode==EITLERPGLOBAL.EDIT) {
                cmbHierarchy.setEnabled(false);
            }
            
            
            int SelModule=EITLERPGLOBAL.getComboCode(cmbModule);
            
            
            if(SelModule==50) {
                txtDoc.setText(Integer.toString(Integer.parseInt(txtDoc.getText())));
            }
            
            int MenuID=clsMenu.getMenuIDFromModule(EITLERPGLOBAL.gCompanyID, SelModule);
            int CancelFunctionID=(MenuID*10)+6;
            
            
            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, MenuID, CancelFunctionID)) {
                OpgFinal.setEnabled(true);
            } else {
                OpgFinal.setEnabled(false);
            }
            
            
            if(EditMode!=EITLERPGLOBAL.ADD) {
                int FinalApprover=ApprovalFlow.getFinalApprover(EITLERPGLOBAL.gCompanyID, SelModule, txtDoc.getText());
                if(EITLERPGLOBAL.gNewUserID==FinalApprover) {
                    OpgFinal.setEnabled(true); //Grant Final Approval rights to final approver authority only
                }
                else {
                    if(FinalApprover==0) {
                        
                        int WaitingUser=ApprovalFlow.getWaitingUser(EITLERPGLOBAL.gCompanyID, SelModule,txtDoc.getText());
                        
                        clsUser objUser=new clsUser();
                        SelHierarchyID=EITLERPGLOBAL.getComboCode(cmbHierarchy);
                        
                        boolean Result=objUser.IsSuperior(WaitingUser, EITLERPGLOBAL.gNewUserID);
                        if(Result==true) {
                            GrantFinal=true;
                        }
                        
                        //Another check
                        if(GrantFinal==false) {
                            if(clsHierarchy.IsSuperiorInHierarchy(EITLERPGLOBAL.gCompanyID,SelHierarchyID,WaitingUser,EITLERPGLOBAL.gNewUserID)) {
                                GrantFinal=true;
                            }
                        }
                        
                        /// final approve & creator is only one person
                        String str = "SELECT COUNT(*) FROM D_COM_HIERARCHY_RIGHTS WHERE HIERARCHY_ID='"+SelHierarchyID+"' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID;
                        if (data.getIntValueFromDB(str) == 1) {
                            GrantFinal=true;
                        }
                        /// end final approve & creator is only one person
                        
                        if(GrantFinal) {
                            OpgFinal.setEnabled(true);
                        }
                        else {
                            OpgFinal.setEnabled(false);
                        }
                        
                        //Additional check if module doesn't implement workflow at all
                        if(WaitingUser==0) {
                            //No information of workflow found, grant final approval
                            if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, MenuID, CancelFunctionID)) {
                                OpgFinal.setEnabled(true);
                            }
                        }
                        
                    }
                    else {
                        
                        // OpgFinal.setEnabled(false);
                        int SuperiorID=clsUser.getSuperiorID(EITLERPGLOBAL.gCompanyID,FinalApprover);
                        if(SuperiorID==EITLERPGLOBAL.gNewUserID) {
                            GrantFinal=true;
                        }
                        
                        if(GrantFinal) {
                            OpgFinal.setEnabled(true);
                        }
                        else {
                            OpgFinal.setEnabled(false);
                        }
                        
                    }
                    if(clsHierarchy.CanFinalApprove((int)EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int)EITLERPGLOBAL.gNewUserID)) {
                        OpgFinal.setEnabled(true);
                    }
                    else {
                        OpgFinal.setEnabled(false);
                        OpgFinal.setSelected(false);
                    }
                }
            }
            
            
            
            if(EditMode==0) {
                //Disable all hierarchy controls if not in Add/Edit Mode
                cmbHierarchy.setEnabled(false);
                txtFrom.setEnabled(false);
                txtFromRemarks.setEnabled(false);
                OpgApprove.setEnabled(false);
                OpgFinal.setEnabled(false);
                OpgReject.setEnabled(false);
                cmbSendTo.setEnabled(false);
                txtToRemarks.setEnabled(false);
            }
            
            
        }
        catch(Exception e) {
            
        }
        
    }
    
    private void SetMenuForRights() {
        // --- Add Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,801)) {
            cmdNew.setEnabled(true);
        }
        else {
            cmdNew.setEnabled(false);
        }
        
        // --- Edit Rights --
        cmdEdit.setEnabled(true);
   /*if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,502))
   {
      cmdEdit.setEnabled(true);
   }
   else
   {
       cmdEdit.setEnabled(false);
   }*/
        
        // --- Delete Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,803)) {
            cmdDelete.setEnabled(true);
        }
        else {
            cmdDelete.setEnabled(false);
        }
        
        // --- Print Rights --
        if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,804)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        }
        else {
            cmdPreview.setEnabled(false);
            cmdPrint.setEnabled(false);
        }
    }
    
    private void Add() {
        
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        //Now Generate new document no.
        SelectFirstFree aList=new SelectFirstFree();
        aList.ModuleID=44;
        
        if(aList.ShowList()) {
            EditMode=EITLERPGLOBAL.ADD;
            SetFields(true);
            DisableToolbar();
            ClearFields();
            SelPrefix=aList.Prefix; //Selected Prefix;
            SelSuffix=aList.Suffix;
            FFNo=aList.FirstFreeNo;
            SetupApproval();
            //Display newly generated document no.
            txtDocNo.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, 44, FFNo,  false));
            txtDocDate.requestFocus();
            
            lblTitle.setText("DOCUMENT CANCELLATION REQUISITION - "+txtDocNo.getText());
            lblTitle.setBackground(Color.BLUE);
            
            GenerateDeptCombo();
            GenerateUserCombo();
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You must select doucment number prefix. If no prefixes found in the list, Please do entry in First Free Nos.");
        }
        
    }
    
    private void Edit() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjDoc.getAttribute("REQ_NO").getObj();
        if(ObjDoc.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            
            EITLERPGLOBAL.ChangeCursorToWait(this);
            
            EditMode=EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();
            //----------------//
            
            if(ApprovalFlow.IsCreator(44,lDocNo)||clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0,802)) {
                SetFields(true);
            }
            else {
                EnableApproval();
            }
            
            
            DisableToolbar();
            txtDocDate.requestFocus();
            
            EITLERPGLOBAL.ChangeCursorToDefault(this);
            
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }
    
    private void Delete() {
        //== Financial Year Validation-------------//
        if(!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null,"The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//
        
        String lDocNo=(String)ObjDoc.getAttribute("REQ_NO").getObj();
        
        if(ObjDoc.CanDelete(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {
            if(ObjDoc.Delete(EITLERPGLOBAL.gNewUserID)) {
                MoveLast();
            }
            else {
                
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"You cannot delete this record. It is either approved/rejected record or waiting approval for other user or is referred in other documents");
        }
    }
    
    private void Save() {
        
        //Check that document no. is entered and is valid no.
        if(txtDoc.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the document no. to be cancelled");
            return;
        }
        
        //Form level validations
        if(txtDocDate.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter document date");
            return;
        }
        
        if(cmbModule.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the document type");
            return;
        }
        
        if(cmbForDept.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the department");
            return;
        }
        
        
        if(cmbHierarchy.getSelectedIndex()==-1) {
            JOptionPane.showMessageDialog(null,"Please select the hierarchy.");
            return;
        }
        
        if((!OpgApprove.isSelected())&&(!OpgReject.isSelected())&&(!OpgFinal.isSelected())&&(!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null,"Please select the Approval Action");
            return;
        }
        
        
        if(!EITLERPGLOBAL.isDate(txtDocDate.getText())) {
            JOptionPane.showMessageDialog(null,"Invalid Document Date");
            return;
        }
        
        
        if(txtPurpose.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter purpose");
            return;
        }
        
        int nModuleID = EITLERPGLOBAL.getComboCode(cmbModule);
        String str = "";
        String pDocNo = txtDoc.getText().trim();
        
        if (nModuleID==7) {
            str = "SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND GRN_NO='"+pDocNo+"' AND CANCELLED=0 AND GRN_TYPE=1 AND APPROVED=1";
        }
        
        if (nModuleID==8) {
            str = "SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND GRN_NO='"+pDocNo+"' AND CANCELLED=0 AND GRN_TYPE=2 AND APPROVED=1";
        }
        
        if (nModuleID==48) {
            str = "SELECT JOB_NO FROM D_INV_JOB_HEADER WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND JOB_NO='"+pDocNo+"' AND CANCELLED=0 AND APPROVED=1 ";
            
        }
        if (data.IsRecordExist(str)) {
            JOptionPane.showMessageDialog(null,"Document no. can not Cancelled. Please verify");
            return;
        }
        
        if (!clsModuleInterface.CanCancelDocument(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbModule), txtDoc.getText())) {
            JOptionPane.showMessageDialog(null,"Document no. you entered is invalid. Please verify");
            return;
        }
        
        if(OpgReject.isSelected()&&txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null,"Please enter the remarks for rejection");
            return;
        }
        
        //        if( (OpgApprove.isSelected()||OpgReject.isSelected())&&cmbSendTo.getItemCount()<=0)
        //        {
        //          JOptionPane.showMessageDialog(null,"Please select the user, to whom rejected document to be send");
        //          return false;
        //        }
        
        
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            int ModuleID=EITLERPGLOBAL.getComboCode(cmbModule);
            String DocNo=txtDoc.getText();
            
            try {
                ResultSet rsTmp=data.getResult("SELECT * FROM D_COM_DOC_CANCEL_REQUEST WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MODULE_ID="+ModuleID+" AND DOC_NO='"+DocNo+"' AND APPROVED=0 AND CANCELLED=0");
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    String ReqNo=rsTmp.getString("REQ_NO");
                    JOptionPane.showMessageDialog(null,"Document cancel request no. "+ReqNo+" was already prepared for this module and document no.");
                    return;
                }
            }
            catch(Exception e) {
                
            }
        }
        
        
        EITLERPGLOBAL.ChangeCursorToWait(this);
        
        SetData();
        
        if(EditMode==EITLERPGLOBAL.ADD) {
            if(ObjDoc.Insert()) {
                MoveLast();
                DisplayData();
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjDoc.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        if(EditMode==EITLERPGLOBAL.EDIT) {
            if(ObjDoc.Update()) {
                //Nothing to do
            }
            else {
                JOptionPane.showMessageDialog(null,"Error occured while saving. Error is "+ObjDoc.LastError);
                EITLERPGLOBAL.ChangeCursorToDefault(this);
                return;
            }
        }
        
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        }catch(Exception e){}
        
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode=0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void Find() {
        
        
        Loader ObjLoader=new Loader(this,"EITLERP.frmDocCancelFind",true);
        frmDocCancelFind ObjReturn= (frmDocCancelFind) ObjLoader.getObj();
        
        if(ObjReturn.Cancelled==false) {
            if(!ObjDoc.Filter(ObjReturn.strQuery,EITLERPGLOBAL.gCompanyID)) {
                JOptionPane.showMessageDialog(null,"No records found.");
            }
            MoveLast();
        }
        
    }
    
    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }
    
    public void FindEx(int pCompanyID,String pDocNo) {
        ObjDoc.Filter(" WHERE COMPANY_ID="+Integer.toString(pCompanyID)+" AND REQ_NO='"+pDocNo+"'",pCompanyID);
        ObjDoc.MoveLast();
        DisplayData();
    }
    
    public void FindWaiting() {
        ObjDoc.Filter(" WHERE REQ_NO IN(SELECT D_COM_DOC_CANCEL_REQUEST.REQ_NO FROM D_COM_DOC_CANCEL_REQUEST,D_COM_DOC_DATA WHERE D_COM_DOC_CANCEL_REQUEST.REQ_NO=D_COM_DOC_DATA.DOC_NO AND D_COM_DOC_CANCEL_REQUEST.COMPANY_ID=D_COM_DOC_DATA.COMPANY_ID AND D_COM_DOC_CANCEL_REQUEST.COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND D_COM_DOC_DATA.USER_ID="+EITLERPGLOBAL.gNewUserID+" AND D_COM_DOC_DATA.STATUS='W' AND D_COM_DOC_DATA.MODULE_ID=44)",EITLERPGLOBAL.gCompanyID);
        ObjDoc.MoveLast();
        DisplayData();
    }
    
    
    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }
    
    private void FormatGridA() {
        DataModelA=new EITLTableModel();
        
        TableA.removeAll();
        TableA.setModel(DataModelA);
        
        //Set the table Readonly
        DataModelA.TableReadOnly(true);
        
        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");
        
        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);
        
    }
    
    
    private void FormatGridHS() {
        DataModelHS=new EITLTableModel();
        
        TableHS.removeAll();
        TableHS.setModel(DataModelHS);
        
        //Set the table Readonly
        DataModelHS.TableReadOnly(true);
        
        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");
        
        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }
    
    
    
    
    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();
        
        
        //========== Setting Up Header Fields ================//
        String FieldName="";
        int SelHierarchy=EITLERPGLOBAL.getComboCode(cmbHierarchy);
        
        for(int i=0;i<Tab1.getComponentCount()-1;i++) {
            if(Tab1.getComponent(i).getName()!=null) {
                
                FieldName=Tab1.getComponent(i).getName();
                if(clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {
                    
                    Tab1.getComponent(i).setEnabled(true);
                }
                
            }
        }
        //=============== Header Fields Setup Complete =================//
        
        
        
        
        
    }
    
    
    private void PreviewReport() {
        HashMap Params=new HashMap();
        
        Params.put("COMP_ID", new Integer(EITLERPGLOBAL.gCompanyID));
        Params.put("GATE_REQ_NO",txtDocNo.getText());
        
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGPR.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"File error "+e.getMessage());
        }
    }
    
    
    private void PreviewAuditReport() {
        try {
            URL ReportFile=new URL("http://"+EITLERPGLOBAL.HostIP+"/EITLERP/Reports/rptGatepassREQA.jsp?dbURL="+EITLERPGLOBAL.DatabaseURL+"&CompanyID="+EITLERPGLOBAL.gCompanyID+"&DocNo="+txtDocNo.getText());
            EITLERPGLOBAL.loginContext.showDocument(ReportFile,"_blank");
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,"Error Previwing "+e.getMessage());
        }
    }
    
    private void GenerateUserCombo() {
        
        HashMap List=new HashMap();
        
        int SelDeptID=EITLERPGLOBAL.getComboCode(cmbForDept);
        
        //-------- Generating Buyer Combo --------//
        cmbUserModel=new EITLComboModel();
        cmbUser.removeAllItems();
        cmbUser.setModel(cmbUserModel);
        
        List=clsDepartment.getDeptUsersList(EITLERPGLOBAL.gCompanyID, SelDeptID);
        for(int i=1;i<=List.size();i++) {
            clsDeptUsers ObjUser=(clsDeptUsers)List.get(Integer.toString(i));
            
            ComboData aData=new ComboData();
            
            aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
            aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
            cmbUserModel.addElement(aData);
        }
        
    }
    
//    private boolean Validate() {
//        
//        
//        if(txtDocNo.getText().equals("")) {
//            JOptionPane.showMessageDialog(null,"Please enter Doc No ");
//            txtDocNo.requestFocus();
//            return false;
//        }
//        if(EITLERPGLOBAL.getComboCode(cmbModule)==clsSales_Party.ModuleID) {
//            if(clsModuleInterface.cancelMainCode.equals("0")||clsModuleInterface.cancelMainCode.equals("")) {
//                JOptionPane.showMessageDialog(this,"Please select main code.");
//                return false;
//            }
//        }
//        String strSql="";
//        String DBName = "";
//        String DBName1 ="";
//        String TableName = "";
//        int ModuleID=EITLERPGLOBAL.getComboCode(cmbModule);
//        TableName=clsModules.getHeaderTableName(EITLERPGLOBAL.gCompanyID, ModuleID);
//        
//        strSql = "SELECT TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='FINANCE' " +
//        "AND TABLE_NAME= '"+TableName+"'";
//        if(data.IsRecordExist(strSql)) {
//            DBName = data.getStringValueFromDB(strSql);
//            /// DBName1 = EITLERPGLOBAL.DBName;
//        }
//        else {
//            DBName = EITLERPGLOBAL.DBName;
//            //DBName1 = EITLERPGLOBAL.DBName;
//        }
//        
//        
//        String docno = data.getStringValueFromDB("SELECT DOC_NO_FIELD FROM D_COM_MODULES  WHERE MODULE_ID = " + ModuleID + " AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " ");
//        String strSQL = "SELECT * FROM "+DBName+"."+TableName+" WHERE "+docno+" = '" +txtDoc.getText().trim() + "' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "";
//        
//        if(data.IsRecordExist(strSQL)) {
//            clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbModule), txtDoc.getText().trim(),EITLERPGLOBAL.getComboCode(cmbMainCode));
//        }
//        
//        else {
//            JOptionPane.showMessageDialog(null,"Please Enter valid Doc No.....");
//            txtDocNo.requestFocus();
//            return false;
//        }
//        
//        
//        
//        return true;
//        
//        
//    }
    private boolean Validate() {

        if (txtDocNo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Doc No ");
            txtDocNo.requestFocus();
            return false;
        }
        if (EITLERPGLOBAL.getComboCode(cmbModule) == clsSales_Party.ModuleID) {
            if (clsModuleInterface.cancelMainCode.equals("0") || clsModuleInterface.cancelMainCode.equals("")) {
                JOptionPane.showMessageDialog(this, "Please select main code.");
                return false;
            }
        }
        String strSql = "";
        String DBName = "";
        String DBName1 = "";
        String TableName = "";
        int ModuleID = EITLERPGLOBAL.getComboCode(cmbModule);
        TableName = clsModules.getHeaderTableName(EITLERPGLOBAL.gCompanyID, ModuleID);
        if(TableName.startsWith("SDMLATTPAY.")){
            TableName=TableName.substring(11);
        }
        boolean proddata = false;
        strSql = "SELECT TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='FINANCE' "
                + "AND TABLE_NAME= '" + TableName + "'";
        if (data.IsRecordExist(strSql)) {
            DBName = data.getStringValueFromDB(strSql);
            /// DBName1 = EITLERPGLOBAL.DBName;
        } else {
            strSql = "SELECT TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='PRODUCTION' "
                    + "AND TABLE_NAME= '" + TableName + "'";
            if (data.IsRecordExist(strSql)) {
                DBName = data.getStringValueFromDB(strSql);
                proddata = true;
            } else {
                strSql = "SELECT TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='SDMLATTPAY' "
                    + "AND TABLE_NAME= '" + TableName + "'";
            if (data.IsRecordExist(strSql)) {
                DBName = data.getStringValueFromDB(strSql);
                proddata = true;
            }else{
                DBName = EITLERPGLOBAL.DBName;
                //DBName1 = EITLERPGLOBAL.DBName;
            }
        }
        }
        String docno = "", strSQL = "";
        if (proddata) {
            docno = data.getStringValueFromDB("SELECT DOC_NO_FIELD FROM D_COM_MODULES  WHERE MODULE_ID = " + ModuleID + "");
            strSQL = "SELECT * FROM " + DBName + "." + TableName + " WHERE " + docno + " = '" + txtDoc.getText().trim() + "'";
        } else {
            docno = data.getStringValueFromDB("SELECT DOC_NO_FIELD FROM D_COM_MODULES  WHERE MODULE_ID = " + ModuleID + " AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " ");
            strSQL = "SELECT * FROM " + DBName + "." + TableName + " WHERE " + docno + " = '" + txtDoc.getText().trim() + "' AND COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + "";
        }

        if (data.IsRecordExist(strSQL)) {
            clsModuleInterface.OpenDocument(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.getComboCode(cmbModule), txtDoc.getText().trim(), EITLERPGLOBAL.getComboCode(cmbMainCode));
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter valid Doc No.....");
            txtDocNo.requestFocus();
            return false;
        }

        return true;

    }
}
