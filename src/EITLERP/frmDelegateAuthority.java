/*
 * frmItemCriteria.java
 *
 * Created on May 28, 2005, 3:04 PM
 */
package EITLERP;

/**
 *
 * @author root
 */
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import EITLERP.AuthorityDelegation.*;

public class frmDelegateAuthority extends javax.swing.JApplet {

    private EITLTableCellRenderer Render = new EITLTableCellRenderer();
    private EITLComboModel cmbUserModel = new EITLComboModel();
    private EITLComboModel cmbAuthorityModel = new EITLComboModel();
    private EITLComboModel cmbModuleModel = new EITLComboModel();
    private EITLComboModel cmbDeptModel = new EITLComboModel();
    public String userID = "";

    boolean canInsert=false;
    
    private EITLTableModel DataModel = new EITLTableModel();

    private clsDelegationAuthority ObjAuthority = new clsDelegationAuthority();
    private clsAuthorityDelegationRequest authdelreq = new clsAuthorityDelegationRequest();

    /**
     * Initializes the applet frmItemCriteria
     */
    public void init() {
        initComponents();
        jPanel2.setVisible(false);
        cmdRemove.setVisible(false);
        //GenerateCombo();
        
        setSize(1050, 560);
        GenerateGrid();
        String userName=data.getStringValueFromDB("SELECT USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID="+EITLERPGLOBAL.gUserID+"");
        jLabel1.setText(jLabel1.getText().concat(" - "+userName));
        
        cmdAdd.setEnabled(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblStartsWith = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        opgHighPriority = new javax.swing.JRadioButton();
        opgLowPriority = new javax.swing.JRadioButton();
        opgMediumPriority = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdRemove = new javax.swing.JButton();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DELEGATION AUTHORITY");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(7, 0, 690, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(2, 2, 1050, 32);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(null);

        jLabel2.setText("User");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(60, 50, 38, 20);

        jLabel3.setText("Entry No.");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(33, 15, 70, 15);

        jLabel4.setText("Authority Of");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(10, 80, 90, 20);

        lblStartsWith.setText("From Date");
        jPanel2.add(lblStartsWith);
        lblStartsWith.setBounds(30, 160, 74, 15);

        jLabel5.setText("Module ");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(50, 130, 60, 15);

        jLabel6.setText("Department");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(17, 193, 85, 15);

        jPanel4.setLayout(null);

        opgHighPriority.setText("HIGH");
        opgHighPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgHighPriorityActionPerformed(evt);
            }
        });
        jPanel4.add(opgHighPriority);
        opgHighPriority.setBounds(10, 100, 100, 30);

        opgLowPriority.setText("LOW");
        opgLowPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgLowPriorityActionPerformed(evt);
            }
        });
        jPanel4.add(opgLowPriority);
        opgLowPriority.setBounds(10, 40, 100, 30);

        opgMediumPriority.setText("MEDIUM");
        opgMediumPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opgMediumPriorityActionPerformed(evt);
            }
        });
        jPanel4.add(opgMediumPriority);
        opgMediumPriority.setBounds(10, 70, 100, 30);

        jLabel7.setText("PRIORITY");
        jPanel4.add(jLabel7);
        jLabel7.setBounds(30, 10, 90, 15);

        jPanel2.add(jPanel4);
        jPanel4.setBounds(420, 60, 160, 140);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(1, 41, 650, 10);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TableMousePressed(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(8, 90, 860, 410);

        cmdAdd.setText("Update");
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        getContentPane().add(cmdAdd);
        cmdAdd.setBounds(420, 60, 100, 25);

        cmdRemove.setText("Remove ");
        cmdRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(cmdRemove);
        cmdRemove.setBounds(590, 50, 93, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_formMouseClicked

    private void cmdRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdRemoveActionPerformed
        // TODO add your handling code here:
        if (Table.getSelectedRow() >= 0 && Table.getRowCount() > 0) {
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete selected condition ?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                int EntryNo = Integer.parseInt((String) Table.getValueAt(Table.getSelectedRow(), 0));
                ObjAuthority.Remove(EITLERPGLOBAL.gCompanyID, EntryNo);
                GenerateGrid();
            }
        }
    }//GEN-LAST:event_cmdRemoveActionPerformed

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed
        // TODO add your handling code here:

        /*
         if(!txtFromDate.getText().trim().equals(""))
         {
         if(!EITLERPGLOBAL.isDate(txtFromDate.getText()))  
         {
         JOptionPane.showMessageDialog(null,"Please enter valid From date");
         return;
         }
          
         if(txtToDate.getText().trim().equals(""))
         {
         JOptionPane.showMessageDialog(null,"Please enter to date");
         return;
         }
         }
        

         if(!txtToDate.getText().trim().equals(""))
         {
         if(!EITLERPGLOBAL.isDate(txtToDate.getText()))  
         {
         JOptionPane.showMessageDialog(null,"Please enter valid to date");
         return;
         }
          
         if(txtFromDate.getText().trim().equals(""))
         {
         JOptionPane.showMessageDialog(null,"Please enter from date");
         return;
         }
         }
               
         int UserID=EITLERPGLOBAL.getComboCode(cmbUser);
         int AuthorityUserID=EITLERPGLOBAL.getComboCode(cmbAuthority);
         int ModuleID=EITLERPGLOBAL.getComboCode(cmbModule);
         int DeptID=EITLERPGLOBAL.getComboCode(cmbDept);
         String FromDate=EITLERPGLOBAL.formatDateDB(txtFromDate.getText());
         String ToDate=EITLERPGLOBAL.formatDateDB(txtToDate.getText());
        
         //Set the Data
         ObjAuthority.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
         ObjAuthority.setAttribute("SR_NO",0);
         ObjAuthority.setAttribute("AUTHORITY_USER_ID",AuthorityUserID);
         ObjAuthority.setAttribute("FROM_DATE",FromDate);
         ObjAuthority.setAttribute("TO_DATE",ToDate);
         ObjAuthority.setAttribute("USER_ID",UserID);
         ObjAuthority.setAttribute("MODULE_ID",ModuleID);
         ObjAuthority.setAttribute("DEPT_ID",DeptID);
         ObjAuthority.setAttribute("CREATED_BY",EITLERPGLOBAL.gUserID);
         ObjAuthority.setAttribute("CREATED_DATE",EITLERPGLOBAL.getCurrentDateDB());
         ObjAuthority.setAttribute("MODIFIED_BY",EITLERPGLOBAL.gUserID);
         ObjAuthority.setAttribute("MODIFIED_DATE",EITLERPGLOBAL.getCurrentDateDB());
        
         if(ObjAuthority.Insert()) {
         GenerateGrid();
         }
         else {
         JOptionPane.showMessageDialog(null,"Error occured while saving");
         }
         */
        if(data.IsRecordExist("SELECT DISTINCT HOD FROM DINESHMILLS.D_COM_DEPT_MASTER WHERE HOD!=0 AND HOD="+EITLERPGLOBAL.gUserID+"")){
            String nominee1 = "", nominee2 = "", nominee3 = "", priority = "", fromDate = "", moduleDesc = "", toDate = "";
            int nominee1ID = 0, nominee2ID = 0, nominee3ID = 0, moduleID = 0, active = 0;
            for (int j = 0; j < Table.getRowCount(); j++) {
                clsDelegationAuthority objAuth = new clsDelegationAuthority();
                if (Table.getValueAt(j, 0).toString().equals("true")) {
                    //Selected Item
                    System.out.println(j);
                    moduleDesc = ((String) Table.getValueAt(j, 2)).trim();
                    nominee1 = ((String) Table.getValueAt(j, 4)).trim();
                    nominee2 = ((String) Table.getValueAt(j, 6)).trim();
                    nominee3 = ((String) Table.getValueAt(j, 8)).trim();

                    priority = ((String) Table.getValueAt(j, 9)).trim().toUpperCase();
                    fromDate = ((String) Table.getValueAt(j, 10)).trim();
                    toDate = ((String) Table.getValueAt(j, 11)).trim();

                    if (priority.equals("")) {
                        priority = "LOW";
                    }

                    if (nominee1.equals("") && nominee2.equals("") && nominee3.equals("")) {
                        JOptionPane.showMessageDialog(null, "Please fill nominee 1 for module "+((String)Table.getValueAt(j, 2)).trim()+"!!");
                        return;
                    }
                    if (nominee1.equals("") && (!nominee2.equals("") || !nominee3.equals(""))) {
                        JOptionPane.showMessageDialog(null, "Please fill nominee 1 before nominee 2 or nominee 3 for module"+((String)Table.getValueAt(j, 2)).trim()+" !!");
                        Table.setValueAt("",j, 5);
                        Table.setValueAt("",j, 6);
                        Table.setValueAt("",j, 7);
                        Table.setValueAt("",j, 8);
                        return;
                    }
                    if (nominee2.equals("") && !nominee3.equals("")) {
                        JOptionPane.showMessageDialog(null, "Please fill nominee 2 before nominee3 for module "+((String)Table.getValueAt(j, 2)).trim()+" !!");
                        Table.setValueAt("",j, 7);
                        Table.setValueAt("",j, 8);                            
                        return;
                    }

                    moduleID = Integer.parseInt(Table.getValueAt(j, 1).toString());
                    //nominee1ID=Integer.parseInt(((String) Table.getValueAt(j, 3)).trim());
                    //System.out.println(Integer.valueOf(Table.getValueAt(j, 3).toString()));
                    nominee1ID = Integer.valueOf(((String) Table.getValueAt(j, 3)).trim());
                    nominee2ID = Integer.parseInt(((String) Table.getValueAt(j, 5)).trim());
                    nominee3ID = Integer.parseInt(((String) Table.getValueAt(j, 7)).trim());

                    System.out.println(moduleID + "  " + nominee1ID + " " + nominee2ID + "  " + nominee3ID);
                    System.out.println(nominee1 + " " + nominee2 + "  " + nominee3);

                    //if (nominee1ID == nominee2ID || nominee2ID == nominee3ID || nominee3ID == nominee1ID) {
                    //    JOptionPane.showMessageDialog(null, "Duplicate nominees not allowed!!");
                    //    return;
                    //}

                    objAuth.setAttribute("AUTH_MODULE_ID", moduleID);
                    objAuth.setAttribute("AUTH_MODULE_DESC", moduleDesc);
                    objAuth.setAttribute("AUTH_NOMINEE1", nominee1);
                    objAuth.setAttribute("AUTH_NOMINEE2", nominee2);
                    objAuth.setAttribute("AUTH_NOMINEE3", nominee3);
                    objAuth.setAttribute("AUTH_NOMINEE1_ID", nominee1ID);
                    objAuth.setAttribute("AUTH_NOMINEE2_ID", nominee2ID);
                    objAuth.setAttribute("AUTH_NOMINEE3_ID", nominee3ID);
                    objAuth.setAttribute("AUTH_PRIORITY", priority);

                    objAuth.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
                    objAuth.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                    objAuth.setAttribute("CHANGED_DATE", EITLERPGLOBAL.getCurrentDateDB());
                    objAuth.setAttribute("AUTH_FROM_DATE", EITLERPGLOBAL.formatDateDB(fromDate));
                    objAuth.setAttribute("AUTH_TO_DATE", EITLERPGLOBAL.formatDateDB(toDate));
                    
                    if(data.IsRecordExist("SELECT * FROM DINESHMILLS.D_COM_DELEGATION_AUTHORITY WHERE AUTH_MODULE_ID=" + objAuth.getAttribute("AUTH_MODULE_ID").getInt() +"  AND  AUTH_USER_ID=" + EITLERPGLOBAL.gNewUserID + "")){
                        String strUpdate = "UPDATE DINESHMILLS.D_COM_DELEGATION_AUTHORITY SET "
                            + " AUTH_NOMINEE1='" + objAuth.getAttribute("AUTH_NOMINEE1").getString() + "',"
                            + " AUTH_NOMINEE2='" + objAuth.getAttribute("AUTH_NOMINEE2").getString() + "',"
                            + " AUTH_NOMINEE3='" + objAuth.getAttribute("AUTH_NOMINEE3").getString() + "',"
                            + " AUTH_NOMINEE1_ID=" + objAuth.getAttribute("AUTH_NOMINEE1_ID").getInt() + ","
                            + " AUTH_NOMINEE2_ID=" + objAuth.getAttribute("AUTH_NOMINEE2_ID").getInt() + ","
                            + " AUTH_NOMINEE3_ID=" + objAuth.getAttribute("AUTH_NOMINEE3_ID").getInt() + ","
                            + " AUTH_PRIORITY='" + objAuth.getAttribute("AUTH_PRIORITY").getString() + "' , "
                            + "CHANGED_DATE='" + objAuth.getAttribute("CHANGED_DATE").getString() + "',"
                            + "MODIFIED_DATE='" + objAuth.getAttribute("MODIFIED_DATE").getString() + "',"
                            + "MODIFIED_BY=" + objAuth.getAttribute("MODIFIED_BY").getInt() + ","
                            + "AUTH_FROM_DATE='" + objAuth.getAttribute("AUTH_FROM_DATE").getString() + "',"
                            + "AUTH_TO_DATE='" + objAuth.getAttribute("AUTH_TO_DATE").getString() + "',"
                            + "CHANGED=1 "
                            + " WHERE AUTH_MODULE_ID=" + objAuth.getAttribute("AUTH_MODULE_ID").getInt() + " AND"
                            + " AUTH_USER_ID=" + EITLERPGLOBAL.gNewUserID + " ";
                        System.out.println(strUpdate);
                        data.Execute(strUpdate);
                    }else{
                          String strInsert="INSERT INTO DINESHMILLS.D_COM_DELEGATION_AUTHORITY (COMPANY_ID, AUTH_MODULE_ID, AUTH_MODULE_DESC, AUTH_USER_ID, AUTH_NOMINEE1, AUTH_NOMINEE2, AUTH_NOMINEE3, AUTH_PRIORITY, CHANGED, CHANGED_DATE, AUTH_NOMINEE1_ID, AUTH_NOMINEE2_ID, AUTH_NOMINEE3_ID, AUTH_FROM_DATE, AUTH_TO_DATE)"                                        
                                    + " VALUES (2,'"+objAuth.getAttribute("AUTH_MODULE_ID").getInt()+"',"
                                    + "'"+objAuth.getAttribute("AUTH_MODULE_DESC").getString()+"',"
                                    + ""+EITLERPGLOBAL.gNewUserID+","
                                    + "'"+objAuth.getAttribute("AUTH_NOMINEE1").getString()+"',"
                                    + "'"+objAuth.getAttribute("AUTH_NOMINEE2").getString()+"',"
                                    + "'"+objAuth.getAttribute("AUTH_NOMINEE3").getString()+"',"
                                    + "'"+objAuth.getAttribute("AUTH_PRIORITY").getString()+"',1,'"+EITLERPGLOBAL.getCurrentDateDB()+"'," 
                                    //+ ""+getAttribute("MODIFIED_BY").getInt()+",'"+getAttribute("MODIFIED_DATE").getString()+"' ,"
                                    + ""+objAuth.getAttribute("AUTH_NOMINEE1_ID").getInt()+","    
                                    + ""+objAuth.getAttribute("AUTH_NOMINEE2_ID").getInt()+","                                            
                                    + ""+objAuth.getAttribute("AUTH_NOMINEE3_ID").getInt()+","    
                                    +"'"+EITLERPGLOBAL.formatDateDB(objAuth.getAttribute("AUTH_FROM_DATE").getString())+"', "
                                    +"'"+EITLERPGLOBAL.formatDateDB(objAuth.getAttribute("AUTH_TO_DATE").getString())+"') "
                                    //+ ""+objAuth.getAttribute("AUTH_ACTIVE_MODULE_ID").getInt()+")"                                    
                                    ;
                                                        
                          //String strDel="DELETE FROM DINESHMILLS.D_COM_DELEGATION_AUTHORITY WHERE AUTH_MODULE_ID="+objcolAuthDelReqDetails.getAttribute("AUTH_MODULE_ID").getInt()+" "
                    //            + " AND AUTH_USER_ID='"+getAttribute("AUTH_USER_ID").getString()+"' ";
                        //if (getAttribute("CORRECTION_TYPE").getString().contains("MIS-PUNCH")) {
                                            
                            System.out.println(strInsert);
                     //       data.Execute(strDel);                                                        
                            data.Execute(strInsert);                                                        
                    }
                    
                    
                }

            }           
        }else
        {
        int checkCount = 0;        
        for (int j = 0; j < Table.getRowCount(); j++) {
            if (Table.getValueAt(j, 0).toString().equals("true")) {
                checkCount++;
            }
        }
        if (checkCount == 0) {
            JOptionPane.showMessageDialog(null, "Please select any record to update!!");
            return;
        }
        
        String nominee1check = "", nominee2check = "", nominee3check = "";
        int nominee1IDcheck = 0, nominee2IDcheck = 0, nominee3IDcheck = 0;
        for (int j = 0; j < Table.getRowCount(); j++) {
            if (Table.getValueAt(j, 0).toString().equals("true")) {
                //Selected Item
                System.out.println(j);
                nominee1check = ((String) Table.getValueAt(j, 4)).trim();
                nominee2check = ((String) Table.getValueAt(j, 6)).trim();
                nominee3check = ((String) Table.getValueAt(j, 8)).trim();               
                

                if (nominee1check.equals("") && nominee2check.equals("") && nominee3check.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please fill nominee 1 for module "+((String)Table.getValueAt(j, 2)).trim()+" !!");
                    return;
                }
                if (nominee1check.equals("") && (!nominee2check.equals("") || !nominee3check.equals(""))) {
                    JOptionPane.showMessageDialog(null, "Please fill nominee 1 before nominee 2 or nominee 3 for module "+((String)Table.getValueAt(j, 2)).trim()+" !!");
                    Table.setValueAt("",j, 5);
                    Table.setValueAt("",j, 6);
                    Table.setValueAt("",j, 7);
                    Table.setValueAt("",j, 8);                            
                    return;
                }
                if (nominee2check.equals("") && !nominee3check.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please fill nominee 2 before nominee3 for module "+((String)Table.getValueAt(j, 2)).trim()+" !!");
                    Table.setValueAt("",j, 7);
                    Table.setValueAt("",j, 8);                            
                    return;
                }
                
                nominee1IDcheck = Integer.valueOf(((String) Table.getValueAt(j, 3)).trim());
                nominee2IDcheck = Integer.valueOf(((String) Table.getValueAt(j, 5)).trim());
                nominee3IDcheck = Integer.valueOf(((String) Table.getValueAt(j, 7)).trim());

                System.out.println(nominee1IDcheck + " " + nominee2IDcheck + "  " + nominee3IDcheck);
                System.out.println(nominee1check + " " + nominee2check + "  " + nominee3check);

                //if (nominee1IDcheck == nominee2IDcheck || nominee2IDcheck == nominee3IDcheck || nominee3IDcheck == nominee1IDcheck) {
                //    JOptionPane.showMessageDialog(null, "Duplicate nominees not allowed!!");
                //    return;
                //}

            } 
        }
        
        int FFNo = 0;
        int ModuleId = 206;
        
        EITLERP.FeltSales.common.SelectFirstFree aList = new EITLERP.FeltSales.common.SelectFirstFree();
        aList.ModuleID = 206;
        aList.FirstFreeNo = 243;
        FFNo = aList.FirstFreeNo;
        //lbldoc.setText(clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        authdelreq.setAttribute("AUTH_DEL_REQ_NO", clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, false));
        
        authdelreq.setAttribute("AUTH_DEL_REQ_DATE", EITLERPGLOBAL.getCurrentDateDB());        
        
        authdelreq.setAttribute("AUTH_USER_ID", Integer.toString(EITLERPGLOBAL.gUserID));
        
        authdelreq.setAttribute("MODULE_ID", ModuleId);
        authdelreq.setAttribute("USER_ID", EITLERPGLOBAL.gNewUserID);
        authdelreq.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        
        authdelreq.setAttribute("REJECTED_REMARKS", "");
        authdelreq.setAttribute("REMARKS", "");
        authdelreq.setAttribute("APPROVAL_STATUS", "");
        authdelreq.setAttribute("APPROVER_REMARKS", "");
        authdelreq.setAttribute("ENTRY_DATE", EITLERPGLOBAL.getCurrentDateDB());

        //----- Update Approval Specific Fields -----------//
        int getHirarchyID=data.getIntValueFromDB("SELECT H.HIERARCHY_ID FROM DINESHMILLS.D_COM_HIERARCHY H,D_COM_HIERARCHY_RIGHTS HR WHERE H.HIERARCHY_ID=HR.HIERARCHY_ID AND MODULE_ID=206 AND HR.USER_ID="+EITLERPGLOBAL.gNewUserID+"");
        authdelreq.setAttribute("HIERARCHY_ID", getHirarchyID);
        authdelreq.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        authdelreq.setAttribute("TO", "");
        authdelreq.setAttribute("FROM_REMARKS", "");        
        authdelreq.setAttribute("APPROVAL_STATUS", "A");
        authdelreq.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
        authdelreq.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateDB());
  

        String nominee1 = "", nominee2 = "", nominee3 = "", priority = "" ,fromDate="",moduleDesc="", toDate="" ;
        int nominee1ID = 0, nominee2ID = 0, nominee3ID = 0, moduleID = 0,active=0;
        
        authdelreq.hmcolAuthDelReqDetails.clear();
        //Check the entered details in Table.
        for (int i = 0; i <= Table.getRowCount() - 1; i++) {            
            clsAuthorityDelegationRequestDetails colauthdelreqdetails = new clsAuthorityDelegationRequestDetails();
            if (Table.getValueAt(i, 0).toString().equals("true")) {
            //if (Table.getValueAt(i, 0).toString().equals("true")) {
            //    active=1;
            //}else{
            //    active=0;
            //}
            moduleID = Integer.parseInt(Table.getValueAt(i, 1).toString());
            moduleDesc=((String) Table.getValueAt(i, 2)).trim();
            
            nominee1ID = Integer.valueOf(((String) Table.getValueAt(i, 3)).trim());
            nominee2ID = Integer.parseInt(((String) Table.getValueAt(i, 5)).trim());
            nominee3ID = Integer.parseInt(((String) Table.getValueAt(i, 7)).trim());

            nominee1 = ((String) Table.getValueAt(i, 4)).trim();
            nominee2 = ((String) Table.getValueAt(i, 6)).trim();
            nominee3 = ((String) Table.getValueAt(i, 8)).trim();

            priority = ((String) Table.getValueAt(i, 9)).trim().toUpperCase();
            fromDate = ((String) Table.getValueAt(i, 10)).trim();
            toDate = ((String) Table.getValueAt(i, 11)).trim();            
            
            
            if (priority.equals("")) {
                priority = "LOW";
            }
            if(nominee1.trim().equals("")){
                nominee1ID=0;
            }
            if(nominee2.trim().equals("")){
                nominee2ID=0;
            }
            if(nominee3.trim().equals("")){
                nominee3ID=0;
            }

            System.out.println(priority);
            colauthdelreqdetails.setAttribute("AUTH_ACTIVE_MODULE_ID", active);            
            colauthdelreqdetails.setAttribute("AUTH_MODULE_ID", moduleID);
            colauthdelreqdetails.setAttribute("AUTH_MODULE_DESC", moduleDesc);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE1_ID", nominee1ID);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE1", nominee1);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE2_ID", nominee2ID);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE2", nominee2);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE3_ID", nominee3ID);
            colauthdelreqdetails.setAttribute("AUTH_NOMINEE3", nominee3);
            colauthdelreqdetails.setAttribute("AUTH_PRIORITY", priority);
            colauthdelreqdetails.setAttribute("AUTH_FROM_DATE", fromDate);
            colauthdelreqdetails.setAttribute("AUTH_TO_DATE", toDate);

            authdelreq.hmcolAuthDelReqDetails.put(Integer.toString(authdelreq.hmcolAuthDelReqDetails.size() + 1), colauthdelreqdetails);
            }
        }
        
        if (authdelreq.Insert()) {
            clsFirstFree.getNextFreeNo(EITLERPGLOBAL.gCompanyID, ModuleId, FFNo, true);
            authdelreq.LoadData(EITLERPGLOBAL.gCompanyID);
            //MoveLast();
            //DisplayData();
        } else {
            JOptionPane.showMessageDialog(this, "Error occured while saving. Error is " + authdelreq.LastError, " SAVING ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        }
        
        GenerateGrid();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void opgLowPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgLowPriorityActionPerformed
        if (opgLowPriority.isSelected()) {
            opgHighPriority.setSelected(false);
        }
    }//GEN-LAST:event_opgLowPriorityActionPerformed

    private void opgHighPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgHighPriorityActionPerformed
        if (opgHighPriority.isSelected()) {
            opgLowPriority.setSelected(false);
        }
    }//GEN-LAST:event_opgHighPriorityActionPerformed

    private void opgMediumPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opgMediumPriorityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_opgMediumPriorityActionPerformed

    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed
        
        
        try {
            if (evt.getKeyCode() == 112) //F1 Key pressed
            {
                if (Table.getSelectedColumn() == 4 || Table.getSelectedColumn() == 6 || Table.getSelectedColumn() == 8) {
                    LOV aList = new LOV();
                    if(data.IsRecordExist("SELECT DISTINCT SUPERIOR_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE SUPERIOR_ID="+EITLERPGLOBAL.gUserID+" AND LOCKED=0 AND LEFT_DATE='0000-00-00' AND SUPERIOR_ID NOT IN (55,364)")){
                        aList.SQL = "SELECT USER_ID,USER_NAME,DEPT_DESC FROM\n"
                                + "(SELECT USER_ID,USER_NAME,DEPT_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID IN \n"
                                + "(SELECT DISTINCT SUPERIOR_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE LOCKED=0 AND LEFT_DATE='0000-00-00'"
                                + " UNION ALL SELECT USER_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE DEPT_ID="+EITLERPGLOBAL.gUserDeptID+" ) \n"
                                + "AND USER_ID>0 AND LOCKED=0 AND LEFT_DATE='0000-00-00' AND USER_ID NOT IN (55,364)  UNION ALL  SELECT USER_ID,USER_NAME,DEPT_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID IN (307) "
                                + "ORDER BY USER_NAME) AS A\n"
                                + "LEFT JOIN\n"
                                + "(SELECT DEPT_ID,DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER) AS B\n"
                                + "ON A.DEPT_ID=B.DEPT_ID";
                        
                    }else{
                    
                    //aList.SQL = "SELECT USER_ID,USER_NAME FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID>0 AND LOCKED=0 AND LEFT_DATE='0000-00-00' AND DEPT_ID="+EITLERPGLOBAL.gUserDeptID+" ";
                        aList.SQL = "SELECT USER_ID,USER_NAME,DEPT_DESC FROM\n"
                                +  " (SELECT USER_ID,USER_NAME,DEPT_ID FROM DINESHMILLS.D_COM_USER_MASTER WHERE USER_ID>0 AND LOCKED=0 AND LEFT_DATE='0000-00-00' AND DEPT_ID=" + EITLERPGLOBAL.gUserDeptID + ") AS A "
                                + " LEFT JOIN\n"
                                + "(SELECT DEPT_ID,DEPT_DESC FROM DINESHMILLS.D_COM_DEPT_MASTER) AS B\n"
                                + "ON A.DEPT_ID=B.DEPT_ID";
                        
                    }
                    System.out.println(aList.SQL);
                    aList.ReturnCol = 1;
                    aList.SecondCol = 2;
                    aList.ShowReturnCol = true;
                    aList.DefaultSearchOn = 2;

                    if (aList.ShowLOV()) {
                        if (Table.getCellEditor() != null) {
                            Table.getCellEditor().stopCellEditing();
                        }
                        Table.setValueAt(aList.ReturnVal, Table.getSelectedRow(), Table.getSelectedColumn() - 1);
                        Table.setValueAt(aList.SecondVal, Table.getSelectedRow(), Table.getSelectedColumn());
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_TableKeyPressed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        try {
            if (Table.getSelectedColumn() == 0) {
                int checkCount = 0;
                for (int j = 0; j < Table.getRowCount(); j++) {
                    if (Table.getValueAt(j, 0).toString().equals("true")) {
                        checkCount++;
                    }
                }
                if (checkCount == 0) {
                    //JOptionPane.showMessageDialog(null, "Please select any record to update!!");
                    //return;
                    cmdAdd.setEnabled(false);
                }else{
                    cmdAdd.setEnabled(true);
                }
                
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_TableMouseClicked

    private void TableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TableMousePressed

    private void TableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TableKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStartsWith;
    private javax.swing.JRadioButton opgHighPriority;
    private javax.swing.JRadioButton opgLowPriority;
    private javax.swing.JRadioButton opgMediumPriority;
    // End of variables declaration//GEN-END:variables

    private void FormatGrid() {
        DataModel = new EITLTableModel();

        Table.removeAll();

        Table.setModel(DataModel);
        TableColumnModel ColModel = Table.getColumnModel();
        Table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        DataModel.addColumn("*");
        DataModel.addColumn(""); // Read Only - Hidden
        DataModel.addColumn("Module");
        DataModel.addColumn(""); // Read Only - Hidden
        DataModel.addColumn("Nominee1");
        DataModel.addColumn(""); // Read Only - Hidden
        DataModel.addColumn("Nominee2");
        DataModel.addColumn(""); // Read Only - Hidden
        DataModel.addColumn("Nominee3");
        DataModel.addColumn("Priority");
        DataModel.addColumn("From Date");
        DataModel.addColumn("To Date");

        DataModel.TableReadOnly(false);
        DataModel.SetReadOnly(2);

        //Hide Unit Code column
        Table.getColumnModel().getColumn(0).setMinWidth(20);
        Table.getColumnModel().getColumn(0).setMaxWidth(30);        
        Table.getColumnModel().getColumn(1).setMinWidth(0);
        Table.getColumnModel().getColumn(1).setMaxWidth(0);
        Table.getColumnModel().getColumn(1).setWidth(0);
        Table.getColumnModel().getColumn(2).setMinWidth(220);
        Table.getColumnModel().getColumn(2).setMaxWidth(230);        
        
        Table.getColumnModel().getColumn(3).setMinWidth(0);
        Table.getColumnModel().getColumn(3).setMaxWidth(0);
        Table.getColumnModel().getColumn(3).setWidth(0);
        Table.getColumnModel().getColumn(5).setMinWidth(0);
        Table.getColumnModel().getColumn(5).setMaxWidth(0);
        Table.getColumnModel().getColumn(5).setWidth(0);
        Table.getColumnModel().getColumn(7).setMinWidth(0);
        Table.getColumnModel().getColumn(7).setMaxWidth(0);
        Table.getColumnModel().getColumn(7).setWidth(0);

        //DataModel.SetNumeric(1,true);
        //DataModel.TableReadOnly(true);
        Render.setCustomComponent(0, "CheckBox");
        Table.getColumnModel().getColumn(0).setCellRenderer(Render);
        Table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));

        //TableColumn tc = Table.getColumnModel().getColumn(0);
        //tc.setCellEditor(Table.getDefaultEditor(Boolean.class));
        //tc.setCellRenderer(Table.getDefaultRenderer(Boolean.class));
        //tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));
        
        JComboBox cmbPriority = new JComboBox();

        EITLComboModel cmbDayTypeModel = new EITLComboModel();
        cmbPriority.removeAllItems();
        cmbPriority.setModel(cmbDayTypeModel);

        ComboData aData = new ComboData();
        aData.strCode = "LOW";
        aData.Text = "LOW";
        cmbDayTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "MEDIUM";
        aData.Text = "MEDIUM";
        cmbDayTypeModel.addElement(aData);

        aData = new ComboData();
        aData.strCode = "HIGH";
        aData.Text = "HIGH";
        cmbDayTypeModel.addElement(aData);
            //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), "ComboBox");
        //Renderer.setCustomComponent(tblDetailDataModel.getColFromVariable("LVT_LEAVE_TYPE"), cmbLeavaType);

        Table.getColumnModel().getColumn(9).setCellEditor(new DefaultCellEditor(cmbPriority));

    }

    private void GenerateGrid() {
        HashMap List = new HashMap();

        List = ObjAuthority.getList(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID);
        //List=ObjAuthority.getList();
        if(List.size()==0) {                
                ((JFrame)getParent().getParent().getParent().getParent()).dispose();
            }
        
        FormatGrid();

        for (int i = 1; i <= List.size(); i++) {
            Object[] rowData = new Object[12];
            clsDelegationAuthority ObjItem = (clsDelegationAuthority) List.get(Integer.toString(i));

            rowData[0] = new Boolean(false);
            //rowData[1]=Integer.toString((int)ObjItem.getAttribute("SR_NO").getVal());
            rowData[1] = ObjItem.getAttribute("AUTH_MODULE_ID").getInt();
            rowData[2] = (String) ObjItem.getAttribute("AUTH_MODULE_DESC").getObj();
            rowData[3] = String.valueOf(ObjItem.getAttribute("AUTH_NOMINEE1_ID").getInt());
            rowData[4] = (String) ObjItem.getAttribute("AUTH_NOMINEE1").getObj();
            rowData[5] = String.valueOf(ObjItem.getAttribute("AUTH_NOMINEE2_ID").getInt());
            rowData[6] = (String) ObjItem.getAttribute("AUTH_NOMINEE2").getObj();
            rowData[7] = String.valueOf(ObjItem.getAttribute("AUTH_NOMINEE3_ID").getInt());
            rowData[8] = (String) ObjItem.getAttribute("AUTH_NOMINEE3").getObj();
            rowData[9] = (String) ObjItem.getAttribute("AUTH_PRIORITY").getObj();            
            if(ObjItem.getAttribute("AUTH_FROM_DATE").getString().equals("0000-00-00")){
                rowData[10] = "";
            }else
            {
                rowData[10] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("AUTH_FROM_DATE").getObj());
            }
            //rowData[10] = (String) ObjItem.getAttribute("AUTH_FROM_DATE").getObj();
            //rowData[11] = (String) ObjItem.getAttribute("AUTH_TO_DATE").getObj();
            if( ObjItem.getAttribute("AUTH_TO_DATE").getString().equals("0000-00-00")){
                rowData[11] = "";
            }else
            {
                rowData[11] = EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("AUTH_TO_DATE").getObj());
            }
            /*rowData[3]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("FROM_DATE").getObj());
             rowData[4]=EITLERPGLOBAL.formatDate((String)ObjItem.getAttribute("TO_DATE").getObj());
             rowData[5]=clsModules.getModuleName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("MODULE_ID").getVal());
             rowData[6]=clsUser.getUserName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("AUTHORITY_USER_ID").getVal());
             rowData[7]=clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID,(int)ObjItem.getAttribute("DEPT_ID").getVal());
             */
            DataModel.addRow(rowData);
        }

    }

    /*
     private void GenerateCombo() {

     //--- Module Combo ------//
     cmbModuleModel=new EITLComboModel();
     cmbModule.removeAllItems();
     cmbModule.setModel(cmbModuleModel);
        
     String strCondition=" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID)+" ORDER BY MODULE_ID";
        
     HashMap List=clsModules.getList(strCondition);
     for(int i=1;i<=List.size();i++) {
     clsModules ObjModules=(clsModules) List.get(Integer.toString(i));
     //Check that Module Access Rights are given
     int ModuleID=(int)ObjModules.getAttribute("MODULE_ID").getVal();
     int MenuID=clsMenu.getMenuIDFromModule(EITLERPGLOBAL.gCompanyID, ModuleID);
            
     //if(clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, 0,MenuID)) {
     ComboData aData=new ComboData();
     aData.Text=(String) ObjModules.getAttribute("MODULE_DESC").getObj();
     aData.Code=(int) ObjModules.getAttribute("MODULE_ID").getVal();
     cmbModuleModel.addElement(aData);
     //}
     }
     //===============================//
        
        
     //-------- Generating Buyer Combo --------//
     cmbUserModel=new EITLComboModel();
     cmbUser.removeAllItems();
     cmbUser.setModel(cmbUserModel);
     clsUser ObjUser=new clsUser();
     List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
     for(int i=1;i<=List.size();i++) {
     ObjUser=(clsUser) List.get(Integer.toString(i));
            
     ComboData aData=new ComboData();
            
     aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
     aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
     cmbUserModel.addElement(aData);
     }
     //----------------------------------------//
        

        
     //-------- Generating Buyer Combo --------//
     cmbAuthorityModel=new EITLComboModel();
     cmbAuthority.removeAllItems();
     cmbAuthority.setModel(cmbAuthorityModel);
     ObjUser=new clsUser();
     List=ObjUser.getList(" WHERE COMPANY_ID="+Long.toString(EITLERPGLOBAL.gCompanyID));
     for(int i=1;i<=List.size();i++) {
     ObjUser=(clsUser) List.get(Integer.toString(i));
            
     ComboData aData=new ComboData();
            
     aData.Text=(String) ObjUser.getAttribute("USER_NAME").getObj();
     aData.Code=(long)ObjUser.getAttribute("USER_ID").getVal();
            
     cmbAuthorityModel.addElement(aData);
     }
     //----------------------------------------//
        

     //----- Generate Department Combo ------- //
     cmbDeptModel=new EITLComboModel();
     cmbDept.removeAllItems();
     cmbDept.setModel(cmbDeptModel);
        
        
     List=clsDepartment.getList(" WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID);
     for(int i=1;i<=List.size();i++) {
     clsDepartment ObjDept=(clsDepartment) List.get(Integer.toString(i));
     ComboData aData=new ComboData();
     aData.Code=(int) ObjDept.getAttribute("DEPT_ID").getVal();
     aData.Text=(String) ObjDept.getAttribute("DEPT_DESC").getObj();
     cmbDeptModel.addElement(aData);
     }
     //------------------------------ //
        
        
     }
    
     */
    
    class MyItemListener implements ItemListener
  {
    public void itemStateChanged(ItemEvent e) {
      Object source = e.getSource();
      if (source instanceof AbstractButton == false) return;
      boolean checked = e.getStateChange() == ItemEvent.SELECTED;
      for(int x = 0, y = Table.getRowCount(); x < y; x++)
      {
        Table.setValueAt(new Boolean(checked),x,0);
      }
    }
  }
}


