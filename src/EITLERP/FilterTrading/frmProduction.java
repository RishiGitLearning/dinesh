/*
 * frmDocCancel.java
 *
 * Created on December 11, 2004, 2:37 PM
 */
package EITLERP.FilterTrading;

/**
 *
 * @author root
 */
import EITLERP.*;
import javax.swing.*;
import java.awt.*;
import java.util.*;
import TReportWriter.SimpleDataProvider.TRow;
import TReportWriter.SimpleDataProvider.TTable;
import TReportWriter.TReportEngine;
import java.sql.ResultSet;

public class frmProduction extends javax.swing.JApplet {

    private int EditMode = 0;
    private clsProduction ObjDoc;
    private TReportEngine objEngine = new TReportEngine();

    private int SelHierarchyID = 0; //Selected Hierarchy
    private int lnFromID = 0;
    private String SelPrefix = ""; //Selected Prefix
    private String SelSuffix = ""; //Selected Prefix
    private int FFNo = 0;
    private int mlstrc;
    String seleval = "";

    private EITLComboModel cmbHierarchyModel;
    private EITLComboModel cmbToModel;
    private EITLTableModel DataModelA, DataModelPiece;

    private EITLTableModel DataModel;
    private boolean Updating = false;

    private boolean HistoryView = false;
    private String theDocNo = "";
    private EITLTableModel DataModelHS;

    private boolean DoNotEvaluate = false;

    String cellLastValue = "";

    public frmPendingApprovals frmPA;

    public frmProduction() {

    }

    /**
     * Initializes the applet frmInvoiceCancel
     */
    public void init() {
        System.gc();
        setSize(795, 580);
        initComponents();

        //Now show the Images
        cmdTop.setIcon(EITLERPGLOBAL.getImage("TOP"));
        cmdBack.setIcon(EITLERPGLOBAL.getImage("BACK"));
        cmdNext.setIcon(EITLERPGLOBAL.getImage("NEXT"));
        cmdLast.setIcon(EITLERPGLOBAL.getImage("LAST"));
        cmdNew.setIcon(EITLERPGLOBAL.getImage("NEW"));
        cmdEdit.setIcon(EITLERPGLOBAL.getImage("EDIT"));
        cmdDelete.setIcon(EITLERPGLOBAL.getImage("DELETE"));
        cmdSave.setIcon(EITLERPGLOBAL.getImage("SAVE"));
        cmdCancel.setIcon(EITLERPGLOBAL.getImage("UNDO"));
        cmdFilter.setIcon(EITLERPGLOBAL.getImage("FIND"));
        cmdPreview.setIcon(EITLERPGLOBAL.getImage("PREVIEW"));
        cmdPrint.setIcon(EITLERPGLOBAL.getImage("PRINT"));
        cmdExit.setIcon(EITLERPGLOBAL.getImage("EXIT"));

        //((JFrame) getParent().getParent().getParent().getParent()).setTitle("Jay");
        ObjDoc = new clsProduction();
        GenerateCombos();
        SetMenuForRights();

        if (getName().equals("Link")) {

        } else {
            if (ObjDoc.LoadData(EITLERPGLOBAL.gCompanyID)) {
                ObjDoc.MoveLast();
                DisplayData();
            } else {
            }
        }

        txtAuditRemarks.setVisible(false);
        SetFields(false);
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ToolBar = new javax.swing.JToolBar();
        cmdTop = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdNext = new javax.swing.JButton();
        cmdLast = new javax.swing.JButton();
        cmdNew = new javax.swing.JButton();
        cmdEdit = new javax.swing.JButton();
        cmdDelete = new javax.swing.JButton();
        cmdSave = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();
        cmdFilter = new javax.swing.JButton();
        cmdPreview = new javax.swing.JButton();
        cmdPrint = new javax.swing.JButton();
        cmdExit = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        Tab1 = new javax.swing.JPanel();
        cmdNext1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableEntry = new javax.swing.JTable();
        cmdAdd = new javax.swing.JButton();
        cmdItemdelete = new javax.swing.JButton();
        lblprodno = new javax.swing.JLabel();
        txtprodno = new javax.swing.JTextField();
        lblproddt = new javax.swing.JLabel();
        txtproddt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmbtype = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        Tab2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cmbHierarchy = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        txtFromRemarks = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        OpgApprove = new javax.swing.JRadioButton();
        OpgFinal = new javax.swing.JRadioButton();
        OpgReject = new javax.swing.JRadioButton();
        OpgHold = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        cmbSendTo = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        txtToRemarks = new javax.swing.JTextField();
        cmdBack2 = new javax.swing.JButton();
        cmdFromRemarksBig = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableA = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHS = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        cmdViewHistory = new javax.swing.JButton();
        cmdNormalView = new javax.swing.JButton();
        txtAuditRemarks = new javax.swing.JTextField();
        cmdShowRemarks = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        ToolBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        ToolBar.setRollover(true);

        cmdTop.setToolTipText("First Record");
        cmdTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTopActionPerformed(evt);
            }
        });
        ToolBar.add(cmdTop);

        cmdBack.setToolTipText("Previous Record");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });
        ToolBar.add(cmdBack);

        cmdNext.setToolTipText("Next Record");
        cmdNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNextActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNext);

        cmdLast.setToolTipText("Last Record");
        cmdLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLastActionPerformed(evt);
            }
        });
        ToolBar.add(cmdLast);

        cmdNew.setToolTipText("New Record");
        cmdNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdNew);

        cmdEdit.setToolTipText("Edit Record");
        cmdEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditActionPerformed(evt);
            }
        });
        ToolBar.add(cmdEdit);

        cmdDelete.setToolTipText("Delete Record");
        cmdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteActionPerformed(evt);
            }
        });
        ToolBar.add(cmdDelete);

        cmdSave.setToolTipText("Save");
        cmdSave.setEnabled(false);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        ToolBar.add(cmdSave);

        cmdCancel.setToolTipText("Cancel");
        cmdCancel.setEnabled(false);
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        ToolBar.add(cmdCancel);

        cmdFilter.setToolTipText("Find");
        cmdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFilterActionPerformed(evt);
            }
        });
        ToolBar.add(cmdFilter);

        cmdPreview.setToolTipText("Preview");
        cmdPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPreviewActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPreview);

        cmdPrint.setToolTipText("Print");
        cmdPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdPrintActionPerformed(evt);
            }
        });
        ToolBar.add(cmdPrint);

        cmdExit.setToolTipText("Exit");
        cmdExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdExitActionPerformed(evt);
            }
        });
        ToolBar.add(cmdExit);

        getContentPane().add(ToolBar);
        ToolBar.setBounds(0, 0, 800, 40);

        lblTitle.setBackground(new java.awt.Color(0, 102, 153));
        lblTitle.setText("PRODUCTION");
        lblTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitle.setOpaque(true);
        getContentPane().add(lblTitle);
        lblTitle.setBounds(0, 40, 666, 25);

        Tab1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab1.setLayout(null);

        cmdNext1.setMnemonic('x');
        cmdNext1.setText("Next >>");
        cmdNext1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNext1ActionPerformed(evt);
            }
        });
        Tab1.add(cmdNext1);
        cmdNext1.setBounds(660, 330, 120, 40);

        jScrollPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jScrollPane1FocusLost(evt);
            }
        });

        TableEntry.setBorder(new javax.swing.border.MatteBorder(null));
        TableEntry.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        TableEntry.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TableEntry.setCellSelectionEnabled(true);
        TableEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableEntryKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TableEntryKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(TableEntry);

        Tab1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 60, 780, 260);

        cmdAdd.setText("Add");
        cmdAdd.setEnabled(false);
        cmdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddActionPerformed(evt);
            }
        });
        Tab1.add(cmdAdd);
        cmdAdd.setBounds(30, 330, 90, 30);

        cmdItemdelete.setText("Remove");
        cmdItemdelete.setEnabled(false);
        cmdItemdelete.setMargin(new java.awt.Insets(2, 7, 2, 7));
        cmdItemdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdItemdeleteActionPerformed(evt);
            }
        });
        Tab1.add(cmdItemdelete);
        cmdItemdelete.setBounds(130, 330, 90, 30);

        lblprodno.setText("Production No.:");
        Tab1.add(lblprodno);
        lblprodno.setBounds(10, 20, 110, 30);

        txtprodno.setEnabled(false);
        Tab1.add(txtprodno);
        txtprodno.setBounds(120, 20, 140, 30);

        lblproddt.setText("Production Date:");
        Tab1.add(lblproddt);
        lblproddt.setBounds(290, 20, 110, 30);

        txtproddt.setEnabled(false);
        Tab1.add(txtproddt);
        txtproddt.setBounds(400, 20, 140, 30);

        jLabel1.setText("DD/MM/YYYY");
        Tab1.add(jLabel1);
        jLabel1.setBounds(410, 0, 90, 17);

        cmbtype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "T->TRADING", "R->REGULAR", " " }));
        Tab1.add(cmbtype);
        cmbtype.setBounds(610, 20, 170, 27);

        jLabel2.setText("Type:");
        Tab1.add(jLabel2);
        jLabel2.setBounds(550, 20, 50, 30);

        Tab.addTab("PRODUCTION", Tab1);

        Tab2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Tab2.setLayout(null);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel31.setText("Hierarchy :");
        Tab2.add(jLabel31);
        jLabel31.setBounds(5, 18, 85, 17);

        cmbHierarchy.setEnabled(false);
        cmbHierarchy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbHierarchyItemStateChanged(evt);
            }
        });
        Tab2.add(cmbHierarchy);
        cmbHierarchy.setBounds(95, 14, 184, 27);

        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel32.setText("From :");
        Tab2.add(jLabel32);
        jLabel32.setBounds(5, 52, 85, 17);

        txtFrom.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFrom);
        txtFrom.setBounds(95, 50, 182, 27);

        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel35.setText("Remarks :");
        Tab2.add(jLabel35);
        jLabel35.setBounds(5, 82, 85, 17);

        txtFromRemarks.setBackground(new java.awt.Color(204, 204, 204));
        Tab2.add(txtFromRemarks);
        txtFromRemarks.setBounds(95, 78, 461, 27);

        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel36.setText("Your Action :");
        Tab2.add(jLabel36);
        jLabel36.setBounds(5, 120, 85, 17);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(null);

        buttonGroup1.add(OpgApprove);
        OpgApprove.setText("Approve & Forward");
        OpgApprove.setEnabled(false);
        OpgApprove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgApproveMouseClicked(evt);
            }
        });
        jPanel6.add(OpgApprove);
        OpgApprove.setBounds(6, 6, 163, 22);

        buttonGroup1.add(OpgFinal);
        OpgFinal.setText("Final Approve");
        OpgFinal.setEnabled(false);
        OpgFinal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgFinalMouseClicked(evt);
            }
        });
        jPanel6.add(OpgFinal);
        OpgFinal.setBounds(6, 32, 136, 20);

        buttonGroup1.add(OpgReject);
        OpgReject.setText("Reject");
        OpgReject.setEnabled(false);
        OpgReject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgRejectMouseClicked(evt);
            }
        });
        jPanel6.add(OpgReject);
        OpgReject.setBounds(6, 54, 136, 20);

        buttonGroup1.add(OpgHold);
        OpgHold.setSelected(true);
        OpgHold.setText("Hold Document");
        OpgHold.setEnabled(false);
        OpgHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpgHoldMouseClicked(evt);
            }
        });
        jPanel6.add(OpgHold);
        OpgHold.setBounds(6, 76, 136, 20);

        Tab2.add(jPanel6);
        jPanel6.setBounds(95, 120, 182, 100);

        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("Send To :");
        Tab2.add(jLabel33);
        jLabel33.setBounds(5, 228, 85, 17);

        cmbSendTo.setEnabled(false);
        Tab2.add(cmbSendTo);
        cmbSendTo.setBounds(95, 224, 184, 27);

        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Remarks :");
        Tab2.add(jLabel34);
        jLabel34.setBounds(5, 264, 85, 17);

        txtToRemarks.setEnabled(false);
        Tab2.add(txtToRemarks);
        txtToRemarks.setBounds(95, 260, 516, 27);

        cmdBack2.setText("<< Back");
        cmdBack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBack2ActionPerformed(evt);
            }
        });
        Tab2.add(cmdBack2);
        cmdBack2.setBounds(534, 350, 102, 29);

        cmdFromRemarksBig.setText("...");
        cmdFromRemarksBig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdFromRemarksBigActionPerformed(evt);
            }
        });
        Tab2.add(cmdFromRemarksBig);
        cmdFromRemarksBig.setBounds(560, 77, 33, 21);

        Tab.addTab("Approval", Tab2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jLabel26.setText("Document Approval Status :");
        jPanel1.add(jLabel26);
        jLabel26.setBounds(12, 10, 242, 17);

        TableA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableA);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(12, 40, 626, 144);

        TableHS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TableHS);

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(14, 207, 477, 148);

        jLabel9.setText("Document Update History :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(14, 191, 182, 17);

        cmdViewHistory.setText("View Revisions");
        cmdViewHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdViewHistoryActionPerformed(evt);
            }
        });
        jPanel1.add(cmdViewHistory);
        cmdViewHistory.setBounds(497, 209, 132, 24);

        cmdNormalView.setText("Back to Normal");
        cmdNormalView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNormalViewActionPerformed(evt);
            }
        });
        jPanel1.add(cmdNormalView);
        cmdNormalView.setBounds(497, 239, 132, 24);

        txtAuditRemarks.setEnabled(false);
        jPanel1.add(txtAuditRemarks);
        txtAuditRemarks.setBounds(506, 339, 129, 27);

        cmdShowRemarks.setText("Show Remarks");
        cmdShowRemarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdShowRemarksActionPerformed(evt);
            }
        });
        jPanel1.add(cmdShowRemarks);
        cmdShowRemarks.setBounds(498, 269, 132, 24);

        Tab.addTab("Status", jPanel1);

        getContentPane().add(Tab);
        Tab.setBounds(0, 70, 800, 420);

        lblStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(51, 51, 255));
        lblStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(lblStatus);
        lblStatus.setBounds(6, 488, 810, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdBack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBack2ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(0);
    }//GEN-LAST:event_cmdBack2ActionPerformed

    private void cmdNext1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNext1ActionPerformed
        // TODO add your handling code here:
        Tab.setSelectedIndex(1);
    }//GEN-LAST:event_cmdNext1ActionPerformed

    private void cmdShowRemarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdShowRemarksActionPerformed
        // TODO add your handling code here:
        if (TableHS.getRowCount() > 0 && TableHS.getSelectedRow() >= 0) {
            txtAuditRemarks.setText((String) TableHS.getValueAt(TableHS.getSelectedRow(), 4));
            BigEdit bigEdit = new BigEdit();
            bigEdit.theText = txtAuditRemarks;
            bigEdit.ShowEdit();
        }

    }//GEN-LAST:event_cmdShowRemarksActionPerformed

    private void cmdNormalViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNormalViewActionPerformed
        // TODO add your handling code here:
        ObjDoc.LoadData(EITLERPGLOBAL.gCompanyID);
    }//GEN-LAST:event_cmdNormalViewActionPerformed

    private void cmdViewHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdViewHistoryActionPerformed
        // TODO add your handling code here:
        String DocNo = txtprodno.getText();
        ObjDoc.ShowHistory(EITLERPGLOBAL.gCompanyID, DocNo);
        MoveLast();

    }//GEN-LAST:event_cmdViewHistoryActionPerformed

    private void OpgHoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgHoldMouseClicked
        // TODO add your handling code here:
        OpgHold.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgReject.setSelected(false);

    }//GEN-LAST:event_OpgHoldMouseClicked

    private void OpgRejectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgRejectMouseClicked
        // TODO add your handling code here:
        OpgReject.setSelected(true);
        OpgFinal.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        GenerateRejectedUserCombo();
        cmbSendTo.setEnabled(true);

    }//GEN-LAST:event_OpgRejectMouseClicked

    private void OpgFinalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgFinalMouseClicked
        // TODO add your handling code here:
        OpgFinal.setSelected(true);
        OpgReject.setSelected(false);
        OpgApprove.setSelected(false);
        OpgHold.setSelected(false);

        if (!OpgFinal.isEnabled()) {
            //OpgFinal.setSelected(false);
            OpgHold.setSelected(true);

        }

    }//GEN-LAST:event_OpgFinalMouseClicked

    private void OpgApproveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpgApproveMouseClicked
        // TODO add your handling code here:
        OpgApprove.setSelected(true);
        OpgReject.setSelected(false);
        OpgFinal.setSelected(false);
        OpgHold.setSelected(false);

    }//GEN-LAST:event_OpgApproveMouseClicked

    private void cmdFromRemarksBigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFromRemarksBigActionPerformed
        // TODO add your handling code here:
        BigEdit bigEdit = new BigEdit();
        bigEdit.theText = txtFromRemarks;
        bigEdit.ShowEdit();

    }//GEN-LAST:event_cmdFromRemarksBigActionPerformed

    private void cmbHierarchyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHierarchyItemStateChanged
        // TODO add your handling code here:
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

    }//GEN-LAST:event_cmbHierarchyItemStateChanged

    private void cmdExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdExitActionPerformed
        // TODO add your handling code here:
        ObjDoc.Close();
        ((JFrame) getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cmdExitActionPerformed

    private void cmdPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPrintActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdPrintActionPerformed

    private void cmdPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdPreviewActionPerformed
        // TODO add your handling code here:
        PreviewReport();
    }//GEN-LAST:event_cmdPreviewActionPerformed

    private void cmdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdFilterActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_cmdFilterActionPerformed

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        // TODO add your handling code here:
        Cancel();
        if (ObjDoc.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjDoc.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        Save();
        if (ObjDoc.LoadData(EITLERPGLOBAL.gCompanyID)) {
            ObjDoc.MoveLast();
            DisplayData();
        } else {
        }
        SetFields(false);
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmdDeleteActionPerformed

    private void cmdEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditActionPerformed
        // TODO add your handling code here:
        Edit();
    }//GEN-LAST:event_cmdEditActionPerformed

    private void cmdNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNewActionPerformed
        // TODO add your handling code here:
        Add();
    }//GEN-LAST:event_cmdNewActionPerformed

    private void cmdLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLastActionPerformed
        // TODO add your handling code here:
        MoveLast();
    }//GEN-LAST:event_cmdLastActionPerformed

    private void cmdNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_cmdNextActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_cmdBackActionPerformed

    private void cmdTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTopActionPerformed
        // TODO add your handling code here:
        MoveFirst();
    }//GEN-LAST:event_cmdTopActionPerformed

    private void TableEntryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableEntryKeyReleased
        // TODO add your handling code here:
        double msqmtr = 0, mnetmtr = 0, mgrsmtr = 0, mwidth, mflg = 0;

        for (int i = 0; i < TableEntry.getRowCount(); i++) {
            try {
                mflg = Double.parseDouble(TableEntry.getValueAt(i, 6).toString());
            } catch (Exception e) {
                mflg = 0;
            }
            try {
                mgrsmtr = Double.parseDouble(TableEntry.getValueAt(i, 4).toString());
                mwidth = Double.parseDouble(TableEntry.getValueAt(i, 3).toString());
                mnetmtr = mgrsmtr - (mflg / 10);
                TableEntry.setValueAt(mnetmtr * mwidth, i, 7);
                TableEntry.setValueAt(mnetmtr, i, 8);
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_TableEntryKeyReleased


    private void jScrollPane1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jScrollPane1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1FocusLost

    private void cmdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddActionPerformed

        Updating = true;
        Object[] rowData = new Object[10];
        rowData[0] = Integer.toString(TableEntry.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        rowData[7] = "";
        rowData[8] = "";

        DataModelPiece.addRow(rowData);
        Updating = false;
        TableEntry.changeSelection(TableEntry.getRowCount() - 1, 1, false, false);
        TableEntry.requestFocus();
    }//GEN-LAST:event_cmdAddActionPerformed

    private void cmdItemdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdItemdeleteActionPerformed
        if (TableEntry.getRowCount() > 0) {
            DataModelPiece.removeRow(TableEntry.getSelectedRow());
        }
    }//GEN-LAST:event_cmdItemdeleteActionPerformed

    private void TableEntryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableEntryKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 112) { //f1 Press
            String strSQL;
            if (TableEntry.getSelectedColumn() == 1) {
                LOV aList = new LOV();
                strSQL = "SELECT QUALITY_CD,DESCRIPTION FROM FILTERFABRIC.FF_TRD_QUALITY_MASTER";

                aList.SQL = strSQL;
                aList.ReturnCol = 1;
                aList.ShowReturnCol = true;
                aList.DefaultSearchOn = 1;
                if (aList.ShowLOV()) {
                    if (TableEntry.getCellEditor() != null) {
                        TableEntry.getCellEditor().stopCellEditing();
                    }
                    seleval = aList.ReturnVal;

                    TableEntry.setValueAt(aList.ReturnVal, TableEntry.getSelectedRow(), 1);

                    String[] Piecedetail = clsProduction.getPiecedetail(seleval);
                    TableEntry.setValueAt(Piecedetail[0], TableEntry.getSelectedRow(), 3);
                    TableEntry.changeSelection(TableEntry.getSelectedRow(), 2, false, false);
                }
            }
        }
    }//GEN-LAST:event_TableEntryKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OpgApprove;
    private javax.swing.JRadioButton OpgFinal;
    private javax.swing.JRadioButton OpgHold;
    private javax.swing.JRadioButton OpgReject;
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel Tab1;
    private javax.swing.JPanel Tab2;
    private javax.swing.JTable TableA;
    private javax.swing.JTable TableEntry;
    private javax.swing.JTable TableHS;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbHierarchy;
    private javax.swing.JComboBox cmbSendTo;
    private javax.swing.JComboBox cmbtype;
    private javax.swing.JButton cmdAdd;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdBack2;
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdDelete;
    private javax.swing.JButton cmdEdit;
    private javax.swing.JButton cmdExit;
    private javax.swing.JButton cmdFilter;
    private javax.swing.JButton cmdFromRemarksBig;
    private javax.swing.JButton cmdItemdelete;
    private javax.swing.JButton cmdLast;
    private javax.swing.JButton cmdNew;
    private javax.swing.JButton cmdNext;
    private javax.swing.JButton cmdNext1;
    private javax.swing.JButton cmdNormalView;
    private javax.swing.JButton cmdPreview;
    private javax.swing.JButton cmdPrint;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdShowRemarks;
    private javax.swing.JButton cmdTop;
    private javax.swing.JButton cmdViewHistory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblproddt;
    private javax.swing.JLabel lblprodno;
    private javax.swing.JTextField txtAuditRemarks;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtFromRemarks;
    private javax.swing.JTextField txtToRemarks;
    private javax.swing.JTextField txtproddt;
    private javax.swing.JTextField txtprodno;
    // End of variables declaration//GEN-END:variables

    private void EnableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(true);
        cmdBack.setEnabled(true);
        cmdNext.setEnabled(true);
        cmdLast.setEnabled(true);
        cmdNew.setEnabled(true);
        cmdEdit.setEnabled(true);
        cmdDelete.setEnabled(true);
        cmdSave.setEnabled(false);
        cmdCancel.setEnabled(false);
        cmdFilter.setEnabled(true);
        cmdPreview.setEnabled(true);
        cmdPrint.setEnabled(true);
        cmdExit.setEnabled(true);
    }

    private void DisableToolbar() {
        //Puts toolbar in enable mode
        cmdTop.setEnabled(false);
        cmdBack.setEnabled(false);
        cmdNext.setEnabled(false);
        cmdLast.setEnabled(false);
        cmdNew.setEnabled(false);
        cmdEdit.setEnabled(false);
        cmdDelete.setEnabled(false);
        cmdSave.setEnabled(true);
        cmdCancel.setEnabled(true);
        cmdFilter.setEnabled(false);
        cmdPreview.setEnabled(false);
        cmdPrint.setEnabled(false);
        cmdExit.setEnabled(false);

    }

    private void SetFields(boolean pStat) {

        cmbHierarchy.setEnabled(pStat);
        OpgApprove.setEnabled(pStat);
        OpgReject.setEnabled(pStat);
        OpgFinal.setEnabled(pStat);
        OpgHold.setEnabled(pStat);
        cmbSendTo.setEnabled(pStat);
        txtToRemarks.setEnabled(pStat);
        cmdAdd.setEnabled(pStat);
        cmdItemdelete.setEnabled(pStat);
        txtprodno.setEnabled(pStat);
        txtproddt.setEnabled(pStat);

        SetupApproval();

    }

    private void ClearFields() {

        txtproddt.setText("");
        txtprodno.setText("");
        txtFromRemarks.setText("");
        FormatGrid();
        FormatGridA();
        FormatGridHS();
    }

    //Didplay data on the Screen
    private void DisplayData() {
        //if ((int)ObjDoc.getAttribute("MODULE_ID").getVal()==80) {
        //=========== Color Indication ===============//
        try {
            if (EditMode == 0) {
                if (ObjDoc.getAttribute("APPROVED").getInt() == 1) {
                    lblTitle.setBackground(Color.BLUE);
                }

                if (ObjDoc.getAttribute("APPROVED").getInt() != 1) {
                    lblTitle.setBackground(Color.GRAY);
                }

                if (ObjDoc.getAttribute("CANCELLED").getInt() == 1) {
                    lblTitle.setBackground(Color.RED);
                }

            }
        } catch (Exception c) {

        }
            //============================================//

        //========= Authority Delegation Check =====================//
        if (EITLERPGLOBAL.gAuthorityUserID != EITLERPGLOBAL.gUserID) {
            int ModuleID = 747;

            if (clsAuthority.IsAuthorityGiven(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gUserID, EITLERPGLOBAL.gAuthorityUserID, ModuleID)) {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gAuthorityUserID;
            } else {
                EITLERPGLOBAL.gNewUserID = EITLERPGLOBAL.gUserID;
            }
        }
        //==========================================================//

        GenerateCombos();
        FormatGrid();
        for (int i = 1; i <= ObjDoc.colMRItems.size(); i++) {
            clsProductionItem ObjItem = (clsProductionItem) ObjDoc.colMRItems.get(Integer.toString(i));
            Object[] rowData = new Object[9];

            txtprodno.setText((String) ObjItem.getAttribute("PRODUCTION_NO").getObj());
            txtproddt.setText(EITLERPGLOBAL.formatDate((String) ObjItem.getAttribute("PRODUCTION_DATE").getObj()));
            try {
                if (ObjItem.getAttribute("TYPE").getObj().toString().substring(0, 1).equalsIgnoreCase("T")) {
                    cmbtype.setSelectedIndex(0);
                } else {
                    cmbtype.setSelectedIndex(1);
                }
            } catch (Exception e) {
                cmbtype.setSelectedIndex(0);
            }
            rowData[0] = Integer.toString(i);
            rowData[1] = (String) ObjItem.getAttribute("QUALITY_CD").getObj();
            rowData[2] = (String) ObjItem.getAttribute("PIECE_NO").getObj();
            rowData[3] = Double.toString(ObjItem.getAttribute("WIDTH").getVal());
            rowData[4] = Double.toString(ObjItem.getAttribute("METER").getVal());
            rowData[5] = Double.toString(ObjItem.getAttribute("KGS").getVal());
            rowData[6] = (String) ObjItem.getAttribute("FLAG").getObj();
            rowData[7] = Double.toString(ObjItem.getAttribute("SQ_METER").getVal());
            rowData[8] = Double.toString(ObjItem.getAttribute("NET_METER").getVal());
            try {
                DataModelPiece.addRow(rowData);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }

        //======== Generating Grid for Document Approval Flow ========//
        FormatGridA();
        HashMap List = new HashMap();
        String DocNo = (String) ObjDoc.getAttribute("PRODUCTION_NO").getObj();
        List = clsFilterFabricApprovalFlow.getDocumentFlow(747, DocNo);
        for (int i = 1; i <= List.size(); i++) {
            clsDocFlow ObjFlow = (clsDocFlow) List.get(Integer.toString(i));
            Object[] rowData = new Object[7];

            rowData[0] = Integer.toString(i);
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("USER_ID").getVal());
            rowData[2] = (String) ObjFlow.getAttribute("STATUS").getObj();
            rowData[3] = clsDepartment.getDeptName(EITLERPGLOBAL.gCompanyID, (int) ObjFlow.getAttribute("DEPT_ID").getVal());
            rowData[4] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("RECEIVED_DATE").getObj());
            rowData[5] = EITLERPGLOBAL.formatDate((String) ObjFlow.getAttribute("ACTION_DATE").getObj());
            rowData[6] = (String) ObjFlow.getAttribute("REMARKS").getObj();

            DataModelA.addRow(rowData);
        }

        //Showing Audit Trial History
        FormatGridHS();
        HashMap History = clsProduction.getHistoryList(EITLERPGLOBAL.gCompanyID, DocNo);
        for (int i = 1; i <= History.size(); i++) {
            clsProduction ObjHistory = (clsProduction) History.get(Integer.toString(i));
            Object[] rowData = new Object[5];

            rowData[0] = Integer.toString((int) ObjHistory.getAttribute("REVISION_NO").getVal());
            rowData[1] = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, (long) ObjHistory.getAttribute("UPDATED_BY").getVal());
            rowData[2] = EITLERPGLOBAL.formatDate((String) ObjHistory.getAttribute("ENTRY_DATE").getObj());

            String ApprovalStatus = "";

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("A")) {
                ApprovalStatus = "Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("F")) {
                ApprovalStatus = "Final Approved";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("W")) {
                ApprovalStatus = "Waiting";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("R")) {
                ApprovalStatus = "Rejected";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("P")) {
                ApprovalStatus = "Pending";
            }

            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("C")) {
                ApprovalStatus = "Skiped";
            }
            if (((String) ObjHistory.getAttribute("APPROVAL_STATUS").getObj()).equals("H")) {
                ApprovalStatus = "Hold";
            }

            rowData[3] = ApprovalStatus;
            rowData[4] = (String) ObjHistory.getAttribute("APPROVER_REMARKS").getObj();

            DataModelHS.addRow(rowData);
        }
        //============================================================//
        //}
        //else {
        //    MoveNext();
        //}

    }

    //Sets data to the Class Object
    private void SetData() {

        ObjDoc.colMRItems.clear();

        ObjDoc.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
        ObjDoc.setAttribute("PRODUCTION_NO", txtprodno.getText());
        ObjDoc.setAttribute("TYPE", cmbtype.getSelectedItem().toString());
        for (int i = 0; i < TableEntry.getRowCount(); i++) {
            if (!TableEntry.getValueAt(i, 1).toString().equals("") && !TableEntry.getValueAt(i, 2).toString().equals("") && Double.parseDouble(TableEntry.getValueAt(i, 4).toString()) > 0) {
                clsProductionItem ObjItem = new clsProductionItem();
                ObjItem.setAttribute("TYPE", cmbtype.getSelectedItem().toString());
                ObjItem.setAttribute("COMPANY_ID", EITLERPGLOBAL.gCompanyID);
                ObjItem.setAttribute("PRODUCTION_NO", txtprodno.getText());
                ObjItem.setAttribute("PRODUCTION_DATE", EITLERPGLOBAL.formatDateDB(txtproddt.getText()));
                ObjItem.setAttribute("QUALITY_CD", (String) TableEntry.getValueAt(i, 1));
                ObjItem.setAttribute("PIECE_NO", (String) TableEntry.getValueAt(i, 2));
                ObjItem.setAttribute("WIDTH", Double.parseDouble(TableEntry.getValueAt(i, 3).toString()));
                ObjItem.setAttribute("METER", Double.parseDouble(TableEntry.getValueAt(i, 4).toString()));
                ObjItem.setAttribute("KGS", Double.parseDouble(TableEntry.getValueAt(i, 5).toString()));
                ObjItem.setAttribute("FLAG", (String) TableEntry.getValueAt(i, 6));
                ObjItem.setAttribute("SQ_METER", Double.parseDouble(TableEntry.getValueAt(i, 7).toString()));
                ObjItem.setAttribute("NET_METER", Double.parseDouble(TableEntry.getValueAt(i, 8).toString()));

                ObjDoc.colMRItems.put(Integer.toString(ObjDoc.colMRItems.size() + 1), ObjItem);
            }
        }
        //----- Update Approval Specific Fields -----------//
        ObjDoc.setAttribute("HIERARCHY_ID", EITLERPGLOBAL.getComboCode(cmbHierarchy));
        ObjDoc.setAttribute("FROM", EITLERPGLOBAL.gNewUserID);
        ObjDoc.setAttribute("TO", EITLERPGLOBAL.getComboCode(cmbSendTo));
        ObjDoc.setAttribute("FROM_REMARKS", txtToRemarks.getText());

        if (OpgApprove.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "A");
        }

        if (OpgFinal.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "F");
        }

        if (OpgReject.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "R");
        }

        if (OpgHold.isSelected()) {
            ObjDoc.setAttribute("APPROVAL_STATUS", "H");
        }
        //-------------------------------------------------//

        if (EditMode == EITLERPGLOBAL.ADD) {
            ObjDoc.setAttribute("CREATED_BY", EITLERPGLOBAL.gNewUserID);
            ObjDoc.setAttribute("CREATED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        } else {
            ObjDoc.setAttribute("MODIFIED_BY", EITLERPGLOBAL.gNewUserID);
            ObjDoc.setAttribute("MODIFIED_DATE", EITLERPGLOBAL.getCurrentDateTimeDB());
        }

    }

    private void GenerateCombos() {
        //Generates Combo Boxes
        HashMap List = new HashMap();
        String strCondition = "";

        //----- Generate cmbType ------- //
        cmbHierarchyModel = new EITLComboModel();
        cmbHierarchy.removeAllItems();
        cmbHierarchy.setModel(cmbHierarchyModel);

        List = clsHierarchy.getListEx(" WHERE D_COM_HIERARCHY.COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=747 ");

        if (EditMode == EITLERPGLOBAL.EDIT) {
            List = clsHierarchy.getList(" WHERE COMPANY_ID=" + EITLERPGLOBAL.gCompanyID + " AND MODULE_ID=747 ");
        }
        for (int i = 1; i <= List.size(); i++) {
            clsHierarchy ObjHierarchy = (clsHierarchy) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjHierarchy.getAttribute("HIERARCHY_ID").getVal();
            aData.Text = (String) ObjHierarchy.getAttribute("HIERARCHY_NAME").getObj();
            cmbHierarchyModel.addElement(aData);
        }
        //------------------------------ //

    }

    private void GenerateFromCombo() {
        //Generates Combo Boxes
        HashMap List = new HashMap();

        try {
            if (EditMode == EITLERPGLOBAL.ADD) {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID);
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

                    if (ObjUser.getAttribute("USER_ID").getVal() == EITLERPGLOBAL.gNewUserID) {
                        //Exclude Current User
                    } else {
                        cmbToModel.addElement(aData);
                    }
                }
                //------------------------------ //
            } else {
                //----- Generate cmbType ------- //
                cmbToModel = new EITLComboModel();
                cmbSendTo.removeAllItems();
                cmbSendTo.setModel(cmbToModel);

                List = clsFilterFabricApprovalFlow.getRemainingUsers(747, (String) ObjDoc.getAttribute("PRODUCTION_NO").getObj());
                for (int i = 1; i <= List.size(); i++) {
                    clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
                    ComboData aData = new ComboData();
                    aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
                    aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();
                    cmbToModel.addElement(aData);
                }
                //------------------------------ //
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void SetupApproval() {

        if (cmbHierarchy.getItemCount() > 1) {
            cmbHierarchy.setEnabled(true);
        }

        //Set Default Hierarchy ID for User
        int DefaultID = clsHierarchy.getDefaultHierarchy((int) EITLERPGLOBAL.gCompanyID);
        EITLERPGLOBAL.setComboIndex(cmbHierarchy, DefaultID);

        if (EditMode == EITLERPGLOBAL.ADD) {
            lnFromID = (int) EITLERPGLOBAL.gNewUserID;
            txtFrom.setText(clsUser.getUserName(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID));
            txtFromRemarks.setText("Creator of Document");
        } else {

            int FromUserID = clsFilterFabricApprovalFlow.getFromID(747, (String) ObjDoc.getAttribute("PRODUCTION_NO").getObj());
            lnFromID = FromUserID;
            String strFromUser = clsUser.getUserName(EITLERPGLOBAL.gCompanyID, FromUserID);
            String strFromRemarks = clsFilterFabricApprovalFlow.getFromRemarks(747, FromUserID, (String) ObjDoc.getAttribute("PRODUCTION_NO").getObj());

            txtFrom.setText(strFromUser);
            txtFromRemarks.setText(strFromRemarks);
        }

        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);
        GenerateFromCombo();

        if (clsHierarchy.CanSkip((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            cmbSendTo.setEnabled(true);
        } else {
            cmbSendTo.setEnabled(false);
        }

        if (clsHierarchy.CanFinalApprove((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, (int) EITLERPGLOBAL.gNewUserID)) {
            OpgFinal.setEnabled(true);
        } else {
            OpgFinal.setEnabled(false);
            OpgFinal.setSelected(false);
        }

        //In Edit Mode Hierarchy Should be disabled
        if (EditMode == EITLERPGLOBAL.EDIT) {
            cmbHierarchy.setEnabled(false);
        }

        if (EditMode == 0) {
            //Disable all hierarchy controls if not in Add/Edit Mode
            cmbHierarchy.setEnabled(false);
            txtFrom.setEnabled(false);
            txtFromRemarks.setEnabled(false);
            OpgApprove.setEnabled(false);
            OpgFinal.setEnabled(false);
            OpgReject.setEnabled(false);
            cmbSendTo.setEnabled(false);
            txtToRemarks.setEnabled(false);
        }
    }

    private void SetMenuForRights() {
        // --- Add Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 90021)) {
            cmdNew.setEnabled(true);
        } else {
            cmdNew.setEnabled(false);
        }

        // --- Edit Rights --
        cmdEdit.setEnabled(true);

        // --- Delete Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 90023)) {
            cmdDelete.setEnabled(true);
        } else {
            cmdDelete.setEnabled(false);
        }

        // --- Print Rights --
        if (clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 90024)) {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(true);
        } else {
            cmdPreview.setEnabled(true);
            cmdPrint.setEnabled(false);
        }
    }

    private void Add() {

        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        //Now Generate new document no.
        SelectFirstFree aList = new SelectFirstFree();
        aList.ModuleID = 747;
        EditMode = EITLERPGLOBAL.ADD;
        SetFields(true);
        DisableToolbar();
        ClearFields();
        SetupApproval();
        cmbtype.setSelectedIndex(0);
        lblStatus.setText("Press F1 For Quality Code...");
    }

    private void Edit() {
        //== Financial Year Validation-------------//
        if (!EITLERPGLOBAL.YearIsOpen) {
            JOptionPane.showMessageDialog(null, "The year is closed. You cannot enter/edit any transaction");
            return;
        }
        //----------------------------------//

        String lDocNo = (String) ObjDoc.getAttribute("PRODUCTION_NO").getObj();
        if (ObjDoc.IsEditable(EITLERPGLOBAL.gCompanyID, lDocNo, EITLERPGLOBAL.gNewUserID)) {

            EITLERPGLOBAL.ChangeCursorToWait(this);

            EditMode = EITLERPGLOBAL.EDIT;
            //---New Change ---//
            GenerateCombos();
            DisplayData();

            //----------------//
            //if (clsFilterFabricApprovalFlow.IsCreator(747, lDocNo) || clsUser.IsFunctionGranted(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, 0, 90022)) {
            if (clsFilterFabricApprovalFlow.IsCreator(747, lDocNo)) {
                SetFields(true);
                lblStatus.setText("Press F1 For Quality Code...");
            } else {
                EnableApproval();
            }

            DisableToolbar();
            EITLERPGLOBAL.ChangeCursorToDefault(this);

        } else {
            JOptionPane.showMessageDialog(null, "You cannot edit this record. It is either approved/rejected or waiting approval for other user");
        }
    }

    private void Save() {

        if (cmbHierarchy.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Please select the hierarchy.");
            return;
        }

        if ((!OpgApprove.isSelected()) && (!OpgReject.isSelected()) && (!OpgFinal.isSelected()) && (!OpgHold.isSelected())) {
            JOptionPane.showMessageDialog(null, "Please select the Approval Action");
            return;
        }

        if (OpgReject.isSelected() && txtToRemarks.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the remarks for rejection");
            return;
        }

        if ((OpgApprove.isSelected() || OpgReject.isSelected()) && cmbSendTo.getItemCount() <= 0) {
            JOptionPane.showMessageDialog(null, "Please select the user, to whom rejected document to be send");
            return;
        }

        if (txtprodno.getText().trim().length() < 1) {
            JOptionPane.showMessageDialog(null, "Please Enter Production no.");
            return;
        }
        if (txtproddt.getText().trim().length() < 1) {
            JOptionPane.showMessageDialog(null, "Please Enter Production Date");
            return;
        }
        SetData();
        if (EditMode == EITLERPGLOBAL.ADD) {

            if (ObjDoc.Insert()) {
                // MoveLast();
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. \nError is " + ObjDoc.LastError);
                return;
            }
        }

        if (EditMode == EITLERPGLOBAL.EDIT) {
            if (ObjDoc.Update()) {
                DisplayData();
            } else {
                JOptionPane.showMessageDialog(null, "Error occured while saving. \nError is " + ObjDoc.LastError);
                return;
            }
        }

        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        try {
            frmPA.RefreshView();
        } catch (Exception e) {
        }
        lblStatus.setText("");
    }

    private void Cancel() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        DisplayData();
        EditMode = 0;
        SetFields(false);
        EnableToolbar();
        SetMenuForRights();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
        lblStatus.setText("");
    }

    private void Find() {
    }

    private void MoveFirst() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveFirst();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MovePrevious() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MovePrevious();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveNext() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveNext();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    private void MoveLast() {
        EITLERPGLOBAL.ChangeCursorToWait(this);
        ObjDoc.MoveLast();
        DisplayData();
        EITLERPGLOBAL.ChangeCursorToDefault(this);
    }

    public void FindEx(int pCompanyID, String pDocNo) {
        ObjDoc.Filter(" WHERE COMPANY_ID=" + Integer.toString(pCompanyID) + " AND PRODUCTION_NO='" + pDocNo + "'", pCompanyID);
        ObjDoc.MoveLast();
        DisplayData();
    }

    public void FindWaiting() {
        ObjDoc.Filter(" WHERE ", EITLERPGLOBAL.gCompanyID);
        ObjDoc.MoveLast();
        DisplayData();
    }

    private void ShowMessage(String pMessage) {
        lblStatus.setText(pMessage);
    }

    private void FormatGridA() {
        DataModelA = new EITLTableModel();

        TableA.removeAll();
        TableA.setModel(DataModelA);

        //Set the table Readonly
        DataModelA.TableReadOnly(true);

        //Add the columns
        DataModelA.addColumn("Sr.");
        DataModelA.addColumn("User");
        DataModelA.addColumn("Status");
        DataModelA.addColumn("Department");
        DataModelA.addColumn("Received Date");
        DataModelA.addColumn("Action Date");
        DataModelA.addColumn("Remarks");

        TableA.setAutoResizeMode(TableA.AUTO_RESIZE_OFF);

    }

    private void FormatGridHS() {
        DataModelHS = new EITLTableModel();

        TableHS.removeAll();
        TableHS.setModel(DataModelHS);

        //Set the table Readonly
        DataModelHS.TableReadOnly(true);

        //Add the columns
        DataModelHS.addColumn("Rev No.");
        DataModelHS.addColumn("User");
        DataModelHS.addColumn("Date");
        DataModelHS.addColumn("Status");
        DataModelHS.addColumn("Remarks");

        TableHS.setAutoResizeMode(TableHS.AUTO_RESIZE_OFF);
    }

    private void EnableApproval() {
        cmbSendTo.setEnabled(true);
        OpgApprove.setEnabled(true);
        OpgFinal.setEnabled(true);
        OpgReject.setEnabled(true);
        OpgHold.setEnabled(true);
        txtToRemarks.setEnabled(true);
        SetupApproval();

        //========== Setting Up Header Fields ================//
        String FieldName = "";
        int SelHierarchy = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        for (int i = 0; i < Tab1.getComponentCount() - 1; i++) {
            if (Tab1.getComponent(i).getName() != null) {

                FieldName = Tab1.getComponent(i).getName();
                if (clsHierarchy.CanEditField(EITLERPGLOBAL.gCompanyID, EITLERPGLOBAL.gNewUserID, SelHierarchy, "H", FieldName)) {

                    Tab1.getComponent(i).setEnabled(true);
                }

            }
        }
        //=============== Header Fields Setup Complete =================//

    }

    private void GenerateRejectedUserCombo() {

        HashMap List = new HashMap();
        HashMap DeptList = new HashMap();
        HashMap DeptUsers = new HashMap();
        String DocCode = txtprodno.getText();

        //----- Generate cmbType ------- //
        cmbToModel = new EITLComboModel();
        cmbSendTo.removeAllItems();
        cmbSendTo.setModel(cmbToModel);

        //Now Add other hierarchy Users
        SelHierarchyID = EITLERPGLOBAL.getComboCode(cmbHierarchy);

        List = clsHierarchy.getUserList((int) EITLERPGLOBAL.gCompanyID, SelHierarchyID, EITLERPGLOBAL.gNewUserID, true);
        for (int i = 1; i <= List.size(); i++) {
            clsUser ObjUser = (clsUser) List.get(Integer.toString(i));
            ComboData aData = new ComboData();
            aData.Code = (int) ObjUser.getAttribute("USER_ID").getVal();
            aData.Text = (String) ObjUser.getAttribute("USER_NAME").getObj();

            /// NEW CODE ///
            boolean IncludeUser = false;
            //Decide to include user or not
            if (EditMode == EITLERPGLOBAL.EDIT) {
                if (OpgApprove.isSelected()) {
                    IncludeUser = clsFilterFabricApprovalFlow.IncludeUserInApproval(747, DocCode, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (OpgReject.isSelected()) {
                    IncludeUser = clsFilterFabricApprovalFlow.IncludeUserInRejection(747, DocCode, (int) ObjUser.getAttribute("USER_ID").getVal(), EITLERPGLOBAL.gNewUserID);
                }

                if (IncludeUser && (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID)) {
                    cmbToModel.addElement(aData);
                }
            } else {
                if (((int) ObjUser.getAttribute("USER_ID").getVal()) != EITLERPGLOBAL.gNewUserID) {
                    cmbToModel.addElement(aData);
                }
            }
            /// END NEW CODE ///

        }
        //------------------------------ //

        if (EditMode == EITLERPGLOBAL.EDIT) {
            String DocNo = (String) ObjDoc.getAttribute("PRODUCTION_NO").getObj();
            int Creator = clsFilterFabricApprovalFlow.getCreator(747, DocNo);
            EITLERPGLOBAL.setComboIndex(cmbSendTo, Creator);
        }
    }

    private void FormatGrid() {
        try {
            DataModelPiece = new EITLTableModel();
            TableEntry.removeAll();
            TableEntry.setModel(DataModelPiece);

            DataModelPiece.addColumn("Sr.");  //0 - Read Only
            DataModelPiece.addColumn("QUALITY"); //1
            DataModelPiece.addColumn("PIECE");//2
            DataModelPiece.addColumn("WIDTH");//3
            DataModelPiece.addColumn("METERS");//4
            DataModelPiece.addColumn("KGS"); //5
            DataModelPiece.addColumn("FLAG");  //6
            DataModelPiece.addColumn("SQ_METER"); //7
            DataModelPiece.addColumn("NET_METER"); //8

            DataModelPiece.TableReadOnly(false);
            DataModelPiece.SetReadOnly(0);
            DataModelPiece.SetReadOnly(1);
            //DataModelPiece.SetReadOnly(2);
            //DataModelPiece.SetReadOnly(3);
            //DataModelPiece.SetReadOnly(4);
            //DataModelPiece.SetReadOnly(5);
            //DataModelPiece.SetReadOnly(6);
            DataModelPiece.SetReadOnly(7);
            DataModelPiece.SetReadOnly(8);

            TableEntry.setCellSelectionEnabled(true);
            //TableEntry.getColumnModel().getColumn(16).setPreferredWidth(100);
        } catch (Exception e) {
        }
        Updating = false;
        //Table formatting completed
        //Add_Blank_Record();

        TableEntry.getColumnModel().getColumn(0).setMinWidth(40);//sr.no
        TableEntry.getColumnModel().getColumn(0).setMaxWidth(40);
        TableEntry.getColumnModel().getColumn(1).setMinWidth(100);//QUALITY
        TableEntry.getColumnModel().getColumn(1).setMaxWidth(100);
        TableEntry.getColumnModel().getColumn(2).setMinWidth(150);//PIECE
        TableEntry.getColumnModel().getColumn(2).setMaxWidth(150);
        TableEntry.getColumnModel().getColumn(3).setMinWidth(80); //WIDTH
        TableEntry.getColumnModel().getColumn(3).setMaxWidth(80);
        TableEntry.getColumnModel().getColumn(4).setMinWidth(80);// METERS
        TableEntry.getColumnModel().getColumn(4).setMaxWidth(80);
        TableEntry.getColumnModel().getColumn(5).setMinWidth(80);// KGS
        TableEntry.getColumnModel().getColumn(5).setMaxWidth(80);
        TableEntry.getColumnModel().getColumn(6).setMinWidth(40);//FLAG
        TableEntry.getColumnModel().getColumn(6).setMaxWidth(40);
        TableEntry.getColumnModel().getColumn(7).setMinWidth(80);//SQ METER
        TableEntry.getColumnModel().getColumn(7).setMaxWidth(80);
        TableEntry.getColumnModel().getColumn(8).setMinWidth(100);//NET METER
        TableEntry.getColumnModel().getColumn(8).setMaxWidth(100);

    }

    private void remove_row() {
        if (!DataModelPiece.getValueAt(TableEntry.getSelectedRow(), 1).equals("")) {
            DataModelPiece.removeRow(TableEntry.getSelectedRow());
        }
        if (TableEntry.getRowCount() < 1) {
            Add_Blank_Record();
            jScrollPane1.requestFocus();
        }

        String mno;
        for (int m = 0; m < TableEntry.getRowCount(); m++) {
            mno = String.valueOf(m + 1);
            TableEntry.setValueAt(mno, m, 0);
        }
    }

    private void Add_Blank_Record() {
        Object[] rowData = new Object[30];
        rowData[0] = Integer.toString(TableEntry.getRowCount() + 1);
        rowData[1] = "";
        rowData[2] = "";
        rowData[3] = "";
        rowData[4] = "";
        rowData[5] = "";
        rowData[6] = "";
        rowData[7] = "";
        rowData[8] = "";

        if (!TableEntry.getValueAt(TableEntry.getRowCount() - 1, 1).toString().equalsIgnoreCase("") || TableEntry.getRowCount() < 1) {
            DataModelPiece.addRow(rowData);
        }
        TableEntry.changeSelection(TableEntry.getRowCount() - 1, 1, false, false);
        TableEntry.requestFocus();
    }

    private void PreviewReport() {
        HashMap Parameters = new HashMap();
        Parameters.put("CURDATE", EITLERPGLOBAL.getCurrentDate());

        TTable objData = new TTable();

        //Populate Columns
        objData.AddColumn("PRODUCTION_NO");
        objData.AddColumn("PRODUCTION_DATE");
        objData.AddColumn("SR_NO");
        objData.AddColumn("QUALITY_CD");
        objData.AddColumn("PIECE_NO");
        objData.AddColumn("WIDTH");
        objData.AddColumn("GROSS_METER");
        objData.AddColumn("SQ_METER");
        objData.AddColumn("NET_METER");
        objData.AddColumn("KGS");
        objData.AddColumn("FLAG_CD");
        objData.AddColumn("PIECE_STATUS");
        objData.AddColumn("GROUP");
        objData.AddColumn("STYLE");
        objData.AddColumn("DESCRIPTION");
        objData.AddColumn("SYENTIC_PER");
        
        try {

            String strSQL = "";
            ResultSet rsReport;
            String ExpenseID = "";
            String DocDate = "";

            //Retrieve data of main voucher
            strSQL = "SELECT R.*,M.GROUP,M.SYENTIC_PER,M.STYLE,M.DESCRIPTION FROM FILTERFABRIC.FF_TRD_PIECE_REGISTER R,FILTERFABRIC.FF_TRD_QUALITY_MASTER M WHERE R.QUALITY_CD=M.QUALITY_CD AND PRODUCTION_NO='" + txtprodno.getText().trim() + "' ORDER BY SR_NO";

            rsReport = data.getResult(strSQL);
            rsReport.first();

            if (rsReport.getRow() > 0) {

                while (!rsReport.isAfterLast()) {
                    TRow objRow = new TRow();

                    objRow.setValue("PRODUCTION_NO", rsReport.getString("PRODUCTION_NO"));
                    objRow.setValue("PRODUCTION_DATE", rsReport.getString("PRODUCTION_DATE"));
                    objRow.setValue("SR_NO", rsReport.getString("SR_NO"));
                    objRow.setValue("QUALITY_CD", rsReport.getString("QUALITY_CD"));
                    objRow.setValue("GROUP", rsReport.getString("GROUP"));
                    objRow.setValue("STYLE", rsReport.getString("STYLE"));
                    objRow.setValue("DESCRIPTION", rsReport.getString("DESCRIPTION"));
                    objRow.setValue("SYENTIC_PER", Double.toString(rsReport.getDouble("SYENTIC_PER")));
                    objRow.setValue("PIECE_NO", rsReport.getString("PIECE_NO"));
                    objRow.setValue("WIDTH", Double.toString(rsReport.getDouble("WIDTH")));
                    objRow.setValue("GROSS_METER", Double.toString(rsReport.getDouble("GROSS_METER")));
                    objRow.setValue("SQ_METER", Double.toString(rsReport.getDouble("SQ_METER")));
                    objRow.setValue("NET_METER", Double.toString(rsReport.getDouble("NET_METER")));
                    objRow.setValue("KGS", Double.toString(rsReport.getDouble("KGS")));
                    objRow.setValue("FLAG_CD", rsReport.getString("FLAG_CD"));
                    objRow.setValue("PIECE_STATUS", rsReport.getString("PIECE_STATUS"));

                    objData.AddRow(objRow);
                    rsReport.next();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        objEngine.PreviewReport("http://" + EITLERPGLOBAL.HostIP + "/EITLERP/FilterTrading/Reports/rptProduction.rpt", Parameters, objData);

    }
}
