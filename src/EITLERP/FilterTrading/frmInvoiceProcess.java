/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EITLERP.FilterTrading;

import EITLERP.EITLERPGLOBAL;
import EITLERP.EITLTableCellRenderer;
import EITLERP.EITLTableModel;
import EITLERP.data;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;

/**
 *
 * @author
 */
public class frmInvoiceProcess extends javax.swing.JApplet {

    /**
     * Initializes the applet frmInvoiceProcess
     */
    private EITLTableModel DataModelInvH, DataModelInvD;

    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the applet */
        System.gc();
        setSize(665, 530);
        initComponents();
        setvisiable(false);
        export_file();
        pckinv();

    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdinv = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableInvH = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableInvD = new javax.swing.JTable();
        btncnf = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtinvdt = new javax.swing.JTextField();
        lblinv = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtpckno = new javax.swing.JTextArea();

        getContentPane().setLayout(null);

        cmdinv.setText("Process");
        cmdinv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdinvActionPerformed(evt);
            }
        });
        getContentPane().add(cmdinv);
        cmdinv.setBounds(380, 100, 130, 29);

        jLabel1.setText("Packing Note No.");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(120, 20, 140, 17);

        TableInvH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableInvH);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 140, 760, 180);

        TableInvD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TableInvD);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(20, 330, 760, 180);

        btncnf.setText("Confirm");
        btncnf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncnfActionPerformed(evt);
            }
        });
        getContentPane().add(btncnf);
        btncnf.setBounds(580, 100, 140, 29);

        jLabel2.setText("Invoice Date");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(390, 20, 90, 17);

        jLabel3.setText("DD/MM/YYYY");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(390, 40, 110, 17);

        txtinvdt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtinvdtFocusLost(evt);
            }
        });
        getContentPane().add(txtinvdt);
        txtinvdt.setBounds(380, 60, 130, 27);

        lblinv.setText("Invoice With Lot No.");
        getContentPane().add(lblinv);
        lblinv.setBounds(580, 60, 150, 17);

        txtpckno.setEditable(false);
        txtpckno.setColumns(20);
        txtpckno.setRows(5);
        jScrollPane3.setViewportView(txtpckno);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(20, 40, 330, 89);
    }// </editor-fold>//GEN-END:initComponents

    private void cmdinvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdinvActionPerformed
        // TODO add your handling code here:
        Connection Conn;
        Statement Stmt;
        ResultSet rsPck;
        String pckno;
        String[] nextno = new String[10];
        String sql;
        Double msqmtr, mkg, mgrsqty, mnetqty, mgrsamt, mnetamt, mexc, mtot, mnopiece, mins, mvat4, mvat1, mcst2, mcst5;
        msqmtr = mkg = mgrsqty = mnetqty = mgrsamt = mnetamt = mexc = mtot = mnopiece = mins = mvat4 = mvat1 = mcst2 = mcst5 = 0.0;
        int minscal;
        if (pckinv()) {
            FormatGrid();

            setvisiable(true);
            try {
                getNextNo();
                sql = "SELECT H.WH_CODE,H.PACKING_NOTE_NO,H.PACKING_DATE,H.PARTY_CODE,H.SALE_NOTE_NO,H.STATION,H.MODE_OF_TRANSPORT,"
                        + "D.QUALITY_CD,D.PIECE_NO,D.GROSS_METER,D.FLAG_CD,D.NET_METER,D.WIDTH,D.SQ_METER,D.KGS,"
                        + "P.CHARGE_CODE,P.GROSS_WEIGHT,P.TRANSPORTER,P.CHECK_POST,P.INSURANCE_CHARGE,P.ZERO_RATE,P.VAT4,P.VAT1,P.CST2,P.CST5,"
                        + "M.DESCRIPTION,CASE WHEN P.ZERO_RATE=1 THEN 0 ELSE M.RATE END AS RATE,"
                        + "I.INVOICE_SR_NO,I.INVOICE_NO,I.INVOICE_DATE,I.LOT_NO,I.AGENT_ALPHA,I.AGENT_SR_NO,I.GATEPASS_NO  "
                        + " FROM FILTERFABRIC.FF_TRD_PACKING_HEADER H,FILTERFABRIC.FF_TRD_PACKING_DETAIL D,"
                        + "FILTERFABRIC.FF_TRD_INVOICE_PARAMETER P,FILTERFABRIC.FF_TRD_QUALITY_MASTER M,FILTERFABRIC.TMP_FF_TRD_INVOICE I  "
                        + " WHERE H.PACKING_NOTE_NO IN "
                        + " (SELECT PACKING_NOTE_NO AS PCK_NO FROM FILTERFABRIC.FF_TRD_INVOICE_PARAMETER P,FILTERFABRIC.FF_TRD_DOC_DATA D "
                        + " WHERE P.PACKING_NOTE_NO=D.DOC_NO AND STATUS='F' AND PROCESSING_DATE=CURDATE() AND PACKING_NOTE_NO NOT IN "
                        + " (SELECT PACKING_NOTE_NO FROM FILTERFABRIC.FF_TRD_INVOICE)) AND"
                        + " H.PACKING_NOTE_NO=D.PACKING_NOTE_NO AND H.PACKING_DATE=D.PACKING_DATE AND"
                        + " H.PACKING_NOTE_NO=P.PACKING_NOTE_NO AND H.PACKING_DATE=P.PACKING_DATE AND"
                        + " H.PACKING_NOTE_NO=I.PACKING_NOTE_NO AND H.PACKING_DATE=I.PACKING_DATE AND"
                        + " D.QUALITY_CD=M.QUALITY_CD ORDER BY H.PACKING_NOTE_NO";

                rsPck = data.getResult(sql);

                rsPck.first();
                while (!rsPck.isAfterLast()) {
                    pckno = rsPck.getString("PACKING_NOTE_NO");

                    msqmtr = msqmtr + rsPck.getDouble("SQ_METER");
                    mkg = mkg + rsPck.getDouble("KGS");
                    mgrsqty = mgrsqty + rsPck.getDouble("GROSS_METER");
                    mnetqty = mnetqty + rsPck.getDouble("NET_METER");
                    mnopiece = mnopiece + 1;
                    
                    mgrsamt = mgrsamt + (rsPck.getDouble("SQ_METER") * rsPck.getDouble("RATE"));

                    //DETAIL
                    Object[] rowDataD = new Object[20];
                    rowDataD[0] = "3";//inv type
                    rowDataD[1] = rsPck.getString("INVOICE_SR_NO");// inv sr no
                    rowDataD[2] = rsPck.getString("INVOICE_NO");// inv no[Acc sr no]
                    rowDataD[3] = EITLERPGLOBAL.formatDateDB(txtinvdt.getText());// Invoice Date
                    rowDataD[4] = rsPck.getInt("LOT_NO");// lot no
                    rowDataD[5] = rsPck.getString("QUALITY_CD");//quality
                    rowDataD[6] = rsPck.getString("DESCRIPTION");//desc
                    rowDataD[7] = rsPck.getString("PIECE_NO");//piece
                    rowDataD[8] = rsPck.getString("PARTY_CODE");//party cd
                    rowDataD[9] = rsPck.getInt("WH_CODE");// wh code
                    rowDataD[10] = rsPck.getString("FLAG_CD");//def flag                    
                    rowDataD[11] = rsPck.getDouble("RATE");//rate
                    rowDataD[12] = EITLERPGLOBAL.round(rsPck.getDouble("SQ_METER"), 2);// SQ METER
                    rowDataD[13] = EITLERPGLOBAL.round(rsPck.getDouble("KGS"), 2);//KG
                    rowDataD[14] = EITLERPGLOBAL.round(rsPck.getDouble("GROSS_METER"), 2);// GROSS METER
                    rowDataD[15] = EITLERPGLOBAL.round(rsPck.getDouble("NET_METER"), 2);// NET METER
                    rowDataD[16] = EITLERPGLOBAL.round(rsPck.getDouble("SQ_METER") * rsPck.getDouble("RATE"), 2);//GROSS AMT
                    rowDataD[17] = EITLERPGLOBAL.round(rsPck.getDouble("SQ_METER") * rsPck.getDouble("RATE"), 2);//NET AMT
                    rowDataD[18] = EITLERPGLOBAL.round(rsPck.getDouble("SQ_METER") * rsPck.getDouble("RATE"), 2);//EXCISE AMT

                    DataModelInvD.addRow(rowDataD);
                    rsPck.next();
                    if (!rsPck.isAfterLast()) {
                        if (!rsPck.getString("PACKING_NOTE_NO").equals(pckno)) {
                            rsPck.previous();
                            //HEADER

                            if (rsPck.getInt("VAT1") == 1) {
                                if (rsPck.getInt("INSURANCE_CHARGE") == 1) {
                                    mins = (mgrsamt * 1.05) * 0.0039;
                                }
                                mvat1 = 0.01;
                                mvat4 = 0.04;
                            }
                            if (rsPck.getInt("CST2") == 1) {
                                if (rsPck.getInt("INSURANCE_CHARGE") == 1) {
                                    mins = (mgrsamt * 1.02) * 0.0039;
                                }
                                mcst2 = 0.02;
                            }
                            if (rsPck.getInt("CST5") == 1) {
                                if (rsPck.getInt("INSURANCE_CHARGE") == 1) {
                                    mins = (mgrsamt * 1.05) * 0.0039;
                                }
                                mcst5 = 0.05;
                            }
                            mvat1 = (mgrsamt + mins) * mvat1;
                            mvat4 = (mgrsamt + mins) * mvat4;
                            mcst2 = (mgrsamt + mins) * mcst2;
                            mcst5 = (mgrsamt + mins) * mcst5;
                            mtot = mgrsamt + mvat1 + mvat4 + mcst2 + mcst5 + mins;

                            Object[] rowData = new Object[40];

                            rowData[0] = "3";//Inv type
                            rowData[1] = rsPck.getString("INVOICE_SR_NO");// inv sr no
                            rowData[2] = rsPck.getString("INVOICE_NO");// inv no[Acc sr no]
                            rowData[3] = EITLERPGLOBAL.formatDateDB(txtinvdt.getText());// Invoice Date
                            rowData[4] = rsPck.getInt("LOT_NO");// lot no
                            rowData[5] = rsPck.getString("PARTY_CODE");//party cd
                            rowData[6] = rsPck.getString("AGENT_ALPHA");//AGENT_ALPHA
                            rowData[7] = rsPck.getInt("AGENT_SR_NO");//AGENT SR NO
                            rowData[8] = rsPck.getString("STATION");//station
                            rowData[9] = rsPck.getString("CHARGE_CODE");//bank charge
                            rowData[10] = rsPck.getString("MODE_OF_TRANSPORT").trim().substring(0, 1);//transport mode
                            rowData[11] = EITLERPGLOBAL.FinYearFrom;//fir year from
                            rowData[12] = EITLERPGLOBAL.FinYearTo;// fin year to
                            rowData[13] = rsPck.getInt("WH_CODE"); // wh code
                            rowData[14] = rsPck.getString("PACKING_NOTE_NO");//bale_no
                            rowData[15] = rsPck.getString("PACKING_DATE");//packing date
                            rowData[16] = rsPck.getString("GATEPASS_NO");//gatepass no
                            rowData[17] = EITLERPGLOBAL.formatDateDB(txtinvdt.getText());//gatepass date
                            rowData[18] = EITLERPGLOBAL.round(msqmtr, 2);//total sq meter
                            rowData[19] = EITLERPGLOBAL.round(mkg, 2);//tot kg
                            rowData[20] = EITLERPGLOBAL.round(mgrsqty, 2);//tot gross qty
                            rowData[21] = EITLERPGLOBAL.round(mgrsqty, 2);//tot net qty
                            rowData[22] = EITLERPGLOBAL.round(mgrsamt, 2);//tot gross amt
                            rowData[23] = EITLERPGLOBAL.round(mgrsamt, 2);//tot net amt
                            rowData[24] = EITLERPGLOBAL.round(mgrsamt, 2);//excise val
                            rowData[25] = EITLERPGLOBAL.round(mtot, 2);//tot val
                            rowData[26] = EITLERPGLOBAL.round(mtot, 0);//net amt [rounded]
                            rowData[27] = EITLERPGLOBAL.round(rsPck.getDouble("GROSS_WEIGHT"), 2);//gross weight
                            rowData[28] = data.getIntValueFromDB("SELECT TRANSPORTER_ID FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER WHERE TRANSPORTER_NAME = '" + rsPck.getString("TRANSPORTER").trim() + "'");// trans code
                            rowData[29] = EITLERPGLOBAL.round(mnopiece, 0);//no of piece
                            rowData[30] = rsPck.getString("SALE_NOTE_NO");//sale note
                            rowData[31] = EITLERPGLOBAL.round(mins, 2);// insuance charge
                            rowData[32] = EITLERPGLOBAL.round(mvat1, 2);//vat 1
                            rowData[33] = EITLERPGLOBAL.round(mvat4, 2);//vat 4
                            rowData[34] = EITLERPGLOBAL.round(mcst2, 2);// cst2
                            rowData[35] = EITLERPGLOBAL.round(mcst5, 2);//cst5
                            rowData[36] = rsPck.getString("TRANSPORTER");//trans name
                            rowData[37] = rsPck.getString("CHECK_POST");//check post                            

                            DataModelInvH.addRow(rowData);
                            rsPck.next();
                            if (!rsPck.isAfterLast()) {
                                msqmtr = mkg = mgrsqty = mnetqty = mgrsamt = mnetamt = mexc = mtot = mnopiece = mins = mvat4 = mvat1 = mcst2 = mcst5 = 0.0;
                            }
                        }
                    }
                }
                rsPck.last();
                Object[] rowData = new Object[40];

                if (rsPck.getInt("VAT1") == 1) {
                    if (rsPck.getInt("INSURANCE_CHARGE") == 1) {
                        mins = (mgrsamt * 1.05) * 0.0039;
                    }
                    mvat1 = 0.01;
                    mvat4 = 0.04;
                }
                if (rsPck.getInt("CST2") == 1) {
                    if (rsPck.getInt("INSURANCE_CHARGE") == 1) {
                        mins = (mgrsamt * 1.02) * 0.0039;
                    }
                    mcst2 = 0.02;
                }
                if (rsPck.getInt("CST5") == 1) {
                    if (rsPck.getInt("INSURANCE_CHARGE") == 1) {
                        mins = (mgrsamt * 1.05) * 0.0039;
                    }
                    mcst5 = 0.05;
                }
                mvat1 = (mgrsamt + mins) * mvat1;
                mvat4 = (mgrsamt + mins) * mvat4;
                mcst2 = (mgrsamt + mins) * mcst2;
                mcst5 = (mgrsamt + mins) * mcst5;
                mtot = mgrsamt + mvat1 + mvat4 + mcst2 + mcst5 + mins;

                rowData[0] = "3";//Inv type
                rowData[1] = rsPck.getString("INVOICE_SR_NO");// inv sr no
                rowData[2] = rsPck.getString("INVOICE_NO");// inv no[Acc sr no]
                rowData[3] = EITLERPGLOBAL.formatDateDB(txtinvdt.getText());// Invoice Date
                rowData[4] = rsPck.getInt("LOT_NO");// lot no
                rowData[5] = rsPck.getString("PARTY_CODE");//party cd
                rowData[6] = rsPck.getString("AGENT_ALPHA");//AGENT_ALPHA
                rowData[7] = rsPck.getInt("AGENT_SR_NO");//AGENT SR NO
                rowData[8] = rsPck.getString("STATION");//station
                rowData[9] = rsPck.getString("CHARGE_CODE");//bank charge
                rowData[10] = rsPck.getString("MODE_OF_TRANSPORT").trim().substring(0, 1);//transport mode
                rowData[11] = EITLERPGLOBAL.FinYearFrom;//fir year from
                rowData[12] = EITLERPGLOBAL.FinYearTo;// fin year to
                rowData[13] = rsPck.getInt("WH_CODE"); // wh code
                rowData[14] = rsPck.getString("PACKING_NOTE_NO");//bale_no
                rowData[15] = rsPck.getString("PACKING_DATE");//packing date
                rowData[16] = rsPck.getString("GATEPASS_NO");//gatepass no
                rowData[17] = EITLERPGLOBAL.formatDateDB(txtinvdt.getText());//gatepass date
                rowData[18] = EITLERPGLOBAL.round(msqmtr, 2);//total sq meter
                rowData[19] = EITLERPGLOBAL.round(mkg, 2);//tot kg
                rowData[20] = EITLERPGLOBAL.round(mgrsqty, 2);//tot gross qty
                rowData[21] = EITLERPGLOBAL.round(mgrsqty, 2);//tot net qty
                rowData[22] = EITLERPGLOBAL.round(mgrsamt, 2);//tot gross amt
                rowData[23] = EITLERPGLOBAL.round(mgrsamt, 2);//tot net amt
                rowData[24] = EITLERPGLOBAL.round(mgrsamt, 2);//excise val
                rowData[25] = EITLERPGLOBAL.round(mtot, 2);//tot val
                rowData[26] = EITLERPGLOBAL.round(mtot, 0);//net amt [rounded]
                rowData[27] = EITLERPGLOBAL.round(rsPck.getDouble("GROSS_WEIGHT"), 2);//gross weight
                rowData[28] = data.getIntValueFromDB("SELECT TRANSPORTER_ID FROM DINESHMILLS.D_SAL_TRANSPORTER_MASTER WHERE TRANSPORTER_NAME = '" + rsPck.getString("TRANSPORTER").trim() + "'");// trans code
                rowData[29] = EITLERPGLOBAL.round(mnopiece, 0);//no of piece
                rowData[30] = rsPck.getString("SALE_NOTE_NO");//sale note
                rowData[31] = EITLERPGLOBAL.round(mins, 2);// insuance charge
                rowData[32] = EITLERPGLOBAL.round(mvat1, 2);//vat 1
                rowData[33] = EITLERPGLOBAL.round(mvat4, 2);//vat 4
                rowData[34] = EITLERPGLOBAL.round(mcst2, 2);// cst2
                rowData[35] = EITLERPGLOBAL.round(mcst5, 2);//cst5
                rowData[36] = rsPck.getString("TRANSPORTER");//trans name
                rowData[37] = rsPck.getString("CHECK_POST");//check post                            

                DataModelInvH.addRow(rowData);
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Invalid...");
        }

    }//GEN-LAST:event_cmdinvActionPerformed

    private void txtinvdtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtinvdtFocusLost
        // TODO add your handling code here:
        checkdt();
    }//GEN-LAST:event_txtinvdtFocusLost

    private void btncnfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncnfActionPerformed
        // TODO add your handling code here:

        String sql, invtyp, invdt1;
        int invlt;
        int msv = JOptionPane.showConfirmDialog(null, "Do you want to Generate Invoice?");

        if (msv == 0) {
            for (int i = 0; i < TableInvH.getRowCount(); i++) {
                sql = "INSERT INTO FILTERFABRIC.FF_TRD_INVOICE VALUES('" + (String) TableInvH.getValueAt(i, 14) + "',"
                        + "'" + (String) TableInvH.getValueAt(i, 15) + "',"
                        + "'" + (String) TableInvH.getValueAt(i, 2) + "',"
                        + "'" + (String) TableInvH.getValueAt(i, 3) + "',"
                        + TableInvH.getValueAt(i, 4)
                        + ")";

                data.Execute(sql);
                if (Double.parseDouble(TableInvH.getValueAt(i, 32).toString()) > 0) {
                    invtyp = "VAT_INVOICE_NO";
                } else {
                    invtyp = "CST_INVOICE_NO";
                }

                if (Integer.parseInt(TableInvH.getValueAt(i, 7).toString()) == 1) {
                    sql = "INSERT INTO FILTERFABRIC.FF_TRD_PARAMETER (AGENT_CD,AGENT_ALPHA) VALUES ("
                            + "'" + TableInvH.getValueAt(i, 5).toString().substring(0, 2) + "',"
                            + "'" + TableInvH.getValueAt(i, 6).toString() + "'"
                            + ")";
                    data.Execute(sql);
                }
                sql = "UPDATE FILTERFABRIC.FF_TRD_PARAMETER "
                        + "SET LAST_USED_NO='" + TableInvH.getValueAt(i, 2).toString() + "'"
                        + " WHERE AGENT_CD='INVOICE_NO'";
                data.Execute(sql);
                sql = "UPDATE FILTERFABRIC.FF_TRD_PARAMETER "
                        + "SET LAST_USED_NO='" + TableInvH.getValueAt(i, 16).toString() + "'"
                        + " WHERE AGENT_CD='EXCISE_NO'";
                data.Execute(sql);
                sql = "UPDATE FILTERFABRIC.FF_TRD_PARAMETER "
                        + "SET LAST_USED_NO='" + TableInvH.getValueAt(i, 16).toString() + "'"
                        + " WHERE AGENT_CD='GATEPASS_NO'";
                data.Execute(sql);
                sql = "UPDATE FILTERFABRIC.FF_TRD_PARAMETER "
                        + "SET LAST_USED_NO='" + TableInvH.getValueAt(i, 1).toString() + "'"
                        + " WHERE AGENT_CD='" + invtyp + "'";
                data.Execute(sql);
                sql = "UPDATE FILTERFABRIC.FF_TRD_PARAMETER "
                        + "SET LAST_USED_NO='" + TableInvH.getValueAt(i, 7).toString() + "'"
                        + " WHERE AGENT_ALPHA='" + TableInvH.getValueAt(i, 6).toString() + "'";

                data.Execute(sql);

                sql = "INSERT INTO FILTERFABRIC.FF_TRD_INVOICE_HEADER (COMPANY_ID,INVOICE_TYPE,INVOICE_SR_NO,INVOICE_NO,INVOICE_DATE,LOT_NO,"
                        + "PARTY_CODE,AGENT_ALPHA,AGENT_SR_NO,STATION_CODE,BANK_CHARGES,TRANSPORT_MODE,FIN_YEAR_FROM,FIN_YEAR_TO,"
                        + "WAREHOUSE_CODE,BALE_NO,PACKING_DATE,GATEPASS_NO,GATEPASS_DATE,"
                        + "TOTAL_SQ_MTR,TOTAL_KG,TOTAL_GROSS_QTY,TOTAL_NET_QTY,TOTAL_GROSS_AMOUNT,"
                        + "TOTAL_NET_AMOUNT,EXCISABLE_VALUE,TOTAL_VALUE,NET_AMOUNT,GROSS_WEIGHT,TRANSPORTER_CODE,NO_OF_PIECES,"
                        + "SALE_NOTE_NO,INSURANCE_CHARGES,VAT1,VAT4,CST2,CST5,TRANSPORTER_NAME,CHECK_POST,"
                        + "CREATED_DATE,CREATED_BY) VALUES ("
                        + EITLERPGLOBAL.gCompanyID + ",";
                for (int k = 0; k < 38; k++) {
                    if (k == 0 || k == 4 || k == 7 || k == 10 || k == 11 || k == 12 || k == 13 || k == 28) {
                        sql = sql + Integer.parseInt(TableInvH.getValueAt(i, k).toString()) + ",";
                    } else if (k >= 18 && k <= 35) {
                        if (k == 28 || k == 30) {
                            sql = sql + "'" + TableInvH.getValueAt(i, k).toString() + "',";
                        } else {
                            sql = sql + Double.parseDouble(TableInvH.getValueAt(i, k).toString()) + ",";
                        }
                    } else {
                        sql = sql + "'" + TableInvH.getValueAt(i, k).toString() + "',";
                    }
                }
                sql = sql + "'" + EITLERPGLOBAL.getCurrentDateTimeDB() + "',";
                sql = sql + EITLERPGLOBAL.gNewUserID;
                sql = sql + ")";

                data.Execute(sql);
            }

            for (int d = 0; d < TableInvD.getRowCount(); d++) {
                sql = "INSERT INTO FILTERFABRIC.FF_TRD_INVOICE_DETAIL (COMPANY_ID,INVOICE_TYPE,INVOICE_SR_NO,INVOICE_NO,INVOICE_DATE,LOT_NO,"
                        + "QUALITY_CD,DESCRIPTION,PIECE_NO,PARTY_CODE,WAREHOUSE_CODE,FLAG_DEF_CODE,"
                        + "RATE,GROSS_SQ_MTR,GROSS_KG,GROSS_QTY,NET_QTY,GROSS_AMOUNT,NET_AMOUNT,EXCISABLE_VALUE,"
                        + "CREATE_DATE,CREATED_BY) VALUES("
                        + EITLERPGLOBAL.gCompanyID + ",";
                for (int m = 0; m < 19; m++) {
                    if (m == 0 || m == 4 || m == 9) {
                        sql = sql + Integer.parseInt(TableInvD.getValueAt(d, m).toString()) + ",";
                    } else if (m >= 11 && m <= 18) {
                        sql = sql + Double.parseDouble(TableInvD.getValueAt(d, m).toString()) + ",";
                    } else {
                        sql = sql + "'" + TableInvD.getValueAt(d, m).toString() + "',";
                    }
                }
                sql = sql + "'" + EITLERPGLOBAL.getCurrentDateTimeDB() + "',";
                sql = sql + EITLERPGLOBAL.gNewUserID;
                sql = sql + ")";

                data.Execute(sql);
            }
            invdt1 = TableInvD.getValueAt(0, 3).toString();
            invlt = Integer.parseInt(TableInvD.getValueAt(0, 4).toString());
            sql = "UPDATE FILTERFABRIC.FF_TRD_INVOICE_HEADER "
                    + " SET INV_NO=CONCAT(TRIM(AGENT_ALPHA),'/',RIGHT(10000+AGENT_SR_NO,4),'/',YEAR(INVOICE_DATE),'/',"
                    + "RIGHT(100000+INVOICE_NO,5),'/',FIN_YEAR_FROM,'-',FIN_YEAR_TO)"
                    + " WHERE INVOICE_DATE='" + invdt1 + "' AND LOT_NO=" + invlt;
            data.Execute(sql);

            sql = "UPDATE FILTERFABRIC.FF_TRD_PIECE_REGISTER P,FILTERFABRIC.FF_TRD_INVOICE_DETAIL D"
                    + " SET P.PIECE_STATUS='D' "
                    + " WHERE P.QUALITY_CD=D.QUALITY_CD AND P.PIECE_NO=D.PIECE_NO AND"
                    + " D.INVOICE_DATE='" + invdt1 + "' AND LOT_NO=" + invlt;
            data.Execute(sql);

            sql = "UPDATE FILTERFABRIC.FF_TRD_PIECE_REGISTER P,FILTERFABRIC.FF_TRD_INVOICE_DETAIL D"
                    + " SET D.WIDTH=P.WIDTH "
                    + " WHERE P.QUALITY_CD=D.QUALITY_CD AND P.PIECE_NO=D.PIECE_NO AND"
                    + " D.INVOICE_DATE='" + invdt1 + "' AND LOT_NO=" + invlt;
            data.Execute(sql);

            export_file();
            JOptionPane.showMessageDialog(null, "Invoice Generated...");
            txtinvdt.setText("");
            FormatGrid();
            btncnf.setVisible(false);

        }
    }//GEN-LAST:event_btncnfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableInvD;
    private javax.swing.JTable TableInvH;
    private javax.swing.JButton btncnf;
    private javax.swing.JButton cmdinv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblinv;
    private javax.swing.JTextField txtinvdt;
    private javax.swing.JTextArea txtpckno;
    // End of variables declaration//GEN-END:variables

    private boolean pckinv() {
        try {
            String pck = data.getStringValueFromDB("SELECT GROUP_CONCAT(PACKING_NOTE_NO) AS PCK_NO FROM FILTERFABRIC.FF_TRD_INVOICE_PARAMETER P,FILTERFABRIC.FF_TRD_DOC_DATA D WHERE P.PACKING_NOTE_NO=D.DOC_NO AND STATUS='F' AND PROCESSING_DATE=CURDATE() AND PACKING_NOTE_NO NOT IN (SELECT PACKING_NOTE_NO FROM FILTERFABRIC.FF_TRD_INVOICE)");
            if (pck.trim().length() > 0) {
                txtpckno.setText(pck);
                setvisiable(true);
                cmdinv.show(false);
                btncnf.show(false);
                lblinv.show(false);
                jScrollPane1.show(false);
                jScrollPane2.show(false);
                TableInvH.show(false);
                TableInvD.show(false);
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "No Packing Slip Pending to be Invoice...");
                cmdinv.setEnabled(false);
                return false;
            }
        } catch (Exception e) {
        }
        return false;
    }

    private void FormatGrid() {

        try {
            //Header Table
            DataModelInvH = new EITLTableModel();
            TableInvH.removeAll();
            TableInvH.setModel(DataModelInvH);
            TableColumnModel ColModel = TableInvH.getColumnModel();
            TableInvH.setAutoResizeMode(TableInvH.AUTO_RESIZE_OFF);
            EITLTableCellRenderer Renderer = new EITLTableCellRenderer();
            Renderer.setColor(0, 0, Color.LIGHT_GRAY);

            DataModelInvH.addColumn("INV_TYPE");//1
            DataModelInvH.addColumn("INV_SR_NO");//2
            DataModelInvH.addColumn("INV_NO");//3
            DataModelInvH.addColumn("INV_DATE");//4
            DataModelInvH.addColumn("LOT_NO");//4
            DataModelInvH.addColumn("PARTY_CD");//5
            DataModelInvH.addColumn("AGENT_ALPHA");//6
            DataModelInvH.addColumn("AGENT_SR_NO");//7
            DataModelInvH.addColumn("STATION_CD");//8
            DataModelInvH.addColumn("BANK_CHARGES");//9
            DataModelInvH.addColumn("TRANSPORT_MODE");//10
            DataModelInvH.addColumn("FIN_YEAR_FROM");//11
            DataModelInvH.addColumn("FIN_YEAR_TO");//12
            DataModelInvH.addColumn("WH_CD");//13
            DataModelInvH.addColumn("BALE_NO");//14
            DataModelInvH.addColumn("PACKING_DATE");//15
            DataModelInvH.addColumn("GATEPASS_NO");//16
            DataModelInvH.addColumn("GATEPASS_DATE");//17
            DataModelInvH.addColumn("TOTAL_SQ_MTR");//18
            DataModelInvH.addColumn("TOTAL_KG");//19
            DataModelInvH.addColumn("TOTAL_GROSS_QTY");//20
            DataModelInvH.addColumn("TOTAL_NET_QTY");//21
            DataModelInvH.addColumn("TOTAL_GROSS_AMOUNT");//22
            DataModelInvH.addColumn("TOTAL_NET_AMOUNT");//23
            DataModelInvH.addColumn("EXCISABLE_VALUE");//24
            DataModelInvH.addColumn("TOTAL_VALUE");//25
            DataModelInvH.addColumn("NET_AMOUNT");//26
            DataModelInvH.addColumn("GROSS_WEIGHT");//27
            DataModelInvH.addColumn("TRANSPORTER_CD");//28
            DataModelInvH.addColumn("NO_OF_PIECES");//29
            DataModelInvH.addColumn("SALE_NOTE_NO");//30
            DataModelInvH.addColumn("INSURANCE_CHARGES");//31
            DataModelInvH.addColumn("VAT1");//32
            DataModelInvH.addColumn("VAT4");//33
            DataModelInvH.addColumn("CST2");//34
            DataModelInvH.addColumn("CST5");//35
            DataModelInvH.addColumn("TRANSPORTER_NAME");//36
            DataModelInvH.addColumn("CHECK_POST");//37

            DataModelInvH.TableReadOnly(true);

            // Detail Table
            DataModelInvD = new EITLTableModel();
            TableInvD.removeAll();
            TableInvD.setModel(DataModelInvD);
            TableColumnModel ColModelD = TableInvD.getColumnModel();
            TableInvD.setAutoResizeMode(TableInvH.AUTO_RESIZE_OFF);
            EITLTableCellRenderer RendererD = new EITLTableCellRenderer();
            RendererD.setColor(0, 0, Color.LIGHT_GRAY);

            DataModelInvD.addColumn("INV_TYPE");//1
            DataModelInvD.addColumn("INV_SR_NO");//2
            DataModelInvD.addColumn("INV_NO");//3
            DataModelInvD.addColumn("INV_DATE");//4
            DataModelInvD.addColumn("LOT_NO");//4
            DataModelInvD.addColumn("QUALITY_NO");//5
            DataModelInvD.addColumn("DESCRIPTION");//5
            DataModelInvD.addColumn("PIECE_NO");//6
            DataModelInvD.addColumn("PARTY_CD");//7
            DataModelInvD.addColumn("WAREHOUSE_CD");//8
            DataModelInvD.addColumn("FLAG_DEF_CD");//9
            DataModelInvD.addColumn("RATE");//10
            DataModelInvD.addColumn("GROSS_SQ_MTR");//11
            DataModelInvD.addColumn("GROSS_KG");//12
            DataModelInvD.addColumn("GROSS_QTY");//13
            DataModelInvD.addColumn("NET_QTY");//14
            DataModelInvD.addColumn("GROSS_AMOUNT");//15
            DataModelInvD.addColumn("NET_AMOUNT");//16
            DataModelInvD.addColumn("EXCISABLE_VALUE");//17

            DataModelInvD.TableReadOnly(true);

        } catch (Exception e) {

        }

        //Table formatting completed  
    }

    private void setvisiable(boolean pstat) {
        jLabel2.show(pstat);
        jLabel3.show(pstat);
        lblinv.show(pstat);
        txtinvdt.show(pstat);
        cmdinv.show(pstat);
        btncnf.show(pstat);
        jScrollPane1.show(pstat);
        jScrollPane2.show(pstat);
        TableInvH.show(pstat);
        TableInvD.show(pstat);
    }

    private boolean checkdt() {
        String lstinvdt, invdt;
        lstinvdt = data.getStringValueFromDB("SELECT INVOICE_DATE FROM FILTERFABRIC.FF_TRD_INVOICE ORDER BY INVOICE_DATE DESC");
        if (lstinvdt.equals("")) {
            lstinvdt = data.getStringValueFromDB("SELECT CURDATE() FROM DUAL");
        }
        int dtdiff;

        try {
            invdt = EITLERPGLOBAL.formatDateDB(txtinvdt.getText());
            if (invdt.equals("0000-00-00")) {
                JOptionPane.showMessageDialog(null, "Invalid Date...");
                txtinvdt.setText("");
                txtinvdt.requestFocus();
                return false;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            return false;
        }
        dtdiff = data.getIntValueFromDB("SELECT DATEDIFF('" + lstinvdt + "',CURDATE()) FROM DUAL");
        if (dtdiff < 0) {
            lstinvdt = EITLERPGLOBAL.getCurrentDateDB();
        }
        dtdiff = data.getIntValueFromDB("SELECT DATEDIFF('" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText()) + "','" + lstinvdt + "') FROM DUAL");
        if (dtdiff < 0) {
            JOptionPane.showMessageDialog(null, "Invalid Invoice Date...");
            setvisiable(false);
            jLabel2.show();
            jLabel3.show();
            txtinvdt.show();
            txtinvdt.setText("");
            txtinvdt.requestFocus();

            return false;
        } else {
            cmdinv.show(true);
            cmdinv.requestFocus();
            return true;
        }

    }

    private void getNextNo() {
        String sql, mpck, magnt, mpckdt;
        ResultSet rsnext;
        int mlot, minvno, mexcs, mgp, mvatno, mcstno, magntno, mvat, minv;
        sql = "TRUNCATE TABLE FILTERFABRIC.TMP_FF_TRD_INVOICE";
        data.Execute(sql);
        sql = "INSERT INTO FILTERFABRIC.TMP_FF_TRD_INVOICE (PACKING_NOTE_NO,PACKING_DATE,INVOICE_DATE) "
                + "(SELECT PACKING_NOTE_NO,PACKING_DATE,'" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "' FROM FILTERFABRIC.FF_TRD_INVOICE_PARAMETER P,FILTERFABRIC.FF_TRD_DOC_DATA D "
                + " WHERE P.PACKING_NOTE_NO=D.DOC_NO AND STATUS='F' AND PROCESSING_DATE=CURDATE() AND PACKING_NOTE_NO NOT IN "
                + "(SELECT PACKING_NOTE_NO FROM FILTERFABRIC.FF_TRD_INVOICE) ORDER BY PACKING_NOTE_NO)";
        data.Execute(sql);
        mlot = data.getIntValueFromDB("SELECT MAX(LOT_NO) FROM FILTERFABRIC.FF_TRD_INVOICE WHERE INVOICE_DATE='" + EITLERPGLOBAL.formatDateDB(txtinvdt.getText().trim()) + "'");
        mlot = mlot + 1;
        sql = "UPDATE FILTERFABRIC.TMP_FF_TRD_INVOICE SET LOT_NO=" + mlot;
        data.Execute(sql);
        lblinv.setText(txtinvdt.getText().trim() + " " + mlot);

        minvno = data.getIntValueFromDB("SELECT LAST_USED_NO FROM FILTERFABRIC.FF_TRD_PARAMETER WHERE AGENT_CD='INVOICE_NO'");
        mexcs = data.getIntValueFromDB("SELECT LAST_USED_NO FROM FILTERFABRIC.FF_TRD_PARAMETER WHERE AGENT_CD='EXCISE_NO'");
        mgp = data.getIntValueFromDB("SELECT LAST_USED_NO FROM FILTERFABRIC.FF_TRD_PARAMETER WHERE AGENT_CD='GATEPASS_NO'");
        mvatno = data.getIntValueFromDB("SELECT LAST_USED_NO FROM FILTERFABRIC.FF_TRD_PARAMETER WHERE AGENT_CD='VAT_INVOICE_NO'");
        mcstno = data.getIntValueFromDB("SELECT LAST_USED_NO FROM FILTERFABRIC.FF_TRD_PARAMETER WHERE AGENT_CD='CST_INVOICE_NO'");

        rsnext = data.getResult("SELECT * FROM FILTERFABRIC.TMP_FF_TRD_INVOICE");
        try {
            rsnext.first();
            while (!rsnext.isAfterLast()) {
                mpck = rsnext.getString("PACKING_NOTE_NO");
                mpckdt = rsnext.getString("PACKING_DATE");
                sql = "SELECT AREA_ID FROM DINESHMILLS.D_SAL_PARTY_MASTER"
                        + " WHERE PARTY_CODE=(SELECT CONCAT(LEFT(PARTY_CODE,2),'0000') FROM FILTERFABRIC.FF_TRD_PACKING_HEADER "
                        + " WHERE PACKING_NOTE_NO='" + mpck + "' AND PACKING_DATE='" + mpckdt + "') AND MAIN_ACCOUNT_CODE=210072";
                magnt = data.getStringValueFromDB(sql);
                magntno = data.getIntValueFromDB("SELECT LAST_USED_NO FROM FILTERFABRIC.FF_TRD_PARAMETER WHERE AGENT_CD='" + magnt + "'");
                minvno++;
                mexcs++;
                magntno = magntno + 1 + data.getIntValueFromDB("SELECT MAX(AGENT_SR_NO) FROM FILTERFABRIC.TMP_FF_TRD_INVOICE WHERE AGENT_ALPHA='" + magnt + "'");

                mvat = data.getIntValueFromDB("SELECT VAT1 FROM FILTERFABRIC.FF_TRD_INVOICE_PARAMETER WHERE PACKING_NOTE_NO='" + mpck + "' AND PACKING_DATE='" + mpckdt + "'");
                if (mvat == 1) {
                    mvatno++;
                    minv = mvatno;
                } else {
                    mcstno++;
                    minv = mcstno;
                }

                sql = "UPDATE FILTERFABRIC.TMP_FF_TRD_INVOICE "
                        + "SET INVOICE_SR_NO='" + minv + "',INVOICE_NO='" + minvno + "',AGENT_ALPHA='" + magnt + "',"
                        + "AGENT_SR_NO=" + magntno + ",GATEPASS_NO='" + mexcs + "' WHERE PACKING_NOTE_NO='" + mpck + "'";
                data.Execute(sql);
                rsnext.next();
            }
        } catch (Exception e) {
        }

    }

    private void export_file() {
        ResultSet rsd, rsh;
        PrintWriter inv = null, smy = null;
        String opdir = "", sql;
        int m;

        sql = "SELECT H.*,P.DOCUMENT_THROUGH,DATE_FORMAT(INVOICE_DATE,'%d%m%y') AS IDATE,DATE_FORMAT(PACKING_DATE,'%d%m%y') AS PDATE,"
                + "DATE_FORMAT(GATEPASS_DATE,'%d%m%y')  AS GDATE,INSURANCE_CHARGES*100 AS INS,"
                + "VAT1*100 AS V1,VAT4*100 AS V4,CST2*100 AS C2,CST5*100 AS C5,"
                + "TOTAL_SQ_MTR*100 AS TSQMTR,TOTAL_KG*100 AS TKG,TOTAL_GROSS_QTY*100 AS TGQ,TOTAL_NET_QTY*100 AS TNQ,"
                + "TOTAL_GROSS_AMOUNT*100 AS TGA,TOTAL_NET_AMOUNT*100 AS TNA,EXCISABLE_VALUE*100 AS EXCV,"
                + "TOTAL_VALUE*100 AS TVAL,NET_AMOUNT AS NAMT "
                + " FROM FILTERFABRIC.FF_TRD_INVOICE_HEADER H,DINESHMILLS.D_SAL_PARTY_MASTER P "
                + " WHERE H.PARTY_CODE=P.PARTY_CODE AND INVOICE_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND "
                + " INVOICE_DATE<='" + EITLERPGLOBAL.FinToDateDB + "' "
                + " ORDER BY INVOICE_NO";
        rsh = data.getResult(sql);

        sql = "SELECT D.*,D.GROSS_SQ_MTR*100 AS GSQ,D.GROSS_KG*100 AS GKG,D.GROSS_QTY*100 AS GQTY,D.NET_QTY*100 AS NQTY,"
                + "D.GROSS_AMOUNT*100 AS GAMT,D.NET_AMOUNT*100 AS NAMT,"
                + "H.BALE_NO AS BALE_NO,H.AGENT_SR_NO AS AGENT_SR_NO,H.AGENT_ALPHA AS AGENT_ALPHA,H.GATEPASS_NO AS GATEPASS_NO,"
                + "DATE_FORMAT(D.INVOICE_DATE,'%d%m%y') AS IDATE "
                + " FROM FILTERFABRIC.FF_TRD_INVOICE_DETAIL D,FILTERFABRIC.FF_TRD_INVOICE_HEADER H "
                + " WHERE H.INVOICE_DATE>='" + EITLERPGLOBAL.FinFromDateDB + "' AND H.INVOICE_DATE<='" + EITLERPGLOBAL.FinToDateDB + "' "
                + " AND D.INVOICE_DATE=H.INVOICE_DATE AND D.INVOICE_NO=H.INVOICE_NO "
                + " ORDER BY INVOICE_NO";
        rsd = data.getResult(sql);
        try {
            try {
                smy = new PrintWriter("/invh.txt", "UTF-8");
                inv = new PrintWriter("/invd.txt", "UTF-8");
                opdir = "/";
            } catch (Exception e) {
                try {
                    smy = new PrintWriter("d:/invh.txt", "UTF-8");
                    inv = new PrintWriter("d:/invd.txt", "UTF-8");
                    opdir = "d:/";
                } catch (Exception a) {
                    try {
                        smy = new PrintWriter("e:/invh.txt", "UTF-8");
                        inv = new PrintWriter("e:/invd.txt", "UTF-8");
                        opdir = "e:/";
                    } catch (Exception c) {
                        c.printStackTrace();
                    }
                }
            }

            rsh.first();
            while (!rsh.isAfterLast()) {
                smy.print("1");
                smy.print(String.valueOf(1000000 + rsh.getInt("INVOICE_NO")).substring(1));
                smy.print("000000000");
                smy.print("        ");
                smy.print(rsh.getString("IDATE"));
                smy.print(String.valueOf(10000 + rsh.getInt("AGENT_SR_NO")).substring(1));
                smy.print(rsh.getString("PARTY_CODE").trim());

                if (rsh.getString("STATION_CODE").trim().length() > 15) {
                    smy.print(rsh.getString("STATION_CODE").substring(0, 15));
                } else {
                    smy.print(rsh.getString("STATION_CODE").trim());
                    for (m = 1; m < 16 - rsh.getString("STATION_CODE").trim().length(); m++) {
                        smy.print(" ");
                    }
                }
                if (rsh.getString("DOCUMENT_THROUGH").trim().length() > 26) {
                    smy.print(rsh.getString("DOCUMENT_THROUGH").substring(0, 26));
                } else {
                    smy.print(rsh.getString("DOCUMENT_THROUGH").trim());
                    for (m = 1; m < 27 - rsh.getString("DOCUMENT_THROUGH").trim().length(); m++) {
                        smy.print(" ");
                    }
                }

                smy.print(rsh.getInt("BANK_CHARGES"));
                smy.print(rsh.getInt("TRANSPORT_MODE"));
                if (rsh.getString("AGENT_ALPHA").trim().length() > 2) {
                    smy.print(rsh.getString("AGENT_ALPHA").substring(0, 2));
                } else {
                    smy.print(rsh.getString("AGENT_ALPHA").trim());
                    for (m = 1; m < 3 - rsh.getString("AGENT_ALPHA").trim().length(); m++) {
                        smy.print(" ");
                    }
                }

                smy.print("   ");
                smy.print(EITLERPGLOBAL.FinFromDateDB.substring(2, 4));
                smy.print(EITLERPGLOBAL.FinToDateDB.substring(2, 4));
                smy.print(rsh.getString("WAREHOUSE_CODE").trim());
                smy.print(String.valueOf(1000000 + Integer.parseInt(rsh.getString("BALE_NO").trim().substring(3))).substring(1));
                smy.print(rsh.getString("PDATE"));
                smy.print("        ");
                smy.print("FFT");
                smy.print(String.valueOf(1000000 + rsh.getInt("GATEPASS_NO")).substring(1));
                smy.print(rsh.getString("GDATE"));
                smy.print("      ");
                smy.print("      ");
                smy.print("0000");
                smy.print("0000");
                smy.print("0000");
                smy.print("0000");
                smy.print("0000");
                smy.print("0000");
                smy.print("0000000");
                smy.print("0000000");
                smy.print("0000000");
                smy.print(String.valueOf(10000000 + rsh.getInt("INS")).substring(1));
                smy.print("0000000");
                smy.print("000000");
                smy.print("0000000");
                smy.print(String.valueOf(10000000 + ((rsh.getInt("V1") + rsh.getInt("V4") + rsh.getInt("C2") + rsh.getInt("C5")))).substring(1));
                smy.print("0000000");
                smy.print(String.valueOf(100000000 + (rsh.getInt("TSQMTR"))).substring(1));
                smy.print(String.valueOf(100000000 + (rsh.getInt("TKG"))).substring(1));
                smy.print(String.valueOf(1000000 + (rsh.getInt("TGQ"))).substring(1));
                smy.print("00");
                smy.print(String.valueOf(1000000 + (rsh.getInt("TNQ"))).substring(1));
                smy.print(String.valueOf(1000000000 + (rsh.getInt("TGA"))).substring(1));
                smy.print("00000000");
                smy.print("00000000");
                smy.print("00000000");
                smy.print(String.valueOf(1000000000 + (rsh.getInt("TNA"))).substring(1));
                smy.print(String.valueOf(100000000 + (rsh.getInt("EXCV"))).substring(1));
                smy.print("0000000");
                smy.print("0000000");
                smy.print("0000000");
                smy.print("0000000");
                smy.print("0000000");
                smy.print("0000000");
                smy.print(String.valueOf(1000000000 + (rsh.getInt("TVAL"))).substring(1));
                smy.print(String.valueOf(10000000 + (rsh.getInt("NAMT"))).substring(1));
                smy.print("I ");
                smy.print("0000000");
                smy.print("                          ");
                smy.print("000000000000000000000000000000000000000000");
                smy.print("                              ");
                smy.print(" ");
                smy.print(String.valueOf(100 + (rsh.getInt("BANK_CHARGES"))).substring(1));
                smy.print("       ");
                smy.print("00000");
                smy.print(rsh.getInt("BANK_CHARGES"));
                smy.print(rsh.getInt("TRANSPORT_MODE"));
                smy.print("         ");
                smy.print("0000000000000000000000000000");
                smy.print("                     ");
                smy.println();

                rsh.next();
            }
            smy.close();

            rsd.first();
            while (!rsd.isAfterLast()) {
                inv.print("1");
                inv.print(String.valueOf(1000000 + rsd.getInt("INVOICE_NO")).substring(1));
                if (rsd.getString("QUALITY_CD").trim().length() == 7) {
                    inv.print(String.valueOf(10000000 + rsd.getInt("QUALITY_CD")).substring(1));
                } else {
                    if (rsd.getString("QUALITY_CD").trim().length() == 6) {
                        inv.print(String.valueOf(10000000 + (rsd.getInt("QUALITY_CD") * 10)).substring(1));
                    } else {
                        inv.print(String.valueOf(rsd.getInt("QUALITY_CD")).substring(0, 7));
                    }
                }
                inv.print("00");
                if (rsd.getString("PIECE_NO").trim().length() > 8) {
                    inv.print(rsd.getString("PIECE_NO").substring(0, 8));
                } else {
                    inv.print(rsd.getString("PIECE_NO").trim());
                    for (m = 1; m < 9 - rsd.getString("PIECE_NO").trim().length(); m++) {
                        inv.print(" ");
                    }
                }
                //inv.print(rsd.getString("PIECE_NO").trim());
                inv.print(rsd.getString("PARTY_CODE"));
                inv.print(rsd.getInt("WAREHOUSE_CODE"));
                inv.print("00");
                inv.print(String.valueOf(100 + rsd.getInt("FLAG_DEF_CODE")).substring(1));
                inv.print(String.valueOf(1000000 + rsd.getInt("RATE")).substring(1));
                inv.print("0");
                inv.print("0");
                inv.print("   ");
                inv.print("0000");
                inv.print("0000");
                inv.print(String.valueOf(100000000 + rsd.getInt("GSQ")).substring(1));
                inv.print(String.valueOf(100000000 + rsd.getInt("GKG")).substring(1));
                inv.print(String.valueOf(1000000 + rsd.getInt("GQTY")).substring(1));
                inv.print(String.valueOf(1000000 + rsd.getInt("NQTY")).substring(1));
                inv.print(String.valueOf(1000000000 + rsd.getInt("GAMT")).substring(1));
                inv.print("00000000");
                inv.print("00000000");
                inv.print("00000000");
                inv.print(String.valueOf(1000000000 + rsd.getInt("NAMT")).substring(1));
                inv.print("0000000");
                inv.print("I");
                inv.print(String.valueOf(1000000 + Integer.parseInt(rsd.getString("BALE_NO").trim().substring(3))).substring(1));
                inv.print("FFT");
                inv.print(rsd.getString("IDATE"));
                inv.print(" ");
                inv.print("      ");
                inv.print("00000000");
                inv.print("00000000");
                inv.print(String.valueOf(10000 + rsd.getInt("AGENT_SR_NO")).substring(1));
                if (rsd.getString("AGENT_ALPHA").trim().length() > 2) {
                    inv.print(rsd.getString("AGENT_ALPHA").substring(0, 2));
                } else {
                    inv.print(rsd.getString("AGENT_ALPHA").trim());
                    for (m = 1; m < 3 - rsd.getString("AGENT_ALPHA").trim().length(); m++) {
                        inv.print(" ");
                    }
                }
                inv.print(String.valueOf(1000000 + rsd.getInt("GATEPASS_NO")).substring(1));
                inv.print("     ");
                inv.print("E");
                inv.println();
                rsd.next();
            }

            inv.close();
            FTP_FILE(opdir+"invh.txt");
            FTP_FILE(opdir+"invd.txt");
            JOptionPane.showMessageDialog(null, "File Generated & Uploaded...");

        } catch (Exception b) {
            b.printStackTrace();;
        }
    }
    private void FTP_FILE(String pfile){
        String server = "200.0.0.1";
        int port = 21;
        String user = "dinesh";
        String pass = "sdml123";
 
        FTPClient ftpClient = new FTPClient();
        try {
 
            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
 
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
 
            
            File firstLocalFile = new File(pfile);
 
            int st=0;
            char[] ch=pfile.toCharArray();
            
            for(int m=0;m<ch.length;m++){
                if(ch[m]=='/' || ch[m]=='\\')
                    st=m;
            }
            
            String RemoteFile = "/supcob/dinesh/sdmlerp/"+pfile.substring(st+1);
            InputStream inputStream = new FileInputStream(firstLocalFile);
 
            System.out.println("Start uploading first file");
            boolean done = ftpClient.storeFile(RemoteFile, inputStream);
            inputStream.close();
            if (done) {
                System.out.println("The file "+pfile+" is uploaded "+RemoteFile+ " successfully.");
            }
        }catch(Exception e){}
    }
}
