/*
 * frmUpdateData.java
 *
 * Created on June 8, 2004, 5:41 PM
 */

package EITLERP.Utils;

/**
 *
 * @author  root
 */
import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.sql.*;
import java.net.*;
import EITLERP.*;
import EITLERP.Purchase.*;
import EITLERP.Stores.*;
import java.io.*;

public class frmUpdateData extends javax.swing.JApplet {
    
    public String sdmlURL="jdbc:mysql://200.0.0.227:3306/DINESHMILLSA";
    public String FinanceURL="jdbc:mysql://200.0.0.227:3306/FINANCE";
    
    /** Initializes the applet frmUpdateData */
    public void init() {
        setSize(450,250);
        initComponents();
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        Bar = new javax.swing.JProgressBar();

        getContentPane().setLayout(null);

        jLabel1.setText("Update Migrated Data");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(8, 8, 147, 15);

        jButton1.setText("Start Updating");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(12, 50, 164, 25);

        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        lblStatus.setText("...");
        jPanel1.add(lblStatus);
        lblStatus.setBounds(6, 9, 371, 15);

        Bar.setStringPainted(true);
        jPanel1.add(Bar);
        Bar.setBounds(5, 72, 372, 20);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(7, 94, 386, 113);

    }//GEN-END:initComponents
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //updateHierarchyMIR();
        //updateHierarchyPR();
        //UpdateDatabase();
        //UpdateMIRDept();
        //UpdatePO();
        //UpdatePO2();
        //UpdateSuppCodes();
        //UpdatePOFromGRN();
        //updateHierarchy();
        //GeneratePendingReport();
        
        //UpdateMIRGRNForPOSrNo();
        //updateItemLocationsFromGRNIssue();
        //updateIndentMRSrNo();
        //updateApprovals();
        
        //updateRejectedQty();
        //ListMissingPONos();
        //MakeLinkMissingPONos();
        //updateMIRQty();
        
        //ListPOMultiItem();
        //updateMIRSrNo();
        //OpenGRN();
        //OpenMIR("A547845");
        
        //updateOpeningStock();
        //CopyPRHierarchies();
        //FindMismatch();
        //ArrangeForClosing();
        //updateGRNDateToMIR();
        //updateGRNDateFromBackup();
        //FindStockMismatch();
        //CompareClosingBalance();
        //OpenIssue();
        
        //UpdateMRSrNo();
        //OpenMIRList();
        //UpdateItemAvgRate();
        //copyamendment();
        //MigrateDF();
        //CorrectMIRHierarchy();
        //ForwardMIR();
        
        //FindMissingNos();
        //ValidateDocs();
        //updateBOE();
        //UpdateLocationMismatch();
        //UpdatePOIndentSrNo();
        //FindPendingPO();
        
        //updateStockLedger();
        
        //CopyIndentFromBackup();
        //UpdateSSIFlag();
        //CopyTransaction();
        
        //UpdateItemAmendment();
        //FindDiscrepencies();
        //UpdateAnkGRN();
        //OpenMIR("A751829");
        //OpenGRNEx("A751507");
        
        //UpdateFinancePartyMaster();
        
        //FindDuplicateItemCodes();
        FindDuplicateSuppCodes();
        //TempRemoveIt();
       // OpenGRNEx("R000237");
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar Bar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables
    
    
    private void UpdateMIRDept() {
        
        //(3) Update MIR
        new Thread() {
            public void run() {
                int MaxValue=0,CurrValue=0;
                Connection tmpConn;
                Statement stTmp,stDoc;
                ResultSet rsTmp,rsDoc;
                
                lblStatus.setText("Updating MIR");
                lblStatus.repaint();
                try {
                    tmpConn=data.getConn();
                    
                    //Get the Count
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_INV_MIR_DETAIL WHERE DEPT_ID=0 AND PO_NO<>''");
                    rsDoc.first();
                    
                    MaxValue=rsDoc.getInt("THECOUNT");
                    CurrValue=0;
                    
                    Bar.setMaximum(MaxValue);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    Bar.repaint();
                    
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COMPANY_ID,MIR_NO,MIR_TYPE,SR_NO,ITEM_ID,PO_NO FROM D_INV_MIR_DETAIL WHERE DEPT_ID=0 AND PO_NO<>''");
                    rsDoc.first();
                    
                    if(rsDoc.getRow()>0) {
                        while(!rsDoc.isAfterLast()) {
                            Bar.setValue(rsDoc.getRow());
                            Bar.repaint();
                            
                            String PONo=rsDoc.getString("PO_NO");
                            String MIRNo=rsDoc.getString("MIR_NO");
                            int SrNo=rsDoc.getInt("SR_NO");
                            int MIRType=rsDoc.getInt("MIR_TYPE");
                            int DeptID=0;
                            String ItemID=rsDoc.getString("ITEM_ID");
                            
                            stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                            rsTmp=stTmp.executeQuery("SELECT DEPT_ID FROM D_PUR_PO_DETAIL WHERE PO_NO='"+PONo+"'");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                DeptID=rsTmp.getInt("DEPT_ID");
                                
                                
                                stTmp=tmpConn.createStatement();
                                stTmp.executeUpdate("UPDATE D_INV_MIR_DETAIL SET DEPT_ID="+DeptID+" WHERE MIR_NO='"+MIRNo+"'");
                            }
                            rsDoc.next();
                        }
                        
                        Bar.setValue(0);
                        lblStatus.setText("Completed MIR");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
            };
        }.start();
        
        
    }
    
    private void UpdateDatabase() {
        //Starting from Indent - Update database upto MIR
        
        
        //(1) Update Indent
        /*new Thread() {
            public void run() {
                int MaxValue=0,CurrValue=0;
                Connection tmpConn;
                Statement stTmp,stDoc;
                ResultSet rsTmp,rsDoc;
                double IndentPOQty=0;
         
                lblStatus.setText("Updating Indent");
                lblStatus.repaint();
         
                try {
                    tmpConn=data.getConn();
         
                    //Get the Count
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.INDENT_NO=B.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.INDENT_DATE>='2006-04-01'");
         
                    rsDoc.first();
         
                    MaxValue=rsDoc.getInt("THECOUNT");
                    CurrValue=0;
         
                    Bar.setMaximum(MaxValue);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    Bar.repaint();
         
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT * FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.INDENT_NO=B.INDENT_NO AND A.APPROVED=1 AND A.CANCELED=0 AND A.INDENT_DATE>='2006-04-01'");
                    rsDoc.first();
         
                    if(rsDoc.getRow()>0) {
                        while(!rsDoc.isAfterLast()) {
                            Bar.setValue(rsDoc.getRow());
                            Bar.repaint();
                            lblStatus.setText("Updating Row "+rsDoc.getRow());
                            lblStatus.repaint();
         
                            String IndentNo=rsDoc.getString("INDENT_NO");
                            IndentPOQty=rsDoc.getDouble("PO_QTY");
                            
                            int SrNo=rsDoc.getInt("SR_NO");
                            String ItemID=rsDoc.getString("ITEM_CODE");
         
                            stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                            rsTmp=stTmp.executeQuery("SELECT SUM(QTY) AS THEQTY FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND INDENT_SR_NO="+SrNo+" AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1 AND CANCELLED=0)");
                            rsTmp.first();
         
         
                            if(rsTmp.getRow()>0) {
                                double POQty=rsTmp.getDouble("THEQTY");
         
                                if(IndentPOQty!=POQty)
                                {
                                  System.out.println("Indent PO Qty Mismatch : Indent No. : "+IndentNo+" Sr. "+SrNo+" Indent PO Qty: "+IndentPOQty+" Actual PO Qty: "+POQty);
                                }
                                
                                //stTmp=tmpConn.createStatement();
                                //stTmp.executeUpdate("UPDATE D_INV_INDENT_DETAIL SET PO_QTY="+POQty+",BAL_QTY=QTY-PO_QTY WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND SR_NO="+SrNo);
                            }
                            else {
                                //stTmp=tmpConn.createStatement();
                                //stTmp.executeUpdate("UPDATE D_INV_INDENT_DETAIL SET PO_QTY=0 WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND SR_NO="+SrNo);
                            }
                            rsDoc.next();
                        }
         
                        Bar.setValue(0);
                        lblStatus.setText("Completed Indent");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
            };
        }.start();*/
        
        
        //(1) Update Indent
        /*new Thread() {
            public void run() {
                int MaxValue=0,CurrValue=0;
                Connection tmpConn;
                Statement stTmp,stDoc;
                ResultSet rsTmp,rsDoc;
         
                lblStatus.setText("Updating Indent");
                lblStatus.repaint();
         
                try
                {
                tmpConn=data.getConn();
         
                //Get the Count
                stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                rsDoc=stDoc.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_INV_INDENT_DETAIL WHERE INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_HEADER WHERE INDENT_DATE>='2004-08-01')");
                rsDoc.first();
         
                MaxValue=rsDoc.getInt("THECOUNT");
                CurrValue=0;
         
                Bar.setMaximum(MaxValue);
                Bar.setMinimum(0);
                Bar.setValue(0);
                Bar.repaint();
         
                stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                rsDoc=stDoc.executeQuery("SELECT COMPANY_ID,INDENT_NO,SR_NO,ITEM_CODE FROM D_INV_INDENT_DETAIL WHERE INDENT_NO IN (SELECT INDENT_NO FROM D_INV_INDENT_HEADER WHERE INDENT_DATE>='2004-08-01')");
                rsDoc.first();
         
                if(rsDoc.getRow()>0)
                {
                  while(!rsDoc.isAfterLast())
                  {
                      Bar.setValue(rsDoc.getRow());
                      Bar.repaint();
                      lblStatus.setText("Updating Row "+rsDoc.getRow());
                      lblStatus.repaint();
         
                      String IndentNo=rsDoc.getString("INDENT_NO");
                      int SrNo=rsDoc.getInt("SR_NO");
                      String ItemID=rsDoc.getString("ITEM_CODE");
         
                      stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                      rsTmp=stTmp.executeQuery("SELECT SUM(QTY) AS THEQTY FROM D_PUR_PO_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND ITEM_ID='"+ItemID+"' AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1)");
                      rsTmp.first();
         
         
                      if(rsTmp.getRow()>0)
                      {
                         double POQty=rsTmp.getDouble("THEQTY");
         
                         stTmp=tmpConn.createStatement();
                         stTmp.executeUpdate("UPDATE D_INV_INDENT_DETAIL SET PO_QTY="+POQty+",BAL_QTY=QTY-PO_QTY WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND SR_NO="+SrNo);
                      }
                      else
                      {
                         //stTmp=tmpConn.createStatement();
                         //stTmp.executeUpdate("UPDATE D_INV_INDENT_DETAIL SET PO_QTY=0 WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND INDENT_NO='"+IndentNo+"' AND SR_NO="+SrNo);
                      }
                      rsDoc.next();
                  }
         
                  Bar.setValue(0);
                  lblStatus.setText("Completed Indent");
                }
            }
            catch(Exception e)
            {
               JOptionPane.showMessageDialog(null,e.getMessage());
            }
            };
        }.start();*/
        
        
        
        
        //(2) Update P.O.
        new Thread() {
            public void run() {
                int MaxValue=0,CurrValue=0;
                double PORecdQty=0;
                Connection tmpConn;
                Statement stTmp,stDoc;
                ResultSet rsTmp,rsDoc;
                
                lblStatus.setText("Updating P.O.");
                lblStatus.repaint();
                try {
                    tmpConn=data.getConn();
                    
                    //Get the Count
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_PUR_PO_DETAIL WHERE PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND PO_DATE>='2006-04-01') ");
                    rsDoc.first();
                    
                    MaxValue=rsDoc.getInt("THECOUNT");
                    CurrValue=0;
                    
                    Bar.setMaximum(MaxValue);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    Bar.repaint();
                    
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COMPANY_ID,PO_NO,PO_TYPE,SR_NO,ITEM_ID,RECD_QTY FROM D_PUR_PO_DETAIL WHERE PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND PO_DATE>='2006-04-01' AND (PO_TYPE=1 OR PO_TYPE=2 OR PO_TYPE=3 OR PO_TYPE=4 OR PO_TYPE=5 ))");
                    rsDoc.first();
                    
                    if(rsDoc.getRow()>0) {
                        while(!rsDoc.isAfterLast()) {
                            Bar.setValue(rsDoc.getRow());
                            Bar.repaint();
                            
                            String PONo=rsDoc.getString("PO_NO");
                            int SrNo=rsDoc.getInt("SR_NO");
                            int POType=rsDoc.getInt("PO_TYPE");
                            PORecdQty=rsDoc.getDouble("RECD_QTY");
                            String ItemID=rsDoc.getString("ITEM_ID");
                            
                            if(!PONo.trim().equals("")) {
                                stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                                rsTmp=stTmp.executeQuery("SELECT SUM(QTY) AS THEQTY FROM D_INV_MIR_DETAIL WHERE PO_NO='"+PONo+"' AND PO_SR_NO="+SrNo+" AND MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_HEADER WHERE CANCELLED=0 AND APPROVED=1)");
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    double RecdQty=rsTmp.getDouble("THEQTY");
                                    
                                    if(PORecdQty!=RecdQty)
                                    {
                                     System.out.println("Mismatch PO No. "+PONo+" Sr. "+SrNo+" PO Recd Qty"+PORecdQty+" Actual Recd Qty "+RecdQty);   
                                    }
                                    stTmp=tmpConn.createStatement();
                                    stTmp.executeUpdate("UPDATE D_PUR_PO_DETAIL SET RECD_QTY="+RecdQty+",PENDING_QTY=QTY-RECD_QTY WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+PONo+"' AND SR_NO="+SrNo+" AND PO_TYPE="+POType);
                                    stTmp.executeUpdate("UPDATE D_PUR_PO_HEADER SET CHANGED=1,CHANGED_DATE=CURDATE() WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+PONo+"' AND PO_TYPE="+POType);
                                }
                                else {
                                    //stTmp=tmpConn.createStatement();
                                    //stTmp.executeUpdate("UPDATE D_PUR_PO_DETAIL SET RECD_QTY=0,PENDING_QTY=QTY  WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND PO_NO='"+PONo+"' AND SR_NO="+SrNo+" AND PO_TYPE="+POType);
                                }
                            }
                            rsDoc.next();
                        }
                        
                        Bar.setValue(0);
                        lblStatus.setText("Completed P.O.");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
            };
        }.start();
        
        
        //(3) Update MIR
        /*new Thread() {
            public void run() {
                int MaxValue=0,CurrValue=0;
                Connection tmpConn;
                Statement stTmp,stDoc;
                ResultSet rsTmp,rsDoc;
         
                lblStatus.setText("Updating MIR");
                lblStatus.repaint();
                try {
                    tmpConn=data.getConn();
         
                    //Get the Count
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_INV_MIR_DETAIL");
                    rsDoc.first();
         
                    MaxValue=rsDoc.getInt("THECOUNT");
                    CurrValue=0;
         
                    Bar.setMaximum(MaxValue);
                    Bar.setMinimum(0);
                    Bar.setValue(0);
                    Bar.repaint();
         
                    stDoc=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsDoc=stDoc.executeQuery("SELECT COMPANY_ID,MIR_NO,MIR_TYPE,SR_NO,ITEM_ID FROM D_INV_MIR_DETAIL");
                    rsDoc.first();
         
                    if(rsDoc.getRow()>0) {
                        while(!rsDoc.isAfterLast()) {
                            Bar.setValue(rsDoc.getRow());
                            Bar.repaint();
         
                            String MIRNo=rsDoc.getString("MIR_NO");
                            int SrNo=rsDoc.getInt("SR_NO");
                            int MIRType=rsDoc.getInt("MIR_TYPE");
                            String ItemID=rsDoc.getString("ITEM_ID");
         
                            stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                            rsTmp=stTmp.executeQuery("SELECT SUM(QTY) AS THEQTY FROM D_INV_GRN_DETAIL WHERE MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"'");
                            rsTmp.first();
         
                            if(rsTmp.getRow()>0) {
                                double GRNQty=rsTmp.getDouble("THEQTY");
         
                                stTmp=tmpConn.createStatement();
                                stTmp.executeUpdate("UPDATE D_INV_MIR_DETAIL SET GRN_RECD_QTY="+GRNQty+",BAL_QTY=QTY-GRN_RECD_QTY WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+SrNo+" AND MIR_TYPE="+MIRType);
                            }
                            else {
                                stTmp=tmpConn.createStatement();
                                stTmp.executeUpdate("UPDATE D_INV_MIR_DETAIL SET GRN_RECD_QTY=0,BAL_QTY=QTY WHERE COMPANY_ID="+EITLERPGLOBAL.gCompanyID+" AND MIR_NO='"+MIRNo+"' AND SR_NO="+SrNo+" AND MIR_TYPE="+MIRType);
                            }
         
         
                            rsDoc.next();
                        }
         
                        Bar.setValue(0);
                        lblStatus.setText("Completed MIR");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
            };
        }.start();*/
        
    }
    
    //Special Case not necessary everytime
    private void UpdatePO() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_PUR_PO_DETAIL WHERE INDENT_SR_NO>0");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT INDENT_NO,ITEM_ID,PO_NO,PO_TYPE,SR_NO FROM D_PUR_PO_DETAIL WHERE INDENT_SR_NO>0");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        stPO=tmpConn.createStatement();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            String IndentNo=rsTmp.getString("INDENT_NO");
                            String ItemID=rsTmp.getString("ITEM_ID");
                            String PONo=rsTmp.getString("PO_NO");
                            int POType=rsTmp.getInt("PO_TYPE");
                            int POSrNo=rsTmp.getInt("SR_NO");
                            
                            rsIndent=data.getResult("SELECT SR_NO FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND ITEM_CODE='"+ItemID+"'");
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                int SrNo=rsIndent.getInt("SR_NO");
                                
                                data.Execute("UPDATE D_PUR_PO_DETAIL SET INDENT_SR_NO="+SrNo+" WHERE PO_NO='"+PONo+"' AND PO_TYPE="+POType+" AND SR_NO="+POSrNo);
                            }
                            else {
                                data.Execute("UPDATE D_PUR_PO_DETAIL SET INDENT_SR_NO=0 WHERE PO_NO='"+PONo+"' AND PO_TYPE="+POType+" AND SR_NO="+POSrNo);
                            }
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
        
        
        
        /*new Thread(){
            public void run() {
         
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
         
                try {
         
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
         
                    tmpConn=data.getConn();
         
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_PUR_PO_HEADER WHERE PO_TYPE=1 AND PO_DATE<'2004-08-01'");
                    rsTmp.first();
         
                    MaxValue=rsTmp.getInt("THECOUNT");
         
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_PUR_PO_HEADER WHERE PO_TYPE=1 AND PO_DATE<'2004-08-01'");
                    rsTmp.first();
         
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
         
                        stPO=tmpConn.createStatement();
         
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
         
                            String PONo=rsTmp.getString("PO_NO");
         
                            //Payment Term
                            rsIndent=data.getResult("SELECT * FROM D_PUR_PO_TERMS WHERE PO_NO='"+PONo+"'");
                            rsIndent.first();
         
                            if(rsIndent.getRow()>0) {
         
                                while(!rsIndent.isAfterLast())
                                {
                                    int SrNo=rsIndent.getInt("SR_NO");
         
                                    if(SrNo==1)
                                    {
                                     rsTmp.updateString("PAYMENT_TERM",rsIndent.getString("TERM_DESC").trim());
                                    }
         
                                    if(SrNo==2)
                                    {
                                     rsTmp.updateString("DESPATCH_TERM",rsIndent.getString("TERM_DESC").trim());
                                    }
         
         
                                    if(SrNo==3)
                                    {
                                     rsTmp.updateString("DESPATCH_TERM",rsTmp.getString("DESPATCH_TERM")+" "+rsIndent.getString("TERM_DESC").trim());
                                    }
         
                                    if(SrNo==4)
                                    {
                                     rsTmp.updateString("PRICE_BASIS_TERM",rsIndent.getString("TERM_DESC").trim());
                                    }
         
                                    if(SrNo==5)
                                    {
                                     rsTmp.updateString("PF_TERM",rsIndent.getString("TERM_DESC").trim());
                                    }
         
                                    if(SrNo==6)
                                    {
                                     rsTmp.updateString("PF_TERM",rsTmp.getString("PF_TERM")+" "+rsIndent.getString("TERM_DESC").trim());
                                    }
         
                                    if(SrNo==7)
                                    {
                                     rsTmp.updateString("OCTROI_TERM",rsIndent.getString("TERM_DESC").trim());
                                    }
         
         
                                    rsIndent.next();
                                }
         
                                rsTmp.updateRow();
         
         
                            }
         
         
                            rsTmp.next();
                        }
         
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
         
                }
         
            }
        }.start();*/
        
    }
    
    
    private void UpdateSuppCodes() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_COM_SUPP_MASTER");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT SUPP_ID FROM D_COM_SUPP_MASTER");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        stPO=tmpConn.createStatement();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            long SuppID=rsTmp.getLong("SUPP_ID");
                            
                            
                            rsIndent=data.getResult("SELECT TERM_CODE  FROM D_COM_SUPP_TERMS WHERE SUPP_ID="+SuppID+" AND TERM_TYPE='P' ");
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                data.Execute("UPDATE D_COM_SUPP_MASTER SET PAYMENT_TERM_CODE="+rsIndent.getInt("TERM_CODE")+" WHERE SUPP_ID="+SuppID);
                            }
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
            }
            
        }.start();
        
    }
    
    
    private void UpdatePO2() {
        
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    stPO=tmpConn.createStatement();
                    
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT PO_NO,SR_NO,QTY,RECD_QTY FROM D_PUR_PO_DETAIL WHERE PO_NO='B063582' ");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        while(!rsTmp.isAfterLast()) {
                            
                            String PONo=rsTmp.getString("PO_NO");
                            int POSrNo=rsTmp.getInt("SR_NO");
                            
                            lblStatus.setText(PONo);
                            
                            rsIndent=data.getResult("SELECT SUM(QTY) AS SUMQTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.CANCELLED=0 AND A.APPROVED=1 AND B.PO_NO='"+PONo+"' AND B.PO_SR_NO="+POSrNo);
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                stPO.executeUpdate("UPDATE D_PUR_PO_DETAIL SET RECD_QTY="+rsIndent.getDouble("SUMQTY")+",PENDING_QTY=QTY-RECD_QTY WHERE PO_NO='"+PONo+"' AND SR_NO="+POSrNo);
                                
                                if(rsIndent.getDouble("SUMQTY")!=rsTmp.getDouble("RECD_QTY")) {
                                    System.out.println("Dicrepency Updated : PO No. :"+PONo+" Sr. "+POSrNo+". Recd Qty :"+rsTmp.getDouble("RECD_QTY")+" Actual Receipt "+rsIndent.getDouble("SUMQTY"));
                                }
                            }
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
        
        
    }
    
    
    
    
    private void UpdateMIRGRNForPOSrNo() {
        
        new Thread(){
            
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_INV_MIR_DETAIL WHERE PO_NO<>'' AND PO_SR_NO=0");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_MIR_DETAIL WHERE PO_NO<>'' AND PO_SR_NO=0");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        stPO=tmpConn.createStatement();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            String ItemID=rsTmp.getString("ITEM_ID");
                            String PONo=rsTmp.getString("PO_NO");
                            int POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, PONo);
                            
                            
                            rsIndent=stPO.executeQuery("SELECT SR_NO FROM D_PUR_PO_DETAIL WHERE PO_NO='"+PONo+"' AND ITEM_ID='"+ItemID+"'");
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                data.Execute("UPDATE D_INV_MIR_DETAIL SET PO_SR_NO="+rsIndent.getInt("SR_NO")+",PO_TYPE="+POType+" WHERE MIR_NO='"+rsTmp.getString("MIR_NO")+"' AND SR_NO="+rsTmp.getInt("SR_NO"));
                            }
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
        
        
        
        /*new Thread(){
            public void run() {
         
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
         
                try {
         
                    lblStatus.setText("Starting...GRN");
                    lblStatus.repaint();
         
                    tmpConn=data.getConn();
         
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_INV_GRN_DETAIL WHERE PO_NO<>'' AND PO_SR_NO=0 AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1)");
                    rsTmp.first();
         
                    MaxValue=rsTmp.getInt("THECOUNT");
         
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_GRN_DETAIL WHERE PO_NO<>'' AND PO_SR_NO=0 AND PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1)");
                    rsTmp.first();
         
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
         
                        stPO=tmpConn.createStatement();
         
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
         
         
                            String ItemID=rsTmp.getString("ITEM_ID");
                            String PONo=rsTmp.getString("PO_NO");
                            int POType=clsPOGen.getPOType(EITLERPGLOBAL.gCompanyID, PONo);
         
         
                            rsIndent=stPO.executeQuery("SELECT SR_NO FROM D_PUR_PO_DETAIL WHERE PO_NO='"+PONo+"' AND ITEM_ID='"+ItemID+"'");
                            rsIndent.first();
         
         
                            if(rsIndent.getRow()>0) {
                                data.Execute("UPDATE D_INV_GRN_DETAIL SET PO_SR_NO="+rsIndent.getInt("SR_NO")+",PO_TYPE="+POType+" WHERE GRN_NO='"+rsTmp.getString("GRN_NO")+"' AND SR_NO="+rsTmp.getInt("SR_NO"));
                            }
         
                            rsTmp.next();
                        }
         
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
         
                }
         
            }
         
        }.start();*/
        
        
        
    }
    
    
    private void GeneratePendingReport() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn,srcConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent,rsPO;
                int MaxValue=0,curValue=0;
                String strSQL="";
                
                try {
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("/root/ItemPendingReport22032005.txt")));
                    aFile.write("Item wise pending status as on 22 March 2005");
                    aFile.newLine();
                    
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    srcConn=data.getConn(sdmlURL);
                    
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_ITEM_MASTER");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        
                        rsTmp.first();
                        
                        aFile.newLine();
                        aFile.write(" PENDING INDENTS ");
                        aFile.newLine();
                        aFile.write(" =============== ");
                        aFile.newLine();
                        aFile.write("INDENT NO. DATE       DESCRIPTION  QTY  PO QTY  BAL. QTY");
                        aFile.newLine();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setMaximum(MaxValue);
                            Bar.setMinimum(0);
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            //Finding Pending Indents
                            String ItemID=rsTmp.getString("ITEM_ID");
                            
                            
                            double TotalIndent=clsIndent.getTotalPendingIndentQty(EITLERPGLOBAL.gCompanyID, ItemID);
                            
                            
                            if(TotalIndent>0) {
                                aFile.newLine();
                                aFile.write(" ITEM CODE : "+ItemID);
                                aFile.newLine();
                            }
                            
                            
                            strSQL="SELECT A.INDENT_NO,A.INDENT_DATE,B.ITEM_EXTRA_DESC,B.QTY,B.PO_QTY FROM D_INV_INDENT_HEADER A,D_INV_INDENT_DETAIL B  WHERE A.COMPANY_ID=B.COMPANY_ID AND A.INDENT_NO=B.INDENT_NO  AND A.COMPANY_ID=2 AND B.PO_QTY<QTY  AND B.ITEM_CODE='"+ItemID+"' AND A.APPROVED=1";
                            rsPO=data.getResult(strSQL);
                            rsPO.first();
                            
                            if(rsPO.getRow()>0) {
                                
                                while(!rsPO.isAfterLast()) {
                                    
                                    aFile.write(rsPO.getString("INDENT_NO")+" "+EITLERPGLOBAL.formatDate(rsPO.getString("INDENT_DATE"))+" "+rsPO.getString("ITEM_EXTRA_DESC")+" "+rsPO.getDouble("QTY")+" "+rsPO.getDouble("PO_QTY")+" "+(rsPO.getDouble("QTY")-rsPO.getDouble("PO_QTY")));
                                    aFile.newLine();
                                    rsPO.next();
                                }
                                
                                aFile.newLine();
                                aFile.write(" Total "+TotalIndent);
                                aFile.newLine();
                            }
                            
                            
                            
                            
                            
                            
                            rsTmp.next();
                        }
                        
                        
                        
                        
                        aFile.newLine();
                        aFile.write(" PENDING INSPECTION ");
                        aFile.newLine();
                        aFile.write(" =============== ");
                        aFile.newLine();
                        aFile.write("MIR NO. DATE       DESCRIPTION  QTY  GRN QTY  BAL. QTY");
                        aFile.newLine();
                        
                        
                        
                        
                        rsTmp.first();
                        while(!rsTmp.isAfterLast()) {
                            Bar.setMaximum(MaxValue);
                            Bar.setMinimum(0);
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            //Finding Pending Indents
                            String ItemID=rsTmp.getString("ITEM_ID");
                            
                            
                            double TotalInspection=clsMIRRaw.getTotalPendingGRNQty(EITLERPGLOBAL.gCompanyID,ItemID);
                            double TotalPO=clsPOGen.getTotalPendingQty(EITLERPGLOBAL.gCompanyID,ItemID);
                            
                            
                            if(TotalInspection>0) {
                                aFile.newLine();
                                aFile.write(" ITEM CODE : "+ItemID);
                                aFile.newLine();
                            }
                            
                            
                            
                            strSQL="SELECT A.MIR_NO,A.MIR_DATE,B.ITEM_EXTRA_DESC,B.PO_NO,B.PO_QTY,B.QTY,B.GRN_RECD_QTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.COMPANY_ID=B.COMPANY_ID AND A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.COMPANY_ID=2 AND B.GRN_RECD_QTY<QTY AND B.ITEM_ID='"+ItemID+"' AND A.APPROVED=1";
                            rsPO=data.getResult(strSQL);
                            rsPO.first();
                            
                            if(rsPO.getRow()>0) {
                                
                                while(!rsPO.isAfterLast()) {
                                    aFile.write(rsPO.getString("MIR_NO")+" "+EITLERPGLOBAL.formatDate(rsPO.getString("MIR_DATE"))+" "+rsPO.getString("ITEM_EXTRA_DESC")+" "+rsPO.getDouble("QTY")+" "+rsPO.getDouble("GRN_RECD_QTY")+" "+(rsPO.getDouble("QTY")-rsPO.getDouble("GRN_RECD_QTY")));
                                    aFile.newLine();
                                    rsPO.next();
                                }
                                
                                aFile.newLine();
                                aFile.write(" Total "+TotalInspection);
                                aFile.newLine();
                            }
                            
                            
                            
                            rsTmp.next();
                        }
                        
                        aFile.newLine();
                        aFile.write(" PENDING PO ");
                        aFile.newLine();
                        aFile.write(" =============== ");
                        aFile.newLine();
                        aFile.write("PO NO. DATE       DESCRIPTION  QTY  RECD QTY  BAL. QTY");
                        aFile.newLine();
                        
                        
                        rsTmp.first();
                        while(!rsTmp.isAfterLast()) {
                            Bar.setMaximum(MaxValue);
                            Bar.setMinimum(0);
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            //Finding Pending Indents
                            String ItemID=rsTmp.getString("ITEM_ID");
                            
                            double TotalPO=clsPOGen.getTotalPendingQty(EITLERPGLOBAL.gCompanyID,ItemID);
                            
                            
                            if(TotalPO>0) {
                                aFile.newLine();
                                aFile.write(" ITEM CODE : "+ItemID);
                                aFile.newLine();
                            }
                            
                            strSQL="SELECT A.PO_NO,A.PO_DATE,B.ITEM_DESC,B.INDENT_NO,B.QTY,B.RECD_QTY FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B  WHERE A.COMPANY_ID=B.COMPANY_ID AND A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.COMPANY_ID=2 AND B.RECD_QTY<QTY AND A.APPROVED=1 AND B.ITEM_ID='"+ItemID+"' AND A.APPROVED=1";
                            rsPO=data.getResult(strSQL);
                            rsPO.first();
                            
                            if(rsPO.getRow()>0) {
                                
                                while(!rsPO.isAfterLast()) {
                                    aFile.write(rsPO.getString("PO_NO")+" "+EITLERPGLOBAL.formatDate(rsPO.getString("PO_DATE"))+" "+rsPO.getString("ITEM_DESC")+" "+rsPO.getDouble("QTY")+" "+rsPO.getDouble("RECD_QTY")+" "+(rsPO.getDouble("QTY")-rsPO.getDouble("RECD_QTY")));
                                    aFile.newLine();
                                    rsPO.next();
                                }
                                
                                aFile.newLine();
                                aFile.write(" Total "+TotalPO);
                                aFile.newLine();
                            }
                            
                            
                            
                            rsTmp.next();
                        }
                        
                        
                        
                        
                        
                        
                        aFile.close();
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
        
        
    }
    
    
    
    private void UpdatePOFromGRN() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn,srcConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                
                try {
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("/root/log21032005.txt")));
                    aFile.write("Conflicts found in the migration");
                    aFile.newLine();
                    aFile.write("Updating PO status from new GRN Data");
                    aFile.newLine();
                    
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    srcConn=data.getConn(sdmlURL);
                    
                    stTmp=srcConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT COUNT(*) AS THECOUNT FROM GRN_DETAIL");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=srcConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT * FROM GRN_DETAIL");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        stPO=tmpConn.createStatement();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            String ItemID=rsTmp.getString("ITEM_CD");
                            String PONo=rsTmp.getString("PO_NO");
                            double Qty=rsTmp.getDouble("GI_QTY");
                            
                            
                            rsIndent=data.getResult("SELECT * FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'");
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                if(rsIndent.getBoolean("APPROVED")) {
                                    stPO.executeUpdate("UPDATE D_PUR_PO_DETAIL SET RECD_QTY="+Qty+",PENDING_QTY=QTY-RECD_QTY WHERE PO_NO='"+PONo+"' AND ITEM_ID='"+ItemID+"'");
                                }
                                else {
                                    aFile.newLine();
                                    aFile.write("GRN No. :"+rsTmp.getString("REF_NO")+" ITEM CD "+ItemID+" PO NO "+PONo+". PO Not Approved. Not updating this PO");
                                }
                                
                            }
                            
                            data.Execute("UPDATE D_INV_MIR_DETAIL SET GRN_RECD_QTY="+Qty+" WHERE MIR_NO='"+rsTmp.getString("IN_NO")+"' AND ITEM_ID='"+ItemID+"'");
                            
                            
                            rsTmp.next();
                        }
                        
                        aFile.close();
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
        
        
    }
    
    
                        /*BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("GRN"+GRNNo+".pjv")));
                        aFile.write(clsSupplier.getSupplierName(EITLERPGLOBAL.gCompanyID,(String)getAttribute("SUPP_ID").getObj()));
                        aFile.newLine();
                        aFile.write((String)getAttribute("INVOICE_NO").getObj());
                        aFile.newLine();
                        aFile.write(EITLERPGLOBAL.formatDate((String)getAttribute("INVOICE_DATE").getObj()));
                        aFile.newLine();
                        aFile.write((String)getAttribute("SUPP_ID").getObj());
                        aFile.newLine();
                        aFile.write(PONo);
                        aFile.newLine();
                        aFile.close();*/
    
    
    
    private void updateHierarchyPR() {
        try {
            
            ResultSet rsTmp,rsPR,rsNo;
            
            
            rsPR=data.getResult("SELECT REQ_NO FROM D_INV_REQ_HEADER WHERE APPROVED=0");
            rsPR.first();
            
            if(rsPR.getRow()>0) {
                
                while(!rsPR.isAfterLast()) {
                    String ReqNo=rsPR.getString("REQ_NO");
                    
                    rsTmp=data.getResult("SELECT * FROM D_COM_DOC_DATA WHERE MODULE_ID=2 AND DOC_NO='"+ReqNo+"' AND USER_ID=15");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        
                    }
                    else {
                        rsNo=data.getResult("SELECT MAX(SR_NO) AS MAXNO FROM D_COM_DOC_DATA WHERE MODULE_ID=2 AND DOC_NO='"+ReqNo+"'");
                        rsNo.first();
                        
                        if(rsNo.getRow()>0) {
                            int NewSrNo=rsNo.getInt("MAXNO")+1;
                            String strSQL="INSERT INTO D_COM_DOC_DATA (COMPANY_ID,MODULE_ID,DOC_NO,USER_ID,STATUS,TYPE,SR_NO) VALUES(2,2,'"+ReqNo+"',15,'P','A',"+NewSrNo+")";
                            
                            data.Execute(strSQL);
                            
                        }
                    }
                    rsPR.next();
                }
            }
            
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
            
        }
    }
    
    
    
    private void updateHierarchyMIR() {
        try {
            
            ResultSet rsTmp,rsPR,rsNo;
            
            String strSQL="SELECT * FROM D_COM_DOC_DATA WHERE  MODULE_ID=5  AND DOC_NO IN (SELECT MIR_NO FROM D_INV_MIR_HEADER WHERE APPROVED=0) AND SR_NO>2 AND STATUS='W'";
            rsPR=data.getResult(strSQL);
            rsPR.first();
            
            if(rsPR.getRow()>0) {
                
                while(!rsPR.isAfterLast()) {
                    
                    String DocNo=rsPR.getString("DOC_NO");
                    int ModuleID=rsPR.getInt("MODULE_ID");
                    int SrNo=rsPR.getInt("SR_NO");
                    
                    lblStatus.setText("Updating MIR "+DocNo);
                    lblStatus.repaint();
                    
                    //Update d com doc data
                    strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE DOC_NO='"+DocNo+"' AND MODULE_ID="+ModuleID+" AND USER_ID=15";
                    data.Execute(strSQL);
                    
                    
                    rsPR.next();
                }
            }
            
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
            
        }
    }
    
    
    
    private void updateHierarchy() {
        try {
            
            ResultSet rsTmp,rsPR,rsNo;
            
            String strSQL="SELECT * FROM D_COM_DOC_DATA WHERE  MODULE_ID=7  AND USER_ID=73 AND STATUS='W' ";
            rsPR=data.getResult(strSQL);
            rsPR.first();
            
            if(rsPR.getRow()>0) {
                
                while(!rsPR.isAfterLast()) {
                    
                    String DocNo=rsPR.getString("DOC_NO");
                    int ModuleID=rsPR.getInt("MODULE_ID");
                    int SrNo=rsPR.getInt("SR_NO");
                    
                    lblStatus.setText("Updating MIR "+DocNo);
                    lblStatus.repaint();
                    
                    //Update d com doc data
                    strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE DOC_NO='"+DocNo+"' AND MODULE_ID=7 AND USER_ID=90";
                    data.Execute(strSQL);
                    
                    
                    rsPR.next();
                }
            }
            
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
            
        }
    }
    
    
    
    private void updateItemLocationsFromGRNIssue() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT ITEM_ID,LOCATION_ID FROM D_INV_ITEM_MASTER");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            
                            String ItemID=rsTmp.getString("ITEM_ID");
                            String LocationID=rsTmp.getString("LOCATION_ID");
                            
                            
                            data.Execute("UPDATE D_INV_GRN_DETAIL SET LOCATION_ID='"+LocationID+"' WHERE LOCATION_ID IS NOT NULL AND LOCATION_ID<>'' AND ITEM_ID='"+ItemID+"'");
                            data.Execute("UPDATE D_INV_ISSUE_DETAIL SET LOCATION_ID='"+LocationID+"' WHERE LOCATION_ID IS NOT NULL AND LOCATION_ID<>'' AND ITEM_CODE='"+ItemID+"'");
                            
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
        
        
        
        
        
    }
    
    
    
    private void updateIndentMRSrNo() {
        try {
            
            ResultSet rsTmp,rsPR,rsNo;
            
            String strSQL="SELECT * FROM D_INV_INDENT_DETAIL WHERE MR_NO<>'' AND MR_SR_NO=0 ";
            rsPR=data.getResult(strSQL);
            rsPR.first();
            
            if(rsPR.getRow()>0) {
                while(!rsPR.isAfterLast()) {
                    
                    String DocNo=rsPR.getString("MR_NO");
                    String ItemID=rsPR.getString("ITEM_CODE");
                    String IndentNo=rsPR.getString("INDENT_NO");
                    int IndentSrNo=rsPR.getInt("SR_NO");
                    
                    rsTmp=data.getResult("SELECT SR_NO FROM D_INV_REQ_DETAIL WHERE REQ_NO='"+DocNo+"' AND ITEM_CODE='"+ItemID+"'");
                    
                    try {
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            int SrNo=rsTmp.getInt("SR_NO");
                            
                            data.Execute("UPDATE D_INV_INDENT_DETAIL SET MR_SR_NO="+SrNo+" WHERE INDENT_NO='"+IndentNo+"' AND SR_NO="+IndentSrNo);
                            
                        }
                    }
                    catch(Exception e) {
                        
                    }
                    
                    
                    
                    rsPR.next();
                }
            }
            
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
            
        }
    }
    
    
    private void updateApprovals() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER_TMP");
                    rsTmp.first();
                    
                    MaxValue=rsTmp.getInt("THECOUNT");
                    
                    stTmp=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_ITEM_MASTER_TMP");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        Bar.setMaximum(MaxValue);
                        Bar.setMinimum(0);
                        Bar.setValue(0);
                        Bar.repaint();
                        
                        stPO=tmpConn.createStatement();
                        
                        while(!rsTmp.isAfterLast()) {
                            Bar.setValue(rsTmp.getRow());
                            Bar.repaint();
                            
                            String ItemID=rsTmp.getString("ITEM_ID");
                            String SpecialApproval=rsTmp.getString("SPECIAL_APPROVAL");
                            
                            data.Execute("UPDATE D_INV_ITEM_MASTER SET SPECIAL_APPROVAL='"+SpecialApproval+"' WHERE ITEM_ID='"+ItemID+"'");
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
    }
    
    
    
    private void updateRejectedQty() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT *  FROM MIR_TEMP");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String MIRNo=rsTmp.getString("MIR_NO");
                        String GRNNo=rsTmp.getString("GRN_NO");
                        String ItemID=rsTmp.getString("ITEM_CODE");
                        
                        lblStatus.setText(MIRNo);
                        lblStatus.repaint();
                        
                        //Update the Rejected Qty in MIR.
                        data.Execute("UPDATE D_INV_MIR_DETAIL SET RECEIVED_QTY="+rsTmp.getDouble("RC_QTY")+",REJECTED_QTY="+rsTmp.getDouble("RJ_QTY")+",QTY=RECEIVED_QTY-REJECTED_QTY,REJECTED_REASON_ID="+rsTmp.getDouble("RJCODE")+",LANDED_RATE="+rsTmp.getDouble("FRATE")+" WHERE MIR_NO='"+MIRNo+"' AND ITEM_ID='"+ItemID+"'");
                        
                        //Update the Rejected Qty in GRN
                        data.Execute("UPDATE D_INV_GRN_DETAIL SET RECEIVED_QTY="+rsTmp.getDouble("RC_QTY")+",REJECTED_QTY="+rsTmp.getDouble("RJ_QTY")+",QTY=RECEIVED_QTY-REJECTED_QTY,REJECTED_REASON_ID="+rsTmp.getDouble("RJCODE")+",LANDED_RATE="+rsTmp.getDouble("FRATE")+" WHERE GRN_NO='"+GRNNo+"' AND ITEM_ID='"+ItemID+"'");
                        
                        
                        rsTmp.next();
                    }
                    
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
    }
    
    
    private void ListMissingPONos() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                
                try {
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("MissingPOMIR.txt")));
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT *  FROM D_INV_MIR_DETAIL WHERE PO_NO<>'' AND MIR_NO IN (SELECT MIR_NO FROM D_INV_MIR_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND MIR_DATE>='2004-04-01') ");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String PONo=rsTmp.getString("PO_NO");
                        
                        lblStatus.setText(PONo);
                        lblStatus.repaint();
                        
                        rsIndent=data.getResult("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()<=0) {
                            
                            aFile.write("PONo :"+PONo+" MIR "+rsTmp.getString("MIR_NO")+" Item "+rsTmp.getString("ITEM_ID"));
                            aFile.newLine();
                            
                        }
                        
                        
                        rsTmp.next();
                    }
                    
                    aFile.close();
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
    }
    
    
    
    private void MakeLinkMissingPONos() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                
                try {
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("MissingPO.txt")));
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT *  FROM D_INV_GRN_DETAIL WHERE PO_NO<>'' AND GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND GRN_DATE>='2004-04-01') AND PO_NO LIKE 'B59%'");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String PONo=rsTmp.getString("PO_NO");
                        String GRNNo=rsTmp.getString("GRN_NO");
                        String ItemID=rsTmp.getString("ITEM_ID");
                        
                        
                        lblStatus.setText(PONo);
                        lblStatus.repaint();
                        
                        rsIndent=data.getResult("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='"+PONo+"'");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()<=0) {
                            
                            aFile.write("PONo :"+PONo+" MIR "+rsTmp.getString("MIR_NO")+" New PO"+PONo.substring(0,1)+"0"+PONo.substring(1));
                            aFile.newLine();
                            
                            String NewPO=PONo.substring(0,1)+"0"+PONo.substring(1);
                            
                            rsIndent=data.getResult("SELECT PO_NO FROM D_PUR_PO_HEADER WHERE PO_NO='"+NewPO+"'");
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                data.Execute("UPDATE D_INV_GRN_DETAIL SET PO_NO='"+NewPO+"' WHERE GRN_NO='"+GRNNo+"' AND ITEM_ID='"+ItemID+"'");
                            }
                        }
                        
                        rsTmp.next();
                    }
                    
                    aFile.close();
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    private void updateMIRQty() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT *  FROM D_INV_GRN_DETAIL WHERE GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND GRN_DATE>='2004-04-01')");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String PONo=rsTmp.getString("PO_NO");
                        
                        lblStatus.setText(rsTmp.getString("GRN_NO"));
                        lblStatus.repaint();
                        
                        data.Execute("UPDATE D_INV_GRN_DETAIL SET QTY=RECEIVED_QTY-REJECTED_QTY+EXCESS_QTY WHERE GRN_NO='"+rsTmp.getString("GRN_NO")+"' AND SR_NO="+rsTmp.getInt("SR_NO"));
                        
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
                
            }
            
        }.start();
    }
    
    
    
    private void ListPOMultiItem() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                
                try {
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("POStaggered.txt")));
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT PO_NO,ITEM_ID FROM D_PUR_PO_DETAIL WHERE PO_NO IN (SELECT PO_NO FROM D_PUR_PO_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND PO_DATE>='2005-01-01')");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String PONo=rsTmp.getString("PO_NO");
                        String ItemID=rsTmp.getString("ITEM_ID");
                        
                        
                        lblStatus.setText(PONo);
                        lblStatus.repaint();
                        
                        rsIndent=data.getResult("SELECT COUNT(*) AS THECOUNT FROM D_PUR_PO_DETAIL WHERE PO_NO='"+PONo+"' AND ITEM_ID='"+ItemID+"'");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            
                            if(rsIndent.getInt("THECOUNT")>1) {
                                aFile.write(",'"+PONo+"'");
                                
                            }
                        }
                        
                        rsTmp.next();
                    }
                    
                    aFile.close();
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    
    private void updateMIRSrNo() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                
                try {
                    
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    
                    rsTmp=data.getResult("SELECT GRN_NO,ITEM_ID,PO_NO,SR_NO FROM D_INV_GRN_DETAIL WHERE GRN_NO IN (SELECT GRN_NO FROM D_INV_GRN_HEADER WHERE APPROVED=1 AND CANCELLED=0 AND GRN_DATE>='2004-04-01') AND PO_NO<>'' AND PO_SR_NO=0");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String GRNNo=rsTmp.getString("GRN_NO");
                        String ItemID=rsTmp.getString("ITEM_ID");
                        String PONo=rsTmp.getString("PO_NO");
                        
                        lblStatus.setText(PONo);
                        lblStatus.repaint();
                        
                        rsIndent=data.getResult("SELECT SR_NO FROM D_PUR_PO_DETAIL WHERE PO_NO='"+PONo+"' AND ITEM_ID='"+ItemID+"'");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            data.Execute("UPDATE D_INV_GRN_DETAIL SET PO_SR_NO="+rsIndent.getInt("SR_NO")+" WHERE GRN_NO='"+GRNNo+"' AND SR_NO="+rsTmp.getInt("SR_NO"));
                        }
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    private void OpenGRN() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp;
                    
                    String GRNNo="";
                    String MIRNo="";
                    int MIRSrNo=0;
                    String strSQL="";
                    
                    String theFile="OpenGRN1.txt";
                    BufferedReader aFile=new BufferedReader(new FileReader(new File(theFile)));
                    
                    boolean Done=false;
                    while(!Done) {
                        String lineread=aFile.readLine();
                        
                        if(lineread==null) {
                            Done=true;
                        }
                        
                        else {
                            GRNNo=lineread;
                            
                            rsTmp=data.getResult("SELECT * FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"'");
                            rsTmp.first();
                            
                            while(!rsTmp.isAfterLast()) {
                                MIRNo=rsTmp.getString("MIR_NO");
                                MIRSrNo=rsTmp.getInt("MIR_SR_NO");
                                
                                if(!MIRNo.trim().equals("")) {
                                    OpenMIR(MIRNo);
                                }
                                
                                //Reverse the Stock Effect
                                double Qty=rsTmp.getDouble("QTY");
                                String ItemID=rsTmp.getString("ITEM_ID");
                                String WarehouseID=rsTmp.getString("WAREHOUSE_ID");
                                String LocationID=rsTmp.getString("LOCATION_ID");
                                String BOENo=rsTmp.getString("BOE_NO");
                                String LOTNo="X";
                                
                                //Open MIR
                                if((!MIRNo.trim().equals(""))&&MIRSrNo>0) {
                                    strSQL="UPDATE D_INV_MIR_DETAIL SET GRN_RECD_QTY=GRN_RECD_QTY-"+Qty+" WHERE MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo;
                                    data.Execute(strSQL);
                                }
                                
                                strSQL="UPDATE D_INV_ITEM_LOT_MASTER SET ON_HAND_QTY=ON_HAND_QTY-"+Qty+",TOTAL_RECEIPT_QTY=TOTAL_RECEIPT_QTY-"+Qty+",AVAILABLE_QTY=ON_HAND_QTY-ALLOCATED_QTY WHERE ITEM_ID='"+ItemID+"' AND WAREHOUSE_ID='"+WarehouseID+"' AND LOCATION_ID='"+LocationID+"' AND BOE_NO='"+BOENo+"' AND LOT_NO='"+LOTNo+"'";
                                data.Execute(strSQL);
                                
                                rsTmp.next();
                            }
                            
                            //Open in Document Approval Hierarchy
                            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='P' WHERE MODULE_ID=7 AND DOC_NO='"+GRNNo+"'";
                            data.Execute(strSQL);
                            
                            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE MODULE_ID=7 AND DOC_NO='"+GRNNo+"' AND USER_ID=15";
                            data.Execute(strSQL);
                            
                            strSQL="UPDATE D_INV_GRN_HEADER SET APPROVED=0 WHERE GRN_NO='"+GRNNo+"'";
                            data.Execute(strSQL);
                        }
                    }
                    aFile.close();
                    
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
                JOptionPane.showMessageDialog(null,"Done ...");
            };
        }.start();
        
    }
    
    
    
    private void OpenGRNEx(String pGRNNo) {
        try {
            ResultSet rsTmp;
            
            String GRNNo="";
            String MIRNo="";
            int MIRSrNo=0;
            String strSQL="";
            
            String lineread=pGRNNo;
            GRNNo=lineread;
            
            rsTmp=data.getResult("SELECT * FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"'",sdmlURL);
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                MIRNo=rsTmp.getString("MIR_NO");
                MIRSrNo=rsTmp.getInt("MIR_SR_NO");
                
                if(!MIRNo.trim().equals("")) {
                    OpenMIR(MIRNo);
                }
                
                //Reverse the Stock Effect
                /*double Qty=rsTmp.getDouble("QTY");
                String ItemID=rsTmp.getString("ITEM_ID");
                String WarehouseID=rsTmp.getString("WAREHOUSE_ID");
                String LocationID=rsTmp.getString("LOCATION_ID");
                String BOENo=rsTmp.getString("BOE_NO");
                String LOTNo="X";
                
                //Open MIR
                if((!MIRNo.trim().equals(""))&&MIRSrNo>0) {
                    strSQL="UPDATE D_INV_MIR_DETAIL SET GRN_RECD_QTY=GRN_RECD_QTY-"+Qty+" WHERE MIR_NO='"+MIRNo+"' AND SR_NO="+MIRSrNo;
                    data.Execute(strSQL,sdmlURL);
                }*/
                
                //strSQL="UPDATE D_INV_ITEM_LOT_MASTER SET ON_HAND_QTY=ON_HAND_QTY-"+Qty+",TOTAL_RECEIPT_QTY=TOTAL_RECEIPT_QTY-"+Qty+",AVAILABLE_QTY=ON_HAND_QTY-ALLOCATED_QTY WHERE ITEM_ID='"+ItemID+"' AND WAREHOUSE_ID='"+WarehouseID+"' AND LOCATION_ID='"+LocationID+"' AND BOE_NO='"+BOENo+"' AND LOT_NO='"+LOTNo+"'";
                //data.Execute(strSQL,sdmlURL);
                
                rsTmp.next();
            }
            
            //Open in Document Approval Hierarchy
            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='P' WHERE MODULE_ID=8 AND DOC_NO='"+GRNNo+"'";
            data.Execute(strSQL,sdmlURL);
            
            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE MODULE_ID=8 AND DOC_NO='"+GRNNo+"' AND USER_ID=131";
            data.Execute(strSQL,sdmlURL);
            
            strSQL="UPDATE D_INV_GRN_HEADER SET APPROVED=0 WHERE GRN_NO='"+GRNNo+"'";
            data.Execute(strSQL,sdmlURL);
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
        
        
    }
    
    
    private void OpenMIR(String pMIRNo) {
        try {
            
            ResultSet rsTmp;
            String MIRNo="";
            int MIRSrNo=0;
            String strSQL="";
            
            rsTmp=data.getResult("SELECT * FROM D_INV_MIR_DETAIL WHERE MIR_NO='"+pMIRNo+"'",sdmlURL);
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                String PONo=rsTmp.getString("PO_NO");
                int POSrNo=rsTmp.getInt("PO_SR_NO");
                double Qty=rsTmp.getDouble("QTY");
                
                if((!PONo.trim().equals(""))&&POSrNo>0) {
                    strSQL="UPDATE D_PUR_PO_DETAIL SET RECD_QTY=RECD_QTY-"+Qty+" WHERE PO_NO='"+PONo+"' AND SR_NO="+POSrNo;
                    data.Execute(strSQL,sdmlURL);
                }
                
                rsTmp.next();
            }
            
            
            //Open in Document Approval Hierarchy
            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='P' WHERE MODULE_ID=6 AND DOC_NO='"+pMIRNo+"'";
            data.Execute(strSQL,sdmlURL);
            
            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE MODULE_ID=6 AND DOC_NO='"+pMIRNo+"' AND USER_ID=131";
            data.Execute(strSQL,sdmlURL);
            
            strSQL="UPDATE D_INV_MIR_HEADER SET APPROVED=0 WHERE MIR_NO='"+pMIRNo+"'";
            data.Execute(strSQL,sdmlURL);
            
            lblStatus.setText("Done..");
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
        
    }
    
    
    private void updateOpeningStock() {
        new Thread(){
            public void run() {
                String EntryDate="2005-04-01";
                long EntryNo=0;
                
                Connection tmpConn;
                Statement stTmp,stPO,stOpeningHeader,stOpeningDetail;
                ResultSet rsTmp,rsIndent,rsOpeningHeader,rsOpeningDetail;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    stOpeningHeader=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsOpeningHeader=stOpeningHeader.executeQuery("SELECT * FROM D_COM_OPENING_STOCK_HEADER");
                    
                    stOpeningDetail=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsOpeningDetail=stOpeningDetail.executeQuery("SELECT * FROM D_COM_OPENING_STOCK_DETAIL");
                    
                    EntryNo=data.getMaxID(2, "D_COM_OPENING_STOCK_HEADER", "ENTRY_NO");
                    
                    rsTmp=data.getResult("SELECT * FROM D_INV_ITEM_MASTER_TMP");
                    rsTmp.first();
                    
                    
                    rsOpeningHeader.moveToInsertRow();
                    rsOpeningHeader.updateInt("COMPANY_ID",3);
                    rsOpeningHeader.updateLong("ENTRY_NO",EntryNo);
                    rsOpeningHeader.updateString("ENTRY_DATE",EntryDate);
                    rsOpeningHeader.updateString("STATUS","C");
                    rsOpeningHeader.updateString("REMARKS","Opening Stock as on 1 Apr. 2005");
                    rsOpeningHeader.insertRow();
                    
                    int SrNo=0;
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String ItemID=rsTmp.getString("ITEM_ID");
                        String WarehouseID=clsItem.getItemWareHouseID(2, ItemID);
                        String LocationID=clsItem.getItemLocationID(2,ItemID);
                        String LotNo="X";
                        String BOENo="X";
                        
                        lblStatus.setText(ItemID);
                        lblStatus.repaint();
                        
                        
                        //                        double OpeningQty=rsTmp.getDouble("OPENING_QTY");
                        //                        double OpeningValue=rsTmp.getDouble("OPENING_VALUE");
                        //                        double ZeroValQty=rsTmp.getDouble("ZERO_VAL_QTY");
                        
                        
                        double OpeningQty=(rsTmp.getDouble("OP_QTY_MM")+rsTmp.getDouble("GI_QTY_MM"))-rsTmp.getDouble("IS_QTY_MM");
                        double OpeningValue=(rsTmp.getDouble("OP_VAL_MM")+rsTmp.getDouble("GI_VAL_MM"))-rsTmp.getDouble("IS_VAL_MM");
                        double ZeroValQty=(rsTmp.getDouble("OP_Z_QTY")+rsTmp.getDouble("GI_Z_QTY"))-rsTmp.getDouble("IS_Z_QTY");;
                        
                        double OpeningRate=0;
                        
                        
                        if(OpeningQty==0||OpeningValue==0) {
                            OpeningRate=0;
                        }
                        else {
                            OpeningRate=OpeningValue/OpeningQty;
                        }
                        
                        SrNo++;
                        
                        rsOpeningDetail.moveToInsertRow();
                        rsOpeningDetail.updateInt("COMPANY_ID",3);
                        rsOpeningDetail.updateLong("ENTRY_NO",EntryNo);
                        rsOpeningDetail.updateString("ENTRY_DATE",EntryDate);
                        rsOpeningDetail.updateInt("SR_NO",SrNo);
                        rsOpeningDetail.updateString("ITEM_ID",ItemID);
                        rsOpeningDetail.updateString("WAREHOUSE_ID",WarehouseID);
                        rsOpeningDetail.updateString("LOCATION_ID",LocationID);
                        rsOpeningDetail.updateString("BOE_NO",BOENo);
                        rsOpeningDetail.updateString("LOT_NO",LotNo);
                        rsOpeningDetail.updateDouble("OPENING_QTY",OpeningQty);
                        rsOpeningDetail.updateDouble("OPENING_RATE",OpeningRate);
                        rsOpeningDetail.updateDouble("OPENING_VALUE",OpeningValue);
                        rsOpeningDetail.updateDouble("ZERO_VAL_OPENING_QTY",ZeroValQty);
                        rsOpeningDetail.insertRow();
                        
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    private void CopyPRHierarchies() {
        
        new Thread() {
            public void run() {
                ResultSet rsPR;
                
                try {
                    rsPR=data.getResult("SELECT HIERARCHY_ID FROM D_COM_HIERARCHY WHERE MODULE_ID=2");
                    rsPR.first();
                    
                    if(rsPR.getRow()>0) {
                        while(!rsPR.isAfterLast()) {
                            
                            
                            int HierarchyID=rsPR.getInt("HIERARCHY_ID");
                            long NewHierarchyID=data.getMaxID(EITLERPGLOBAL.gCompanyID, "D_COM_HIERARCHY", "HIERARCHY_ID");
                            
                            clsHierarchy objPRHierarchy=(clsHierarchy)(new clsHierarchy()).getObjectEx(EITLERPGLOBAL.gCompanyID, HierarchyID);
                            
                            clsHierarchy objGPRHierarchy=new clsHierarchy();
                            objGPRHierarchy.LoadData();
                            objGPRHierarchy.colRights.clear();
                            
                            
                            objGPRHierarchy.setAttribute("COMPANY_ID",(int)objPRHierarchy.getAttribute("COMPANY_ID").getVal());
                            objGPRHierarchy.setAttribute("MODULE_ID",52);
                            objGPRHierarchy.setAttribute("IS_DEFAULT",objPRHierarchy.getAttribute("IS_DEFAULT").getBool() );
                            objGPRHierarchy.setAttribute("HIERARCHY_ID",NewHierarchyID);
                            objGPRHierarchy.setAttribute("HIERARCHY_NAME",(String)objPRHierarchy.getAttribute("HIERARCHY_NAME").getObj());
                            
                            lblStatus.setText((String)objPRHierarchy.getAttribute("HIERARCHY_NAME").getObj());
                            
                            for(int i=1;i<=objPRHierarchy.colRights.size();i++) {
                                clsHierarchyUsers objItem=(clsHierarchyUsers)objPRHierarchy.colRights.get(Integer.toString(i));
                                clsHierarchyUsers objNew=new clsHierarchyUsers();
                                objNew.colFieldAccess=new HashMap();
                                
                                objNew.setAttribute("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                                objNew.setAttribute("HIERARHY_ID",NewHierarchyID);
                                objNew.setAttribute("USER_ID",(int)objItem.getAttribute("USER_ID").getVal());
                                objNew.setAttribute("SR_NO",i);
                                objNew.setAttribute("APPROVER",objItem.getAttribute("APPROVER").getBool());
                                objNew.setAttribute("FINAL_APPROVER",objItem.getAttribute("FINAL_APPROVER").getBool() );
                                objNew.setAttribute("CREATOR",objItem.getAttribute("CREATOR").getBool());
                                objNew.setAttribute("APPROVAL_SEQUENCE",(int)objItem.getAttribute("APPROVAL_SEQUENCE").getVal());
                                objNew.setAttribute("SKIP_SEQUENCE",objItem.getAttribute("SKIP_SEQUENCE").getBool());
                                objNew.setAttribute("GRANT_OTHER",objItem.getAttribute("GRANT_OTHER").getBool());
                                objNew.setAttribute("FROM_DATE",(String)objItem.getAttribute("FROM_DATE").getObj());
                                objNew.setAttribute("TO_DATE",(String)objItem.getAttribute("TO_DATE").getObj());
                                objNew.setAttribute("GRANT_USER_ID",(int)objItem.getAttribute("GRANT_USER_ID").getVal());
                                objNew.setAttribute("RESTORE",objItem.getAttribute("RESTORE").getBool());
                                
                                
                                if(objPRHierarchy.colRights.size()==1) {
                                    
                                    objNew.setAttribute("FINAL_APPROVER",true);
                                    objGPRHierarchy.colRights.put(Integer.toString(objGPRHierarchy.colRights.size()+1),objNew);
                                    
                                }
                                else {
                                    if((i==(objPRHierarchy.colRights.size()-1))) {
                                        objNew.setAttribute("FINAL_APPROVER",true);
                                    }
                                    
                                    if((i==(objPRHierarchy.colRights.size()))) {
                                        
                                    }
                                    else {
                                        objGPRHierarchy.colRights.put(Integer.toString(objGPRHierarchy.colRights.size()+1),objNew);
                                    }
                                }
                            }
                            
                            //Now inserting
                            if(objGPRHierarchy.Insert()) {
                                
                            }
                            else {
                                JOptionPane.showMessageDialog(null,objGPRHierarchy.LastError);
                            }
                            
                            rsPR.next();
                        }
                        
                        
                        JOptionPane.showMessageDialog(null,"Done ...");
                    }
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
        
    }
    
    
    private void FindMismatch() {
        new Thread() {
            
            public void run() {
                ResultSet rsSource;
                ResultSet rsDest;
                ResultSet rsItem;
                ResultSet rsTemp;
                
                try {
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("/root/Desktop/Mismatch.txt")));
                    
                    rsItem=data.getResult("SELECT * FROM STOCK_LEDGER_SOURCE WHERE DOC_NO<>''");
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        while(!rsItem.isAfterLast()) {
                            String ItemID=rsItem.getString("ITEM_ID");
                            String DocNo=rsItem.getString("DOC_NO");
                            lblStatus.setText(DocNo);
                            
                            String DocType="No Transaction ";
                            String DocStatus="";
                            
                            double srcQty=0;
                            double srcValue=0;
                            double destQty=0;
                            double destValue=0;
                            
                            if(rsItem.getDouble("ISSUE_QTY")>0) {
                                DocType="Issue";
                                
                                DocStatus="";
                                rsTemp=data.getResult("SELECT APPROVED FROM D_INV_ISSUE_HEADER WHERE ISSUE_NO='"+DocNo+"'");
                                rsTemp.first();
                                
                                if(rsTemp.getRow()>0) {
                                    if(rsTemp.getBoolean("APPROVED")) {
                                        DocStatus="";
                                    }
                                    else {
                                        DocStatus="Doc Not Approved";
                                    }
                                }
                                else {
                                    DocStatus="Doc Not Created";
                                }
                                
                                srcQty=rsItem.getDouble("ISSUE_QTY");
                                srcValue=rsItem.getDouble("ISSUE_VALUE");
                                
                                rsTemp=data.getResult("SELECT ITEM_CODE FROM D_INV_ISSUE_DETAIL WHERE ISSUE_NO='"+DocNo+"' AND ITEM_CODE='"+ItemID+"'");
                                rsTemp.first();
                                if(rsTemp.getRow()<=0) {
                                    DocStatus+=" Wrong Item in ISSUE ";
                                }
                                
                                rsTemp=data.getResult("SELECT SUM(QTY) QTY,SUM(ISSUE_VALUE) ISSUE_VALUE FROM D_INV_ISSUE_DETAIL WHERE ISSUE_NO='"+DocNo+"' AND ITEM_CODE='"+ItemID+"'");
                                rsTemp.first();
                                if(rsTemp.getRow()>0) {
                                    destQty=rsTemp.getDouble("QTY");
                                    destValue=rsTemp.getDouble("ISSUE_VALUE");
                                }
                                
                                if(destQty!=srcQty) {
                                    DocStatus+=" FoxPro Qty: "+srcQty+" System Qty: "+destQty+" FoxPro Value: "+srcValue+" System Value: "+destValue;
                                }
                                
                            }
                            
                            
                            if(rsItem.getDouble("RECEIPT_QTY")>0) {
                                DocType="Receipt";
                                
                                DocStatus="";
                                rsTemp=data.getResult("SELECT APPROVED FROM D_INV_GRN_HEADER WHERE GRN_NO='"+DocNo+"'");
                                rsTemp.first();
                                
                                if(rsTemp.getRow()>0) {
                                    if(rsTemp.getBoolean("APPROVED")) {
                                        DocStatus="";
                                    }
                                    else {
                                        DocStatus="Doc Not Approved";
                                    }
                                }
                                else {
                                    DocStatus="Doc Not Created";
                                }
                                
                                srcQty=rsItem.getDouble("RECEIPT_QTY");
                                srcValue=rsItem.getDouble("RECEIPT_VALUE");
                                
                                
                                rsTemp=data.getResult("SELECT ITEM_ID FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+DocNo+"' AND ITEM_ID='"+ItemID+"'");
                                rsTemp.first();
                                if(rsTemp.getRow()<=0) {
                                    DocStatus+=" Wrong Item in GRN ";
                                }
                                
                                rsTemp=data.getResult("SELECT SUM(QTY) QTY,SUM(QTY*LANDED_RATE) RECEIPT_VALUE FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+DocNo+"' AND ITEM_ID='"+ItemID+"'");
                                rsTemp.first();
                                if(rsTemp.getRow()>0) {
                                    destQty=rsTemp.getDouble("QTY");
                                    destValue=rsTemp.getDouble("RECEIPT_VALUE");
                                }
                                
                                
                                double ValueDiff=Math.abs(destValue-srcValue);
                                double diffPer=0;
                                
                                ValueDiff=0;
                                
                                if(ValueDiff==0) {
                                    diffPer=0;
                                }
                                else {
                                    if(srcValue>0) {
                                        diffPer=(ValueDiff*srcValue)/srcValue;
                                    }
                                    else {
                                        diffPer=0;
                                    }
                                }
                                
                                if(diffPer>5) {
                                    DocStatus+=" FoxPro Qty: "+srcQty+" System Qty: "+destQty+" FoxPro Value: "+srcValue+" System Value: "+destValue;
                                }
                                
                            }
                            
                            
                    /*rsDest=data.getResult("SELECT * FROM STOCK_LEDGER_ACTUAL WHERE DOC_NO='"+DocNo+"' AND ITEM_ID='"+ItemID+"'");
                    rsDest.first();
                     
                    if(rsDest.getRow()>0) {
                     
                    }
                    else {
                        if(!DocStatus.equals("")) {
                            aFile.write(DocType+"  Item  "+ItemID+" Doc No "+DocNo+"  "+DocStatus);
                            aFile.newLine();
                        }
                    }*/
                            
                            if(!DocStatus.equals("")) {
                                aFile.write(DocType+"  Item  "+ItemID+" Doc No "+DocNo+"  "+DocStatus);
                                aFile.newLine();
                            }
                            
                            
                            
                            rsItem.next();
                        }
                        
                        aFile.close();
                        
                    }
                    
                    
                }
                catch(Exception e) {
                    
                }
                
                lblStatus.setText("Done");
            };
        }.start();
    }
    
    
    
    
    private void FindStockMismatch() {
        
        
        new Thread() {
            
            public void run() {
                ResultSet rsSource;
                ResultSet rsDest;
                ResultSet rsItem;
                ResultSet rsTemp;
                
                try {
                    
                    double srcClosingStock=0;
                    double srcClosingValue=0;
                    double ClosingStock=0;
                    double ClosingValue=0;
                    double DiffStock=0;
                    double DiffValue=0;
                    
                    int Max=0;
                    
                    
                    //BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("StockMatch0605.txt")));
                    BufferedWriter aFile2=new BufferedWriter(new FileWriter(new File("StockDifference0506.txt")));
                    
                    
                    //aFile.write("Item ID  Stock   Value      EITLERP Stock   Value     Diff Stock   Value");
                    //aFile.newLine();
                    
                    aFile2.write("Item ID  Stock   Value      EITLERP Stock   Value     Diff Stock   Value");
                    aFile2.newLine();
                    
                    
                    Bar.setVisible(true);
                    
                    rsItem=data.getResult("SELECT COUNT(ITEM_ID) AS THECOUNT FROM CLOSING_STOCK_TMP");
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        Bar.setMaximum(rsItem.getInt("THECOUNT"));
                        Bar.setMinimum(0);
                    }
                    
                    
                    rsItem=data.getResult("SELECT ITEM_ID FROM CLOSING_STOCK_TMP");
                    rsItem.first();
                    
                    if(rsItem.getRow()>0) {
                        
                        while(!rsItem.isAfterLast()) {
                            Bar.setValue(rsItem.getRow());
                            Bar.repaint();
                            
                            String ItemID=rsItem.getString("ITEM_ID");
                            
                            lblStatus.setText("Comparing Item "+ItemID);
                            lblStatus.repaint();
                            
                            srcClosingStock=0;
                            srcClosingValue=0;
                            ClosingStock=0;
                            ClosingValue=0;
                            
                            rsSource=data.getResult("SELECT * FROM CLOSING_STOCK_TMP WHERE ITEM_ID='"+ItemID+"'");
                            rsSource.first();
                            
                            if(rsSource.getRow()>0) {
                                srcClosingStock=EITLERPGLOBAL.round(rsSource.getDouble("CLOSING_STOCK"),2);
                                srcClosingValue=EITLERPGLOBAL.round(rsSource.getDouble("CLOSING_VALUE"),2);
                            }
                            
                            rsDest=data.getResult("SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE ITEM_ID='"+ItemID+"' AND ENTRY_NO=2");
                            rsDest.first();
                            
                            if(rsDest.getRow()>0) {
                                ClosingStock=EITLERPGLOBAL.round(rsDest.getDouble("OPENING_QTY"),2);
                                ClosingValue=EITLERPGLOBAL.round(rsDest.getDouble("OPENING_VALUE"),2);
                            }
                            
                            DiffStock=srcClosingStock-ClosingStock;
                            DiffValue=srcClosingValue-ClosingValue;
                            
                            if(DiffStock!=0) {
                                aFile2.write(ItemID+","+srcClosingStock+","+srcClosingValue+","+ClosingStock+","+ClosingValue+","+DiffStock+","+DiffValue);
                                aFile2.newLine();
                            }
                            
                            //aFile.write(ItemID+","+srcClosingStock+","+srcClosingValue+","+ClosingStock+","+ClosingValue+","+DiffStock+","+DiffValue);
                            //aFile.newLine();
                            
                            
                            
                            rsItem.next();
                        }
                        
                        //aFile.close();
                        aFile2.close();
                        
                    }
                    
                    JOptionPane.showMessageDialog(null,"Done ...");
                    
                }
                catch(Exception e) {
                    
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
            };
        }.start();
    }
    
    
    
    private void OpenIssue() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp;
                    
                    String IssueNo="";
                    String strSQL="";
                    
                    String theFile="OpenIssue.txt";
                    BufferedReader aFile=new BufferedReader(new FileReader(new File(theFile)));
                    
                    boolean Done=false;
                    while(!Done) {
                        String lineread=aFile.readLine();
                        
                        if(lineread==null) {
                            Done=true;
                        }
                        
                        else {
                            IssueNo=lineread;
                            
                            
                            rsTmp=data.getResult("SELECT * FROM D_INV_ISSUE_DETAIL WHERE ISSUE_NO='"+IssueNo+"'");
                            rsTmp.first();
                            
                            while(!rsTmp.isAfterLast()) {
                                
                                lblStatus.setText("Item "+rsTmp.getString("ITEM_CODE"));
                                lblStatus.repaint();
                                
                                //Reverse the Stock Effect
                                double Qty=rsTmp.getDouble("QTY");
                                String ItemID=rsTmp.getString("ITEM_CODE");
                                String WarehouseID=rsTmp.getString("WAREHOUSE_ID");
                                String LocationID=rsTmp.getString("LOCATION_ID");
                                String BOENo=rsTmp.getString("BOE_NO");
                                String LOTNo="X";
                                
                                
                                strSQL="UPDATE D_INV_ITEM_LOT_MASTER SET ON_HAND_QTY=ON_HAND_QTY+"+Qty+",TOTAL_RECEIPT_QTY=TOTAL_RECEIPT_QTY+"+Qty+",AVAILABLE_QTY=ON_HAND_QTY-ALLOCATED_QTY WHERE ITEM_ID='"+ItemID+"' AND WAREHOUSE_ID='"+WarehouseID+"' AND LOCATION_ID='"+LocationID+"' AND BOE_NO='"+BOENo+"' AND LOT_NO='"+LOTNo+"'";
                                data.Execute(strSQL);
                                
                                rsTmp.next();
                            }
                            
                            //Open in Document Approval Hierarchy
                            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='P' WHERE MODULE_ID=14 AND DOC_NO='"+IssueNo+"'";
                            data.Execute(strSQL);
                            
                            strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE MODULE_ID=14 AND DOC_NO='"+IssueNo+"' AND USER_ID=15";
                            data.Execute(strSQL);
                            
                            strSQL="UPDATE D_INV_ISSUE_HEADER SET APPROVED=0 WHERE ISSUE_NO='"+IssueNo+"'";
                            data.Execute(strSQL);
                        }
                    }
                    aFile.close();
                    
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
                JOptionPane.showMessageDialog(null,"Done ...");
            };
        }.start();
        
    }
    
    
    
    
    private void UpdateMRSrNo() {
        
        ResultSet rsSource;
        ResultSet rsDest;
        ResultSet rsItem;
        ResultSet rsTemp;
        
        try {
            
            rsItem=data.getResult("SELECT * FROM D_INV_INDENT_DETAIL WHERE MR_NO<>'' AND MR_SR_NO=0 ");
            rsItem.first();
            
            if(rsItem.getRow()>0) {
                while(!rsItem.isAfterLast()) {
                    
                    String ReqNo=rsItem.getString("MR_NO");
                    String ItemID=rsItem.getString("ITEM_CODE");
                    String IndentNo=rsItem.getString("INDENT_NO");
                    int IndentSrNo=rsItem.getInt("SR_NO");
                    
                    
                    rsDest=data.getResult("SELECT SR_NO FROM D_INV_REQ_DETAIL WHERE REQ_NO='"+ReqNo+"' AND ITEM_CODE='"+ItemID+"'");
                    rsDest.first();
                    
                    if(rsDest.getRow()>0) {
                        int ReqSrNo=rsDest.getInt("SR_NO");
                        
                        data.Execute("UPDATE D_INV_INDENT_DETAIL SET MR_SR_NO="+ReqSrNo+" WHERE INDENT_NO='"+IndentNo+"' AND SR_NO="+IndentSrNo);
                    }
                    
                    
                    rsItem.next();
                }
                
                
            }
            
            JOptionPane.showMessageDialog(null,"Done ...");
            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.getMessage());
        }
        
    }
    
    
    private void UpdateItemAvgRate() {
        new Thread() {
            
            public void run() {
                try {
                    Connection tmpConn=data.getConn();
                    Statement stTmp=tmpConn.createStatement();
                    
                    ResultSet rsTmp=stTmp.executeQuery("SELECT ITEM_ID FROM D_INV_ITEM_MASTER WHERE UNIT_RATE=0");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        while(!rsTmp.isAfterLast()) {
                            String ItemID=rsTmp.getString("ITEM_ID");
                            
                            lblStatus.setText(ItemID);
                            lblStatus.repaint();
                            
                            //Find AVG Rate in Item AVG RAte
                            Statement stRate=tmpConn.createStatement();
                            ResultSet rsRate=stRate.executeQuery("SELECT AVG_RATE FROM ITEM_AVG_RATE WHERE ITEM_ID='"+ItemID+"'");
                            rsRate.first();
                            
                            if(rsRate.getRow()>0) {
                                double AvgRate=rsRate.getDouble("AVG_RATE");
                                
                                //Update Unit Rate
                                Statement stExe=tmpConn.createStatement();
                                stExe.executeUpdate("UPDATE D_INV_ITEM_MASTER SET UNIT_RATE="+AvgRate+" WHERE ITEM_ID='"+ItemID+"'");
                            }
                            
                            rsTmp.next();
                        }
                    }
                    
                }
                catch(Exception e) {
                    
                }
                
                lblStatus.setText("Done ... ");
            };
        }.start();
    }
    
    
    private void OpenMIRList() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp;
                    
                    String GRNNo="";
                    String MIRNo="";
                    int MIRSrNo=0;
                    String strSQL="";
                    
                    String theFile="OpenMIR1.txt";
                    BufferedReader aFile=new BufferedReader(new FileReader(new File(theFile)));
                    
                    boolean Done=false;
                    while(!Done) {
                        String lineread=aFile.readLine();
                        
                        if(lineread==null) {
                            Done=true;
                        }
                        
                        else {
                            MIRNo=lineread;
                            
                            rsTmp=data.getResult("SELECT DISTINCT(A.GRN_NO) FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.APPROVED=1 AND A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND B.MIR_NO='"+MIRNo+"'");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                //GRN Created and final approved.
                                OpenGRNEx(rsTmp.getString("GRN_NO"));
                            }
                            else {
                                OpenMIR(MIRNo);
                            }
                        }
                    }
                    aFile.close();
                    
                    JOptionPane.showMessageDialog(null,"Done Processing");
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
                
            };
        }.start();
        
    }
    
    
    private void  copyamendment() {
        try {
            Connection tmpConn=data.getConn();
            Statement stSource=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
            Statement stDest=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
            
            ResultSet rsDest=stDest.executeQuery("SELECT * FROM D_PUR_AMEND_DETAIL LIMIT 1");
            rsDest.first();
            
            
            ResultSet rsSource=stSource.executeQuery("SELECT * FROM D_PUR_AMEND_DETAIL_H WHERE REVISION_NO=1 AND AMEND_NO='B050352/1'");
            rsSource.first();
            
            while(!rsSource.isAfterLast()) {
                rsDest.moveToInsertRow();
                CopyRecord(rsSource,rsDest);
                rsDest.insertRow();
                
                
                rsSource.next();
            }
            
        }
        catch(Exception e) {
            
        }
        JOptionPane.showMessageDialog(null,"Done");
    }
    
    
    public boolean CopyRecord(ResultSet rsSource,ResultSet rsDest) {
        try {
            ResultSetMetaData rsInfo=rsDest.getMetaData();
            if(rsSource.getRow()>0) {
                for(int i=1;i<=rsInfo.getColumnCount();i++) {
                    switch(rsInfo.getColumnType(i)) {
                        case -5: //Long
                            rsDest.updateLong(rsInfo.getColumnName(i), rsSource.getLong(rsInfo.getColumnName(i)));
                            break;
                        case 4: //Integer,Small int
                            rsDest.updateInt(rsInfo.getColumnName(i), rsSource.getInt(rsInfo.getColumnName(i)));
                            break;
                        case 5: //Integer,Small int
                            rsDest.updateInt(rsInfo.getColumnName(i), rsSource.getInt(rsInfo.getColumnName(i)));
                            break;
                        case -6: //Integer,Small int
                            rsDest.updateInt(rsInfo.getColumnName(i), rsSource.getInt(rsInfo.getColumnName(i)));
                            break;
                        case 16: //Boolean
                            rsDest.updateBoolean(rsInfo.getColumnName(i), rsSource.getBoolean(rsInfo.getColumnName(i)));
                            break;
                        case 91: //Date
                            rsDest.updateDate(rsInfo.getColumnName(i), rsSource.getDate(rsInfo.getColumnName(i)));
                            break;
                        case 8: //Double
                            rsDest.updateDouble(rsInfo.getColumnName(i), rsSource.getDouble(rsInfo.getColumnName(i)));
                            break;
                        case 6: //Float
                            rsDest.updateFloat(rsInfo.getColumnName(i), rsSource.getFloat(rsInfo.getColumnName(i)));
                            break;
                        case 12 ://Varchar
                            rsDest.updateString(rsInfo.getColumnName(i), rsSource.getString(rsInfo.getColumnName(i)));
                            break;
                        default:
                            rsDest.updateString(rsInfo.getColumnName(i), rsSource.getString(rsInfo.getColumnName(i)));
                            break;
                    } //Switch
                    
                    
                }
            }
            return true;
        }
        catch(Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    
    public void MigrateDF() {
        try {
            Connection tmpConn=data.getConn();
            Statement stTmp,stDFHeader,stDFDetail,stDF;
            ResultSet rsTmp,rsDFHeader,rsDFDetail,rsDF;
            
            stTmp=tmpConn.createStatement();
            rsTmp=stTmp.executeQuery("SELECT DISTINCT(DF_NO) DF_NO FROM DF_ACTUAL");
            rsTmp.first();
            
            stDFHeader=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
            rsDFHeader=stDFHeader.executeQuery("SELECT * FROM D_INV_DECLARATION_HEADER");
            
            stDFDetail=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
            rsDFDetail=stDFDetail.executeQuery("SELECT * FROM D_INV_DECLARATION_DETAIL");
            
            if(rsTmp.getRow()>0) {
                while(!rsTmp.isAfterLast()) {
                    String DFNo=rsTmp.getString("DF_NO");
                    
                    stDF=tmpConn.createStatement();
                    rsDF=stDF.executeQuery("SELECT * FROM DF_ACTUAL WHERE DF_NO='"+DFNo+"'");
                    rsDF.first();
                    
                    rsDFHeader.moveToInsertRow();
                    rsDFHeader.updateInt("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                    rsDFHeader.updateString("DECLARATION_ID","0"+DFNo);
                    rsDFHeader.updateString("DECLARATION_DATE",rsDF.getString("DF_DATE"));
                    rsDFHeader.updateString("CONTRACTOR_NAME",rsDF.getString("PARTY_NM"));
                    rsDFHeader.updateString("ADD1","");
                    rsDFHeader.updateString("ADD2","");
                    rsDFHeader.updateString("ADD3","");
                    rsDFHeader.updateString("CITY","");
                    rsDFHeader.updateString("PINCODE","");
                    rsDFHeader.updateString("PO_NO","");
                    rsDFHeader.updateString("PO_DATE","0000-00-00");
                    rsDFHeader.updateString("ADD1","");
                    rsDFHeader.updateInt("FOR_DEPT_ID",0);
                    rsDFHeader.updateString("RECEIVED_BY","");
                    rsDFHeader.updateString("PURPOSE",rsDF.getString("PURPOSE"));
                    rsDFHeader.updateBoolean("APPROVED",true);
                    rsDFHeader.updateString("APPROVED_DATE","0000-00-00");
                    rsDFHeader.updateBoolean("REJECTED",false);
                    rsDFHeader.updateString("REJECTED_DATE","0000-00-00");
                    rsDFHeader.updateString("REMARKS","");
                    rsDFHeader.updateBoolean("CANCELLED",false);
                    rsDFHeader.updateInt("HIERARCHY_ID",0);
                    rsDFHeader.updateInt("CREATED_BY",0);
                    rsDFHeader.updateString("CREATED_DATE","0000-00-00");
                    rsDFHeader.updateInt("MODIFIED_BY",0);
                    rsDFHeader.updateString("MODIFIED_DATE","0000-00-00");
                    rsDFHeader.updateBoolean("CHANGED",false);
                    rsDFHeader.updateString("CHANGED_DATE","0000-00-00");
                    rsDFHeader.insertRow();
                    
                    rsDF.first();
                    while(!rsDF.isAfterLast()) {
                        rsDFDetail.moveToInsertRow();
                        rsDFDetail.updateInt("COMPANY_ID",EITLERPGLOBAL.gCompanyID);
                        rsDFDetail.updateString("DECLARATION_ID","0"+DFNo);
                        rsDFDetail.updateInt("SR_NO",rsDF.getRow());
                        rsDFDetail.updateString("ITEM_CODE","");
                        rsDFDetail.updateString("DECLARATION_DESC",rsDF.getString("DESC"));
                        rsDFDetail.updateInt("UNIT",rsDF.getInt("UNIT_ID"));
                        rsDFDetail.updateDouble("RECD_QTY",rsDF.getDouble("QTY"));
                        rsDFDetail.updateDouble("RETURNED_QTY",rsDF.getDouble("CONS_QTY")+rsDF.getDouble("RET_QTY"));
                        rsDFDetail.updateDouble("BAL_QTY",rsDFDetail.getDouble("RECD_QTY")-rsDFDetail.getDouble("RETURNED_QTY"));
                        rsDFDetail.updateBoolean("RETURNED",false);
                        rsDFDetail.updateString("EXP_RETURN_DATE","0000-00-00");
                        rsDFDetail.updateString("RETURNED_DATE","0000-00-00");
                        rsDFDetail.updateString("REMARKS",rsDF.getString("REMARKS"));
                        rsDFDetail.updateBoolean("CANCELED",false);
                        rsDFDetail.updateInt("CREATED_BY",0);
                        rsDFDetail.updateString("CREATED_DATE","0000-00-00");
                        rsDFDetail.updateInt("MODIFIED_BY",0);
                        rsDFDetail.updateString("MODIFIED_DATE","0000-00-00");
                        rsDFDetail.updateBoolean("CHANGED",false);
                        rsDFDetail.updateString("CHANGED_DATE","0000-00-00");
                        rsDFDetail.insertRow();
                        
                        rsDF.next();
                    }
                    
                    rsTmp.next();
                }
                
            }
            
            
            
            
            
            
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    
    private void CorrectMIRHierarchy() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp;
                    
                    String GRNNo="";
                    String MIRNo="";
                    int MIRSrNo=0;
                    String strSQL="";
                    
                    String theFile="MIRH.txt";
                    BufferedReader aFile=new BufferedReader(new FileReader(new File(theFile)));
                    
                    boolean Done=false;
                    while(!Done) {
                        String lineread=aFile.readLine();
                        
                        if(lineread==null) {
                            Done=true;
                        }
                        
                        else {
                            MIRNo=lineread;
                            lblStatus.setText(MIRNo);
                            lblStatus.repaint();
                            rsTmp=data.getResult("SELECT MAX(SR_NO) AS MAX_NO FROM D_COM_DOC_DATA WHERE MODULE_ID=5 AND DOC_NO='"+MIRNo+"'");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                int MaxNo=rsTmp.getInt("MAX_NO");
                                
                                rsTmp=data.getResult("SELECT USER_ID FROM D_COM_DOC_DATA WHERE MODULE_ID=5 AND DOC_NO='"+MIRNo+"' AND SR_NO="+MaxNo);
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    int UserID=rsTmp.getInt("USER_ID");
                                    
                                    if(UserID!=15) //Not Mr. Mody
                                    {
                                        MaxNo++;
                                        strSQL="INSERT INTO D_COM_DOC_DATA (COMPANY_ID,MODULE_ID,DOC_NO,DOC_DATE,USER_ID,STATUS,TYPE,REMARKS,SR_NO) VALUES(2,5,'"+MIRNo+"','0000-00-00',15,'P','A','',"+MaxNo+")";
                                        data.Execute(strSQL);
                                    }
                                }
                            }
                            
                            
                        }
                    }
                    aFile.close();
                    
                    JOptionPane.showMessageDialog(null,"Done Processing");
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
                
            };
        }.start();
        
    }
    
    
    
    private void ForwardMIR() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp;
                    
                    String GRNNo="";
                    String MIRNo="";
                    int MIRSrNo=0;
                    String strSQL="";
                    
                    String theFile="MIRH.txt";
                    BufferedReader aFile=new BufferedReader(new FileReader(new File(theFile)));
                    
                    boolean Done=false;
                    while(!Done) {
                        String lineread=aFile.readLine();
                        
                        if(lineread==null) {
                            Done=true;
                        }
                        
                        else {
                            MIRNo=lineread;
                            lblStatus.setText(MIRNo);
                            lblStatus.repaint();
                            rsTmp=data.getResult("SELECT USER_ID FROM D_COM_DOC_DATA WHERE MODULE_ID=5 AND DOC_NO='"+MIRNo+"' AND STATUS='W'");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()>0) {
                                int UserID=rsTmp.getInt("USER_ID");
                                int SrNo=0;
                                
                                rsTmp=data.getResult("SELECT SR_NO FROM D_COM_DOC_DATA WHERE MODULE_ID=5 AND DOC_NO='"+MIRNo+"' AND USER_ID=15 ORDER BY SR_NO DESC");
                                rsTmp.first();
                                if(rsTmp.getRow()>0) {
                                    SrNo=rsTmp.getInt("SR_NO");
                                }
                                
                                if(UserID!=15) {
                                    strSQL="UPDATE D_COM_DOC_DATA SET STATUS='A' WHERE MODULE_ID=5 AND DOC_NO='"+MIRNo+"'";
                                    data.Execute(strSQL);
                                    
                                    strSQL="UPDATE D_COM_DOC_DATA SET STATUS='W' WHERE MODULE_ID=5 AND DOC_NO='"+MIRNo+"' AND SR_NO="+SrNo;
                                    data.Execute(strSQL);
                                    
                                }
                            }
                            
                            
                        }
                    }
                    aFile.close();
                    
                    JOptionPane.showMessageDialog(null,"Done Processing");
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
                
            };
        }.start();
        
    }
    
    
    public void FindMissingNos() {
        try {
            int Start=0;
            int End=0;
            String docNo="";
            ResultSet rsTmp;
            
            //===Missing MIRs====//
            
            Start=545919;
            End=548143;
            
            System.out.println("Missing MIR");
            System.out.println("============");
            for(int i=Start;i<=End;i++) {
                docNo="A"+Integer.toString(i).trim();
                
                rsTmp=data.getResult("SELECT * FROM D_INV_MIR_HEADER WHERE MIR_NO='"+docNo+"'");
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    
                }
                else {
                    System.out.println(docNo);
                }
                
            }
            
            System.out.println("  ");
            System.out.println("  ");
            System.out.println("  ");
            
            
            
            //===Missing GRNs====//
            
            Start=545901;
            End=547814;
            
            System.out.println("Missing GRNs");
            System.out.println("============");
            for(int i=Start;i<=End;i++) {
                docNo="A"+Integer.toString(i).trim();
                
                rsTmp=data.getResult("SELECT * FROM D_INV_GRN_HEADER WHERE GRN_NO='"+docNo+"'");
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    
                }
                else {
                    System.out.println(docNo);
                }
                
            }
            
            System.out.println("  ");
            System.out.println("  ");
            System.out.println("  ");
            
            
            
            //===Missing Issues====//
            
            Start=511542;
            End=512284;
            
            System.out.println("Missing Issues");
            System.out.println("============");
            for(int i=Start;i<=End;i++) {
                docNo="A"+Integer.toString(i).trim();
                
                rsTmp=data.getResult("SELECT * FROM D_INV_ISSUE_HEADER WHERE ISSUE_NO='"+docNo+"'");
                rsTmp.first();
                
                if(rsTmp.getRow()>0) {
                    
                }
                else {
                    System.out.println(docNo);
                }
                
            }
            
            System.out.println("  ");
            System.out.println("  ");
            System.out.println("  ");
            
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    public void ValidateDocs() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsReceipt,rsTmp;
                    
                    rsReceipt=data.getResult("SELECT * FROM STOCK_LEDGER_SOURCE WHERE DOC_NO<>'' AND RECEIPT_QTY>0");
                    rsReceipt.first();
                    
                    java.sql.Date fromDate=java.sql.Date.valueOf("2005-04-01");
                    java.sql.Date toDate=java.sql.Date.valueOf("2005-11-30");
                    
                    while(!rsReceipt.isAfterLast()) {
                        String DocNo=rsReceipt.getString("DOC_NO");
                        String DocDate=rsReceipt.getString("DOC_DATE");
                        
                        rsTmp=data.getResult("SELECT GRN_DATE FROM D_INV_GRN_HEADER WHERE GRN_NO='"+DocNo+"'");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            java.sql.Date eitlDate=java.sql.Date.valueOf(rsTmp.getString("GRN_DATE"));
                            java.sql.Date foxDate=java.sql.Date.valueOf(DocDate);
                            
                            if(eitlDate.before(fromDate)||eitlDate.after(toDate)) {
                                //Wrong date entry
                                System.out.println("GRN No. :"+DocNo+" FOX PRO DATE :"+EITLERPGLOBAL.formatDate(DocDate)+" EITLERP DATE :"+EITLERPGLOBAL.formatDate(rsTmp.getString("GRN_DATE")));
                            }
                        }
                        
                        rsReceipt.next();
                    }
                    
                    
                    
                    rsReceipt=data.getResult("SELECT * FROM STOCK_LEDGER_SOURCE WHERE DOC_NO<>'' AND ISSUE_QTY>0");
                    rsReceipt.first();
                    
                    while(!rsReceipt.isAfterLast()) {
                        String DocNo=rsReceipt.getString("DOC_NO");
                        String DocDate=rsReceipt.getString("DOC_DATE");
                        
                        rsTmp=data.getResult("SELECT ISSUE_DATE FROM D_INV_ISSUE_HEADER WHERE ISSUE_NO='"+DocNo+"'");
                        rsTmp.first();
                        
                        if(rsTmp.getRow()>0) {
                            java.sql.Date eitlDate=java.sql.Date.valueOf(rsTmp.getString("ISSUE_DATE"));
                            java.sql.Date foxDate=java.sql.Date.valueOf(DocDate);
                            
                            if(eitlDate.before(fromDate)||eitlDate.after(toDate)) {
                                //Wrong date entry
                                System.out.println("Issue No. :"+DocNo+" FOX PRO DATE :"+EITLERPGLOBAL.formatDate(DocDate)+" EITLERP DATE :"+EITLERPGLOBAL.formatDate(rsTmp.getString("ISSUE_DATE")));
                            }
                        }
                        
                        rsReceipt.next();
                    }
                    
                    JOptionPane.showMessageDialog(null,"Done");
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    public void ArrangeForClosing() {
        new Thread() {
            
            public void run() {
                try {
                    
                    ResultSet rsItem,rsTmp,rsSr;
                    
                    rsItem=data.getResult("SELECT DISTINCT(ITEM_ID) ITEM_ID FROM STOCK_LEDGER_SOURCE");
                    rsItem.first();
                    while(!rsItem.isAfterLast()) {
                        
                        String ItemID=rsItem.getString("ITEM_ID");
                        int MaxSr=0;
                        
                        lblStatus.setText(ItemID);
                        
                        rsSr=data.getResult("SELECT MAX(SR_NO) MAXNO FROM STOCK_LEDGER_SOURCE WHERE ITEM_ID='"+ItemID+"'");
                        rsSr.first();
                        
                        if(rsSr.getRow()>0) {
                            MaxSr=rsSr.getInt("MAXNO");
                            
                            data.Execute("UPDATE STOCK_LEDGER_SOURCE SET DOC_TYPE='C' WHERE ITEM_ID='"+ItemID+"' AND SR_NO="+MaxSr);
                            
                        }
                        
                        
                        rsItem.next();
                    }
                    
                    lblStatus.setText("DONE");
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    
    private void updateBOE() {
        try {
            ResultSet rsTmp;
            
            rsTmp=data.getResult("SELECT A.GRN_NO,B.ITEM_ID,B.BOE_NO,B.QTY FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND GRN_DATE>='2005-04-01'  AND BOE_NO<>'X'");
            rsTmp.first();
            
            while(!rsTmp.isAfterLast()) {
                String ItemID=rsTmp.getString("ITEM_ID");
                String BOENo=rsTmp.getString("BOE_NO");
                
                
                data.Execute("UPDATE D_INV_ISSUE_DETAIL SET BOE_NO='"+BOENo+"' WHERE ITEM_CODE='"+ItemID+"' AND ISSUE_NO IN (SELECT ISSUE_NO FROM D_INV_ISSUE_HEADER WHERE ISSUE_DATE>='2005-04-01' AND APPROVED=1 AND CANCELED=0) ");
                
                rsTmp.next();
            }
            
        }
        catch(Exception e) {
            
        }
    }
    
    
    private void updateGRNDateToMIR() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp,rsItem,rsMIR;
                    
                    String toDate="2006-03-12";
                    String fromDate="2005-12-01";
                    
                    rsItem=data.getResult("SELECT ITEM_ID FROM D_INV_ITEM_MASTER_TMP");
                    rsItem.first();
                    
                    while(!rsItem.isAfterLast()) {
                        String ItemID=rsItem.getString("ITEM_ID");
                        
                        lblStatus.setText(ItemID);
                        
                        rsTmp=data.getResult("SELECT A.GRN_NO,A.GRN_DATE,B.SR_NO,B.MIR_NO,B.MIR_SR_NO,B.MIR_TYPE FROM D_INV_GRN_HEADER A,D_INV_GRN_DETAIL B WHERE A.GRN_NO=B.GRN_NO AND A.GRN_TYPE=B.GRN_TYPE AND A.GRN_TYPE=1 AND A.APPROVED=1 AND A.CANCELLED=0 AND B.ITEM_ID='"+ItemID+"' AND A.GRN_DATE>='"+fromDate+"' AND A.GRN_DATE<='"+toDate+"'");
                        rsTmp.first();
                        if(rsTmp.getRow()>0) {
                            
                            while(!rsTmp.isAfterLast()) {
                                String GRNNo=rsTmp.getString("GRN_NO");
                                String GRNDate=rsTmp.getString("GRN_DATE");
                                int GRNSrNo=rsTmp.getInt("SR_NO");
                                String MIRNo=rsTmp.getString("MIR_NO");
                                
                                if(!MIRNo.trim().equals("")) {
                                    rsMIR=data.getResult("SELECT MIR_DATE FROM D_INV_MIR_HEADER WHERE MIR_NO='"+MIRNo+"'");
                                    rsMIR.first();
                                    
                                    if(rsMIR.getRow()>0) {
                                        String MIRDate=rsMIR.getString("MIR_DATE");
                                        
                                        if(!MIRDate.trim().equals("0000-00-00")) {
                                            String newRemarks=" Actual GRN Date "+EITLERPGLOBAL.formatDate(GRNDate);
                                            //data.Execute("UPDATE D_INV_GRN_HEADER SET ACTUAL_DATE=GRN_DATE,GRN_DATE='"+MIRDate+"',REMARKS='"+newRemarks+"'+REMARKS WHERE GRN_NO='"+GRNNo+"' AND GRN_TYPE=1");
                                            data.Execute("UPDATE D_INV_GRN_HEADER SET ACTUAL_DATE=GRN_DATE,GRN_DATE='"+MIRDate+"' WHERE GRN_NO='"+GRNNo+"' AND GRN_TYPE=1");
                                        }
                                    }
                                    
                                }
                                
                                rsTmp.next();
                            }
                            
                        }
                        
                        
                        
                        rsItem.next();
                    }
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    
    
    private void updateGRNDateFromBackup() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp,rsItem;
                    Statement stTmp,stItem;
                    Connection tmpConn;
                    Connection sourceConn;
                    
                    tmpConn=data.getConn();
                    sourceConn=data.getConn(sdmlURL);
                    
                    stTmp=tmpConn.createStatement();
                    
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_GRN_HEADER WHERE GRN_DATE>='2005-04-01'");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String GRNNo=rsTmp.getString("GRN_NO");
                        lblStatus.setText("Updating "+GRNNo);
                        
                        stItem=sourceConn.createStatement();
                        rsItem=stItem.executeQuery("SELECT GRN_DATE FROM D_INV_GRN_HEADER WHERE GRN_NO='"+GRNNo+"'");
                        rsItem.first();
                        
                        if(rsItem.getRow()>0) {
                            String oldGRNDate=rsItem.getString("GRN_DATE");
                            Statement stUpdate=tmpConn.createStatement();
                            stUpdate.executeUpdate("UPDATE D_INV_GRN_HEADER SET GRN_DATE='"+oldGRNDate+"' WHERE GRN_NO='"+GRNNo+"'");
                        }
                        
                        rsTmp.next();
                    }
                    lblStatus.setText("Done.");
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    
    
    
    private void CompareClosingBalance() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp,rsItem;
                    Statement stTmp,stItem;
                    Connection tmpConn;
                    
                    tmpConn=data.getConn();
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("/root/Desktop/ValMismatch.txt")));
                    
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM STOCK_LEDGER_SOURCE WHERE DOC_TYPE='C' ");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String ItemID=rsTmp.getString("ITEM_ID");
                        double ClosingValue=rsTmp.getDouble("CLOSING_VALUE");
                        
                        lblStatus.setText("Item "+ItemID);
                        lblStatus.repaint();
                        
                        stItem=tmpConn.createStatement();
                        rsItem=stItem.executeQuery("SELECT * FROM D_COM_OPENING_STOCK_DETAIL WHERE ENTRY_NO=3 AND ITEM_ID='"+ItemID+"'");
                        rsItem.first();
                        
                        if(rsItem.getRow()>0) {
                            double dClosingValue=rsItem.getDouble("OPENING_VALUE");
                            
                            
                            if(Math.round(ClosingValue)!=Math.round(dClosingValue)) {
                                aFile.write("Item : "+ItemID+" Fox Pro "+ClosingValue+" -> "+dClosingValue);
                                aFile.newLine();
                            }
                        }
                        
                        
                        
                        rsTmp.next();
                    }
                    
                    aFile.close();
                    lblStatus.setText("Done.");
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    
    
    private void UpdateLocationMismatch() {
        new Thread() {
            
            public void run() {
                try {
                    ResultSet rsTmp;
                    Statement stTmp;
                    Connection tmpConn;
                    
                    tmpConn=data.getConn();
                    
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT A.ITEM_ID,A.LOCATION_ID AS ITEM_LOCATION,B.LOCATION_ID FROM D_INV_ITEM_MASTER A,D_INV_ITEM_LOT_MASTER B WHERE A.ITEM_ID=B.ITEM_ID AND A.LOCATION_ID<>B.LOCATION_ID ORDER BY ITEM_ID");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String ItemID=rsTmp.getString("ITEM_ID");
                        String NewLocation=rsTmp.getString("ITEM_LOCATION");
                        
                        lblStatus.setText("Item "+ItemID);
                        lblStatus.repaint();
                        
                        data.Execute("UPDATE D_INV_ITEM_LOT_MASTER SET LOCATION_ID='"+NewLocation+"' WHERE ITEM_ID='"+ItemID+"'");
                        
                        
                        rsTmp.next();
                    }
                    
                    lblStatus.setText("Done.");
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    
    
    private void UpdatePOIndentSrNo() {
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    rsTmp=data.getResult("SELECT  B.SR_NO,B.PO_NO,B.ITEM_ID,B.INDENT_NO FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B WHERE A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.APPROVED=1 AND B.INDENT_NO<>'' AND B.INDENT_SR_NO=0");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        
                        while(!rsTmp.isAfterLast()) {
                            lblStatus.setText(rsTmp.getString("PO_NO"));
                            
                            
                            String PONo=rsTmp.getString("PO_NO");
                            String ItemID=rsTmp.getString("ITEM_ID");
                            String IndentNo=rsTmp.getString("INDENT_NO");
                            int POSrNo=rsTmp.getInt("SR_NO");
                            
                            
                            rsIndent=data.getResult("SELECT SR_NO FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND ITEM_CODE='"+ItemID+"'");
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                int SrNo=rsIndent.getInt("SR_NO");
                                
                                data.Execute("UPDATE D_PUR_PO_DETAIL SET INDENT_SR_NO="+SrNo+" WHERE PO_NO='"+PONo+"' AND SR_NO="+POSrNo);
                            }
                            
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
            }
            
        }.start();
        
    }
    
    
    
    
    private void FindPendingPO() {
        
        new Thread(){
            public void run() {
                
                Connection tmpConn;
                Statement stTmp,stPO;
                ResultSet rsTmp,rsIndent;
                int MaxValue=0,curValue=0;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn();
                    rsTmp=data.getResult("SELECT A.PO_NO,A.PO_DATE,B.ITEM_ID,B.SR_NO,B.QTY,B.RECD_QTY FROM D_PUR_PO_HEADER A,D_PUR_PO_DETAIL B WHERE PO_DATE>='2004-01-01' AND RECD_QTY<QTY AND A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE AND A.APPROVED=1 AND A.CANCELLED=0");
                    rsTmp.first();
                    
                    if(rsTmp.getRow()>0) {
                        
                        while(!rsTmp.isAfterLast()) {
                            lblStatus.setText(rsTmp.getString("PO_NO"));
                            
                            String PONo=rsTmp.getString("PO_NO");
                            int POSrNo=rsTmp.getInt("SR_NO");
                            double aRecdQty=rsTmp.getDouble("RECD_QTY");
                            
                            rsIndent=data.getResult( "SELECT SUM(QTY) AS SUMQTY FROM D_INV_MIR_HEADER A,D_INV_MIR_DETAIL B WHERE A.MIR_NO=B.MIR_NO AND A.MIR_TYPE=B.MIR_TYPE AND A.APPROVED=1 AND A.CANCELLED=0 AND B.PO_NO='"+PONo+"' AND B.PO_SR_NO="+POSrNo);
                            rsIndent.first();
                            
                            if(rsIndent.getRow()>0) {
                                
                                double RecdQty=rsIndent.getDouble("SUMQTY");
                                
                                data.Execute("UPDATE D_PUR_PO_DETAIL SET RECD_QTY="+RecdQty+",PENDING_QTY=QTY-RECD_QTY WHERE PO_NO='"+PONo+"' AND SR_NO="+POSrNo);
                                
                            }
                            
                            
                            rsTmp.next();
                        }
                        
                        JOptionPane.showMessageDialog(null,"Completed");
                    }
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
            }
            
        }.start();
        
    }
    
    
    
    private void updateStockLedger() {
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp,stPO,stOpeningHeader,stOpeningDetail;
                ResultSet rsTmp,rsIndent,rsOpeningHeader,rsOpeningDetail;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    
                    rsTmp=data.getResult("SELECT * FROM D_INV_ITEM_MASTER_TMP");
                    rsTmp.first();
                    
                    tmpConn=data.getConn();
                    stOpeningHeader=tmpConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsOpeningHeader=stOpeningHeader.executeQuery("SELECT * FROM STOCK_LEDGER_SOURCE");
                    
                    int SrNo=0;
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String ItemID=rsTmp.getString("ITEM_ID");
                        
                        lblStatus.setText("Item "+ItemID);
                        
                        String WarehouseID=clsItem.getItemWareHouseID(3, ItemID);
                        String LocationID=clsItem.getItemLocationID(3,ItemID);
                        String LotNo="X";
                        String BOENo="X";
                        
                        lblStatus.setText(ItemID);
                        lblStatus.repaint();
                        
                        double OpeningQty=(rsTmp.getDouble("OP_QTY_MM")+rsTmp.getDouble("GI_QTY_MM"))-rsTmp.getDouble("IS_QTY_MM");
                        double OpeningValue=(rsTmp.getDouble("OP_VAL_MM")+rsTmp.getDouble("GI_VAL_MM"))-rsTmp.getDouble("IS_VAL_MM");
                        double ZeroValQty=(rsTmp.getDouble("OP_Z_QTY")+rsTmp.getDouble("GI_Z_QTY"))-rsTmp.getDouble("IS_Z_QTY");;
                        double OpeningRate=0;
                        
                        if(OpeningQty==0||OpeningValue==0) {
                            OpeningRate=0;
                        }
                        else {
                            OpeningRate=OpeningValue/OpeningQty;
                        }
                        
                        SrNo++;
                        
                        rsOpeningHeader.moveToInsertRow();
                        rsOpeningHeader.updateInt("COMPANY_ID",3);
                        rsOpeningHeader.updateInt("SR_NO",SrNo);
                        rsOpeningHeader.updateString("ITEM_ID",ItemID);
                        rsOpeningHeader.updateString("DOC_TYPE","C");
                        rsOpeningHeader.updateDouble("OPENING_QTY",rsTmp.getDouble("OP_QTY_MM"));
                        rsOpeningHeader.updateDouble("OPENING_VALUE",rsTmp.getDouble("OP_VAL_MM"));
                        rsOpeningHeader.updateDouble("RECEIPT_QTY",rsTmp.getDouble("GI_QTY_MM"));
                        rsOpeningHeader.updateDouble("RECEIPT_VALUE",rsTmp.getDouble("GI_VAL_MM"));
                        rsOpeningHeader.updateDouble("ISSUE_QTY",rsTmp.getDouble("IS_QTY_MM"));
                        rsOpeningHeader.updateDouble("ISSUE_VALUE",rsTmp.getDouble("IS_VAL_MM"));
                        rsOpeningHeader.updateDouble("CLOSING_QTY",OpeningQty);
                        rsOpeningHeader.updateDouble("CLOSING_VALUE",OpeningValue);
                        rsOpeningHeader.insertRow();
                        
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    private void CopyIndentFromBackup() {
        new Thread(){
            public void run() {
                Connection srcConn,destConn;
                Statement stSource,stDest,stIndent,stTmp,stIndentH,stIndentD,stIndentDH,stDocData;
                ResultSet rsSource,rsDest,rsIndent,rsTmp,rsIndentH,rsIndentD,rsIndentDH,rsDocData;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    
                    srcConn=data.getConn("jdbc:mysql://200.0.0.227:3306/Backup");
                    destConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    
                    
                    stIndentD=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsIndentD=stIndentD.executeQuery("SELECT * FROM D_INV_INDENT_DETAIL LIMIT 1");
                    
                    stIndentDH=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsIndentDH=stIndentDH.executeQuery("SELECT * FROM D_INV_INDENT_DETAIL_H LIMIT 1");
                    
                    stIndentH=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsIndentH=stIndentH.executeQuery("SELECT * FROM D_INV_INDENT_HEADER_H LIMIT 1");
                    
                    stDocData=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                    rsDocData=stDocData.executeQuery("SELECT * FROM D_COM_DOC_DATA LIMIT 1");
                    
                    
                    stIndent=destConn.createStatement();
                    rsIndent=stIndent.executeQuery("SELECT INDENT_NO FROM D_INV_INDENT_HEADER WHERE CHANGED_DATE='2006-06-08'");
                    rsIndent.first();
                    
                    if(rsIndent.getRow()>0) {
                        while(!rsIndent.isAfterLast()) {
                            String IndentNo=rsIndent.getString("INDENT_NO");
                            
                            stTmp=destConn.createStatement();
                            rsTmp=stTmp.executeQuery("SELECT INDENT_NO FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                            rsTmp.first();
                            
                            if(rsTmp.getRow()<=0) {
                                
                                lblStatus.setText("Indent "+IndentNo);
                                System.out.println(IndentNo);
                                //Not Found
                                
                                stTmp=destConn.createStatement();
                                stTmp.executeUpdate("UPDATE D_INV_INDENT_HEADER SET CHANGED=1,CHANGED_DATE='2006-06-11' WHERE INDENT_NO='"+IndentNo+"'");
                                
                                //Indent Header
                                stTmp=srcConn.createStatement();
                                rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_INDENT_HEADER_H WHERE INDENT_NO='"+IndentNo+"'");
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    while(!rsTmp.isAfterLast()) {
                                        rsIndentH.moveToInsertRow();
                                        CopyRecord(rsTmp,rsIndentH);
                                        rsIndentH.insertRow();
                                        
                                        rsTmp.next();
                                    }
                                }
                                
                                stTmp=srcConn.createStatement();
                                rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"'");
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    
                                    while(!rsTmp.isAfterLast()) {
                                        rsIndentD.moveToInsertRow();
                                        CopyRecord(rsTmp, rsIndentD);
                                        rsIndentD.insertRow();
                                        
                                        rsTmp.next();
                                    }
                                }
                                
                                stTmp=srcConn.createStatement();
                                rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_INDENT_DETAIL_H WHERE INDENT_NO='"+IndentNo+"'");
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    
                                    while(!rsTmp.isAfterLast()) {
                                        rsIndentDH.moveToInsertRow();
                                        CopyRecord(rsTmp,rsIndentDH);
                                        rsIndentDH.insertRow();
                                        rsTmp.next();
                                    }
                                }
                                
                                stTmp=srcConn.createStatement();
                                rsTmp=stTmp.executeQuery("SELECT * FROM D_COM_DOC_DATA WHERE MODULE_ID=3 AND DOC_NO='"+IndentNo+"'");
                                rsTmp.first();
                                
                                if(rsTmp.getRow()>0) {
                                    
                                    while(!rsTmp.isAfterLast()) {
                                        rsDocData.moveToInsertRow();
                                        CopyRecord(rsTmp,rsDocData);
                                        rsDocData.insertRow();
                                        rsTmp.next();
                                    }
                                    
                                }
                            }
                            
                            
                            rsIndent.next();
                        }
                        
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    
    private void UpdateSSIFlag() {
        new Thread(){
            public void run() {
                Connection srcConn,destConn;
                Statement stDF,stSupp;
                ResultSet rsDF;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    
                    destConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLS");
                    srcConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    
                    stSupp=srcConn.createStatement();
                    
                    stDF=destConn.createStatement();
                    rsDF=stDF.executeQuery("SELECT DF_NO,PARTY_NM FROM DF_ACTUAL WHERE TRIM(PARTY_NM)<>''");
                    rsDF.first();
                    
                    if(rsDF.getRow()>0) {
                        while(!rsDF.isAfterLast()) {
                            
                            String SuppCode=rsDF.getString("DF_NO");
                            String SSINo=rsDF.getString("PARTY_NM");
                            
                            lblStatus.setText(SuppCode);
                            
                            stSupp.executeUpdate("UPDATE D_COM_SUPP_MASTER SET SSIREG=1,SSIREG_NO='"+SSINo+"' WHERE SUPPLIER_CODE='"+SuppCode+"'");
                            
                            rsDF.next();
                        }
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    private void UpdateItemAmendment() {
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp;
                ResultSet rsTmp;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    
                    tmpConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLS");
                    
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_ITEM_MASTER_AMEND WHERE ITEM_ID NOT IN ('20201110','60407400','60410008','60801001','80201002','94326051')");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String ItemID=rsTmp.getString("ITEM_ID");
                        int AmendID=rsTmp.getInt("AMEND_ID");
                        
                        stTmp.executeUpdate("UPDATE D_COM_DOC_DATA SET DOC_NO='"+AmendID+"' WHERE MODULE_ID=51 AND DOC_NO='"+ItemID+"'");
                        
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    private void FindDiscrepencies() {
        
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp;
                Statement stIndent;
                ResultSet rsTmp;
                ResultSet rsIndent;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    
                    tmpConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLS");
                    
                    stTmp=tmpConn.createStatement();
                    stIndent=tmpConn.createStatement();
                    
                    rsTmp=stTmp.executeQuery("SELECT B.ITEM_ID,A.PO_NO,A.PO_DATE,B.INDENT_NO,B.INDENT_SR_NO FROM D_PUR_PO_HEADER A ,D_PUR_PO_DETAIL B WHERE A.APPROVED=1 AND A.PO_DATE>='2005-08-01' AND B.INDENT_NO<>'' AND B.INDENT_SR_NO>0 AND A.PO_TYPE=1 AND A.PO_NO=B.PO_NO AND A.PO_TYPE=B.PO_TYPE");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        
                        String IndentNo=rsTmp.getString("INDENT_NO");
                        int IndentSrNo=rsTmp.getInt("INDENT_SR_NO");
                        String ItemID=rsTmp.getString("ITEM_ID");
                        
                        
                        rsIndent=stIndent.executeQuery("SELECT * FROM D_INV_INDENT_DETAIL WHERE INDENT_NO='"+IndentNo+"' AND SR_NO="+IndentSrNo);
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            
                            String IndentItem=rsIndent.getString("ITEM_CODE");
                            
                            if(!IndentItem.trim().equals(ItemID)) {
                                System.out.println("PO No. "+rsTmp.getString("PO_NO")+" Indent No. "+IndentNo+" Sr. "+IndentSrNo+" Item Code "+IndentItem+"  PO Item ID"+ItemID);
                            }
                        }
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done Finding Descripencies ");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    private void CopyTransaction() {
        new Thread(){
            public void run() {
                Connection srcConn,destConn;
                Statement stTmp,stSource,stDest,stSupp;
                ResultSet rsTmp,rsSource,rsDest,rsSupp;
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    destConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    srcConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLS");
                    
                    stSupp=srcConn.createStatement();
                    rsSupp=stSupp.executeQuery("SELECT SUPP_ID,SUPPLIER_CODE FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='605008' ");
                    rsSupp.first();
                    
                    while(!rsSupp.isAfterLast()) {
                        String SuppID=Integer.toString(rsSupp.getInt("SUPP_ID"));
                        
                        stSource=srcConn.createStatement();
                        rsSource=stSource.executeQuery("SELECT * FROM D_COM_SUPP_MASTER WHERE SUPP_ID="+SuppID);
                        rsSource.first();
                        
                        stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsDest=stDest.executeQuery("SELECT * FROM D_COM_SUPP_MASTER LIMIT 1");
                        
                        while(!rsSource.isAfterLast()) {
                            rsDest.moveToInsertRow();
                            CopyRecord(rsSource, rsDest);
                            
                            rsDest.insertRow();
                            
                            rsSource.next();
                        }
                        
                        
                        stSource=srcConn.createStatement();
                        rsSource=stSource.executeQuery("SELECT * FROM D_COM_SUPP_MASTER_H WHERE SUPP_ID="+SuppID);
                        rsSource.first();
                        
                        stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsDest=stDest.executeQuery("SELECT * FROM D_COM_SUPP_MASTER_H LIMIT 1");
                        
                        while(!rsSource.isAfterLast()) {
                            rsDest.moveToInsertRow();
                            CopyRecord(rsSource, rsDest);
                            rsDest.insertRow();
                            
                            rsSource.next();
                        }
                        
                        
                        stSource=srcConn.createStatement();
                        rsSource=stSource.executeQuery("SELECT * FROM D_COM_SUPP_TERMS WHERE SUPP_ID="+SuppID);
                        rsSource.first();
                        
                        stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsDest=stDest.executeQuery("SELECT * FROM D_COM_SUPP_TERMS LIMIT 1");
                        
                        while(!rsSource.isAfterLast()) {
                            rsDest.moveToInsertRow();
                            CopyRecord(rsSource, rsDest);
                            rsDest.insertRow();
                            
                            rsSource.next();
                        }
                        
                        
                        
                        stSource=srcConn.createStatement();
                        rsSource=stSource.executeQuery("SELECT * FROM D_COM_SUPP_TERMS_H WHERE SUPP_ID="+SuppID);
                        rsSource.first();
                        
                        stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                        rsDest=stDest.executeQuery("SELECT * FROM D_COM_SUPP_TERMS_H LIMIT 1");
                        
                        while(!rsSource.isAfterLast()) {
                            rsDest.moveToInsertRow();
                            CopyRecord(rsSource, rsDest);
                            rsDest.insertRow();
                            
                            rsSource.next();
                        }
                        
                        
                        rsSupp.next();
                    }
                    
                    
                    
                    
                    lblStatus.setText("Done");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    
    
    private void UpdateAnkGRN() {
        
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp;
                Statement stIndent;
                ResultSet rsTmp;
                ResultSet rsIndent;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    
                    
                    // GRN HEADER
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_GRN_HEADER WHERE COMPANY_ID=3");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String GRNNo=rsTmp.getString("GRN_NO");
                        lblStatus.setText("GRN No. :"+GRNNo);
                        
                        //Find other records
                        stIndent=tmpConn.createStatement();
                        rsIndent=stIndent.executeQuery("SELECT * FROM D_INV_GRN_HEADER WHERE GRN_NO='"+GRNNo+"' AND COMPANY_ID=2");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            stTmp.executeUpdate("DELETE FROM D_INV_GRN_HEADER WHERE GRN_NO='"+GRNNo+"' AND COMPANY_ID=2");
                        }
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Starting GRN Detail ");
                    
                    // GRN DETAIL
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT DISTINCT(GRN_NO) FROM D_INV_GRN_DETAIL WHERE COMPANY_ID=3");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String GRNNo=rsTmp.getString("GRN_NO");
                        lblStatus.setText("GRN No. :"+GRNNo);
                        
                        //Find other records
                        stIndent=tmpConn.createStatement();
                        rsIndent=stIndent.executeQuery("SELECT * FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"' AND COMPANY_ID=2");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            stTmp.executeUpdate("DELETE FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"' AND COMPANY_ID=2");
                        }
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Starting Issue Header ");
                    
                    // ISSUE HEADER
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT * FROM D_INV_ISSUE_HEADER WHERE COMPANY_ID=3");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String IssueNo=rsTmp.getString("ISSUE_NO");
                        lblStatus.setText("Issue No. :"+IssueNo);
                        
                        //Find other records
                        stIndent=tmpConn.createStatement();
                        rsIndent=stIndent.executeQuery("SELECT * FROM D_INV_ISSUE_HEADER WHERE ISSUE_NO='"+IssueNo+"' AND COMPANY_ID=2");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            stTmp.executeUpdate("DELETE FROM D_INV_ISSUE_HEADER WHERE ISSUE_NO='"+IssueNo+"' AND COMPANY_ID=2");
                        }
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Starting Issue Detail ");
                    
                    // ISSUE DETAIL
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT DISTINCT(ISSUE_NO) FROM D_INV_ISSUE_DETAIL WHERE COMPANY_ID=3");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String IssueNo=rsTmp.getString("ISSUE_NO");
                        lblStatus.setText("Issue No. :"+IssueNo);
                        
                        //Find other records
                        stIndent=tmpConn.createStatement();
                        rsIndent=stIndent.executeQuery("SELECT * FROM D_INV_ISSUE_DETAIL WHERE ISSUE_NO='"+IssueNo+"' AND COMPANY_ID=2");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            stTmp.executeUpdate("DELETE FROM D_INV_ISSUE_DETAIL WHERE ISSUE_NO='"+IssueNo+"' AND COMPANY_ID=2");
                        }
                        
                        rsTmp.next();
                    }
                    
                    
                    lblStatus.setText("Done Finding Descripencies ");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    private void FindDuplicateItemCodes() {
        
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp;
                Statement stIndent;
                ResultSet rsTmp;
                ResultSet rsIndent;
                Statement stSr;
                ResultSet rsSr;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    
                    // GRN HEADER
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT DISTINCT(ITEM_ID) FROM D_INV_ITEM_MASTER");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String ItemID=rsTmp.getString("ITEM_ID");
                        lblStatus.setText("Item ID :"+ItemID);
                        
                        //Find other records
                        stIndent=tmpConn.createStatement();
                        rsIndent=stIndent.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_INV_ITEM_MASTER WHERE ITEM_ID='"+ItemID+"'");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            if(rsIndent.getInt("THECOUNT")>1) {
                                stSr=tmpConn.createStatement();
                                rsSr=stSr.executeQuery("SELECT MAX(ITEM_SYS_ID) AS MIN_ID FROM D_INV_ITEM_MASTER WHERE ITEM_ID='"+ItemID+"'");
                                rsSr.first();
                                
                                System.out.println(ItemID);
                                if(rsSr.getRow()>0) {
                                    long MinSr=rsSr.getLong("MIN_ID");
                                    //stSr.executeUpdate("UPDATE D_INV_ITEM_MASTER SET ITEM_ID='"+"U3_"+ItemID+"' WHERE ITEM_SYS_ID="+MinSr);
                                    
                                    //stSr.executeUpdate("INSERT INTO TMP_LEDGER (ITEM_ID) VALUES('"+ItemID+"')");
                                }
                                
                            }
                            
                        }
                        
                        rsTmp.next();
                    }
                    
                    lblStatus.setText("Done Finding Descripencies ");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    private void FindDuplicateSuppCodes() {
        
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp;
                Statement stIndent;
                ResultSet rsTmp;
                ResultSet rsIndent;
                Statement stSr;
                ResultSet rsSr;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    tmpConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    
                    // GRN HEADER
                    stTmp=tmpConn.createStatement();
                    rsTmp=stTmp.executeQuery("SELECT DISTINCT(SUPPLIER_CODE) FROM D_COM_SUPP_MASTER");
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast()) {
                        String SuppID=rsTmp.getString("SUPPLIER_CODE");
                        lblStatus.setText("Supplier :"+SuppID);
                        
                        //Find other records
                        stIndent=tmpConn.createStatement();
                        rsIndent=stIndent.executeQuery("SELECT COUNT(*) AS THECOUNT FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+SuppID+"'");
                        rsIndent.first();
                        
                        if(rsIndent.getRow()>0) {
                            if(rsIndent.getInt("THECOUNT")>1) {
                                stSr=tmpConn.createStatement();
                                rsSr=stSr.executeQuery("SELECT MAX(SUPP_ID) AS MIN_ID FROM D_COM_SUPP_MASTER WHERE SUPPLIER_CODE='"+SuppID+"'");
                                rsSr.first();
                                
                                System.out.println(SuppID);
                                if(rsSr.getRow()>0) {
                                    long MinSr=rsSr.getLong("MIN_ID");
                                    stSr.executeUpdate("UPDATE D_COM_SUPP_MASTER SET SUPPLIER_CODE='"+"U5_"+SuppID+"' WHERE SUPP_ID="+MinSr);
                                    
                                    //stSr.executeUpdate("INSERT INTO TMP_LEDGER (ITEM_ID) VALUES('"+ItemID+"')");
                                }
                                
                            }
                            
                        }
                        
                        rsTmp.next();
                    }
                    
                    lblStatus.setText("Done Finding Descripencies ");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }
    
    
    private void CompareIssueMIR() {
        new Thread() {
            public void run() {
                try {
                    
                    Connection srcConn,destConn;
                    
                    srcConn=data.getConn("jdbc:mysql://200.0.0.227:3306/DINESHMILLSA");
                    destConn=data.getConn("jdbc:mysql://200.0.0.227:3306/CloneAnk");
                    
                    BufferedWriter aFile=new BufferedWriter(new FileWriter(new File("/root/Desktop/MIRIssueMismatch.txt")));
                    
                    
                    //Compare Issues
                    Statement stDestIssue=destConn.createStatement();
                    
                    Statement stSrcIssue=srcConn.createStatement();
                    ResultSet rsSrcIssue=stSrcIssue.executeQuery("SELECT A.ISSUE_NO,A.ISSUE_DATE,B.ITEM_CODE,B.QTY,B.SR_NO FROM D_INV_ISSUE_HEADER A,D_INV_ISSUE_DETAIL B WHERE A.ISSUE_NO=B.ISSUE_NO AND A.ISSUE_DATE>='2006-04-01' ORDER BY A.ISSUE_DATE");
                    
                    while(!rsSrcIssue.isAfterLast()) {
                        
                        
                        
                        
                        rsSrcIssue.next();
                    }
                    
                    
                    
                    aFile.close();
                    lblStatus.setText("Done.");
                    
                }
                catch(Exception e) {
                    
                }
            };
        }.start();
    }
    
    
    
    private void UpdateFinancePartyMaster() {
        
        new Thread(){
            public void run() {
                Connection srcConn;
                Connection destConn;
                
                
                
                
                try {

                srcConn=data.getConn(sdmlURL);
                destConn=data.getConn(FinanceURL);
                
                Statement stSource=srcConn.createStatement();
                Statement stDest=destConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
                Statement stTemp=destConn.createStatement();
                
                
                ResultSet rsSource=stSource.executeQuery("SELECT * FROM D_COM_SUPP_MASTER ");
                ResultSet rsDest=stDest.executeQuery("SELECT * FROM D_FIN_PARTY_MASTER");
                ResultSet rsTemp;
                
                int PartyID=0;
                    
                    rsSource.first();
                    
                    while(!rsSource.isAfterLast()) {
                        String PartyCode=rsSource.getString("SUPPLIER_CODE");
                        
                        rsTemp=stTemp.executeQuery("SELECT * FROM D_FIN_PARTY_MASTER WHERE PARTY_CODE='"+PartyCode+"'");
                        rsTemp.first();
                        
                        if(rsTemp.getRow()<=0) {
                            
                            System.out.println("Updated Party "+PartyCode);
                            
                            rsTemp=stTemp.executeQuery("SELECT MAX(PARTY_ID) AS MAXID FROM D_FIN_PARTY_MASTER");
                            rsTemp.first();
                            
                            if(rsTemp.getRow()>0) {
                                PartyID=rsTemp.getInt("MAXID")+1;
                            }
                            
                            
                            
                            //Add Party
                            rsDest.moveToInsertRow();
                            rsDest.updateInt("COMPANY_ID",rsSource.getInt("COMPANY_ID"));
                            rsDest.updateString("PARTY_CODE",rsSource.getString("SUPPLIER_CODE"));
                            rsDest.updateString("MAIN_ACCOUNT_CODE","");
                            rsDest.updateInt("PARTY_ID",PartyID);
                            rsDest.updateString("PARTY_NAME",rsSource.getString("SUPP_NAME"));
                            rsDest.updateString("SH_NAME","");
                            rsDest.updateString("REMARKS","");
                            rsDest.updateString("SH_CODE","");
                            rsDest.updateDouble("CREDIT_DAYS",0);
                            rsDest.updateDouble("CREDIT_LIMIT",0);
                            rsDest.updateDouble("DEBIT_LIMIT",0);
                            rsDest.updateString("ADDRESS",rsSource.getString("ADD1")+" "+rsSource.getString("ADD2")+" "+rsSource.getString("ADD3"));
                            rsDest.updateString("CITY",rsSource.getString("CITY"));
                            rsDest.updateString("STATE",rsSource.getString("STATE"));
                            rsDest.updateString("COUNTRY",rsSource.getString("COUNTRY"));
                            rsDest.updateString("PINCODE",rsSource.getString("PINCODE"));
                            rsDest.updateString("PHONE",rsSource.getString("PHONE_O"));
                            rsDest.updateString("FAX",rsSource.getString("FAX_NO"));
                            rsDest.updateString("MOBILE",rsSource.getString("MOBILE_NO"));
                            rsDest.updateString("EMAIL",rsSource.getString("EMAIL_ADD"));
                            rsDest.updateString("URL",rsSource.getString("WEB_SITE"));
                            rsDest.updateString("TIN_NO",rsSource.getString("GST_NO"));
                            rsDest.updateString("TIN_DATE",rsSource.getString("GST_DATE"));
                            rsDest.updateString("CST_NO",rsSource.getString("CST_NO"));
                            rsDest.updateString("CST_DATE",rsSource.getString("CST_DATE"));
                            rsDest.updateString("ECC_NO",rsSource.getString("ECC_NO"));
                            rsDest.updateString("ECC_DATE",rsSource.getString("ECC_DATE"));
                            rsDest.updateString("SERVICE_TAX_NO",rsSource.getString("SERVICETAX_NO"));
                            rsDest.updateString("SERVICE_TAX_DATE",rsSource.getString("SERVICETAX_DATE"));
                            rsDest.updateString("SSI_NO",rsSource.getString("SSIREG_NO"));
                            rsDest.updateString("SSI_DATE",rsSource.getString("SSIREG_DATE"));
                            rsDest.updateString("ESI_NO",rsSource.getString("ESIREG_NO"));
                            rsDest.updateString("ESI_DATE",rsSource.getString("ESIREG_DATE"));
                            rsDest.insertRow();
                            
                            
                            
                        }
                        
                        
                        
                        rsSource.next();
                    }
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                }
                catch(Exception e) {
                    JOptionPane.showMessageDialog(null,e.getMessage());
                    
                }
            }
            
        }.start();
        
    }
    
private void TempRemoveIt() {
        
        new Thread(){
            public void run() {
                Connection tmpConn;
                Statement stTmp;
                Statement stIndent;
                ResultSet rsTmp;
                ResultSet rsIndent;
                Statement stSr;
                ResultSet rsSr;
                
                
                try {
                    
                    lblStatus.setText("Starting...");
                    lblStatus.repaint();
                    
                    rsTmp=data.getResult("SELECT * FROM TMP_GENERAL",sdmlURL);
                    rsTmp.first();
                    
                    while(!rsTmp.isAfterLast())
                    {
                      String GRNNo=rsTmp.getString("COLUMN_1");
                      int SrNo=rsTmp.getInt("SR_NO");
                      double Total=data.getDoubleValueFromDB("SELECT ROUND(SUM(LANDED_RATE*QTY),2) AS VALUE FROM D_INV_GRN_DETAIL WHERE GRN_NO='"+GRNNo+"' AND GRN_TYPE=1",sdmlURL);
                      
                      data.Execute("UPDATE TMP_GENERAL SET COLUMN_3="+Total+" WHERE SR_NO="+SrNo,sdmlURL);

                      rsTmp.next();  
                    }
                    
                    
                    
                    lblStatus.setText("Done Finding Descripencies ");
                    lblStatus.repaint();
                }
                catch(Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null,e.getMessage());
                }
                
            }
            
        }.start();
    }    
}
